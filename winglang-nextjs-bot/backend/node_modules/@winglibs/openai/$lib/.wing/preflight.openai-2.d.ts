import * as $internal from "@winglang/sdk/lib/core/types"
import { std } from "@winglang/sdk"
import { cloud } from "@winglang/sdk"
import { util } from "@winglang/sdk"
export interface CompletionParams {
  readonly model?: (string) | undefined;
  readonly maxTokens?: (number) | undefined;
}
export interface OpenAIProps {
  readonly apiKey?: (string) | undefined;
  readonly org?: (string) | undefined;
  readonly apiKeySecret?: (cloud.Secret) | undefined;
  readonly orgSecret?: (cloud.Secret) | undefined;
}
export interface IClient
{
}
export interface IClient$Inflight
{
  readonly createCompletion: (params: Readonly<$internal.Json>) => Promise<Readonly<$internal.Json>>;
}
export class Sim implements IClient
{
  constructor();
}
export class OpenAI extends std.Resource
{
  constructor(scope: $internal.Construct, id: string, props?: (OpenAIProps) | undefined);
  [$internal.INFLIGHT_SYMBOL]?: OpenAI$Inflight;
  _supportedOps(): $internal.OperationsOf<OpenAI$Inflight>;
}
export class OpenAI$Inflight
{
  constructor(props?: (OpenAIProps) | undefined);
  createCompletion: (prompt: string, params?: (CompletionParams) | undefined) => Promise<string>;
  static createNewInflightClient: (apiKey: string, org?: (string) | undefined) => Promise<IClient>;
}