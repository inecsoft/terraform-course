"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataTerraformRemoteStateGcs = exports.GcsBackend = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const terraform_backend_1 = require("../terraform-backend");
const util_1 = require("../util");
const terraform_remote_state_1 = require("../terraform-remote-state");
// eslint-disable-next-line jsdoc/require-jsdoc
class GcsBackend extends terraform_backend_1.TerraformBackend {
    constructor(scope, props) {
        super(scope, "backend", "gcs");
        this.props = props;
    }
    synthesizeAttributes() {
        return (0, util_1.keysToSnakeCase)({ ...this.props });
    }
    synthesizeHclAttributes() {
        return (0, util_1.keysToSnakeCase)({ ...this.props });
    }
    getRemoteStateDataSource(scope, name, _fromStack) {
        return new DataTerraformRemoteStateGcs(scope, name, {
            ...this.props,
            workspace: "${terraform.workspace}",
        });
    }
}
exports.GcsBackend = GcsBackend;
_a = JSII_RTTI_SYMBOL_1;
GcsBackend[_a] = { fqn: "cdktf.GcsBackend", version: "0.20.3" };
// eslint-disable-next-line jsdoc/require-jsdoc
class DataTerraformRemoteStateGcs extends terraform_remote_state_1.TerraformRemoteState {
    constructor(scope, id, config) {
        super(scope, id, "gcs", config);
    }
}
exports.DataTerraformRemoteStateGcs = DataTerraformRemoteStateGcs;
_b = JSII_RTTI_SYMBOL_1;
DataTerraformRemoteStateGcs[_b] = { fqn: "cdktf.DataTerraformRemoteStateGcs", version: "0.20.3" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2NzLWJhY2tlbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJnY3MtYmFja2VuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUdBLDREQUF3RDtBQUN4RCxrQ0FBMEM7QUFDMUMsc0VBR21DO0FBRW5DLCtDQUErQztBQUMvQyxNQUFhLFVBQVcsU0FBUSxvQ0FBZ0I7SUFDOUMsWUFBWSxLQUFnQixFQUFtQixLQUF1QjtRQUNwRSxLQUFLLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQURjLFVBQUssR0FBTCxLQUFLLENBQWtCO0lBRXRFLENBQUM7SUFFUyxvQkFBb0I7UUFDNUIsT0FBTyxJQUFBLHNCQUFlLEVBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFUyx1QkFBdUI7UUFDL0IsT0FBTyxJQUFBLHNCQUFlLEVBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFTSx3QkFBd0IsQ0FDN0IsS0FBZ0IsRUFDaEIsSUFBWSxFQUNaLFVBQWtCO1FBRWxCLE9BQU8sSUFBSSwyQkFBMkIsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFO1lBQ2xELEdBQUcsSUFBSSxDQUFDLEtBQUs7WUFDYixTQUFTLEVBQUUsd0JBQXdCO1NBQ3BDLENBQUMsQ0FBQztJQUNMLENBQUM7O0FBdEJILGdDQXVCQzs7O0FBRUQsK0NBQStDO0FBQy9DLE1BQWEsMkJBQTRCLFNBQVEsNkNBQW9CO0lBQ25FLFlBQ0UsS0FBZ0IsRUFDaEIsRUFBVSxFQUNWLE1BQXlDO1FBRXpDLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNsQyxDQUFDOztBQVBILGtFQVFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBIYXNoaUNvcnAsIEluY1xuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1QTC0yLjBcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgeyBUZXJyYWZvcm1CYWNrZW5kIH0gZnJvbSBcIi4uL3RlcnJhZm9ybS1iYWNrZW5kXCI7XG5pbXBvcnQgeyBrZXlzVG9TbmFrZUNhc2UgfSBmcm9tIFwiLi4vdXRpbFwiO1xuaW1wb3J0IHtcbiAgVGVycmFmb3JtUmVtb3RlU3RhdGUsXG4gIERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZUNvbmZpZyxcbn0gZnJvbSBcIi4uL3RlcnJhZm9ybS1yZW1vdGUtc3RhdGVcIjtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzZG9jL3JlcXVpcmUtanNkb2NcbmV4cG9ydCBjbGFzcyBHY3NCYWNrZW5kIGV4dGVuZHMgVGVycmFmb3JtQmFja2VuZCB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIHByaXZhdGUgcmVhZG9ubHkgcHJvcHM6IEdjc0JhY2tlbmRDb25maWcpIHtcbiAgICBzdXBlcihzY29wZSwgXCJiYWNrZW5kXCIsIFwiZ2NzXCIpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHN5bnRoZXNpemVBdHRyaWJ1dGVzKCk6IHsgW25hbWU6IHN0cmluZ106IGFueSB9IHtcbiAgICByZXR1cm4ga2V5c1RvU25ha2VDYXNlKHsgLi4udGhpcy5wcm9wcyB9KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzeW50aGVzaXplSGNsQXR0cmlidXRlcygpOiB7IFtuYW1lOiBzdHJpbmddOiBhbnkgfSB7XG4gICAgcmV0dXJuIGtleXNUb1NuYWtlQ2FzZSh7IC4uLnRoaXMucHJvcHMgfSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0UmVtb3RlU3RhdGVEYXRhU291cmNlKFxuICAgIHNjb3BlOiBDb25zdHJ1Y3QsXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIF9mcm9tU3RhY2s6IHN0cmluZ1xuICApOiBUZXJyYWZvcm1SZW1vdGVTdGF0ZSB7XG4gICAgcmV0dXJuIG5ldyBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVHY3Moc2NvcGUsIG5hbWUsIHtcbiAgICAgIC4uLnRoaXMucHJvcHMsXG4gICAgICB3b3Jrc3BhY2U6IFwiJHt0ZXJyYWZvcm0ud29ya3NwYWNlfVwiLFxuICAgIH0pO1xuICB9XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc2RvYy9yZXF1aXJlLWpzZG9jXG5leHBvcnQgY2xhc3MgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlR2NzIGV4dGVuZHMgVGVycmFmb3JtUmVtb3RlU3RhdGUge1xuICBjb25zdHJ1Y3RvcihcbiAgICBzY29wZTogQ29uc3RydWN0LFxuICAgIGlkOiBzdHJpbmcsXG4gICAgY29uZmlnOiBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVHY3NDb25maWdcbiAgKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCBcImdjc1wiLCBjb25maWcpO1xuICB9XG59XG4vKipcbiAqIFN0b3JlcyB0aGUgc3RhdGUgYXMgYW4gb2JqZWN0IGluIGEgY29uZmlndXJhYmxlIHByZWZpeCBpbiBhIHByZS1leGlzdGluZyBidWNrZXRcbiAqIG9uIEdvb2dsZSBDbG91ZCBTdG9yYWdlIChHQ1MpLiBUaGUgYnVja2V0IG11c3QgZXhpc3QgcHJpb3IgdG8gY29uZmlndXJpbmcgdGhlIGJhY2tlbmQuXG4gKlxuICogVGhpcyBiYWNrZW5kIHN1cHBvcnRzIHN0YXRlIGxvY2tpbmcuXG4gKlxuICogV2FybmluZyEgSXQgaXMgaGlnaGx5IHJlY29tbWVuZGVkIHRoYXQgeW91IGVuYWJsZSBPYmplY3QgVmVyc2lvbmluZyBvbiB0aGUgR0NTIGJ1Y2tldFxuICogdG8gYWxsb3cgZm9yIHN0YXRlIHJlY292ZXJ5IGluIHRoZSBjYXNlIG9mIGFjY2lkZW50YWwgZGVsZXRpb25zIGFuZCBodW1hbiBlcnJvci5cbiAqXG4gKiBSZWFkIG1vcmUgYWJvdXQgdGhpcyBiYWNrZW5kIGluIHRoZSBUZXJyYWZvcm0gZG9jczpcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLmhhc2hpY29ycC5jb20vdGVycmFmb3JtL2xhbmd1YWdlL3NldHRpbmdzL2JhY2tlbmRzL2djc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEdjc0JhY2tlbmRDb25maWcge1xuICAvKipcbiAgICogKFJlcXVpcmVkKSBUaGUgbmFtZSBvZiB0aGUgR0NTIGJ1Y2tldC4gVGhpcyBuYW1lIG11c3QgYmUgZ2xvYmFsbHkgdW5pcXVlLlxuICAgKi9cbiAgcmVhZG9ubHkgYnVja2V0OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIExvY2FsIHBhdGggdG8gR29vZ2xlIENsb3VkIFBsYXRmb3JtIGFjY291bnQgY3JlZGVudGlhbHMgaW4gSlNPTiBmb3JtYXQuXG4gICAqIElmIHVuc2V0LCBHb29nbGUgQXBwbGljYXRpb24gRGVmYXVsdCBDcmVkZW50aWFscyBhcmUgdXNlZC5cbiAgICogVGhlIHByb3ZpZGVkIGNyZWRlbnRpYWxzIG11c3QgaGF2ZSBTdG9yYWdlIE9iamVjdCBBZG1pbiByb2xlIG9uIHRoZSBidWNrZXQuXG4gICAqXG4gICAqIFdhcm5pbmc6IGlmIHVzaW5nIHRoZSBHb29nbGUgQ2xvdWQgUGxhdGZvcm0gcHJvdmlkZXIgYXMgd2VsbCxcbiAgICogaXQgd2lsbCBhbHNvIHBpY2sgdXAgdGhlIEdPT0dMRV9DUkVERU5USUFMUyBlbnZpcm9ubWVudCB2YXJpYWJsZS5cbiAgICovXG4gIHJlYWRvbmx5IGNyZWRlbnRpYWxzPzogc3RyaW5nO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBBIHRlbXBvcmFyeSBbT0F1dGggMi4wIGFjY2VzcyB0b2tlbl0gb2J0YWluZWQgZnJvbSB0aGUgR29vZ2xlIEF1dGhvcml6YXRpb24gc2VydmVyLFxuICAgKiBpLmUuIHRoZSBBdXRob3JpemF0aW9uOiBCZWFyZXIgdG9rZW4gdXNlZCB0byBhdXRoZW50aWNhdGUgSFRUUCByZXF1ZXN0cyB0byBHQ1AgQVBJcy5cbiAgICogVGhpcyBpcyBhbiBhbHRlcm5hdGl2ZSB0byBjcmVkZW50aWFscy5cbiAgICogSWYgYm90aCBhcmUgc3BlY2lmaWVkLCBhY2Nlc3NfdG9rZW4gd2lsbCBiZSB1c2VkIG92ZXIgdGhlIGNyZWRlbnRpYWxzIGZpZWxkLlxuICAgKi9cbiAgcmVhZG9ubHkgYWNjZXNzVG9rZW4/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIEdDUyBwcmVmaXggaW5zaWRlIHRoZSBidWNrZXQuXG4gICAqIE5hbWVkIHN0YXRlcyBmb3Igd29ya3NwYWNlcyBhcmUgc3RvcmVkIGluIGFuIG9iamVjdCBjYWxsZWQgPHByZWZpeD4vPG5hbWU+LnRmc3RhdGUuXG4gICAqL1xuICByZWFkb25seSBwcmVmaXg/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIEEgMzIgYnl0ZSBiYXNlNjQgZW5jb2RlZCAnY3VzdG9tZXIgc3VwcGxpZWQgZW5jcnlwdGlvbiBrZXknIHVzZWQgdG8gZW5jcnlwdCBhbGwgc3RhdGUuXG4gICAqL1xuICByZWFkb25seSBlbmNyeXB0aW9uS2V5Pzogc3RyaW5nO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBUaGUgc2VydmljZSBhY2NvdW50IHRvIGltcGVyc29uYXRlIGZvciBhY2Nlc3NpbmcgdGhlIFN0YXRlIEJ1Y2tldC5cbiAgICogWW91IG11c3QgaGF2ZSByb2xlcy9pYW0uc2VydmljZUFjY291bnRUb2tlbkNyZWF0b3Igcm9sZSBvbiB0aGF0IGFjY291bnQgZm9yIHRoZSBpbXBlcnNvbmF0aW9uIHRvIHN1Y2NlZWQuXG4gICAqIElmIHlvdSBhcmUgdXNpbmcgYSBkZWxlZ2F0aW9uIGNoYWluLCB5b3UgY2FuIHNwZWNpZnkgdGhhdCB1c2luZyB0aGUgaW1wZXJzb25hdGVfc2VydmljZV9hY2NvdW50X2RlbGVnYXRlcyBmaWVsZC5cbiAgICogQWx0ZXJuYXRpdmVseSwgdGhpcyBjYW4gYmUgc3BlY2lmaWVkIHVzaW5nIHRoZSBHT09HTEVfSU1QRVJTT05BVEVfU0VSVklDRV9BQ0NPVU5UIGVudmlyb25tZW50IHZhcmlhYmxlLlxuICAgKi9cbiAgcmVhZG9ubHkgaW1wZXJzb25hdGVTZXJ2aWNlQWNjb3VudD86IHN0cmluZztcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgVGhlIGRlbGVnYXRpb24gY2hhaW4gZm9yIGFuIGltcGVyc29uYXRpbmcgYSBzZXJ2aWNlIGFjY291bnRcbiAgICovXG4gIHJlYWRvbmx5IGltcGVyc29uYXRlU2VydmljZUFjY291bnREZWxlZ2F0ZXM/OiBzdHJpbmdbXTtcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgQSBDbG91ZCBLTVMga2V5ICgnY3VzdG9tZXItbWFuYWdlZCBlbmNyeXB0aW9uIGtleScpIHVzZWQgd2hlbiByZWFkaW5nIGFuZCB3cml0aW5nIHN0YXRlIGZpbGVzIGluIHRoZSBidWNrZXQuXG4gICAqIEZvcm1hdCBzaG91bGQgYmUgcHJvamVjdHMve3twcm9qZWN0fX0vbG9jYXRpb25zL3t7bG9jYXRpb259fS9rZXlSaW5ncy97e2tleVJpbmd9fS9jcnlwdG9LZXlzL3t7bmFtZX19LlxuICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgaW5jbHVkaW5nIElBTSByZXF1aXJlbWVudHMsIHNlZSB7QGxpbmsgaHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL3N0b3JhZ2UvZG9jcy9lbmNyeXB0aW9uL2N1c3RvbWVyLW1hbmFnZWQta2V5cyBDdXN0b21lci1tYW5hZ2VkIEVuY3J5cHRpb24gS2V5c30uXG4gICAqL1xuICByZWFkb25seSBrbXNFbmNyeXB0aW9uS2V5Pzogc3RyaW5nO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBBIFVSTCBjb250YWluaW5nIHRocmVlIHBhcnRzOiB0aGUgcHJvdG9jb2wsXG4gICAqIHRoZSBETlMgbmFtZSBwb2ludGluZyB0byBhIFByaXZhdGUgU2VydmljZSBDb25uZWN0IGVuZHBvaW50LFxuICAgKiBhbmQgdGhlIHBhdGggZm9yIHRoZSBDbG91ZCBTdG9yYWdlIEFQSSAoL3N0b3JhZ2UvdjEvYikuXG4gICAqIHtAbGluayBodHRwczovL2RldmVsb3Blci5oYXNoaWNvcnAuY29tL3RlcnJhZm9ybS9sYW5ndWFnZS9zZXR0aW5ncy9iYWNrZW5kcy9nY3Mjc3RvcmFnZV9jdXN0b21fZW5kcG9pbnQgU2VlIGhlcmUgZm9yIG1vcmUgZGV0YWlsc31cbiAgICovXG4gIHJlYWRvbmx5IHN0b3JlYWdlQ3VzdG9tRW5kcG9pbnQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlR2NzQ29uZmlnXG4gIGV4dGVuZHMgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlQ29uZmlnLFxuICAgIEdjc0JhY2tlbmRDb25maWcge31cbiJdfQ==