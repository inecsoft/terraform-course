"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnyListMap = exports.BooleanListMap = exports.NumberListMap = exports.StringListMap = exports.AnyMapList = exports.BooleanMapList = exports.NumberMapList = exports.StringMapList = exports.MapList = exports.ComplexObject = exports.ComplexMap = exports.AnyListList = exports.BooleanListList = exports.NumberListList = exports.StringListList = exports.BooleanList = exports.ComplexList = exports.ComplexComputedList = exports.AnyMap = exports.BooleanMap = exports.NumberMap = exports.StringMap = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
const tokens_1 = require("./tokens");
const _1 = require(".");
const stack_trace_1 = require("./tokens/private/stack-trace");
const errors_1 = require("./errors");
// eslint-disable-next-line jsdoc/require-jsdoc
class ComplexResolvable {
    constructor(terraformResource, terraformAttribute) {
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.creationStack = (0, stack_trace_1.captureStackTrace)();
    }
    get fqn() {
        if (!this._fqn) {
            this._fqn = this.computeFqn();
        }
        return this._fqn;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    resolve(_context) {
        return this.fqn;
    }
    toString() {
        return tokens_1.Token.asString(this);
    }
}
// eslint-disable-next-line jsdoc/require-jsdoc
class ComplexComputedAttribute extends ComplexResolvable {
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
    }
    getStringAttribute(terraformAttribute) {
        return tokens_1.Token.asString(this.interpolationForAttribute(terraformAttribute));
    }
    getNumberAttribute(terraformAttribute) {
        return tokens_1.Token.asNumber(this.interpolationForAttribute(terraformAttribute));
    }
    getListAttribute(terraformAttribute) {
        return tokens_1.Token.asList(this.interpolationForAttribute(terraformAttribute));
    }
    getBooleanAttribute(terraformAttribute) {
        return this.interpolationForAttribute(terraformAttribute);
    }
    getNumberListAttribute(terraformAttribute) {
        return tokens_1.Token.asNumberList(this.interpolationForAttribute(terraformAttribute));
    }
    getStringMapAttribute(terraformAttribute) {
        return tokens_1.Token.asStringMap(this.interpolationForAttribute(terraformAttribute));
    }
    getNumberMapAttribute(terraformAttribute) {
        return tokens_1.Token.asNumberMap(this.interpolationForAttribute(terraformAttribute));
    }
    getBooleanMapAttribute(terraformAttribute) {
        return tokens_1.Token.asBooleanMap(this.interpolationForAttribute(terraformAttribute));
    }
    getAnyMapAttribute(terraformAttribute) {
        return tokens_1.Token.asAnyMap(this.interpolationForAttribute(terraformAttribute));
    }
}
// eslint-disable-next-line jsdoc/require-jsdoc
class StringMap extends ComplexResolvable {
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
    }
    lookup(key) {
        return tokens_1.Token.asString(this.terraformResource.interpolationForAttribute(`${this.terraformAttribute}["${key}"]`));
    }
    computeFqn() {
        return tokens_1.Token.asString(this.terraformResource.interpolationForAttribute(this.terraformAttribute));
    }
}
exports.StringMap = StringMap;
_a = JSII_RTTI_SYMBOL_1;
StringMap[_a] = { fqn: "cdktf.StringMap", version: "0.20.3" };
// eslint-disable-next-line jsdoc/require-jsdoc
class NumberMap extends ComplexResolvable {
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
    }
    lookup(key) {
        return tokens_1.Token.asNumber(this.terraformResource.interpolationForAttribute(`${this.terraformAttribute}["${key}"]`));
    }
    computeFqn() {
        return tokens_1.Token.asString(this.terraformResource.interpolationForAttribute(this.terraformAttribute));
    }
}
exports.NumberMap = NumberMap;
_b = JSII_RTTI_SYMBOL_1;
NumberMap[_b] = { fqn: "cdktf.NumberMap", version: "0.20.3" };
// eslint-disable-next-line jsdoc/require-jsdoc
class BooleanMap extends ComplexResolvable {
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
    }
    lookup(key) {
        return this.terraformResource.interpolationForAttribute(`${this.terraformAttribute}["${key}"]`);
    }
    computeFqn() {
        return tokens_1.Token.asString(this.terraformResource.interpolationForAttribute(this.terraformAttribute));
    }
}
exports.BooleanMap = BooleanMap;
_c = JSII_RTTI_SYMBOL_1;
BooleanMap[_c] = { fqn: "cdktf.BooleanMap", version: "0.20.3" };
// eslint-disable-next-line jsdoc/require-jsdoc
class AnyMap extends ComplexResolvable {
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
    }
    lookup(key) {
        return tokens_1.Token.asAny(this.terraformResource.interpolationForAttribute(`${this.terraformAttribute}["${key}"]`));
    }
    computeFqn() {
        return tokens_1.Token.asString(this.terraformResource.interpolationForAttribute(this.terraformAttribute));
    }
}
exports.AnyMap = AnyMap;
_d = JSII_RTTI_SYMBOL_1;
AnyMap[_d] = { fqn: "cdktf.AnyMap", version: "0.20.3" };
/**
 * @deprecated Going to be replaced by Array of ComplexListItem
 * and will be removed in the future
 */
class ComplexComputedList extends ComplexComputedAttribute {
    constructor(terraformResource, terraformAttribute, complexComputedListIndex, wrapsSet) {
        super(terraformResource, terraformAttribute);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.complexComputedListIndex = complexComputedListIndex;
        this.wrapsSet = wrapsSet;
        throw (0, errors_1.providerVersionMismatch)();
    }
    interpolationForAttribute(property) {
        if (this.wrapsSet) {
            return (0, _1.propertyAccess)(_1.Fn.tolist(this.terraformResource.interpolationForAttribute(this.terraformAttribute)), [this.complexComputedListIndex, property]);
        }
        return this.terraformResource.interpolationForAttribute(`${this.terraformAttribute}[${this.complexComputedListIndex}].${property}`);
    }
    computeFqn() {
        if (this.wrapsSet) {
            return tokens_1.Token.asString((0, _1.propertyAccess)(_1.Fn.tolist(this.terraformResource.interpolationForAttribute(this.terraformAttribute)), [this.complexComputedListIndex]));
        }
        return tokens_1.Token.asString(this.terraformResource.interpolationForAttribute(`${this.terraformAttribute}[${this.complexComputedListIndex}]`));
    }
}
exports.ComplexComputedList = ComplexComputedList;
_e = JSII_RTTI_SYMBOL_1;
ComplexComputedList[_e] = { fqn: "cdktf.ComplexComputedList", version: "0.20.3" };
// eslint-disable-next-line jsdoc/require-jsdoc
class ComplexList extends ComplexResolvable {
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    computeFqn() {
        if (this.wrapsSet) {
            return tokens_1.Token.asString(_1.Fn.tolist(this.terraformResource.interpolationForAttribute(this.terraformAttribute)));
        }
        else {
            return tokens_1.Token.asString(this.terraformResource.interpolationForAttribute(this.terraformAttribute));
        }
    }
    /**
     * Creating an iterator for this complex list.
     * The list will be converted into a map with the mapKeyAttributeName as the key.
     * @param mapKeyAttributeName
     * @returns
     */
    allWithMapKey(mapKeyAttributeName) {
        return _1.TerraformIterator.fromComplexList(tokens_1.Token.asAny(this.computeFqn()), mapKeyAttributeName);
    }
}
exports.ComplexList = ComplexList;
_f = JSII_RTTI_SYMBOL_1;
ComplexList[_f] = { fqn: "cdktf.ComplexList", version: "0.20.3" };
// eslint-disable-next-line jsdoc/require-jsdoc
class BooleanList extends ComplexList {
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    get(index) {
        return _1.Fn.element(this, index);
    }
}
exports.BooleanList = BooleanList;
_g = JSII_RTTI_SYMBOL_1;
BooleanList[_g] = { fqn: "cdktf.BooleanList", version: "0.20.3" };
// eslint-disable-next-line jsdoc/require-jsdoc
class StringListList extends ComplexList {
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    get(index) {
        return tokens_1.Token.asList(this.terraformResource.interpolationForAttribute(`${this.terraformAttribute}[${index}]`));
    }
}
exports.StringListList = StringListList;
_h = JSII_RTTI_SYMBOL_1;
StringListList[_h] = { fqn: "cdktf.StringListList", version: "0.20.3" };
// eslint-disable-next-line jsdoc/require-jsdoc
class NumberListList extends ComplexList {
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    get(index) {
        return tokens_1.Token.asNumberList(this.terraformResource.interpolationForAttribute(`${this.terraformAttribute}[${index}]`));
    }
}
exports.NumberListList = NumberListList;
_j = JSII_RTTI_SYMBOL_1;
NumberListList[_j] = { fqn: "cdktf.NumberListList", version: "0.20.3" };
// eslint-disable-next-line jsdoc/require-jsdoc
class BooleanListList extends ComplexList {
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    get(index) {
        // This isn't fully supported
        return this.terraformResource.interpolationForAttribute(`${this.terraformAttribute}[${index}]`);
    }
}
exports.BooleanListList = BooleanListList;
_k = JSII_RTTI_SYMBOL_1;
BooleanListList[_k] = { fqn: "cdktf.BooleanListList", version: "0.20.3" };
// eslint-disable-next-line jsdoc/require-jsdoc
class AnyListList extends ComplexList {
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    get(index) {
        // This isn't fully supported
        return this.terraformResource.interpolationForAttribute(`${this.terraformAttribute}[${index}]`);
    }
}
exports.AnyListList = AnyListList;
_l = JSII_RTTI_SYMBOL_1;
AnyListList[_l] = { fqn: "cdktf.AnyListList", version: "0.20.3" };
// eslint-disable-next-line jsdoc/require-jsdoc
class ComplexMap extends ComplexResolvable {
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
    }
    computeFqn() {
        return tokens_1.Token.asString(this.terraformResource.interpolationForAttribute(this.terraformAttribute));
    }
    interpolationForAttribute(property) {
        return (0, _1.propertyAccess)(this.terraformResource.interpolationForAttribute(this.terraformAttribute), [property]);
    }
}
exports.ComplexMap = ComplexMap;
_m = JSII_RTTI_SYMBOL_1;
ComplexMap[_m] = { fqn: "cdktf.ComplexMap", version: "0.20.3" };
// eslint-disable-next-line jsdoc/require-jsdoc
class ComplexObject extends ComplexComputedAttribute {
    /**
     * @param terraformResource
     * @param terraformAttribute
     * @param complexObjectIndex the index of the complex object in a list
     * @param complexObjectIsFromSet set to true if this item is from inside a set and needs tolist() for accessing it
     *                               set to "0" for single list items
     */
    constructor(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex) {
        super(terraformResource, terraformAttribute);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.complexObjectIsFromSet = complexObjectIsFromSet;
        this.complexObjectIndex = complexObjectIndex;
    }
    interpolationForAttribute(property) {
        if (this.complexObjectIsFromSet) {
            return (0, _1.propertyAccess)(_1.Fn.tolist(this.terraformResource.interpolationForAttribute(this.terraformAttribute)), [this.complexObjectIndex, property]);
        }
        return this.terraformResource.interpolationForAttribute(this.complexObjectIndex !== undefined
            ? `${this.terraformAttribute}[${this.complexObjectIndex}].${property}`
            : `${this.terraformAttribute}.${property}`);
    }
    interpolationAsList() {
        return this.terraformResource.interpolationForAttribute(`${this.terraformAttribute}.*`);
    }
    computeFqn() {
        if (this.complexObjectIsFromSet) {
            return tokens_1.Token.asString((0, _1.propertyAccess)(_1.Fn.tolist(this.terraformResource.interpolationForAttribute(this.terraformAttribute)), [this.complexObjectIndex]));
        }
        return tokens_1.Token.asString(this.terraformResource.interpolationForAttribute(this.complexObjectIndex !== undefined
            ? `${this.terraformAttribute}[${this.complexObjectIndex}]`
            : this.terraformAttribute));
    }
}
exports.ComplexObject = ComplexObject;
_o = JSII_RTTI_SYMBOL_1;
ComplexObject[_o] = { fqn: "cdktf.ComplexObject", version: "0.20.3" };
// eslint-disable-next-line jsdoc/require-jsdoc
class MapList extends ComplexResolvable {
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    computeFqn() {
        if (this.wrapsSet) {
            return tokens_1.Token.asString(_1.Fn.tolist(this.terraformResource.interpolationForAttribute(this.terraformAttribute)));
        }
        else {
            return tokens_1.Token.asString(this.terraformResource.interpolationForAttribute(this.terraformAttribute));
        }
    }
    interpolationForAttribute(property) {
        if (this.wrapsSet) {
            const matches = property.match(/\[([^\]]*)\]/); // need to extract out the index
            if (matches) {
                return (0, _1.propertyAccess)(_1.Fn.tolist(this.terraformResource.interpolationForAttribute(this.terraformAttribute)), [matches[1], property]);
            }
        }
        return this.terraformResource.interpolationForAttribute(`${this.terraformAttribute}${property}`);
    }
}
exports.MapList = MapList;
_p = JSII_RTTI_SYMBOL_1;
MapList[_p] = { fqn: "cdktf.MapList", version: "0.20.3" };
// eslint-disable-next-line jsdoc/require-jsdoc
class StringMapList extends MapList {
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    get(index) {
        return new StringMap(this, `[${index}]`);
    }
}
exports.StringMapList = StringMapList;
_q = JSII_RTTI_SYMBOL_1;
StringMapList[_q] = { fqn: "cdktf.StringMapList", version: "0.20.3" };
// eslint-disable-next-line jsdoc/require-jsdoc
class NumberMapList extends MapList {
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    get(index) {
        return new NumberMap(this, `[${index}]`);
    }
}
exports.NumberMapList = NumberMapList;
_r = JSII_RTTI_SYMBOL_1;
NumberMapList[_r] = { fqn: "cdktf.NumberMapList", version: "0.20.3" };
// eslint-disable-next-line jsdoc/require-jsdoc
class BooleanMapList extends MapList {
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    get(index) {
        return new BooleanMap(this, `[${index}]`);
    }
}
exports.BooleanMapList = BooleanMapList;
_s = JSII_RTTI_SYMBOL_1;
BooleanMapList[_s] = { fqn: "cdktf.BooleanMapList", version: "0.20.3" };
// eslint-disable-next-line jsdoc/require-jsdoc
class AnyMapList extends MapList {
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    get(index) {
        return new AnyMap(this, `[${index}]`);
    }
}
exports.AnyMapList = AnyMapList;
_t = JSII_RTTI_SYMBOL_1;
AnyMapList[_t] = { fqn: "cdktf.AnyMapList", version: "0.20.3" };
// eslint-disable-next-line jsdoc/require-jsdoc
class StringListMap extends ComplexMap {
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
    }
    get(key) {
        return tokens_1.Token.asList(this.terraformResource.interpolationForAttribute(`${this.terraformAttribute}[${key}]`));
    }
}
exports.StringListMap = StringListMap;
_u = JSII_RTTI_SYMBOL_1;
StringListMap[_u] = { fqn: "cdktf.StringListMap", version: "0.20.3" };
// eslint-disable-next-line jsdoc/require-jsdoc
class NumberListMap extends ComplexMap {
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
    }
    get(key) {
        return tokens_1.Token.asNumberList(this.terraformResource.interpolationForAttribute(`${this.terraformAttribute}[${key}]`));
    }
}
exports.NumberListMap = NumberListMap;
_v = JSII_RTTI_SYMBOL_1;
NumberListMap[_v] = { fqn: "cdktf.NumberListMap", version: "0.20.3" };
// eslint-disable-next-line jsdoc/require-jsdoc
class BooleanListMap extends ComplexMap {
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
    }
    get(key) {
        // This isn't fully supported
        return this.terraformResource.interpolationForAttribute(`${this.terraformAttribute}[${key}]`);
    }
}
exports.BooleanListMap = BooleanListMap;
_w = JSII_RTTI_SYMBOL_1;
BooleanListMap[_w] = { fqn: "cdktf.BooleanListMap", version: "0.20.3" };
// eslint-disable-next-line jsdoc/require-jsdoc
class AnyListMap extends ComplexMap {
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
    }
    get(key) {
        // This isn't fully supported
        return this.terraformResource.interpolationForAttribute(`${this.terraformAttribute}[${key}]`);
    }
}
exports.AnyListMap = AnyListMap;
_x = JSII_RTTI_SYMBOL_1;
AnyListMap[_x] = { fqn: "cdktf.AnyListMap", version: "0.20.3" };
//# sourceMappingURL=data:application/json;base64,