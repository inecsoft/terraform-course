import { Construct } from "constructs";
import { VisualComponent } from "./base";
import { UIComponent } from "../core";
import { IInflight } from "../std";
/**
 * Global identifier for `HttpClient`.
 */
export declare const API_FQN: string;
/**
 * An HttpClient can be used to make HTTP requests.
 * @noinflight
 */
export declare class HttpClient extends VisualComponent {
    /**
     * Creates a new ui.HttpClient instance through the app.
     * @internal
     */
    static _newHttpClient(scope: Construct, id: string, label: string, getUrlHandler: IHttpClientGetUrlHandler, getApiSpecHandler: IHttpClientGetApiSpecHandler): HttpClient;
    private readonly getUrlfn;
    private readonly getApiSpecfn;
    private readonly label;
    constructor(scope: Construct, id: string, label: string, getUrlHandler: IHttpClientGetUrlHandler, getApiSpecHandler: IHttpClientGetApiSpecHandler);
    /** @internal */
    _toUIComponent(): UIComponent;
    /** @internal */
    _toInflight(): string;
}
/**
 * A resource with an inflight "handle" method that can be passed to
 * `IHttpClient`.
 *
 * @inflight `@winglang/sdk.ui.IHttpClientGetUrlHandlerClient`
 */
export interface IHttpClientGetUrlHandler extends IInflight {
}
/**
 * A resource with an inflight "handle" method that can be passed to
 * `IHttpClient`.
 *
 * @inflight `@winglang/sdk.ui.IHttpClientGetApiSpecHandlerClient`
 */
export interface IHttpClientGetApiSpecHandler extends IInflight {
}
/**
 * Inflight client for `IHttpClientGetUrlHandler`.
 */
export interface IHttpClientGetUrlHandlerClient {
    /**
     * Function that returns the URL to make a request to.
     * @inflight
     */
    handle(): Promise<string>;
}
/**
 * Inflight client for `IHttpClientGetApiSpecHandler`.
 */
export interface IHttpClientGetApiSpecHandlerClient {
    /**
     * Function that returns the OpenAPI spec.
     * @inflight
     */
    handle(): Promise<string>;
}
