"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileBrowser = exports.FILE_BROWSER_FQN = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const base_1 = require("./base");
const cloud_1 = require("../cloud");
const constants_1 = require("../constants");
const core_1 = require("../core");
const types_1 = require("../core/types");
/**
 * Global identifier for `FileBrowser`.
 */
exports.FILE_BROWSER_FQN = (0, constants_1.fqnForType)("ui.FileBrowser");
/**
 * A file browser can be used to browse files.
 * @noinflight
 */
class FileBrowser extends base_1.VisualComponent {
    /**
     * Creates a new ui.FileBrowser instance through the app.
     * @internal
     */
    static _newFileBrowser(scope, id, label, handlers) {
        return core_1.App.of(scope).newAbstract(exports.FILE_BROWSER_FQN, scope, id, label, handlers);
    }
    constructor(scope, id, label, handlers) {
        super(scope, id);
        this.label = label;
        const getHandler = (0, core_1.lift)({ handler: handlers.get }).inflight(async (ctx, payload) => {
            try {
                const fileName = JSON.parse(payload).fileName;
                return await ctx.handler(fileName);
            }
            catch (e) {
                throw new Error("Invalid payload for file browser get handler client");
            }
        });
        const putHandler = (0, core_1.lift)({ handler: handlers.put }).inflight(async (ctx, payload) => {
            try {
                const { fileName, fileContent } = JSON.parse(payload);
                return await ctx.handler(fileName, fileContent);
            }
            catch (e) {
                throw new Error("Invalid payload for file browser put handler client");
            }
        });
        const deleteHandler = (0, core_1.lift)({ handler: handlers.delete }).inflight(async (ctx, payload) => {
            try {
                const fileName = JSON.parse(payload).fileName;
                return await ctx.handler(fileName);
            }
            catch (e) {
                throw new Error("Invalid payload for file browser delete handler client");
            }
        });
        const listHandler = (0, core_1.lift)({ handler: handlers.list }).inflight(async (ctx) => {
            try {
                return await ctx.handler();
            }
            catch (e) {
                throw new Error("Invalid payload for file browser list handler client");
            }
        });
        this.getFn = new cloud_1.Function(this, "get", getHandler);
        this.putFn = new cloud_1.Function(this, "put", putHandler);
        this.deleteFn = new cloud_1.Function(this, "delete", deleteHandler);
        this.listFn = new cloud_1.Function(this, "list", listHandler);
    }
    /** @internal */
    _toUIComponent() {
        return {
            kind: "file-browser",
            label: this.label,
            putHandler: this.putFn.node.path,
            deleteHandler: this.deleteFn.node.path,
            getHandler: this.getFn.node.path,
            listHandler: this.listFn.node.path,
        };
    }
    /** @internal */
    _toInflight() {
        throw new Error("Method not implemented.");
    }
}
exports.FileBrowser = FileBrowser;
_a = JSII_RTTI_SYMBOL_1;
FileBrowser[_a] = { fqn: "@winglang/sdk.ui.FileBrowser", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,