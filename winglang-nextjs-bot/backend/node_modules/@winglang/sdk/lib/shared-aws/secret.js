"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecretRef = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const inflight_host_1 = require("./inflight-host");
const permissions_1 = require("./permissions");
const util_1 = require("./util");
const __1 = require("..");
const core_1 = require("../core");
const types_1 = require("../core/types");
const std_1 = require("../std");
/**
 * A reference to an existing secret.
 *
 * @inflight `@winglang/sdk.cloud.ISecretClient`
 */
class SecretRef extends std_1.Resource {
    constructor(scope, id, secretArn) {
        super(scope, id);
        if (!(0, util_1.isValidArn)(secretArn, "secretsmanager")) {
            throw new Error(`"${secretArn}" is not a valid secretsmanager arn`);
        }
        this.secretArn = secretArn;
    }
    onLift(host, ops) {
        if (inflight_host_1.AwsInflightHost.isAwsInflightHost(host)) {
            host.addPolicyStatements(...(0, permissions_1.calculateSecretPermissions)(this.secretArn, ops));
        }
        host.addEnvironment(this.envName(), this.secretArn);
        super.onLift(host, ops);
    }
    /** @internal */
    _toInflight() {
        return core_1.InflightClient.for(__dirname, __filename, "SecretClient", [
            `process.env["${this.envName()}"]`,
        ]);
    }
    envName() {
        return `SECRET_ARN_${this.node.addr.slice(-8)}`;
    }
    /** @internal */
    get _liftMap() {
        return {
            [__1.cloud.SecretInflightMethods.VALUE]: [],
            [__1.cloud.SecretInflightMethods.VALUE_JSON]: [],
        };
    }
}
exports.SecretRef = SecretRef;
_a = JSII_RTTI_SYMBOL_1;
SecretRef[_a] = { fqn: "@winglang/sdk.aws.SecretRef", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VjcmV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NoYXJlZC1hd3Mvc2VjcmV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsbURBQWtEO0FBQ2xELCtDQUEyRDtBQUMzRCxpQ0FBb0M7QUFDcEMsMEJBQTJCO0FBRTNCLGtDQUFrRDtBQUNsRCx5Q0FBZ0Q7QUFDaEQsZ0NBQWlEO0FBRWpEOzs7O0dBSUc7QUFDSCxNQUFhLFNBQVUsU0FBUSxjQUFRO0lBTXJDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsU0FBaUI7UUFDekQsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixJQUFJLENBQUMsSUFBQSxpQkFBVSxFQUFDLFNBQVMsRUFBRSxnQkFBZ0IsQ0FBQyxFQUFFLENBQUM7WUFDN0MsTUFBTSxJQUFJLEtBQUssQ0FBQyxJQUFJLFNBQVMscUNBQXFDLENBQUMsQ0FBQztRQUN0RSxDQUFDO1FBRUQsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDN0IsQ0FBQztJQUVNLE1BQU0sQ0FBQyxJQUFtQixFQUFFLEdBQWE7UUFDOUMsSUFBSSwrQkFBZSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDNUMsSUFBSSxDQUFDLG1CQUFtQixDQUN0QixHQUFHLElBQUEsd0NBQTBCLEVBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FDbkQsQ0FBQztRQUNKLENBQUM7UUFFRCxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDcEQsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVELGdCQUFnQjtJQUNULFdBQVc7UUFDaEIsT0FBTyxxQkFBYyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRTtZQUMvRCxnQkFBZ0IsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJO1NBQ25DLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTyxPQUFPO1FBQ2IsT0FBTyxjQUFjLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDbEQsQ0FBQztJQUVELGdCQUFnQjtJQUNoQixJQUFXLFFBQVE7UUFDakIsT0FBTztZQUNMLENBQUMsU0FBSyxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUU7WUFDdkMsQ0FBQyxTQUFLLENBQUMscUJBQXFCLENBQUMsVUFBVSxDQUFDLEVBQUUsRUFBRTtTQUM3QyxDQUFDO0lBQ0osQ0FBQzs7QUE1Q0gsOEJBNkNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCB7IEF3c0luZmxpZ2h0SG9zdCB9IGZyb20gXCIuL2luZmxpZ2h0LWhvc3RcIjtcbmltcG9ydCB7IGNhbGN1bGF0ZVNlY3JldFBlcm1pc3Npb25zIH0gZnJvbSBcIi4vcGVybWlzc2lvbnNcIjtcbmltcG9ydCB7IGlzVmFsaWRBcm4gfSBmcm9tIFwiLi91dGlsXCI7XG5pbXBvcnQgeyBjbG91ZCB9IGZyb20gXCIuLlwiO1xuaW1wb3J0IHsgSVNlY3JldENsaWVudCB9IGZyb20gXCIuLi9jbG91ZFwiO1xuaW1wb3J0IHsgSW5mbGlnaHRDbGllbnQsIExpZnRNYXAgfSBmcm9tIFwiLi4vY29yZVwiO1xuaW1wb3J0IHsgSU5GTElHSFRfU1lNQk9MIH0gZnJvbSBcIi4uL2NvcmUvdHlwZXNcIjtcbmltcG9ydCB7IElJbmZsaWdodEhvc3QsIFJlc291cmNlIH0gZnJvbSBcIi4uL3N0ZFwiO1xuXG4vKipcbiAqIEEgcmVmZXJlbmNlIHRvIGFuIGV4aXN0aW5nIHNlY3JldC5cbiAqXG4gKiBAaW5mbGlnaHQgYEB3aW5nbGFuZy9zZGsuY2xvdWQuSVNlY3JldENsaWVudGBcbiAqL1xuZXhwb3J0IGNsYXNzIFNlY3JldFJlZiBleHRlbmRzIFJlc291cmNlIHtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwdWJsaWMgW0lORkxJR0hUX1NZTUJPTF0/OiBJU2VjcmV0Q2xpZW50O1xuICAvKiogVGhlIEFSTiBvZiB0aGUgc2VjcmV0ICovXG4gIHB1YmxpYyByZWFkb25seSBzZWNyZXRBcm46IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBzZWNyZXRBcm46IHN0cmluZykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICBpZiAoIWlzVmFsaWRBcm4oc2VjcmV0QXJuLCBcInNlY3JldHNtYW5hZ2VyXCIpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFwiJHtzZWNyZXRBcm59XCIgaXMgbm90IGEgdmFsaWQgc2VjcmV0c21hbmFnZXIgYXJuYCk7XG4gICAgfVxuXG4gICAgdGhpcy5zZWNyZXRBcm4gPSBzZWNyZXRBcm47XG4gIH1cblxuICBwdWJsaWMgb25MaWZ0KGhvc3Q6IElJbmZsaWdodEhvc3QsIG9wczogc3RyaW5nW10pOiB2b2lkIHtcbiAgICBpZiAoQXdzSW5mbGlnaHRIb3N0LmlzQXdzSW5mbGlnaHRIb3N0KGhvc3QpKSB7XG4gICAgICBob3N0LmFkZFBvbGljeVN0YXRlbWVudHMoXG4gICAgICAgIC4uLmNhbGN1bGF0ZVNlY3JldFBlcm1pc3Npb25zKHRoaXMuc2VjcmV0QXJuLCBvcHMpXG4gICAgICApO1xuICAgIH1cblxuICAgIGhvc3QuYWRkRW52aXJvbm1lbnQodGhpcy5lbnZOYW1lKCksIHRoaXMuc2VjcmV0QXJuKTtcbiAgICBzdXBlci5vbkxpZnQoaG9zdCwgb3BzKTtcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHVibGljIF90b0luZmxpZ2h0KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIEluZmxpZ2h0Q2xpZW50LmZvcihfX2Rpcm5hbWUsIF9fZmlsZW5hbWUsIFwiU2VjcmV0Q2xpZW50XCIsIFtcbiAgICAgIGBwcm9jZXNzLmVudltcIiR7dGhpcy5lbnZOYW1lKCl9XCJdYCxcbiAgICBdKTtcbiAgfVxuXG4gIHByaXZhdGUgZW52TmFtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiBgU0VDUkVUX0FSTl8ke3RoaXMubm9kZS5hZGRyLnNsaWNlKC04KX1gO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwdWJsaWMgZ2V0IF9saWZ0TWFwKCk6IExpZnRNYXAge1xuICAgIHJldHVybiB7XG4gICAgICBbY2xvdWQuU2VjcmV0SW5mbGlnaHRNZXRob2RzLlZBTFVFXTogW10sXG4gICAgICBbY2xvdWQuU2VjcmV0SW5mbGlnaHRNZXRob2RzLlZBTFVFX0pTT05dOiBbXSxcbiAgICB9O1xuICB9XG59XG4iXX0=