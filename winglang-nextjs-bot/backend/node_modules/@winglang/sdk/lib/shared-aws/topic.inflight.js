"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TopicClient = void 0;
const client_sns_1 = require("@aws-sdk/client-sns");
const util_1 = require("../util/util");
/**
 * Topics in AWS can receive up to 10 messages at a time
 * using the PublishBatchCommand, this constant is used
 * to generate batches respecting the limits.
 */
const CHUNK_SIZE = 10;
class TopicClient {
    constructor(topicArn, client = new client_sns_1.SNSClient({})) {
        this.topicArn = topicArn;
        this.client = client;
    }
    async publish(...messages) {
        if (messages.includes("")) {
            throw new Error("Empty messages are not allowed");
        }
        let batchMessages = [];
        for (let i = 0; i < messages.length; i += CHUNK_SIZE) {
            const chunk = messages.slice(i, i + CHUNK_SIZE);
            batchMessages.push(this.processBatchMessages(chunk, i));
        }
        for (const batch of batchMessages) {
            try {
                const command = new client_sns_1.PublishBatchCommand({
                    TopicArn: this.topicArn,
                    PublishBatchRequestEntries: batch,
                });
                await this.client.send(command);
            }
            catch (e) {
                if (e instanceof client_sns_1.InvalidBatchEntryIdException) {
                    throw new Error(`The Id of a batch entry in a batch request doesn't abide by the specification. (message=${messages}): ${e.stack})}`);
                }
                throw new Error(e.stack);
            }
        }
    }
    processBatchMessages(messages, idx) {
        let batchMessages = [];
        let index = idx;
        for (const message of messages) {
            batchMessages.push({
                Id: util_1.Util.sha256(`${message}-${++index}`),
                Message: message,
            });
        }
        return batchMessages;
    }
}
exports.TopicClient = TopicClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9waWMuaW5mbGlnaHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2hhcmVkLWF3cy90b3BpYy5pbmZsaWdodC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxvREFLNkI7QUFFN0IsdUNBQW9DO0FBRXBDOzs7O0dBSUc7QUFDSCxNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUM7QUFFdEIsTUFBYSxXQUFXO0lBQ3RCLFlBQ21CLFFBQWdCLEVBQ2hCLFNBQW9CLElBQUksc0JBQVMsQ0FBQyxFQUFFLENBQUM7UUFEckMsYUFBUSxHQUFSLFFBQVEsQ0FBUTtRQUNoQixXQUFNLEdBQU4sTUFBTSxDQUErQjtJQUNyRCxDQUFDO0lBRUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLFFBQWtCO1FBQ3hDLElBQUksUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1lBQzFCLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRCxDQUFDO1FBRUQsSUFBSSxhQUFhLEdBQXNDLEVBQUUsQ0FBQztRQUMxRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksVUFBVSxFQUFFLENBQUM7WUFDckQsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDO1lBQ2hELGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFELENBQUM7UUFFRCxLQUFLLE1BQU0sS0FBSyxJQUFJLGFBQWEsRUFBRSxDQUFDO1lBQ2xDLElBQUksQ0FBQztnQkFDSCxNQUFNLE9BQU8sR0FBRyxJQUFJLGdDQUFtQixDQUFDO29CQUN0QyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7b0JBQ3ZCLDBCQUEwQixFQUFFLEtBQUs7aUJBQ2xDLENBQUMsQ0FBQztnQkFDSCxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2xDLENBQUM7WUFBQyxPQUFPLENBQUMsRUFBRSxDQUFDO2dCQUNYLElBQUksQ0FBQyxZQUFZLHlDQUE0QixFQUFFLENBQUM7b0JBQzlDLE1BQU0sSUFBSSxLQUFLLENBQ2IsMkZBQTJGLFFBQVEsTUFDaEcsQ0FBVyxDQUFDLEtBQ2YsSUFBSSxDQUNMLENBQUM7Z0JBQ0osQ0FBQztnQkFDRCxNQUFNLElBQUksS0FBSyxDQUFFLENBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN0QyxDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7SUFFTyxvQkFBb0IsQ0FDMUIsUUFBa0IsRUFDbEIsR0FBVztRQUVYLElBQUksYUFBYSxHQUFvQyxFQUFFLENBQUM7UUFDeEQsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDO1FBQ2hCLEtBQUssTUFBTSxPQUFPLElBQUksUUFBUSxFQUFFLENBQUM7WUFDL0IsYUFBYSxDQUFDLElBQUksQ0FBQztnQkFDakIsRUFBRSxFQUFFLFdBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxPQUFPLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQztnQkFDeEMsT0FBTyxFQUFFLE9BQU87YUFDakIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUNELE9BQU8sYUFBYSxDQUFDO0lBQ3ZCLENBQUM7Q0FDRjtBQW5ERCxrQ0FtREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBTTlNDbGllbnQsXG4gIFB1Ymxpc2hCYXRjaENvbW1hbmQsXG4gIFB1Ymxpc2hCYXRjaFJlcXVlc3RFbnRyeSxcbiAgSW52YWxpZEJhdGNoRW50cnlJZEV4Y2VwdGlvbixcbn0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1zbnNcIjtcbmltcG9ydCB7IElUb3BpY0NsaWVudCB9IGZyb20gXCIuLi9jbG91ZFwiO1xuaW1wb3J0IHsgVXRpbCB9IGZyb20gXCIuLi91dGlsL3V0aWxcIjtcblxuLyoqXG4gKiBUb3BpY3MgaW4gQVdTIGNhbiByZWNlaXZlIHVwIHRvIDEwIG1lc3NhZ2VzIGF0IGEgdGltZVxuICogdXNpbmcgdGhlIFB1Ymxpc2hCYXRjaENvbW1hbmQsIHRoaXMgY29uc3RhbnQgaXMgdXNlZFxuICogdG8gZ2VuZXJhdGUgYmF0Y2hlcyByZXNwZWN0aW5nIHRoZSBsaW1pdHMuXG4gKi9cbmNvbnN0IENIVU5LX1NJWkUgPSAxMDtcblxuZXhwb3J0IGNsYXNzIFRvcGljQ2xpZW50IGltcGxlbWVudHMgSVRvcGljQ2xpZW50IHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSB0b3BpY0Fybjogc3RyaW5nLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgY2xpZW50OiBTTlNDbGllbnQgPSBuZXcgU05TQ2xpZW50KHt9KVxuICApIHt9XG5cbiAgcHVibGljIGFzeW5jIHB1Ymxpc2goLi4ubWVzc2FnZXM6IHN0cmluZ1tdKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKG1lc3NhZ2VzLmluY2x1ZGVzKFwiXCIpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFbXB0eSBtZXNzYWdlcyBhcmUgbm90IGFsbG93ZWRcIik7XG4gICAgfVxuXG4gICAgbGV0IGJhdGNoTWVzc2FnZXM6IEFycmF5PFB1Ymxpc2hCYXRjaFJlcXVlc3RFbnRyeVtdPiA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWVzc2FnZXMubGVuZ3RoOyBpICs9IENIVU5LX1NJWkUpIHtcbiAgICAgIGNvbnN0IGNodW5rID0gbWVzc2FnZXMuc2xpY2UoaSwgaSArIENIVU5LX1NJWkUpO1xuICAgICAgYmF0Y2hNZXNzYWdlcy5wdXNoKHRoaXMucHJvY2Vzc0JhdGNoTWVzc2FnZXMoY2h1bmssIGkpKTtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGJhdGNoIG9mIGJhdGNoTWVzc2FnZXMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgUHVibGlzaEJhdGNoQ29tbWFuZCh7XG4gICAgICAgICAgVG9waWNBcm46IHRoaXMudG9waWNBcm4sXG4gICAgICAgICAgUHVibGlzaEJhdGNoUmVxdWVzdEVudHJpZXM6IGJhdGNoLFxuICAgICAgICB9KTtcbiAgICAgICAgYXdhaXQgdGhpcy5jbGllbnQuc2VuZChjb21tYW5kKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBJbnZhbGlkQmF0Y2hFbnRyeUlkRXhjZXB0aW9uKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgYFRoZSBJZCBvZiBhIGJhdGNoIGVudHJ5IGluIGEgYmF0Y2ggcmVxdWVzdCBkb2Vzbid0IGFiaWRlIGJ5IHRoZSBzcGVjaWZpY2F0aW9uLiAobWVzc2FnZT0ke21lc3NhZ2VzfSk6ICR7XG4gICAgICAgICAgICAgIChlIGFzIEVycm9yKS5zdGFja1xuICAgICAgICAgICAgfSl9YFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKChlIGFzIEVycm9yKS5zdGFjayk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBwcm9jZXNzQmF0Y2hNZXNzYWdlcyhcbiAgICBtZXNzYWdlczogc3RyaW5nW10sXG4gICAgaWR4OiBudW1iZXJcbiAgKTogUHVibGlzaEJhdGNoUmVxdWVzdEVudHJ5W10ge1xuICAgIGxldCBiYXRjaE1lc3NhZ2VzOiBBcnJheTxQdWJsaXNoQmF0Y2hSZXF1ZXN0RW50cnk+ID0gW107XG4gICAgbGV0IGluZGV4ID0gaWR4O1xuICAgIGZvciAoY29uc3QgbWVzc2FnZSBvZiBtZXNzYWdlcykge1xuICAgICAgYmF0Y2hNZXNzYWdlcy5wdXNoKHtcbiAgICAgICAgSWQ6IFV0aWwuc2hhMjU2KGAke21lc3NhZ2V9LSR7KytpbmRleH1gKSxcbiAgICAgICAgTWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYmF0Y2hNZXNzYWdlcztcbiAgfVxufVxuIl19