import { LambdaClient } from "@aws-sdk/client-lambda";
import { ILambdaContext } from "./function";
import { IFunctionClient } from "../cloud";
import { Trace } from "../std";
export declare class FunctionClient implements IFunctionClient {
    private readonly functionArn;
    private readonly constructPath;
    private readonly lambdaClient;
    static context(): Promise<ILambdaContext | undefined>;
    constructor(functionArn: string, constructPath: string, lambdaClient?: LambdaClient);
    /**
     * Invokes the function with a payload and waits for the result.
     *  @returns the function response payload.
     */
    invoke(payload?: string): Promise<string | undefined>;
    /**
     * Kicks off the execution of the function with a payload and returns immediately while the function is running.
     * @returns immediately once the event has been handed off to AWS Lambda.
     */
    invokeAsync(payload: string): Promise<void>;
    /**
     * Invokes the function synchronously, passing the given payload as an argument.
     * @returns the function response payload with execution logs included.
     */
    invokeWithLogs(payload: string): Promise<[string, Trace[]]>;
}
export declare function parseLogs(logs: string, sourcePath: string): Trace[];
