"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueueClient = void 0;
const client_sqs_1 = require("@aws-sdk/client-sqs");
class QueueClient {
    constructor(_queueUrlOrArn, client = new client_sqs_1.SQSClient({})) {
        this._queueUrlOrArn = _queueUrlOrArn;
        this.client = client;
    }
    async push(...messages) {
        if (messages.includes("")) {
            throw new Error("Empty messages are not allowed");
        }
        const messagePromises = messages.map(async (message) => {
            try {
                const command = new client_sqs_1.SendMessageCommand({
                    QueueUrl: await this.queueUrl(),
                    MessageBody: message,
                });
                await this.client.send(command);
            }
            catch (e) {
                if (e instanceof client_sqs_1.InvalidMessageContents) {
                    throw new Error(`The message contains characters outside the allowed set (message=${message}): ${e.stack})}`);
                }
                throw new Error(e.stack);
            }
        });
        await Promise.all(messagePromises);
    }
    async queueUrl() {
        if (!this._queueUrl) {
            // if we have the queue name instead of the url, then we need to resolve it first
            if (this._queueUrlOrArn.startsWith("https://")) {
                this._queueUrl = this._queueUrlOrArn;
            }
            else {
                // extract the queue name from its ARN
                const arnParts = this._queueUrlOrArn.split(":");
                const queueName = arnParts[arnParts.length - 1].split("/").pop();
                if (!queueName) {
                    throw new Error(`Unable to extract queue name from ARN: ${this._queueUrlOrArn}`);
                }
                const command = new client_sqs_1.GetQueueUrlCommand({ QueueName: queueName });
                const data = await this.client.send(command);
                if (!data.QueueUrl) {
                    throw new Error(`Unable to resolve queue URL from SQS queue ARN: ${this._queueUrlOrArn}`);
                }
                this._queueUrl = data.QueueUrl;
            }
        }
        return this._queueUrl;
    }
    async purge() {
        const command = new client_sqs_1.PurgeQueueCommand({
            QueueUrl: await this.queueUrl(),
        });
        await this.client.send(command);
    }
    async approxSize() {
        const command = new client_sqs_1.GetQueueAttributesCommand({
            QueueUrl: await this.queueUrl(),
            AttributeNames: ["ApproximateNumberOfMessages"],
        });
        const data = await this.client.send(command);
        return Number.parseInt(data.Attributes?.ApproximateNumberOfMessages ?? "0");
    }
    async pop() {
        const receiveCommand = new client_sqs_1.ReceiveMessageCommand({
            QueueUrl: await this.queueUrl(),
            MaxNumberOfMessages: 1,
        });
        const data = await this.client.send(receiveCommand);
        if (!data.Messages || data.Messages.length === 0) {
            return undefined;
        }
        const message = data.Messages[0];
        if (message.ReceiptHandle) {
            const deleteCommand = new client_sqs_1.DeleteMessageCommand({
                QueueUrl: await this.queueUrl(),
                ReceiptHandle: message.ReceiptHandle,
            });
            await this.client.send(deleteCommand);
        }
        else {
            console.warn(`No receipt handle found, message not deleted. Message: ${JSON.stringify(message)}`);
        }
        return message.Body;
    }
}
exports.QueueClient = QueueClient;
//# sourceMappingURL=data:application/json;base64,