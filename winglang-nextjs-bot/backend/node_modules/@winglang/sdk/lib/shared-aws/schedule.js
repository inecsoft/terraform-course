"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScheduleOnTickHandler = exports.convertUnixCronToAWSCron = void 0;
const core_1 = require("../core");
/**
 * Convert Unix cron to AWS cron
 */
const convertUnixCronToAWSCron = (cron) => {
    const minute = cron.split(" ")[0];
    const hour = cron.split(" ")[1];
    let dayOfMonth = cron.split(" ")[2];
    const month = cron.split(" ")[3];
    let dayOfWeek = cron.split(" ")[4];
    /*
     * The implementation of cron on AWS does not allow [day of month] and [day of week]
     * to have the character '*' at the same time.
     * Therefore, [day of week] will be replaced by '?'.
     */
    if (cron && dayOfMonth == "*" && dayOfWeek == "*") {
        dayOfWeek = "?";
    }
    if (cron && dayOfMonth !== "*" && dayOfWeek !== "*") {
        throw new Error("Cannot restrict both 'day-of-month' and 'day-of-week' in a cron expression, at least one must be '*'");
    }
    if (dayOfWeek !== "*" && dayOfWeek !== "?") {
        dayOfMonth = "?";
        if (/\d/.test(dayOfWeek)) {
            dayOfWeek = convertDayOfWeekFromUnixToAWS(dayOfWeek);
        }
    }
    /*
     * The schedule cron string is Unix cron format: [minute] [hour] [day of month] [month] [day of week]
     * AWS EventBridge Schedule uses a 6 field format which includes year: [minute] [hour] [day of month] [month] [day of week] [year]
     * https://docs.aws.amazon.com/scheduler/latest/UserGuide/schedule-types.html#cron-based
     *
     * We append * to the cron string for year field.
     */
    return (minute +
        " " +
        hour +
        " " +
        dayOfMonth +
        " " +
        month +
        " " +
        dayOfWeek +
        " *");
};
exports.convertUnixCronToAWSCron = convertUnixCronToAWSCron;
const convertDayOfWeekFromUnixToAWS = (dayOfWeek) => {
    const numbers = dayOfWeek.match(/\d+/g);
    if (numbers) {
        for (const number of numbers) {
            dayOfWeek = dayOfWeek.replace(number, (parseInt(number) - 1).toString());
        }
    }
    return dayOfWeek;
};
/**
 * Utility class for working with the schedule tick handler.
 */
class ScheduleOnTickHandler {
    /**
     * Converts a schedule tick handler to a function handler.
     * @param handler The schedule tick handler.
     * @returns The function handler.
     */
    static toFunctionHandler(handler) {
        return (0, core_1.lift)({ handler }).inflight(async (ctx) => {
            await ctx.handler();
            return undefined;
        });
    }
}
exports.ScheduleOnTickHandler = ScheduleOnTickHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZWR1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2hhcmVkLWF3cy9zY2hlZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxrQ0FBK0I7QUFFL0I7O0dBRUc7QUFDSSxNQUFNLHdCQUF3QixHQUFHLENBQUMsSUFBWSxFQUFFLEVBQUU7SUFDdkQsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNsQyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hDLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqQyxJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRW5DOzs7O09BSUc7SUFDSCxJQUFJLElBQUksSUFBSSxVQUFVLElBQUksR0FBRyxJQUFJLFNBQVMsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUNsRCxTQUFTLEdBQUcsR0FBRyxDQUFDO0lBQ2xCLENBQUM7SUFFRCxJQUFJLElBQUksSUFBSSxVQUFVLEtBQUssR0FBRyxJQUFJLFNBQVMsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNwRCxNQUFNLElBQUksS0FBSyxDQUNiLHNHQUFzRyxDQUN2RyxDQUFDO0lBQ0osQ0FBQztJQUVELElBQUksU0FBUyxLQUFLLEdBQUcsSUFBSSxTQUFTLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDM0MsVUFBVSxHQUFHLEdBQUcsQ0FBQztRQUNqQixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQztZQUN6QixTQUFTLEdBQUcsNkJBQTZCLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDdkQsQ0FBQztJQUNILENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSCxPQUFPLENBQ0wsTUFBTTtRQUNOLEdBQUc7UUFDSCxJQUFJO1FBQ0osR0FBRztRQUNILFVBQVU7UUFDVixHQUFHO1FBQ0gsS0FBSztRQUNMLEdBQUc7UUFDSCxTQUFTO1FBQ1QsSUFBSSxDQUNMLENBQUM7QUFDSixDQUFDLENBQUM7QUFoRFcsUUFBQSx3QkFBd0IsNEJBZ0RuQztBQUVGLE1BQU0sNkJBQTZCLEdBQUcsQ0FBQyxTQUFpQixFQUFVLEVBQUU7SUFDbEUsTUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUV4QyxJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQ1osS0FBSyxNQUFNLE1BQU0sSUFBSSxPQUFPLEVBQUUsQ0FBQztZQUM3QixTQUFTLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUMzRSxDQUFDO0lBQ0gsQ0FBQztJQUVELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUMsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBYSxxQkFBcUI7SUFDaEM7Ozs7T0FJRztJQUNJLE1BQU0sQ0FBQyxpQkFBaUIsQ0FDN0IsT0FBcUM7UUFFckMsT0FBTyxJQUFBLFdBQUksRUFBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUM5QyxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNwQixPQUFPLFNBQVMsQ0FBQztRQUNuQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRjtBQWRELHNEQWNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2xvdWQgZnJvbSBcIi4uL2Nsb3VkXCI7XG5pbXBvcnQgeyBsaWZ0IH0gZnJvbSBcIi4uL2NvcmVcIjtcblxuLyoqXG4gKiBDb252ZXJ0IFVuaXggY3JvbiB0byBBV1MgY3JvblxuICovXG5leHBvcnQgY29uc3QgY29udmVydFVuaXhDcm9uVG9BV1NDcm9uID0gKGNyb246IHN0cmluZykgPT4ge1xuICBjb25zdCBtaW51dGUgPSBjcm9uLnNwbGl0KFwiIFwiKVswXTtcbiAgY29uc3QgaG91ciA9IGNyb24uc3BsaXQoXCIgXCIpWzFdO1xuICBsZXQgZGF5T2ZNb250aCA9IGNyb24uc3BsaXQoXCIgXCIpWzJdO1xuICBjb25zdCBtb250aCA9IGNyb24uc3BsaXQoXCIgXCIpWzNdO1xuICBsZXQgZGF5T2ZXZWVrID0gY3Jvbi5zcGxpdChcIiBcIilbNF07XG5cbiAgLypcbiAgICogVGhlIGltcGxlbWVudGF0aW9uIG9mIGNyb24gb24gQVdTIGRvZXMgbm90IGFsbG93IFtkYXkgb2YgbW9udGhdIGFuZCBbZGF5IG9mIHdlZWtdXG4gICAqIHRvIGhhdmUgdGhlIGNoYXJhY3RlciAnKicgYXQgdGhlIHNhbWUgdGltZS5cbiAgICogVGhlcmVmb3JlLCBbZGF5IG9mIHdlZWtdIHdpbGwgYmUgcmVwbGFjZWQgYnkgJz8nLlxuICAgKi9cbiAgaWYgKGNyb24gJiYgZGF5T2ZNb250aCA9PSBcIipcIiAmJiBkYXlPZldlZWsgPT0gXCIqXCIpIHtcbiAgICBkYXlPZldlZWsgPSBcIj9cIjtcbiAgfVxuXG4gIGlmIChjcm9uICYmIGRheU9mTW9udGggIT09IFwiKlwiICYmIGRheU9mV2VlayAhPT0gXCIqXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcIkNhbm5vdCByZXN0cmljdCBib3RoICdkYXktb2YtbW9udGgnIGFuZCAnZGF5LW9mLXdlZWsnIGluIGEgY3JvbiBleHByZXNzaW9uLCBhdCBsZWFzdCBvbmUgbXVzdCBiZSAnKidcIlxuICAgICk7XG4gIH1cblxuICBpZiAoZGF5T2ZXZWVrICE9PSBcIipcIiAmJiBkYXlPZldlZWsgIT09IFwiP1wiKSB7XG4gICAgZGF5T2ZNb250aCA9IFwiP1wiO1xuICAgIGlmICgvXFxkLy50ZXN0KGRheU9mV2VlaykpIHtcbiAgICAgIGRheU9mV2VlayA9IGNvbnZlcnREYXlPZldlZWtGcm9tVW5peFRvQVdTKGRheU9mV2Vlayk7XG4gICAgfVxuICB9XG5cbiAgLypcbiAgICogVGhlIHNjaGVkdWxlIGNyb24gc3RyaW5nIGlzIFVuaXggY3JvbiBmb3JtYXQ6IFttaW51dGVdIFtob3VyXSBbZGF5IG9mIG1vbnRoXSBbbW9udGhdIFtkYXkgb2Ygd2Vla11cbiAgICogQVdTIEV2ZW50QnJpZGdlIFNjaGVkdWxlIHVzZXMgYSA2IGZpZWxkIGZvcm1hdCB3aGljaCBpbmNsdWRlcyB5ZWFyOiBbbWludXRlXSBbaG91cl0gW2RheSBvZiBtb250aF0gW21vbnRoXSBbZGF5IG9mIHdlZWtdIFt5ZWFyXVxuICAgKiBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vc2NoZWR1bGVyL2xhdGVzdC9Vc2VyR3VpZGUvc2NoZWR1bGUtdHlwZXMuaHRtbCNjcm9uLWJhc2VkXG4gICAqXG4gICAqIFdlIGFwcGVuZCAqIHRvIHRoZSBjcm9uIHN0cmluZyBmb3IgeWVhciBmaWVsZC5cbiAgICovXG4gIHJldHVybiAoXG4gICAgbWludXRlICtcbiAgICBcIiBcIiArXG4gICAgaG91ciArXG4gICAgXCIgXCIgK1xuICAgIGRheU9mTW9udGggK1xuICAgIFwiIFwiICtcbiAgICBtb250aCArXG4gICAgXCIgXCIgK1xuICAgIGRheU9mV2VlayArXG4gICAgXCIgKlwiXG4gICk7XG59O1xuXG5jb25zdCBjb252ZXJ0RGF5T2ZXZWVrRnJvbVVuaXhUb0FXUyA9IChkYXlPZldlZWs6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIGNvbnN0IG51bWJlcnMgPSBkYXlPZldlZWsubWF0Y2goL1xcZCsvZyk7XG5cbiAgaWYgKG51bWJlcnMpIHtcbiAgICBmb3IgKGNvbnN0IG51bWJlciBvZiBudW1iZXJzKSB7XG4gICAgICBkYXlPZldlZWsgPSBkYXlPZldlZWsucmVwbGFjZShudW1iZXIsIChwYXJzZUludChudW1iZXIpIC0gMSkudG9TdHJpbmcoKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRheU9mV2Vlaztcbn07XG5cbi8qKlxuICogVXRpbGl0eSBjbGFzcyBmb3Igd29ya2luZyB3aXRoIHRoZSBzY2hlZHVsZSB0aWNrIGhhbmRsZXIuXG4gKi9cbmV4cG9ydCBjbGFzcyBTY2hlZHVsZU9uVGlja0hhbmRsZXIge1xuICAvKipcbiAgICogQ29udmVydHMgYSBzY2hlZHVsZSB0aWNrIGhhbmRsZXIgdG8gYSBmdW5jdGlvbiBoYW5kbGVyLlxuICAgKiBAcGFyYW0gaGFuZGxlciBUaGUgc2NoZWR1bGUgdGljayBoYW5kbGVyLlxuICAgKiBAcmV0dXJucyBUaGUgZnVuY3Rpb24gaGFuZGxlci5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgdG9GdW5jdGlvbkhhbmRsZXIoXG4gICAgaGFuZGxlcjogY2xvdWQuSVNjaGVkdWxlT25UaWNrSGFuZGxlclxuICApOiBjbG91ZC5JRnVuY3Rpb25IYW5kbGVyIHtcbiAgICByZXR1cm4gbGlmdCh7IGhhbmRsZXIgfSkuaW5mbGlnaHQoYXN5bmMgKGN0eCkgPT4ge1xuICAgICAgYXdhaXQgY3R4LmhhbmRsZXIoKTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==