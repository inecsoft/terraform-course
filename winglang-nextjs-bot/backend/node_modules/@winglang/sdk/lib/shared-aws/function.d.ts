import { Construct } from "constructs";
import { IAwsInflightHost } from "./inflight-host";
import { IFunctionClient } from "../cloud";
import { LiftMap } from "../core";
import { INFLIGHT_SYMBOL } from "../core/types";
import { IInflightHost, Resource } from "../std";
export declare const externalLibraries: string[];
/**
 * A shared interface for AWS functions.
 */
export interface IAwsFunction extends IAwsInflightHost {
    /**
     * AWS Function arn
     */
    readonly functionArn: string;
    /**
     * AWS Function name
     */
    readonly functionName: string;
}
/**
 * A helper class for working with AWS functions.
 */
export declare class Function {
    /** @internal */
    static _toInflightType(): string;
    /**
     * Returns the current Lambda invocation context, if the host is an AWS Lambda.
     * @see https://docs.aws.amazon.com/lambda/latest/dg/nodejs-prog-model-context.html
     * @inflight
     * @returns The current Lambda invocation context.
     */
    static context(): Promise<ILambdaContext | undefined>;
    /**
     * If the inflight host is an AWS Lambda, return a helper interface for
     * working with it.
     * @param host The inflight host.
     */
    static from(host: IInflightHost): IAwsFunction | undefined;
    private static isAwsFunction;
}
/**
 * The AWS Lambda context object.
 * @inflight
 */
export interface ILambdaContext {
    /**
     * The name of the Lambda function.
     */
    readonly functionName: string;
    /**
     * The version of the function.
     */
    readonly functionVersion: string;
    /**
     * The Amazon Resource Name (ARN) that's used to invoke the function.
     * Indicates if the invoker specified a version number or alias.
     */
    readonly invokedFunctionArn: string;
    /**
     * The amount of memory that's allocated for the function.
     */
    readonly memoryLimitInMB: string;
    /**
     * The identifier of the invocation request.
     */
    readonly awsRequestId: string;
    /**
     * The log group for the function.
     */
    readonly logGroupName: string;
    /**
     * The log stream for the function instance.
     */
    readonly logStreamName: string;
    /**
     * Returns the number of milliseconds left before the execution times out.
     */
    remainingTimeInMillis(): number;
}
/**
 * A reference to an external Lambda function.
 *
 * @inflight `@winglang/sdk.cloud.IFunctionClient`
 */
export declare class FunctionRef extends Resource {
    /** @internal */
    [INFLIGHT_SYMBOL]?: IFunctionClient;
    /**
     * The ARN of this function.
     */
    readonly functionArn: string;
    constructor(scope: Construct, id: string, functionArn: string);
    onLift(host: IInflightHost, ops: string[]): void;
    /** @internal */
    _toInflight(): string;
    private envName;
    /** @internal */
    get _liftMap(): LiftMap;
    private addUserInterface;
}
