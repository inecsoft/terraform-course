"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiEndpointHandler = exports.Api = exports.STAGE_NAME = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const core_1 = require("../core");
/**
 * The stage name for the API, used in its url.
 * @see https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-custom-domains.html
 */
exports.STAGE_NAME = "prod";
/**
 * A helper class for working with AWS apis.
 */
class Api {
    /**
     * If the api is an AWS RestApi, return a helper interface for
     * working with it.
     * @param api The cloud.Api.
     */
    static from(api) {
        if (this.isAwsApi(api)) {
            return api;
        }
        return undefined;
    }
    static isAwsApi(obj) {
        return (typeof obj.restApiArn === "string" &&
            typeof obj.restApiId === "string" &&
            typeof obj.restApiName === "string" &&
            typeof obj.stageName === "string" &&
            typeof obj.invokeUrl === "string" &&
            typeof obj.deploymentId === "string");
    }
}
exports.Api = Api;
_a = JSII_RTTI_SYMBOL_1;
Api[_a] = { fqn: "@winglang/sdk.aws.Api", version: "0.0.0" };
/**
 * A helper class for working with AWS api endpoint handlers.
 */
class ApiEndpointHandler {
    /**
     * Returns a `cloud.Function` handler for handling requests from a `cloud.Api`.
     * @param handler The `onRequest` handler.
     * @param headers HTTP response headers to add to all responses (used by CORS)
     * @returns The `cloud.Function` handler.
     */
    static toFunctionHandler(handler, headers) {
        return (0, core_1.lift)({
            handler,
            headers: headers ?? {},
        }).inflight(async (ctx, request) => {
            const { apigwFunctionHandler,
            // eslint-disable-next-line @typescript-eslint/no-require-imports
             } = require("@winglang/sdk/lib/shared-aws/api-util.js");
            return apigwFunctionHandler(request, ctx.handler, ctx.headers);
        });
    }
}
exports.ApiEndpointHandler = ApiEndpointHandler;
_b = JSII_RTTI_SYMBOL_1;
ApiEndpointHandler[_b] = { fqn: "@winglang/sdk.aws.ApiEndpointHandler", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NoYXJlZC1hd3MvYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsa0NBQStCO0FBRS9COzs7R0FHRztBQUNVLFFBQUEsVUFBVSxHQUFHLE1BQU0sQ0FBQztBQXFDakM7O0dBRUc7QUFDSCxNQUFhLEdBQUc7SUFDZDs7OztPQUlHO0lBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFjO1FBQy9CLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQ3ZCLE9BQU8sR0FBRyxDQUFDO1FBQ2IsQ0FBQztRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFFTyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQVE7UUFDOUIsT0FBTyxDQUNMLE9BQU8sR0FBRyxDQUFDLFVBQVUsS0FBSyxRQUFRO1lBQ2xDLE9BQU8sR0FBRyxDQUFDLFNBQVMsS0FBSyxRQUFRO1lBQ2pDLE9BQU8sR0FBRyxDQUFDLFdBQVcsS0FBSyxRQUFRO1lBQ25DLE9BQU8sR0FBRyxDQUFDLFNBQVMsS0FBSyxRQUFRO1lBQ2pDLE9BQU8sR0FBRyxDQUFDLFNBQVMsS0FBSyxRQUFRO1lBQ2pDLE9BQU8sR0FBRyxDQUFDLFlBQVksS0FBSyxRQUFRLENBQ3JDLENBQUM7SUFDSixDQUFDOztBQXRCSCxrQkF1QkM7OztBQUVEOztHQUVHO0FBQ0gsTUFBYSxrQkFBa0I7SUFDN0I7Ozs7O09BS0c7SUFDSSxNQUFNLENBQUMsaUJBQWlCLENBQzdCLE9BQWtDLEVBQ2xDLE9BQWdDO1FBRWhDLE9BQU8sSUFBQSxXQUFJLEVBQUM7WUFDVixPQUFPO1lBQ1AsT0FBTyxFQUFFLE9BQU8sSUFBSSxFQUFFO1NBQ3ZCLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsRUFBRTtZQUNqQyxNQUFNLEVBQ0osb0JBQW9CO1lBQ3BCLGlFQUFpRTtjQUNsRSxHQUFHLE9BQU8sQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO1lBQ3hELE9BQU8sb0JBQW9CLENBQ3pCLE9BQTBDLEVBQzFDLEdBQUcsQ0FBQyxPQUFPLEVBQ1gsR0FBRyxDQUFDLE9BQU8sQ0FDUyxDQUFDO1FBQ3pCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7QUF6QkgsZ0RBMEJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBBUElHYXRld2F5UHJveHlFdmVudCB9IGZyb20gXCJhd3MtbGFtYmRhXCI7XG5pbXBvcnQgeyBjbG91ZCB9IGZyb20gXCIuLlwiO1xuaW1wb3J0IHsgbGlmdCB9IGZyb20gXCIuLi9jb3JlXCI7XG5cbi8qKlxuICogVGhlIHN0YWdlIG5hbWUgZm9yIHRoZSBBUEksIHVzZWQgaW4gaXRzIHVybC5cbiAqIEBzZWUgaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2FwaWdhdGV3YXkvbGF0ZXN0L2RldmVsb3Blcmd1aWRlL2hvdy10by1jdXN0b20tZG9tYWlucy5odG1sXG4gKi9cbmV4cG9ydCBjb25zdCBTVEFHRV9OQU1FID0gXCJwcm9kXCI7XG5cbi8qKlxuICogQSBzaGFyZWQgaW50ZXJmYWNlIGZvciBBV1MgYXBpLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElBd3NBcGkge1xuICAvKipcbiAgICogUmVzdEFwaSBhcm5cbiAgICovXG4gIHJlYWRvbmx5IHJlc3RBcGlBcm46IHN0cmluZztcblxuICAvKipcbiAgICogUmVzdEFwaSBpZFxuICAgKi9cbiAgcmVhZG9ubHkgcmVzdEFwaUlkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFJlc3RBcGkgaWRcbiAgICovXG4gIHJlYWRvbmx5IHJlc3RBcGlOYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFJlc3RBcGkgc3RhZ2UgbmFtZVxuICAgKi9cbiAgcmVhZG9ubHkgc3RhZ2VOYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEludm9rZSBVUkxcbiAgICovXG4gIHJlYWRvbmx5IGludm9rZVVybDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBSZXN0QXBpIGRlcGxveW1lbnQgaWRcbiAgICovXG4gIHJlYWRvbmx5IGRlcGxveW1lbnRJZDogc3RyaW5nO1xufVxuXG4vKipcbiAqIEEgaGVscGVyIGNsYXNzIGZvciB3b3JraW5nIHdpdGggQVdTIGFwaXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBBcGkge1xuICAvKipcbiAgICogSWYgdGhlIGFwaSBpcyBhbiBBV1MgUmVzdEFwaSwgcmV0dXJuIGEgaGVscGVyIGludGVyZmFjZSBmb3JcbiAgICogd29ya2luZyB3aXRoIGl0LlxuICAgKiBAcGFyYW0gYXBpIFRoZSBjbG91ZC5BcGkuXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGZyb20oYXBpOiBjbG91ZC5BcGkpOiBJQXdzQXBpIHwgdW5kZWZpbmVkIHtcbiAgICBpZiAodGhpcy5pc0F3c0FwaShhcGkpKSB7XG4gICAgICByZXR1cm4gYXBpO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgaXNBd3NBcGkob2JqOiBhbnkpOiBvYmogaXMgSUF3c0FwaSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHR5cGVvZiBvYmoucmVzdEFwaUFybiA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgdHlwZW9mIG9iai5yZXN0QXBpSWQgPT09IFwic3RyaW5nXCIgJiZcbiAgICAgIHR5cGVvZiBvYmoucmVzdEFwaU5hbWUgPT09IFwic3RyaW5nXCIgJiZcbiAgICAgIHR5cGVvZiBvYmouc3RhZ2VOYW1lID09PSBcInN0cmluZ1wiICYmXG4gICAgICB0eXBlb2Ygb2JqLmludm9rZVVybCA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgdHlwZW9mIG9iai5kZXBsb3ltZW50SWQgPT09IFwic3RyaW5nXCJcbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogQSBoZWxwZXIgY2xhc3MgZm9yIHdvcmtpbmcgd2l0aCBBV1MgYXBpIGVuZHBvaW50IGhhbmRsZXJzLlxuICovXG5leHBvcnQgY2xhc3MgQXBpRW5kcG9pbnRIYW5kbGVyIHtcbiAgLyoqXG4gICAqIFJldHVybnMgYSBgY2xvdWQuRnVuY3Rpb25gIGhhbmRsZXIgZm9yIGhhbmRsaW5nIHJlcXVlc3RzIGZyb20gYSBgY2xvdWQuQXBpYC5cbiAgICogQHBhcmFtIGhhbmRsZXIgVGhlIGBvblJlcXVlc3RgIGhhbmRsZXIuXG4gICAqIEBwYXJhbSBoZWFkZXJzIEhUVFAgcmVzcG9uc2UgaGVhZGVycyB0byBhZGQgdG8gYWxsIHJlc3BvbnNlcyAodXNlZCBieSBDT1JTKVxuICAgKiBAcmV0dXJucyBUaGUgYGNsb3VkLkZ1bmN0aW9uYCBoYW5kbGVyLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyB0b0Z1bmN0aW9uSGFuZGxlcihcbiAgICBoYW5kbGVyOiBjbG91ZC5JQXBpRW5kcG9pbnRIYW5kbGVyLFxuICAgIGhlYWRlcnM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+XG4gICk6IGNsb3VkLklGdW5jdGlvbkhhbmRsZXIge1xuICAgIHJldHVybiBsaWZ0KHtcbiAgICAgIGhhbmRsZXIsXG4gICAgICBoZWFkZXJzOiBoZWFkZXJzID8/IHt9LFxuICAgIH0pLmluZmxpZ2h0KGFzeW5jIChjdHgsIHJlcXVlc3QpID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgYXBpZ3dGdW5jdGlvbkhhbmRsZXIsXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVxdWlyZS1pbXBvcnRzXG4gICAgICB9ID0gcmVxdWlyZShcIkB3aW5nbGFuZy9zZGsvbGliL3NoYXJlZC1hd3MvYXBpLXV0aWwuanNcIik7XG4gICAgICByZXR1cm4gYXBpZ3dGdW5jdGlvbkhhbmRsZXIoXG4gICAgICAgIHJlcXVlc3QgYXMgdW5rbm93biBhcyBBUElHYXRld2F5UHJveHlFdmVudCxcbiAgICAgICAgY3R4LmhhbmRsZXIsXG4gICAgICAgIGN0eC5oZWFkZXJzXG4gICAgICApIGFzIHVua25vd24gYXMgc3RyaW5nO1xuICAgIH0pO1xuICB9XG59XG4iXX0=