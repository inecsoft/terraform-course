"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionRef = exports.Function = exports.externalLibraries = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const inflight_host_1 = require("./inflight-host");
const util_1 = require("./util");
const cloud_1 = require("../cloud");
const core_1 = require("../core");
const types_1 = require("../core/types");
const std_1 = require("../std");
const ui = __importStar(require("../ui"));
exports.externalLibraries = [
    "@aws-sdk/client-sso",
    "@aws-sdk/client-sso-oidc",
    "@aws-sdk/credential-provider-ini",
    "@aws-sdk/credential-provider-process",
    "@aws-sdk/credential-provider-sso",
    "@aws-sdk/credential-provider-web-identity",
    "@aws-sdk/token-providers",
];
/**
 * A helper class for working with AWS functions.
 */
class Function {
    /** @internal */
    static _toInflightType() {
        return core_1.InflightClient.forType(__filename.replace("function", "function.inflight"), "FunctionClient");
    }
    /**
     * Returns the current Lambda invocation context, if the host is an AWS Lambda.
     * @see https://docs.aws.amazon.com/lambda/latest/dg/nodejs-prog-model-context.html
     * @inflight
     * @returns The current Lambda invocation context.
     */
    static async context() {
        // The implementation of this method is in function.inflight.ts
        throw new Error("Not implemented");
    }
    /**
     * If the inflight host is an AWS Lambda, return a helper interface for
     * working with it.
     * @param host The inflight host.
     */
    static from(host) {
        if (this.isAwsFunction(host)) {
            return host;
        }
        return undefined;
    }
    static isAwsFunction(obj) {
        return (typeof obj.functionArn === "string" &&
            typeof obj.functionName === "string");
    }
}
exports.Function = Function;
_a = JSII_RTTI_SYMBOL_1;
Function[_a] = { fqn: "@winglang/sdk.aws.Function", version: "0.0.0" };
/**
 * A reference to an external Lambda function.
 *
 * @inflight `@winglang/sdk.cloud.IFunctionClient`
 */
class FunctionRef extends std_1.Resource {
    constructor(scope, id, functionArn) {
        super(scope, id);
        if (!(0, util_1.isValidArn)(functionArn, "lambda")) {
            throw new Error(`"${functionArn}" is not a valid Amazon Lambda ARN`);
        }
        this.functionArn = functionArn;
        this.addUserInterface();
    }
    onLift(host, ops) {
        if (inflight_host_1.AwsInflightHost.isAwsInflightHost(host)) {
            if (ops.includes(cloud_1.FunctionInflightMethods.INVOKE) ||
                ops.includes(cloud_1.FunctionInflightMethods.INVOKE_ASYNC)) {
                host.addPolicyStatements({
                    actions: ["lambda:InvokeFunction"],
                    resources: [this.functionArn],
                });
            }
        }
        host.addEnvironment(this.envName(), this.functionArn);
        super.onLift(host, ops);
    }
    /** @internal */
    _toInflight() {
        return core_1.InflightClient.for(__dirname, __filename, "FunctionClient", [
            `process.env["${this.envName()}"]`,
        ]);
    }
    envName() {
        return `FUNCTION_NAME_${this.node.addr.slice(-8)}`;
    }
    /** @internal */
    get _liftMap() {
        return {
            [cloud_1.FunctionInflightMethods.INVOKE]: [],
            [cloud_1.FunctionInflightMethods.INVOKE_ASYNC]: [],
        };
    }
    addUserInterface() {
        std_1.Node.of(this).color = "pink";
        const functionArn = this.functionArn;
        const awsConsoleHandler = (0, core_1.lift)({ functionArn }).inflight(async (ctx) => {
            try {
                const parts = ctx.functionArn.split(":");
                const region = parts[3];
                const name = parts[6];
                return ("https://" +
                    region +
                    ".console.aws.amazon.com/lambda/home?region=" +
                    region +
                    "#/functions/" +
                    name);
            }
            catch (e) {
                return e.message;
            }
        });
        new ui.Field(this, "AwsConsoleField", "AWS Console", awsConsoleHandler, {
            link: true,
        });
        new ui.ValueField(this, "FunctionArnField", "Function ARN", this.functionArn);
    }
}
exports.FunctionRef = FunctionRef;
_b = JSII_RTTI_SYMBOL_1;
FunctionRef[_b] = { fqn: "@winglang/sdk.aws.FunctionRef", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,