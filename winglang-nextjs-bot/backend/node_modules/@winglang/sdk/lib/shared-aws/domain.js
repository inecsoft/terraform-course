"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Domain = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cloud = __importStar(require("../cloud"));
const core_1 = require("../core");
const errors_1 = require("../core/errors");
/**
 * AWS implementation of `cloud.Domain`.
 * @inflight `@winglang/sdk.cloud.IDomainClient`
 */
class Domain extends cloud.Domain {
    constructor(scope, id, props) {
        super(scope, id, props);
        const parameters = core_1.App.of(scope).parameters;
        // Domain requires parameters from the user, so we need to add the parameter schemas to the registrar
        let schema = {
            type: "object",
            oneOf: [
                {
                    required: ["iamCertificate"],
                },
                {
                    required: ["acmCertificateArn"],
                },
            ],
            required: ["hostedZoneId"],
            properties: {
                iamCertificate: {
                    type: "string",
                },
                acmCertificateArn: {
                    type: "string",
                },
                hostedZoneId: {
                    type: "string",
                },
            },
        };
        parameters.addSchemaAtPath(schema, this.node.path, true);
        const iamCertificate = parameters.value(`${this.node.path}/iamCertificate`);
        const acmCertificateArn = parameters.value(`${this.node.path}/acmCertificateArn`);
        const hostedZoneId = parameters.value(`${this.node.path}/hostedZoneId`);
        this._iamCertificate = iamCertificate;
        this._hostedZoneId = hostedZoneId;
        this._acmCertificateArn = acmCertificateArn;
    }
    /**
     * The hosted zone id value.
     */
    get hostedZoneId() {
        return this._hostedZoneId;
    }
    /**
     * The AWS Certificate Manager (ACM) certificate arn value.
     */
    get acmCertificateArn() {
        return this._acmCertificateArn;
    }
    /**
     * The IAM certificate identifier value.
     */
    get iamCertificate() {
        return this._iamCertificate;
    }
    /** @internal */
    _toInflight() {
        throw new errors_1.NotImplementedError("Domain inflight client is not implemented yet on this target.");
    }
}
exports.Domain = Domain;
_a = JSII_RTTI_SYMBOL_1;
Domain[_a] = { fqn: "@winglang/sdk.aws.Domain", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tYWluLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NoYXJlZC1hd3MvZG9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSxnREFBa0M7QUFDbEMsa0NBQThCO0FBQzlCLDJDQUFxRDtBQUVyRDs7O0dBR0c7QUFDSCxNQUFhLE1BQU8sU0FBUSxLQUFLLENBQUMsTUFBTTtJQVF0QyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQXdCO1FBQ2hFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXhCLE1BQU0sVUFBVSxHQUFHLFVBQUcsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsVUFBVSxDQUFDO1FBRTVDLHFHQUFxRztRQUNyRyxJQUFJLE1BQU0sR0FBRztZQUNYLElBQUksRUFBRSxRQUFRO1lBQ2QsS0FBSyxFQUFFO2dCQUNMO29CQUNFLFFBQVEsRUFBRSxDQUFDLGdCQUFnQixDQUFDO2lCQUM3QjtnQkFDRDtvQkFDRSxRQUFRLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQztpQkFDaEM7YUFDRjtZQUNELFFBQVEsRUFBRSxDQUFDLGNBQWMsQ0FBQztZQUMxQixVQUFVLEVBQUU7Z0JBQ1YsY0FBYyxFQUFFO29CQUNkLElBQUksRUFBRSxRQUFRO2lCQUNmO2dCQUNELGlCQUFpQixFQUFFO29CQUNqQixJQUFJLEVBQUUsUUFBUTtpQkFDZjtnQkFDRCxZQUFZLEVBQUU7b0JBQ1osSUFBSSxFQUFFLFFBQVE7aUJBQ2Y7YUFDRjtTQUNGLENBQUM7UUFFRixVQUFVLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUV6RCxNQUFNLGNBQWMsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLGlCQUFpQixDQUFDLENBQUM7UUFDNUUsTUFBTSxpQkFBaUIsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUN4QyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxvQkFBb0IsQ0FDdEMsQ0FBQztRQUNGLE1BQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksZUFBZSxDQUFDLENBQUM7UUFFeEUsSUFBSSxDQUFDLGVBQWUsR0FBRyxjQUFjLENBQUM7UUFDdEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxZQUFZLENBQUM7UUFDbEMsSUFBSSxDQUFDLGtCQUFrQixHQUFHLGlCQUFpQixDQUFDO0lBQzlDLENBQUM7SUFFRDs7T0FFRztJQUNILElBQVcsWUFBWTtRQUNyQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDNUIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBVyxpQkFBaUI7UUFDMUIsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUM7SUFDakMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBVyxjQUFjO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUM5QixDQUFDO0lBRUQsZ0JBQWdCO0lBQ1QsV0FBVztRQUNoQixNQUFNLElBQUksNEJBQW1CLENBQzNCLCtEQUErRCxDQUNoRSxDQUFDO0lBQ0osQ0FBQzs7QUE3RUgsd0JBOEVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCAqIGFzIGNsb3VkIGZyb20gXCIuLi9jbG91ZFwiO1xuaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4uL2NvcmVcIjtcbmltcG9ydCB7IE5vdEltcGxlbWVudGVkRXJyb3IgfSBmcm9tIFwiLi4vY29yZS9lcnJvcnNcIjtcblxuLyoqXG4gKiBBV1MgaW1wbGVtZW50YXRpb24gb2YgYGNsb3VkLkRvbWFpbmAuXG4gKiBAaW5mbGlnaHQgYEB3aW5nbGFuZy9zZGsuY2xvdWQuSURvbWFpbkNsaWVudGBcbiAqL1xuZXhwb3J0IGNsYXNzIERvbWFpbiBleHRlbmRzIGNsb3VkLkRvbWFpbiB7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHJvdGVjdGVkIF9ob3N0ZWRab25lSWQ/OiBzdHJpbmc7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHJvdGVjdGVkIF9pYW1DZXJ0aWZpY2F0ZT86IHN0cmluZztcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwcm90ZWN0ZWQgX2FjbUNlcnRpZmljYXRlQXJuPzogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBjbG91ZC5Eb21haW5Qcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xuXG4gICAgY29uc3QgcGFyYW1ldGVycyA9IEFwcC5vZihzY29wZSkucGFyYW1ldGVycztcblxuICAgIC8vIERvbWFpbiByZXF1aXJlcyBwYXJhbWV0ZXJzIGZyb20gdGhlIHVzZXIsIHNvIHdlIG5lZWQgdG8gYWRkIHRoZSBwYXJhbWV0ZXIgc2NoZW1hcyB0byB0aGUgcmVnaXN0cmFyXG4gICAgbGV0IHNjaGVtYSA9IHtcbiAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICBvbmVPZjogW1xuICAgICAgICB7XG4gICAgICAgICAgcmVxdWlyZWQ6IFtcImlhbUNlcnRpZmljYXRlXCJdLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcmVxdWlyZWQ6IFtcImFjbUNlcnRpZmljYXRlQXJuXCJdLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIHJlcXVpcmVkOiBbXCJob3N0ZWRab25lSWRcIl0sXG4gICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIGlhbUNlcnRpZmljYXRlOiB7XG4gICAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgfSxcbiAgICAgICAgYWNtQ2VydGlmaWNhdGVBcm46IHtcbiAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICB9LFxuICAgICAgICBob3N0ZWRab25lSWQ6IHtcbiAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgcGFyYW1ldGVycy5hZGRTY2hlbWFBdFBhdGgoc2NoZW1hLCB0aGlzLm5vZGUucGF0aCwgdHJ1ZSk7XG5cbiAgICBjb25zdCBpYW1DZXJ0aWZpY2F0ZSA9IHBhcmFtZXRlcnMudmFsdWUoYCR7dGhpcy5ub2RlLnBhdGh9L2lhbUNlcnRpZmljYXRlYCk7XG4gICAgY29uc3QgYWNtQ2VydGlmaWNhdGVBcm4gPSBwYXJhbWV0ZXJzLnZhbHVlKFxuICAgICAgYCR7dGhpcy5ub2RlLnBhdGh9L2FjbUNlcnRpZmljYXRlQXJuYFxuICAgICk7XG4gICAgY29uc3QgaG9zdGVkWm9uZUlkID0gcGFyYW1ldGVycy52YWx1ZShgJHt0aGlzLm5vZGUucGF0aH0vaG9zdGVkWm9uZUlkYCk7XG5cbiAgICB0aGlzLl9pYW1DZXJ0aWZpY2F0ZSA9IGlhbUNlcnRpZmljYXRlO1xuICAgIHRoaXMuX2hvc3RlZFpvbmVJZCA9IGhvc3RlZFpvbmVJZDtcbiAgICB0aGlzLl9hY21DZXJ0aWZpY2F0ZUFybiA9IGFjbUNlcnRpZmljYXRlQXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBob3N0ZWQgem9uZSBpZCB2YWx1ZS5cbiAgICovXG4gIHB1YmxpYyBnZXQgaG9zdGVkWm9uZUlkKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX2hvc3RlZFpvbmVJZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgQVdTIENlcnRpZmljYXRlIE1hbmFnZXIgKEFDTSkgY2VydGlmaWNhdGUgYXJuIHZhbHVlLlxuICAgKi9cbiAgcHVibGljIGdldCBhY21DZXJ0aWZpY2F0ZUFybigpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLl9hY21DZXJ0aWZpY2F0ZUFybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgSUFNIGNlcnRpZmljYXRlIGlkZW50aWZpZXIgdmFsdWUuXG4gICAqL1xuICBwdWJsaWMgZ2V0IGlhbUNlcnRpZmljYXRlKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX2lhbUNlcnRpZmljYXRlO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwdWJsaWMgX3RvSW5mbGlnaHQoKTogc3RyaW5nIHtcbiAgICB0aHJvdyBuZXcgTm90SW1wbGVtZW50ZWRFcnJvcihcbiAgICAgIFwiRG9tYWluIGluZmxpZ2h0IGNsaWVudCBpcyBub3QgaW1wbGVtZW50ZWQgeWV0IG9uIHRoaXMgdGFyZ2V0LlwiXG4gICAgKTtcbiAgfVxufVxuIl19