"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Table = void 0;
const app_1 = require("./app");
const bigtable_instance_1 = require("../.gen/providers/google/bigtable-instance");
const bigtable_table_1 = require("../.gen/providers/google/bigtable-table");
const errors_1 = require("../core/errors");
const ex = __importStar(require("../ex"));
const resource_names_1 = require("../shared/resource-names");
const TABLE_NAME_OPTS = {
    maxLen: 22,
    disallowedRegex: /[a-z0-9\-\.\_]+/g,
    sep: "a",
};
const INSTANCE_NAME_OPTS = {
    maxLen: 22,
    disallowedRegex: /[a-z0-9\-\.\_]+/g,
    sep: "a",
    case: resource_names_1.CaseConventions.LOWERCASE,
};
/**
 * GCP implementation of `ex.Table`.
 *
 * @inflight `@winglang/sdk.ex.ITableClient`
 */
class Table extends ex.Table {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        if (props.initialRows) {
            throw new errors_1.NotImplementedError(`Property initialRows is not supported for the GCP target`, { resource: this.constructor.name, operation: "initialRows" });
        }
        const app = app_1.App.of(this);
        const tableName = resource_names_1.ResourceNames.generateName(this, TABLE_NAME_OPTS);
        const instanceName = resource_names_1.ResourceNames.generateName(this, INSTANCE_NAME_OPTS);
        const columnsFamily = [];
        for (let key in this.columns) {
            columnsFamily.push({ family: key });
        }
        const autoscalingConfig = {
            minNodes: 1,
            maxNodes: 3,
            cpuTarget: 35,
        };
        const instanceCluster = {
            clusterId: "default",
            storageType: "SSD",
            zone: app.zone,
            autoscalingConfig: autoscalingConfig,
        };
        const instanceConfig = {
            name: instanceName,
            cluster: [instanceCluster],
        };
        let instance = new bigtable_instance_1.BigtableInstance(this, "Instance", instanceConfig);
        const tableConfig = {
            name: tableName,
            instanceName: instance.name,
            columnFamily: columnsFamily,
            project: app.projectId,
        };
        new bigtable_table_1.BigtableTable(this, "Default", tableConfig);
    }
    addRow(_key, _row) {
        throw new errors_1.NotImplementedError("Method is not supported as a preflight for the GCP target.", { resource: this.constructor.name, operation: "addRow" });
    }
    onLift(_host, _ops) {
        throw new errors_1.NotImplementedError("Method not implemented.");
    }
    _toInflight() {
        throw new errors_1.NotImplementedError("Table's Inflight client is not implemented yet on tf-GCP target");
    }
}
exports.Table = Table;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGFyZ2V0LXRmLWdjcC90YWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBLCtCQUE0QjtBQUM1QixrRkFLb0Q7QUFDcEQsNEVBSWlEO0FBQ2pELDJDQUFxRDtBQUNyRCwwQ0FBNEI7QUFDNUIsNkRBSWtDO0FBR2xDLE1BQU0sZUFBZSxHQUFnQjtJQUNuQyxNQUFNLEVBQUUsRUFBRTtJQUNWLGVBQWUsRUFBRSxrQkFBa0I7SUFDbkMsR0FBRyxFQUFFLEdBQUc7Q0FDVCxDQUFDO0FBRUYsTUFBTSxrQkFBa0IsR0FBZ0I7SUFDdEMsTUFBTSxFQUFFLEVBQUU7SUFDVixlQUFlLEVBQUUsa0JBQWtCO0lBQ25DLEdBQUcsRUFBRSxHQUFHO0lBQ1IsSUFBSSxFQUFFLGdDQUFlLENBQUMsU0FBUztDQUNoQyxDQUFDO0FBRUY7Ozs7R0FJRztBQUNILE1BQWEsS0FBTSxTQUFRLEVBQUUsQ0FBQyxLQUFLO0lBQ2pDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsUUFBdUIsRUFBRTtRQUNqRSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4QixJQUFJLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUN0QixNQUFNLElBQUksNEJBQW1CLENBQzNCLDBEQUEwRCxFQUMxRCxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsYUFBYSxFQUFFLENBQzlELENBQUM7UUFDSixDQUFDO1FBRUQsTUFBTSxHQUFHLEdBQUcsU0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQVEsQ0FBQztRQUVoQyxNQUFNLFNBQVMsR0FBRyw4QkFBYSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFDcEUsTUFBTSxZQUFZLEdBQUcsOEJBQWEsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLGtCQUFrQixDQUFDLENBQUM7UUFFMUUsTUFBTSxhQUFhLEdBQWdDLEVBQUUsQ0FBQztRQUN0RCxLQUFLLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUM3QixhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDdEMsQ0FBQztRQUVELE1BQU0saUJBQWlCLEdBQTZDO1lBQ2xFLFFBQVEsRUFBRSxDQUFDO1lBQ1gsUUFBUSxFQUFFLENBQUM7WUFDWCxTQUFTLEVBQUUsRUFBRTtTQUNkLENBQUM7UUFFRixNQUFNLGVBQWUsR0FBNEI7WUFDL0MsU0FBUyxFQUFFLFNBQVM7WUFDcEIsV0FBVyxFQUFFLEtBQUs7WUFDbEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJO1lBQ2QsaUJBQWlCLEVBQUUsaUJBQWlCO1NBQ3JDLENBQUM7UUFFRixNQUFNLGNBQWMsR0FBMkI7WUFDN0MsSUFBSSxFQUFFLFlBQVk7WUFDbEIsT0FBTyxFQUFFLENBQUMsZUFBZSxDQUFDO1NBQzNCLENBQUM7UUFFRixJQUFJLFFBQVEsR0FBRyxJQUFJLG9DQUFnQixDQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFFdEUsTUFBTSxXQUFXLEdBQXdCO1lBQ3ZDLElBQUksRUFBRSxTQUFTO1lBQ2YsWUFBWSxFQUFFLFFBQVEsQ0FBQyxJQUFJO1lBQzNCLFlBQVksRUFBRSxhQUFhO1lBQzNCLE9BQU8sRUFBRSxHQUFHLENBQUMsU0FBUztTQUN2QixDQUFDO1FBRUYsSUFBSSw4QkFBYSxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVNLE1BQU0sQ0FBQyxJQUFZLEVBQUUsSUFBVTtRQUNwQyxNQUFNLElBQUksNEJBQW1CLENBQzNCLDREQUE0RCxFQUM1RCxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLENBQ3pELENBQUM7SUFDSixDQUFDO0lBRU0sTUFBTSxDQUFDLEtBQW9CLEVBQUUsSUFBYztRQUNoRCxNQUFNLElBQUksNEJBQW1CLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBRU0sV0FBVztRQUNoQixNQUFNLElBQUksNEJBQW1CLENBQzNCLGlFQUFpRSxDQUNsRSxDQUFDO0lBQ0osQ0FBQztDQUNGO0FBbkVELHNCQW1FQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgeyBBcHAgfSBmcm9tIFwiLi9hcHBcIjtcbmltcG9ydCB7XG4gIEJpZ3RhYmxlSW5zdGFuY2UsXG4gIEJpZ3RhYmxlSW5zdGFuY2VDbHVzdGVyLFxuICBCaWd0YWJsZUluc3RhbmNlQ2x1c3RlckF1dG9zY2FsaW5nQ29uZmlnLFxuICBCaWd0YWJsZUluc3RhbmNlQ29uZmlnLFxufSBmcm9tIFwiLi4vLmdlbi9wcm92aWRlcnMvZ29vZ2xlL2JpZ3RhYmxlLWluc3RhbmNlXCI7XG5pbXBvcnQge1xuICBCaWd0YWJsZVRhYmxlLFxuICBCaWd0YWJsZVRhYmxlQ29uZmlnLFxuICBCaWd0YWJsZVRhYmxlQ29sdW1uRmFtaWx5LFxufSBmcm9tIFwiLi4vLmdlbi9wcm92aWRlcnMvZ29vZ2xlL2JpZ3RhYmxlLXRhYmxlXCI7XG5pbXBvcnQgeyBOb3RJbXBsZW1lbnRlZEVycm9yIH0gZnJvbSBcIi4uL2NvcmUvZXJyb3JzXCI7XG5pbXBvcnQgKiBhcyBleCBmcm9tIFwiLi4vZXhcIjtcbmltcG9ydCB7XG4gIFJlc291cmNlTmFtZXMsXG4gIE5hbWVPcHRpb25zLFxuICBDYXNlQ29udmVudGlvbnMsXG59IGZyb20gXCIuLi9zaGFyZWQvcmVzb3VyY2UtbmFtZXNcIjtcbmltcG9ydCB7IElJbmZsaWdodEhvc3QsIEpzb24gfSBmcm9tIFwiLi4vc3RkXCI7XG5cbmNvbnN0IFRBQkxFX05BTUVfT1BUUzogTmFtZU9wdGlvbnMgPSB7XG4gIG1heExlbjogMjIsXG4gIGRpc2FsbG93ZWRSZWdleDogL1thLXowLTlcXC1cXC5cXF9dKy9nLFxuICBzZXA6IFwiYVwiLFxufTtcblxuY29uc3QgSU5TVEFOQ0VfTkFNRV9PUFRTOiBOYW1lT3B0aW9ucyA9IHtcbiAgbWF4TGVuOiAyMixcbiAgZGlzYWxsb3dlZFJlZ2V4OiAvW2EtejAtOVxcLVxcLlxcX10rL2csXG4gIHNlcDogXCJhXCIsXG4gIGNhc2U6IENhc2VDb252ZW50aW9ucy5MT1dFUkNBU0UsXG59O1xuXG4vKipcbiAqIEdDUCBpbXBsZW1lbnRhdGlvbiBvZiBgZXguVGFibGVgLlxuICpcbiAqIEBpbmZsaWdodCBgQHdpbmdsYW5nL3Nkay5leC5JVGFibGVDbGllbnRgXG4gKi9cbmV4cG9ydCBjbGFzcyBUYWJsZSBleHRlbmRzIGV4LlRhYmxlIHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IGV4LlRhYmxlUHJvcHMgPSB7fSkge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xuXG4gICAgaWYgKHByb3BzLmluaXRpYWxSb3dzKSB7XG4gICAgICB0aHJvdyBuZXcgTm90SW1wbGVtZW50ZWRFcnJvcihcbiAgICAgICAgYFByb3BlcnR5IGluaXRpYWxSb3dzIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIHRoZSBHQ1AgdGFyZ2V0YCxcbiAgICAgICAgeyByZXNvdXJjZTogdGhpcy5jb25zdHJ1Y3Rvci5uYW1lLCBvcGVyYXRpb246IFwiaW5pdGlhbFJvd3NcIiB9XG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IGFwcCA9IEFwcC5vZih0aGlzKSBhcyBBcHA7XG5cbiAgICBjb25zdCB0YWJsZU5hbWUgPSBSZXNvdXJjZU5hbWVzLmdlbmVyYXRlTmFtZSh0aGlzLCBUQUJMRV9OQU1FX09QVFMpO1xuICAgIGNvbnN0IGluc3RhbmNlTmFtZSA9IFJlc291cmNlTmFtZXMuZ2VuZXJhdGVOYW1lKHRoaXMsIElOU1RBTkNFX05BTUVfT1BUUyk7XG5cbiAgICBjb25zdCBjb2x1bW5zRmFtaWx5OiBCaWd0YWJsZVRhYmxlQ29sdW1uRmFtaWx5W10gPSBbXTtcbiAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy5jb2x1bW5zKSB7XG4gICAgICBjb2x1bW5zRmFtaWx5LnB1c2goeyBmYW1pbHk6IGtleSB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBhdXRvc2NhbGluZ0NvbmZpZzogQmlndGFibGVJbnN0YW5jZUNsdXN0ZXJBdXRvc2NhbGluZ0NvbmZpZyA9IHtcbiAgICAgIG1pbk5vZGVzOiAxLFxuICAgICAgbWF4Tm9kZXM6IDMsXG4gICAgICBjcHVUYXJnZXQ6IDM1LFxuICAgIH07XG5cbiAgICBjb25zdCBpbnN0YW5jZUNsdXN0ZXI6IEJpZ3RhYmxlSW5zdGFuY2VDbHVzdGVyID0ge1xuICAgICAgY2x1c3RlcklkOiBcImRlZmF1bHRcIixcbiAgICAgIHN0b3JhZ2VUeXBlOiBcIlNTRFwiLFxuICAgICAgem9uZTogYXBwLnpvbmUsXG4gICAgICBhdXRvc2NhbGluZ0NvbmZpZzogYXV0b3NjYWxpbmdDb25maWcsXG4gICAgfTtcblxuICAgIGNvbnN0IGluc3RhbmNlQ29uZmlnOiBCaWd0YWJsZUluc3RhbmNlQ29uZmlnID0ge1xuICAgICAgbmFtZTogaW5zdGFuY2VOYW1lLFxuICAgICAgY2x1c3RlcjogW2luc3RhbmNlQ2x1c3Rlcl0sXG4gICAgfTtcblxuICAgIGxldCBpbnN0YW5jZSA9IG5ldyBCaWd0YWJsZUluc3RhbmNlKHRoaXMsIFwiSW5zdGFuY2VcIiwgaW5zdGFuY2VDb25maWcpO1xuXG4gICAgY29uc3QgdGFibGVDb25maWc6IEJpZ3RhYmxlVGFibGVDb25maWcgPSB7XG4gICAgICBuYW1lOiB0YWJsZU5hbWUsXG4gICAgICBpbnN0YW5jZU5hbWU6IGluc3RhbmNlLm5hbWUsXG4gICAgICBjb2x1bW5GYW1pbHk6IGNvbHVtbnNGYW1pbHksXG4gICAgICBwcm9qZWN0OiBhcHAucHJvamVjdElkLFxuICAgIH07XG5cbiAgICBuZXcgQmlndGFibGVUYWJsZSh0aGlzLCBcIkRlZmF1bHRcIiwgdGFibGVDb25maWcpO1xuICB9XG5cbiAgcHVibGljIGFkZFJvdyhfa2V5OiBzdHJpbmcsIF9yb3c6IEpzb24pOiB2b2lkIHtcbiAgICB0aHJvdyBuZXcgTm90SW1wbGVtZW50ZWRFcnJvcihcbiAgICAgIFwiTWV0aG9kIGlzIG5vdCBzdXBwb3J0ZWQgYXMgYSBwcmVmbGlnaHQgZm9yIHRoZSBHQ1AgdGFyZ2V0LlwiLFxuICAgICAgeyByZXNvdXJjZTogdGhpcy5jb25zdHJ1Y3Rvci5uYW1lLCBvcGVyYXRpb246IFwiYWRkUm93XCIgfVxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgb25MaWZ0KF9ob3N0OiBJSW5mbGlnaHRIb3N0LCBfb3BzOiBzdHJpbmdbXSk6IHZvaWQge1xuICAgIHRocm93IG5ldyBOb3RJbXBsZW1lbnRlZEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XG4gIH1cblxuICBwdWJsaWMgX3RvSW5mbGlnaHQoKTogc3RyaW5nIHtcbiAgICB0aHJvdyBuZXcgTm90SW1wbGVtZW50ZWRFcnJvcihcbiAgICAgIFwiVGFibGUncyBJbmZsaWdodCBjbGllbnQgaXMgbm90IGltcGxlbWVudGVkIHlldCBvbiB0Zi1HQ1AgdGFyZ2V0XCJcbiAgICApO1xuICB9XG59XG4iXX0=