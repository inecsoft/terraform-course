"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Function = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const cdktf_1 = require("cdktf");
const app_1 = require("./app");
const bucket_1 = require("./bucket");
const __1 = require("..");
const cloudfunctions_function_1 = require("../.gen/providers/google/cloudfunctions-function");
const cloudfunctions_function_iam_member_1 = require("../.gen/providers/google/cloudfunctions-function-iam-member");
const project_iam_custom_role_1 = require("../.gen/providers/google/project-iam-custom-role");
const project_iam_member_1 = require("../.gen/providers/google/project-iam-member");
const service_account_1 = require("../.gen/providers/google/service-account");
const storage_bucket_object_1 = require("../.gen/providers/google/storage-bucket-object");
const cloud = __importStar(require("../cloud"));
const errors_1 = require("../core/errors");
const bundling_1 = require("../shared/bundling");
const function_1 = require("../shared/function");
const resource_names_1 = require("../shared/resource-names");
const FUNCTION_NAME_OPTS = {
    maxLen: 32,
    disallowedRegex: /[^a-z0-9]+/g,
    case: resource_names_1.CaseConventions.LOWERCASE,
};
/**
 * GCP implementation of `cloud.Function`.
 *
 * @inflight `@winglang/sdk.cloud.IFunctionClient`
 */
class Function extends cloud.Function {
    /**
     * Attempts to cast an IInflightHost to an IGcpFunction if it is one.
     * @param host The IInflightHost instance to check and cast.
     * @returns An IGcpFunction if the host is a GCP function, undefined otherwise.
     */
    static from(host) {
        if (this.isGcpFunction(host)) {
            return host;
        }
        return undefined;
    }
    /**
     * Checks if the given object is an instance of IGcpFunction.
     * @param obj The object to check.
     * @returns true if the object is an IGcpFunction, false otherwise.
     */
    static isGcpFunction(obj) {
        return (typeof obj.name === "string" && typeof obj.httpsTriggerUrl === "string");
    }
    constructor(scope, id, inflight, props = {}) {
        super(scope, id, inflight, props);
        this.permissions = new Set([
            "cloudfunctions.functions.get",
        ]);
        // app is a property of the `cloud.Function` class
        const app = app_1.App.of(this);
        if (props.concurrency != null) {
            throw new errors_1.NotImplementedError("Function concurrency isn't implemented yet on the current target.");
        }
        // memory limits must be between 128 and 8192 MB
        if (props?.memory && (props.memory < 128 || props.memory > 8192)) {
            throw new Error("Memory must be between 128 and 8192 MB for GCP Cloud Functions");
        }
        // timeout must be between 1 and 540 seconds
        if (props?.timeout &&
            (props.timeout.seconds < 1 || props.timeout.seconds > 540)) {
            throw new Error("Timeout must be between 1 and 540 seconds for GCP Cloud Functions");
        }
        // create a bucket to store the function executable
        const FunctionBucket = new bucket_1.Bucket(this, "FunctionBucket");
        // put the executable in the bucket as an object
        const FunctionObjectBucket = new storage_bucket_object_1.StorageBucketObject(this, "FunctionObjectBucket", {
            name: "objects",
            bucket: FunctionBucket.bucket.name,
            source: cdktf_1.Lazy.stringValue({
                produce: () => {
                    if (!this.assetPath) {
                        throw new Error("assetPath was not set");
                    }
                    return this.assetPath;
                },
            }),
        });
        // Step 1: Create Custom Service Account
        this.functionServiceAccount = new service_account_1.ServiceAccount(this, `ServiceAccount${this.node.addr.substring(-8)}`, {
            accountId: resource_names_1.ResourceNames.generateName(this, FUNCTION_NAME_OPTS),
            displayName: `Custom Service Account for Cloud Function ${this.node.addr.substring(-8)}`,
        });
        // Step 2: Create Custom Role
        this.functionCustomRole = new project_iam_custom_role_1.ProjectIamCustomRole(this, `CustomRole${this.node.addr.substring(-8)}`, {
            roleId: `cloudfunctions.custom${this.node.addr.substring(-8)}`,
            title: `Custom Role for Cloud Function ${this.node.addr.substring(-8)}`,
            permissions: cdktf_1.Lazy.listValue({
                produce: () => Array.from(this.permissions),
            }),
        });
        // Step 3: Grant Custom Role to Custom Service Account on the Project
        new project_iam_member_1.ProjectIamMember(this, "ProjectIamMember", {
            project: app.projectId,
            role: `projects/${app.projectId}/roles/${this.functionCustomRole.roleId}`,
            member: `serviceAccount:${this.functionServiceAccount.email}`,
        });
        // Step 4: Create the Cloud Function with Custom Service Account
        this.function = new cloudfunctions_function_1.CloudfunctionsFunction(this, "DefaultFunction", {
            name: resource_names_1.ResourceNames.generateName(this, FUNCTION_NAME_OPTS),
            description: "This function was created by Wing",
            project: app.projectId,
            region: app.region,
            runtime: "nodejs20",
            availableMemoryMb: props.memory ?? function_1.DEFAULT_MEMORY_SIZE,
            sourceArchiveBucket: FunctionBucket.bucket.name,
            sourceArchiveObject: FunctionObjectBucket.name,
            entryPoint: "handler",
            triggerHttp: true,
            httpsTriggerSecurityLevel: "SECURE_ALWAYS",
            // It takes around 1 minutes to the function invocation permissions to be established -
            // therefore, the timeout is higher than in other targets
            timeout: props.timeout?.seconds ?? 120,
            serviceAccountEmail: this.functionServiceAccount.email,
            environmentVariables: cdktf_1.Lazy.anyValue({
                produce: () => this.env ?? {},
            }),
        });
    }
    /**
     * @internal
     * @param handler IFunctionHandler
     * @returns the function code lines as strings
     */
    _getCodeLines(handler) {
        const inflightClient = handler._toInflight();
        const lines = new Array();
        lines.push('"use strict";');
        inflightClient;
        lines.push("const functions = require('@google-cloud/functions-framework');\n");
        lines.push(`functions.http('handler', async (req, res) => {`);
        lines.push("  res.set('Access-Control-Allow-Origin', '*')");
        lines.push("  res.set('Access-Control-Allow-Methods', 'GET, POST')");
        lines.push("  try {");
        lines.push(`  const result = await (${inflightClient}).handle(req.body ?? "")`);
        lines.push(`  res.send(result);`);
        lines.push(`  } catch (error) {`);
        lines.push(`  res.status(500).send(error.message);`);
        lines.push("}});");
        return lines;
    }
    /** @internal */
    _preSynthesize() {
        super._preSynthesize();
        // bundled code is guaranteed to be in a fresh directory
        const bundle = (0, bundling_1.createBundle)(this.entrypoint, [
            "@google-cloud/functions-framework",
            "@google-cloud/datastore",
        ]);
        const packageJson = (0, path_1.join)(bundle.directory, "package.json");
        (0, fs_1.writeFileSync)(packageJson, JSON.stringify({
            main: (0, path_1.basename)(bundle.outfilePath),
            dependencies: {
                "@google-cloud/functions-framework": "^3.0.0",
                "@google-cloud/datastore": "8.4.0",
            },
        }, null, 2));
        const asset = new cdktf_1.TerraformAsset(this, "Asset", {
            path: bundle.directory,
            type: cdktf_1.AssetType.ARCHIVE,
        });
        this.assetPath = asset.path;
    }
    get functionName() {
        return this.function.name;
    }
    get serviceAccountEmail() {
        return this.function.serviceAccountEmail;
    }
    get project() {
        return this.function.project;
    }
    get region() {
        return this.function.region;
    }
    /** @internal */
    get _liftMap() {
        return {
            [cloud.FunctionInflightMethods.INVOKE]: [[this.handler, ["handle"]]],
        };
    }
    /** @internal */
    _toInflight() {
        return __1.core.InflightClient.for(__dirname.replace("target-tf-gcp", "shared-gcp"), __filename, "FunctionClient", [
            `process.env["${this.envName()}"]`,
            `process.env["${this.projectEnv()}"]`,
            `process.env["${this.regionEnv()}"]`,
        ]);
    }
    addPermissions(permissions) {
        permissions.forEach((permission) => {
            this.permissions.add(permission);
        });
    }
    onLift(host, ops) {
        if (!(host instanceof Function)) {
            throw new Error("tfgcp.Function can only be bound by tfgcp.Function for now");
        }
        if (ops.includes(cloud.FunctionInflightMethods.INVOKE)) {
            host.addPermissions(["cloudfunctions.functions.invoke"]);
        }
        const { region, projectId } = app_1.App.of(this);
        host.addEnvironment(this.envName(), this.function.name);
        host.addEnvironment(this.projectEnv(), projectId);
        host.addEnvironment(this.regionEnv(), region);
        super.onLift(host, ops);
    }
    /**
     * Grants the given service account permission to invoke this function.
     * @param serviceAccount The service account to grant invoke permissions to.
     * @internal
     */
    _addPermissionToInvoke(serviceAccount) {
        const hash = cdktf_1.Fn.sha256(serviceAccount.email).slice(-8);
        new cloudfunctions_function_iam_member_1.CloudfunctionsFunctionIamMember(this, `invoker-permission-${hash}`, {
            project: this.function.project,
            region: this.function.region,
            cloudFunction: this.function.name,
            role: "roles/cloudfunctions.invoker",
            member: `serviceAccount:${serviceAccount.email}`,
        });
    }
    /** @internal */
    _getHttpsTriggerUrl() {
        return this.function.httpsTriggerUrl;
    }
    envName() {
        return `FUNCTION_NAME_${this.node.addr.slice(-8)}`;
    }
    regionEnv() {
        return `REGION_${this.node.addr.slice(-8)}`;
    }
    projectEnv() {
        return `PROJECT_${this.node.addr.slice(-8)}`;
    }
}
exports.Function = Function;
//# sourceMappingURL=data:application/json;base64,