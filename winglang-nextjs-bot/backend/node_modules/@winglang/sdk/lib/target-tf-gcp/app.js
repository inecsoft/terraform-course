"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.App = void 0;
const bucket_1 = require("./bucket");
const counter_1 = require("./counter");
const function_1 = require("./function");
const schedule_1 = require("./schedule");
const table_1 = require("./table");
const test_runner_1 = require("./test-runner");
const provider_1 = require("../.gen/providers/google/provider");
const provider_2 = require("../.gen/providers/random/provider");
const cloud_1 = require("../cloud");
const ex_1 = require("../ex");
const app_1 = require("../shared-tf/app");
const std_1 = require("../std");
/**
 * An app that knows how to synthesize constructs into a Terraform configuration
 * for GCP resources.
 */
class App extends app_1.CdktfApp {
    constructor(props) {
        super(props);
        this._target = "tf-gcp";
        this.projectId = props.projectId ?? process.env.GOOGLE_PROJECT_ID;
        if (this.projectId === undefined) {
            throw new Error("A Google Cloud project ID must be specified through the GOOGLE_PROJECT_ID environment variable.");
        }
        this.region = props.region ?? process.env.GOOGLE_REGION;
        if (this.region === undefined) {
            throw new Error("A Google Cloud region must be specified through the GOOGLE_REGION environment variable.");
        }
        this.zone = props.zone ?? `${this.region}-a`;
        new provider_1.GoogleProvider(this, "google", {
            project: this.projectId,
            region: this.region,
        });
        new provider_2.RandomProvider(this, "random");
        test_runner_1.TestRunner._createTree(this, props.rootConstruct);
    }
    typeForFqn(fqn) {
        switch (fqn) {
            case std_1.TEST_RUNNER_FQN:
                return test_runner_1.TestRunner;
            case cloud_1.BUCKET_FQN:
                return bucket_1.Bucket;
            case cloud_1.FUNCTION_FQN:
                return function_1.Function;
            case ex_1.TABLE_FQN:
                return table_1.Table;
            case cloud_1.COUNTER_FQN:
                return counter_1.Counter;
            case cloud_1.SCHEDULE_FQN:
                return schedule_1.Schedule;
        }
        return undefined;
    }
}
exports.App = App;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RhcmdldC10Zi1nY3AvYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHFDQUFrQztBQUNsQyx1Q0FBb0M7QUFDcEMseUNBQXNDO0FBQ3RDLHlDQUFzQztBQUN0QyxtQ0FBZ0M7QUFDaEMsK0NBQTJDO0FBQzNDLGdFQUFtRTtBQUNuRSxnRUFBbUU7QUFDbkUsb0NBQStFO0FBRS9FLDhCQUFrQztBQUNsQywwQ0FBNEM7QUFDNUMsZ0NBQXlDO0FBd0J6Qzs7O0dBR0c7QUFDSCxNQUFhLEdBQUksU0FBUSxjQUFRO0lBa0IvQixZQUFZLEtBQWU7UUFDekIsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBSEMsWUFBTyxHQUFHLFFBQVEsQ0FBQztRQUtqQyxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQztRQUNsRSxJQUFJLElBQUksQ0FBQyxTQUFTLEtBQUssU0FBUyxFQUFFLENBQUM7WUFDakMsTUFBTSxJQUFJLEtBQUssQ0FDYixpR0FBaUcsQ0FDbEcsQ0FBQztRQUNKLENBQUM7UUFFRCxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUM7UUFDeEQsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLFNBQVMsRUFBRSxDQUFDO1lBQzlCLE1BQU0sSUFBSSxLQUFLLENBQ2IseUZBQXlGLENBQzFGLENBQUM7UUFDSixDQUFDO1FBRUQsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDO1FBRTdDLElBQUkseUJBQWMsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFO1lBQ2pDLE9BQU8sRUFBRSxJQUFJLENBQUMsU0FBUztZQUN2QixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07U0FDcEIsQ0FBQyxDQUFDO1FBQ0gsSUFBSSx5QkFBYyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztRQUVuQyx3QkFBVSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFUyxVQUFVLENBQUMsR0FBVztRQUM5QixRQUFRLEdBQUcsRUFBRSxDQUFDO1lBQ1osS0FBSyxxQkFBZTtnQkFDbEIsT0FBTyx3QkFBVSxDQUFDO1lBQ3BCLEtBQUssa0JBQVU7Z0JBQ2IsT0FBTyxlQUFNLENBQUM7WUFDaEIsS0FBSyxvQkFBWTtnQkFDZixPQUFPLG1CQUFRLENBQUM7WUFDbEIsS0FBSyxjQUFTO2dCQUNaLE9BQU8sYUFBSyxDQUFDO1lBQ2YsS0FBSyxtQkFBVztnQkFDZCxPQUFPLGlCQUFPLENBQUM7WUFDakIsS0FBSyxvQkFBWTtnQkFDZixPQUFPLG1CQUFRLENBQUM7UUFDcEIsQ0FBQztRQUVELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7Q0FDRjtBQWhFRCxrQkFnRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCdWNrZXQgfSBmcm9tIFwiLi9idWNrZXRcIjtcbmltcG9ydCB7IENvdW50ZXIgfSBmcm9tIFwiLi9jb3VudGVyXCI7XG5pbXBvcnQgeyBGdW5jdGlvbiB9IGZyb20gXCIuL2Z1bmN0aW9uXCI7XG5pbXBvcnQgeyBTY2hlZHVsZSB9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5pbXBvcnQgeyBUYWJsZSB9IGZyb20gXCIuL3RhYmxlXCI7XG5pbXBvcnQgeyBUZXN0UnVubmVyIH0gZnJvbSBcIi4vdGVzdC1ydW5uZXJcIjtcbmltcG9ydCB7IEdvb2dsZVByb3ZpZGVyIH0gZnJvbSBcIi4uLy5nZW4vcHJvdmlkZXJzL2dvb2dsZS9wcm92aWRlclwiO1xuaW1wb3J0IHsgUmFuZG9tUHJvdmlkZXIgfSBmcm9tIFwiLi4vLmdlbi9wcm92aWRlcnMvcmFuZG9tL3Byb3ZpZGVyXCI7XG5pbXBvcnQgeyBCVUNLRVRfRlFOLCBDT1VOVEVSX0ZRTiwgRlVOQ1RJT05fRlFOLCBTQ0hFRFVMRV9GUU4gfSBmcm9tIFwiLi4vY2xvdWRcIjtcbmltcG9ydCB7IEFwcFByb3BzIGFzIENka3RmQXBwUHJvcHMgfSBmcm9tIFwiLi4vY29yZVwiO1xuaW1wb3J0IHsgVEFCTEVfRlFOIH0gZnJvbSBcIi4uL2V4XCI7XG5pbXBvcnQgeyBDZGt0ZkFwcCB9IGZyb20gXCIuLi9zaGFyZWQtdGYvYXBwXCI7XG5pbXBvcnQgeyBURVNUX1JVTk5FUl9GUU4gfSBmcm9tIFwiLi4vc3RkXCI7XG5cbi8qKlxuICogR0NQIEFwcCBwcm9wcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBcHBQcm9wcyBleHRlbmRzIENka3RmQXBwUHJvcHMge1xuICAvKipcbiAgICogVGhlIEdvb2dsZSBDbG91ZCBwcm9qZWN0IElELlxuICAgKi9cbiAgcmVhZG9ubHkgcHJvamVjdElkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBHb29nbGUgQ2xvdWQgcmVnaW9uLCB1c2VkIGZvciBhbGwgcmVzb3VyY2VzLlxuICAgKiBAc2VlIGh0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbS9mdW5jdGlvbnMvZG9jcy9sb2NhdGlvbnNcbiAgICovXG4gIHJlYWRvbmx5IHJlZ2lvbjogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgR29vZ2xlIENsb3VkIHpvbmUsIHVzZWQgZm9yIGFsbCByZXNvdXJjZXMuXG4gICAqIEBzZWUgaHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL2Z1bmN0aW9ucy9kb2NzL2xvY2F0aW9uc1xuICAgKi9cbiAgcmVhZG9ubHkgem9uZT86IHN0cmluZztcbn1cblxuLyoqXG4gKiBBbiBhcHAgdGhhdCBrbm93cyBob3cgdG8gc3ludGhlc2l6ZSBjb25zdHJ1Y3RzIGludG8gYSBUZXJyYWZvcm0gY29uZmlndXJhdGlvblxuICogZm9yIEdDUCByZXNvdXJjZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBBcHAgZXh0ZW5kcyBDZGt0ZkFwcCB7XG4gIC8qKlxuICAgKiBUaGUgR29vZ2xlIENsb3VkIHByb2plY3QgSUQuXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgcHJvamVjdElkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBHb29nbGUgQ2xvdWQgcmVnaW9uLCB1c2VkIGZvciBhbGwgcmVzb3VyY2VzLlxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IHJlZ2lvbjogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgR29vZ2xlIENsb3VkIHpvbmUuXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgem9uZTogc3RyaW5nO1xuXG4gIHB1YmxpYyByZWFkb25seSBfdGFyZ2V0ID0gXCJ0Zi1nY3BcIjtcblxuICBjb25zdHJ1Y3Rvcihwcm9wczogQXBwUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLnByb2plY3RJZCA9IHByb3BzLnByb2plY3RJZCA/PyBwcm9jZXNzLmVudi5HT09HTEVfUFJPSkVDVF9JRDtcbiAgICBpZiAodGhpcy5wcm9qZWN0SWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBcIkEgR29vZ2xlIENsb3VkIHByb2plY3QgSUQgbXVzdCBiZSBzcGVjaWZpZWQgdGhyb3VnaCB0aGUgR09PR0xFX1BST0pFQ1RfSUQgZW52aXJvbm1lbnQgdmFyaWFibGUuXCJcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdGhpcy5yZWdpb24gPSBwcm9wcy5yZWdpb24gPz8gcHJvY2Vzcy5lbnYuR09PR0xFX1JFR0lPTjtcbiAgICBpZiAodGhpcy5yZWdpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBcIkEgR29vZ2xlIENsb3VkIHJlZ2lvbiBtdXN0IGJlIHNwZWNpZmllZCB0aHJvdWdoIHRoZSBHT09HTEVfUkVHSU9OIGVudmlyb25tZW50IHZhcmlhYmxlLlwiXG4gICAgICApO1xuICAgIH1cblxuICAgIHRoaXMuem9uZSA9IHByb3BzLnpvbmUgPz8gYCR7dGhpcy5yZWdpb259LWFgO1xuXG4gICAgbmV3IEdvb2dsZVByb3ZpZGVyKHRoaXMsIFwiZ29vZ2xlXCIsIHtcbiAgICAgIHByb2plY3Q6IHRoaXMucHJvamVjdElkLFxuICAgICAgcmVnaW9uOiB0aGlzLnJlZ2lvbixcbiAgICB9KTtcbiAgICBuZXcgUmFuZG9tUHJvdmlkZXIodGhpcywgXCJyYW5kb21cIik7XG5cbiAgICBUZXN0UnVubmVyLl9jcmVhdGVUcmVlKHRoaXMsIHByb3BzLnJvb3RDb25zdHJ1Y3QpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHR5cGVGb3JGcW4oZnFuOiBzdHJpbmcpOiBhbnkge1xuICAgIHN3aXRjaCAoZnFuKSB7XG4gICAgICBjYXNlIFRFU1RfUlVOTkVSX0ZRTjpcbiAgICAgICAgcmV0dXJuIFRlc3RSdW5uZXI7XG4gICAgICBjYXNlIEJVQ0tFVF9GUU46XG4gICAgICAgIHJldHVybiBCdWNrZXQ7XG4gICAgICBjYXNlIEZVTkNUSU9OX0ZRTjpcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uO1xuICAgICAgY2FzZSBUQUJMRV9GUU46XG4gICAgICAgIHJldHVybiBUYWJsZTtcbiAgICAgIGNhc2UgQ09VTlRFUl9GUU46XG4gICAgICAgIHJldHVybiBDb3VudGVyO1xuICAgICAgY2FzZSBTQ0hFRFVMRV9GUU46XG4gICAgICAgIHJldHVybiBTY2hlZHVsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG4iXX0=