"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Counter = void 0;
const app_1 = require("./app");
const function_1 = require("./function");
const permissions_1 = require("./permissions");
const firestore_database_1 = require("../.gen/providers/google/firestore-database");
const project_service_1 = require("../.gen/providers/google/project-service");
const cloud = __importStar(require("../cloud"));
const core = __importStar(require("../core"));
const resource_names_1 = require("../shared/resource-names");
/**
 * Valid database IDs include `(default)` and IDs that conform to the following:
 * - Includes only letters, numbers, and hyphen (-) characters.
 * - The first character must be a letter.
 * - The last character must be a letter or number.
 * - Minimum of 4 characters.
 * - Maximum of 63 characters.
 */
const NAME_OPTS = {
    maxLen: 63,
    case: resource_names_1.CaseConventions.LOWERCASE,
    disallowedRegex: /[^a-zA-Z0-9\-]+/g,
    prefix: "wing-counter-",
};
/**
 * GCP implementation of `cloud.Counter`.
 *
 * @inflight `@winglang/sdk.cloud.ICounterClient`
 */
class Counter extends cloud.Counter {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        const cloudFirestoreApi = new project_service_1.ProjectService(this, "CloudFirestoreAPI", {
            service: "firestore.googleapis.com",
            disableOnDestroy: false,
        });
        this.database = new firestore_database_1.FirestoreDatabase(this, "Default", {
            name: resource_names_1.ResourceNames.generateName(this, NAME_OPTS),
            locationId: app_1.App.of(this).region,
            type: "DATASTORE_MODE",
            concurrencyMode: "OPTIMISTIC",
            appEngineIntegrationMode: "DISABLED",
            pointInTimeRecoveryEnablement: "POINT_IN_TIME_RECOVERY_DISABLED",
            deleteProtectionState: "DELETE_PROTECTION_DISABLED",
            deletionPolicy: "DELETE",
            dependsOn: [cloudFirestoreApi],
        });
    }
    /** @internal */
    get _liftMap() {
        return {
            [cloud.CounterInflightMethods.PEEK]: [],
            [cloud.CounterInflightMethods.INC]: [],
            [cloud.CounterInflightMethods.DEC]: [],
            [cloud.CounterInflightMethods.SET]: [],
        };
    }
    onLift(host, ops) {
        if (!(host instanceof function_1.Function)) {
            throw new Error("counters can only be bound by tfgcp.Function for now");
        }
        const permissions = (0, permissions_1.calculateCounterPermissions)(ops);
        host.addPermissions(permissions);
        host.addEnvironment(this.envName(), this.database.name);
        super.onLift(host, ops);
    }
    /** @internal */
    _toInflight() {
        return core.InflightClient.for(__dirname.replace("target-tf-gcp", "shared-gcp"), __filename, "CounterClient", [`process.env["${this.envName()}"]`, `${this.initial}`]);
    }
    envName() {
        return `FIRESTORE_DATABASE_NAME_${this.node.addr.slice(-8)}`;
    }
}
exports.Counter = Counter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90YXJnZXQtdGYtZ2NwL2NvdW50ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSwrQkFBNEI7QUFDNUIseUNBQXFEO0FBQ3JELCtDQUE0RDtBQUM1RCxvRkFBZ0Y7QUFDaEYsOEVBQTBFO0FBQzFFLGdEQUFrQztBQUNsQyw4Q0FBZ0M7QUFDaEMsNkRBSWtDO0FBR2xDOzs7Ozs7O0dBT0c7QUFDSCxNQUFNLFNBQVMsR0FBZ0I7SUFDN0IsTUFBTSxFQUFFLEVBQUU7SUFDVixJQUFJLEVBQUUsZ0NBQWUsQ0FBQyxTQUFTO0lBQy9CLGVBQWUsRUFBRSxrQkFBa0I7SUFDbkMsTUFBTSxFQUFFLGVBQWU7Q0FDeEIsQ0FBQztBQUVGOzs7O0dBSUc7QUFDSCxNQUFhLE9BQVEsU0FBUSxLQUFLLENBQUMsT0FBTztJQUd4QyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLFFBQTRCLEVBQUU7UUFDdEUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFeEIsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLGdDQUFjLENBQUMsSUFBSSxFQUFFLG1CQUFtQixFQUFFO1lBQ3RFLE9BQU8sRUFBRSwwQkFBMEI7WUFDbkMsZ0JBQWdCLEVBQUUsS0FBSztTQUN4QixDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksc0NBQWlCLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRTtZQUNyRCxJQUFJLEVBQUUsOEJBQWEsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQztZQUNqRCxVQUFVLEVBQUcsU0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQVMsQ0FBQyxNQUFNO1lBQ3hDLElBQUksRUFBRSxnQkFBZ0I7WUFDdEIsZUFBZSxFQUFFLFlBQVk7WUFDN0Isd0JBQXdCLEVBQUUsVUFBVTtZQUNwQyw2QkFBNkIsRUFBRSxpQ0FBaUM7WUFDaEUscUJBQXFCLEVBQUUsNEJBQTRCO1lBQ25ELGNBQWMsRUFBRSxRQUFRO1lBQ3hCLFNBQVMsRUFBRSxDQUFDLGlCQUFpQixDQUFDO1NBQy9CLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxnQkFBZ0I7SUFDaEIsSUFBVyxRQUFRO1FBQ2pCLE9BQU87WUFDTCxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFO1lBQ3ZDLENBQUMsS0FBSyxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUU7WUFDdEMsQ0FBQyxLQUFLLENBQUMsc0JBQXNCLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRTtZQUN0QyxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFO1NBQ3ZDLENBQUM7SUFDSixDQUFDO0lBRU0sTUFBTSxDQUFDLElBQW1CLEVBQUUsR0FBYTtRQUM5QyxJQUFJLENBQUMsQ0FBQyxJQUFJLFlBQVksbUJBQVcsQ0FBQyxFQUFFLENBQUM7WUFDbkMsTUFBTSxJQUFJLEtBQUssQ0FBQyxzREFBc0QsQ0FBQyxDQUFDO1FBQzFFLENBQUM7UUFFRCxNQUFNLFdBQVcsR0FBRyxJQUFBLHlDQUEyQixFQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFakMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN4RCxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQsZ0JBQWdCO0lBQ1QsV0FBVztRQUNoQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUM1QixTQUFTLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxZQUFZLENBQUMsRUFDaEQsVUFBVSxFQUNWLGVBQWUsRUFDZixDQUFDLGdCQUFnQixJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUN4RCxDQUFDO0lBQ0osQ0FBQztJQUVPLE9BQU87UUFDYixPQUFPLDJCQUEyQixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQy9ELENBQUM7Q0FDRjtBQTNERCwwQkEyREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4vYXBwXCI7XG5pbXBvcnQgeyBGdW5jdGlvbiBhcyBHQ1BGdW5jdGlvbiB9IGZyb20gXCIuL2Z1bmN0aW9uXCI7XG5pbXBvcnQgeyBjYWxjdWxhdGVDb3VudGVyUGVybWlzc2lvbnMgfSBmcm9tIFwiLi9wZXJtaXNzaW9uc1wiO1xuaW1wb3J0IHsgRmlyZXN0b3JlRGF0YWJhc2UgfSBmcm9tIFwiLi4vLmdlbi9wcm92aWRlcnMvZ29vZ2xlL2ZpcmVzdG9yZS1kYXRhYmFzZVwiO1xuaW1wb3J0IHsgUHJvamVjdFNlcnZpY2UgfSBmcm9tIFwiLi4vLmdlbi9wcm92aWRlcnMvZ29vZ2xlL3Byb2plY3Qtc2VydmljZVwiO1xuaW1wb3J0ICogYXMgY2xvdWQgZnJvbSBcIi4uL2Nsb3VkXCI7XG5pbXBvcnQgKiBhcyBjb3JlIGZyb20gXCIuLi9jb3JlXCI7XG5pbXBvcnQge1xuICBDYXNlQ29udmVudGlvbnMsXG4gIE5hbWVPcHRpb25zLFxuICBSZXNvdXJjZU5hbWVzLFxufSBmcm9tIFwiLi4vc2hhcmVkL3Jlc291cmNlLW5hbWVzXCI7XG5pbXBvcnQgeyBJSW5mbGlnaHRIb3N0IH0gZnJvbSBcIi4uL3N0ZFwiO1xuXG4vKipcbiAqIFZhbGlkIGRhdGFiYXNlIElEcyBpbmNsdWRlIGAoZGVmYXVsdClgIGFuZCBJRHMgdGhhdCBjb25mb3JtIHRvIHRoZSBmb2xsb3dpbmc6XG4gKiAtIEluY2x1ZGVzIG9ubHkgbGV0dGVycywgbnVtYmVycywgYW5kIGh5cGhlbiAoLSkgY2hhcmFjdGVycy5cbiAqIC0gVGhlIGZpcnN0IGNoYXJhY3RlciBtdXN0IGJlIGEgbGV0dGVyLlxuICogLSBUaGUgbGFzdCBjaGFyYWN0ZXIgbXVzdCBiZSBhIGxldHRlciBvciBudW1iZXIuXG4gKiAtIE1pbmltdW0gb2YgNCBjaGFyYWN0ZXJzLlxuICogLSBNYXhpbXVtIG9mIDYzIGNoYXJhY3RlcnMuXG4gKi9cbmNvbnN0IE5BTUVfT1BUUzogTmFtZU9wdGlvbnMgPSB7XG4gIG1heExlbjogNjMsXG4gIGNhc2U6IENhc2VDb252ZW50aW9ucy5MT1dFUkNBU0UsXG4gIGRpc2FsbG93ZWRSZWdleDogL1teYS16QS1aMC05XFwtXSsvZyxcbiAgcHJlZml4OiBcIndpbmctY291bnRlci1cIixcbn07XG5cbi8qKlxuICogR0NQIGltcGxlbWVudGF0aW9uIG9mIGBjbG91ZC5Db3VudGVyYC5cbiAqXG4gKiBAaW5mbGlnaHQgYEB3aW5nbGFuZy9zZGsuY2xvdWQuSUNvdW50ZXJDbGllbnRgXG4gKi9cbmV4cG9ydCBjbGFzcyBDb3VudGVyIGV4dGVuZHMgY2xvdWQuQ291bnRlciB7XG4gIHByaXZhdGUgcmVhZG9ubHkgZGF0YWJhc2U6IEZpcmVzdG9yZURhdGFiYXNlO1xuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBjbG91ZC5Db3VudGVyUHJvcHMgPSB7fSkge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xuXG4gICAgY29uc3QgY2xvdWRGaXJlc3RvcmVBcGkgPSBuZXcgUHJvamVjdFNlcnZpY2UodGhpcywgXCJDbG91ZEZpcmVzdG9yZUFQSVwiLCB7XG4gICAgICBzZXJ2aWNlOiBcImZpcmVzdG9yZS5nb29nbGVhcGlzLmNvbVwiLFxuICAgICAgZGlzYWJsZU9uRGVzdHJveTogZmFsc2UsXG4gICAgfSk7XG5cbiAgICB0aGlzLmRhdGFiYXNlID0gbmV3IEZpcmVzdG9yZURhdGFiYXNlKHRoaXMsIFwiRGVmYXVsdFwiLCB7XG4gICAgICBuYW1lOiBSZXNvdXJjZU5hbWVzLmdlbmVyYXRlTmFtZSh0aGlzLCBOQU1FX09QVFMpLFxuICAgICAgbG9jYXRpb25JZDogKEFwcC5vZih0aGlzKSBhcyBBcHApLnJlZ2lvbixcbiAgICAgIHR5cGU6IFwiREFUQVNUT1JFX01PREVcIixcbiAgICAgIGNvbmN1cnJlbmN5TW9kZTogXCJPUFRJTUlTVElDXCIsXG4gICAgICBhcHBFbmdpbmVJbnRlZ3JhdGlvbk1vZGU6IFwiRElTQUJMRURcIixcbiAgICAgIHBvaW50SW5UaW1lUmVjb3ZlcnlFbmFibGVtZW50OiBcIlBPSU5UX0lOX1RJTUVfUkVDT1ZFUllfRElTQUJMRURcIixcbiAgICAgIGRlbGV0ZVByb3RlY3Rpb25TdGF0ZTogXCJERUxFVEVfUFJPVEVDVElPTl9ESVNBQkxFRFwiLFxuICAgICAgZGVsZXRpb25Qb2xpY3k6IFwiREVMRVRFXCIsXG4gICAgICBkZXBlbmRzT246IFtjbG91ZEZpcmVzdG9yZUFwaV0sXG4gICAgfSk7XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIHB1YmxpYyBnZXQgX2xpZnRNYXAoKTogY29yZS5MaWZ0TWFwIHtcbiAgICByZXR1cm4ge1xuICAgICAgW2Nsb3VkLkNvdW50ZXJJbmZsaWdodE1ldGhvZHMuUEVFS106IFtdLFxuICAgICAgW2Nsb3VkLkNvdW50ZXJJbmZsaWdodE1ldGhvZHMuSU5DXTogW10sXG4gICAgICBbY2xvdWQuQ291bnRlckluZmxpZ2h0TWV0aG9kcy5ERUNdOiBbXSxcbiAgICAgIFtjbG91ZC5Db3VudGVySW5mbGlnaHRNZXRob2RzLlNFVF06IFtdLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMgb25MaWZ0KGhvc3Q6IElJbmZsaWdodEhvc3QsIG9wczogc3RyaW5nW10pOiB2b2lkIHtcbiAgICBpZiAoIShob3N0IGluc3RhbmNlb2YgR0NQRnVuY3Rpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjb3VudGVycyBjYW4gb25seSBiZSBib3VuZCBieSB0ZmdjcC5GdW5jdGlvbiBmb3Igbm93XCIpO1xuICAgIH1cblxuICAgIGNvbnN0IHBlcm1pc3Npb25zID0gY2FsY3VsYXRlQ291bnRlclBlcm1pc3Npb25zKG9wcyk7XG4gICAgaG9zdC5hZGRQZXJtaXNzaW9ucyhwZXJtaXNzaW9ucyk7XG5cbiAgICBob3N0LmFkZEVudmlyb25tZW50KHRoaXMuZW52TmFtZSgpLCB0aGlzLmRhdGFiYXNlLm5hbWUpO1xuICAgIHN1cGVyLm9uTGlmdChob3N0LCBvcHMpO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwdWJsaWMgX3RvSW5mbGlnaHQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gY29yZS5JbmZsaWdodENsaWVudC5mb3IoXG4gICAgICBfX2Rpcm5hbWUucmVwbGFjZShcInRhcmdldC10Zi1nY3BcIiwgXCJzaGFyZWQtZ2NwXCIpLFxuICAgICAgX19maWxlbmFtZSxcbiAgICAgIFwiQ291bnRlckNsaWVudFwiLFxuICAgICAgW2Bwcm9jZXNzLmVudltcIiR7dGhpcy5lbnZOYW1lKCl9XCJdYCwgYCR7dGhpcy5pbml0aWFsfWBdXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgZW52TmFtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiBgRklSRVNUT1JFX0RBVEFCQVNFX05BTUVfJHt0aGlzLm5vZGUuYWRkci5zbGljZSgtOCl9YDtcbiAgfVxufVxuIl19