"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculateCounterPermissions = exports.calculateBucketPermissions = void 0;
const cloud = __importStar(require("../cloud"));
function calculateBucketPermissions(ops) {
    const permissions = [];
    if (ops.includes(cloud.BucketInflightMethods.GET) ||
        ops.includes(cloud.BucketInflightMethods.GET_JSON) ||
        ops.includes(cloud.BucketInflightMethods.TRY_GET) ||
        ops.includes(cloud.BucketInflightMethods.TRY_GET_JSON) ||
        ops.includes(cloud.BucketInflightMethods.TRY_DELETE) ||
        ops.includes(cloud.BucketInflightMethods.EXISTS) ||
        ops.includes(cloud.BucketInflightMethods.METADATA) ||
        ops.includes(cloud.BucketInflightMethods.PUBLIC_URL) ||
        ops.includes(cloud.BucketInflightMethods.COPY) ||
        ops.includes(cloud.BucketInflightMethods.RENAME) ||
        ops.includes(cloud.BucketInflightMethods.SIGNED_URL)) {
        permissions.push("storage.objects.get");
    }
    if (ops.includes(cloud.BucketInflightMethods.PUT) ||
        ops.includes(cloud.BucketInflightMethods.PUT_JSON) ||
        ops.includes(cloud.BucketInflightMethods.COPY) ||
        ops.includes(cloud.BucketInflightMethods.RENAME) ||
        ops.includes(cloud.BucketInflightMethods.SIGNED_URL)) {
        permissions.push("storage.objects.create");
    }
    if (ops.includes(cloud.BucketInflightMethods.DELETE) ||
        ops.includes(cloud.BucketInflightMethods.TRY_DELETE) ||
        ops.includes(cloud.BucketInflightMethods.PUT) ||
        ops.includes(cloud.BucketInflightMethods.PUT_JSON) ||
        ops.includes(cloud.BucketInflightMethods.COPY) ||
        ops.includes(cloud.BucketInflightMethods.RENAME) ||
        ops.includes(cloud.BucketInflightMethods.SIGNED_URL)) {
        permissions.push("storage.objects.delete");
    }
    if (ops.includes(cloud.BucketInflightMethods.LIST) ||
        ops.includes(cloud.BucketInflightMethods.SIGNED_URL)) {
        permissions.push("storage.objects.list");
    }
    if (ops.includes(cloud.BucketInflightMethods.PUBLIC_URL)) {
        permissions.push("storage.buckets.get");
    }
    if (ops.includes(cloud.BucketInflightMethods.SIGNED_URL)) {
        permissions.push("iam.serviceAccounts.signBlob");
    }
    return permissions;
}
exports.calculateBucketPermissions = calculateBucketPermissions;
function calculateCounterPermissions(ops) {
    const permissions = [];
    if (ops.includes(cloud.CounterInflightMethods.PEEK) ||
        ops.includes(cloud.CounterInflightMethods.INC) ||
        ops.includes(cloud.CounterInflightMethods.DEC)) {
        permissions.push("datastore.entities.get");
    }
    if (ops.includes(cloud.CounterInflightMethods.PEEK) ||
        ops.includes(cloud.CounterInflightMethods.INC) ||
        ops.includes(cloud.CounterInflightMethods.DEC) ||
        ops.includes(cloud.CounterInflightMethods.SET)) {
        permissions.push("datastore.entities.create");
    }
    if (ops.includes(cloud.CounterInflightMethods.INC) ||
        ops.includes(cloud.CounterInflightMethods.DEC) ||
        ops.includes(cloud.CounterInflightMethods.SET)) {
        permissions.push("datastore.entities.update");
    }
    return permissions;
}
exports.calculateCounterPermissions = calculateCounterPermissions;
//# sourceMappingURL=data:application/json;base64,