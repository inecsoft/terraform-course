"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Schedule = void 0;
const app_1 = require("./app");
const function_1 = require("./function");
const cloud_scheduler_job_1 = require("../.gen/providers/google/cloud-scheduler-job");
const service_account_1 = require("../.gen/providers/google/service-account");
const cloud = __importStar(require("../cloud"));
const core = __importStar(require("../core"));
const std_1 = require("../std");
/**
 * GCP implementation of `cloud.Schedule`.
 *
 * @inflight `@winglang/sdk.cloud.IScheduleClient`
 */
class Schedule extends cloud.Schedule {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        // private readonly scheduler: CloudSchedulerJob;
        this.handlers = {};
        const { rate, cron } = props;
        /*
         * A schedule is defined using the unix-cron string format (* * * * *) which
         * is a set of five fields in a line, indicating when the job should be executed.
         * https://cloud.google.com/scheduler/docs/configuring/cron-job-schedules
         */
        this.scheduleExpression = (rate ? `*/${rate.minutes} * * * *` : cron);
    }
    onTick(inflight, props = {}) {
        const uniqueId = this.node.addr.substring(0, 8);
        const functionHandler = core.lift({ inflight }).inflight(async (ctx) => {
            await ctx.inflight();
        });
        let cronFunction = this.handlers[inflight._id];
        if (cronFunction) {
            return cronFunction;
        }
        cronFunction = new function_1.Function(this, app_1.App.of(this).makeId(this, "OnTick"), functionHandler, props);
        this.handlers[inflight._id] = cronFunction;
        // create scheduler service account
        const schedulerServiceAccount = new service_account_1.ServiceAccount(this, "SchedulerServiceAccount", {
            accountId: `scheduler-${uniqueId}-sa`,
            displayName: `Service Account for scheduler-${uniqueId}`,
        });
        // allow scheduler service account to invoke cron function
        cronFunction._addPermissionToInvoke(schedulerServiceAccount);
        // create scheduler
        new cloud_scheduler_job_1.CloudSchedulerJob(this, "Scheduler", {
            name: `scheduler-${uniqueId}`,
            description: `Trigger ${cronFunction.functionName}`,
            schedule: this.scheduleExpression,
            timeZone: "Etc/UTC",
            attemptDeadline: "300s",
            httpTarget: {
                httpMethod: "GET",
                uri: cronFunction._getHttpsTriggerUrl(),
                oidcToken: {
                    serviceAccountEmail: schedulerServiceAccount.email,
                },
            },
        });
        std_1.Node.of(this).addConnection({
            source: this,
            sourceOp: cloud.ScheduleInflightMethods.TICK,
            target: cronFunction,
            targetOp: cloud.FunctionInflightMethods.INVOKE,
            name: "tick",
        });
        return cronFunction;
    }
    /** @internal */
    _toInflight() {
        return core.InflightClient.for(__dirname.replace("target-tf-gcp", "shared-gcp"), __filename, "ScheduleClient", [`process.env["${this.envName()}"]`]);
    }
    envName() {
        return `SCHEDULE_EVENT_${this.node.addr.slice(-8)}`;
    }
}
exports.Schedule = Schedule;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZWR1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGFyZ2V0LXRmLWdjcC9zY2hlZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBLCtCQUE0QjtBQUM1Qix5Q0FBc0M7QUFDdEMsc0ZBQWlGO0FBQ2pGLDhFQUEwRTtBQUMxRSxnREFBa0M7QUFDbEMsOENBQWdDO0FBQ2hDLGdDQUE4QjtBQUU5Qjs7OztHQUlHO0FBQ0gsTUFBYSxRQUFTLFNBQVEsS0FBSyxDQUFDLFFBQVE7SUFLMUMsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxRQUE2QixFQUFFO1FBQ3ZFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBSjFCLGlEQUFpRDtRQUNoQyxhQUFRLEdBQTZCLEVBQUUsQ0FBQztRQUt2RCxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQztRQUU3Qjs7OztXQUlHO1FBQ0gsSUFBSSxDQUFDLGtCQUFrQixHQUFHLENBQ3hCLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsT0FBTyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDaEMsQ0FBQztJQUNkLENBQUM7SUFFTSxNQUFNLENBQ1gsUUFBc0MsRUFDdEMsUUFBcUMsRUFBRTtRQUV2QyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRWhELE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDckUsTUFBTSxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDdkIsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMvQyxJQUFJLFlBQVksRUFBRSxDQUFDO1lBQ2pCLE9BQU8sWUFBWSxDQUFDO1FBQ3RCLENBQUM7UUFFRCxZQUFZLEdBQUcsSUFBSSxtQkFBUSxDQUN6QixJQUFJLEVBQ0osU0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxFQUNuQyxlQUFlLEVBQ2YsS0FBSyxDQUNOLENBQUM7UUFDRixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxZQUFZLENBQUM7UUFFM0MsbUNBQW1DO1FBQ25DLE1BQU0sdUJBQXVCLEdBQUcsSUFBSSxnQ0FBYyxDQUNoRCxJQUFJLEVBQ0oseUJBQXlCLEVBQ3pCO1lBQ0UsU0FBUyxFQUFFLGFBQWEsUUFBUSxLQUFLO1lBQ3JDLFdBQVcsRUFBRSxpQ0FBaUMsUUFBUSxFQUFFO1NBQ3pELENBQ0YsQ0FBQztRQUVGLDBEQUEwRDtRQUMxRCxZQUFZLENBQUMsc0JBQXNCLENBQUMsdUJBQXVCLENBQUMsQ0FBQztRQUU3RCxtQkFBbUI7UUFDbkIsSUFBSSx1Q0FBaUIsQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFO1lBQ3ZDLElBQUksRUFBRSxhQUFhLFFBQVEsRUFBRTtZQUM3QixXQUFXLEVBQUUsV0FBVyxZQUFZLENBQUMsWUFBWSxFQUFFO1lBQ25ELFFBQVEsRUFBRSxJQUFJLENBQUMsa0JBQWtCO1lBQ2pDLFFBQVEsRUFBRSxTQUFTO1lBQ25CLGVBQWUsRUFBRSxNQUFNO1lBQ3ZCLFVBQVUsRUFBRTtnQkFDVixVQUFVLEVBQUUsS0FBSztnQkFDakIsR0FBRyxFQUFFLFlBQVksQ0FBQyxtQkFBbUIsRUFBRTtnQkFDdkMsU0FBUyxFQUFFO29CQUNULG1CQUFtQixFQUFFLHVCQUF1QixDQUFDLEtBQUs7aUJBQ25EO2FBQ0Y7U0FDRixDQUFDLENBQUM7UUFFSCxVQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLGFBQWEsQ0FBQztZQUMxQixNQUFNLEVBQUUsSUFBSTtZQUNaLFFBQVEsRUFBRSxLQUFLLENBQUMsdUJBQXVCLENBQUMsSUFBSTtZQUM1QyxNQUFNLEVBQUUsWUFBWTtZQUNwQixRQUFRLEVBQUUsS0FBSyxDQUFDLHVCQUF1QixDQUFDLE1BQU07WUFDOUMsSUFBSSxFQUFFLE1BQU07U0FDYixDQUFDLENBQUM7UUFFSCxPQUFPLFlBQVksQ0FBQztJQUN0QixDQUFDO0lBRUQsZ0JBQWdCO0lBQ1QsV0FBVztRQUNoQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUM1QixTQUFTLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxZQUFZLENBQUMsRUFDaEQsVUFBVSxFQUNWLGdCQUFnQixFQUNoQixDQUFDLGdCQUFnQixJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUNyQyxDQUFDO0lBQ0osQ0FBQztJQUVPLE9BQU87UUFDYixPQUFPLGtCQUFrQixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ3RELENBQUM7Q0FDRjtBQWhHRCw0QkFnR0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4vYXBwXCI7XG5pbXBvcnQgeyBGdW5jdGlvbiB9IGZyb20gXCIuL2Z1bmN0aW9uXCI7XG5pbXBvcnQgeyBDbG91ZFNjaGVkdWxlckpvYiB9IGZyb20gXCIuLi8uZ2VuL3Byb3ZpZGVycy9nb29nbGUvY2xvdWQtc2NoZWR1bGVyLWpvYlwiO1xuaW1wb3J0IHsgU2VydmljZUFjY291bnQgfSBmcm9tIFwiLi4vLmdlbi9wcm92aWRlcnMvZ29vZ2xlL3NlcnZpY2UtYWNjb3VudFwiO1xuaW1wb3J0ICogYXMgY2xvdWQgZnJvbSBcIi4uL2Nsb3VkXCI7XG5pbXBvcnQgKiBhcyBjb3JlIGZyb20gXCIuLi9jb3JlXCI7XG5pbXBvcnQgeyBOb2RlIH0gZnJvbSBcIi4uL3N0ZFwiO1xuXG4vKipcbiAqIEdDUCBpbXBsZW1lbnRhdGlvbiBvZiBgY2xvdWQuU2NoZWR1bGVgLlxuICpcbiAqIEBpbmZsaWdodCBgQHdpbmdsYW5nL3Nkay5jbG91ZC5JU2NoZWR1bGVDbGllbnRgXG4gKi9cbmV4cG9ydCBjbGFzcyBTY2hlZHVsZSBleHRlbmRzIGNsb3VkLlNjaGVkdWxlIHtcbiAgcHJpdmF0ZSByZWFkb25seSBzY2hlZHVsZUV4cHJlc3Npb246IHN0cmluZztcbiAgLy8gcHJpdmF0ZSByZWFkb25seSBzY2hlZHVsZXI6IENsb3VkU2NoZWR1bGVySm9iO1xuICBwcml2YXRlIHJlYWRvbmx5IGhhbmRsZXJzOiBSZWNvcmQ8c3RyaW5nLCBGdW5jdGlvbj4gPSB7fTtcblxuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogY2xvdWQuU2NoZWR1bGVQcm9wcyA9IHt9KSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XG5cbiAgICBjb25zdCB7IHJhdGUsIGNyb24gfSA9IHByb3BzO1xuXG4gICAgLypcbiAgICAgKiBBIHNjaGVkdWxlIGlzIGRlZmluZWQgdXNpbmcgdGhlIHVuaXgtY3JvbiBzdHJpbmcgZm9ybWF0ICgqICogKiAqICopIHdoaWNoXG4gICAgICogaXMgYSBzZXQgb2YgZml2ZSBmaWVsZHMgaW4gYSBsaW5lLCBpbmRpY2F0aW5nIHdoZW4gdGhlIGpvYiBzaG91bGQgYmUgZXhlY3V0ZWQuXG4gICAgICogaHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL3NjaGVkdWxlci9kb2NzL2NvbmZpZ3VyaW5nL2Nyb24tam9iLXNjaGVkdWxlc1xuICAgICAqL1xuICAgIHRoaXMuc2NoZWR1bGVFeHByZXNzaW9uID0gKFxuICAgICAgcmF0ZSA/IGAqLyR7cmF0ZS5taW51dGVzfSAqICogKiAqYCA6IGNyb25cbiAgICApIGFzIHN0cmluZztcbiAgfVxuXG4gIHB1YmxpYyBvblRpY2soXG4gICAgaW5mbGlnaHQ6IGNsb3VkLklTY2hlZHVsZU9uVGlja0hhbmRsZXIsXG4gICAgcHJvcHM6IGNsb3VkLlNjaGVkdWxlT25UaWNrT3B0aW9ucyA9IHt9XG4gICk6IGNsb3VkLkZ1bmN0aW9uIHtcbiAgICBjb25zdCB1bmlxdWVJZCA9IHRoaXMubm9kZS5hZGRyLnN1YnN0cmluZygwLCA4KTtcblxuICAgIGNvbnN0IGZ1bmN0aW9uSGFuZGxlciA9IGNvcmUubGlmdCh7IGluZmxpZ2h0IH0pLmluZmxpZ2h0KGFzeW5jIChjdHgpID0+IHtcbiAgICAgIGF3YWl0IGN0eC5pbmZsaWdodCgpO1xuICAgIH0pO1xuXG4gICAgbGV0IGNyb25GdW5jdGlvbiA9IHRoaXMuaGFuZGxlcnNbaW5mbGlnaHQuX2lkXTtcbiAgICBpZiAoY3JvbkZ1bmN0aW9uKSB7XG4gICAgICByZXR1cm4gY3JvbkZ1bmN0aW9uO1xuICAgIH1cblxuICAgIGNyb25GdW5jdGlvbiA9IG5ldyBGdW5jdGlvbihcbiAgICAgIHRoaXMsXG4gICAgICBBcHAub2YodGhpcykubWFrZUlkKHRoaXMsIFwiT25UaWNrXCIpLFxuICAgICAgZnVuY3Rpb25IYW5kbGVyLFxuICAgICAgcHJvcHNcbiAgICApO1xuICAgIHRoaXMuaGFuZGxlcnNbaW5mbGlnaHQuX2lkXSA9IGNyb25GdW5jdGlvbjtcblxuICAgIC8vIGNyZWF0ZSBzY2hlZHVsZXIgc2VydmljZSBhY2NvdW50XG4gICAgY29uc3Qgc2NoZWR1bGVyU2VydmljZUFjY291bnQgPSBuZXcgU2VydmljZUFjY291bnQoXG4gICAgICB0aGlzLFxuICAgICAgXCJTY2hlZHVsZXJTZXJ2aWNlQWNjb3VudFwiLFxuICAgICAge1xuICAgICAgICBhY2NvdW50SWQ6IGBzY2hlZHVsZXItJHt1bmlxdWVJZH0tc2FgLFxuICAgICAgICBkaXNwbGF5TmFtZTogYFNlcnZpY2UgQWNjb3VudCBmb3Igc2NoZWR1bGVyLSR7dW5pcXVlSWR9YCxcbiAgICAgIH1cbiAgICApO1xuXG4gICAgLy8gYWxsb3cgc2NoZWR1bGVyIHNlcnZpY2UgYWNjb3VudCB0byBpbnZva2UgY3JvbiBmdW5jdGlvblxuICAgIGNyb25GdW5jdGlvbi5fYWRkUGVybWlzc2lvblRvSW52b2tlKHNjaGVkdWxlclNlcnZpY2VBY2NvdW50KTtcblxuICAgIC8vIGNyZWF0ZSBzY2hlZHVsZXJcbiAgICBuZXcgQ2xvdWRTY2hlZHVsZXJKb2IodGhpcywgXCJTY2hlZHVsZXJcIiwge1xuICAgICAgbmFtZTogYHNjaGVkdWxlci0ke3VuaXF1ZUlkfWAsXG4gICAgICBkZXNjcmlwdGlvbjogYFRyaWdnZXIgJHtjcm9uRnVuY3Rpb24uZnVuY3Rpb25OYW1lfWAsXG4gICAgICBzY2hlZHVsZTogdGhpcy5zY2hlZHVsZUV4cHJlc3Npb24sXG4gICAgICB0aW1lWm9uZTogXCJFdGMvVVRDXCIsXG4gICAgICBhdHRlbXB0RGVhZGxpbmU6IFwiMzAwc1wiLFxuICAgICAgaHR0cFRhcmdldDoge1xuICAgICAgICBodHRwTWV0aG9kOiBcIkdFVFwiLFxuICAgICAgICB1cmk6IGNyb25GdW5jdGlvbi5fZ2V0SHR0cHNUcmlnZ2VyVXJsKCksXG4gICAgICAgIG9pZGNUb2tlbjoge1xuICAgICAgICAgIHNlcnZpY2VBY2NvdW50RW1haWw6IHNjaGVkdWxlclNlcnZpY2VBY2NvdW50LmVtYWlsLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIE5vZGUub2YodGhpcykuYWRkQ29ubmVjdGlvbih7XG4gICAgICBzb3VyY2U6IHRoaXMsXG4gICAgICBzb3VyY2VPcDogY2xvdWQuU2NoZWR1bGVJbmZsaWdodE1ldGhvZHMuVElDSyxcbiAgICAgIHRhcmdldDogY3JvbkZ1bmN0aW9uLFxuICAgICAgdGFyZ2V0T3A6IGNsb3VkLkZ1bmN0aW9uSW5mbGlnaHRNZXRob2RzLklOVk9LRSxcbiAgICAgIG5hbWU6IFwidGlja1wiLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNyb25GdW5jdGlvbjtcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHVibGljIF90b0luZmxpZ2h0KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGNvcmUuSW5mbGlnaHRDbGllbnQuZm9yKFxuICAgICAgX19kaXJuYW1lLnJlcGxhY2UoXCJ0YXJnZXQtdGYtZ2NwXCIsIFwic2hhcmVkLWdjcFwiKSxcbiAgICAgIF9fZmlsZW5hbWUsXG4gICAgICBcIlNjaGVkdWxlQ2xpZW50XCIsXG4gICAgICBbYHByb2Nlc3MuZW52W1wiJHt0aGlzLmVudk5hbWUoKX1cIl1gXVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGVudk5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYFNDSEVEVUxFX0VWRU5UXyR7dGhpcy5ub2RlLmFkZHIuc2xpY2UoLTgpfWA7XG4gIH1cbn1cbiJdfQ==