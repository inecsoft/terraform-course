"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Schedule = void 0;
const app_1 = require("./app");
const function_1 = require("./function");
const cloudwatch_event_rule_1 = require("../.gen/providers/aws/cloudwatch-event-rule");
const cloudwatch_event_target_1 = require("../.gen/providers/aws/cloudwatch-event-target");
const cloud = __importStar(require("../cloud"));
const core = __importStar(require("../core"));
const schedule_1 = require("../shared-aws/schedule");
const std_1 = require("../std");
/**
 * AWS implementation of `cloud.Schedule`.
 *
 * @inflight `@winglang/sdk.cloud.IScheduleClient`
 */
class Schedule extends cloud.Schedule {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        this.handlers = {};
        const { rate, cron } = props;
        this.scheduleExpression = rate
            ? rate.minutes === 1
                ? `rate(${rate.minutes} minute)`
                : `rate(${rate.minutes} minutes)`
            : `cron(${(0, schedule_1.convertUnixCronToAWSCron)(cron)})`;
        this.rule = new cloudwatch_event_rule_1.CloudwatchEventRule(this, "Schedule", {
            scheduleExpression: this.scheduleExpression,
        });
    }
    onTick(inflight, props = {}) {
        const functionHandler = schedule_1.ScheduleOnTickHandler.toFunctionHandler(inflight);
        let fn = this.handlers[inflight._id];
        if (fn) {
            return fn;
        }
        fn = new function_1.Function(this, app_1.App.of(this).makeId(this, "OnTick"), functionHandler, props);
        this.handlers[inflight._id] = fn;
        // TODO: remove this constraint by adding generic permission APIs to cloud.Function
        if (!(fn instanceof function_1.Function)) {
            throw new Error("Schedule only supports creating tfaws.Function right now");
        }
        fn.addPermissionToInvoke(this, "events.amazonaws.com", this.rule.arn);
        new cloudwatch_event_target_1.CloudwatchEventTarget(this, app_1.App.of(this).makeId(this, "ScheduleTarget"), {
            arn: fn.qualifiedArn,
            rule: this.rule.name,
        });
        std_1.Node.of(this).addConnection({
            source: this,
            sourceOp: cloud.ScheduleInflightMethods.TICK,
            target: fn,
            targetOp: cloud.FunctionInflightMethods.INVOKE,
            name: "tick",
        });
        return fn;
    }
    /** @internal */
    _toInflight() {
        return core.InflightClient.for(__dirname.replace("target-tf-aws", "shared-aws"), __filename, "ScheduleClient", [`process.env["${this.envName()}"]`]);
    }
    envName() {
        return `SCHEDULE_EVENT_${this.node.addr.slice(-8)}`;
    }
}
exports.Schedule = Schedule;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZWR1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGFyZ2V0LXRmLWF3cy9zY2hlZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBLCtCQUE0QjtBQUM1Qix5Q0FBc0M7QUFDdEMsdUZBQWtGO0FBQ2xGLDJGQUFzRjtBQUN0RixnREFBa0M7QUFDbEMsOENBQWdDO0FBQ2hDLHFEQUdnQztBQUNoQyxnQ0FBOEI7QUFFOUI7Ozs7R0FJRztBQUNILE1BQWEsUUFBUyxTQUFRLEtBQUssQ0FBQyxRQUFRO0lBSzFDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsUUFBNkIsRUFBRTtRQUN2RSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUhULGFBQVEsR0FBNkIsRUFBRSxDQUFDO1FBS3ZELE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDO1FBRTdCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJO1lBQzVCLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLENBQUM7Z0JBQ2xCLENBQUMsQ0FBQyxRQUFRLElBQUksQ0FBQyxPQUFPLFVBQVU7Z0JBQ2hDLENBQUMsQ0FBQyxRQUFRLElBQUksQ0FBQyxPQUFPLFdBQVc7WUFDbkMsQ0FBQyxDQUFDLFFBQVEsSUFBQSxtQ0FBd0IsRUFBQyxJQUFLLENBQUMsR0FBRyxDQUFDO1FBRS9DLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSwyQ0FBbUIsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFO1lBQ3BELGtCQUFrQixFQUFFLElBQUksQ0FBQyxrQkFBa0I7U0FDNUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVNLE1BQU0sQ0FDWCxRQUFzQyxFQUN0QyxRQUFxQyxFQUFFO1FBRXZDLE1BQU0sZUFBZSxHQUFHLGdDQUFxQixDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3JDLElBQUksRUFBRSxFQUFFLENBQUM7WUFDUCxPQUFPLEVBQUUsQ0FBQztRQUNaLENBQUM7UUFFRCxFQUFFLEdBQUcsSUFBSSxtQkFBUSxDQUNmLElBQUksRUFDSixTQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLEVBQ25DLGVBQWUsRUFDZixLQUFLLENBQ04sQ0FBQztRQUNGLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUVqQyxtRkFBbUY7UUFDbkYsSUFBSSxDQUFDLENBQUMsRUFBRSxZQUFZLG1CQUFRLENBQUMsRUFBRSxDQUFDO1lBQzlCLE1BQU0sSUFBSSxLQUFLLENBQ2IsMERBQTBELENBQzNELENBQUM7UUFDSixDQUFDO1FBRUQsRUFBRSxDQUFDLHFCQUFxQixDQUFDLElBQUksRUFBRSxzQkFBc0IsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXRFLElBQUksK0NBQXFCLENBQ3ZCLElBQUksRUFDSixTQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLENBQUMsRUFDM0M7WUFDRSxHQUFHLEVBQUUsRUFBRSxDQUFDLFlBQVk7WUFDcEIsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSTtTQUNyQixDQUNGLENBQUM7UUFFRixVQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLGFBQWEsQ0FBQztZQUMxQixNQUFNLEVBQUUsSUFBSTtZQUNaLFFBQVEsRUFBRSxLQUFLLENBQUMsdUJBQXVCLENBQUMsSUFBSTtZQUM1QyxNQUFNLEVBQUUsRUFBRTtZQUNWLFFBQVEsRUFBRSxLQUFLLENBQUMsdUJBQXVCLENBQUMsTUFBTTtZQUM5QyxJQUFJLEVBQUUsTUFBTTtTQUNiLENBQUMsQ0FBQztRQUVILE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQztJQUVELGdCQUFnQjtJQUNULFdBQVc7UUFDaEIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FDNUIsU0FBUyxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsWUFBWSxDQUFDLEVBQ2hELFVBQVUsRUFDVixnQkFBZ0IsRUFDaEIsQ0FBQyxnQkFBZ0IsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FDckMsQ0FBQztJQUNKLENBQUM7SUFFTyxPQUFPO1FBQ2IsT0FBTyxrQkFBa0IsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUN0RCxDQUFDO0NBQ0Y7QUFqRkQsNEJBaUZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCB7IEFwcCB9IGZyb20gXCIuL2FwcFwiO1xuaW1wb3J0IHsgRnVuY3Rpb24gfSBmcm9tIFwiLi9mdW5jdGlvblwiO1xuaW1wb3J0IHsgQ2xvdWR3YXRjaEV2ZW50UnVsZSB9IGZyb20gXCIuLi8uZ2VuL3Byb3ZpZGVycy9hd3MvY2xvdWR3YXRjaC1ldmVudC1ydWxlXCI7XG5pbXBvcnQgeyBDbG91ZHdhdGNoRXZlbnRUYXJnZXQgfSBmcm9tIFwiLi4vLmdlbi9wcm92aWRlcnMvYXdzL2Nsb3Vkd2F0Y2gtZXZlbnQtdGFyZ2V0XCI7XG5pbXBvcnQgKiBhcyBjbG91ZCBmcm9tIFwiLi4vY2xvdWRcIjtcbmltcG9ydCAqIGFzIGNvcmUgZnJvbSBcIi4uL2NvcmVcIjtcbmltcG9ydCB7XG4gIFNjaGVkdWxlT25UaWNrSGFuZGxlcixcbiAgY29udmVydFVuaXhDcm9uVG9BV1NDcm9uLFxufSBmcm9tIFwiLi4vc2hhcmVkLWF3cy9zY2hlZHVsZVwiO1xuaW1wb3J0IHsgTm9kZSB9IGZyb20gXCIuLi9zdGRcIjtcblxuLyoqXG4gKiBBV1MgaW1wbGVtZW50YXRpb24gb2YgYGNsb3VkLlNjaGVkdWxlYC5cbiAqXG4gKiBAaW5mbGlnaHQgYEB3aW5nbGFuZy9zZGsuY2xvdWQuSVNjaGVkdWxlQ2xpZW50YFxuICovXG5leHBvcnQgY2xhc3MgU2NoZWR1bGUgZXh0ZW5kcyBjbG91ZC5TY2hlZHVsZSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgc2NoZWR1bGVFeHByZXNzaW9uOiBzdHJpbmc7XG4gIHByaXZhdGUgcmVhZG9ubHkgcnVsZTogQ2xvdWR3YXRjaEV2ZW50UnVsZTtcbiAgcHJpdmF0ZSByZWFkb25seSBoYW5kbGVyczogUmVjb3JkPHN0cmluZywgRnVuY3Rpb24+ID0ge307XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IGNsb3VkLlNjaGVkdWxlUHJvcHMgPSB7fSkge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xuXG4gICAgY29uc3QgeyByYXRlLCBjcm9uIH0gPSBwcm9wcztcblxuICAgIHRoaXMuc2NoZWR1bGVFeHByZXNzaW9uID0gcmF0ZVxuICAgICAgPyByYXRlLm1pbnV0ZXMgPT09IDFcbiAgICAgICAgPyBgcmF0ZSgke3JhdGUubWludXRlc30gbWludXRlKWBcbiAgICAgICAgOiBgcmF0ZSgke3JhdGUubWludXRlc30gbWludXRlcylgXG4gICAgICA6IGBjcm9uKCR7Y29udmVydFVuaXhDcm9uVG9BV1NDcm9uKGNyb24hKX0pYDtcblxuICAgIHRoaXMucnVsZSA9IG5ldyBDbG91ZHdhdGNoRXZlbnRSdWxlKHRoaXMsIFwiU2NoZWR1bGVcIiwge1xuICAgICAgc2NoZWR1bGVFeHByZXNzaW9uOiB0aGlzLnNjaGVkdWxlRXhwcmVzc2lvbixcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBvblRpY2soXG4gICAgaW5mbGlnaHQ6IGNsb3VkLklTY2hlZHVsZU9uVGlja0hhbmRsZXIsXG4gICAgcHJvcHM6IGNsb3VkLlNjaGVkdWxlT25UaWNrT3B0aW9ucyA9IHt9XG4gICk6IGNsb3VkLkZ1bmN0aW9uIHtcbiAgICBjb25zdCBmdW5jdGlvbkhhbmRsZXIgPSBTY2hlZHVsZU9uVGlja0hhbmRsZXIudG9GdW5jdGlvbkhhbmRsZXIoaW5mbGlnaHQpO1xuICAgIGxldCBmbiA9IHRoaXMuaGFuZGxlcnNbaW5mbGlnaHQuX2lkXTtcbiAgICBpZiAoZm4pIHtcbiAgICAgIHJldHVybiBmbjtcbiAgICB9XG5cbiAgICBmbiA9IG5ldyBGdW5jdGlvbihcbiAgICAgIHRoaXMsXG4gICAgICBBcHAub2YodGhpcykubWFrZUlkKHRoaXMsIFwiT25UaWNrXCIpLFxuICAgICAgZnVuY3Rpb25IYW5kbGVyLFxuICAgICAgcHJvcHNcbiAgICApO1xuICAgIHRoaXMuaGFuZGxlcnNbaW5mbGlnaHQuX2lkXSA9IGZuO1xuXG4gICAgLy8gVE9ETzogcmVtb3ZlIHRoaXMgY29uc3RyYWludCBieSBhZGRpbmcgZ2VuZXJpYyBwZXJtaXNzaW9uIEFQSXMgdG8gY2xvdWQuRnVuY3Rpb25cbiAgICBpZiAoIShmbiBpbnN0YW5jZW9mIEZ1bmN0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBcIlNjaGVkdWxlIG9ubHkgc3VwcG9ydHMgY3JlYXRpbmcgdGZhd3MuRnVuY3Rpb24gcmlnaHQgbm93XCJcbiAgICAgICk7XG4gICAgfVxuXG4gICAgZm4uYWRkUGVybWlzc2lvblRvSW52b2tlKHRoaXMsIFwiZXZlbnRzLmFtYXpvbmF3cy5jb21cIiwgdGhpcy5ydWxlLmFybik7XG5cbiAgICBuZXcgQ2xvdWR3YXRjaEV2ZW50VGFyZ2V0KFxuICAgICAgdGhpcyxcbiAgICAgIEFwcC5vZih0aGlzKS5tYWtlSWQodGhpcywgXCJTY2hlZHVsZVRhcmdldFwiKSxcbiAgICAgIHtcbiAgICAgICAgYXJuOiBmbi5xdWFsaWZpZWRBcm4sXG4gICAgICAgIHJ1bGU6IHRoaXMucnVsZS5uYW1lLFxuICAgICAgfVxuICAgICk7XG5cbiAgICBOb2RlLm9mKHRoaXMpLmFkZENvbm5lY3Rpb24oe1xuICAgICAgc291cmNlOiB0aGlzLFxuICAgICAgc291cmNlT3A6IGNsb3VkLlNjaGVkdWxlSW5mbGlnaHRNZXRob2RzLlRJQ0ssXG4gICAgICB0YXJnZXQ6IGZuLFxuICAgICAgdGFyZ2V0T3A6IGNsb3VkLkZ1bmN0aW9uSW5mbGlnaHRNZXRob2RzLklOVk9LRSxcbiAgICAgIG5hbWU6IFwidGlja1wiLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwdWJsaWMgX3RvSW5mbGlnaHQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gY29yZS5JbmZsaWdodENsaWVudC5mb3IoXG4gICAgICBfX2Rpcm5hbWUucmVwbGFjZShcInRhcmdldC10Zi1hd3NcIiwgXCJzaGFyZWQtYXdzXCIpLFxuICAgICAgX19maWxlbmFtZSxcbiAgICAgIFwiU2NoZWR1bGVDbGllbnRcIixcbiAgICAgIFtgcHJvY2Vzcy5lbnZbXCIke3RoaXMuZW52TmFtZSgpfVwiXWBdXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgZW52TmFtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiBgU0NIRURVTEVfRVZFTlRfJHt0aGlzLm5vZGUuYWRkci5zbGljZSgtOCl9YDtcbiAgfVxufVxuIl19