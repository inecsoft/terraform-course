import { Construct } from "constructs";
import { S3Bucket } from "../.gen/providers/aws/s3-bucket";
import * as cloud from "../cloud";
import * as core from "../core";
import { NameOptions } from "../shared/resource-names";
import { IAwsBucket } from "../shared-aws/bucket";
import { IInflightHost } from "../std";
/**
 * Bucket prefix provided to Terraform must be between 3 and 37 characters.
 *
 * Bucket names are allowed to contain lowercase alphanumeric characters and
 * dashes (-). We generate names without dots (.) to avoid some partial
 * restrictions on bucket names with dots.
 */
export declare const BUCKET_PREFIX_OPTS: NameOptions;
/**
 * AWS implementation of `cloud.Bucket`.
 *
 * @inflight `@winglang/sdk.aws.IAwsBucketClient`
 */
export declare class Bucket extends cloud.Bucket implements IAwsBucket {
    private readonly bucket;
    private readonly public;
    private readonly notificationTopics;
    private readonly notificationDependencies;
    constructor(scope: Construct, id: string, props?: cloud.BucketProps);
    addObject(key: string, body: string): void;
    /** @internal */
    get _liftMap(): core.LiftMap;
    protected createTopicHandler(eventType: cloud.BucketEventType, inflight: cloud.IBucketEventHandler): cloud.ITopicOnMessageHandler;
    protected createTopic(actionType: cloud.BucketEventType): cloud.Topic;
    _preSynthesize(): void;
    onLift(host: IInflightHost, ops: string[]): void;
    /** @internal */
    _toInflight(): string;
    private envName;
    get bucketArn(): string;
    get bucketName(): string;
}
export declare function createEncryptedBucket(scope: Construct, isPublic: boolean, name?: string): S3Bucket;
