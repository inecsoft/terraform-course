"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Topic = void 0;
const app_1 = require("./app");
const function_1 = require("./function");
const queue_1 = require("./queue");
const sns_topic_1 = require("../.gen/providers/aws/sns-topic");
const sns_topic_policy_1 = require("../.gen/providers/aws/sns-topic-policy");
const sns_topic_subscription_1 = require("../.gen/providers/aws/sns-topic-subscription");
const sqs_queue_policy_1 = require("../.gen/providers/aws/sqs-queue-policy");
const cloud = __importStar(require("../cloud"));
const core = __importStar(require("../core"));
const resource_names_1 = require("../shared/resource-names");
const shared_aws_1 = require("../shared-aws");
const permissions_1 = require("../shared-aws/permissions");
const topic_1 = require("../shared-aws/topic");
const std_1 = require("../std");
/**
 * Topic names are limited to 256 characters.
 * You can use alphanumeric characters, hyphens (-) and underscores (_).
 */
const NAME_OPTS = {
    maxLen: 256,
    disallowedRegex: /[^a-zA-Z0-9\_\-]+/g,
};
/**
 * AWS Implementation of `cloud.Topic`.
 *
 * @inflight `@winglang/sdk.cloud.ITopicClient`
 */
class Topic extends cloud.Topic {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        this.handlers = {};
        this.topic = new sns_topic_1.SnsTopic(this, "Default", {
            name: resource_names_1.ResourceNames.generateName(this, NAME_OPTS),
        });
    }
    onMessage(inflight, props = {}) {
        const functionHandler = topic_1.TopicOnMessageHandler.toFunctionHandler(inflight);
        let fn = this.handlers[inflight._id];
        if (fn) {
            return fn;
        }
        fn = new function_1.Function(
        // ok since we're not a tree root
        this.node.scope, app_1.App.of(this).makeId(this, `${this.node.id}-OnMessage`), functionHandler, props);
        this.handlers[inflight._id] = fn;
        // TODO: remove this constraint by adding generic permission APIs to cloud.Function
        if (!(fn instanceof function_1.Function)) {
            throw new Error("Topic only supports creating tfaws.Function right now");
        }
        new sns_topic_subscription_1.SnsTopicSubscription(this, app_1.App.of(this).makeId(this, "TopicSubscription"), {
            topicArn: this.topicArn,
            protocol: "lambda",
            endpoint: fn.functionArn,
        });
        fn.addPermissionToInvoke(this, "sns.amazonaws.com", this.topic.arn, {});
        std_1.Node.of(this).addConnection({
            source: this,
            sourceOp: cloud.TopicInflightMethods.PUBLISH,
            target: fn,
            targetOp: cloud.FunctionInflightMethods.INVOKE_ASYNC,
            name: "subscriber",
        });
        return fn;
    }
    subscribeQueue(queue) {
        if (!(queue instanceof queue_1.Queue)) {
            throw new Error("'subscribeQueue' allows only tfaws.Queue to be subscribed to the Topic");
        }
        new sns_topic_subscription_1.SnsTopicSubscription(this, app_1.App.of(this).makeId(this, "TopicSubscription"), {
            topicArn: this.topicArn,
            protocol: "sqs",
            endpoint: queue.queueArn,
            rawMessageDelivery: true,
        });
        new sqs_queue_policy_1.SqsQueuePolicy(this, `SqsQueuePolicy-${queue.node.addr}`, {
            queueUrl: queue.queueUrl,
            policy: JSON.stringify({
                Version: "2012-10-17",
                Statement: [
                    {
                        Effect: "Allow",
                        Principal: {
                            Service: "sns.amazonaws.com",
                        },
                        Action: "sqs:SendMessage",
                        Resource: `${queue.queueArn}`,
                        Condition: {
                            ArnEquals: {
                                "aws:SourceArn": `${this.topicArn}`,
                            },
                        },
                    },
                ],
            }),
        });
    }
    /**
     * Grants the given identity permissions to publish this topic.
     * @param source the resource that will publish to the topic
     * @param principal The AWS principal to grant publish permissions to (e.g. "s3.amazonaws.com", "events.amazonaws.com", "sns.amazonaws.com")
     * @param sourceArn source arn
     */
    addPermissionToPublish(source, principal, sourceArn) {
        this.permissions = new sns_topic_policy_1.SnsTopicPolicy(this, `PublishPermission-${source.node.addr}`, {
            arn: this.topic.arn,
            policy: JSON.stringify({
                Statement: [
                    {
                        Effect: "Allow",
                        Principal: {
                            Service: principal,
                        },
                        Action: "sns:Publish",
                        Resource: this.topic.arn,
                        Condition: {
                            ArnEquals: {
                                "aws:SourceArn": sourceArn,
                            },
                        },
                    },
                ],
            }),
        });
    }
    onLift(host, ops) {
        if (!shared_aws_1.AwsInflightHost.isAwsInflightHost(host)) {
            throw new Error("Host is expected to implement `IAwsInfightHost`");
        }
        host.addPolicyStatements(...(0, permissions_1.calculateTopicPermissions)(this.topic.arn, ops));
        host.addEnvironment(this.envName(), this.topic.arn);
        super.onLift(host, ops);
    }
    /** @internal */
    _toInflight() {
        return core.InflightClient.for(__dirname.replace("target-tf-aws", "shared-aws"), __filename, "TopicClient", [`process.env["${this.envName()}"]`]);
    }
    /** @internal */
    get _liftMap() {
        return {
            [cloud.TopicInflightMethods.PUBLISH]: [],
        };
    }
    envName() {
        return `TOPIC_ARN_${this.node.addr.slice(-8)}`;
    }
    get topicArn() {
        return this.topic.arn;
    }
    get topicName() {
        return this.topic.name;
    }
}
exports.Topic = Topic;
//# sourceMappingURL=data:application/json;base64,