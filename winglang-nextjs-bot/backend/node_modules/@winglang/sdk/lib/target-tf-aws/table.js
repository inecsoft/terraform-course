"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Table = void 0;
const util_dynamodb_1 = require("@aws-sdk/util-dynamodb");
const app_1 = require("./app");
const dynamodb_table_1 = require("../.gen/providers/aws/dynamodb-table");
const dynamodb_table_item_1 = require("../.gen/providers/aws/dynamodb-table-item");
const core = __importStar(require("../core"));
const ex = __importStar(require("../ex"));
const resource_names_1 = require("../shared/resource-names");
const shared_aws_1 = require("../shared-aws");
/**
 * Table names must be between 3 and 255 characters.
 * You can use alphanumeric characters, dot (.), dash (-), and underscores (_).
 */
const NAME_OPTS = {
    maxLen: 255,
    disallowedRegex: /[^a-zA-Z0-9\_\.\-]+/g,
};
/**
 * AWS implementation of `ex.Table`.
 *
 * @inflight `@winglang/sdk.ex.ITableClient`
 */
class Table extends ex.Table {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        const isTestEnvironment = app_1.App.of(scope).isTestEnvironment;
        this.table = new dynamodb_table_1.DynamodbTable(this, "Default", {
            name: resource_names_1.ResourceNames.generateName(this, {
                prefix: this.name,
                ...NAME_OPTS,
            }),
            attribute: [{ name: this.primaryKey, type: "S" }],
            hashKey: this.primaryKey,
            billingMode: "PAY_PER_REQUEST",
            pointInTimeRecovery: isTestEnvironment ? undefined : { enabled: true },
        });
    }
    addRow(key, row) {
        const item = { [this.primaryKey]: key, ...row };
        const marshalledItem = (0, util_dynamodb_1.marshall)(item);
        const stringifiedItem = JSON.stringify(marshalledItem);
        new dynamodb_table_item_1.DynamodbTableItem(this, `DynamodbTableItem-${key}`, {
            tableName: this.table.name,
            hashKey: this.table.hashKey,
            item: stringifiedItem,
        });
    }
    onLift(host, ops) {
        if (!shared_aws_1.AwsInflightHost.isAwsInflightHost(host)) {
            throw new Error("Host is expected to implement `IAwsInfightHost`");
        }
        if (ops.includes(ex.TableInflightMethods.INSERT) ||
            ops.includes(ex.TableInflightMethods.UPSERT)) {
            host.addPolicyStatements({
                actions: ["dynamodb:PutItem"],
                resources: [this.table.arn],
            });
        }
        if (ops.includes(ex.TableInflightMethods.UPDATE)) {
            host.addPolicyStatements({
                actions: ["dynamodb:UpdateItem"],
                resources: [this.table.arn],
            });
        }
        if (ops.includes(ex.TableInflightMethods.DELETE)) {
            host.addPolicyStatements({
                actions: ["dynamodb:DeleteItem"],
                resources: [this.table.arn],
            });
        }
        if (ops.includes(ex.TableInflightMethods.GET) ||
            ops.includes(ex.TableInflightMethods.TRYGET)) {
            host.addPolicyStatements({
                actions: ["dynamodb:GetItem"],
                resources: [this.table.arn],
            });
        }
        if (ops.includes(ex.TableInflightMethods.LIST)) {
            host.addPolicyStatements({
                actions: ["dynamodb:Scan"],
                resources: [this.table.arn],
            });
        }
        host.addEnvironment(this.envName(), this.table.name);
        host.addEnvironment(this.primaryKeyEnvName(), this.primaryKey);
        host.addEnvironment(this.columnsEnvName(), JSON.stringify(this.columns));
        super.onLift(host, ops);
    }
    /** @internal */
    _toInflight() {
        return core.InflightClient.for(__dirname.replace("target-tf-aws", "shared-aws"), __filename, "TableClient", [
            `process.env["${this.envName()}"]`,
            `process.env["${this.primaryKeyEnvName()}"]`,
            `process.env["${this.columnsEnvName()}"]`,
        ]);
    }
    /** @internal */
    get _liftMap() {
        return {
            [ex.TableInflightMethods.INSERT]: [],
            [ex.TableInflightMethods.UPSERT]: [],
            [ex.TableInflightMethods.UPDATE]: [],
            [ex.TableInflightMethods.DELETE]: [],
            [ex.TableInflightMethods.GET]: [],
            [ex.TableInflightMethods.TRYGET]: [],
            [ex.TableInflightMethods.LIST]: [],
        };
    }
    envName() {
        return `DYNAMODB_TABLE_NAME_${this.node.addr.slice(-8)}`;
    }
    primaryKeyEnvName() {
        return `${this.envName()}_PRIMARY_KEY`;
    }
    columnsEnvName() {
        return `${this.envName()}_COLUMNS`;
    }
    get dynamoTableArn() {
        return this.table.arn;
    }
    get dynamoTableName() {
        return this.table.name;
    }
}
exports.Table = Table;
//# sourceMappingURL=data:application/json;base64,