"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Website = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const cdktf_1 = require("cdktf");
const mime_types_1 = __importDefault(require("mime-types"));
const bucket_1 = require("./bucket");
const __1 = require("..");
const cloudfront_distribution_1 = require("../.gen/providers/aws/cloudfront-distribution");
const cloudfront_origin_access_control_1 = require("../.gen/providers/aws/cloudfront-origin-access-control");
const data_aws_iam_policy_document_1 = require("../.gen/providers/aws/data-aws-iam-policy-document");
const route53_record_1 = require("../.gen/providers/aws/route53-record");
const s3_bucket_policy_1 = require("../.gen/providers/aws/s3-bucket-policy");
const s3_bucket_website_configuration_1 = require("../.gen/providers/aws/s3-bucket-website-configuration");
const s3_object_1 = require("../.gen/providers/aws/s3-object");
const cloud = __importStar(require("../cloud"));
const misc_1 = require("../shared/misc");
const resource_names_1 = require("../shared/resource-names");
const std_1 = require("../std");
const INDEX_FILE = "index.html";
/**
 * AWS implementation of `cloud.Website`.
 *
 * @inflight `@winglang/sdk.cloud.IWebsiteClient`
 */
class Website extends cloud.Website {
    constructor(scope, id, props) {
        super(scope, id, props);
        this.bucket = (0, bucket_1.createEncryptedBucket)(this, false, "WebsiteBucket");
        new s3_bucket_website_configuration_1.S3BucketWebsiteConfiguration(this, "BucketWebsiteConfiguration", {
            bucket: this.bucket.bucket,
            indexDocument: { suffix: INDEX_FILE },
            errorDocument: props.errorDocument
                ? { key: props.errorDocument }
                : undefined,
        });
        this.uploadFiles(this.path);
        // create a cloudfront oac
        const OAC_NAME_OPTIONS = {
            maxLen: 32,
            disallowedRegex: /[^a-zA-Z0-9-]/,
            suffix: "-cloudfront-oac",
        };
        const cloudfrontOac = new cloudfront_origin_access_control_1.CloudfrontOriginAccessControl(this, "CloudfrontOac", {
            name: resource_names_1.ResourceNames.generateName(this, OAC_NAME_OPTIONS),
            originAccessControlOriginType: "s3",
            signingBehavior: "always",
            signingProtocol: "sigv4",
        });
        // create a cloudFront distribution
        const distribution = new cloudfront_distribution_1.CloudfrontDistribution(this, "Distribution", {
            enabled: true,
            ...(this._domain?.domainName && { aliases: [this._domain.domainName] }),
            origin: [
                {
                    domainName: this.bucket.bucketRegionalDomainName,
                    originId: "s3Origin",
                    originAccessControlId: cloudfrontOac.id,
                },
            ],
            defaultRootObject: INDEX_FILE,
            customErrorResponse: props.errorDocument
                ? [
                    {
                        errorCode: 404,
                        responseCode: 200,
                        responsePagePath: `/${props.errorDocument}`,
                    },
                    {
                        errorCode: 403,
                        responseCode: 200,
                        responsePagePath: `/${props.errorDocument}`,
                    },
                ]
                : undefined,
            defaultCacheBehavior: {
                allowedMethods: ["GET", "HEAD"],
                cachedMethods: ["GET", "HEAD"],
                targetOriginId: "s3Origin",
                forwardedValues: {
                    queryString: false,
                    cookies: { forward: "none" },
                },
                compress: true,
                viewerProtocolPolicy: "redirect-to-https",
                minTtl: 0,
                defaultTtl: 3600,
                maxTtl: 86400,
            },
            restrictions: {
                geoRestriction: {
                    locations: [],
                    restrictionType: "none",
                },
            },
            priceClass: "PriceClass_100",
            viewerCertificate: {
                cloudfrontDefaultCertificate: true,
                ...(props.domain?.acmCertificateArn && {
                    acmCertificateArn: props.domain.acmCertificateArn,
                    sslSupportMethod: "sni-only",
                }),
                ...(props.domain?.iamCertificate && {
                    iamCertificate: props.domain.iamCertificate,
                    sslSupportMethod: "sni-only",
                }),
            },
        });
        // allow cloudfront distribution to read from private s3 bucket
        const allowDistributionReadOnly = new data_aws_iam_policy_document_1.DataAwsIamPolicyDocument(this, "AllowDistributionReadOnly", {
            statement: [
                {
                    actions: ["s3:GetObject"],
                    condition: [
                        {
                            test: "StringEquals",
                            values: [distribution.arn],
                            variable: "AWS:SourceArn",
                        },
                    ],
                    principals: [
                        {
                            identifiers: ["cloudfront.amazonaws.com"],
                            type: "Service",
                        },
                    ],
                    resources: [`${this.bucket.arn}/*`],
                },
            ],
        });
        // attach policy to s3 bucket
        new s3_bucket_policy_1.S3BucketPolicy(this, "DistributionS3BucketPolicy", {
            bucket: this.bucket.id,
            policy: allowDistributionReadOnly.json,
        });
        if (props.domain && props.domain.domainName && props.domain.hostedZoneId) {
            new route53_record_1.Route53Record(this, "Route53Record", {
                zoneId: props.domain.hostedZoneId,
                type: "A",
                name: props.domain.domainName,
                alias: {
                    name: distribution.domainName,
                    zoneId: distribution.hostedZoneId,
                    evaluateTargetHealth: false,
                },
            });
        }
        this._url = `https://${distribution.domainName}`;
        this.endpoint = new cloud.Endpoint(this, "Endpoint", this._url, {
            label: `Website ${this.node.path}`,
            browserSupport: true,
        });
        std_1.Node.of(this.endpoint).hidden = true;
    }
    get _endpoint() {
        return this.endpoint;
    }
    addFile(path, data, options) {
        new s3_object_1.S3Object(this, `File-${path}`, {
            dependsOn: [this.bucket],
            content: data,
            bucket: this.bucket.bucket,
            contentType: options?.contentType ?? "text/plain",
            key: (0, misc_1.normalPath)(path),
        });
        return `${this.url}/${path}`;
    }
    uploadFile(filePath) {
        const fileKey = (0, misc_1.normalPath)(filePath.replace(this.path, ""));
        const normalizedFullPath = (0, misc_1.normalPath)((0, path_1.resolve)(filePath));
        new s3_object_1.S3Object(this, `File${fileKey.replace(/\//g, "--")}`, {
            dependsOn: [this.bucket],
            key: fileKey,
            bucket: this.bucket.bucket,
            source: normalizedFullPath,
            sourceHash: cdktf_1.Fn.filemd5(normalizedFullPath),
            contentType: mime_types_1.default.contentType((0, path_1.extname)(filePath)) || undefined,
        });
    }
    uploadFiles(dir) {
        const files = (0, fs_1.readdirSync)(dir, { withFileTypes: true });
        for (const file of files) {
            const filename = (0, path_1.join)(dir, file.name);
            if (file.isDirectory()) {
                this.uploadFiles(filename);
            }
            else {
                this.uploadFile(filename);
            }
        }
    }
    /** @internal */
    _toInflight() {
        return __1.core.InflightClient.for(__dirname.replace("target-tf-aws", "shared-aws"), __filename, "WebsiteClient", []);
    }
    get bucketArn() {
        return this.bucket.arn;
    }
    get bucketName() {
        return this.bucket.bucketDomainName;
    }
}
exports.Website = Website;
//# sourceMappingURL=data:application/json;base64,