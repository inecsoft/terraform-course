"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.App = void 0;
const api_1 = require("./api");
const bucket_1 = require("./bucket");
const counter_1 = require("./counter");
const endpoint_1 = require("./endpoint");
const function_1 = require("./function");
const on_deploy_1 = require("./on-deploy");
const queue_1 = require("./queue");
const redis_1 = require("./redis");
const schedule_1 = require("./schedule");
const secret_1 = require("./secret");
const table_1 = require("./table");
const test_runner_1 = require("./test-runner");
const topic_1 = require("./topic");
const website_1 = require("./website");
const data_aws_caller_identity_1 = require("../.gen/providers/aws/data-aws-caller-identity");
const data_aws_region_1 = require("../.gen/providers/aws/data-aws-region");
const data_aws_subnet_1 = require("../.gen/providers/aws/data-aws-subnet");
const data_aws_vpc_1 = require("../.gen/providers/aws/data-aws-vpc");
const eip_1 = require("../.gen/providers/aws/eip");
const internet_gateway_1 = require("../.gen/providers/aws/internet-gateway");
const nat_gateway_1 = require("../.gen/providers/aws/nat-gateway");
const provider_1 = require("../.gen/providers/aws/provider");
const route_table_1 = require("../.gen/providers/aws/route-table");
const route_table_association_1 = require("../.gen/providers/aws/route-table-association");
const s3_bucket_1 = require("../.gen/providers/aws/s3-bucket");
const subnet_1 = require("../.gen/providers/aws/subnet");
const vpc_1 = require("../.gen/providers/aws/vpc");
const cloud_1 = require("../cloud");
const ex_1 = require("../ex");
const resource_names_1 = require("../shared/resource-names");
const domain_1 = require("../shared-aws/domain");
const app_1 = require("../shared-tf/app");
const std_1 = require("../std");
/**
 * An app that knows how to synthesize constructs into a Terraform configuration
 * for AWS resources.
 */
class App extends app_1.CdktfApp {
    constructor(props) {
        super(props);
        this._target = "tf-aws";
        new provider_1.AwsProvider(this, "aws", {});
        this.subnets = {
            private: [],
            public: [],
        };
        test_runner_1.TestRunner._createTree(this, props.rootConstruct);
    }
    typeForFqn(fqn) {
        switch (fqn) {
            case cloud_1.API_FQN:
                return api_1.Api;
            case cloud_1.FUNCTION_FQN:
                return function_1.Function;
            case cloud_1.BUCKET_FQN:
                return bucket_1.Bucket;
            case cloud_1.QUEUE_FQN:
                return queue_1.Queue;
            case cloud_1.TOPIC_FQN:
                return topic_1.Topic;
            case cloud_1.COUNTER_FQN:
                return counter_1.Counter;
            case cloud_1.SCHEDULE_FQN:
                return schedule_1.Schedule;
            case ex_1.TABLE_FQN:
                return table_1.Table;
            case cloud_1.TOPIC_FQN:
                return topic_1.Topic;
            case std_1.TEST_RUNNER_FQN:
                return test_runner_1.TestRunner;
            case ex_1.REDIS_FQN:
                return redis_1.Redis;
            case cloud_1.WEBSITE_FQN:
                return website_1.Website;
            case cloud_1.SECRET_FQN:
                return secret_1.Secret;
            case cloud_1.ON_DEPLOY_FQN:
                return on_deploy_1.OnDeploy;
            case cloud_1.DOMAIN_FQN:
                return domain_1.Domain;
            case cloud_1.ENDPOINT_FQN:
                return endpoint_1.Endpoint;
        }
        return undefined;
    }
    /**
     * The AWS account ID of the App
     */
    get accountId() {
        if (!this.awsAccountIdProvider) {
            this.awsAccountIdProvider = new data_aws_caller_identity_1.DataAwsCallerIdentity(this, "account");
        }
        return this.awsAccountIdProvider.accountId;
    }
    /**
     * The AWS region of the App
     */
    get region() {
        if (!this.awsRegionProvider) {
            this.awsRegionProvider = new data_aws_region_1.DataAwsRegion(this, "Region");
        }
        return this.awsRegionProvider.name;
    }
    get codeBucket() {
        if (this._codeBucket) {
            return this._codeBucket;
        }
        const bucket = new s3_bucket_1.S3Bucket(this, "Code");
        const bucketPrefix = resource_names_1.ResourceNames.generateName(bucket, bucket_1.BUCKET_PREFIX_OPTS);
        bucket.bucketPrefix = bucketPrefix;
        this._codeBucket = bucket;
        return this._codeBucket;
    }
    /**
     * Returns the VPC for this app. Will create a new VPC if one does not exist.
     */
    get vpc() {
        if (this._vpc) {
            return this._vpc;
        }
        return this.parameters.value(`${this._target}/vpc`) === "existing"
            ? this.importExistingVpc()
            : this.createDefaultVpc();
    }
    importExistingVpc() {
        const vpcId = this.parameters.value(`${this._target}/vpc_id`);
        const privateSubnetIds = this.parameters.value(`${this._target}/private_subnet_ids`);
        const publicSubnetIds = this.parameters.value(`${this._target}/public_subnet_ids`);
        this._vpc = new data_aws_vpc_1.DataAwsVpc(this, "ExistingVpc", {
            id: vpcId,
        });
        for (const subnetId of privateSubnetIds) {
            this.subnets.private.push(new data_aws_subnet_1.DataAwsSubnet(this, `PrivateSubnet${subnetId.slice(-8)}`, {
                vpcId: vpcId,
                id: subnetId,
            }));
        }
        if (publicSubnetIds) {
            for (const subnetId of publicSubnetIds) {
                this.subnets.public.push(new data_aws_subnet_1.DataAwsSubnet(this, `PublicSubnet${subnetId.slice(-8)}`, {
                    vpcId: vpcId,
                    id: subnetId,
                }));
            }
        }
        return this._vpc;
    }
    createDefaultVpc() {
        const VPC_NAME_OPTS = {
            maxLen: 32,
            disallowedRegex: /[^a-zA-Z0-9-]/,
        };
        const identifier = resource_names_1.ResourceNames.generateName(this, VPC_NAME_OPTS);
        // create the app wide VPC
        this._vpc = new vpc_1.Vpc(this, "VPC", {
            cidrBlock: "10.0.0.0/16",
            enableDnsHostnames: true,
            enableDnsSupport: true,
            tags: {
                Name: `${identifier}-vpc`,
            },
        });
        // Create the subnets for the VPC, in order to ensure internet egress there
        // is a minimum requirement of 2 subnets, one public and one private. As well
        // as a NAT gateway and internet gateway. The NAT gateway is required to
        // allow the private subnet to route traffic to the internet. The internet
        // gateway is required to allow the NAT gateway to route traffic to the
        // internet.
        // Create the public subnet.
        // This subnet is intentionally small since most resources will be behind
        // private subnets. Incase that assumption is wrong this leaves room for 3 more /24 public subnets
        const publicSubnet = new subnet_1.Subnet(this, "PublicSubnet", {
            vpcId: this._vpc.id,
            cidrBlock: "10.0.0.0/24", // 10.0.0.0 - 10.0.0.255
            availabilityZone: `${this.region}a`,
            tags: {
                Name: `${identifier}-public-subnet-1`,
            },
        });
        // Create the private subnet
        const privateSubnet = new subnet_1.Subnet(this, "PrivateSubnet", {
            vpcId: this._vpc.id,
            cidrBlock: "10.0.4.0/22", // 10.0.4.0 - 10.0.7.255
            availabilityZone: `${this.region}a`,
            tags: {
                Name: `${identifier}-private-subnet-1`,
            },
        });
        const privateSubnet2 = new subnet_1.Subnet(this, "PrivateSubnet2", {
            vpcId: this._vpc.id,
            cidrBlock: "10.0.8.0/22", // 10.0.8.0 - 10.0.11.255
            availabilityZone: `${this.region}b`,
            tags: {
                Name: `${identifier}-private-subnet-2`,
            },
        });
        // Create the internet gateway
        const internetGateway = new internet_gateway_1.InternetGateway(this, "InternetGateway", {
            vpcId: this._vpc.id,
            tags: {
                Name: `${identifier}-internet-gateway`,
            },
        });
        // Create NAT gateway and Elastic IP for NAT
        const eip = new eip_1.Eip(this, "EIP", {});
        const nat = new nat_gateway_1.NatGateway(this, "NATGateway", {
            allocationId: eip.id,
            subnetId: publicSubnet.id,
            tags: {
                Name: `${identifier}-nat-gateway`,
            },
        });
        // Create route tables for public and private subnets
        const publicRouteTable = new route_table_1.RouteTable(this, "PublicRouteTable", {
            vpcId: this._vpc.id,
            route: [
                {
                    // This will route all traffic to the internet gateway
                    cidrBlock: "0.0.0.0/0",
                    gatewayId: internetGateway.id,
                },
            ],
            tags: {
                Name: `${identifier}-public-route-table-1`,
            },
        });
        const privateRouteTable = new route_table_1.RouteTable(this, "PrivateRouteTable", {
            vpcId: this._vpc.id,
            route: [
                {
                    // This will route all traffic to the NAT gateway
                    cidrBlock: "0.0.0.0/0",
                    natGatewayId: nat.id,
                },
            ],
            tags: {
                Name: `${identifier}-private-route-table-1`,
            },
        });
        const privateRouteTable2 = new route_table_1.RouteTable(this, "PrivateRouteTable2", {
            vpcId: this._vpc.id,
            route: [
                {
                    // This will route all traffic to the NAT gateway
                    cidrBlock: "0.0.0.0/0",
                    natGatewayId: nat.id,
                },
            ],
            tags: {
                Name: `${identifier}-private-route-table-2`,
            },
        });
        // Associate route tables with subnets
        new route_table_association_1.RouteTableAssociation(this, "PublicRouteTableAssociation", {
            subnetId: publicSubnet.id,
            routeTableId: publicRouteTable.id,
        });
        new route_table_association_1.RouteTableAssociation(this, "PrivateRouteTableAssociation", {
            subnetId: privateSubnet.id,
            routeTableId: privateRouteTable.id,
        });
        new route_table_association_1.RouteTableAssociation(this, "PrivateRouteTableAssociation2", {
            subnetId: privateSubnet2.id,
            routeTableId: privateRouteTable2.id,
        });
        this.subnets.public.push(publicSubnet);
        this.subnets.private.push(privateSubnet);
        this.subnets.private.push(privateSubnet2);
        return this._vpc;
    }
}
exports.App = App;
//# sourceMappingURL=data:application/json;base64,