"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createEncryptedBucket = exports.Bucket = exports.BUCKET_PREFIX_OPTS = void 0;
const app_1 = require("./app");
const topic_1 = require("./topic");
const s3_bucket_1 = require("../.gen/providers/aws/s3-bucket");
const s3_bucket_notification_1 = require("../.gen/providers/aws/s3-bucket-notification");
const s3_bucket_policy_1 = require("../.gen/providers/aws/s3-bucket-policy");
const s3_bucket_public_access_block_1 = require("../.gen/providers/aws/s3-bucket-public-access-block");
const s3_object_1 = require("../.gen/providers/aws/s3-object");
const cloud = __importStar(require("../cloud"));
const core = __importStar(require("../core"));
const resource_names_1 = require("../shared/resource-names");
const shared_aws_1 = require("../shared-aws");
const bucket_1 = require("../shared-aws/bucket");
const permissions_1 = require("../shared-aws/permissions");
const EVENTS = {
    [cloud.BucketEventType.DELETE]: ["s3:ObjectRemoved:*"],
    [cloud.BucketEventType.CREATE]: ["s3:ObjectCreated:Put"],
    [cloud.BucketEventType.UPDATE]: ["s3:ObjectCreated:Post"],
};
/**
 * Bucket prefix provided to Terraform must be between 3 and 37 characters.
 *
 * Bucket names are allowed to contain lowercase alphanumeric characters and
 * dashes (-). We generate names without dots (.) to avoid some partial
 * restrictions on bucket names with dots.
 */
exports.BUCKET_PREFIX_OPTS = {
    maxLen: 37,
    case: resource_names_1.CaseConventions.LOWERCASE,
    disallowedRegex: /([^a-z0-9\-]+)/g,
    // add a dash to the end of the prefix to distinguish between the
    // Wing-generated portion of the name and the suffix generated by Terraform
    suffix: "-",
};
/**
 * AWS implementation of `cloud.Bucket`.
 *
 * @inflight `@winglang/sdk.aws.IAwsBucketClient`
 */
class Bucket extends cloud.Bucket {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        this.notificationTopics = [];
        this.notificationDependencies = [];
        this.public = props.public ?? false;
        this.bucket = createEncryptedBucket(this, this.public);
    }
    addObject(key, body) {
        new s3_object_1.S3Object(this, `S3Object-${key}`, {
            bucket: this.bucket.bucket,
            key,
            content: body,
        });
    }
    /** @internal */
    get _liftMap() {
        return {
            [cloud.BucketInflightMethods.DELETE]: [],
            [cloud.BucketInflightMethods.GET]: [],
            [cloud.BucketInflightMethods.GET_JSON]: [],
            [cloud.BucketInflightMethods.LIST]: [],
            [cloud.BucketInflightMethods.PUT]: [],
            [cloud.BucketInflightMethods.PUT_JSON]: [],
            [cloud.BucketInflightMethods.PUBLIC_URL]: [],
            [cloud.BucketInflightMethods.EXISTS]: [],
            [cloud.BucketInflightMethods.TRY_GET]: [],
            [cloud.BucketInflightMethods.TRY_GET_JSON]: [],
            [cloud.BucketInflightMethods.TRY_DELETE]: [],
            [cloud.BucketInflightMethods.SIGNED_URL]: [],
            [cloud.BucketInflightMethods.METADATA]: [],
            [cloud.BucketInflightMethods.COPY]: [],
            [cloud.BucketInflightMethods.RENAME]: [],
        };
    }
    createTopicHandler(eventType, inflight) {
        return bucket_1.BucketEventHandler.toTopicOnMessageHandler(inflight, eventType);
    }
    createTopic(actionType) {
        const handler = super.createTopic(actionType);
        // TODO: remove this constraint by adding generic permission APIs to cloud.Function
        if (!(handler instanceof topic_1.Topic)) {
            throw new Error("Topic only supports creating tfaws.Function right now");
        }
        handler.addPermissionToPublish(this, "s3.amazonaws.com", this.bucket.arn);
        this.notificationTopics.push({
            id: `on-${actionType.toLowerCase()}-notification`,
            events: EVENTS[actionType],
            topicArn: handler.topicArn,
        });
        this.notificationDependencies.push(handler.permissions);
        return handler;
    }
    _preSynthesize() {
        super._preSynthesize();
        if (this.notificationTopics.length) {
            new s3_bucket_notification_1.S3BucketNotification(this, `S3BucketNotification`, {
                bucket: this.bucket.id,
                topic: this.notificationTopics,
                dependsOn: this.notificationDependencies,
            });
        }
    }
    onLift(host, ops) {
        if (!shared_aws_1.AwsInflightHost.isAwsInflightHost(host)) {
            throw new Error("Host is expected to implement `IAwsInfightHost`");
        }
        host.addPolicyStatements(...(0, permissions_1.calculateBucketPermissions)(this.bucket.arn, ops));
        // The bucket name needs to be passed through an environment variable since
        // it may not be resolved until deployment time.
        host.addEnvironment(this.envName(), this.bucket.bucket);
        super.onLift(host, ops);
    }
    /** @internal */
    _toInflight() {
        return core.InflightClient.for(__dirname.replace("target-tf-aws", "shared-aws"), __filename, "BucketClient", [`process.env["${this.envName()}"]`]);
    }
    envName() {
        return `BUCKET_NAME_${this.node.addr.slice(-8)}`;
    }
    get bucketArn() {
        return this.bucket.arn;
    }
    get bucketName() {
        return this.bucket.bucket;
    }
}
exports.Bucket = Bucket;
function createEncryptedBucket(scope, isPublic, name = "Default") {
    const bucketPrefix = resource_names_1.ResourceNames.generateName(scope, exports.BUCKET_PREFIX_OPTS);
    // names cannot begin with 'xn--'
    if (bucketPrefix.startsWith("xn--")) {
        throw new Error("AWS S3 bucket names cannot begin with 'xn--'.");
    }
    // names must begin with a letter or number
    if (!/^[a-z0-9]/.test(bucketPrefix)) {
        throw new Error("AWS S3 bucket names must begin with a letter or number.");
    }
    // names cannot end with '-s3alias' and must end with a letter or number,
    // but we do not need to handle these cases since we are generating the
    // prefix only
    const isTestEnvironment = app_1.App.of(scope).isTestEnvironment;
    const bucket = new s3_bucket_1.S3Bucket(scope, name, {
        bucketPrefix,
        forceDestroy: !!isTestEnvironment,
    });
    if (isPublic) {
        const publicAccessBlock = new s3_bucket_public_access_block_1.S3BucketPublicAccessBlock(scope, "PublicAccessBlock", {
            bucket: bucket.bucket,
            blockPublicAcls: false,
            blockPublicPolicy: false,
            ignorePublicAcls: false,
            restrictPublicBuckets: false,
        });
        const policy = {
            Version: "2012-10-17",
            Statement: [
                {
                    Effect: "Allow",
                    Principal: "*",
                    Action: ["s3:GetObject"],
                    Resource: [`${bucket.arn}/*`],
                },
            ],
        };
        new s3_bucket_policy_1.S3BucketPolicy(scope, "PublicPolicy", {
            bucket: bucket.bucket,
            policy: JSON.stringify(policy),
            dependsOn: [publicAccessBlock],
        });
    }
    return bucket;
}
exports.createEncryptedBucket = createEncryptedBucket;
//# sourceMappingURL=data:application/json;base64,