"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Api = void 0;
const crypto_1 = require("crypto");
const cdktf_1 = require("cdktf");
const constructs_1 = require("constructs");
const app_1 = require("./app");
const function_1 = require("./function");
const __1 = require("..");
const api_gateway_deployment_1 = require("../.gen/providers/aws/api-gateway-deployment");
const api_gateway_rest_api_1 = require("../.gen/providers/aws/api-gateway-rest-api");
const api_gateway_stage_1 = require("../.gen/providers/aws/api-gateway-stage");
const data_aws_vpc_endpoint_service_1 = require("../.gen/providers/aws/data-aws-vpc-endpoint-service");
const lambda_permission_1 = require("../.gen/providers/aws/lambda-permission");
const security_group_1 = require("../.gen/providers/aws/security-group");
const vpc_endpoint_1 = require("../.gen/providers/aws/vpc-endpoint");
const cloud = __importStar(require("../cloud"));
const resource_names_1 = require("../shared/resource-names");
const shared_aws_1 = require("../shared-aws");
const api_default_1 = require("../shared-aws/api.default");
const std_1 = require("../std");
/**
 * RestApi names are alphanumeric characters, hyphens (-) and underscores (_).
 */
const NAME_OPTS = {
    disallowedRegex: /[^a-zA-Z0-9\_\-]+/g,
};
/**
 * AWS Implementation of `cloud.Api`.
 */
class Api extends cloud.Api {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        this.handlers = {};
        this.api = new WingRestApi(this, "api", {
            getApiSpec: this._getOpenApiSpec.bind(this),
            cors: this.corsOptions,
        });
        this.endpoint = new cloud.Endpoint(this, "Endpoint", this.api.url, {
            label: `Api ${this.node.path}`,
        });
        std_1.Node.of(this.endpoint).hidden = true;
    }
    get _endpoint() {
        return this.endpoint;
    }
    /**
     * Build the http requests
     *
     * @param method http method
     * @param path path to add
     * @param inflight Inflight to handle request
     * @param props Additional props
     */
    httpRequests(method, path, inflight, props) {
        const lowerMethod = method.toLowerCase();
        const upperMethod = method.toUpperCase();
        this._validatePath(path);
        const fn = this.addHandler(inflight, method, path, props);
        const apiSpecEndpoint = this.api.addEndpoint(path, upperMethod, fn);
        this._addToSpec(path, upperMethod, apiSpecEndpoint, this.corsOptions);
        std_1.Node.of(this).addConnection({
            source: this,
            sourceOp: cloud.ApiInflightMethods.REQUEST,
            target: fn,
            targetOp: cloud.FunctionInflightMethods.INVOKE,
            name: `${lowerMethod}()`,
        });
    }
    /**
     * Add a inflight to handle GET requests to a path.
     * @param path path to add
     * @param inflight Inflight to handle request
     * @param props Additional props
     */
    get(path, inflight, props) {
        this.httpRequests("GET", path, inflight, props);
    }
    /**
     * Add a inflight to handle POST requests to a path.
     * @param path path to add
     * @param inflight Inflight to handle request
     * @param props Additional props
     */
    post(path, inflight, props) {
        this.httpRequests("POST", path, inflight, props);
    }
    /**
     * Add a inflight to handle PUT requests to a path.
     * @param path path to add
     * @param inflight Inflight to handle request
     * @param props Additional props
     */
    put(path, inflight, props) {
        this.httpRequests("PUT", path, inflight, props);
    }
    /**
     * Add a inflight to handle DELETE requests to a path.
     * @param path path to add
     * @param inflight Inflight to handle request
     * @param props Additional props
     */
    delete(path, inflight, props) {
        this.httpRequests("DELETE", path, inflight, props);
    }
    /**
     * Add a inflight to handle PATCH requests to a path.
     * @param path path to add
     * @param inflight Inflight to handle request
     * @param props Additional props
     */
    patch(path, inflight, props) {
        this.httpRequests("PATCH", path, inflight, props);
    }
    /**
     * Add a inflight to handle OPTIONS requests to a path.
     * @param path path to add
     * @param inflight Inflight to handle request
     * @param props Additional props
     */
    options(path, inflight, props) {
        this.httpRequests("OPTIONS", path, inflight, props);
    }
    /**
     * Add a inflight to handle HEAD requests to a path.
     * @param path path to add
     * @param inflight Inflight to handle request
     * @param props Additional props
     */
    head(path, inflight, props) {
        this.httpRequests("HEAD", path, inflight, props);
    }
    /**
     * Add a inflight to handle CONNECT requests to a path.
     * @param path path to add
     * @param inflight Inflight to handle request
     * @param props Additional props
     */
    connect(path, inflight, props) {
        this.httpRequests("CONNECT", path, inflight, props);
    }
    /**
     * Add a inflight handler to the stack
     * @param inflight Inflight to add to the API
     * @param props Endpoint props
     * @returns AWS Lambda Function
     */
    addHandler(inflight, method, path, props) {
        let fn = this.addInflightHandler(inflight, method, path, props);
        if (!(fn instanceof function_1.Function)) {
            throw new Error("Api only supports creating tfaws.Function right now");
        }
        return fn;
    }
    /**
     * Add an inflight handler to the stack
     * Ensures that we don't create duplicate inflight handlers.
     * @param inflight Inflight to add to the API
     * @returns Inflight handler as a AWS Lambda Function
     */
    addInflightHandler(inflight, method, path, props) {
        let handler = this.handlers[inflight._id];
        if (!handler) {
            const newInflight = shared_aws_1.ApiEndpointHandler.toFunctionHandler(inflight, cloud.Api.renderCorsHeaders(this.corsOptions)?.defaultResponse);
            const prefix = `${method.toLowerCase()}${path.replace(/\//g, "_")}`;
            handler = new function_1.Function(this, app_1.App.of(this).makeId(this, prefix), newInflight, props);
            std_1.Node.of(handler).hidden = true;
            this.handlers[inflight._id] = handler;
        }
        return handler;
    }
    /** @internal */
    onLift(host, ops) {
        host.addEnvironment(this.urlEnvName(), this.url);
        super.onLift(host, ops);
    }
    /** @internal */
    _toInflight() {
        return __1.core.InflightClient.for(__dirname.replace("target-tf-aws", "shared-aws"), __filename, "ApiClient", [`process.env["${this.urlEnvName()}"]`]);
    }
    urlEnvName() {
        return resource_names_1.ResourceNames.generateName(this, {
            disallowedRegex: /[^a-zA-Z0-9_]/,
            sep: "_",
            case: resource_names_1.CaseConventions.UPPERCASE,
        });
    }
    get restApiArn() {
        return this.api.api.executionArn;
    }
    get restApiId() {
        return this.api.api.id;
    }
    get restApiName() {
        return this.api.api.name;
    }
    get stageName() {
        return this.api.stage.stageName;
    }
    get invokeUrl() {
        return this.api.stage.invokeUrl;
    }
    get deploymentId() {
        return this.api.deployment.id;
    }
}
exports.Api = Api;
/**
 * Encapsulates the API Gateway REST API as an abstraction for Terraform.
 */
class WingRestApi extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.privateVpc = false;
        /**
         * Add permissions to the handler to allow it to be called by the API
         * @param path Path of the endpoint
         * @param method Method of the endpoint
         * @param handler Lambda function to handle the endpoint
         */
        this._addHandlerPermissions = (path, method, handler) => {
            const pathHash = (0, crypto_1.createHash)("sha1").update(path).digest("hex").slice(-8);
            const permissionId = `${method}-${pathHash}`;
            new lambda_permission_1.LambdaPermission(this, `permission-${permissionId}`, {
                statementId: `AllowExecutionFromAPIGateway-${permissionId}`,
                action: "lambda:InvokeFunction",
                functionName: handler.functionName,
                principal: "apigateway.amazonaws.com",
                sourceArn: `${this.api.executionArn}/*/${method}${Api.renderOpenApiPath(path)}`,
            });
        };
        const app = app_1.App.of(this);
        this.id = id;
        this.region = app.region;
        this.accountId = app.accountId;
        // Check for PRIVATE API Gateway configuration
        let privateApiGateway = app.parameters.value("tf-aws/vpc_api_gateway");
        if (privateApiGateway === true) {
            this.privateVpc = true;
            const vpcResources = this._initVpcResources(app);
            this.securityGroup = vpcResources.securityGroup;
            this.vpcEndpoint = vpcResources.vpcEndpoint;
        }
        // Create the API Gateway and configure it
        this.api = this._initApiGatewayRestApi(id, props);
        this.deployment = this._initApiGatewayDeployment();
        this.stage = this._initApiGatewayStage();
        // Construct the URL for the deployed API Gateway stage
        this.url = this._constructInvokeUrl();
    }
    _initVpcResources(app) {
        const vpcId = app.vpc.id;
        const subnetIds = [...app.subnets.private.map((s) => s.id)];
        const securityGroup = new security_group_1.SecurityGroup(this, `${this.id}SecurityGroup`, {
            vpcId: vpcId,
            ingress: [
                {
                    cidrBlocks: ["0.0.0.0/0"],
                    fromPort: 0,
                    toPort: 0,
                    protocol: "-1",
                },
            ],
        });
        const service = new data_aws_vpc_endpoint_service_1.DataAwsVpcEndpointService(this, `${this.id}ServiceLookup`, {
            service: "execute-api",
        });
        const vpcEndpoint = new vpc_endpoint_1.VpcEndpoint(this, `${this.id}-vpc-endpoint`, {
            vpcId: vpcId,
            serviceName: service.serviceName,
            privateDnsEnabled: true,
            vpcEndpointType: "Interface",
            subnetIds: subnetIds,
            securityGroupIds: [securityGroup.id],
        });
        return { securityGroup, vpcEndpoint };
    }
    _initApiGatewayRestApi(id, props) {
        /**
         * Configures the default response for requests to undefined routes (`/{proxy+}`).
         * - If CORS options are defined, `defaultResponse` sets up CORS-compliant mock responses:
         *   - 204 (No Content) for OPTIONS requests.
         *   - 404 (Not Found) for other HTTP methods.
         * - If CORS options are undefined, `defaultResponse` set up a mock 404 response for any HTTP method.
         */
        /**
         * BASIC API Gateway properties
         */
        let apiProps = {
            name: resource_names_1.ResourceNames.generateName(this, NAME_OPTS),
            lifecycle: { createBeforeDestroy: true },
            // Lazy generation of the api spec because routes can be added after the API is created
            body: cdktf_1.Lazy.stringValue({
                produce: () => {
                    // Retrieves the API specification.
                    const apiSpec = props.getApiSpec();
                    const defaultResponse = (0, api_default_1.createApiDefaultResponse)(Object.keys(apiSpec.paths), props.cors);
                    // Merges the specification with `defaultResponse` to handle requests to undefined routes (`/{proxy+}`).
                    // This integration ensures comprehensive route handling:
                    // - Predefined paths are maintained as specified.
                    // - Requests to paths not explicitly defined are managed by `defaultResponse`.
                    return JSON.stringify({
                        ...apiSpec,
                        paths: { ...apiSpec.paths, ...defaultResponse },
                    });
                },
            }),
        };
        /**
         * PRIVATE API Gateway properties
         */
        if (this.privateVpc && this.vpcEndpoint) {
            apiProps.endpointConfiguration = {
                types: ["PRIVATE"],
                vpcEndpointIds: [this.vpcEndpoint.id],
            };
            // This policy will explicitly deny all requests that don't come from the VPC endpoint
            // which means only requests that come from the same vpc on the same private subnet and security group
            // will be allowed to access the API Gateway
            apiProps.policy = JSON.stringify({
                Version: "2012-10-17",
                Statement: [
                    {
                        Effect: "Allow",
                        Principal: "*",
                        Action: "execute-api:Invoke",
                        Resource: ["*"],
                    },
                    {
                        Effect: "Deny",
                        Principal: "*",
                        Action: "execute-api:Invoke",
                        Resource: ["*"],
                        Condition: {
                            StringNotEquals: {
                                "aws:sourceVpce": this.vpcEndpoint.id,
                            },
                        },
                    },
                ],
            });
        }
        return new api_gateway_rest_api_1.ApiGatewayRestApi(this, id, apiProps);
    }
    _initApiGatewayDeployment() {
        return new api_gateway_deployment_1.ApiGatewayDeployment(this, "deployment", {
            restApiId: this.api.id,
            lifecycle: { createBeforeDestroy: true },
            // Trigger redeployment when the api spec changes
            triggers: { redeployment: cdktf_1.Fn.sha256(this.api.body) },
        });
    }
    _initApiGatewayStage() {
        return new api_gateway_stage_1.ApiGatewayStage(this, "stage", {
            restApiId: this.api.id,
            stageName: shared_aws_1.STAGE_NAME,
            deploymentId: this.deployment.id,
        });
    }
    // Intentionally not using `this.stage.invokeUrl`, it looks like it's shared with
    // the `invokeUrl` from the api deployment, which gets recreated on every deployment.
    // When this `invokeUrl` is referenced somewhere else in the stack, it can cause cyclic dependencies
    // in Terraform. Hence, we're creating our own url here.
    _constructInvokeUrl() {
        return `https://${this.api.id}.execute-api.${this.region}.amazonaws.com/${this.stage.stageName}`;
    }
    /**
     * Add an endpoint to the API
     * @param path Path of the endpoint
     * @param method Method of the endpoint
     * @param handler Lambda function to handle the endpoint
     * @returns OpenApi spec extension for the endpoint
     */
    addEndpoint(path, method, handler) {
        const endpointExtension = this._createApiSpecExtension(handler);
        this._addHandlerPermissions(path, method, handler);
        return endpointExtension;
    }
    /**
     * Creates a OpenApi extension object for the endpoint and handler
     * @param handler Lambda function to handle the endpoint
     * @returns OpenApi extension object for the endpoint and handler
     */
    _createApiSpecExtension(handler) {
        // The ARN of the Lambda function is constructed by hand so that it can be calculated
        // during preflight, instead of being resolved at deploy time.
        //
        // By doing this, the API Gateway does not need to take a dependency on its Lambda functions,
        // making it possible to write Lambda functions that reference the
        // API Gateway's URL in their inflight code.
        const functionArn = `arn:aws:lambda:${this.region}:${this.accountId}:function:${handler.name}`;
        const extension = {
            "x-amazon-apigateway-integration": {
                uri: `arn:aws:apigateway:${this.region}:lambda:path/2015-03-31/functions/${functionArn}/invocations`,
                type: "aws_proxy",
                httpMethod: "POST",
                responses: {
                    default: {
                        statusCode: "200",
                    },
                },
                passthroughBehavior: "when_no_match",
                contentHandling: "CONVERT_TO_TEXT",
            },
        };
        return extension;
    }
}
//# sourceMappingURL=data:application/json;base64,