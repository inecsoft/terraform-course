"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Queue = void 0;
const app_1 = require("./app");
const function_1 = require("./function");
const lambda_event_source_mapping_1 = require("../.gen/providers/aws/lambda-event-source-mapping");
const sqs_queue_1 = require("../.gen/providers/aws/sqs-queue");
const cloud = __importStar(require("../cloud"));
const core = __importStar(require("../core"));
const resource_names_1 = require("../shared/resource-names");
const shared_aws_1 = require("../shared-aws");
const permissions_1 = require("../shared-aws/permissions");
const queue_1 = require("../shared-aws/queue");
const std_1 = require("../std");
/**
 * Queue names are limited to 80 characters.
 * You can use alphanumeric characters, hyphens (-), and underscores (_).
 */
const NAME_OPTS = {
    maxLen: 80,
    disallowedRegex: /[^a-zA-Z0-9\_\-]+/g,
};
/**
 * AWS implementation of `cloud.Queue`.
 *
 * @inflight `@winglang/sdk.aws.IAwsQueueClient`
 */
class Queue extends cloud.Queue {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        const queueOpt = props.dlq
            ? {
                visibilityTimeoutSeconds: props.timeout
                    ? props.timeout.seconds
                    : std_1.Duration.fromSeconds(30).seconds,
                messageRetentionSeconds: props.retentionPeriod
                    ? props.retentionPeriod.seconds
                    : std_1.Duration.fromHours(1).seconds,
                name: resource_names_1.ResourceNames.generateName(this, NAME_OPTS),
                redrivePolicy: JSON.stringify({
                    deadLetterTargetArn: queue_1.Queue.from(props.dlq.queue)?.queueArn,
                    maxReceiveCount: props.dlq.maxDeliveryAttempts ?? cloud.DEFAULT_DELIVERY_ATTEMPTS,
                }),
            }
            : {
                visibilityTimeoutSeconds: props.timeout
                    ? props.timeout.seconds
                    : std_1.Duration.fromSeconds(30).seconds,
                messageRetentionSeconds: props.retentionPeriod
                    ? props.retentionPeriod.seconds
                    : std_1.Duration.fromHours(1).seconds,
                name: resource_names_1.ResourceNames.generateName(this, NAME_OPTS),
            };
        this.queue = new sqs_queue_1.SqsQueue(this, "Default", queueOpt);
    }
    /** @internal */
    get _liftMap() {
        return {
            [cloud.QueueInflightMethods.PUSH]: [],
            [cloud.QueueInflightMethods.PURGE]: [],
            [cloud.QueueInflightMethods.APPROX_SIZE]: [],
            [cloud.QueueInflightMethods.POP]: [],
        };
    }
    setConsumer(inflight, props = {}) {
        const functionHandler = queue_1.QueueSetConsumerHandler.toFunctionHandler(inflight);
        const fn = new function_1.Function(
        // ok since we're not a tree root
        this.node.scope, app_1.App.of(this).makeId(this, `${this.node.id}-SetConsumer`), functionHandler, {
            ...props,
            timeout: std_1.Duration.fromSeconds(this.queue.visibilityTimeoutSeconds ?? 30),
        });
        if (!shared_aws_1.AwsInflightHost.isAwsInflightHost(fn)) {
            throw new Error("Host is expected to implement `IAwsInfightHost`");
        }
        fn.addPolicyStatements({
            actions: [
                "sqs:ReceiveMessage",
                "sqs:ChangeMessageVisibility",
                "sqs:GetQueueUrl",
                "sqs:DeleteMessage",
                "sqs:GetQueueAttributes",
            ],
            resources: [this.queue.arn],
        });
        new lambda_event_source_mapping_1.LambdaEventSourceMapping(this, "EventSourceMapping", {
            functionName: fn.functionName,
            eventSourceArn: this.queue.arn,
            batchSize: props.batchSize ?? 1,
            functionResponseTypes: ["ReportBatchItemFailures"], // It allows the function to return the messages that failed to the queue
        });
        std_1.Node.of(this).addConnection({
            source: this,
            sourceOp: cloud.QueueInflightMethods.PUSH,
            target: fn,
            targetOp: cloud.FunctionInflightMethods.INVOKE,
            name: "consumer",
        });
        return fn;
    }
    onLift(host, ops) {
        const env = this.envName();
        if (!shared_aws_1.AwsInflightHost.isAwsInflightHost(host)) {
            throw new Error("Host is expected to implement `IAwsInfightHost`");
        }
        host.addPolicyStatements(...(0, permissions_1.calculateQueuePermissions)(this.queue.arn, ops));
        // The queue url needs to be passed through an environment variable since
        // it may not be resolved until deployment time.
        host.addEnvironment(env, this.queue.url);
        super.onLift(host, ops);
    }
    /** @internal */
    _toInflight() {
        return core.InflightClient.for(__dirname.replace("target-tf-aws", "shared-aws"), __filename, "QueueClient", [`process.env["${this.envName()}"]`]);
    }
    envName() {
        return `QUEUE_URL_${this.node.addr.slice(-8)}`;
    }
    get queueArn() {
        return this.queue.arn;
    }
    get queueName() {
        return this.queue.name;
    }
    get queueUrl() {
        return this.queue.url;
    }
}
exports.Queue = Queue;
//# sourceMappingURL=data:application/json;base64,