"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedisClient = void 0;
const client_elasticache_1 = require("@aws-sdk/client-elasticache");
const ex_1 = require("../ex");
// eslint-disable-next-line @typescript-eslint/no-require-imports
const IoRedis = require("ioredis");
class RedisClient extends ex_1.RedisClientBase {
    constructor(clusterId, connection, elasticacheClient = new client_elasticache_1.ElastiCacheClient({})) {
        super();
        this.clusterId = clusterId;
        this.connection = connection;
        this.elasticacheClient = elasticacheClient;
    }
    /**
     * The Redis cluster endpoint is not available to inject from the cdktf resource,
     * therefore we need to query the AWS API to get it. This is a helper function that will
     * use the cluster id to get the endpoint.
     *
     * @returns The Redis cluster endpoint
     */
    async getEndpoint() {
        const command = new client_elasticache_1.DescribeCacheClustersCommand({
            CacheClusterId: this.clusterId,
            ShowCacheNodeInfo: true,
        });
        const resp = await this.elasticacheClient.send(command);
        if (!resp.CacheClusters) {
            throw new Error("No Redis cache clusters found");
        }
        const cluster = resp.CacheClusters[0];
        if (!cluster.CacheNodes) {
            throw new Error("No Redis cache nodes found");
        }
        const cacheNode = cluster.CacheNodes[0];
        if (!cacheNode.Endpoint) {
            throw new Error("No Redis cache node endpoint found");
        }
        return cacheNode.Endpoint.Address;
    }
    async rawClient() {
        if (!this.clusterId) {
            throw new Error("No cluster id provided");
        }
        if (this.connection) {
            return this.connection;
        }
        if (!this.connectionUrl) {
            this.connectionUrl = await this.getEndpoint();
        }
        this.connection = new IoRedis(this.connectionUrl);
        return this.connection;
    }
    async url() {
        if (this.connectionUrl == undefined) {
            this.connectionUrl = await this.getEndpoint();
        }
        return this.connectionUrl;
    }
}
exports.RedisClient = RedisClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVkaXMuaW5mbGlnaHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGFyZ2V0LXRmLWF3cy9yZWRpcy5pbmZsaWdodC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxvRUFHcUM7QUFDckMsOEJBQXdDO0FBRXhDLGlFQUFpRTtBQUNqRSxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFFbkMsTUFBYSxXQUFZLFNBQVEsb0JBQWU7SUFFOUMsWUFDbUIsU0FBaUIsRUFDMUIsVUFBZ0IsRUFDUCxvQkFBb0IsSUFBSSxzQ0FBaUIsQ0FBQyxFQUFFLENBQUM7UUFFOUQsS0FBSyxFQUFFLENBQUM7UUFKUyxjQUFTLEdBQVQsU0FBUyxDQUFRO1FBQzFCLGVBQVUsR0FBVixVQUFVLENBQU07UUFDUCxzQkFBaUIsR0FBakIsaUJBQWlCLENBQTRCO0lBR2hFLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSyxLQUFLLENBQUMsV0FBVztRQUN2QixNQUFNLE9BQU8sR0FBRyxJQUFJLGlEQUE0QixDQUFDO1lBQy9DLGNBQWMsRUFBRSxJQUFJLENBQUMsU0FBUztZQUM5QixpQkFBaUIsRUFBRSxJQUFJO1NBQ3hCLENBQUMsQ0FBQztRQUNILE1BQU0sSUFBSSxHQUFHLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV4RCxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQ3hCLE1BQU0sSUFBSSxLQUFLLENBQUMsK0JBQStCLENBQUMsQ0FBQztRQUNuRCxDQUFDO1FBRUQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ3hCLE1BQU0sSUFBSSxLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQztRQUNoRCxDQUFDO1FBRUQsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4QyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ3hCLE1BQU0sSUFBSSxLQUFLLENBQUMsb0NBQW9DLENBQUMsQ0FBQztRQUN4RCxDQUFDO1FBRUQsT0FBTyxTQUFTLENBQUMsUUFBUSxDQUFDLE9BQVEsQ0FBQztJQUNyQyxDQUFDO0lBRVMsS0FBSyxDQUFDLFNBQVM7UUFDdkIsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNwQixNQUFNLElBQUksS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFDNUMsQ0FBQztRQUVELElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ3BCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUN6QixDQUFDO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUN4QixJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ2hELENBQUM7UUFFRCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNsRCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDekIsQ0FBQztJQUVNLEtBQUssQ0FBQyxHQUFHO1FBQ2QsSUFBSSxJQUFJLENBQUMsYUFBYSxJQUFJLFNBQVMsRUFBRSxDQUFDO1lBQ3BDLElBQUksQ0FBQyxhQUFhLEdBQUcsTUFBTSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDaEQsQ0FBQztRQUNELE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUM1QixDQUFDO0NBQ0Y7QUFoRUQsa0NBZ0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGVzY3JpYmVDYWNoZUNsdXN0ZXJzQ29tbWFuZCxcbiAgRWxhc3RpQ2FjaGVDbGllbnQsXG59IGZyb20gXCJAYXdzLXNkay9jbGllbnQtZWxhc3RpY2FjaGVcIjtcbmltcG9ydCB7IFJlZGlzQ2xpZW50QmFzZSB9IGZyb20gXCIuLi9leFwiO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlcXVpcmUtaW1wb3J0c1xuY29uc3QgSW9SZWRpcyA9IHJlcXVpcmUoXCJpb3JlZGlzXCIpO1xuXG5leHBvcnQgY2xhc3MgUmVkaXNDbGllbnQgZXh0ZW5kcyBSZWRpc0NsaWVudEJhc2Uge1xuICBwcml2YXRlIGNvbm5lY3Rpb25Vcmw/OiBzdHJpbmc7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgY2x1c3RlcklkOiBzdHJpbmcsXG4gICAgcHJpdmF0ZSBjb25uZWN0aW9uPzogYW55LFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZWxhc3RpY2FjaGVDbGllbnQgPSBuZXcgRWxhc3RpQ2FjaGVDbGllbnQoe30pXG4gICkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIFJlZGlzIGNsdXN0ZXIgZW5kcG9pbnQgaXMgbm90IGF2YWlsYWJsZSB0byBpbmplY3QgZnJvbSB0aGUgY2RrdGYgcmVzb3VyY2UsXG4gICAqIHRoZXJlZm9yZSB3ZSBuZWVkIHRvIHF1ZXJ5IHRoZSBBV1MgQVBJIHRvIGdldCBpdC4gVGhpcyBpcyBhIGhlbHBlciBmdW5jdGlvbiB0aGF0IHdpbGxcbiAgICogdXNlIHRoZSBjbHVzdGVyIGlkIHRvIGdldCB0aGUgZW5kcG9pbnQuXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBSZWRpcyBjbHVzdGVyIGVuZHBvaW50XG4gICAqL1xuICBwcml2YXRlIGFzeW5jIGdldEVuZHBvaW50KCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgY29uc3QgY29tbWFuZCA9IG5ldyBEZXNjcmliZUNhY2hlQ2x1c3RlcnNDb21tYW5kKHtcbiAgICAgIENhY2hlQ2x1c3RlcklkOiB0aGlzLmNsdXN0ZXJJZCxcbiAgICAgIFNob3dDYWNoZU5vZGVJbmZvOiB0cnVlLFxuICAgIH0pO1xuICAgIGNvbnN0IHJlc3AgPSBhd2FpdCB0aGlzLmVsYXN0aWNhY2hlQ2xpZW50LnNlbmQoY29tbWFuZCk7XG5cbiAgICBpZiAoIXJlc3AuQ2FjaGVDbHVzdGVycykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gUmVkaXMgY2FjaGUgY2x1c3RlcnMgZm91bmRcIik7XG4gICAgfVxuXG4gICAgY29uc3QgY2x1c3RlciA9IHJlc3AuQ2FjaGVDbHVzdGVyc1swXTtcbiAgICBpZiAoIWNsdXN0ZXIuQ2FjaGVOb2Rlcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gUmVkaXMgY2FjaGUgbm9kZXMgZm91bmRcIik7XG4gICAgfVxuXG4gICAgY29uc3QgY2FjaGVOb2RlID0gY2x1c3Rlci5DYWNoZU5vZGVzWzBdO1xuICAgIGlmICghY2FjaGVOb2RlLkVuZHBvaW50KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBSZWRpcyBjYWNoZSBub2RlIGVuZHBvaW50IGZvdW5kXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWNoZU5vZGUuRW5kcG9pbnQuQWRkcmVzcyE7XG4gIH1cblxuICBwcm90ZWN0ZWQgYXN5bmMgcmF3Q2xpZW50KCk6IFByb21pc2U8YW55PiB7XG4gICAgaWYgKCF0aGlzLmNsdXN0ZXJJZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gY2x1c3RlciBpZCBwcm92aWRlZFwiKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jb25uZWN0aW9uKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb25uZWN0aW9uO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5jb25uZWN0aW9uVXJsKSB7XG4gICAgICB0aGlzLmNvbm5lY3Rpb25VcmwgPSBhd2FpdCB0aGlzLmdldEVuZHBvaW50KCk7XG4gICAgfVxuXG4gICAgdGhpcy5jb25uZWN0aW9uID0gbmV3IElvUmVkaXModGhpcy5jb25uZWN0aW9uVXJsKTtcbiAgICByZXR1cm4gdGhpcy5jb25uZWN0aW9uO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHVybCgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGlmICh0aGlzLmNvbm5lY3Rpb25VcmwgPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmNvbm5lY3Rpb25VcmwgPSBhd2FpdCB0aGlzLmdldEVuZHBvaW50KCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNvbm5lY3Rpb25Vcmw7XG4gIH1cbn1cbiJdfQ==