"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BucketClient = void 0;
const identity_1 = require("@azure/identity");
const storage_blob_1 = require("@azure/storage-blob");
const mime_types_1 = __importDefault(require("mime-types"));
const std_1 = require("../std");
class BucketClient {
    constructor(bucketName, storageAccount, blobServiceClient) {
        this.defaultAzureCredential = new identity_1.DefaultAzureCredential();
        this.bucketName = bucketName;
        this.storageAccount = storageAccount;
        this.blobServiceClient =
            blobServiceClient ??
                new storage_blob_1.BlobServiceClient(`https://${storageAccount}.blob.core.windows.net`, this.defaultAzureCredential);
        this.containerClient = this.blobServiceClient.getContainerClient(this.bucketName);
    }
    /**
     * Check if an object exists in the bucket
     *
     * @param key Key of the object
     */
    async exists(key) {
        const blobClient = this.containerClient.getBlobClient(key);
        return blobClient.exists();
    }
    /**
     * Put object into bucket with given body contents
     *
     * @param key Key of the object
     * @param body string contents of the object
     */
    async put(key, body, opts) {
        const blobClient = this.containerClient.getBlockBlobClient(key);
        const options = {
            blobHTTPHeaders: {
                blobContentType: (opts?.contentType ?? mime_types_1.default.lookup(key)) || "application/octet-stream",
            },
        };
        await blobClient.upload(body, body.length, options);
    }
    /**
     * Put Json object into bucket with given body contents
     *
     * @param key Key of the object
     * @param body Json object
     */
    async putJson(key, body) {
        await this.put(key, JSON.stringify(body, null, 2), {
            contentType: "application/json",
        });
    }
    /**
     * Get an object from the bucket
     *
     * @param key Key of the object
     * @returns string content of the object as string
     */
    async get(key, options) {
        const blobClient = this.containerClient.getBlobClient(key);
        let downloadResponse;
        try {
            const start = options?.startByte !== undefined ? options.startByte : 0;
            const length = options?.endByte !== undefined
                ? options.endByte - start + 1
                : undefined;
            downloadResponse = await blobClient.download(start, length);
        }
        catch (e) {
            throw new Error(`Object does not exist (key=${key}).`);
        }
        if (downloadResponse.readableStreamBody === undefined) {
            return "";
        }
        try {
            return new TextDecoder("utf8", { fatal: true }).decode(await this.streamToBuffer(downloadResponse.readableStreamBody));
        }
        catch (e) {
            throw new Error(`Object contents could not be read as text (key=${key}): ${e.stack})}`);
        }
    }
    /**
     * Get an object from the bucket if it exists
     *
     * @param key Key of the object
     * @returns string content of the object as string
     */
    async tryGet(key, options) {
        if (await this.exists(key)) {
            return this.get(key, options);
        }
        return undefined;
    }
    /**
     * Get a Json object from the bucket
     *
     * @param key Key of the object
     * @returns Json content of the object
     */
    async getJson(key) {
        return JSON.parse(await this.get(key));
    }
    /**
     * Get a Json object from the bucket if it exists
     *
     * @param key Key of the object
     * @returns Json content of the object
     */
    async tryGetJson(key) {
        if (await this.exists(key)) {
            return this.getJson(key);
        }
        return undefined;
    }
    /**
     * Delete an object from the bucket
     *
     * @param key Key of the object
     * @param opts Option object supporting additional strategies to delete item from a bucket
     */
    async delete(key, opts = {}) {
        const mustExist = opts.mustExist ?? false;
        const blockBlobClient = this.containerClient.getBlockBlobClient(key);
        try {
            await blockBlobClient.delete();
        }
        catch (err) {
            const error = err;
            if (error.details.errorCode === "BlobNotFound") {
                if (mustExist) {
                    throw new Error(`Object does not exist (key=${key}).`);
                }
                else {
                    return;
                }
            }
            throw Error(`Failed to delete object (key=${key}).`);
        }
    }
    /**
     * Delete an object from the bucket if it exists
     *
     * @param key Key of the object
     * @param opts Option object supporting additional strategies to delete item from a bucket
     */
    async tryDelete(key) {
        if (await this.exists(key)) {
            await this.delete(key);
            return true;
        }
        return false;
    }
    /**
     * List all keys in the bucket
     *
     * @param prefix Limits the response to keys that begin with the specified prefix
     */
    async list(prefix) {
        const list = [];
        for await (const blob of this.containerClient.listBlobsFlat({ prefix })) {
            list.push(blob.name);
        }
        return list;
    }
    async signedUrl(key, options) {
        options;
        throw new Error(`signedUrl is not implemented yet for tf-azure (key=${key})`);
    }
    /**
     * Returns a url to the given file.
     * @Throws if the file is not public or if object does not exist.
     */
    // TODO: NOT SUPPORTED!! - see https://github.com/winglang/wing/issues/5117
    async publicUrl(key) {
        // this returns an optional `blobPublicAccess` prop - if exists the bucket is public
        const accessPolicy = await this.containerClient.getAccessPolicy();
        if (!accessPolicy?.blobPublicAccess) {
            throw new Error("Cannot provide public url for a non-public bucket");
        }
        if (!(await this.exists(key))) {
            throw new Error(`Cannot provide public url for a non-existent key (key=${key})`);
        }
        return encodeURI(`https://${this.storageAccount}.blob.core.windows.net/${this.bucketName}/${key}`);
    }
    /**
     * Get the metadata of an object in the bucket.
     * @param key Key of the object.
     * @throws if the object does not exist.
     */
    async metadata(key) {
        const blobClient = this.containerClient.getBlobClient(key);
        try {
            const properties = await blobClient.getProperties();
            return {
                contentType: properties.contentType,
                lastModified: std_1.Datetime.fromDate(properties.lastModified),
                size: properties.contentLength,
            };
        }
        catch (error) {
            throw new Error(`Object does not exist (key=${key}).`);
        }
    }
    /**
     * Copy object within the bucket
     *
     * @param srcKey The key of the source object you wish to copy.
     * @param dstKey The key of the destination object after copying.
     * @throws if `srcKey` object doesn't exist.
     */
    async copy(srcKey, dstKey) {
        const srcBlobUrl = this.containerClient.getBlobClient(srcKey).url;
        const dstBlobClient = this.containerClient.getBlockBlobClient(dstKey);
        try {
            await dstBlobClient.syncCopyFromURL(srcBlobUrl);
        }
        catch (error) {
            throw new Error(`Source object does not exist (srcKey=${srcKey}).`);
        }
    }
    /**
     * Move object within the container
     *
     * @param srcKey The key of the source object you wish to rename.
     * @param dstKey The key of the destination object after rename.
     * @throws if `srcKey` object doesn't exist or if it matches `dstKey`.
     */
    async rename(srcKey, dstKey) {
        return Promise.reject(`rename is not implemented: (srcKey=${srcKey}, dstKey=${dstKey})`);
    }
    /**
     * Required helper function for node js only.
     *
     * See https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/storage/storage-blob
     */
    streamToBuffer(stream) {
        return new Promise((resolve, reject) => {
            const chunks = [];
            stream.on("data", (data) => {
                chunks.push(Buffer.isBuffer(data) ? data : Buffer.from(data));
            });
            stream.on("end", () => {
                resolve(Buffer.concat(chunks));
            });
            stream.on("error", reject);
        });
    }
}
exports.BucketClient = BucketClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVja2V0LmluZmxpZ2h0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NoYXJlZC1henVyZS9idWNrZXQuaW5mbGlnaHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsOENBQXlEO0FBQ3pELHNEQUk2QjtBQUM3Qiw0REFBOEI7QUFVOUIsZ0NBQXdDO0FBRXhDLE1BQWEsWUFBWTtJQVF2QixZQUNFLFVBQWtCLEVBQ2xCLGNBQXNCLEVBQ3RCLGlCQUFxQztRQU50QiwyQkFBc0IsR0FDckMsSUFBSSxpQ0FBc0IsRUFBRSxDQUFDO1FBTzdCLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1FBQzdCLElBQUksQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxpQkFBaUI7WUFDcEIsaUJBQWlCO2dCQUNqQixJQUFJLGdDQUFpQixDQUNuQixXQUFXLGNBQWMsd0JBQXdCLEVBQ2pELElBQUksQ0FBQyxzQkFBc0IsQ0FDNUIsQ0FBQztRQUNKLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGtCQUFrQixDQUM5RCxJQUFJLENBQUMsVUFBVSxDQUNoQixDQUFDO0lBQ0osQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQVc7UUFDN0IsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDM0QsT0FBTyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksS0FBSyxDQUFDLEdBQUcsQ0FDZCxHQUFXLEVBQ1gsSUFBWSxFQUNaLElBQXVCO1FBRXZCLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDaEUsTUFBTSxPQUFPLEdBQUc7WUFDZCxlQUFlLEVBQUU7Z0JB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QyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUU7Z0JBQ3pCLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDaEUsQ0FBQyxDQUFDLENBQUM7WUFDSCxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUU7Z0JBQ3BCLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDakMsQ0FBQyxDQUFDLENBQUM7WUFDSCxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUM3QixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRjtBQWxURCxvQ0FrVEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEZWZhdWx0QXp1cmVDcmVkZW50aWFsIH0gZnJvbSBcIkBhenVyZS9pZGVudGl0eVwiO1xuaW1wb3J0IHtcbiAgQmxvYkRvd25sb2FkUmVzcG9uc2VQYXJzZWQsXG4gIEJsb2JTZXJ2aWNlQ2xpZW50LFxuICBDb250YWluZXJDbGllbnQsXG59IGZyb20gXCJAYXp1cmUvc3RvcmFnZS1ibG9iXCI7XG5pbXBvcnQgbWltZSBmcm9tIFwibWltZS10eXBlc1wiO1xuaW1wb3J0IHtcbiAgSUJ1Y2tldENsaWVudCxcbiAgT2JqZWN0TWV0YWRhdGEsXG4gIEJ1Y2tldFB1dE9wdGlvbnMsXG4gIEJ1Y2tldERlbGV0ZU9wdGlvbnMsXG4gIEJ1Y2tldFNpZ25lZFVybE9wdGlvbnMsXG4gIEJ1Y2tldEdldE9wdGlvbnMsXG4gIEJ1Y2tldFRyeUdldE9wdGlvbnMsXG59IGZyb20gXCIuLi9jbG91ZFwiO1xuaW1wb3J0IHsgRGF0ZXRpbWUsIEpzb24gfSBmcm9tIFwiLi4vc3RkXCI7XG5cbmV4cG9ydCBjbGFzcyBCdWNrZXRDbGllbnQgaW1wbGVtZW50cyBJQnVja2V0Q2xpZW50IHtcbiAgcHJpdmF0ZSByZWFkb25seSBidWNrZXROYW1lOiBzdHJpbmc7XG4gIHByaXZhdGUgcmVhZG9ubHkgc3RvcmFnZUFjY291bnQ6IHN0cmluZztcbiAgcHJpdmF0ZSByZWFkb25seSBibG9iU2VydmljZUNsaWVudDogQmxvYlNlcnZpY2VDbGllbnQ7XG4gIHByaXZhdGUgcmVhZG9ubHkgY29udGFpbmVyQ2xpZW50OiBDb250YWluZXJDbGllbnQ7XG4gIHByaXZhdGUgcmVhZG9ubHkgZGVmYXVsdEF6dXJlQ3JlZGVudGlhbDogRGVmYXVsdEF6dXJlQ3JlZGVudGlhbCA9XG4gICAgbmV3IERlZmF1bHRBenVyZUNyZWRlbnRpYWwoKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBidWNrZXROYW1lOiBzdHJpbmcsXG4gICAgc3RvcmFnZUFjY291bnQ6IHN0cmluZyxcbiAgICBibG9iU2VydmljZUNsaWVudD86IEJsb2JTZXJ2aWNlQ2xpZW50XG4gICkge1xuICAgIHRoaXMuYnVja2V0TmFtZSA9IGJ1Y2tldE5hbWU7XG4gICAgdGhpcy5zdG9yYWdlQWNjb3VudCA9IHN0b3JhZ2VBY2NvdW50O1xuICAgIHRoaXMuYmxvYlNlcnZpY2VDbGllbnQgPVxuICAgICAgYmxvYlNlcnZpY2VDbGllbnQgPz9cbiAgICAgIG5ldyBCbG9iU2VydmljZUNsaWVudChcbiAgICAgICAgYGh0dHBzOi8vJHtzdG9yYWdlQWNjb3VudH0uYmxvYi5jb3JlLndpbmRvd3MubmV0YCxcbiAgICAgICAgdGhpcy5kZWZhdWx0QXp1cmVDcmVkZW50aWFsXG4gICAgICApO1xuICAgIHRoaXMuY29udGFpbmVyQ2xpZW50ID0gdGhpcy5ibG9iU2VydmljZUNsaWVudC5nZXRDb250YWluZXJDbGllbnQoXG4gICAgICB0aGlzLmJ1Y2tldE5hbWVcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIG9iamVjdCBleGlzdHMgaW4gdGhlIGJ1Y2tldFxuICAgKlxuICAgKiBAcGFyYW0ga2V5IEtleSBvZiB0aGUgb2JqZWN0XG4gICAqL1xuICBwdWJsaWMgYXN5bmMgZXhpc3RzKGtleTogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgY29uc3QgYmxvYkNsaWVudCA9IHRoaXMuY29udGFpbmVyQ2xpZW50LmdldEJsb2JDbGllbnQoa2V5KTtcbiAgICByZXR1cm4gYmxvYkNsaWVudC5leGlzdHMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQdXQgb2JqZWN0IGludG8gYnVja2V0IHdpdGggZ2l2ZW4gYm9keSBjb250ZW50c1xuICAgKlxuICAgKiBAcGFyYW0ga2V5IEtleSBvZiB0aGUgb2JqZWN0XG4gICAqIEBwYXJhbSBib2R5IHN0cmluZyBjb250ZW50cyBvZiB0aGUgb2JqZWN0XG4gICAqL1xuICBwdWJsaWMgYXN5bmMgcHV0KFxuICAgIGtleTogc3RyaW5nLFxuICAgIGJvZHk6IHN0cmluZyxcbiAgICBvcHRzPzogQnVja2V0UHV0T3B0aW9uc1xuICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBibG9iQ2xpZW50ID0gdGhpcy5jb250YWluZXJDbGllbnQuZ2V0QmxvY2tCbG9iQ2xpZW50KGtleSk7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIGJsb2JIVFRQSGVhZGVyczoge1xuICAgICAgICBibG9iQ29udGVudFR5cGU6XG4gICAgICAgICAgKG9wdHM/LmNvbnRlbnRUeXBlID8/IG1pbWUubG9va3VwKGtleSkpIHx8IFwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCIsXG4gICAgICB9LFxuICAgIH07XG4gICAgYXdhaXQgYmxvYkNsaWVudC51cGxvYWQoYm9keSwgYm9keS5sZW5ndGgsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1dCBKc29uIG9iamVjdCBpbnRvIGJ1Y2tldCB3aXRoIGdpdmVuIGJvZHkgY29udGVudHNcbiAgICpcbiAgICogQHBhcmFtIGtleSBLZXkgb2YgdGhlIG9iamVjdFxuICAgKiBAcGFyYW0gYm9keSBKc29uIG9iamVjdFxuICAgKi9cbiAgcHVibGljIGFzeW5jIHB1dEpzb24oa2V5OiBzdHJpbmcsIGJvZHk6IEpzb24pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCB0aGlzLnB1dChrZXksIEpTT04uc3RyaW5naWZ5KGJvZHksIG51bGwsIDIpLCB7XG4gICAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGFuIG9iamVjdCBmcm9tIHRoZSBidWNrZXRcbiAgICpcbiAgICogQHBhcmFtIGtleSBLZXkgb2YgdGhlIG9iamVjdFxuICAgKiBAcmV0dXJucyBzdHJpbmcgY29udGVudCBvZiB0aGUgb2JqZWN0IGFzIHN0cmluZ1xuICAgKi9cbiAgcHVibGljIGFzeW5jIGdldChrZXk6IHN0cmluZywgb3B0aW9ucz86IEJ1Y2tldEdldE9wdGlvbnMpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGNvbnN0IGJsb2JDbGllbnQgPSB0aGlzLmNvbnRhaW5lckNsaWVudC5nZXRCbG9iQ2xpZW50KGtleSk7XG5cbiAgICBsZXQgZG93bmxvYWRSZXNwb25zZTogQmxvYkRvd25sb2FkUmVzcG9uc2VQYXJzZWQ7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHN0YXJ0ID0gb3B0aW9ucz8uc3RhcnRCeXRlICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLnN0YXJ0Qnl0ZSA6IDA7XG4gICAgICBjb25zdCBsZW5ndGggPVxuICAgICAgICBvcHRpb25zPy5lbmRCeXRlICE9PSB1bmRlZmluZWRcbiAgICAgICAgICA/IG9wdGlvbnMuZW5kQnl0ZSAtIHN0YXJ0ICsgMVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgZG93bmxvYWRSZXNwb25zZSA9IGF3YWl0IGJsb2JDbGllbnQuZG93bmxvYWQoc3RhcnQsIGxlbmd0aCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBPYmplY3QgZG9lcyBub3QgZXhpc3QgKGtleT0ke2tleX0pLmApO1xuICAgIH1cbiAgICBpZiAoZG93bmxvYWRSZXNwb25zZS5yZWFkYWJsZVN0cmVhbUJvZHkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBuZXcgVGV4dERlY29kZXIoXCJ1dGY4XCIsIHsgZmF0YWw6IHRydWUgfSkuZGVjb2RlKFxuICAgICAgICBhd2FpdCB0aGlzLnN0cmVhbVRvQnVmZmVyKGRvd25sb2FkUmVzcG9uc2UucmVhZGFibGVTdHJlYW1Cb2R5KVxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBPYmplY3QgY29udGVudHMgY291bGQgbm90IGJlIHJlYWQgYXMgdGV4dCAoa2V5PSR7a2V5fSk6ICR7XG4gICAgICAgICAgKGUgYXMgRXJyb3IpLnN0YWNrXG4gICAgICAgIH0pfWBcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbiBvYmplY3QgZnJvbSB0aGUgYnVja2V0IGlmIGl0IGV4aXN0c1xuICAgKlxuICAgKiBAcGFyYW0ga2V5IEtleSBvZiB0aGUgb2JqZWN0XG4gICAqIEByZXR1cm5zIHN0cmluZyBjb250ZW50IG9mIHRoZSBvYmplY3QgYXMgc3RyaW5nXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgdHJ5R2V0KFxuICAgIGtleTogc3RyaW5nLFxuICAgIG9wdGlvbnM/OiBCdWNrZXRUcnlHZXRPcHRpb25zXG4gICk6IFByb21pc2U8c3RyaW5nIHwgdW5kZWZpbmVkPiB7XG4gICAgaWYgKGF3YWl0IHRoaXMuZXhpc3RzKGtleSkpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldChrZXksIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGEgSnNvbiBvYmplY3QgZnJvbSB0aGUgYnVja2V0XG4gICAqXG4gICAqIEBwYXJhbSBrZXkgS2V5IG9mIHRoZSBvYmplY3RcbiAgICogQHJldHVybnMgSnNvbiBjb250ZW50IG9mIHRoZSBvYmplY3RcbiAgICovXG4gIHB1YmxpYyBhc3luYyBnZXRKc29uKGtleTogc3RyaW5nKTogUHJvbWlzZTxKc29uPiB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoYXdhaXQgdGhpcy5nZXQoa2V5KSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGEgSnNvbiBvYmplY3QgZnJvbSB0aGUgYnVja2V0IGlmIGl0IGV4aXN0c1xuICAgKlxuICAgKiBAcGFyYW0ga2V5IEtleSBvZiB0aGUgb2JqZWN0XG4gICAqIEByZXR1cm5zIEpzb24gY29udGVudCBvZiB0aGUgb2JqZWN0XG4gICAqL1xuICBwdWJsaWMgYXN5bmMgdHJ5R2V0SnNvbihrZXk6IHN0cmluZyk6IFByb21pc2U8SnNvbiB8IHVuZGVmaW5lZD4ge1xuICAgIGlmIChhd2FpdCB0aGlzLmV4aXN0cyhrZXkpKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRKc29uKGtleSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGUgYW4gb2JqZWN0IGZyb20gdGhlIGJ1Y2tldFxuICAgKlxuICAgKiBAcGFyYW0ga2V5IEtleSBvZiB0aGUgb2JqZWN0XG4gICAqIEBwYXJhbSBvcHRzIE9wdGlvbiBvYmplY3Qgc3VwcG9ydGluZyBhZGRpdGlvbmFsIHN0cmF0ZWdpZXMgdG8gZGVsZXRlIGl0ZW0gZnJvbSBhIGJ1Y2tldFxuICAgKi9cbiAgcHVibGljIGFzeW5jIGRlbGV0ZShcbiAgICBrZXk6IHN0cmluZyxcbiAgICBvcHRzOiBCdWNrZXREZWxldGVPcHRpb25zID0ge31cbiAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgbXVzdEV4aXN0ID0gb3B0cy5tdXN0RXhpc3QgPz8gZmFsc2U7XG5cbiAgICBjb25zdCBibG9ja0Jsb2JDbGllbnQgPSB0aGlzLmNvbnRhaW5lckNsaWVudC5nZXRCbG9ja0Jsb2JDbGllbnQoa2V5KTtcblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCBibG9ja0Jsb2JDbGllbnQuZGVsZXRlKCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zdCBlcnJvciA9IGVyciBhcyBhbnk7XG4gICAgICBpZiAoZXJyb3IuZGV0YWlscy5lcnJvckNvZGUgPT09IFwiQmxvYk5vdEZvdW5kXCIpIHtcbiAgICAgICAgaWYgKG11c3RFeGlzdCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgT2JqZWN0IGRvZXMgbm90IGV4aXN0IChrZXk9JHtrZXl9KS5gKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRocm93IEVycm9yKGBGYWlsZWQgdG8gZGVsZXRlIG9iamVjdCAoa2V5PSR7a2V5fSkuYCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBhbiBvYmplY3QgZnJvbSB0aGUgYnVja2V0IGlmIGl0IGV4aXN0c1xuICAgKlxuICAgKiBAcGFyYW0ga2V5IEtleSBvZiB0aGUgb2JqZWN0XG4gICAqIEBwYXJhbSBvcHRzIE9wdGlvbiBvYmplY3Qgc3VwcG9ydGluZyBhZGRpdGlvbmFsIHN0cmF0ZWdpZXMgdG8gZGVsZXRlIGl0ZW0gZnJvbSBhIGJ1Y2tldFxuICAgKi9cbiAgcHVibGljIGFzeW5jIHRyeURlbGV0ZShrZXk6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGlmIChhd2FpdCB0aGlzLmV4aXN0cyhrZXkpKSB7XG4gICAgICBhd2FpdCB0aGlzLmRlbGV0ZShrZXkpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIExpc3QgYWxsIGtleXMgaW4gdGhlIGJ1Y2tldFxuICAgKlxuICAgKiBAcGFyYW0gcHJlZml4IExpbWl0cyB0aGUgcmVzcG9uc2UgdG8ga2V5cyB0aGF0IGJlZ2luIHdpdGggdGhlIHNwZWNpZmllZCBwcmVmaXhcbiAgICovXG4gIHB1YmxpYyBhc3luYyBsaXN0KHByZWZpeD86IHN0cmluZyk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICBjb25zdCBsaXN0OiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgZm9yIGF3YWl0IChjb25zdCBibG9iIG9mIHRoaXMuY29udGFpbmVyQ2xpZW50Lmxpc3RCbG9ic0ZsYXQoeyBwcmVmaXggfSkpIHtcbiAgICAgIGxpc3QucHVzaChibG9iLm5hbWUpO1xuICAgIH1cblxuICAgIHJldHVybiBsaXN0O1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHNpZ25lZFVybChcbiAgICBrZXk6IHN0cmluZyxcbiAgICBvcHRpb25zPzogQnVja2V0U2lnbmVkVXJsT3B0aW9uc1xuICApOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIG9wdGlvbnM7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYHNpZ25lZFVybCBpcyBub3QgaW1wbGVtZW50ZWQgeWV0IGZvciB0Zi1henVyZSAoa2V5PSR7a2V5fSlgXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgdXJsIHRvIHRoZSBnaXZlbiBmaWxlLlxuICAgKiBAVGhyb3dzIGlmIHRoZSBmaWxlIGlzIG5vdCBwdWJsaWMgb3IgaWYgb2JqZWN0IGRvZXMgbm90IGV4aXN0LlxuICAgKi9cbiAgLy8gVE9ETzogTk9UIFNVUFBPUlRFRCEhIC0gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93aW5nbGFuZy93aW5nL2lzc3Vlcy81MTE3XG4gIHB1YmxpYyBhc3luYyBwdWJsaWNVcmwoa2V5OiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIC8vIHRoaXMgcmV0dXJucyBhbiBvcHRpb25hbCBgYmxvYlB1YmxpY0FjY2Vzc2AgcHJvcCAtIGlmIGV4aXN0cyB0aGUgYnVja2V0IGlzIHB1YmxpY1xuICAgIGNvbnN0IGFjY2Vzc1BvbGljeSA9IGF3YWl0IHRoaXMuY29udGFpbmVyQ2xpZW50LmdldEFjY2Vzc1BvbGljeSgpO1xuICAgIGlmICghYWNjZXNzUG9saWN5Py5ibG9iUHVibGljQWNjZXNzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgcHJvdmlkZSBwdWJsaWMgdXJsIGZvciBhIG5vbi1wdWJsaWMgYnVja2V0XCIpO1xuICAgIH1cbiAgICBpZiAoIShhd2FpdCB0aGlzLmV4aXN0cyhrZXkpKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgQ2Fubm90IHByb3ZpZGUgcHVibGljIHVybCBmb3IgYSBub24tZXhpc3RlbnQga2V5IChrZXk9JHtrZXl9KWBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuY29kZVVSSShcbiAgICAgIGBodHRwczovLyR7dGhpcy5zdG9yYWdlQWNjb3VudH0uYmxvYi5jb3JlLndpbmRvd3MubmV0LyR7dGhpcy5idWNrZXROYW1lfS8ke2tleX1gXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG1ldGFkYXRhIG9mIGFuIG9iamVjdCBpbiB0aGUgYnVja2V0LlxuICAgKiBAcGFyYW0ga2V5IEtleSBvZiB0aGUgb2JqZWN0LlxuICAgKiBAdGhyb3dzIGlmIHRoZSBvYmplY3QgZG9lcyBub3QgZXhpc3QuXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgbWV0YWRhdGEoa2V5OiBzdHJpbmcpOiBQcm9taXNlPE9iamVjdE1ldGFkYXRhPiB7XG4gICAgY29uc3QgYmxvYkNsaWVudCA9IHRoaXMuY29udGFpbmVyQ2xpZW50LmdldEJsb2JDbGllbnQoa2V5KTtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBwcm9wZXJ0aWVzID0gYXdhaXQgYmxvYkNsaWVudC5nZXRQcm9wZXJ0aWVzKCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb250ZW50VHlwZTogcHJvcGVydGllcy5jb250ZW50VHlwZSxcbiAgICAgICAgbGFzdE1vZGlmaWVkOiBEYXRldGltZS5mcm9tRGF0ZShwcm9wZXJ0aWVzLmxhc3RNb2RpZmllZCEpLFxuICAgICAgICBzaXplOiBwcm9wZXJ0aWVzLmNvbnRlbnRMZW5ndGghLFxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBPYmplY3QgZG9lcyBub3QgZXhpc3QgKGtleT0ke2tleX0pLmApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDb3B5IG9iamVjdCB3aXRoaW4gdGhlIGJ1Y2tldFxuICAgKlxuICAgKiBAcGFyYW0gc3JjS2V5IFRoZSBrZXkgb2YgdGhlIHNvdXJjZSBvYmplY3QgeW91IHdpc2ggdG8gY29weS5cbiAgICogQHBhcmFtIGRzdEtleSBUaGUga2V5IG9mIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QgYWZ0ZXIgY29weWluZy5cbiAgICogQHRocm93cyBpZiBgc3JjS2V5YCBvYmplY3QgZG9lc24ndCBleGlzdC5cbiAgICovXG4gIHB1YmxpYyBhc3luYyBjb3B5KHNyY0tleTogc3RyaW5nLCBkc3RLZXk6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHNyY0Jsb2JVcmwgPSB0aGlzLmNvbnRhaW5lckNsaWVudC5nZXRCbG9iQ2xpZW50KHNyY0tleSkudXJsO1xuICAgIGNvbnN0IGRzdEJsb2JDbGllbnQgPSB0aGlzLmNvbnRhaW5lckNsaWVudC5nZXRCbG9ja0Jsb2JDbGllbnQoZHN0S2V5KTtcblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCBkc3RCbG9iQ2xpZW50LnN5bmNDb3B5RnJvbVVSTChzcmNCbG9iVXJsKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBTb3VyY2Ugb2JqZWN0IGRvZXMgbm90IGV4aXN0IChzcmNLZXk9JHtzcmNLZXl9KS5gKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTW92ZSBvYmplY3Qgd2l0aGluIHRoZSBjb250YWluZXJcbiAgICpcbiAgICogQHBhcmFtIHNyY0tleSBUaGUga2V5IG9mIHRoZSBzb3VyY2Ugb2JqZWN0IHlvdSB3aXNoIHRvIHJlbmFtZS5cbiAgICogQHBhcmFtIGRzdEtleSBUaGUga2V5IG9mIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QgYWZ0ZXIgcmVuYW1lLlxuICAgKiBAdGhyb3dzIGlmIGBzcmNLZXlgIG9iamVjdCBkb2Vzbid0IGV4aXN0IG9yIGlmIGl0IG1hdGNoZXMgYGRzdEtleWAuXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgcmVuYW1lKHNyY0tleTogc3RyaW5nLCBkc3RLZXk6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgIGByZW5hbWUgaXMgbm90IGltcGxlbWVudGVkOiAoc3JjS2V5PSR7c3JjS2V5fSwgZHN0S2V5PSR7ZHN0S2V5fSlgXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1aXJlZCBoZWxwZXIgZnVuY3Rpb24gZm9yIG5vZGUganMgb25seS5cbiAgICpcbiAgICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9BenVyZS9henVyZS1zZGstZm9yLWpzL3RyZWUvbWFpbi9zZGsvc3RvcmFnZS9zdG9yYWdlLWJsb2JcbiAgICovXG4gIHByaXZhdGUgc3RyZWFtVG9CdWZmZXIoc3RyZWFtOiBOb2RlSlMuUmVhZGFibGVTdHJlYW0pOiBQcm9taXNlPEJ1ZmZlcj4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBjaHVua3M6IEJ1ZmZlcltdID0gW107XG4gICAgICBzdHJlYW0ub24oXCJkYXRhXCIsIChkYXRhKSA9PiB7XG4gICAgICAgIGNodW5rcy5wdXNoKEJ1ZmZlci5pc0J1ZmZlcihkYXRhKSA/IGRhdGEgOiBCdWZmZXIuZnJvbShkYXRhKSk7XG4gICAgICB9KTtcbiAgICAgIHN0cmVhbS5vbihcImVuZFwiLCAoKSA9PiB7XG4gICAgICAgIHJlc29sdmUoQnVmZmVyLmNvbmNhdChjaHVua3MpKTtcbiAgICAgIH0pO1xuICAgICAgc3RyZWFtLm9uKFwiZXJyb3JcIiwgcmVqZWN0KTtcbiAgICB9KTtcbiAgfVxufVxuIl19