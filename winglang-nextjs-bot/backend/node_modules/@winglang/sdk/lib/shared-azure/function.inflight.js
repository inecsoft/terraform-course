"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionClient = void 0;
const http_1 = require("../http");
class FunctionClient {
    constructor(functionName) {
        this.functionName = functionName;
    }
    /**
     * Invoke the function, passing the given payload as an argument.
     *  @returns the function returned payload only
     */
    async invoke(payload) {
        try {
            const res = await http_1.Util.post(`https://${this.functionName}.azurewebsites.net/api/${this.functionName}`, { body: payload });
            if (!res.ok) {
                throw new Error(res.body || "Invocation Error");
            }
            return res.body || undefined;
        }
        catch (error) {
            throw new Error(`Error while invoking the function ${this.functionName}:\n${error.message}`);
        }
    }
    /**
     * Invokes the function asynchronously, passing the given payload as an argument.
     * @returns immediately once the event has been handed off to AWS Lambda.
     */
    async invokeAsync(payload) {
        payload;
        throw new Error("invokeAsync is not implemented");
    }
    /**
     * Invoke the function, passing the given payload as an argument.
     *
     * @returns the function returned payload and logs
     */
    async invokeWithLogs(payload) {
        console.error("Test invocation on tf-azure doesn't include logs yet");
        //TODO: add traces to tf-azure tests- https://github.com/winglang/wing/issues/4574
        return [await this.invoke(payload), []];
    }
}
exports.FunctionClient = FunctionClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVuY3Rpb24uaW5mbGlnaHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2hhcmVkLWF6dXJlL2Z1bmN0aW9uLmluZmxpZ2h0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLGtDQUF1QztBQUd2QyxNQUFhLGNBQWM7SUFDekIsWUFBb0IsWUFBb0I7UUFBcEIsaUJBQVksR0FBWixZQUFZLENBQVE7SUFBRyxDQUFDO0lBRTVDOzs7T0FHRztJQUNJLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBZ0I7UUFDbEMsSUFBSSxDQUFDO1lBQ0gsTUFBTSxHQUFHLEdBQUcsTUFBTSxXQUFJLENBQUMsSUFBSSxDQUN6QixXQUFXLElBQUksQ0FBQyxZQUFZLDBCQUEwQixJQUFJLENBQUMsWUFBWSxFQUFFLEVBQ3pFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUNsQixDQUFDO1lBQ0YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQztnQkFDWixNQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksa0JBQWtCLENBQUMsQ0FBQztZQUNsRCxDQUFDO1lBQ0QsT0FBTyxHQUFHLENBQUMsSUFBSSxJQUFJLFNBQVMsQ0FBQztRQUMvQixDQUFDO1FBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztZQUNmLE1BQU0sSUFBSSxLQUFLLENBQ2IscUNBQXFDLElBQUksQ0FBQyxZQUFZLE1BQ25ELEtBQWUsQ0FBQyxPQUNuQixFQUFFLENBQ0gsQ0FBQztRQUNKLENBQUM7SUFDSCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUFlO1FBQ3RDLE9BQU8sQ0FBQztRQUNSLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLEtBQUssQ0FBQyxjQUFjLENBQ3pCLE9BQWdCO1FBRWhCLE9BQU8sQ0FBQyxLQUFLLENBQUMsc0RBQXNELENBQUMsQ0FBQztRQUN0RSxrRkFBa0Y7UUFDbEYsT0FBTyxDQUFDLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUMxQyxDQUFDO0NBQ0Y7QUEvQ0Qsd0NBK0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUZ1bmN0aW9uQ2xpZW50IH0gZnJvbSBcIi4uL2Nsb3VkXCI7XG5pbXBvcnQgeyBVdGlsIGFzIGh0dHAgfSBmcm9tIFwiLi4vaHR0cFwiO1xuaW1wb3J0IHsgVHJhY2UgfSBmcm9tIFwiLi4vc3RkXCI7XG5cbmV4cG9ydCBjbGFzcyBGdW5jdGlvbkNsaWVudCBpbXBsZW1lbnRzIElGdW5jdGlvbkNsaWVudCB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZnVuY3Rpb25OYW1lOiBzdHJpbmcpIHt9XG5cbiAgLyoqXG4gICAqIEludm9rZSB0aGUgZnVuY3Rpb24sIHBhc3NpbmcgdGhlIGdpdmVuIHBheWxvYWQgYXMgYW4gYXJndW1lbnQuXG4gICAqICBAcmV0dXJucyB0aGUgZnVuY3Rpb24gcmV0dXJuZWQgcGF5bG9hZCBvbmx5XG4gICAqL1xuICBwdWJsaWMgYXN5bmMgaW52b2tlKHBheWxvYWQ/OiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZyB8IHVuZGVmaW5lZD4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBodHRwLnBvc3QoXG4gICAgICAgIGBodHRwczovLyR7dGhpcy5mdW5jdGlvbk5hbWV9LmF6dXJld2Vic2l0ZXMubmV0L2FwaS8ke3RoaXMuZnVuY3Rpb25OYW1lfWAsXG4gICAgICAgIHsgYm9keTogcGF5bG9hZCB9XG4gICAgICApO1xuICAgICAgaWYgKCFyZXMub2spIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlcy5ib2R5IHx8IFwiSW52b2NhdGlvbiBFcnJvclwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXMuYm9keSB8fCB1bmRlZmluZWQ7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEVycm9yIHdoaWxlIGludm9raW5nIHRoZSBmdW5jdGlvbiAke3RoaXMuZnVuY3Rpb25OYW1lfTpcXG4ke1xuICAgICAgICAgIChlcnJvciBhcyBFcnJvcikubWVzc2FnZVxuICAgICAgICB9YFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSW52b2tlcyB0aGUgZnVuY3Rpb24gYXN5bmNocm9ub3VzbHksIHBhc3NpbmcgdGhlIGdpdmVuIHBheWxvYWQgYXMgYW4gYXJndW1lbnQuXG4gICAqIEByZXR1cm5zIGltbWVkaWF0ZWx5IG9uY2UgdGhlIGV2ZW50IGhhcyBiZWVuIGhhbmRlZCBvZmYgdG8gQVdTIExhbWJkYS5cbiAgICovXG4gIHB1YmxpYyBhc3luYyBpbnZva2VBc3luYyhwYXlsb2FkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBwYXlsb2FkO1xuICAgIHRocm93IG5ldyBFcnJvcihcImludm9rZUFzeW5jIGlzIG5vdCBpbXBsZW1lbnRlZFwiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2UgdGhlIGZ1bmN0aW9uLCBwYXNzaW5nIHRoZSBnaXZlbiBwYXlsb2FkIGFzIGFuIGFyZ3VtZW50LlxuICAgKlxuICAgKiBAcmV0dXJucyB0aGUgZnVuY3Rpb24gcmV0dXJuZWQgcGF5bG9hZCBhbmQgbG9nc1xuICAgKi9cbiAgcHVibGljIGFzeW5jIGludm9rZVdpdGhMb2dzKFxuICAgIHBheWxvYWQ/OiBzdHJpbmdcbiAgKTogUHJvbWlzZTxbc3RyaW5nIHwgdW5kZWZpbmVkLCBUcmFjZVtdXT4ge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJUZXN0IGludm9jYXRpb24gb24gdGYtYXp1cmUgZG9lc24ndCBpbmNsdWRlIGxvZ3MgeWV0XCIpO1xuICAgIC8vVE9ETzogYWRkIHRyYWNlcyB0byB0Zi1henVyZSB0ZXN0cy0gaHR0cHM6Ly9naXRodWIuY29tL3dpbmdsYW5nL3dpbmcvaXNzdWVzLzQ1NzRcbiAgICByZXR1cm4gW2F3YWl0IHRoaXMuaW52b2tlKHBheWxvYWQpLCBbXV07XG4gIH1cbn1cbiJdfQ==