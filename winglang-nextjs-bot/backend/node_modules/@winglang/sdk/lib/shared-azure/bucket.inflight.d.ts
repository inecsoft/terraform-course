import { BlobServiceClient } from "@azure/storage-blob";
import { IBucketClient, ObjectMetadata, BucketPutOptions, BucketDeleteOptions, BucketSignedUrlOptions, BucketGetOptions, BucketTryGetOptions } from "../cloud";
import { Json } from "../std";
export declare class BucketClient implements IBucketClient {
    private readonly bucketName;
    private readonly storageAccount;
    private readonly blobServiceClient;
    private readonly containerClient;
    private readonly defaultAzureCredential;
    constructor(bucketName: string, storageAccount: string, blobServiceClient?: BlobServiceClient);
    /**
     * Check if an object exists in the bucket
     *
     * @param key Key of the object
     */
    exists(key: string): Promise<boolean>;
    /**
     * Put object into bucket with given body contents
     *
     * @param key Key of the object
     * @param body string contents of the object
     */
    put(key: string, body: string, opts?: BucketPutOptions): Promise<void>;
    /**
     * Put Json object into bucket with given body contents
     *
     * @param key Key of the object
     * @param body Json object
     */
    putJson(key: string, body: Json): Promise<void>;
    /**
     * Get an object from the bucket
     *
     * @param key Key of the object
     * @returns string content of the object as string
     */
    get(key: string, options?: BucketGetOptions): Promise<string>;
    /**
     * Get an object from the bucket if it exists
     *
     * @param key Key of the object
     * @returns string content of the object as string
     */
    tryGet(key: string, options?: BucketTryGetOptions): Promise<string | undefined>;
    /**
     * Get a Json object from the bucket
     *
     * @param key Key of the object
     * @returns Json content of the object
     */
    getJson(key: string): Promise<Json>;
    /**
     * Get a Json object from the bucket if it exists
     *
     * @param key Key of the object
     * @returns Json content of the object
     */
    tryGetJson(key: string): Promise<Json | undefined>;
    /**
     * Delete an object from the bucket
     *
     * @param key Key of the object
     * @param opts Option object supporting additional strategies to delete item from a bucket
     */
    delete(key: string, opts?: BucketDeleteOptions): Promise<void>;
    /**
     * Delete an object from the bucket if it exists
     *
     * @param key Key of the object
     * @param opts Option object supporting additional strategies to delete item from a bucket
     */
    tryDelete(key: string): Promise<boolean>;
    /**
     * List all keys in the bucket
     *
     * @param prefix Limits the response to keys that begin with the specified prefix
     */
    list(prefix?: string): Promise<string[]>;
    signedUrl(key: string, options?: BucketSignedUrlOptions): Promise<string>;
    /**
     * Returns a url to the given file.
     * @Throws if the file is not public or if object does not exist.
     */
    publicUrl(key: string): Promise<string>;
    /**
     * Get the metadata of an object in the bucket.
     * @param key Key of the object.
     * @throws if the object does not exist.
     */
    metadata(key: string): Promise<ObjectMetadata>;
    /**
     * Copy object within the bucket
     *
     * @param srcKey The key of the source object you wish to copy.
     * @param dstKey The key of the destination object after copying.
     * @throws if `srcKey` object doesn't exist.
     */
    copy(srcKey: string, dstKey: string): Promise<void>;
    /**
     * Move object within the container
     *
     * @param srcKey The key of the source object you wish to rename.
     * @param dstKey The key of the destination object after rename.
     * @throws if `srcKey` object doesn't exist or if it matches `dstKey`.
     */
    rename(srcKey: string, dstKey: string): Promise<void>;
    /**
     * Required helper function for node js only.
     *
     * See https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/storage/storage-blob
     */
    private streamToBuffer;
}
