"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestRunnerClient = void 0;
const function_inflight_1 = require("./function.inflight");
class TestRunnerClient {
    constructor(tests) {
        // Expects a JSON string of the form:
        // [
        //   ["testPath1", "functionArn1"],
        //   ["testPath2", "functionArn2"],
        //   ...
        // ]
        this.tests = new Map(JSON.parse(tests));
    }
    async listTests() {
        return Array.from(this.tests.keys());
    }
    async runTest(path) {
        let functionArn = this.tests.get(path);
        if (!functionArn) {
            throw new Error(`No test found with path "${path}"`);
        }
        const client = new function_inflight_1.FunctionClient(functionArn);
        let traces = [];
        let pass = false;
        let error;
        try {
            const [_, functionTraces] = await client.invokeWithLogs("");
            traces.push(...functionTraces);
            pass = true;
        }
        catch (e) {
            error = e.stack;
        }
        return {
            path,
            pass,
            error,
            traces,
        };
    }
}
exports.TestRunnerClient = TestRunnerClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC1ydW5uZXIuaW5mbGlnaHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2hhcmVkLWF6dXJlL3Rlc3QtcnVubmVyLmluZmxpZ2h0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDJEQUFxRDtBQUdyRCxNQUFhLGdCQUFnQjtJQUkzQixZQUFZLEtBQWE7UUFDdkIscUNBQXFDO1FBQ3JDLElBQUk7UUFDSixtQ0FBbUM7UUFDbkMsbUNBQW1DO1FBQ25DLFFBQVE7UUFDUixJQUFJO1FBQ0osSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBdUIsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFTSxLQUFLLENBQUMsU0FBUztRQUNwQixPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFTSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQVk7UUFDL0IsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ2pCLE1BQU0sSUFBSSxLQUFLLENBQUMsNEJBQTRCLElBQUksR0FBRyxDQUFDLENBQUM7UUFDdkQsQ0FBQztRQUNELE1BQU0sTUFBTSxHQUFHLElBQUksa0NBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUMvQyxJQUFJLE1BQU0sR0FBWSxFQUFFLENBQUM7UUFDekIsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDO1FBQ2pCLElBQUksS0FBeUIsQ0FBQztRQUU5QixJQUFJLENBQUM7WUFDSCxNQUFNLENBQUMsQ0FBQyxFQUFFLGNBQWMsQ0FBQyxHQUFHLE1BQU0sTUFBTSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUM1RCxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsY0FBYyxDQUFDLENBQUM7WUFDL0IsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNkLENBQUM7UUFBQyxPQUFPLENBQU0sRUFBRSxDQUFDO1lBQ2hCLEtBQUssR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUM7UUFDRCxPQUFPO1lBQ0wsSUFBSTtZQUNKLElBQUk7WUFDSixLQUFLO1lBQ0wsTUFBTTtTQUNQLENBQUM7SUFDSixDQUFDO0NBQ0Y7QUExQ0QsNENBMENDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRnVuY3Rpb25DbGllbnQgfSBmcm9tIFwiLi9mdW5jdGlvbi5pbmZsaWdodFwiO1xuaW1wb3J0IHsgSVRlc3RSdW5uZXJDbGllbnQsIFRlc3RSZXN1bHQsIFRyYWNlIH0gZnJvbSBcIi4uL3N0ZFwiO1xuXG5leHBvcnQgY2xhc3MgVGVzdFJ1bm5lckNsaWVudCBpbXBsZW1lbnRzIElUZXN0UnVubmVyQ2xpZW50IHtcbiAgLy8gQSBtYXAgZnJvbSB0ZXN0IG5hbWVzIHRvIHRoZWlyIGNvcnJlc3BvbmRpbmcgZnVuY3Rpb24gQVJOcy5cbiAgcHJpdmF0ZSByZWFkb25seSB0ZXN0czogTWFwPHN0cmluZywgc3RyaW5nPjtcblxuICBjb25zdHJ1Y3Rvcih0ZXN0czogc3RyaW5nKSB7XG4gICAgLy8gRXhwZWN0cyBhIEpTT04gc3RyaW5nIG9mIHRoZSBmb3JtOlxuICAgIC8vIFtcbiAgICAvLyAgIFtcInRlc3RQYXRoMVwiLCBcImZ1bmN0aW9uQXJuMVwiXSxcbiAgICAvLyAgIFtcInRlc3RQYXRoMlwiLCBcImZ1bmN0aW9uQXJuMlwiXSxcbiAgICAvLyAgIC4uLlxuICAgIC8vIF1cbiAgICB0aGlzLnRlc3RzID0gbmV3IE1hcChKU09OLnBhcnNlKHRlc3RzKSBhcyBbc3RyaW5nLCBzdHJpbmddW10pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGxpc3RUZXN0cygpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy50ZXN0cy5rZXlzKCkpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHJ1blRlc3QocGF0aDogc3RyaW5nKTogUHJvbWlzZTxUZXN0UmVzdWx0PiB7XG4gICAgbGV0IGZ1bmN0aW9uQXJuID0gdGhpcy50ZXN0cy5nZXQocGF0aCk7XG4gICAgaWYgKCFmdW5jdGlvbkFybikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyB0ZXN0IGZvdW5kIHdpdGggcGF0aCBcIiR7cGF0aH1cImApO1xuICAgIH1cbiAgICBjb25zdCBjbGllbnQgPSBuZXcgRnVuY3Rpb25DbGllbnQoZnVuY3Rpb25Bcm4pO1xuICAgIGxldCB0cmFjZXM6IFRyYWNlW10gPSBbXTtcbiAgICBsZXQgcGFzcyA9IGZhbHNlO1xuICAgIGxldCBlcnJvcjogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IFtfLCBmdW5jdGlvblRyYWNlc10gPSBhd2FpdCBjbGllbnQuaW52b2tlV2l0aExvZ3MoXCJcIik7XG4gICAgICB0cmFjZXMucHVzaCguLi5mdW5jdGlvblRyYWNlcyk7XG4gICAgICBwYXNzID0gdHJ1ZTtcbiAgICB9IGNhdGNoIChlOiBhbnkpIHtcbiAgICAgIGVycm9yID0gZS5zdGFjaztcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGgsXG4gICAgICBwYXNzLFxuICAgICAgZXJyb3IsXG4gICAgICB0cmFjZXMsXG4gICAgfTtcbiAgfVxufVxuIl19