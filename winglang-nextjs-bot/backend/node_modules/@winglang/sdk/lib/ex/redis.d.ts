import { Construct } from "constructs";
import { LiftMap } from "../core";
import { INFLIGHT_SYMBOL } from "../core/types";
import { Resource } from "../std";
/**
 * Global identifier for `Redis`.
 */
export declare const REDIS_FQN: string;
/**
 * A cloud redis db.
 *
 * @inflight `@winglang/sdk.ex.IRedisClient`
 * @abstract
 */
export declare class Redis extends Resource {
    /** @internal */
    [INFLIGHT_SYMBOL]?: IRedisClient;
    constructor(scope: Construct, id: string);
    /** @internal */
    get _liftMap(): LiftMap;
}
/**
 * Inflight interface for `Redis`.
 */
export interface IRedisClient {
    /**
     * Get url of redis server.
     * @inflight
     */
    url(): Promise<string>;
    /**
     * Set key value pair.
     *
     * @param key the key to set
     * @param value the value to store at given key
     * @inflight
     */
    set(key: string, value: string): Promise<void>;
    /**
     * Get value at given key.
     * @param key the key to get
     * @inflight
     */
    get(key: string): Promise<string | undefined>;
    /**
     * Sets the specified field to respective value in the hash stored at key
     *
     * @param key key to set
     * @param field field in key to set
     * @param value value to set at field in key
     * @inflight
     */
    hset(key: string, field: string, value: string): Promise<number>;
    /**
     * Returns the value associated with field in the hash stored at key
     *
     * @param key the key
     * @param field the field at given key
     * @inflight
     */
    hget(key: string, field: string): Promise<string | undefined>;
    /**
     * Add the specified members to the set stored at key
     * @param key the key
     * @param value the value to add to the set at given key
     * @inflight
     */
    sadd(key: string, value: string): Promise<number>;
    /**
     * Returns all the members of the set value stored at key
     *
     * @param key the key
     * @inflight
     */
    smembers(key: string): Promise<string[]>;
    /**
     * Removes the specified key
     *
     * @param key the key
     * @inflight
     */
    del(key: string): Promise<number>;
}
/**
 * List of inflight operations available for `Redis`.
 * @internal
 */
export declare enum RedisInflightMethods {
    /** `Redis.url` */
    URL = "url",
    /** `Redis.set` */
    SET = "set",
    /** `Redis.get` */
    GET = "get",
    /** `Redis.hset` */
    HSET = "hset",
    /** `Redis.hget` */
    HGET = "hget",
    /** `Redis.sadd` */
    SADD = "sadd",
    /** `Redis.smembers` */
    SMEMBERS = "smembers",
    /** `Redis.del` */
    DEL = "del"
}
/**
 * Base class for `Redis` Client.
 */
export declare abstract class RedisClientBase implements IRedisClient {
    /**
     * Get raw redis client (currently IoRedis).
     */
    protected abstract rawClient(): Promise<any>;
    abstract url(): Promise<string>;
    set(key: string, value: string): Promise<void>;
    get(key: string): Promise<string | undefined>;
    hset(key: string, field: string, value: string): Promise<number>;
    hget(key: string, field: string): Promise<string | undefined>;
    sadd(key: string, value: string): Promise<number>;
    smembers(key: string): Promise<string[]>;
    del(key: string): Promise<number>;
}
