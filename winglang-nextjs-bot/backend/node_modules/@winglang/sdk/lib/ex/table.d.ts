import { Construct } from "constructs";
import { LiftMap } from "../core";
import { INFLIGHT_SYMBOL } from "../core/types";
import { Json, Resource } from "../std";
/**
 * Global identifier for `Table`.
 */
export declare const TABLE_FQN: string;
/**
 * Table column types
 */
export declare enum ColumnType {
    /** String type */
    STRING = 0,
    /** Number type */
    NUMBER = 1,
    /** Bool type */
    BOOLEAN = 2,
    /** Date type */
    DATE = 3,
    /** Json type */
    JSON = 4
}
/**
 * Properties for `Table`.
 */
export interface TableProps {
    /**
     * The table's name.
     * @default undefined
     */
    readonly name?: string;
    /**
     * The table's columns.
     * @default undefined
     */
    readonly columns?: {
        [key: string]: ColumnType;
    };
    /**
     * The table's primary key. No two rows can have the same value for the
     * primary key.
     * @default undefined
     */
    readonly primaryKey?: string;
    /**
     * The table's initial rows.
     * @default undefined
     */
    readonly initialRows?: {
        [key: string]: Json;
    };
}
/**
 * A NoSQL database table that can be used to store and query data.
 * @inflight `@winglang/sdk.ex.ITableClient`
 * @abstract
 */
export declare class Table extends Resource {
    /** @internal */
    [INFLIGHT_SYMBOL]?: ITableClient;
    /**
     * Table name
     */
    readonly name: string;
    /**
     * Table primary key name
     */
    readonly primaryKey: string;
    /**
     * Table columns
     */
    readonly columns: {
        [key: string]: ColumnType;
    };
    constructor(scope: Construct, id: string, props: TableProps);
    /** @internal */
    get _liftMap(): LiftMap;
    /**
     * Add a row to the table that is created when the app is deployed.
     * @abstract
     */
    addRow(key: string, row: Json): void;
}
/**
 * Inflight interface for `Table`.
 */
export interface ITableClient {
    /**
     * Insert a row into the table.
     * @param key primary key to insert the row.
     * @param row data to be inserted.
     * @inflight
     */
    insert(key: string, row: Json): Promise<void>;
    /**
     * Insert a row into the table if it doesn't exist, otherwise update it.
     * @param key primary key to upsert the row.
     * @param row data to be upserted.
     * @inflight
     */
    upsert(key: string, row: Json): Promise<void>;
    /**
     * Update a row in the table.
     * @param key primary key to update the row.
     * @param row data to be updated.
     * @inflight
     */
    update(key: string, row: Json): Promise<void>;
    /**
     * Delete a row from the table, by primary key.
     * @param key primary key to delete the row.
     * @inflight
     */
    delete(key: string): Promise<void>;
    /**
     * Get a row from the table, by primary key.
     * @param key primary key to search.
     * @returns get the row from table.
     * @throws if no row with the given key exists.
     * @inflight
     */
    get(key: string): Promise<Json>;
    /**
     * Get a row from the table if exists, by primary key.
     * @param key primary key to search.
     * @returns get the row from table if it exists, nil otherwise.
     * @inflight
     */
    tryGet(key: string): Promise<Json | undefined>;
    /**
     * List all rows in the table.
     * @returns list all row.
     * @inflight
     */
    list(): Promise<Array<Json>>;
}
/**
 * List of inflight operations available for `Table`.
 * @internal
 */
export declare enum TableInflightMethods {
    /** `Table.insert` */
    INSERT = "insert",
    /** `Table.insert` */
    UPSERT = "upsert",
    /** `Table.update` */
    UPDATE = "update",
    /** `Table.delete` */
    DELETE = "delete",
    /** `Table.get` */
    GET = "get",
    /** `Table.tryGet` */
    TRYGET = "tryGet",
    /** `Table.list` */
    LIST = "list"
}
