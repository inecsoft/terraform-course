"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TableInflightMethods = exports.Table = exports.ColumnType = exports.TABLE_FQN = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const constants_1 = require("../constants");
const errors_1 = require("../core/errors");
const types_1 = require("../core/types");
const std_1 = require("../std");
/**
 * Global identifier for `Table`.
 */
exports.TABLE_FQN = (0, constants_1.fqnForType)("ex.Table");
/**
 * Table column types
 */
var ColumnType;
(function (ColumnType) {
    /** String type */
    ColumnType[ColumnType["STRING"] = 0] = "STRING";
    /** Number type */
    ColumnType[ColumnType["NUMBER"] = 1] = "NUMBER";
    /** Bool type */
    ColumnType[ColumnType["BOOLEAN"] = 2] = "BOOLEAN";
    /** Date type */
    ColumnType[ColumnType["DATE"] = 3] = "DATE";
    /** Json type */
    ColumnType[ColumnType["JSON"] = 4] = "JSON";
})(ColumnType || (exports.ColumnType = ColumnType = {}));
/**
 * A NoSQL database table that can be used to store and query data.
 * @inflight `@winglang/sdk.ex.ITableClient`
 * @abstract
 */
class Table extends std_1.Resource {
    constructor(scope, id, props) {
        if (new.target === Table) {
            return std_1.Resource._newFromFactory(exports.TABLE_FQN, scope, id, props);
        }
        super(scope, id);
        std_1.Node.of(this).title = "Table";
        std_1.Node.of(this).description =
            "A cloud NoSQL database table that can be used to store and query data";
        if (!props.name) {
            throw new Error("Table name is not defined");
        }
        this.name = props.name;
        if (!props.primaryKey) {
            throw new Error("Primary Key is not defined");
        }
        this.primaryKey = props.primaryKey;
        if (!props.columns) {
            throw new Error("No column is defined");
        }
        this.columns = props.columns;
    }
    /** @internal */
    get _liftMap() {
        return {};
    }
    /**
     * Add a row to the table that is created when the app is deployed.
     * @abstract
     */
    addRow(key, row) {
        key;
        row;
        throw new errors_1.AbstractMemberError();
    }
}
exports.Table = Table;
_a = JSII_RTTI_SYMBOL_1;
Table[_a] = { fqn: "@winglang/sdk.ex.Table", version: "0.0.0" };
/**
 * List of inflight operations available for `Table`.
 * @internal
 */
var TableInflightMethods;
(function (TableInflightMethods) {
    /** `Table.insert` */
    TableInflightMethods["INSERT"] = "insert";
    /** `Table.insert` */
    TableInflightMethods["UPSERT"] = "upsert";
    /** `Table.update` */
    TableInflightMethods["UPDATE"] = "update";
    /** `Table.delete` */
    TableInflightMethods["DELETE"] = "delete";
    /** `Table.get` */
    TableInflightMethods["GET"] = "get";
    /** `Table.tryGet` */
    TableInflightMethods["TRYGET"] = "tryGet";
    /** `Table.list` */
    TableInflightMethods["LIST"] = "list";
})(TableInflightMethods || (exports.TableInflightMethods = TableInflightMethods = {}));
//# sourceMappingURL=data:application/json;base64,