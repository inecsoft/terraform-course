"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceNames = exports.CaseConventions = void 0;
var CaseConventions;
(function (CaseConventions) {
    CaseConventions["LOWERCASE"] = "lowercase";
    CaseConventions["UPPERCASE"] = "uppercase";
})(CaseConventions || (exports.CaseConventions = CaseConventions = {}));
class ResourceNames {
    static generateName(resource, props) {
        const sep = props.sep ?? "-";
        const maxLen = props.maxLen;
        if (maxLen && maxLen < 8) {
            throw new Error("maxLen must be at least 8");
        }
        let name = resource.node.id;
        name = applyCaseConversion(name, props.case);
        if (props.prefix) {
            name = `${props.prefix}${name}`;
        }
        let includeHash = props.includeHash ?? true;
        let hash = includeHash ? sep + resource.node.addr.substring(0, 8) : "";
        let suffix = props.suffix ?? "";
        name = name.replace(props.disallowedRegex, sep);
        // TODO: allow customizing where we "trim" the name, e.g.
        // 1. trim from the end
        // 2. trim from the beginning
        // 3. trim from the middle
        if (maxLen) {
            name = name.substring(0, maxLen - hash.length - suffix.length);
        }
        name = `${name}${hash}${suffix}`;
        // apply case conversion again in case the prefix, suffix, or hash is not
        // case-conformant
        name = applyCaseConversion(name, props.case);
        return name;
    }
}
exports.ResourceNames = ResourceNames;
function applyCaseConversion(name, caseConventions) {
    if (caseConventions === CaseConventions.LOWERCASE) {
        return name.toLocaleLowerCase();
    }
    if (caseConventions === CaseConventions.UPPERCASE) {
        return name.toLocaleUpperCase();
    }
    return name;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb3VyY2UtbmFtZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2hhcmVkL3Jlc291cmNlLW5hbWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLElBQVksZUFHWDtBQUhELFdBQVksZUFBZTtJQUN6QiwwQ0FBdUIsQ0FBQTtJQUN2QiwwQ0FBdUIsQ0FBQTtBQUN6QixDQUFDLEVBSFcsZUFBZSwrQkFBZixlQUFlLFFBRzFCO0FBdURELE1BQWEsYUFBYTtJQUNqQixNQUFNLENBQUMsWUFBWSxDQUFDLFFBQW1CLEVBQUUsS0FBa0I7UUFDaEUsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUM7UUFDN0IsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztRQUU1QixJQUFJLE1BQU0sSUFBSSxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDekIsTUFBTSxJQUFJLEtBQUssQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1FBQy9DLENBQUM7UUFFRCxJQUFJLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUU1QixJQUFJLEdBQUcsbUJBQW1CLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUU3QyxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNqQixJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsTUFBTSxHQUFHLElBQUksRUFBRSxDQUFDO1FBQ2xDLENBQUM7UUFFRCxJQUFJLFdBQVcsR0FBRyxLQUFLLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQztRQUM1QyxJQUFJLElBQUksR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDdkUsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUM7UUFFaEMsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLGVBQWUsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUVoRCx5REFBeUQ7UUFDekQsdUJBQXVCO1FBQ3ZCLDZCQUE2QjtRQUM3QiwwQkFBMEI7UUFDMUIsSUFBSSxNQUFNLEVBQUUsQ0FBQztZQUNYLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDakUsQ0FBQztRQUVELElBQUksR0FBRyxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsTUFBTSxFQUFFLENBQUM7UUFFakMseUVBQXlFO1FBQ3pFLGtCQUFrQjtRQUNsQixJQUFJLEdBQUcsbUJBQW1CLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUU3QyxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Q0FDRjtBQXZDRCxzQ0F1Q0M7QUFFRCxTQUFTLG1CQUFtQixDQUFDLElBQVksRUFBRSxlQUFpQztJQUMxRSxJQUFJLGVBQWUsS0FBSyxlQUFlLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDbEQsT0FBTyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0lBQ0QsSUFBSSxlQUFlLEtBQUssZUFBZSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ2xELE9BQU8sSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDbEMsQ0FBQztJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5cbmV4cG9ydCBlbnVtIENhc2VDb252ZW50aW9ucyB7XG4gIExPV0VSQ0FTRSA9IFwibG93ZXJjYXNlXCIsXG4gIFVQUEVSQ0FTRSA9IFwidXBwZXJjYXNlXCIsXG59XG5cbi8qKlxuICogT3B0aW9ucyBmb3IgYFJlc291cmNlTmFtZXMuZ2VuZXJhdGVOYW1lYFxuICovXG5leHBvcnQgaW50ZXJmYWNlIE5hbWVPcHRpb25zIHtcbiAgLyoqXG4gICAqIE1heGltdW0gbGVuZ3RoIGZvciB0aGUgZ2VuZXJhdGVkIG5hbWUuIFRoZSBsZW5ndGggbXVzdCBhdCBsZWFzdCB0aGUgbGVuZ3RoXG4gICAqIG9mIHRoZSBoYXNoICg4IGNoYXJhY3RlcnMpLlxuICAgKiBAZGVmYXVsdCAtIG5vIG1heGltdW0gbGVuZ3RoXG4gICAqL1xuICByZWFkb25seSBtYXhMZW4/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IGluZGljYXRlcyB3aGljaCBjaGFyYWN0ZXJzIGFyZSBpbnZhbGlkLiBFYWNoIGdyb3VwXG4gICAqIG9mIGNoYXJhY3RlcnMgd2lsbCBiZSByZXBsYWNlZCB3aXRoIGBzZXBgLlxuICAgKi9cbiAgcmVhZG9ubHkgZGlzYWxsb3dlZFJlZ2V4OiBSZWdFeHA7XG5cbiAgLyoqXG4gICAqIFdvcmQgYnJlYWtlclxuICAgKiBAZGVmYXVsdCBcIi1cIlxuICAgKi9cbiAgcmVhZG9ubHkgc2VwPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBDb252ZXJ0IHRoZSBnZW5lcmF0ZWQgbmFtZSB0byBhbGwgdXBwZXJjYXNlIG9yIGFsbCBsb3dlcmNhc2UuXG4gICAqIEBkZWZhdWx0IC0gYXBwbHkgbm8gY2FzZSBjb252ZXJzaW9uXG4gICAqL1xuICByZWFkb25seSBjYXNlPzogQ2FzZUNvbnZlbnRpb25zO1xuXG4gIC8qKlxuICAgKiBBcHBseSBhIHByZWRlZmluZWQgcHJlZml4IHRvIHRoZSBnZW5lcmF0ZWQgbmFtZVxuICAgKiBAZGVmYXVsdCAtIG5vIHByZWZpeFxuICAgKi9cbiAgcmVhZG9ubHkgcHJlZml4Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBBcHBseSBhIHByZWRlZmluZWQgc3VmZml4IHRvIHRoZSBnZW5lcmF0ZWQgbmFtZVxuICAgKiBAZGVmYXVsdCAtIG5vIHN1ZmZpeFxuICAgKi9cbiAgcmVhZG9ubHkgc3VmZml4Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBJbmNsdWRlIGEgaGFzaCBvZiB0aGUgcmVzb3VyY2UncyBhZGRyZXNzIGluIHRoZSBnZW5lcmF0ZWQgbmFtZS5cbiAgICpcbiAgICogVGhpcyBzaG91bGQgb25seSBiZSBkaXNhYmxlZCBpZiB0aGUgcmVzb3VyY2UncyBuYW1lIGlzIGd1YXJhbnRlZWQgdG8gYmVcbiAgICogYXBwLXVuaXF1ZSwgb3IgaWYgc29tZSBvdGhlciBzb3VyY2Ugb2YgcmFuZG9tbmVzcyB3aWxsIGJlIGFwcGVuZGVkIHRvIHRoZVxuICAgKiBuYW1lLlxuICAgKlxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICByZWFkb25seSBpbmNsdWRlSGFzaD86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjbGFzcyBSZXNvdXJjZU5hbWVzIHtcbiAgcHVibGljIHN0YXRpYyBnZW5lcmF0ZU5hbWUocmVzb3VyY2U6IENvbnN0cnVjdCwgcHJvcHM6IE5hbWVPcHRpb25zKTogc3RyaW5nIHtcbiAgICBjb25zdCBzZXAgPSBwcm9wcy5zZXAgPz8gXCItXCI7XG4gICAgY29uc3QgbWF4TGVuID0gcHJvcHMubWF4TGVuO1xuXG4gICAgaWYgKG1heExlbiAmJiBtYXhMZW4gPCA4KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJtYXhMZW4gbXVzdCBiZSBhdCBsZWFzdCA4XCIpO1xuICAgIH1cblxuICAgIGxldCBuYW1lID0gcmVzb3VyY2Uubm9kZS5pZDtcblxuICAgIG5hbWUgPSBhcHBseUNhc2VDb252ZXJzaW9uKG5hbWUsIHByb3BzLmNhc2UpO1xuXG4gICAgaWYgKHByb3BzLnByZWZpeCkge1xuICAgICAgbmFtZSA9IGAke3Byb3BzLnByZWZpeH0ke25hbWV9YDtcbiAgICB9XG5cbiAgICBsZXQgaW5jbHVkZUhhc2ggPSBwcm9wcy5pbmNsdWRlSGFzaCA/PyB0cnVlO1xuICAgIGxldCBoYXNoID0gaW5jbHVkZUhhc2ggPyBzZXAgKyByZXNvdXJjZS5ub2RlLmFkZHIuc3Vic3RyaW5nKDAsIDgpIDogXCJcIjtcbiAgICBsZXQgc3VmZml4ID0gcHJvcHMuc3VmZml4ID8/IFwiXCI7XG5cbiAgICBuYW1lID0gbmFtZS5yZXBsYWNlKHByb3BzLmRpc2FsbG93ZWRSZWdleCwgc2VwKTtcblxuICAgIC8vIFRPRE86IGFsbG93IGN1c3RvbWl6aW5nIHdoZXJlIHdlIFwidHJpbVwiIHRoZSBuYW1lLCBlLmcuXG4gICAgLy8gMS4gdHJpbSBmcm9tIHRoZSBlbmRcbiAgICAvLyAyLiB0cmltIGZyb20gdGhlIGJlZ2lubmluZ1xuICAgIC8vIDMuIHRyaW0gZnJvbSB0aGUgbWlkZGxlXG4gICAgaWYgKG1heExlbikge1xuICAgICAgbmFtZSA9IG5hbWUuc3Vic3RyaW5nKDAsIG1heExlbiAtIGhhc2gubGVuZ3RoIC0gc3VmZml4Lmxlbmd0aCk7XG4gICAgfVxuXG4gICAgbmFtZSA9IGAke25hbWV9JHtoYXNofSR7c3VmZml4fWA7XG5cbiAgICAvLyBhcHBseSBjYXNlIGNvbnZlcnNpb24gYWdhaW4gaW4gY2FzZSB0aGUgcHJlZml4LCBzdWZmaXgsIG9yIGhhc2ggaXMgbm90XG4gICAgLy8gY2FzZS1jb25mb3JtYW50XG4gICAgbmFtZSA9IGFwcGx5Q2FzZUNvbnZlcnNpb24obmFtZSwgcHJvcHMuY2FzZSk7XG5cbiAgICByZXR1cm4gbmFtZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseUNhc2VDb252ZXJzaW9uKG5hbWU6IHN0cmluZywgY2FzZUNvbnZlbnRpb25zPzogQ2FzZUNvbnZlbnRpb25zKSB7XG4gIGlmIChjYXNlQ29udmVudGlvbnMgPT09IENhc2VDb252ZW50aW9ucy5MT1dFUkNBU0UpIHtcbiAgICByZXR1cm4gbmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICB9XG4gIGlmIChjYXNlQ29udmVudGlvbnMgPT09IENhc2VDb252ZW50aW9ucy5VUFBFUkNBU0UpIHtcbiAgICByZXR1cm4gbmFtZS50b0xvY2FsZVVwcGVyQ2FzZSgpO1xuICB9XG4gIHJldHVybiBuYW1lO1xufVxuIl19