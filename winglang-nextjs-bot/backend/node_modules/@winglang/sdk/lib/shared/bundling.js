"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isBundleInvalidated = exports.filesModifiedSince = exports.fixSourcemaps = exports.createBundle = void 0;
const crypto = __importStar(require("crypto"));
const fs_1 = require("fs");
const promises_1 = require("fs/promises");
const path_1 = require("path");
const vlq_1 = require("vlq");
const misc_1 = require("./misc");
const SDK_PATH = (0, misc_1.normalPath)((0, path_1.resolve)(__dirname, "..", ".."));
/**
 * Bundles a javascript entrypoint into a single file.
 * @param entrypoint The javascript entrypoint
 * @param outputDir Defaults to `${entrypoint}.bundle`
 * @param external external packages
 * @returns Bundle information
 */
function createBundle(entrypoint, external = [], outputDir) {
    const normalEntrypoint = (0, misc_1.normalPath)((0, fs_1.realpathSync)(entrypoint));
    const outdir = outputDir
        ? (0, misc_1.normalPath)((0, fs_1.realpathSync)(outputDir))
        : `${normalEntrypoint}.bundle`;
    (0, fs_1.mkdirSync)(outdir, { recursive: true });
    const outfileName = "index.cjs";
    const soucemapFilename = `${outfileName}.map`;
    const outfile = path_1.posix.join(outdir, outfileName);
    const outfileMap = path_1.posix.join(outdir, soucemapFilename);
    const stats = (0, fs_1.statSync)(normalEntrypoint);
    // Track what time we started bundling so we can invalidate the bundle if any
    // of the source files are modified after this time.
    let startTime = new Date();
    // For unknown reasons, the date created here by JavaScript can sometimes be a
    // few milliseconds before the last modification date of the entrypoint file.
    // This can cause the bundle to be invalidated when it shouldn't be. To
    // prevent this flakiness in unit tests, we check if the modification date of the
    // entrypoint file and update the start time if it's newer.
    if (stats.mtime > startTime) {
        startTime = stats.mtime;
    }
    // eslint-disable-next-line import/no-extraneous-dependencies,@typescript-eslint/no-require-imports
    const esbuilder = require("esbuild");
    let esbuild = esbuilder.buildSync({
        bundle: true,
        entryPoints: [normalEntrypoint],
        outfile,
        // otherwise there are problems with running azure cloud functions:
        // https://stackoverflow.com/questions/70332883/webpack-azure-storage-blob-node-fetch-abortsignal-issue
        keepNames: true,
        // if the user has specified a node_modules directory to resolve from
        nodePaths: process.env.WING_NODE_MODULES
            ? [(0, misc_1.normalPath)(process.env.WING_NODE_MODULES)]
            : undefined,
        alias: {
            "@winglang/sdk": SDK_PATH,
        },
        minify: false,
        sourcemap: "linked",
        platform: "node",
        target: "node20",
        format: "cjs",
        external,
        metafile: true,
        write: false,
    });
    if (esbuild.errors.length > 0) {
        const errors = esbuild.errors.map((e) => e.text).join("\n");
        throw new Error(`Failed to bundle function: ${errors}`);
    }
    const bundleOutput = esbuild.outputFiles[1];
    // ensure source paths have posix path separators
    const sourcemapData = JSON.parse(new TextDecoder().decode(esbuild.outputFiles[0].contents));
    fixSourcemaps(sourcemapData);
    (0, fs_1.writeFileSync)(outfile, bundleOutput.contents);
    (0, fs_1.writeFileSync)(outfileMap, JSON.stringify(sourcemapData));
    // calculate a md5 hash of the contents of asset.path
    const codeHash = crypto
        .createHash("md5")
        .update(bundleOutput.contents)
        .digest("hex");
    const outKeys = Object.keys(esbuild.metafile?.outputs ?? {});
    const outKey = outKeys.find((k) => k.endsWith(outfileName));
    if (!outKey) {
        throw new Error(`Couldn't find metadata for ${outfileName} from esbuild.`);
    }
    const inputFiles = Object.keys(esbuild.metafile?.outputs[outKey].inputs);
    return {
        directory: outdir,
        hash: codeHash,
        outfilePath: outfile,
        sourcemapPath: outfileMap,
        inputFiles,
        time: startTime,
    };
}
exports.createBundle = createBundle;
/**
 * Takes a bundled sourcemap and does the following fixes:
 * - Normalizes paths in sources and sourceRoot
 * - Removes duplicate sources and sourcesContent
 * - Updates mappings to reflect the new source indices
 *
 * The duplicate sources come from esbuild's strange handling of multiple files being bundled that point to the same source (e.g. inflights that point to one .w file)
 * See https://github.com/evanw/esbuild/issues/933
 */
function fixSourcemaps(sourcemapData) {
    // normalize sourceRoot
    if (sourcemapData.sourceRoot) {
        sourcemapData.sourceRoot = (0, misc_1.normalPath)(sourcemapData.sourceRoot);
    }
    // normalize sources and remove duplicates
    const sourceSet = [];
    const newSourceContents = [];
    const sourceIndexMap = {};
    let hasSourceDupes = false;
    sourcemapData.sources.forEach((source, idx) => {
        const newPath = (0, misc_1.normalPath)(source);
        sourcemapData.sources[idx] = newPath;
        const existingIndex = sourceSet.indexOf(newPath);
        if (existingIndex === -1) {
            sourceSet.push(newPath);
            newSourceContents.push(sourcemapData.sourcesContent[idx]);
            sourceIndexMap[idx] = sourceSet.length - 1;
        }
        else {
            hasSourceDupes = true;
            sourceIndexMap[idx] = existingIndex;
        }
    });
    sourcemapData.sources = sourceSet;
    sourcemapData.sourcesContent = newSourceContents;
    // fast path: No source duplicates so no need to update mappings
    if (!hasSourceDupes) {
        return;
    }
    // update mappings
    let newMapping = "";
    let characterIndex = 0;
    let lastFile = 0;
    let lastTrueFile = 0;
    while (characterIndex < sourcemapData.mappings.length) {
        const char = sourcemapData.mappings[characterIndex];
        // `;` and `,` are separators between the segments of interest
        if (char === ";" || char === ",") {
            newMapping += char;
            characterIndex++;
            continue;
        }
        // get next slice of segment data
        let segment = "";
        let nextChar = char;
        while (nextChar !== undefined && nextChar !== "," && nextChar !== ";") {
            segment += nextChar;
            nextChar = sourcemapData.mappings[++characterIndex];
        }
        const decoded = (0, vlq_1.decode)(segment);
        if (decoded.length === 1) {
            newMapping += segment;
            continue;
        }
        const sourceRelative = decoded[1];
        const originalSource = lastTrueFile + sourceRelative;
        const newSourceIndex = sourceIndexMap[originalSource];
        lastTrueFile = originalSource;
        const newRelativeValue = newSourceIndex - lastFile;
        lastFile = newSourceIndex;
        if (newRelativeValue === decoded[1]) {
            // no change was made, avoid re-encoding
            newMapping += segment;
        }
        else {
            decoded[1] = newRelativeValue;
            newMapping += (0, vlq_1.encode)(decoded);
        }
    }
    sourcemapData.mappings = newMapping;
}
exports.fixSourcemaps = fixSourcemaps;
async function filesModifiedSince(filePaths, directory, dateTime) {
    const absolutePaths = filePaths.map((filePath) => (0, path_1.resolve)(directory, filePath));
    try {
        const statsPromises = absolutePaths.map((filePath) => (0, promises_1.stat)(filePath));
        const stats = await Promise.all(statsPromises);
        const changedFiles = new Array();
        for (let i = 0; i < absolutePaths.length; i++) {
            if (stats[i].mtime > dateTime) {
                console.error(`File ${absolutePaths[i]} has been modified since the last bundle`, stats[i].mtime, dateTime);
                changedFiles.push(absolutePaths[i]);
            }
        }
        return changedFiles;
    }
    catch (error) {
        console.error("Error checking file modification times:", error);
        throw error;
    }
}
exports.filesModifiedSince = filesModifiedSince;
async function isBundleInvalidated(entrypoint, bundle, log) {
    const modifiedFiles = await filesModifiedSince([entrypoint, ...bundle.inputFiles], process.cwd(), bundle.time);
    if (modifiedFiles.length === 0) {
        return false;
    }
    if (process.env.DEBUG) {
        log?.(`Files modified since last bundling: [${modifiedFiles
            .map((x) => `"${x}"`)
            .join(", ")}]`);
    }
    return true;
}
exports.isBundleInvalidated = isBundleInvalidated;
//# sourceMappingURL=data:application/json;base64,