"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processStream = void 0;
const string_decoder_1 = require("string_decoder");
/**
 * Processes a stream, invoking a callback function for each line of data.
 *
 * @param stream - The readable stream to process.
 * @param callback - The function to invoke for each line of data.
 */
function processStream(stream, callback) {
    let remainder = "";
    // StringDecoder to handle potentially incomplete multi-byte characters
    const decoder = new string_decoder_1.StringDecoder();
    stream.on("data", (data) => {
        remainder = processStreamData(data, remainder, decoder, callback);
    });
    // Handle any remaining data when the streams are closed
    stream.on("end", () => {
        if (remainder)
            callback(remainder + decoder.end());
    });
    stream.on("error", (error) => {
        console.error(`Error occurred: ${error.message}`);
    });
}
exports.processStream = processStream;
function processStreamData(data, remainder, decoder, log) {
    let str = decoder.write(data);
    let lines = (remainder + str).split("\n");
    // Process all lines except the last one, which might be incomplete
    for (let i = 0; i < lines.length - 1; i++) {
        log(lines[i]);
    }
    return lines.pop() ?? ""; // Return the last (potentially incomplete) line
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyZWFtLXByb2Nlc3Nvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zaGFyZWQvc3RyZWFtLXByb2Nlc3Nvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxtREFBK0M7QUFFL0M7Ozs7O0dBS0c7QUFDSCxTQUFnQixhQUFhLENBQzNCLE1BQWdCLEVBQ2hCLFFBQW1DO0lBRW5DLElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUNuQix1RUFBdUU7SUFDdkUsTUFBTSxPQUFPLEdBQUcsSUFBSSw4QkFBYSxFQUFFLENBQUM7SUFFcEMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRTtRQUN6QixTQUFTLEdBQUcsaUJBQWlCLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDcEUsQ0FBQyxDQUFDLENBQUM7SUFFSCx3REFBd0Q7SUFDeEQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFO1FBQ3BCLElBQUksU0FBUztZQUFFLFFBQVEsQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDckQsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO1FBQzNCLE9BQU8sQ0FBQyxLQUFLLENBQUMsbUJBQW1CLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBQ3BELENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQXBCRCxzQ0FvQkM7QUFFRCxTQUFTLGlCQUFpQixDQUN4QixJQUFZLEVBQ1osU0FBaUIsRUFDakIsT0FBc0IsRUFDdEIsR0FBOEI7SUFFOUIsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5QixJQUFJLEtBQUssR0FBRyxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFMUMsbUVBQW1FO0lBQ25FLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQzFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoQixDQUFDO0lBRUQsT0FBTyxLQUFLLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsZ0RBQWdEO0FBQzVFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZWFkYWJsZSB9IGZyb20gXCJzdHJlYW1cIjtcbmltcG9ydCB7IFN0cmluZ0RlY29kZXIgfSBmcm9tIFwic3RyaW5nX2RlY29kZXJcIjtcblxuLyoqXG4gKiBQcm9jZXNzZXMgYSBzdHJlYW0sIGludm9raW5nIGEgY2FsbGJhY2sgZnVuY3Rpb24gZm9yIGVhY2ggbGluZSBvZiBkYXRhLlxuICpcbiAqIEBwYXJhbSBzdHJlYW0gLSBUaGUgcmVhZGFibGUgc3RyZWFtIHRvIHByb2Nlc3MuXG4gKiBAcGFyYW0gY2FsbGJhY2sgLSBUaGUgZnVuY3Rpb24gdG8gaW52b2tlIGZvciBlYWNoIGxpbmUgb2YgZGF0YS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NTdHJlYW0oXG4gIHN0cmVhbTogUmVhZGFibGUsXG4gIGNhbGxiYWNrOiAobWVzc2FnZTogc3RyaW5nKSA9PiB2b2lkXG4pIHtcbiAgbGV0IHJlbWFpbmRlciA9IFwiXCI7XG4gIC8vIFN0cmluZ0RlY29kZXIgdG8gaGFuZGxlIHBvdGVudGlhbGx5IGluY29tcGxldGUgbXVsdGktYnl0ZSBjaGFyYWN0ZXJzXG4gIGNvbnN0IGRlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcigpO1xuXG4gIHN0cmVhbS5vbihcImRhdGFcIiwgKGRhdGEpID0+IHtcbiAgICByZW1haW5kZXIgPSBwcm9jZXNzU3RyZWFtRGF0YShkYXRhLCByZW1haW5kZXIsIGRlY29kZXIsIGNhbGxiYWNrKTtcbiAgfSk7XG5cbiAgLy8gSGFuZGxlIGFueSByZW1haW5pbmcgZGF0YSB3aGVuIHRoZSBzdHJlYW1zIGFyZSBjbG9zZWRcbiAgc3RyZWFtLm9uKFwiZW5kXCIsICgpID0+IHtcbiAgICBpZiAocmVtYWluZGVyKSBjYWxsYmFjayhyZW1haW5kZXIgKyBkZWNvZGVyLmVuZCgpKTtcbiAgfSk7XG5cbiAgc3RyZWFtLm9uKFwiZXJyb3JcIiwgKGVycm9yKSA9PiB7XG4gICAgY29uc29sZS5lcnJvcihgRXJyb3Igb2NjdXJyZWQ6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NTdHJlYW1EYXRhKFxuICBkYXRhOiBCdWZmZXIsXG4gIHJlbWFpbmRlcjogc3RyaW5nLFxuICBkZWNvZGVyOiBTdHJpbmdEZWNvZGVyLFxuICBsb2c6IChtZXNzYWdlOiBzdHJpbmcpID0+IHZvaWRcbik6IHN0cmluZyB7XG4gIGxldCBzdHIgPSBkZWNvZGVyLndyaXRlKGRhdGEpO1xuICBsZXQgbGluZXMgPSAocmVtYWluZGVyICsgc3RyKS5zcGxpdChcIlxcblwiKTtcblxuICAvLyBQcm9jZXNzIGFsbCBsaW5lcyBleGNlcHQgdGhlIGxhc3Qgb25lLCB3aGljaCBtaWdodCBiZSBpbmNvbXBsZXRlXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgbG9nKGxpbmVzW2ldKTtcbiAgfVxuXG4gIHJldHVybiBsaW5lcy5wb3AoKSA/PyBcIlwiOyAvLyBSZXR1cm4gdGhlIGxhc3QgKHBvdGVudGlhbGx5IGluY29tcGxldGUpIGxpbmVcbn1cbiJdfQ==