export interface Bundle {
    directory: string;
    hash: string;
    outfilePath: string;
    sourcemapPath: string;
    /**
     * A list of files that were used to create the bundle (directly or indirectly).
     * If none of the listed files have been modified since the last bundle, it's *probably* safe to reuse the bundle.
     *
     * Note: this isn't fully reliable since there can be edge cases where none of the files have been modified
     * but a different bundle would be generated by esbuild. See https://github.com/evanw/esbuild/issues/673
     */
    inputFiles: string[];
    time: Date;
}
/**
 * Bundles a javascript entrypoint into a single file.
 * @param entrypoint The javascript entrypoint
 * @param outputDir Defaults to `${entrypoint}.bundle`
 * @param external external packages
 * @returns Bundle information
 */
export declare function createBundle(entrypoint: string, external?: string[], outputDir?: string): Bundle;
export interface SourceMap {
    sourceRoot?: string;
    sources: string[];
    sourcesContent: string[];
    mappings: string;
}
/**
 * Takes a bundled sourcemap and does the following fixes:
 * - Normalizes paths in sources and sourceRoot
 * - Removes duplicate sources and sourcesContent
 * - Updates mappings to reflect the new source indices
 *
 * The duplicate sources come from esbuild's strange handling of multiple files being bundled that point to the same source (e.g. inflights that point to one .w file)
 * See https://github.com/evanw/esbuild/issues/933
 */
export declare function fixSourcemaps(sourcemapData: SourceMap): void;
export declare function filesModifiedSince(filePaths: string[], directory: string, dateTime: Date): Promise<string[]>;
export declare function isBundleInvalidated(entrypoint: string, bundle: Bundle, log?: (msg: string) => void): Promise<boolean>;
