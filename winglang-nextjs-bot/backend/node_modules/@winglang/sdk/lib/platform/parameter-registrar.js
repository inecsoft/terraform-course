"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveValueFromPath = exports.ParameterRegistrar = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const ajv_1 = __importDefault(require("ajv"));
const constructs_1 = require("constructs");
const util_1 = require("./util");
const std_1 = require("../std");
/**
 * Parameter Registrar
 *
 * This class is used to register and lookup parameter values.
 */
class ParameterRegistrar extends constructs_1.Construct {
    constructor(scope, id) {
        super(scope, id);
        /** Cache for parameter lookups */
        this.parameterValueByPath = {};
        /** List of all registered parameter schemas */
        this.parameterSchemas = [];
        /** @internal */
        this._rawParameters = (0, util_1.loadPlatformSpecificValues)();
        std_1.Node.of(this).hidden = true;
    }
    /**
     * Retrieve a parameter value by its path
     *
     * @param path the path of the parameter
     * @returns the value of the parameter
     */
    value(path) {
        if (this.parameterValueByPath[path] === undefined) {
            // attempt to read the value from the raw parameters, then cache it
            this.parameterValueByPath[path] = resolveValueFromPath(this._rawParameters, path);
        }
        return this.parameterValueByPath[path];
    }
    /**
     * Read parameters
     *
     * @param options options for reading parameters
     * @returns the schema as a string
     */
    read(options) {
        if (options?.schema) {
            this.addSchema(options.schema);
            const fields = (0, util_1.extractFieldsFromSchema)(options.schema._rawSchema // If a JsonSchema object is passed in, extract raw schema from it
                ? options.schema._rawSchema
                : options.schema);
            return (0, util_1.filterParametersBySchema)(fields, this._rawParameters);
        }
        return this._rawParameters;
    }
    /**
     * Add parameter schema to registrar
     *
     * @param schema schema to add to the registrar
     */
    addSchema(schema) {
        // If a JsonSchema object is passed in, extract the raw schema from it
        const schemaToAdd = schema._rawSchema ? schema._rawSchema : schema;
        if (!this.parameterSchemas.includes(schemaToAdd)) {
            this.parameterSchemas.push(schemaToAdd);
        }
    }
    /**
     * Helper method to add a parameter schema at a given path.
     * This method will nest the schema under the given path, making it easier to nest schemas.
     *
     * @param schema the schema to add
     * @param path the path to nest the schema under
     * @param recursiveRequire whether or not to require all the nested properties
     */
    addSchemaAtPath(schema, path, recursiveRequire = false) {
        this.addSchema(this._nestSchemaUnderPath(schema, path, recursiveRequire));
    }
    /**
     * This is a helper method to nest a schema under a path.
     *
     * I.E. if you have a json schema that looks like this:
     * { type: "object", properties: { foo: { type: "string" } } }
     *
     * And we want to nest it under the path "bar/baz", then this method will return:
     * { type: "object", properties: { bar: { type: "object", properties: { baz: { type: "object", properties: { foo: { type: "string" } } } } } } }
     *
     * making it easier to nest schemas under paths, without writing out the object boilerplate.
     *
     * @internal
     */
    _nestSchemaUnderPath(schema, path, recursiveRequire = false) {
        const parts = path.split("/");
        if (parts.length === 0 || path === "") {
            // base case just return the schema
            return schema;
        }
        const currentKey = parts[0];
        // Create and return the schema
        return {
            type: "object",
            properties: {
                // recurse for the next part of the path
                [currentKey]: this._nestSchemaUnderPath(schema, parts.slice(1).join("/"), recursiveRequire),
            },
            required: recursiveRequire ? [currentKey] : [],
        };
    }
    /**
     * @internal
     */
    _preSynthesize() {
        if (this.parameterSchemas.length === 0) {
            return;
        }
        const platformParameterSchema = {
            allOf: [...this.parameterSchemas],
        };
        const ajv = new ajv_1.default({ allErrors: true });
        const validator = ajv.compile(platformParameterSchema);
        const valid = validator(this._rawParameters);
        if (!valid) {
            throw new Error(`Parameter validation errors:\n- ${validator.errors
                ?.map((error) => error.message)
                .join("\n- ")}

(hint: make sure to use --values to provide the required parameters file)
        `);
        }
    }
}
exports.ParameterRegistrar = ParameterRegistrar;
_a = JSII_RTTI_SYMBOL_1;
ParameterRegistrar[_a] = { fqn: "@winglang/sdk.platform.ParameterRegistrar", version: "0.0.0" };
/**
 * Retrieves a value from an object using a given path
 *
 * @param rawParameters the object to retrieve the value from
 * @param path the path to the value (I.E. "foo/bar/baz")
 * @internal
 */
function resolveValueFromPath(rawParameters, path) {
    if (!rawParameters) {
        return undefined;
    }
    const pathParts = path.split("/");
    if (pathParts.length === 1) {
        return rawParameters[pathParts[0]];
    }
    // recurse
    const nextPath = pathParts.slice(1).join("/");
    return resolveValueFromPath(rawParameters[pathParts[0]], nextPath);
}
exports.resolveValueFromPath = resolveValueFromPath;
//# sourceMappingURL=data:application/json;base64,