/**
 * Creates a JSON object from a comma-separated list of values.
 * Where the key is the path and the value is the value.
 *
 * I.E. "foo/bar=123,foo/baz=456" would result in:
 * {
 * "foo": {
 *  "bar": "123",
 *  "baz": "456"
 *  }
 * }
 *
 * @param values a comma-separated list of values
 * @returns a JSON object with all values
 */
export declare function parseValuesObjectFromString(values: string): any;
/**
 * Extracts all fields from a JSON schema.
 *
 * @param schema the schema to extract fields from
 * @returns a set of all fields in the schema
 */
export declare function extractFieldsFromSchema(schema: any): Set<string>;
export declare function filterParametersBySchema(fields: Set<string>, parameters: any): any;
/**
 * Loads platform-specific values that were passed in via CLI arguments and
 * from a values file. CLI arguments take precedence over values file.
 *
 * I.E. if the cli provided values such as --value "foo/bar=123" and the values file
 * contained:
 *
 * ```yaml
 * foo:
 *  bar: 456
 *  baz: 789
 * ```
 *
 * The resulting values object would be:
 * {
 *  "foo": {
 *    "bar": "123",
 *    "baz": "789"
 *  }
 * }
 *
 * @returns a JSON object with all platform-specific values
 */
export declare function loadPlatformSpecificValues(): any;
/**
 * Scans a directory for any platform files.
 *
 * @param dir the directory to scan
 * @returns the path to any platform files
 */
export declare function scanDirForPlatformFile(dir: string): string[];
