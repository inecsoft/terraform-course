"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.App = exports.SIMULATOR_FILE_PATH = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const api_1 = require("./api");
const bucket_1 = require("./bucket");
const container_1 = require("./container");
const counter_1 = require("./counter");
const domain_1 = require("./domain");
const endpoint_1 = require("./endpoint");
const event_mapping_1 = require("./event-mapping");
const function_1 = require("./function");
const on_deploy_1 = require("./on-deploy");
const policy_1 = require("./policy");
const queue_1 = require("./queue");
const redis_1 = require("./redis");
const resource_1 = require("./resource");
const schedule_1 = require("./schedule");
const secret_1 = require("./secret");
const service_1 = require("./service");
const state_1 = require("./state");
const table_1 = require("./table");
const test_runner_1 = require("./test-runner");
const tokens_1 = require("./tokens");
const topic_1 = require("./topic");
const website_1 = require("./website");
const cloud_1 = require("../cloud");
const constants_1 = require("../constants");
const core = __importStar(require("../core"));
const app_1 = require("../core/app");
const tokens_2 = require("../core/tokens");
const ex_1 = require("../ex");
const tokens_3 = require("../simulator/tokens");
const std_1 = require("../std");
/**
 * Path of the simulator configuration file in every .wsim tarball.
 */
exports.SIMULATOR_FILE_PATH = "simulator.json";
const SIMULATOR_CLASS_DATA = {
    [cloud_1.API_FQN]: "Api",
    [cloud_1.BUCKET_FQN]: "Bucket",
    [cloud_1.DOMAIN_FQN]: "Domain",
    [cloud_1.ENDPOINT_FQN]: "Endpoint",
    [event_mapping_1.EVENT_MAPPING_FQN]: "EventMapping",
    [cloud_1.FUNCTION_FQN]: "Function",
    [cloud_1.ON_DEPLOY_FQN]: "OnDeploy",
    [policy_1.POLICY_FQN]: "Policy",
    [cloud_1.QUEUE_FQN]: "Queue",
    [ex_1.REDIS_FQN]: "Redis",
    [cloud_1.SCHEDULE_FQN]: "Schedule",
    [cloud_1.SECRET_FQN]: "Secret",
    [cloud_1.SERVICE_FQN]: "Service",
    [state_1.STATE_FQN]: "State",
    [container_1.SIM_CONTAINER_FQN]: "Container",
    [resource_1.SIM_RESOURCE_FQN]: "Resource",
    [ex_1.TABLE_FQN]: "Table",
    [std_1.TEST_RUNNER_FQN]: "TestRunner",
    [cloud_1.TOPIC_FQN]: "Topic",
    [cloud_1.WEBSITE_FQN]: "Website",
};
/**
 * A construct that knows how to synthesize simulator resources into a
 * Wing simulator (.wsim) file.
 */
class App extends core.App {
    constructor(props) {
        // doesn't allow customize the root id- as used hardcoded in the code
        super(undefined, "root", props);
        this._target = "sim";
        this.synthed = false;
        this.outdir = props.outdir ?? ".";
        (0, tokens_2.registerTokenResolver)(new tokens_1.SimTokens());
        test_runner_1.TestRunner._createTree(this, props.rootConstruct);
    }
    /** @internal */
    _inflightClientForFqn(fqn) {
        switch (fqn) {
            case cloud_1.API_FQN:
                return require.resolve("./api.inflight");
            case cloud_1.BUCKET_FQN:
                return require.resolve("./bucket.inflight");
            case cloud_1.DOMAIN_FQN:
                return require.resolve("./domain.inflight");
            case cloud_1.ENDPOINT_FQN:
                return require.resolve("./endpoint.inflight");
            case event_mapping_1.EVENT_MAPPING_FQN:
                return require.resolve("./event-mapping.inflight");
            case cloud_1.FUNCTION_FQN:
                return require.resolve("./function.inflight");
            case cloud_1.ON_DEPLOY_FQN:
                return require.resolve("./on-deploy.inflight");
            case policy_1.POLICY_FQN:
                return require.resolve("./policy.inflight");
            case cloud_1.QUEUE_FQN:
                return require.resolve("./queue.inflight");
            case ex_1.REDIS_FQN:
                return require.resolve("./redis.inflight");
            case cloud_1.SCHEDULE_FQN:
                return require.resolve("./schedule.inflight");
            case cloud_1.SECRET_FQN:
                return require.resolve("./secret.inflight");
            case cloud_1.SERVICE_FQN:
                return require.resolve("./service.inflight");
            case state_1.STATE_FQN:
                return require.resolve("./state.inflight");
            case ex_1.TABLE_FQN:
                return require.resolve("./table.inflight");
            case std_1.TEST_RUNNER_FQN:
                return require.resolve("./test-runner.inflight");
            case cloud_1.TOPIC_FQN:
                return require.resolve("./topic.inflight");
            case cloud_1.WEBSITE_FQN:
                return require.resolve("./website.inflight");
            case container_1.SIM_CONTAINER_FQN:
                return require.resolve("./container.inflight");
            case resource_1.SIM_RESOURCE_FQN:
                return require.resolve("./resource.inflight");
        }
        return undefined;
    }
    typeForFqn(fqn) {
        switch (fqn) {
            case cloud_1.API_FQN:
                return api_1.Api;
            case cloud_1.BUCKET_FQN:
                return bucket_1.Bucket;
            case cloud_1.COUNTER_FQN:
                return counter_1.Counter;
            case cloud_1.DOMAIN_FQN:
                return domain_1.Domain;
            case cloud_1.ENDPOINT_FQN:
                return endpoint_1.Endpoint;
            // EVENT_MAPPING_FQN skipped - it's not a multi-target construct
            case cloud_1.FUNCTION_FQN:
                return function_1.Function;
            case cloud_1.ON_DEPLOY_FQN:
                return on_deploy_1.OnDeploy;
            case policy_1.POLICY_FQN:
                return policy_1.Policy;
            case cloud_1.QUEUE_FQN:
                return queue_1.Queue;
            case ex_1.REDIS_FQN:
                return redis_1.Redis;
            case cloud_1.SCHEDULE_FQN:
                return schedule_1.Schedule;
            case cloud_1.SECRET_FQN:
                return secret_1.Secret;
            case cloud_1.SERVICE_FQN:
                return service_1.Service;
            case state_1.STATE_FQN:
                return state_1.State;
            case ex_1.TABLE_FQN:
                return table_1.Table;
            case std_1.TEST_RUNNER_FQN:
                return test_runner_1.TestRunner;
            case cloud_1.TOPIC_FQN:
                return topic_1.Topic;
            case cloud_1.WEBSITE_FQN:
                return website_1.Website;
            // SIM_CONTAINER_FQN skipped - it's not a multi-target construct
            // SIM_RESOURCE_FQN skipped - it's not a multi-target construct
        }
        return undefined;
    }
    /**
     * Synthesize the app. This creates a tree.json file and a .wsim file in the
     * app's outdir, and returns a path to the .wsim directory.
     */
    synth() {
        if (this.synthed) {
            return this.outdir;
        }
        fs.mkdirSync(this.outdir, { recursive: true });
        // call preSynthesize() on every construct in the tree
        (0, app_1.preSynthesizeAllConstructs)(this);
        if (this._synthHooks?.preSynthesize) {
            this._synthHooks.preSynthesize.forEach((hook) => hook(this));
        }
        // write simulator.json file into workdir
        const spec = this.synthSimulatorFile(this.outdir);
        this.addTokenConnections(spec);
        // write tree.json file into workdir
        core.synthesizeTree(this, this.outdir);
        // write `outdir/connections.json`
        core.Connections.of(this).synth(this.outdir);
        this.synthed = true;
        if (this._synthHooks?.postSynthesize) {
            this._synthHooks.postSynthesize.forEach((hook) => hook(this));
        }
        return this.outdir;
    }
    /**
     * Scans the app spec for token references and adds connections to reflect
     * this relationship.
     *
     * @param spec The simulator spec
     */
    addTokenConnections(spec) {
        const map = {};
        for (const c of this.node.findAll()) {
            map[c.node.path] = c;
        }
        for (const [from, resource] of Object.entries(spec.resources)) {
            (0, tokens_3.resolveTokens)(resource.props, (to) => {
                // skip references to the "handle" of the target resource because it would be reflected by
                // the connections created by inflight method calls.
                if (to.attr !== "handle") {
                    core.Connections.of(this).add({
                        source: map[from],
                        target: map[to.path],
                        targetOp: to.attr,
                        name: "<ref>",
                    });
                }
                return "<TOKEN>"; // <-- not used
            });
        }
    }
    synthSimulatorFile(outdir) {
        const resources = {};
        for (const r of new core.DependencyGraph(this.node).topology()) {
            if ((0, resource_1.isSimulatorResource)(r)) {
                const deps = r.node.dependencies.map((d) => d.node.path);
                resources[r.node.path] = {
                    ...r.toSimulator(),
                    path: r.node.path,
                    addr: r.node.addr,
                    deps: deps.length === 0 ? undefined : deps,
                    attrs: undefined,
                };
            }
        }
        const types = {};
        for (const [fqn, className] of Object.entries(SIMULATOR_CLASS_DATA)) {
            const sourcePath = this._inflightClientForFqn(fqn);
            if (!sourcePath) {
                throw new Error(`No source path for ${fqn}`);
            }
            types[fqn] = {
                className,
                sourcePath,
            };
        }
        const contents = {
            types,
            resources,
            sdkVersion: constants_1.SDK_VERSION,
        };
        // write simulator.json file
        fs.writeFileSync(path.join(outdir, exports.SIMULATOR_FILE_PATH), JSON.stringify(contents, undefined, 2), { encoding: "utf8" });
        return contents;
    }
}
exports.App = App;
//# sourceMappingURL=data:application/json;base64,