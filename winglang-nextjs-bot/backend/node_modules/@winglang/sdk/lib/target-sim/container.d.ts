import { Construct } from "constructs";
import { ISimulatorResource } from "./resource";
import { LiftMap } from "../core";
import { INFLIGHT_SYMBOL } from "../core/types";
import { ToSimulatorOutput } from "../simulator";
import { IInflightHost, Resource } from "../std";
export declare const SIM_CONTAINER_FQN: string;
export declare const HOST_PORT_ATTR = "host_port";
/**
 * Initialization properties for `sim.Container`.
 */
export interface ContainerProps {
    /**
     * A name for the container.
     */
    readonly name: string;
    /**
     * A name of a public Docker image to pull and run or a path to a local directory with a `Dockerfile`.
     */
    readonly image: string;
    /**
     * Internal container port to expose.
     * @default - no port exposed
     */
    readonly containerPort?: number;
    /**
     * Environment variables to set in the container.
     * @default {}
     */
    readonly env?: Record<string, string>;
    /**
     * Volume mount points.
     * @default []
     * @example ['/host:/container']
     */
    readonly volumes?: string[];
    /**
     * Container arguments
     * @default []
     */
    readonly args?: string[];
    /**
     * Docker network to use for the container - such as 'host', 'bridge', etc.
     * @link https://docs.docker.com/network.
     * @default - default docker network
     * @example 'host'
     */
    readonly network?: string;
    /**
     * Container entrypoint
     * @default - default image entrypoint
     */
    readonly entrypoint?: string;
    /**
     * A glob of local files to consider as input sources for the container, relative to the build
     * context directory.
     *
     * @default - all files
     */
    readonly sourcePattern?: string;
    /**
     * An explicit source hash that represents the container source. if not set, and `sourcePattern`
     * is set, the hash will be calculated based on the content of the source files.
     * @default - calculated based on the source files
     */
    readonly sourceHash?: string;
}
/**
 * Represents a container running in the Wing Simulator.
 *
 * @inflight `@winglang/sdk.sim.IContainerClient`
 */
export declare class Container extends Resource implements ISimulatorResource {
    private readonly props;
    /** @internal */
    [INFLIGHT_SYMBOL]?: IContainerClient;
    private readonly imageTag;
    /**
     * A token that resolves to the host port of this container.
     */
    readonly hostPort?: string;
    constructor(scope: Construct, id: string, props: ContainerProps);
    toSimulator(): ToSimulatorOutput;
    onLift(host: IInflightHost, ops: string[]): void;
    /** @internal */
    get _liftMap(): LiftMap;
    /** @internal */
    _toInflight(): string;
}
/**
 * List of inflight operations available for `sim.Container`.
 * @internal
 */
export declare enum ContainerInflightMethods {
}
/**
 * Inflight interface for `Redis`.
 */
export interface IContainerClient {
}
