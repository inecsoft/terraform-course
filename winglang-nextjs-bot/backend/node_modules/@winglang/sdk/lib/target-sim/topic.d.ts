import { Construct } from "constructs";
import { Policy } from "./policy";
import { ISimulatorResource } from "./resource";
import * as cloud from "../cloud";
import { LiftMap } from "../core";
import { ToSimulatorOutput } from "../simulator";
import { IInflightHost } from "../std";
/**
 * Simulator implementation of `cloud.Topic`
 *
 * @inflight `@winglang/sdk.cloud.ITopicClient`
 */
export declare class Topic extends cloud.Topic implements ISimulatorResource {
    readonly policy: Policy;
    constructor(scope: Construct, id: string, props?: cloud.TopicProps);
    onMessage(inflight: cloud.ITopicOnMessageHandler, props?: cloud.TopicOnMessageOptions): cloud.Function;
    subscribeQueue(queue: cloud.Queue): void;
    onLift(host: IInflightHost, ops: string[]): void;
    /** @internal */
    _toInflight(): string;
    /** @internal */
    get _liftMap(): LiftMap;
    toSimulator(): ToSimulatorOutput;
}
/**
 * Utility class to work with topic message handlers.
 */
export declare class TopicOnMessageHandler {
    /**
     * Converts a `cloud.ITopicOnMessageHandler` to a `cloud.IFunctionHandler`
     * @param handler the handler to convert
     * @returns the function handler
     */
    static toFunctionHandler(handler: cloud.ITopicOnMessageHandler): cloud.IFunctionHandler;
}
