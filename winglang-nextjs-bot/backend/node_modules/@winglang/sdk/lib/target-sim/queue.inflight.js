"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Queue = void 0;
const cloud_1 = require("../cloud");
const simulator_1 = require("../simulator/simulator");
const std_1 = require("../std");
class Queue {
    constructor(props) {
        this.messages = new Array();
        this.subscribers = new Array();
        this.timeoutSeconds = props.timeout;
        this.retentionPeriod = props.retentionPeriod;
        this.dlq = props.dlq;
        this.processLoop = runEvery(100, async () => this.processMessages()); // every 0.1 seconds
    }
    get context() {
        if (!this._context) {
            throw new Error("Cannot access context during class construction");
        }
        return this._context;
    }
    async init(context) {
        this._context = context;
        await this.processLoop.start();
        return {};
    }
    async cleanup() {
        await this.processLoop.stop();
    }
    async save() { }
    async plan() {
        return simulator_1.UpdatePlan.AUTO;
    }
    async addEventSubscription(subscriber, subscriptionProps) {
        const s = {
            functionHandle: subscriber,
            ...subscriptionProps,
        };
        this.subscribers.push(s);
    }
    async removeEventSubscription(subscriber) {
        const index = this.subscribers.findIndex((s) => s.functionHandle === subscriber);
        if (index >= 0) {
            this.subscribers.splice(index, 1);
        }
    }
    // TODO: enforce maximum queue message size?
    async push(...messages) {
        return this.context.withTrace({
            message: `Push (messages=${messages}).`,
            activity: async () => {
                if (messages.includes("")) {
                    throw new Error("Empty messages are not allowed");
                }
                for (const message of messages) {
                    this.messages.push(new QueueMessage(this.retentionPeriod, cloud_1.DEFAULT_DELIVERY_ATTEMPTS, message));
                }
            },
        });
    }
    async purge() {
        return this.context.withTrace({
            message: `Purge ().`,
            activity: async () => {
                this.messages.length = 0;
            },
        });
    }
    async approxSize() {
        return this.context.withTrace({
            message: `ApproxSize ().`,
            activity: async () => {
                return this.messages.length;
            },
        });
    }
    async pop() {
        return this.context.withTrace({
            message: `Pop ().`,
            activity: async () => {
                // extract a random message from the queue
                const message = this.messages.splice(Math.floor(Math.random() * this.messages.length), 1)[0];
                return message?.payload;
            },
        });
    }
    async processMessages() {
        let processedMessages = false;
        do {
            processedMessages = false;
            // Remove messages that have expired
            const currentTime = new Date();
            for (let index = this.messages.length - 1; index >= 0; index--) {
                const message = this.messages[index];
                if (message.retentionTimeout < currentTime) {
                    await this.context.withTrace({
                        activity: async () => this.messages.splice(index, 1),
                        message: `Removing expired message (message=${message.payload}).`,
                    });
                }
            }
            // Randomize the order of subscribers to avoid user code making
            // assumptions on the order that subscribers process messages.
            for (const subscriber of new RandomArrayIterator(this.subscribers)) {
                // Extract random messages from the queue
                const messages = new Array();
                for (let i = 0; i < subscriber.batchSize; i++) {
                    const message = this.messages.splice(Math.floor(Math.random() * this.messages.length), 1)[0];
                    if (message) {
                        messages.push(message);
                    }
                }
                const messagesPayload = messages.map((m) => m.payload);
                if (messagesPayload.length === 0) {
                    continue;
                }
                const fnClient = this.context.getClient(subscriber.functionHandle);
                if (!fnClient) {
                    throw new Error("No function client found");
                }
                // If the function we picked is at capacity, keep the messages in the queue
                const hasWorkers = await fnClient.hasAvailableWorkers();
                if (!hasWorkers) {
                    this.messages.push(...messages);
                    continue;
                }
                this.context.addTrace({
                    type: std_1.TraceType.RESOURCE,
                    level: std_1.LogLevel.VERBOSE,
                    data: {
                        message: `Sending messages (messages=${JSON.stringify(messagesPayload)}, subscriber=${subscriber.functionHandle}).`,
                    },
                    sourcePath: this.context.resourcePath,
                    sourceType: cloud_1.QUEUE_FQN,
                    timestamp: new Date().toISOString(),
                });
                // we don't use invokeAsync here because we want to wait for the function to finish
                // and requeue the messages if it fails
                void fnClient
                    .invoke(JSON.stringify({ messages: messages }))
                    .then((result) => {
                    if (this.dlq && result) {
                        const errorList = JSON.parse(result);
                        let retriesMessages = [];
                        for (const msg of errorList) {
                            if (msg.remainingDeliveryAttempts < this.dlq.maxDeliveryAttempts) {
                                msg.remainingDeliveryAttempts++;
                                retriesMessages.push(msg);
                            }
                            else {
                                let dlq = this.context.getClient(this.dlq.dlqHandler);
                                void dlq.push(msg.payload).catch((err) => {
                                    this.context.addTrace({
                                        type: std_1.TraceType.RESOURCE,
                                        level: std_1.LogLevel.ERROR,
                                        data: {
                                            message: `Pushing messages to the dead-letter queue generates an error -> ${err}`,
                                        },
                                        sourcePath: this.context.resourcePath,
                                        sourceType: cloud_1.QUEUE_FQN,
                                        timestamp: new Date().toISOString(),
                                    });
                                });
                            }
                        }
                        this.messages.push(...retriesMessages);
                    }
                })
                    .catch((err) => {
                    // If the function is at a concurrency limit, pretend we just didn't call it
                    if (err.message ===
                        "Too many requests, the function has reached its concurrency limit.") {
                        this.messages.push(...messages);
                        return;
                    }
                    // If the function returns an error, put the message back on the queue after timeout period
                    this.context.addTrace({
                        data: {
                            message: `Subscriber error - returning ${messagesPayload.length} messages to queue: ${err.message}`,
                        },
                        sourcePath: this.context.resourcePath,
                        sourceType: cloud_1.QUEUE_FQN,
                        type: std_1.TraceType.RESOURCE,
                        level: std_1.LogLevel.ERROR,
                        timestamp: new Date().toISOString(),
                    });
                    this.pushMessagesBackToQueue(messages);
                });
                processedMessages = true;
            }
        } while (processedMessages);
    }
    pushMessagesBackToQueue(messages) {
        setTimeout(() => {
            // Don't push back messages with retention timeouts that have expired
            const retainedMessages = messages.filter((message) => message.retentionTimeout > new Date());
            this.messages.push(...retainedMessages);
            this.context.addTrace({
                data: {
                    message: `${retainedMessages.length} messages pushed back to queue after visibility timeout.`,
                },
                sourcePath: this.context.resourcePath,
                sourceType: cloud_1.QUEUE_FQN,
                type: std_1.TraceType.RESOURCE,
                level: std_1.LogLevel.WARNING,
                timestamp: new Date().toISOString(),
            });
        }, this.timeoutSeconds * 1000);
    }
}
exports.Queue = Queue;
class QueueMessage {
    constructor(retentionPeriod, remainingDeliveryAttempts, message) {
        const currentTime = new Date();
        currentTime.setSeconds(retentionPeriod + currentTime.getSeconds());
        this.retentionTimeout = currentTime;
        this.payload = message;
        this.remainingDeliveryAttempts = remainingDeliveryAttempts;
    }
}
class RandomArrayIterator {
    constructor(values) {
        this.values = values;
        this.length = this.values.length;
    }
    next() {
        if (this.length === 0) {
            return { done: true, value: undefined };
        }
        const i = Math.floor(Math.random() * this.length);
        const j = --this.length;
        const value = this.values[i];
        this.values[i] = this.values[j];
        this.values[j] = value;
        return { value };
    }
    [Symbol.iterator]() {
        return this;
    }
}
/**
 * Runs an asynchronous function every `interval` milliseconds.
 * If the function takes longer than `interval` to run, it will be run again immediately.
 * Otherwise, it will wait until `interval` milliseconds have passed before running again.
 * @param interval The interval in milliseconds
 * @param fn The function to run
 * @returns A controller that can be used to stop the loop
 */
function runEvery(interval, fn) {
    let keepRunning = true;
    let resolveStopPromise;
    let stopCalled = false; // in case it is called multiple times
    let stopPromise = new Promise((resolve) => {
        resolveStopPromise = resolve;
    });
    async function loop() {
        while (keepRunning) {
            const startTime = Date.now();
            try {
                await fn();
            }
            catch (err) {
                console.error(err);
                keepRunning = false;
            }
            const endTime = Date.now();
            const elapsedTime = endTime - startTime;
            await new Promise((resolve) => setTimeout(resolve, Math.max(interval - elapsedTime, 0)));
        }
        resolveStopPromise(); // resolve the promise when the loop exits
    }
    const controller = {
        async stop() {
            if (!stopCalled) {
                stopCalled = true;
                keepRunning = false;
                await stopPromise; // wait for the loop to finish
            }
        },
        async start() {
            void loop();
        },
    };
    return controller;
}
//# sourceMappingURL=data:application/json;base64,