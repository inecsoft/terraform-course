"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Redis = void 0;
const ioredis_1 = __importDefault(require("ioredis"));
const ex_1 = require("../ex");
const simulator_1 = require("../simulator/simulator");
class Redis extends ex_1.RedisClientBase {
    constructor(props) {
        super();
        this.props = props;
        this.connectionUrl = undefined;
        this.isCleanedUp = false;
    }
    async init(_context) {
        try {
            if (this.isCleanedUp) {
                return {};
            }
            // redis url based on host port
            this.connectionUrl = `redis://0.0.0.0:${this.props.port}`;
            return {};
        }
        catch (e) {
            throw Error(`Error setting up Redis resource simulation (${e})
      - Make sure you have docker installed and running`);
        }
    }
    async cleanup() {
        this.isCleanedUp = true;
        // disconnect from the redis server
        await this.connection?.quit();
        this.connection?.disconnect();
    }
    async save() { }
    async plan() {
        return simulator_1.UpdatePlan.AUTO;
    }
    async rawClient() {
        if (this.connection) {
            return this.connection;
        }
        if (this.connectionUrl) {
            this.connection = new ioredis_1.default(this.connectionUrl);
            return this.connection;
        }
        throw new Error("Redis server not initialized");
    }
    async url() {
        if (this.connectionUrl != undefined) {
            return this.connectionUrl;
        }
        else {
            throw new Error("Redis server not initialized");
        }
    }
}
exports.Redis = Redis;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVkaXMuaW5mbGlnaHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGFyZ2V0LXNpbS9yZWRpcy5pbmZsaWdodC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxzREFBOEI7QUFFOUIsOEJBQXdDO0FBQ3hDLHNEQUlnQztBQUVoQyxNQUFhLEtBQ1gsU0FBUSxvQkFBZTtJQU92QixZQUFvQyxLQUFrQjtRQUNwRCxLQUFLLEVBQUUsQ0FBQztRQUQwQixVQUFLLEdBQUwsS0FBSyxDQUFhO1FBSjlDLGtCQUFhLEdBQVksU0FBUyxDQUFDO1FBRW5DLGdCQUFXLEdBQUcsS0FBSyxDQUFDO0lBSTVCLENBQUM7SUFFTSxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQTJCO1FBQzNDLElBQUksQ0FBQztZQUNILElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO2dCQUNyQixPQUFPLEVBQUUsQ0FBQztZQUNaLENBQUM7WUFFRCwrQkFBK0I7WUFDL0IsSUFBSSxDQUFDLGFBQWEsR0FBRyxtQkFBbUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUUxRCxPQUFPLEVBQUUsQ0FBQztRQUNaLENBQUM7UUFBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1lBQ1gsTUFBTSxLQUFLLENBQUMsK0NBQStDLENBQUM7d0RBQ1YsQ0FBQyxDQUFDO1FBQ3RELENBQUM7SUFDSCxDQUFDO0lBRU0sS0FBSyxDQUFDLE9BQU87UUFDbEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFDeEIsbUNBQW1DO1FBQ25DLE1BQU0sSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLEVBQUUsQ0FBQztRQUM5QixJQUFJLENBQUMsVUFBVSxFQUFFLFVBQVUsRUFBRSxDQUFDO0lBQ2hDLENBQUM7SUFFTSxLQUFLLENBQUMsSUFBSSxLQUFtQixDQUFDO0lBRTlCLEtBQUssQ0FBQyxJQUFJO1FBQ2YsT0FBTyxzQkFBVSxDQUFDLElBQUksQ0FBQztJQUN6QixDQUFDO0lBRU0sS0FBSyxDQUFDLFNBQVM7UUFDcEIsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDcEIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQ3pCLENBQUM7UUFFRCxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUN2QixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksaUJBQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDbEQsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQ3pCLENBQUM7UUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLDhCQUE4QixDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVNLEtBQUssQ0FBQyxHQUFHO1FBQ2QsSUFBSSxJQUFJLENBQUMsYUFBYSxJQUFJLFNBQVMsRUFBRSxDQUFDO1lBQ3BDLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUM1QixDQUFDO2FBQU0sQ0FBQztZQUNOLE1BQU0sSUFBSSxLQUFLLENBQUMsOEJBQThCLENBQUMsQ0FBQztRQUNsRCxDQUFDO0lBQ0gsQ0FBQztDQUNGO0FBN0RELHNCQTZEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBJb1JlZGlzIGZyb20gXCJpb3JlZGlzXCI7XG5pbXBvcnQgeyBSZWRpc0F0dHJpYnV0ZXMsIFJlZGlzU2NoZW1hIH0gZnJvbSBcIi4vc2NoZW1hLXJlc291cmNlc1wiO1xuaW1wb3J0IHsgUmVkaXNDbGllbnRCYXNlIH0gZnJvbSBcIi4uL2V4XCI7XG5pbXBvcnQge1xuICBJU2ltdWxhdG9yQ29udGV4dCxcbiAgSVNpbXVsYXRvclJlc291cmNlSW5zdGFuY2UsXG4gIFVwZGF0ZVBsYW4sXG59IGZyb20gXCIuLi9zaW11bGF0b3Ivc2ltdWxhdG9yXCI7XG5cbmV4cG9ydCBjbGFzcyBSZWRpc1xuICBleHRlbmRzIFJlZGlzQ2xpZW50QmFzZVxuICBpbXBsZW1lbnRzIElTaW11bGF0b3JSZXNvdXJjZUluc3RhbmNlXG57XG4gIHByaXZhdGUgY29ubmVjdGlvblVybD86IHN0cmluZyA9IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSBjb25uZWN0aW9uPzogSW9SZWRpcztcbiAgcHJpdmF0ZSBpc0NsZWFuZWRVcCA9IGZhbHNlO1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IHByb3BzOiBSZWRpc1NjaGVtYSkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgaW5pdChfY29udGV4dDogSVNpbXVsYXRvckNvbnRleHQpOiBQcm9taXNlPFJlZGlzQXR0cmlidXRlcz4ge1xuICAgIHRyeSB7XG4gICAgICBpZiAodGhpcy5pc0NsZWFuZWRVcCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgICB9XG5cbiAgICAgIC8vIHJlZGlzIHVybCBiYXNlZCBvbiBob3N0IHBvcnRcbiAgICAgIHRoaXMuY29ubmVjdGlvblVybCA9IGByZWRpczovLzAuMC4wLjA6JHt0aGlzLnByb3BzLnBvcnR9YDtcblxuICAgICAgcmV0dXJuIHt9O1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IEVycm9yKGBFcnJvciBzZXR0aW5nIHVwIFJlZGlzIHJlc291cmNlIHNpbXVsYXRpb24gKCR7ZX0pXG4gICAgICAtIE1ha2Ugc3VyZSB5b3UgaGF2ZSBkb2NrZXIgaW5zdGFsbGVkIGFuZCBydW5uaW5nYCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFzeW5jIGNsZWFudXAoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdGhpcy5pc0NsZWFuZWRVcCA9IHRydWU7XG4gICAgLy8gZGlzY29ubmVjdCBmcm9tIHRoZSByZWRpcyBzZXJ2ZXJcbiAgICBhd2FpdCB0aGlzLmNvbm5lY3Rpb24/LnF1aXQoKTtcbiAgICB0aGlzLmNvbm5lY3Rpb24/LmRpc2Nvbm5lY3QoKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzYXZlKCk6IFByb21pc2U8dm9pZD4ge31cblxuICBwdWJsaWMgYXN5bmMgcGxhbigpIHtcbiAgICByZXR1cm4gVXBkYXRlUGxhbi5BVVRPO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHJhd0NsaWVudCgpOiBQcm9taXNlPGFueT4ge1xuICAgIGlmICh0aGlzLmNvbm5lY3Rpb24pIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbm5lY3Rpb247XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY29ubmVjdGlvblVybCkge1xuICAgICAgdGhpcy5jb25uZWN0aW9uID0gbmV3IElvUmVkaXModGhpcy5jb25uZWN0aW9uVXJsKTtcbiAgICAgIHJldHVybiB0aGlzLmNvbm5lY3Rpb247XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiUmVkaXMgc2VydmVyIG5vdCBpbml0aWFsaXplZFwiKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyB1cmwoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBpZiAodGhpcy5jb25uZWN0aW9uVXJsICE9IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdGlvblVybDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVkaXMgc2VydmVyIG5vdCBpbml0aWFsaXplZFwiKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==