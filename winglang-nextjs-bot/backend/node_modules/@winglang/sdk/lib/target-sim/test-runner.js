"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestRunner = void 0;
const tokens_1 = require("./tokens");
const util_1 = require("./util");
const std = __importStar(require("../std"));
/**
 * Simulator implementation of `cloud.TestRunner`.
 *
 * @inflight `@winglang/sdk.cloud.ITestRunnerClient`
 */
class TestRunner extends std.TestRunner {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
    }
    toSimulator() {
        const tests = this.getTestFunctionHandles();
        const props = {
            tests,
        };
        return {
            type: std.TEST_RUNNER_FQN,
            props,
        };
    }
    onLift(host, ops) {
        (0, util_1.bindSimulatorResource)("test-runner", this, host, ops);
        super.onLift(host, ops);
    }
    /** @internal */
    _preSynthesize() {
        // add a dependency on each test function
        for (const test of this.findTests()) {
            if (test._fn) {
                this.node.addDependency(test._fn);
            }
        }
        super._preSynthesize();
    }
    getTestFunctionHandles() {
        const handles = {};
        for (const test of this.findTests()) {
            if (test._fn) {
                handles[test.node.path] = (0, tokens_1.simulatorHandleToken)(test._fn);
            }
        }
        return handles;
    }
    /** @internal */
    _toInflight() {
        return (0, util_1.makeSimulatorJsClient)("test-runner", this);
    }
}
exports.TestRunner = TestRunner;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC1ydW5uZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGFyZ2V0LXNpbS90ZXN0LXJ1bm5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUdBLHFDQUFnRDtBQUNoRCxpQ0FBc0U7QUFFdEUsNENBQThCO0FBRzlCOzs7O0dBSUc7QUFDSCxNQUFhLFVBQVcsU0FBUSxHQUFHLENBQUMsVUFBVTtJQUM1QyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLFFBQTZCLEVBQUU7UUFDdkUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVNLFdBQVc7UUFDaEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUM7UUFDNUMsTUFBTSxLQUFLLEdBQXFCO1lBQzlCLEtBQUs7U0FDTixDQUFDO1FBQ0YsT0FBTztZQUNMLElBQUksRUFBRSxHQUFHLENBQUMsZUFBZTtZQUN6QixLQUFLO1NBQ04sQ0FBQztJQUNKLENBQUM7SUFFTSxNQUFNLENBQUMsSUFBbUIsRUFBRSxHQUFhO1FBQzlDLElBQUEsNEJBQXFCLEVBQUMsYUFBYSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDdEQsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVELGdCQUFnQjtJQUNULGNBQWM7UUFDbkIseUNBQXlDO1FBQ3pDLEtBQUssTUFBTSxJQUFJLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUM7WUFDcEMsSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7Z0JBQ2IsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3BDLENBQUM7UUFDSCxDQUFDO1FBRUQsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFTyxzQkFBc0I7UUFDNUIsTUFBTSxPQUFPLEdBQTJCLEVBQUUsQ0FBQztRQUMzQyxLQUFLLE1BQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDO1lBQ3BDLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO2dCQUNiLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUEsNkJBQW9CLEVBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzNELENBQUM7UUFDSCxDQUFDO1FBQ0QsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztJQUVELGdCQUFnQjtJQUNULFdBQVc7UUFDaEIsT0FBTyxJQUFBLDRCQUFxQixFQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNwRCxDQUFDO0NBQ0Y7QUEvQ0QsZ0NBK0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCB7IElTaW11bGF0b3JSZXNvdXJjZSB9IGZyb20gXCIuL3Jlc291cmNlXCI7XG5pbXBvcnQgeyBUZXN0UnVubmVyU2NoZW1hIH0gZnJvbSBcIi4vc2NoZW1hLXJlc291cmNlc1wiO1xuaW1wb3J0IHsgc2ltdWxhdG9ySGFuZGxlVG9rZW4gfSBmcm9tIFwiLi90b2tlbnNcIjtcbmltcG9ydCB7IGJpbmRTaW11bGF0b3JSZXNvdXJjZSwgbWFrZVNpbXVsYXRvckpzQ2xpZW50IH0gZnJvbSBcIi4vdXRpbFwiO1xuaW1wb3J0IHsgVG9TaW11bGF0b3JPdXRwdXQgfSBmcm9tIFwiLi4vc2ltdWxhdG9yL3NpbXVsYXRvclwiO1xuaW1wb3J0ICogYXMgc3RkIGZyb20gXCIuLi9zdGRcIjtcbmltcG9ydCB7IElJbmZsaWdodEhvc3QgfSBmcm9tIFwiLi4vc3RkXCI7XG5cbi8qKlxuICogU2ltdWxhdG9yIGltcGxlbWVudGF0aW9uIG9mIGBjbG91ZC5UZXN0UnVubmVyYC5cbiAqXG4gKiBAaW5mbGlnaHQgYEB3aW5nbGFuZy9zZGsuY2xvdWQuSVRlc3RSdW5uZXJDbGllbnRgXG4gKi9cbmV4cG9ydCBjbGFzcyBUZXN0UnVubmVyIGV4dGVuZHMgc3RkLlRlc3RSdW5uZXIgaW1wbGVtZW50cyBJU2ltdWxhdG9yUmVzb3VyY2Uge1xuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogc3RkLlRlc3RSdW5uZXJQcm9wcyA9IHt9KSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XG4gIH1cblxuICBwdWJsaWMgdG9TaW11bGF0b3IoKTogVG9TaW11bGF0b3JPdXRwdXQge1xuICAgIGNvbnN0IHRlc3RzID0gdGhpcy5nZXRUZXN0RnVuY3Rpb25IYW5kbGVzKCk7XG4gICAgY29uc3QgcHJvcHM6IFRlc3RSdW5uZXJTY2hlbWEgPSB7XG4gICAgICB0ZXN0cyxcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBzdGQuVEVTVF9SVU5ORVJfRlFOLFxuICAgICAgcHJvcHMsXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBvbkxpZnQoaG9zdDogSUluZmxpZ2h0SG9zdCwgb3BzOiBzdHJpbmdbXSk6IHZvaWQge1xuICAgIGJpbmRTaW11bGF0b3JSZXNvdXJjZShcInRlc3QtcnVubmVyXCIsIHRoaXMsIGhvc3QsIG9wcyk7XG4gICAgc3VwZXIub25MaWZ0KGhvc3QsIG9wcyk7XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIHB1YmxpYyBfcHJlU3ludGhlc2l6ZSgpOiB2b2lkIHtcbiAgICAvLyBhZGQgYSBkZXBlbmRlbmN5IG9uIGVhY2ggdGVzdCBmdW5jdGlvblxuICAgIGZvciAoY29uc3QgdGVzdCBvZiB0aGlzLmZpbmRUZXN0cygpKSB7XG4gICAgICBpZiAodGVzdC5fZm4pIHtcbiAgICAgICAgdGhpcy5ub2RlLmFkZERlcGVuZGVuY3kodGVzdC5fZm4pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHN1cGVyLl9wcmVTeW50aGVzaXplKCk7XG4gIH1cblxuICBwcml2YXRlIGdldFRlc3RGdW5jdGlvbkhhbmRsZXMoKTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB7XG4gICAgY29uc3QgaGFuZGxlczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9O1xuICAgIGZvciAoY29uc3QgdGVzdCBvZiB0aGlzLmZpbmRUZXN0cygpKSB7XG4gICAgICBpZiAodGVzdC5fZm4pIHtcbiAgICAgICAgaGFuZGxlc1t0ZXN0Lm5vZGUucGF0aF0gPSBzaW11bGF0b3JIYW5kbGVUb2tlbih0ZXN0Ll9mbik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBoYW5kbGVzO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwdWJsaWMgX3RvSW5mbGlnaHQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gbWFrZVNpbXVsYXRvckpzQ2xpZW50KFwidGVzdC1ydW5uZXJcIiwgdGhpcyk7XG4gIH1cbn1cbiJdfQ==