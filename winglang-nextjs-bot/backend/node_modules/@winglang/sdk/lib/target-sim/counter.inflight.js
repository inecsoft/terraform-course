"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CounterBackend = void 0;
const fs = __importStar(require("fs"));
const path_1 = require("path");
const util_1 = require("./util");
const VALUES_FILENAME = "values.json";
class CounterBackend {
    constructor(ctx, props) {
        this.ctx = ctx;
        this.initial = props.initial ?? 0;
        this.values = new Map().set("default", this.initial);
    }
    async onStart() {
        // Load the values from disk
        const valuesFile = (0, path_1.join)(await this.ctx.statedir(), VALUES_FILENAME);
        const valueFilesExists = await (0, util_1.exists)(valuesFile);
        if (valueFilesExists) {
            const valuesContents = await fs.promises.readFile(valuesFile, "utf-8");
            const values = JSON.parse(valuesContents);
            this.values = new Map(values);
        }
    }
    async onStop() {
        // Save the values to disk
        fs.writeFileSync((0, path_1.join)(await this.ctx.statedir(), VALUES_FILENAME), JSON.stringify(Array.from(this.values.entries())));
    }
    async inc(amount = 1, key = "default") {
        const prev = this.values.get(key) ?? this.initial;
        this.values.set(key, prev + amount);
        return prev;
    }
    async dec(amount = 1, key = "default") {
        const prev = this.values.get(key) ?? this.initial;
        this.values.set(key, prev - amount);
        return prev;
    }
    async peek(key = "default") {
        return this.values.get(key) ?? this.initial;
    }
    async set(value, key = "default") {
        this.values.set(key, value);
    }
}
exports.CounterBackend = CounterBackend;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnRlci5pbmZsaWdodC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90YXJnZXQtc2ltL2NvdW50ZXIuaW5mbGlnaHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSx1Q0FBeUI7QUFDekIsK0JBQTRCO0FBRzVCLGlDQUFnQztBQUdoQyxNQUFNLGVBQWUsR0FBRyxhQUFhLENBQUM7QUFFdEMsTUFBYSxjQUFjO0lBS3pCLFlBQW1CLEdBQXFCLEVBQUUsS0FBMEI7UUFDbEUsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDZixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRU0sS0FBSyxDQUFDLE9BQU87UUFDbEIsNEJBQTRCO1FBQzVCLE1BQU0sVUFBVSxHQUFHLElBQUEsV0FBSSxFQUFDLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsRUFBRSxlQUFlLENBQUMsQ0FBQztRQUNwRSxNQUFNLGdCQUFnQixHQUFHLE1BQU0sSUFBQSxhQUFNLEVBQUMsVUFBVSxDQUFDLENBQUM7UUFDbEQsSUFBSSxnQkFBZ0IsRUFBRSxDQUFDO1lBQ3JCLE1BQU0sY0FBYyxHQUFHLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ3ZFLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDMUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNoQyxDQUFDO0lBQ0gsQ0FBQztJQUVNLEtBQUssQ0FBQyxNQUFNO1FBQ2pCLDBCQUEwQjtRQUMxQixFQUFFLENBQUMsYUFBYSxDQUNkLElBQUEsV0FBSSxFQUFDLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsRUFBRSxlQUFlLENBQUMsRUFDaEQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUNsRCxDQUFDO0lBQ0osQ0FBQztJQUVNLEtBQUssQ0FBQyxHQUFHLENBQ2QsU0FBaUIsQ0FBQyxFQUNsQixNQUFjLFNBQVM7UUFFdkIsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUNsRCxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxHQUFHLE1BQU0sQ0FBQyxDQUFDO1FBQ3BDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLEtBQUssQ0FBQyxHQUFHLENBQ2QsU0FBaUIsQ0FBQyxFQUNsQixNQUFjLFNBQVM7UUFFdkIsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUNsRCxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxHQUFHLE1BQU0sQ0FBQyxDQUFDO1FBQ3BDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBYyxTQUFTO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUM5QyxDQUFDO0lBRU0sS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFhLEVBQUUsTUFBYyxTQUFTO1FBQ3JELElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUM5QixDQUFDO0NBQ0Y7QUF2REQsd0NBdURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZnMgZnJvbSBcImZzXCI7XG5pbXBvcnQgeyBqb2luIH0gZnJvbSBcInBhdGhcIjtcbmltcG9ydCB7IENvdW50ZXJCYWNrZW5kUHJvcHMgfSBmcm9tIFwiLi9jb3VudGVyXCI7XG5pbXBvcnQgeyBJUmVzb3VyY2UsIElSZXNvdXJjZUNvbnRleHQgfSBmcm9tIFwiLi9yZXNvdXJjZVwiO1xuaW1wb3J0IHsgZXhpc3RzIH0gZnJvbSBcIi4vdXRpbFwiO1xuaW1wb3J0IHsgSUNvdW50ZXJDbGllbnQgfSBmcm9tIFwiLi4vY2xvdWRcIjtcblxuY29uc3QgVkFMVUVTX0ZJTEVOQU1FID0gXCJ2YWx1ZXMuanNvblwiO1xuXG5leHBvcnQgY2xhc3MgQ291bnRlckJhY2tlbmQgaW1wbGVtZW50cyBJQ291bnRlckNsaWVudCwgSVJlc291cmNlIHtcbiAgcHJpdmF0ZSB2YWx1ZXM6IE1hcDxzdHJpbmcsIG51bWJlcj47XG4gIHByaXZhdGUgaW5pdGlhbDogbnVtYmVyO1xuICBwcml2YXRlIGN0eDogSVJlc291cmNlQ29udGV4dDtcblxuICBwdWJsaWMgY29uc3RydWN0b3IoY3R4OiBJUmVzb3VyY2VDb250ZXh0LCBwcm9wczogQ291bnRlckJhY2tlbmRQcm9wcykge1xuICAgIHRoaXMuY3R4ID0gY3R4O1xuICAgIHRoaXMuaW5pdGlhbCA9IHByb3BzLmluaXRpYWwgPz8gMDtcbiAgICB0aGlzLnZhbHVlcyA9IG5ldyBNYXAoKS5zZXQoXCJkZWZhdWx0XCIsIHRoaXMuaW5pdGlhbCk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgb25TdGFydCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAvLyBMb2FkIHRoZSB2YWx1ZXMgZnJvbSBkaXNrXG4gICAgY29uc3QgdmFsdWVzRmlsZSA9IGpvaW4oYXdhaXQgdGhpcy5jdHguc3RhdGVkaXIoKSwgVkFMVUVTX0ZJTEVOQU1FKTtcbiAgICBjb25zdCB2YWx1ZUZpbGVzRXhpc3RzID0gYXdhaXQgZXhpc3RzKHZhbHVlc0ZpbGUpO1xuICAgIGlmICh2YWx1ZUZpbGVzRXhpc3RzKSB7XG4gICAgICBjb25zdCB2YWx1ZXNDb250ZW50cyA9IGF3YWl0IGZzLnByb21pc2VzLnJlYWRGaWxlKHZhbHVlc0ZpbGUsIFwidXRmLThcIik7XG4gICAgICBjb25zdCB2YWx1ZXMgPSBKU09OLnBhcnNlKHZhbHVlc0NvbnRlbnRzKTtcbiAgICAgIHRoaXMudmFsdWVzID0gbmV3IE1hcCh2YWx1ZXMpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBvblN0b3AoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgLy8gU2F2ZSB0aGUgdmFsdWVzIHRvIGRpc2tcbiAgICBmcy53cml0ZUZpbGVTeW5jKFxuICAgICAgam9pbihhd2FpdCB0aGlzLmN0eC5zdGF0ZWRpcigpLCBWQUxVRVNfRklMRU5BTUUpLFxuICAgICAgSlNPTi5zdHJpbmdpZnkoQXJyYXkuZnJvbSh0aGlzLnZhbHVlcy5lbnRyaWVzKCkpKVxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgaW5jKFxuICAgIGFtb3VudDogbnVtYmVyID0gMSxcbiAgICBrZXk6IHN0cmluZyA9IFwiZGVmYXVsdFwiXG4gICk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgY29uc3QgcHJldiA9IHRoaXMudmFsdWVzLmdldChrZXkpID8/IHRoaXMuaW5pdGlhbDtcbiAgICB0aGlzLnZhbHVlcy5zZXQoa2V5LCBwcmV2ICsgYW1vdW50KTtcbiAgICByZXR1cm4gcHJldjtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBkZWMoXG4gICAgYW1vdW50OiBudW1iZXIgPSAxLFxuICAgIGtleTogc3RyaW5nID0gXCJkZWZhdWx0XCJcbiAgKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICBjb25zdCBwcmV2ID0gdGhpcy52YWx1ZXMuZ2V0KGtleSkgPz8gdGhpcy5pbml0aWFsO1xuICAgIHRoaXMudmFsdWVzLnNldChrZXksIHByZXYgLSBhbW91bnQpO1xuICAgIHJldHVybiBwcmV2O1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHBlZWsoa2V5OiBzdHJpbmcgPSBcImRlZmF1bHRcIik6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVzLmdldChrZXkpID8/IHRoaXMuaW5pdGlhbDtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzZXQodmFsdWU6IG51bWJlciwga2V5OiBzdHJpbmcgPSBcImRlZmF1bHRcIik6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMudmFsdWVzLnNldChrZXksIHZhbHVlKTtcbiAgfVxufVxuIl19