"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Schedule = void 0;
const cron_parser_1 = require("cron-parser");
const cloud_1 = require("../cloud");
const simulator_1 = require("../simulator");
const std_1 = require("../std");
class Schedule {
    constructor(props) {
        this.tasks = new Array();
        this.interval = (0, cron_parser_1.parseExpression)(props.cronExpression, { utc: true });
        this.scheduleFunction();
    }
    get context() {
        if (!this._context) {
            throw new Error("Cannot access context during class construction");
        }
        return this._context;
    }
    // Calculate the delay for the next execution
    nextDelay(interval) {
        return interval.next().toDate().getTime() - Date.now();
    }
    // Recursively schedule the function to be executed
    scheduleFunction() {
        this.intervalTimeout = setTimeout(() => {
            this.runTasks();
            this.scheduleFunction();
        }, this.nextDelay(this.interval));
    }
    async init(context) {
        this._context = context;
        return {};
    }
    async cleanup() {
        clearTimeout(this.intervalTimeout);
    }
    async save() { }
    async plan() {
        return simulator_1.UpdatePlan.AUTO;
    }
    async addEventSubscription(subscriber, subscriptionProps) {
        const task = {
            functionHandle: subscriber,
            ...subscriptionProps,
        };
        this.tasks.push(task);
    }
    async removeEventSubscription(subscriber) {
        const index = this.tasks.findIndex((s) => s.functionHandle === subscriber);
        if (index >= 0) {
            this.tasks.splice(index, 1);
        }
    }
    runTasks() {
        for (const task of this.tasks) {
            const fnClient = this.context.getClient(task.functionHandle);
            if (!fnClient) {
                throw new Error("No function client found for task.");
            }
            this.context.addTrace({
                type: std_1.TraceType.RESOURCE,
                level: std_1.LogLevel.VERBOSE,
                data: {
                    message: `Running task with function handle: ${task.functionHandle}.`,
                },
                sourcePath: this.context.resourcePath,
                sourceType: cloud_1.SCHEDULE_FQN,
                timestamp: new Date().toISOString(),
            });
            void fnClient.invoke().catch((err) => {
                this.context.addTrace({
                    data: {
                        message: `Schedule error: ${err}`,
                    },
                    sourcePath: this.context.resourcePath,
                    sourceType: cloud_1.SCHEDULE_FQN,
                    timestamp: new Date().toISOString(),
                    type: std_1.TraceType.RESOURCE,
                    level: std_1.LogLevel.ERROR,
                });
            });
        }
    }
}
exports.Schedule = Schedule;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZWR1bGUuaW5mbGlnaHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGFyZ2V0LXNpbS9zY2hlZHVsZS5pbmZsaWdodC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2Q0FBOEQ7QUFROUQsb0NBQTBFO0FBQzFFLDRDQUlzQjtBQUN0QixnQ0FBNkM7QUFFN0MsTUFBYSxRQUFRO0lBUW5CLFlBQVksS0FBcUI7UUFKekIsVUFBSyxHQUFHLElBQUksS0FBSyxFQUFnQixDQUFDO1FBS3hDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBQSw2QkFBZSxFQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNyRSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUQsSUFBWSxPQUFPO1FBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDbkIsTUFBTSxJQUFJLEtBQUssQ0FBQyxpREFBaUQsQ0FBQyxDQUFDO1FBQ3JFLENBQUM7UUFDRCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQztJQUVELDZDQUE2QztJQUNyQyxTQUFTLENBQUMsUUFBd0I7UUFDeEMsT0FBTyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3pELENBQUM7SUFFRCxtREFBbUQ7SUFDM0MsZ0JBQWdCO1FBQ3RCLElBQUksQ0FBQyxlQUFlLEdBQUcsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNyQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDaEIsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDMUIsQ0FBQyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVNLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBMEI7UUFDMUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7UUFDeEIsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRU0sS0FBSyxDQUFDLE9BQU87UUFDbEIsWUFBWSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRU0sS0FBSyxDQUFDLElBQUksS0FBbUIsQ0FBQztJQUU5QixLQUFLLENBQUMsSUFBSTtRQUNmLE9BQU8sc0JBQVUsQ0FBQyxJQUFJLENBQUM7SUFDekIsQ0FBQztJQUVNLEtBQUssQ0FBQyxvQkFBb0IsQ0FDL0IsVUFBa0IsRUFDbEIsaUJBQW9DO1FBRXBDLE1BQU0sSUFBSSxHQUFHO1lBQ1gsY0FBYyxFQUFFLFVBQVU7WUFDMUIsR0FBRyxpQkFBaUI7U0FDTCxDQUFDO1FBQ2xCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFFTSxLQUFLLENBQUMsdUJBQXVCLENBQUMsVUFBa0I7UUFDckQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxjQUFjLEtBQUssVUFBVSxDQUFDLENBQUM7UUFDM0UsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDZixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDOUIsQ0FBQztJQUNILENBQUM7SUFFTyxRQUFRO1FBQ2QsS0FBSyxNQUFNLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDOUIsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQ3JDLElBQUksQ0FBQyxjQUFjLENBQ0QsQ0FBQztZQUNyQixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7Z0JBQ2QsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO1lBQ3hELENBQUM7WUFFRCxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQztnQkFDcEIsSUFBSSxFQUFFLGVBQVMsQ0FBQyxRQUFRO2dCQUN4QixLQUFLLEVBQUUsY0FBUSxDQUFDLE9BQU87Z0JBQ3ZCLElBQUksRUFBRTtvQkFDSixPQUFPLEVBQUUsc0NBQXNDLElBQUksQ0FBQyxjQUFjLEdBQUc7aUJBQ3RFO2dCQUNELFVBQVUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVk7Z0JBQ3JDLFVBQVUsRUFBRSxvQkFBWTtnQkFDeEIsU0FBUyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFO2FBQ3BDLENBQUMsQ0FBQztZQUVILEtBQUssUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO2dCQUNuQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQztvQkFDcEIsSUFBSSxFQUFFO3dCQUNKLE9BQU8sRUFBRSxtQkFBbUIsR0FBRyxFQUFFO3FCQUNsQztvQkFDRCxVQUFVLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZO29CQUNyQyxVQUFVLEVBQUUsb0JBQVk7b0JBQ3hCLFNBQVMsRUFBRSxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRTtvQkFDbkMsSUFBSSxFQUFFLGVBQVMsQ0FBQyxRQUFRO29CQUN4QixLQUFLLEVBQUUsY0FBUSxDQUFDLEtBQUs7aUJBQ3RCLENBQUMsQ0FBQztZQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztJQUNILENBQUM7Q0FDRjtBQXBHRCw0QkFvR0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDcm9uRXhwcmVzc2lvbiwgcGFyc2VFeHByZXNzaW9uIH0gZnJvbSBcImNyb24tcGFyc2VyXCI7XG5pbXBvcnQgeyBJRXZlbnRQdWJsaXNoZXIgfSBmcm9tIFwiLi9ldmVudC1tYXBwaW5nXCI7XG5pbXBvcnQge1xuICBFdmVudFN1YnNjcmlwdGlvbixcbiAgU2NoZWR1bGVBdHRyaWJ1dGVzLFxuICBTY2hlZHVsZVNjaGVtYSxcbiAgU2NoZWR1bGVUYXNrLFxufSBmcm9tIFwiLi9zY2hlbWEtcmVzb3VyY2VzXCI7XG5pbXBvcnQgeyBJRnVuY3Rpb25DbGllbnQsIElTY2hlZHVsZUNsaWVudCwgU0NIRURVTEVfRlFOIH0gZnJvbSBcIi4uL2Nsb3VkXCI7XG5pbXBvcnQge1xuICBJU2ltdWxhdG9yQ29udGV4dCxcbiAgSVNpbXVsYXRvclJlc291cmNlSW5zdGFuY2UsXG4gIFVwZGF0ZVBsYW4sXG59IGZyb20gXCIuLi9zaW11bGF0b3JcIjtcbmltcG9ydCB7IExvZ0xldmVsLCBUcmFjZVR5cGUgfSBmcm9tIFwiLi4vc3RkXCI7XG5cbmV4cG9ydCBjbGFzcyBTY2hlZHVsZVxuICBpbXBsZW1lbnRzIElTY2hlZHVsZUNsaWVudCwgSVNpbXVsYXRvclJlc291cmNlSW5zdGFuY2UsIElFdmVudFB1Ymxpc2hlclxue1xuICBwcml2YXRlIF9jb250ZXh0OiBJU2ltdWxhdG9yQ29udGV4dCB8IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSB0YXNrcyA9IG5ldyBBcnJheTxTY2hlZHVsZVRhc2s+KCk7XG4gIHByaXZhdGUgaW50ZXJ2YWw6IENyb25FeHByZXNzaW9uO1xuICBwcml2YXRlIGludGVydmFsVGltZW91dD86IE5vZGVKUy5UaW1lb3V0O1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBTY2hlZHVsZVNjaGVtYSkge1xuICAgIHRoaXMuaW50ZXJ2YWwgPSBwYXJzZUV4cHJlc3Npb24ocHJvcHMuY3JvbkV4cHJlc3Npb24sIHsgdXRjOiB0cnVlIH0pO1xuICAgIHRoaXMuc2NoZWR1bGVGdW5jdGlvbigpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXQgY29udGV4dCgpOiBJU2ltdWxhdG9yQ29udGV4dCB7XG4gICAgaWYgKCF0aGlzLl9jb250ZXh0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgYWNjZXNzIGNvbnRleHQgZHVyaW5nIGNsYXNzIGNvbnN0cnVjdGlvblwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHQ7XG4gIH1cblxuICAvLyBDYWxjdWxhdGUgdGhlIGRlbGF5IGZvciB0aGUgbmV4dCBleGVjdXRpb25cbiAgcHJpdmF0ZSBuZXh0RGVsYXkoaW50ZXJ2YWw6IENyb25FeHByZXNzaW9uKSB7XG4gICAgcmV0dXJuIGludGVydmFsLm5leHQoKS50b0RhdGUoKS5nZXRUaW1lKCkgLSBEYXRlLm5vdygpO1xuICB9XG5cbiAgLy8gUmVjdXJzaXZlbHkgc2NoZWR1bGUgdGhlIGZ1bmN0aW9uIHRvIGJlIGV4ZWN1dGVkXG4gIHByaXZhdGUgc2NoZWR1bGVGdW5jdGlvbigpIHtcbiAgICB0aGlzLmludGVydmFsVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5ydW5UYXNrcygpO1xuICAgICAgdGhpcy5zY2hlZHVsZUZ1bmN0aW9uKCk7XG4gICAgfSwgdGhpcy5uZXh0RGVsYXkodGhpcy5pbnRlcnZhbCkpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGluaXQoY29udGV4dDogSVNpbXVsYXRvckNvbnRleHQpOiBQcm9taXNlPFNjaGVkdWxlQXR0cmlidXRlcz4ge1xuICAgIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBjbGVhbnVwKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNsZWFyVGltZW91dCh0aGlzLmludGVydmFsVGltZW91dCk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgc2F2ZSgpOiBQcm9taXNlPHZvaWQ+IHt9XG5cbiAgcHVibGljIGFzeW5jIHBsYW4oKSB7XG4gICAgcmV0dXJuIFVwZGF0ZVBsYW4uQVVUTztcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBhZGRFdmVudFN1YnNjcmlwdGlvbihcbiAgICBzdWJzY3JpYmVyOiBzdHJpbmcsXG4gICAgc3Vic2NyaXB0aW9uUHJvcHM6IEV2ZW50U3Vic2NyaXB0aW9uXG4gICkge1xuICAgIGNvbnN0IHRhc2sgPSB7XG4gICAgICBmdW5jdGlvbkhhbmRsZTogc3Vic2NyaWJlcixcbiAgICAgIC4uLnN1YnNjcmlwdGlvblByb3BzLFxuICAgIH0gYXMgU2NoZWR1bGVUYXNrO1xuICAgIHRoaXMudGFza3MucHVzaCh0YXNrKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyByZW1vdmVFdmVudFN1YnNjcmlwdGlvbihzdWJzY3JpYmVyOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMudGFza3MuZmluZEluZGV4KChzKSA9PiBzLmZ1bmN0aW9uSGFuZGxlID09PSBzdWJzY3JpYmVyKTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgdGhpcy50YXNrcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgcnVuVGFza3MoKSB7XG4gICAgZm9yIChjb25zdCB0YXNrIG9mIHRoaXMudGFza3MpIHtcbiAgICAgIGNvbnN0IGZuQ2xpZW50ID0gdGhpcy5jb250ZXh0LmdldENsaWVudChcbiAgICAgICAgdGFzay5mdW5jdGlvbkhhbmRsZVxuICAgICAgKSBhcyBJRnVuY3Rpb25DbGllbnQ7XG4gICAgICBpZiAoIWZuQ2xpZW50KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIGZ1bmN0aW9uIGNsaWVudCBmb3VuZCBmb3IgdGFzay5cIik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY29udGV4dC5hZGRUcmFjZSh7XG4gICAgICAgIHR5cGU6IFRyYWNlVHlwZS5SRVNPVVJDRSxcbiAgICAgICAgbGV2ZWw6IExvZ0xldmVsLlZFUkJPU0UsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBtZXNzYWdlOiBgUnVubmluZyB0YXNrIHdpdGggZnVuY3Rpb24gaGFuZGxlOiAke3Rhc2suZnVuY3Rpb25IYW5kbGV9LmAsXG4gICAgICAgIH0sXG4gICAgICAgIHNvdXJjZVBhdGg6IHRoaXMuY29udGV4dC5yZXNvdXJjZVBhdGgsXG4gICAgICAgIHNvdXJjZVR5cGU6IFNDSEVEVUxFX0ZRTixcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICB9KTtcblxuICAgICAgdm9pZCBmbkNsaWVudC5pbnZva2UoKS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgIHRoaXMuY29udGV4dC5hZGRUcmFjZSh7XG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgbWVzc2FnZTogYFNjaGVkdWxlIGVycm9yOiAke2Vycn1gLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgc291cmNlUGF0aDogdGhpcy5jb250ZXh0LnJlc291cmNlUGF0aCxcbiAgICAgICAgICBzb3VyY2VUeXBlOiBTQ0hFRFVMRV9GUU4sXG4gICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgdHlwZTogVHJhY2VUeXBlLlJFU09VUkNFLFxuICAgICAgICAgIGxldmVsOiBMb2dMZXZlbC5FUlJPUixcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==