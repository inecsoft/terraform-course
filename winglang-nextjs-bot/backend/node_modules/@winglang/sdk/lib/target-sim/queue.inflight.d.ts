import { IEventPublisher } from "./event-mapping";
import { QueueAttributes, QueueSchema, EventSubscription, ResourceHandle } from "./schema-resources";
import { IQueueClient } from "../cloud";
import { ISimulatorContext, ISimulatorResourceInstance, UpdatePlan } from "../simulator/simulator";
export declare class Queue implements IQueueClient, ISimulatorResourceInstance, IEventPublisher {
    private readonly messages;
    private readonly subscribers;
    private readonly processLoop;
    private _context;
    private readonly timeoutSeconds;
    private readonly retentionPeriod;
    private readonly dlq?;
    constructor(props: QueueSchema);
    private get context();
    init(context: ISimulatorContext): Promise<QueueAttributes>;
    cleanup(): Promise<void>;
    save(): Promise<void>;
    plan(): Promise<UpdatePlan>;
    addEventSubscription(subscriber: ResourceHandle, subscriptionProps: EventSubscription): Promise<void>;
    removeEventSubscription(subscriber: ResourceHandle): Promise<void>;
    push(...messages: string[]): Promise<void>;
    purge(): Promise<void>;
    approxSize(): Promise<number>;
    pop(): Promise<string | undefined>;
    private processMessages;
    pushMessagesBackToQueue(messages: Array<QueueMessage>): void;
}
declare class QueueMessage {
    readonly retentionTimeout: Date;
    readonly payload: string;
    remainingDeliveryAttempts: number;
    constructor(retentionPeriod: number, remainingDeliveryAttempts: number, message: string);
}
export {};
