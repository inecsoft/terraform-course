"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bucket = exports.METADATA_FILENAME = void 0;
const crypto = __importStar(require("crypto"));
const fs = __importStar(require("fs"));
const path_1 = require("path");
const url = __importStar(require("url"));
const mime_types_1 = __importDefault(require("mime-types"));
const util_1 = require("./util");
const cloud_1 = require("../cloud");
const serialization_1 = require("../simulator/serialization");
const simulator_1 = require("../simulator/simulator");
const std_1 = require("../std");
exports.METADATA_FILENAME = "metadata.json";
class Bucket {
    constructor(props) {
        this.initialObjects = props.initialObjects ?? {};
        this._public = props.public ?? false;
        this.topicHandlers = props.topics;
        this._metadata = new Map();
    }
    get context() {
        if (!this._context) {
            throw new Error("Cannot access context during class construction");
        }
        return this._context;
    }
    async init(context) {
        this._context = context;
        this._fileDir = (0, path_1.join)(context.statedir, "files");
        const fileDirExists = await (0, util_1.exists)(this._fileDir);
        if (!fileDirExists) {
            await fs.promises.mkdir(this._fileDir, { recursive: true });
        }
        const metadataFileExists = await (0, util_1.exists)((0, path_1.join)(this.context.statedir, exports.METADATA_FILENAME));
        if (metadataFileExists) {
            const metadataContents = await fs.promises.readFile((0, path_1.join)(this.context.statedir, exports.METADATA_FILENAME), "utf-8");
            try {
                const metadata = (0, serialization_1.deserialize)(metadataContents);
                this._metadata = new Map(metadata);
            }
            catch (e) {
                this.addTrace(`Failed to deserialize metadata: ${e.stack}`, std_1.LogLevel.ERROR);
            }
        }
        for (const [key, value] of Object.entries(this.initialObjects)) {
            await this.context.withTrace({
                message: `Adding object from preflight (key=${key}).`,
                activity: async () => {
                    return this.addFile(key, value);
                },
            });
        }
        return {};
    }
    async cleanup() { }
    async plan() {
        return simulator_1.UpdatePlan.AUTO;
    }
    async save() {
        // no need to save individual files, since they are already persisted in the state dir
        // during the bucket's lifecycle
        fs.writeFileSync((0, path_1.join)(this.context.statedir, exports.METADATA_FILENAME), (0, serialization_1.serialize)(Array.from(this._metadata.entries())) // metadata contains Datetime values, so we need to serialize it
        );
    }
    async notifyListeners(actionType, key) {
        if (!this.topicHandlers[actionType]) {
            return;
        }
        const topicClient = this.context.getClient(this.topicHandlers[actionType]);
        return topicClient.publish(key);
    }
    async exists(key) {
        return this.context.withTrace({
            message: `Exists (key=${key}).`,
            activity: async () => {
                return this._metadata.has(key);
            },
        });
    }
    async put(key, value, opts) {
        return this.context.withTrace({
            message: `Put (key=${key}).`,
            activity: async () => {
                await this.addFile(key, value, opts?.contentType);
            },
        });
    }
    async putJson(key, body) {
        return this.context.withTrace({
            message: `Put Json (key=${key}).`,
            activity: async () => {
                await this.addFile(key, JSON.stringify(body, null, 2), "application/json");
            },
        });
    }
    async get(key, options) {
        return this.context.withTrace({
            message: `Get (key=${key}).`,
            activity: async () => {
                const hash = this.hashKey(key);
                const filename = (0, path_1.join)(this._fileDir, hash);
                let buffer;
                try {
                    const file = await fs.promises.open(filename, "r");
                    const stat = await file.stat();
                    let start = 0;
                    if (options?.startByte !== undefined) {
                        start = options.startByte;
                    }
                    let length = stat.size;
                    if (options?.endByte !== undefined) {
                        length = options.endByte + 1;
                    }
                    buffer = Buffer.alloc(length - start);
                    await file.read(buffer, 0, length - start, start);
                    await file.close();
                }
                catch (e) {
                    buffer = undefined;
                }
                if (!buffer) {
                    throw new Error(`Object does not exist (key=${key}).`);
                }
                try {
                    return new TextDecoder("utf8", { fatal: true }).decode(buffer);
                }
                catch (e) {
                    throw new Error(`Object content could not be read as text (key=${key}): ${e.stack})}`);
                }
            },
        });
    }
    async tryGet(key, options) {
        if (await this.exists(key)) {
            return this.get(key, options);
        }
        return undefined;
    }
    async getJson(key) {
        return this.context.withTrace({
            message: `Get Json (key=${key}).`,
            activity: async () => {
                const hash = this.hashKey(key);
                const filename = (0, path_1.join)(this._fileDir, hash);
                return JSON.parse(await fs.promises.readFile(filename, "utf8"));
            },
        });
    }
    async tryGetJson(key) {
        if (await this.exists(key)) {
            return this.getJson(key);
        }
        return undefined;
    }
    async delete(key, opts) {
        return this.context.withTrace({
            message: `Delete (key=${key}).`,
            activity: async () => {
                const mustExist = opts?.mustExist ?? false;
                if (!this._metadata.has(key) && mustExist) {
                    throw new Error(`Object does not exist (key=${key}).`);
                }
                if (!this._metadata.has(key)) {
                    return;
                }
                const hash = this.hashKey(key);
                const filename = (0, path_1.join)(this._fileDir, hash);
                await fs.promises.unlink(filename);
                this._metadata.delete(key);
                await this.notifyListeners(cloud_1.BucketEventType.DELETE, key);
            },
        });
    }
    async tryDelete(key) {
        if (await this.exists(key)) {
            await this.delete(key);
            return true;
        }
        return false;
    }
    async list(prefix) {
        return this.context.withTrace({
            message: `List (prefix=${prefix ?? "null"}).`,
            activity: async () => {
                return Array.from(this._metadata.keys()).filter((key) => {
                    if (prefix) {
                        return key.startsWith(prefix);
                    }
                    else {
                        return true;
                    }
                });
            },
        });
    }
    async publicUrl(key) {
        if (!this._public) {
            throw new Error("Cannot provide public url for a non-public bucket");
        }
        return this.context.withTrace({
            message: `Public URL (key=${key}).`,
            activity: async () => {
                const filePath = (0, path_1.join)(this._fileDir, key);
                if (!this._metadata.has(key)) {
                    throw new Error(`Cannot provide public url for an non-existent key (key=${key})`);
                }
                return url.pathToFileURL(filePath).href;
            },
        });
    }
    async signedUrl(key, options) {
        options;
        return this.context.withTrace({
            message: `Signed URL (key=${key})`,
            activity: async () => {
                throw new Error(`signedUrl is not implemented yet for sim (key=${key})`);
            },
        });
    }
    /**
     * Get the metadata of an object in the bucket.
     * @param key Key of the object.
     * @throws if the object does not exist.
     */
    async metadata(key) {
        return this.context.withTrace({
            message: `Metadata (key=${key}).`,
            activity: async () => {
                if (!this._metadata.has(key)) {
                    throw new Error(`Object does not exist (key=${key}).`);
                }
                return this._metadata.get(key);
            },
        });
    }
    async copy(srcKey, dstKey) {
        return this.context.withTrace({
            message: `Copy (srcKey=${srcKey} to dstKey=${dstKey}).`,
            activity: async () => {
                if (!this._metadata.has(srcKey)) {
                    throw new Error(`Source object does not exist (srcKey=${srcKey}).`);
                }
                const dstValue = await this.get(srcKey);
                const dstMetadata = await this.metadata(srcKey);
                await this.put(dstKey, dstValue, {
                    contentType: dstMetadata.contentType ?? "application/octet-stream",
                });
            },
        });
    }
    async rename(srcKey, dstKey) {
        if (srcKey === dstKey) {
            throw new Error(`Renaming an object to its current name is not a valid operation (srcKey=${srcKey}, dstKey=${dstKey}).`);
        }
        await this.copy(srcKey, dstKey);
        await this.delete(srcKey);
    }
    async addFile(key, value, contentType) {
        const actionType = this._metadata.has(key)
            ? cloud_1.BucketEventType.UPDATE
            : cloud_1.BucketEventType.CREATE;
        const hash = this.hashKey(key);
        const filename = (0, path_1.join)(this._fileDir, hash);
        const dirName = (0, path_1.dirname)(filename);
        await fs.promises.mkdir(dirName, { recursive: true });
        await fs.promises.writeFile(filename, value);
        const filestat = await fs.promises.stat(filename);
        const determinedContentType = (contentType ?? mime_types_1.default.lookup(key)) || "application/octet-stream";
        this._metadata.set(key, {
            size: filestat.size,
            lastModified: std_1.Datetime.fromDate(filestat.mtime),
            contentType: determinedContentType,
        });
        await this.notifyListeners(actionType, key);
    }
    hashKey(key) {
        return crypto.createHash("sha512").update(key).digest("hex").slice(-32);
    }
    addTrace(message, level) {
        this.context.addTrace({
            data: { message },
            level,
            type: std_1.TraceType.RESOURCE,
            sourcePath: this.context.resourcePath,
            sourceType: cloud_1.BUCKET_FQN,
            timestamp: new Date().toISOString(),
        });
    }
}
exports.Bucket = Bucket;
//# sourceMappingURL=data:application/json;base64,