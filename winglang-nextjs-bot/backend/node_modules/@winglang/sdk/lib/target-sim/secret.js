"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Secret = void 0;
const util_1 = require("./util");
const cloud = __importStar(require("../cloud"));
const resource_names_1 = require("../shared/resource-names");
/**
 * Simulator implementation of `cloud.Secret`
 *
 * @inflight `@winglang/sdk.cloud.ISecretClient`
 */
class Secret extends cloud.Secret {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        this._name =
            props.name ??
                resource_names_1.ResourceNames.generateName(this, { disallowedRegex: /[^\w]/g });
    }
    onLift(host, ops) {
        (0, util_1.bindSimulatorResource)(__filename, this, host, ops);
        super.onLift(host, ops);
    }
    /** @internal */
    _toInflight() {
        return (0, util_1.makeSimulatorJsClient)(__filename, this);
    }
    /** @internal */
    get _liftMap() {
        return {
            [cloud.SecretInflightMethods.VALUE]: [],
            [cloud.SecretInflightMethods.VALUE_JSON]: [],
        };
    }
    toSimulator() {
        const props = {
            name: this.name,
        };
        return {
            type: cloud.SECRET_FQN,
            props,
        };
    }
}
exports.Secret = Secret;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VjcmV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RhcmdldC1zaW0vc2VjcmV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBR0EsaUNBQXNFO0FBQ3RFLGdEQUFrQztBQUVsQyw2REFBeUQ7QUFJekQ7Ozs7R0FJRztBQUNILE1BQWEsTUFBTyxTQUFRLEtBQUssQ0FBQyxNQUFNO0lBQ3RDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsUUFBMkIsRUFBRTtRQUNyRSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4QixJQUFJLENBQUMsS0FBSztZQUNSLEtBQUssQ0FBQyxJQUFJO2dCQUNWLDhCQUFhLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFFTSxNQUFNLENBQUMsSUFBbUIsRUFBRSxHQUFhO1FBQzlDLElBQUEsNEJBQXFCLEVBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDbkQsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVELGdCQUFnQjtJQUNULFdBQVc7UUFDaEIsT0FBTyxJQUFBLDRCQUFxQixFQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsZ0JBQWdCO0lBQ2hCLElBQVcsUUFBUTtRQUNqQixPQUFPO1lBQ0wsQ0FBQyxLQUFLLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRTtZQUN2QyxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxVQUFVLENBQUMsRUFBRSxFQUFFO1NBQzdDLENBQUM7SUFDSixDQUFDO0lBRU0sV0FBVztRQUNoQixNQUFNLEtBQUssR0FBaUI7WUFDMUIsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFLO1NBQ2pCLENBQUM7UUFDRixPQUFPO1lBQ0wsSUFBSSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQ3RCLEtBQUs7U0FDTixDQUFDO0lBQ0osQ0FBQztDQUNGO0FBcENELHdCQW9DQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgeyBJU2ltdWxhdG9yUmVzb3VyY2UgfSBmcm9tIFwiLi9yZXNvdXJjZVwiO1xuaW1wb3J0IHsgU2VjcmV0U2NoZW1hIH0gZnJvbSBcIi4vc2NoZW1hLXJlc291cmNlc1wiO1xuaW1wb3J0IHsgYmluZFNpbXVsYXRvclJlc291cmNlLCBtYWtlU2ltdWxhdG9ySnNDbGllbnQgfSBmcm9tIFwiLi91dGlsXCI7XG5pbXBvcnQgKiBhcyBjbG91ZCBmcm9tIFwiLi4vY2xvdWRcIjtcbmltcG9ydCB7IExpZnRNYXAgfSBmcm9tIFwiLi4vY29yZVwiO1xuaW1wb3J0IHsgUmVzb3VyY2VOYW1lcyB9IGZyb20gXCIuLi9zaGFyZWQvcmVzb3VyY2UtbmFtZXNcIjtcbmltcG9ydCB7IFRvU2ltdWxhdG9yT3V0cHV0IH0gZnJvbSBcIi4uL3NpbXVsYXRvclwiO1xuaW1wb3J0IHsgSUluZmxpZ2h0SG9zdCB9IGZyb20gXCIuLi9zdGRcIjtcblxuLyoqXG4gKiBTaW11bGF0b3IgaW1wbGVtZW50YXRpb24gb2YgYGNsb3VkLlNlY3JldGBcbiAqXG4gKiBAaW5mbGlnaHQgYEB3aW5nbGFuZy9zZGsuY2xvdWQuSVNlY3JldENsaWVudGBcbiAqL1xuZXhwb3J0IGNsYXNzIFNlY3JldCBleHRlbmRzIGNsb3VkLlNlY3JldCBpbXBsZW1lbnRzIElTaW11bGF0b3JSZXNvdXJjZSB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBjbG91ZC5TZWNyZXRQcm9wcyA9IHt9KSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XG5cbiAgICB0aGlzLl9uYW1lID1cbiAgICAgIHByb3BzLm5hbWUgPz9cbiAgICAgIFJlc291cmNlTmFtZXMuZ2VuZXJhdGVOYW1lKHRoaXMsIHsgZGlzYWxsb3dlZFJlZ2V4OiAvW15cXHddL2cgfSk7XG4gIH1cblxuICBwdWJsaWMgb25MaWZ0KGhvc3Q6IElJbmZsaWdodEhvc3QsIG9wczogc3RyaW5nW10pOiB2b2lkIHtcbiAgICBiaW5kU2ltdWxhdG9yUmVzb3VyY2UoX19maWxlbmFtZSwgdGhpcywgaG9zdCwgb3BzKTtcbiAgICBzdXBlci5vbkxpZnQoaG9zdCwgb3BzKTtcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHVibGljIF90b0luZmxpZ2h0KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIG1ha2VTaW11bGF0b3JKc0NsaWVudChfX2ZpbGVuYW1lLCB0aGlzKTtcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHVibGljIGdldCBfbGlmdE1hcCgpOiBMaWZ0TWFwIHtcbiAgICByZXR1cm4ge1xuICAgICAgW2Nsb3VkLlNlY3JldEluZmxpZ2h0TWV0aG9kcy5WQUxVRV06IFtdLFxuICAgICAgW2Nsb3VkLlNlY3JldEluZmxpZ2h0TWV0aG9kcy5WQUxVRV9KU09OXTogW10sXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyB0b1NpbXVsYXRvcigpOiBUb1NpbXVsYXRvck91dHB1dCB7XG4gICAgY29uc3QgcHJvcHM6IFNlY3JldFNjaGVtYSA9IHtcbiAgICAgIG5hbWU6IHRoaXMubmFtZSEsXG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogY2xvdWQuU0VDUkVUX0ZRTixcbiAgICAgIHByb3BzLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==