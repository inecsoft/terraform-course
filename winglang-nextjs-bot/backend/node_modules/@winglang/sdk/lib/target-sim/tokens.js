"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimTokens = exports.isSimulatorToken = exports.SIMULATOR_TOKEN_REGEX_FULL = exports.SIMULATOR_TOKEN_REGEX = exports.simulatorAttrToken = exports.simulatorHandleToken = void 0;
const tokens_1 = require("../core/tokens");
/**
 * Produce a token that will be replaced with the handle of a resource
 * when the simulator is started. This can be inserted to an environment variable
 * so that the real value can be used by an inflight function.
 */
function simulatorHandleToken(resource) {
    return simulatorAttrToken(resource, "handle");
}
exports.simulatorHandleToken = simulatorHandleToken;
/**
 * Produce a token that will be replaced with a deploy-time resource attribute
 * when the simulator is started.
 */
function simulatorAttrToken(resource, attrName) {
    return `\${wsim#${resource.node.path}#attrs.${attrName}}`;
}
exports.simulatorAttrToken = simulatorAttrToken;
/**
 * Regular expression that matches a simulator token. This is a sequence of
 * characters that can appear in the middle of any string in the following format:
 *
 * ${wsim#path/to/resource#property.path}
 */
exports.SIMULATOR_TOKEN_REGEX = /\$\{wsim#[^#\{\}]+#[a-zA-Z0-9_\-\/\.]+\}/;
/**
 * The same as SIMULATOR_TOKEN_REGEX, but it must match the entire string.
 */
exports.SIMULATOR_TOKEN_REGEX_FULL = new RegExp(`^${exports.SIMULATOR_TOKEN_REGEX.source}$`);
/**
 * Returns true is the given value is a Simulator token.
 */
function isSimulatorToken(value) {
    return exports.SIMULATOR_TOKEN_REGEX.test(value);
}
exports.isSimulatorToken = isSimulatorToken;
/**
 * Represents values that can only be resolved after the app is synthesized.
 * Tokens values are captured as environment variable, and resolved through the compilation target token mechanism.
 */
class SimTokens {
    /**
     * Returns true is the given value is a Simulator token.
     */
    isToken(value) {
        if (typeof value === "string") {
            return isSimulatorToken(value);
        }
        return false;
    }
    /**
     * Lifts a value into an inflight context.
     */
    lift(value) {
        switch (typeof value) {
            case "string":
                return `process.env[${JSON.stringify((0, tokens_1.tokenEnvName)(value))}]`;
            default:
                throw new Error(`Unsupported token type`);
        }
    }
    /**
     * Lifts the given token to the host.
     */
    onLiftValue(host, value) {
        switch (typeof value) {
            case "string":
                const envName = (0, tokens_1.tokenEnvName)(value);
                host.addEnvironment(envName, value);
                break;
            default:
                throw new Error(`Unable to lift token ${value}`);
        }
    }
}
exports.SimTokens = SimTokens;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW5zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RhcmdldC1zaW0vdG9rZW5zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDJDQUE4RDtBQUc5RDs7OztHQUlHO0FBQ0gsU0FBZ0Isb0JBQW9CLENBQUMsUUFBbUI7SUFDdEQsT0FBTyxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDaEQsQ0FBQztBQUZELG9EQUVDO0FBRUQ7OztHQUdHO0FBQ0gsU0FBZ0Isa0JBQWtCLENBQ2hDLFFBQW1CLEVBQ25CLFFBQWdCO0lBRWhCLE9BQU8sV0FBVyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksVUFBVSxRQUFRLEdBQUcsQ0FBQztBQUM1RCxDQUFDO0FBTEQsZ0RBS0M7QUFFRDs7Ozs7R0FLRztBQUNVLFFBQUEscUJBQXFCLEdBQUcsMENBQTBDLENBQUM7QUFFaEY7O0dBRUc7QUFDVSxRQUFBLDBCQUEwQixHQUFHLElBQUksTUFBTSxDQUNsRCxJQUFJLDZCQUFxQixDQUFDLE1BQU0sR0FBRyxDQUNwQyxDQUFDO0FBRUY7O0dBRUc7QUFDSCxTQUFnQixnQkFBZ0IsQ0FBQyxLQUFhO0lBQzVDLE9BQU8sNkJBQXFCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzNDLENBQUM7QUFGRCw0Q0FFQztBQUVEOzs7R0FHRztBQUNILE1BQWEsU0FBUztJQUNwQjs7T0FFRztJQUNJLE9BQU8sQ0FBQyxLQUFVO1FBQ3ZCLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFLENBQUM7WUFDOUIsT0FBTyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNqQyxDQUFDO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQ7O09BRUc7SUFDSSxJQUFJLENBQUMsS0FBVTtRQUNwQixRQUFRLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDckIsS0FBSyxRQUFRO2dCQUNYLE9BQU8sZUFBZSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUEscUJBQVksRUFBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUM7WUFDL0Q7Z0JBQ0UsTUFBTSxJQUFJLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1FBQzlDLENBQUM7SUFDSCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxXQUFXLENBQUMsSUFBbUIsRUFBRSxLQUFVO1FBQ2hELFFBQVEsT0FBTyxLQUFLLEVBQUUsQ0FBQztZQUNyQixLQUFLLFFBQVE7Z0JBQ1gsTUFBTSxPQUFPLEdBQUcsSUFBQSxxQkFBWSxFQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNwQyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztnQkFDcEMsTUFBTTtZQUNSO2dCQUNFLE1BQU0sSUFBSSxLQUFLLENBQUMsd0JBQXdCLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDckQsQ0FBQztJQUNILENBQUM7Q0FDRjtBQXJDRCw4QkFxQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJVG9rZW5SZXNvbHZlciwgdG9rZW5FbnZOYW1lIH0gZnJvbSBcIi4uL2NvcmUvdG9rZW5zXCI7XG5pbXBvcnQgeyBJSW5mbGlnaHRIb3N0LCBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vc3RkXCI7XG5cbi8qKlxuICogUHJvZHVjZSBhIHRva2VuIHRoYXQgd2lsbCBiZSByZXBsYWNlZCB3aXRoIHRoZSBoYW5kbGUgb2YgYSByZXNvdXJjZVxuICogd2hlbiB0aGUgc2ltdWxhdG9yIGlzIHN0YXJ0ZWQuIFRoaXMgY2FuIGJlIGluc2VydGVkIHRvIGFuIGVudmlyb25tZW50IHZhcmlhYmxlXG4gKiBzbyB0aGF0IHRoZSByZWFsIHZhbHVlIGNhbiBiZSB1c2VkIGJ5IGFuIGluZmxpZ2h0IGZ1bmN0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2ltdWxhdG9ySGFuZGxlVG9rZW4ocmVzb3VyY2U6IElSZXNvdXJjZSk6IHN0cmluZyB7XG4gIHJldHVybiBzaW11bGF0b3JBdHRyVG9rZW4ocmVzb3VyY2UsIFwiaGFuZGxlXCIpO1xufVxuXG4vKipcbiAqIFByb2R1Y2UgYSB0b2tlbiB0aGF0IHdpbGwgYmUgcmVwbGFjZWQgd2l0aCBhIGRlcGxveS10aW1lIHJlc291cmNlIGF0dHJpYnV0ZVxuICogd2hlbiB0aGUgc2ltdWxhdG9yIGlzIHN0YXJ0ZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaW11bGF0b3JBdHRyVG9rZW4oXG4gIHJlc291cmNlOiBJUmVzb3VyY2UsXG4gIGF0dHJOYW1lOiBzdHJpbmdcbik6IHN0cmluZyB7XG4gIHJldHVybiBgXFwke3dzaW0jJHtyZXNvdXJjZS5ub2RlLnBhdGh9I2F0dHJzLiR7YXR0ck5hbWV9fWA7XG59XG5cbi8qKlxuICogUmVndWxhciBleHByZXNzaW9uIHRoYXQgbWF0Y2hlcyBhIHNpbXVsYXRvciB0b2tlbi4gVGhpcyBpcyBhIHNlcXVlbmNlIG9mXG4gKiBjaGFyYWN0ZXJzIHRoYXQgY2FuIGFwcGVhciBpbiB0aGUgbWlkZGxlIG9mIGFueSBzdHJpbmcgaW4gdGhlIGZvbGxvd2luZyBmb3JtYXQ6XG4gKlxuICogJHt3c2ltI3BhdGgvdG8vcmVzb3VyY2UjcHJvcGVydHkucGF0aH1cbiAqL1xuZXhwb3J0IGNvbnN0IFNJTVVMQVRPUl9UT0tFTl9SRUdFWCA9IC9cXCRcXHt3c2ltI1teI1xce1xcfV0rI1thLXpBLVowLTlfXFwtXFwvXFwuXStcXH0vO1xuXG4vKipcbiAqIFRoZSBzYW1lIGFzIFNJTVVMQVRPUl9UT0tFTl9SRUdFWCwgYnV0IGl0IG11c3QgbWF0Y2ggdGhlIGVudGlyZSBzdHJpbmcuXG4gKi9cbmV4cG9ydCBjb25zdCBTSU1VTEFUT1JfVE9LRU5fUkVHRVhfRlVMTCA9IG5ldyBSZWdFeHAoXG4gIGBeJHtTSU1VTEFUT1JfVE9LRU5fUkVHRVguc291cmNlfSRgXG4pO1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpcyB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBTaW11bGF0b3IgdG9rZW4uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1NpbXVsYXRvclRva2VuKHZhbHVlOiBzdHJpbmcpIHtcbiAgcmV0dXJuIFNJTVVMQVRPUl9UT0tFTl9SRUdFWC50ZXN0KHZhbHVlKTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIHZhbHVlcyB0aGF0IGNhbiBvbmx5IGJlIHJlc29sdmVkIGFmdGVyIHRoZSBhcHAgaXMgc3ludGhlc2l6ZWQuXG4gKiBUb2tlbnMgdmFsdWVzIGFyZSBjYXB0dXJlZCBhcyBlbnZpcm9ubWVudCB2YXJpYWJsZSwgYW5kIHJlc29sdmVkIHRocm91Z2ggdGhlIGNvbXBpbGF0aW9uIHRhcmdldCB0b2tlbiBtZWNoYW5pc20uXG4gKi9cbmV4cG9ydCBjbGFzcyBTaW1Ub2tlbnMgaW1wbGVtZW50cyBJVG9rZW5SZXNvbHZlciB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaXMgdGhlIGdpdmVuIHZhbHVlIGlzIGEgU2ltdWxhdG9yIHRva2VuLlxuICAgKi9cbiAgcHVibGljIGlzVG9rZW4odmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHJldHVybiBpc1NpbXVsYXRvclRva2VuKHZhbHVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogTGlmdHMgYSB2YWx1ZSBpbnRvIGFuIGluZmxpZ2h0IGNvbnRleHQuXG4gICAqL1xuICBwdWJsaWMgbGlmdCh2YWx1ZTogYW55KTogc3RyaW5nIHtcbiAgICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgICByZXR1cm4gYHByb2Nlc3MuZW52WyR7SlNPTi5zdHJpbmdpZnkodG9rZW5FbnZOYW1lKHZhbHVlKSl9XWA7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIHRva2VuIHR5cGVgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTGlmdHMgdGhlIGdpdmVuIHRva2VuIHRvIHRoZSBob3N0LlxuICAgKi9cbiAgcHVibGljIG9uTGlmdFZhbHVlKGhvc3Q6IElJbmZsaWdodEhvc3QsIHZhbHVlOiBhbnkpIHtcbiAgICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgICBjb25zdCBlbnZOYW1lID0gdG9rZW5FbnZOYW1lKHZhbHVlKTtcbiAgICAgICAgaG9zdC5hZGRFbnZpcm9ubWVudChlbnZOYW1lLCB2YWx1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gbGlmdCB0b2tlbiAke3ZhbHVlfWApO1xuICAgIH1cbiAgfVxufVxuIl19