"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Container = void 0;
const child_process_1 = require("child_process");
const fs = __importStar(require("fs/promises"));
const path_1 = require("path");
const container_1 = require("./container");
const util_1 = require("./util");
const fs_1 = require("../fs");
const misc_1 = require("../shared/misc");
const simulator_1 = require("../simulator/simulator");
const std_1 = require("../std");
const util_2 = require("../util");
const STATE_FILENAME = "state.json";
class Container {
    constructor(props) {
        this.props = props;
        this.imageTag = props.imageTag;
        this.containerName = `wing-${util_2.Util.ulid()}`.toLocaleLowerCase();
        this.managedVolumes = {};
    }
    get context() {
        if (!this._context) {
            throw new Error("Cannot access context during class construction");
        }
        return this._context;
    }
    async init(context) {
        try {
            return await this.start(context);
        }
        catch (e) {
            this.addTrace(`Failed to start container: ${e.message}`, std_1.TraceType.RESOURCE, std_1.LogLevel.ERROR);
            return {};
        }
    }
    async start(context) {
        this._context = context;
        // Check for a previous state file to see if there was a port that was previously being used
        // if so, try to use it out of convenience
        const state = await this.loadState();
        if (state.managedVolumes) {
            this.managedVolumes = state.managedVolumes;
        }
        await this.prepareImage();
        // start the new container
        const dockerRun = [];
        dockerRun.push("-i");
        dockerRun.push("--rm");
        dockerRun.push("--name", this.containerName);
        if (this.props.network) {
            dockerRun.push(`--network=${this.props.network}`);
        }
        if (this.props.containerPort) {
            dockerRun.push("-p", this.props.containerPort.toString());
        }
        const envFile = await this.createEnvFile();
        if (envFile) {
            dockerRun.push("--env-file", envFile);
        }
        for (const volume of this.props.volumes ?? []) {
            dockerRun.push("-v");
            // if the user specified an anonymous volume
            if (volume.startsWith("/") && !volume.includes(":")) {
                // check if we have a managed volume for this path from a previous run
                if (this.managedVolumes[volume]) {
                    const volumeName = this.managedVolumes[volume];
                    dockerRun.push(`${volumeName}:${volume}`);
                }
                else {
                    const volumeName = `wing-volume-${util_2.Util.ulid()}`;
                    dockerRun.push(`${volumeName}:${volume}`);
                    this.managedVolumes[volume] = volumeName;
                }
            }
            else {
                dockerRun.push(volume);
            }
        }
        if (this.props.entrypoint) {
            dockerRun.push("--entrypoint");
            dockerRun.push(this.props.entrypoint);
        }
        dockerRun.push(this.imageTag);
        for (const a of this.props.args ?? []) {
            dockerRun.push(a);
        }
        this.addTrace(`Starting container from ${this.imageTag}`, std_1.TraceType.RESOURCE, std_1.LogLevel.VERBOSE);
        this.child = this.dockerSpawn("run", dockerRun, {
            logLevel: std_1.LogLevel.INFO,
        });
        this.addTrace(`Waiting for container to ${this.props.containerPort
            ? `listen to ${this.props.containerPort}`
            : "start"}`, std_1.TraceType.RESOURCE, std_1.LogLevel.VERBOSE);
        let hostPort;
        await waitUntil(async () => {
            if (!this.child?.running) {
                throw new Error(`Container ${this.imageTag} stopped unexpectedly`);
            }
            const container = await this.tryInspect(this.containerName);
            // if we are waiting for a port, check if the container is listening to it
            if (this.props.containerPort) {
                // when using the host network, the host port is the same as the container port
                if (this.props.network === "host") {
                    hostPort = this.props.containerPort.toString();
                    return (container?.[0]?.Config?.ExposedPorts?.[`${hostPort}/tcp`] !==
                        undefined);
                }
                hostPort =
                    container?.[0]?.NetworkSettings?.Ports?.[`${this.props.containerPort}/tcp`]?.[0]?.HostPort;
                return hostPort !== undefined;
            }
            // if we are not waiting for a port, just check if the container is running
            return container?.[0]?.State?.Running;
        });
        this.addTrace(`Container ${this.imageTag} started`, std_1.TraceType.RESOURCE, std_1.LogLevel.VERBOSE);
        return {
            [container_1.HOST_PORT_ATTR]: hostPort,
        };
    }
    /**
     * Builds or pulls the docker image used by this container.
     */
    async prepareImage() {
        // if this image is already here, we don't need to do anything
        if (await this.tryInspect(this.imageTag)) {
            this.addTrace(`Image ${this.imageTag} found, No need to build or pull.`, std_1.TraceType.RESOURCE, std_1.LogLevel.VERBOSE);
            return;
        }
        // if this a reference to a local directory, build the image from a docker file
        if ((0, misc_1.isPath)(this.props.image)) {
            this.addTrace(`Building ${this.imageTag} from ${this.props.image}...`, std_1.TraceType.RESOURCE, std_1.LogLevel.VERBOSE);
            await this.docker("build", ["-t", this.imageTag, this.props.image], {
                logLevel: std_1.LogLevel.VERBOSE,
            });
        }
        else {
            this.addTrace(`Pulling ${this.imageTag}...`, std_1.TraceType.RESOURCE, std_1.LogLevel.VERBOSE);
            await this.docker("pull", [this.imageTag], {
                logLevel: std_1.LogLevel.VERBOSE,
            });
        }
    }
    async createEnvFile() {
        const env = this.props.env ?? {};
        if (Object.keys(env).length === 0) {
            return undefined;
        }
        const envFile = (0, path_1.join)(fs_1.Util.mkdtemp(), "env.json");
        const envLines = [];
        for (const k of Object.keys(env)) {
            envLines.push(`${k}=${env[k]}`);
        }
        await fs.writeFile(envFile, envLines.join("\n"));
        return envFile;
    }
    async tryInspect(name) {
        try {
            return JSON.parse(await this.docker("inspect", [name], {
                quiet: true,
            }));
        }
        catch {
            return undefined;
        }
    }
    async cleanup() {
        this.addTrace(`Stopping container ${this.containerName}`, std_1.TraceType.RESOURCE, std_1.LogLevel.VERBOSE);
        await this.child?.kill();
    }
    async save() {
        await this.saveState({ managedVolumes: this.managedVolumes });
    }
    async loadState() {
        const stateFileExists = await (0, util_1.exists)((0, path_1.join)(this.context.statedir, STATE_FILENAME));
        if (stateFileExists) {
            const stateFileContents = await fs.readFile((0, path_1.join)(this.context.statedir, STATE_FILENAME), "utf-8");
            return JSON.parse(stateFileContents);
        }
        else {
            return {};
        }
    }
    async docker(command, args, options = {}) {
        const child = this.dockerSpawn(command, args, options);
        return child.join();
    }
    dockerSpawn(command, args, options = {}) {
        let quiet = options.quiet ?? false;
        const level = options.logLevel ?? std_1.LogLevel.INFO;
        const logErrors = !quiet;
        // can be used to hide container logs (used in our end to end tests). yes, ugly bit pragmatic.
        // otherwise, test output will include lots of non deterministic stuff and that's really hard to
        // snapshot.
        if (process.env.WING_HIDE_CONTAINER_LOGS) {
            quiet = true;
        }
        const commandDesc = `docker ${command}`;
        this.addTrace(`$ ${commandDesc} ${args.join(" ")}`, std_1.TraceType.RESOURCE, std_1.LogLevel.VERBOSE);
        const child = (0, child_process_1.spawn)("docker", [command, ...args], {
            cwd: this.props.cwd,
            stdio: "pipe",
        });
        let started = true;
        child.once("exit", () => {
            started = false;
        });
        const stdout = [];
        const allOutput = [];
        child.stdout.on("data", (data) => {
            stdout.push(data);
            allOutput.push(data);
        });
        child.stderr.on("data", (data) => {
            allOutput.push(data);
        });
        if (!quiet) {
            child.stdout.on("data", (data) => this.addTrace(data.toString(), std_1.TraceType.LOG, level));
            child.stderr.on("data", (data) => this.addTrace(data.toString(), std_1.TraceType.LOG, level));
        }
        child.once("error", (err) => {
            started = false;
            if (logErrors) {
                this.addTrace(err.stack ?? err.message, std_1.TraceType.LOG, std_1.LogLevel.ERROR);
            }
        });
        const self = this;
        return {
            get running() {
                return started;
            },
            async kill() {
                return new Promise((resolve, reject) => {
                    if (!started) {
                        return resolve();
                    }
                    self.addTrace("Sending SIGTERM to container", std_1.TraceType.RESOURCE, std_1.LogLevel.VERBOSE);
                    child.kill("SIGTERM");
                    // if the process doesn't exit in 2 seconds, kill it
                    const timeout = setTimeout(() => {
                        self.addTrace(`Timeout waiting for container ${self._context?.resourcePath} to shutdown, removing forcefully`, std_1.TraceType.RESOURCE, std_1.LogLevel.WARNING);
                        self
                            .docker("rm", ["-f", self.containerName], { quiet: true })
                            .catch(() => { });
                    }, 2000);
                    child.once("error", (err) => {
                        self.addTrace(`Error when shutting down container: ${err.stack ?? err.message}`, std_1.TraceType.RESOURCE, std_1.LogLevel.ERROR);
                        clearTimeout(timeout);
                        reject(err);
                    });
                    child.once("exit", () => {
                        self.addTrace("Container shutdown successfully", std_1.TraceType.RESOURCE, std_1.LogLevel.VERBOSE);
                        clearTimeout(timeout);
                        resolve();
                    });
                });
            },
            async join() {
                return new Promise((ok, ko) => {
                    if (!started) {
                        return ok(stdout.join(""));
                    }
                    child.once("error", ko);
                    child.once("exit", (code) => {
                        if (code === 0) {
                            return ok(stdout.join(""));
                        }
                        else {
                            const message = `Command "${commandDesc}" exited with non-zero code ${code}`;
                            if (logErrors) {
                                self.addTrace(`${message}}\n${allOutput.join("")}`, std_1.TraceType.RESOURCE, std_1.LogLevel.VERBOSE);
                            }
                            return ko(new Error(`${message} (see verbose logs)`));
                        }
                    });
                });
            },
        };
    }
    async saveState(state) {
        await fs.writeFile((0, path_1.join)(this.context.statedir, STATE_FILENAME), JSON.stringify(state));
    }
    async plan() {
        return simulator_1.UpdatePlan.AUTO;
    }
    addTrace(message, type, level) {
        this.context.addTrace({
            data: { message: message.trim() },
            sourcePath: this.context.resourcePath,
            sourceType: "container",
            timestamp: new Date().toISOString(),
            type,
            level,
        });
    }
}
exports.Container = Container;
async function waitUntil(predicate) {
    const timeout = std_1.Duration.fromSeconds(30);
    const interval = std_1.Duration.fromSeconds(0.1);
    let elapsed = 0;
    while (elapsed < timeout.seconds) {
        if (await predicate()) {
            return true;
        }
        elapsed += interval.seconds;
        await util_2.Util.sleep(interval);
    }
    throw new Error("Timeout elapsed");
}
//# sourceMappingURL=data:application/json;base64,