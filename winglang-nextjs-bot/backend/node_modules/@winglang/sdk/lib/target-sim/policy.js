"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Policy = exports.POLICY_FQN = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const tokens_1 = require("./tokens");
const constants_1 = require("../constants");
const std_1 = require("../std");
exports.POLICY_FQN = (0, constants_1.fqnForType)("sim.Policy");
/**
 * Implementation of `sim.Policy`.
 *
 * @inflight `@winglang/sdk.sim.IPolicyClient`
 */
class Policy extends std_1.Resource {
    constructor(scope, id, props) {
        super(scope, id);
        this.statements = new Map();
        this.principal = props.principal;
        std_1.Node.of(this).hidden = true;
        std_1.Node.of(this).title = "Policy";
        std_1.Node.of(this).description = "A simulated resource policy";
    }
    /** @internal */
    get _liftMap() {
        return {};
    }
    /**
     * Adds a statement to the policy.
     */
    addStatement(resource, op) {
        if (!this.statements.has(resource)) {
            this.statements.set(resource, new Set());
        }
        this.statements.get(resource).add(op);
    }
    toSimulator() {
        const statements = [];
        for (const [resource, ops] of this.statements.entries()) {
            for (const op of ops) {
                statements.push({
                    resourceHandle: (0, tokens_1.simulatorHandleToken)(resource),
                    operation: op,
                });
            }
        }
        const props = {
            principal: (0, tokens_1.simulatorHandleToken)(this.principal),
            statements,
        };
        return {
            type: exports.POLICY_FQN,
            props,
        };
    }
}
exports.Policy = Policy;
_a = JSII_RTTI_SYMBOL_1;
Policy[_a] = { fqn: "@winglang/sdk.sim.Policy", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9saWN5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RhcmdldC1zaW0vcG9saWN5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBR0EscUNBQWdEO0FBQ2hELDRDQUEwQztBQUcxQyxnQ0FBbUQ7QUFFdEMsUUFBQSxVQUFVLEdBQUcsSUFBQSxzQkFBVSxFQUFDLFlBQVksQ0FBQyxDQUFDO0FBWW5EOzs7O0dBSUc7QUFDSCxNQUFhLE1BQU8sU0FBUSxjQUFRO0lBSWxDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBa0I7UUFDMUQsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUpGLGVBQVUsR0FBZ0MsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUtuRSxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUM7UUFDakMsVUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1FBQzVCLFVBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQztRQUMvQixVQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsR0FBRyw2QkFBNkIsQ0FBQztJQUM1RCxDQUFDO0lBRUQsZ0JBQWdCO0lBQ2hCLElBQVcsUUFBUTtRQUNqQixPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFRDs7T0FFRztJQUNJLFlBQVksQ0FBQyxRQUFtQixFQUFFLEVBQVU7UUFDakQsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7WUFDbkMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQztRQUMzQyxDQUFDO1FBQ0QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFTSxXQUFXO1FBQ2hCLE1BQU0sVUFBVSxHQUEyQixFQUFFLENBQUM7UUFDOUMsS0FBSyxNQUFNLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQztZQUN4RCxLQUFLLE1BQU0sRUFBRSxJQUFJLEdBQUcsRUFBRSxDQUFDO2dCQUNyQixVQUFVLENBQUMsSUFBSSxDQUFDO29CQUNkLGNBQWMsRUFBRSxJQUFBLDZCQUFvQixFQUFDLFFBQVEsQ0FBQztvQkFDOUMsU0FBUyxFQUFFLEVBQUU7aUJBQ2QsQ0FBQyxDQUFDO1lBQ0wsQ0FBQztRQUNILENBQUM7UUFDRCxNQUFNLEtBQUssR0FBaUI7WUFDMUIsU0FBUyxFQUFFLElBQUEsNkJBQW9CLEVBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUMvQyxVQUFVO1NBQ1gsQ0FBQztRQUNGLE9BQU87WUFDTCxJQUFJLEVBQUUsa0JBQVU7WUFDaEIsS0FBSztTQUNOLENBQUM7SUFDSixDQUFDOztBQTdDSCx3QkE4Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgSVNpbXVsYXRvclJlc291cmNlIH0gZnJvbSBcIi4vcmVzb3VyY2VcIjtcbmltcG9ydCB7IFBvbGljeVNjaGVtYSB9IGZyb20gXCIuL3NjaGVtYS1yZXNvdXJjZXNcIjtcbmltcG9ydCB7IHNpbXVsYXRvckhhbmRsZVRva2VuIH0gZnJvbSBcIi4vdG9rZW5zXCI7XG5pbXBvcnQgeyBmcW5Gb3JUeXBlIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgTGlmdE1hcCB9IGZyb20gXCIuLi9jb3JlXCI7XG5pbXBvcnQgeyBQb2xpY3lTdGF0ZW1lbnQsIFRvU2ltdWxhdG9yT3V0cHV0IH0gZnJvbSBcIi4uL3NpbXVsYXRvclwiO1xuaW1wb3J0IHsgSVJlc291cmNlLCBOb2RlLCBSZXNvdXJjZSB9IGZyb20gXCIuLi9zdGRcIjtcblxuZXhwb3J0IGNvbnN0IFBPTElDWV9GUU4gPSBmcW5Gb3JUeXBlKFwic2ltLlBvbGljeVwiKTtcblxuLyoqXG4gKiBPcHRpb25zIGZvciBgc2ltLlBvbGljeWAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUG9saWN5UHJvcHMge1xuICAvKipcbiAgICogVGhlIHJlc291cmNlIHRvIHdoaWNoIHRoZSBwb2xpY3kgaXMgYXR0YWNoZWQuXG4gICAqL1xuICByZWFkb25seSBwcmluY2lwYWw6IElSZXNvdXJjZTtcbn1cblxuLyoqXG4gKiBJbXBsZW1lbnRhdGlvbiBvZiBgc2ltLlBvbGljeWAuXG4gKlxuICogQGluZmxpZ2h0IGBAd2luZ2xhbmcvc2RrLnNpbS5JUG9saWN5Q2xpZW50YFxuICovXG5leHBvcnQgY2xhc3MgUG9saWN5IGV4dGVuZHMgUmVzb3VyY2UgaW1wbGVtZW50cyBJU2ltdWxhdG9yUmVzb3VyY2Uge1xuICBwcml2YXRlIHJlYWRvbmx5IHN0YXRlbWVudHM6IE1hcDxJUmVzb3VyY2UsIFNldDxzdHJpbmc+PiA9IG5ldyBNYXAoKTtcbiAgcHJpdmF0ZSByZWFkb25seSBwcmluY2lwYWw6IElSZXNvdXJjZTtcblxuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogUG9saWN5UHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgIHRoaXMucHJpbmNpcGFsID0gcHJvcHMucHJpbmNpcGFsO1xuICAgIE5vZGUub2YodGhpcykuaGlkZGVuID0gdHJ1ZTtcbiAgICBOb2RlLm9mKHRoaXMpLnRpdGxlID0gXCJQb2xpY3lcIjtcbiAgICBOb2RlLm9mKHRoaXMpLmRlc2NyaXB0aW9uID0gXCJBIHNpbXVsYXRlZCByZXNvdXJjZSBwb2xpY3lcIjtcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHVibGljIGdldCBfbGlmdE1hcCgpOiBMaWZ0TWFwIHtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIHN0YXRlbWVudCB0byB0aGUgcG9saWN5LlxuICAgKi9cbiAgcHVibGljIGFkZFN0YXRlbWVudChyZXNvdXJjZTogSVJlc291cmNlLCBvcDogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLnN0YXRlbWVudHMuaGFzKHJlc291cmNlKSkge1xuICAgICAgdGhpcy5zdGF0ZW1lbnRzLnNldChyZXNvdXJjZSwgbmV3IFNldCgpKTtcbiAgICB9XG4gICAgdGhpcy5zdGF0ZW1lbnRzLmdldChyZXNvdXJjZSkhLmFkZChvcCk7XG4gIH1cblxuICBwdWJsaWMgdG9TaW11bGF0b3IoKTogVG9TaW11bGF0b3JPdXRwdXQge1xuICAgIGNvbnN0IHN0YXRlbWVudHM6IEFycmF5PFBvbGljeVN0YXRlbWVudD4gPSBbXTtcbiAgICBmb3IgKGNvbnN0IFtyZXNvdXJjZSwgb3BzXSBvZiB0aGlzLnN0YXRlbWVudHMuZW50cmllcygpKSB7XG4gICAgICBmb3IgKGNvbnN0IG9wIG9mIG9wcykge1xuICAgICAgICBzdGF0ZW1lbnRzLnB1c2goe1xuICAgICAgICAgIHJlc291cmNlSGFuZGxlOiBzaW11bGF0b3JIYW5kbGVUb2tlbihyZXNvdXJjZSksXG4gICAgICAgICAgb3BlcmF0aW9uOiBvcCxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHByb3BzOiBQb2xpY3lTY2hlbWEgPSB7XG4gICAgICBwcmluY2lwYWw6IHNpbXVsYXRvckhhbmRsZVRva2VuKHRoaXMucHJpbmNpcGFsKSxcbiAgICAgIHN0YXRlbWVudHMsXG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogUE9MSUNZX0ZRTixcbiAgICAgIHByb3BzLFxuICAgIH07XG4gIH1cbn1cblxuLyoqXG4gKiBJbmZsaWdodCBpbnRlcmZhY2UgZm9yIGBQb2xpY3lgLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElQb2xpY3lDbGllbnQge31cbiJdfQ==