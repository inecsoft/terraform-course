"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSimulatorResource = exports.isSimulatorInflightHost = exports.ResourceInflightMethods = exports.Resource = exports.SIM_RESOURCE_FQN = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const fs_1 = require("fs");
const path_1 = require("path");
const tokens_1 = require("./tokens");
const util_1 = require("./util");
const core_1 = require("../core");
const resource_names_1 = require("../shared/resource-names");
const std_1 = require("../std");
/**
 * Global identifier for `sim.Resource`.
 */
exports.SIM_RESOURCE_FQN = "@winglang/sdk.sim.Resource";
/**
 * A backend for a simulated resource.
 * @inflight `@winglang/sdk.sim.IResourceClient`
 */
class Resource extends std_1.Resource {
    constructor(scope, id, factory) {
        super(scope, id);
        this.permissions = [];
        this._env = {};
        std_1.Node.of(this).title = "Resource";
        std_1.Node.of(this).description = "A simulated resource";
        std_1.Node.of(this).color = "emerald";
        const assetName = resource_names_1.ResourceNames.generateName(this, {
            disallowedRegex: /[><:"/\\|?*\s]/g, // avoid characters that may cause path issues
            case: resource_names_1.CaseConventions.LOWERCASE,
            sep: "_",
        });
        const workdir = core_1.App.of(this).workdir;
        (0, fs_1.mkdirSync)(workdir, { recursive: true });
        const entrypoint = (0, path_1.join)(workdir, `${assetName}.cjs`);
        this.entrypoint = entrypoint;
        if (process.env.WING_TARGET) {
            this.addEnvironment("WING_TARGET", process.env.WING_TARGET);
        }
        this.factory = factory;
    }
    addPermission(resource, op) {
        this.permissions.push([resource, op]);
    }
    /** @internal */
    get _liftMap() {
        return {
            [ResourceInflightMethods.CALL]: [],
        };
    }
    /**
     * Obtain a token that can be used to reference an attribute of this
     * resource that is only resolved once the resource is started in the simulator.
     *
     * If the token is used in inflight code or in the configuration of a simulated
     * resource (e.g. as an environment variable), the relevant resource will
     * automatically take a dependency on the resource the token belongs to.
     *
     * @param name The name of the token.
     * @returns A string token.
     */
    createToken(name) {
        return (0, tokens_1.simulatorAttrToken)(this, name);
    }
    /** @internal */
    _preSynthesize() {
        super._preSynthesize();
        const onStopMethod = "onStop";
        const inflightClient = this.factory._toInflight();
        const code = `\
        "use strict";
        let $klass;
        exports.start = async function(statedir) {
          if ($klass) {
            throw Error('resource already started');
          }
          const attrs = {};
          const ctx = {};
          ctx.statedir = async () => statedir;
          ctx.resolveToken = async (name, value) => attrs[name] = value;
          ctx.log = async (message, level) => {
            if (!level) level = 'info';
            console.log(level + ':' + message);
          };
          const client = ${inflightClient};
          const noop = { ${onStopMethod}: () => {} };
          const klass = (await client.handle(ctx)) ?? noop;
          ctx.resolveToken = () => {
            throw Error('cannot resolve attributes outside of onStop method');
          };
          $klass = klass;
          return attrs;
        };

        exports.call = async function(propName, ...args) {
          if (!$klass) {
            throw Error('Resource is not running (it may have crashed or stopped)');
          }
          if (propName === '${onStopMethod}') {
            throw Error('Cannot call "${onStopMethod}"');
          }
          const prop = $klass[propName];
          if (!prop) {
            throw Error('Method or property "' + propName + '" not found');
          }
          if (typeof prop !== 'function') {
            if (args.length > 0) {
              throw Error('Property "' + propName + '" is not a function');
            }
            return prop;
          }
          return await prop.call($klass, ...args);
        };

        exports.stop = async function() {
          if (!$klass) {
            throw Error('Resource is not running (it may have crashed or stopped)');
          }
          await $klass.${onStopMethod}();
          $klass = undefined;
        };
        `;
        (0, fs_1.writeFileSync)(this.entrypoint, code);
        // indicates that we are calling the inflight constructor and the
        // inflight "handle" method on the handler resource.
        core_1.Lifting.lift(this.factory, this, ["handle"]);
    }
    /**
     * Add an environment variable to make available to the inflight code.
     */
    addEnvironment(name, value) {
        if (this._env[name] !== undefined && this._env[name] !== value) {
            throw new Error(`Environment variable "${name}" already set with a different value.`);
        }
        this._env[name] = value;
    }
    toSimulator() {
        const policy = [];
        for (const [resource, operation] of this.permissions) {
            policy.push({
                operation,
                resourceHandle: (0, tokens_1.simulatorHandleToken)(resource),
            });
        }
        const props = {
            environmentVariables: this._env,
            sourceCodeFile: (0, path_1.relative)(core_1.App.of(this).outdir, this.entrypoint),
            sourceCodeLanguage: "javascript",
        };
        return {
            type: exports.SIM_RESOURCE_FQN,
            props,
            policy,
        };
    }
    onLift(host, ops) {
        (0, util_1.bindSimulatorResource)(__filename, this, host, ops);
        super.onLift(host, ops);
    }
    /** @internal */
    _toInflight() {
        return (0, util_1.makeSimulatorJsClient)(__filename, this);
    }
}
exports.Resource = Resource;
_a = JSII_RTTI_SYMBOL_1;
Resource[_a] = { fqn: "@winglang/sdk.sim.Resource", version: "0.0.0" };
/**
 * List of inflight operations available for `Resource`.
 * @internal
 */
var ResourceInflightMethods;
(function (ResourceInflightMethods) {
    ResourceInflightMethods["CALL"] = "call";
})(ResourceInflightMethods || (exports.ResourceInflightMethods = ResourceInflightMethods = {}));
function isSimulatorInflightHost(obj) {
    return (typeof obj == "object" &&
        typeof obj.addPermission === "function");
}
exports.isSimulatorInflightHost = isSimulatorInflightHost;
function isSimulatorResource(obj) {
    return (typeof obj == "object" &&
        typeof obj.toSimulator === "function");
}
exports.isSimulatorResource = isSimulatorResource;
//# sourceMappingURL=data:application/json;base64,