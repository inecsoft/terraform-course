"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScheduleOnTickHandler = exports.Schedule = void 0;
const app_1 = require("./app");
const event_mapping_1 = require("./event-mapping");
const policy_1 = require("./policy");
const util_1 = require("./util");
const cloud_1 = require("../cloud");
const cloud = __importStar(require("../cloud"));
const core_1 = require("../core");
const std_1 = require("../std");
/**
 * Simulator implementation of `cloud.Schedule`.
 *
 * @inflight `@winglang/sdk.cloud.IScheduleClient`
 */
class Schedule extends cloud.Schedule {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        const { rate, cron } = props;
        this.cronExpression = cron ?? (0, util_1.convertDurationToCronExpression)(rate);
        this.policy = new policy_1.Policy(this, "Policy", { principal: this });
    }
    onTick(inflight, props = {}) {
        const functionHandler = ScheduleOnTickHandler.toFunctionHandler(inflight);
        const fn = new cloud_1.Function(this, app_1.App.of(this).makeId(this, "OnTick"), functionHandler, props);
        std_1.Node.of(fn).sourceModule = std_1.SDK_SOURCE_MODULE;
        std_1.Node.of(fn).title = "Tick";
        new event_mapping_1.EventMapping(this, app_1.App.of(this).makeId(this, "OnTickMapping"), {
            subscriber: fn,
            publisher: this,
            subscriptionProps: {},
        });
        std_1.Node.of(this).addConnection({
            source: this,
            sourceOp: cloud.ScheduleInflightMethods.TICK,
            target: fn,
            targetOp: cloud.FunctionInflightMethods.INVOKE,
            name: "tick",
        });
        this.policy.addStatement(fn, cloud.FunctionInflightMethods.INVOKE);
        return fn;
    }
    toSimulator() {
        const props = {
            cronExpression: this.cronExpression,
        };
        return {
            type: cloud.SCHEDULE_FQN,
            props,
        };
    }
    /** @internal */
    _toInflight() {
        return (0, util_1.makeSimulatorJsClient)(__filename, this);
    }
    onLift(host, ops) {
        (0, util_1.bindSimulatorResource)(__filename, this, host, ops);
        super.onLift(host, ops);
    }
}
exports.Schedule = Schedule;
/**
 * Utility class to work with schedule on tick handlers.
 */
class ScheduleOnTickHandler {
    /**
     * Converts a `cloud.IScheduleOnTickHandler` to a `cloud.IFunctionHandler`.
     * @param handler the handler to convert
     * @returns the function handler
     */
    static toFunctionHandler(handler) {
        return (0, core_1.lift)({ handler }).inflight(async (ctx) => {
            await ctx.handler();
            return undefined;
        });
    }
}
exports.ScheduleOnTickHandler = ScheduleOnTickHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZWR1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGFyZ2V0LXNpbS9zY2hlZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBLCtCQUE0QjtBQUM1QixtREFBK0M7QUFDL0MscUNBQWtDO0FBR2xDLGlDQUlnQjtBQUNoQixvQ0FBb0M7QUFDcEMsZ0RBQWtDO0FBQ2xDLGtDQUErQjtBQUUvQixnQ0FBZ0U7QUFFaEU7Ozs7R0FJRztBQUNILE1BQWEsUUFBUyxTQUFRLEtBQUssQ0FBQyxRQUFRO0lBSTFDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsUUFBNkIsRUFBRTtRQUN2RSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN4QixNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQztRQUU3QixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksSUFBSSxJQUFBLHNDQUErQixFQUFDLElBQUssQ0FBQyxDQUFDO1FBQ3JFLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxlQUFNLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFTSxNQUFNLENBQ1gsUUFBc0MsRUFDdEMsUUFBcUMsRUFBRTtRQUV2QyxNQUFNLGVBQWUsR0FBRyxxQkFBcUIsQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMxRSxNQUFNLEVBQUUsR0FBRyxJQUFJLGdCQUFRLENBQ3JCLElBQUksRUFDSixTQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLEVBQ25DLGVBQWUsRUFDZixLQUFLLENBQ04sQ0FBQztRQUNGLFVBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsWUFBWSxHQUFHLHVCQUFpQixDQUFDO1FBQzdDLFVBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQztRQUUzQixJQUFJLDRCQUFZLENBQUMsSUFBSSxFQUFFLFNBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxlQUFlLENBQUMsRUFBRTtZQUNqRSxVQUFVLEVBQUUsRUFBRTtZQUNkLFNBQVMsRUFBRSxJQUFJO1lBQ2YsaUJBQWlCLEVBQUUsRUFBRTtTQUN0QixDQUFDLENBQUM7UUFFSCxVQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLGFBQWEsQ0FBQztZQUMxQixNQUFNLEVBQUUsSUFBSTtZQUNaLFFBQVEsRUFBRSxLQUFLLENBQUMsdUJBQXVCLENBQUMsSUFBSTtZQUM1QyxNQUFNLEVBQUUsRUFBRTtZQUNWLFFBQVEsRUFBRSxLQUFLLENBQUMsdUJBQXVCLENBQUMsTUFBTTtZQUM5QyxJQUFJLEVBQUUsTUFBTTtTQUNiLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFbkUsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRU0sV0FBVztRQUNoQixNQUFNLEtBQUssR0FBbUI7WUFDNUIsY0FBYyxFQUFFLElBQUksQ0FBQyxjQUFjO1NBQ3BDLENBQUM7UUFDRixPQUFPO1lBQ0wsSUFBSSxFQUFFLEtBQUssQ0FBQyxZQUFZO1lBQ3hCLEtBQUs7U0FDTixDQUFDO0lBQ0osQ0FBQztJQUVELGdCQUFnQjtJQUNULFdBQVc7UUFDaEIsT0FBTyxJQUFBLDRCQUFxQixFQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRU0sTUFBTSxDQUFDLElBQW1CLEVBQUUsR0FBYTtRQUM5QyxJQUFBLDRCQUFxQixFQUFDLFVBQVUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ25ELEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQzFCLENBQUM7Q0FDRjtBQS9ERCw0QkErREM7QUFFRDs7R0FFRztBQUNILE1BQWEscUJBQXFCO0lBQ2hDOzs7O09BSUc7SUFDSSxNQUFNLENBQUMsaUJBQWlCLENBQzdCLE9BQXFDO1FBRXJDLE9BQU8sSUFBQSxXQUFJLEVBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDOUMsTUFBTSxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDcEIsT0FBTyxTQUFTLENBQUM7UUFDbkIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUFkRCxzREFjQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgeyBBcHAgfSBmcm9tIFwiLi9hcHBcIjtcbmltcG9ydCB7IEV2ZW50TWFwcGluZyB9IGZyb20gXCIuL2V2ZW50LW1hcHBpbmdcIjtcbmltcG9ydCB7IFBvbGljeSB9IGZyb20gXCIuL3BvbGljeVwiO1xuaW1wb3J0IHsgSVNpbXVsYXRvclJlc291cmNlIH0gZnJvbSBcIi4vcmVzb3VyY2VcIjtcbmltcG9ydCB7IFNjaGVkdWxlU2NoZW1hIH0gZnJvbSBcIi4vc2NoZW1hLXJlc291cmNlc1wiO1xuaW1wb3J0IHtcbiAgYmluZFNpbXVsYXRvclJlc291cmNlLFxuICBtYWtlU2ltdWxhdG9ySnNDbGllbnQsXG4gIGNvbnZlcnREdXJhdGlvblRvQ3JvbkV4cHJlc3Npb24sXG59IGZyb20gXCIuL3V0aWxcIjtcbmltcG9ydCB7IEZ1bmN0aW9uIH0gZnJvbSBcIi4uL2Nsb3VkXCI7XG5pbXBvcnQgKiBhcyBjbG91ZCBmcm9tIFwiLi4vY2xvdWRcIjtcbmltcG9ydCB7IGxpZnQgfSBmcm9tIFwiLi4vY29yZVwiO1xuaW1wb3J0IHsgVG9TaW11bGF0b3JPdXRwdXQgfSBmcm9tIFwiLi4vc2ltdWxhdG9yXCI7XG5pbXBvcnQgeyBJSW5mbGlnaHRIb3N0LCBOb2RlLCBTREtfU09VUkNFX01PRFVMRSB9IGZyb20gXCIuLi9zdGRcIjtcblxuLyoqXG4gKiBTaW11bGF0b3IgaW1wbGVtZW50YXRpb24gb2YgYGNsb3VkLlNjaGVkdWxlYC5cbiAqXG4gKiBAaW5mbGlnaHQgYEB3aW5nbGFuZy9zZGsuY2xvdWQuSVNjaGVkdWxlQ2xpZW50YFxuICovXG5leHBvcnQgY2xhc3MgU2NoZWR1bGUgZXh0ZW5kcyBjbG91ZC5TY2hlZHVsZSBpbXBsZW1lbnRzIElTaW11bGF0b3JSZXNvdXJjZSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgY3JvbkV4cHJlc3Npb246IHN0cmluZztcbiAgcHJpdmF0ZSByZWFkb25seSBwb2xpY3k6IFBvbGljeTtcblxuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogY2xvdWQuU2NoZWR1bGVQcm9wcyA9IHt9KSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XG4gICAgY29uc3QgeyByYXRlLCBjcm9uIH0gPSBwcm9wcztcblxuICAgIHRoaXMuY3JvbkV4cHJlc3Npb24gPSBjcm9uID8/IGNvbnZlcnREdXJhdGlvblRvQ3JvbkV4cHJlc3Npb24ocmF0ZSEpO1xuICAgIHRoaXMucG9saWN5ID0gbmV3IFBvbGljeSh0aGlzLCBcIlBvbGljeVwiLCB7IHByaW5jaXBhbDogdGhpcyB9KTtcbiAgfVxuXG4gIHB1YmxpYyBvblRpY2soXG4gICAgaW5mbGlnaHQ6IGNsb3VkLklTY2hlZHVsZU9uVGlja0hhbmRsZXIsXG4gICAgcHJvcHM6IGNsb3VkLlNjaGVkdWxlT25UaWNrT3B0aW9ucyA9IHt9XG4gICk6IGNsb3VkLkZ1bmN0aW9uIHtcbiAgICBjb25zdCBmdW5jdGlvbkhhbmRsZXIgPSBTY2hlZHVsZU9uVGlja0hhbmRsZXIudG9GdW5jdGlvbkhhbmRsZXIoaW5mbGlnaHQpO1xuICAgIGNvbnN0IGZuID0gbmV3IEZ1bmN0aW9uKFxuICAgICAgdGhpcyxcbiAgICAgIEFwcC5vZih0aGlzKS5tYWtlSWQodGhpcywgXCJPblRpY2tcIiksXG4gICAgICBmdW5jdGlvbkhhbmRsZXIsXG4gICAgICBwcm9wc1xuICAgICk7XG4gICAgTm9kZS5vZihmbikuc291cmNlTW9kdWxlID0gU0RLX1NPVVJDRV9NT0RVTEU7XG4gICAgTm9kZS5vZihmbikudGl0bGUgPSBcIlRpY2tcIjtcblxuICAgIG5ldyBFdmVudE1hcHBpbmcodGhpcywgQXBwLm9mKHRoaXMpLm1ha2VJZCh0aGlzLCBcIk9uVGlja01hcHBpbmdcIiksIHtcbiAgICAgIHN1YnNjcmliZXI6IGZuLFxuICAgICAgcHVibGlzaGVyOiB0aGlzLFxuICAgICAgc3Vic2NyaXB0aW9uUHJvcHM6IHt9LFxuICAgIH0pO1xuXG4gICAgTm9kZS5vZih0aGlzKS5hZGRDb25uZWN0aW9uKHtcbiAgICAgIHNvdXJjZTogdGhpcyxcbiAgICAgIHNvdXJjZU9wOiBjbG91ZC5TY2hlZHVsZUluZmxpZ2h0TWV0aG9kcy5USUNLLFxuICAgICAgdGFyZ2V0OiBmbixcbiAgICAgIHRhcmdldE9wOiBjbG91ZC5GdW5jdGlvbkluZmxpZ2h0TWV0aG9kcy5JTlZPS0UsXG4gICAgICBuYW1lOiBcInRpY2tcIixcbiAgICB9KTtcbiAgICB0aGlzLnBvbGljeS5hZGRTdGF0ZW1lbnQoZm4sIGNsb3VkLkZ1bmN0aW9uSW5mbGlnaHRNZXRob2RzLklOVk9LRSk7XG5cbiAgICByZXR1cm4gZm47XG4gIH1cblxuICBwdWJsaWMgdG9TaW11bGF0b3IoKTogVG9TaW11bGF0b3JPdXRwdXQge1xuICAgIGNvbnN0IHByb3BzOiBTY2hlZHVsZVNjaGVtYSA9IHtcbiAgICAgIGNyb25FeHByZXNzaW9uOiB0aGlzLmNyb25FeHByZXNzaW9uLFxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IGNsb3VkLlNDSEVEVUxFX0ZRTixcbiAgICAgIHByb3BzLFxuICAgIH07XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIHB1YmxpYyBfdG9JbmZsaWdodCgpOiBzdHJpbmcge1xuICAgIHJldHVybiBtYWtlU2ltdWxhdG9ySnNDbGllbnQoX19maWxlbmFtZSwgdGhpcyk7XG4gIH1cblxuICBwdWJsaWMgb25MaWZ0KGhvc3Q6IElJbmZsaWdodEhvc3QsIG9wczogc3RyaW5nW10pOiB2b2lkIHtcbiAgICBiaW5kU2ltdWxhdG9yUmVzb3VyY2UoX19maWxlbmFtZSwgdGhpcywgaG9zdCwgb3BzKTtcbiAgICBzdXBlci5vbkxpZnQoaG9zdCwgb3BzKTtcbiAgfVxufVxuXG4vKipcbiAqIFV0aWxpdHkgY2xhc3MgdG8gd29yayB3aXRoIHNjaGVkdWxlIG9uIHRpY2sgaGFuZGxlcnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBTY2hlZHVsZU9uVGlja0hhbmRsZXIge1xuICAvKipcbiAgICogQ29udmVydHMgYSBgY2xvdWQuSVNjaGVkdWxlT25UaWNrSGFuZGxlcmAgdG8gYSBgY2xvdWQuSUZ1bmN0aW9uSGFuZGxlcmAuXG4gICAqIEBwYXJhbSBoYW5kbGVyIHRoZSBoYW5kbGVyIHRvIGNvbnZlcnRcbiAgICogQHJldHVybnMgdGhlIGZ1bmN0aW9uIGhhbmRsZXJcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgdG9GdW5jdGlvbkhhbmRsZXIoXG4gICAgaGFuZGxlcjogY2xvdWQuSVNjaGVkdWxlT25UaWNrSGFuZGxlclxuICApOiBjbG91ZC5JRnVuY3Rpb25IYW5kbGVyIHtcbiAgICByZXR1cm4gbGlmdCh7IGhhbmRsZXIgfSkuaW5mbGlnaHQoYXN5bmMgKGN0eCkgPT4ge1xuICAgICAgYXdhaXQgY3R4LmhhbmRsZXIoKTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==