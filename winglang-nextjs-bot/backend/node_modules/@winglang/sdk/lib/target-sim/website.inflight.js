"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Website = void 0;
const path_1 = require("path");
const express_1 = __importDefault(require("express"));
const cloud_1 = require("../cloud");
const simulator_1 = require("../simulator/simulator");
const std_1 = require("../std");
const LOCALHOST_ADDRESS = "127.0.0.1";
class Website {
    constructor(props) {
        // Set up an express server that handles the routes.
        this.app = (0, express_1.default)();
        // Use static directory
        this.app.use(express_1.default.static(props.staticFilesPath));
        this.initiateFileRoutes(props.fileRoutes);
        if (props.errorDocument) {
            let errorDocument = props.errorDocument;
            this.app.get("*", function (_, res) {
                return res.sendFile((0, path_1.join)(props.staticFilesPath, errorDocument));
            });
        }
    }
    initiateFileRoutes(routes) {
        for (const path in routes) {
            this.app.get(`/${path}`, (_, res) => {
                res.setHeader("Content-Type", routes[path].contentType);
                res.send(routes[path].data);
            });
        }
    }
    get context() {
        if (!this._context) {
            throw new Error("Cannot access context during class construction");
        }
        return this._context;
    }
    async init(context) {
        this._context = context;
        // `server.address()` returns `null` until the server is listening
        // on a port. We use a promise to wait for the server to start
        // listening before returning the URL.
        const addrInfo = await new Promise((resolve, reject) => {
            this.server = this.app.listen(0, LOCALHOST_ADDRESS, () => {
                const addr = this.server?.address();
                if (addr && typeof addr === "object" && addr.port) {
                    resolve(addr);
                }
                else {
                    reject(new Error("No address found"));
                }
            });
        });
        this.url = `http://${addrInfo.address}:${addrInfo.port}`;
        this.addTrace(`Website server listening on ${this.url}`, std_1.LogLevel.INFO);
        return {
            url: this.url,
        };
    }
    async cleanup() {
        this.addTrace(`Closing server on ${this.url}`, std_1.LogLevel.VERBOSE);
        this.server?.close();
        this.server?.closeAllConnections();
    }
    async save() { }
    async plan() {
        return simulator_1.UpdatePlan.AUTO;
    }
    addTrace(message, level) {
        this.context.addTrace({
            type: std_1.TraceType.RESOURCE,
            data: {
                message,
            },
            sourcePath: this.context.resourcePath,
            sourceType: cloud_1.WEBSITE_FQN,
            timestamp: new Date().toISOString(),
            level,
        });
    }
}
exports.Website = Website;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vic2l0ZS5pbmZsaWdodC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90YXJnZXQtc2ltL3dlYnNpdGUuaW5mbGlnaHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBRUEsK0JBQTRCO0FBQzVCLHNEQUE4QjtBQUU5QixvQ0FBdUQ7QUFDdkQsc0RBSWdDO0FBQ2hDLGdDQUE2QztBQUU3QyxNQUFNLGlCQUFpQixHQUFHLFdBQVcsQ0FBQztBQUV0QyxNQUFhLE9BQU87SUFNbEIsWUFBWSxLQUFvQjtRQUM5QixvREFBb0Q7UUFDcEQsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFBLGlCQUFPLEdBQUUsQ0FBQztRQUVyQix1QkFBdUI7UUFDdkIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsaUJBQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7UUFFcEQsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUUxQyxJQUFJLEtBQUssQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUN4QixJQUFJLGFBQWEsR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDO1lBRXhDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxVQUFVLENBQUMsRUFBRSxHQUFHO2dCQUNoQyxPQUFPLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBQSxXQUFJLEVBQUMsS0FBSyxDQUFDLGVBQWUsRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDO1lBQ2xFLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztJQUNILENBQUM7SUFFTyxrQkFBa0IsQ0FBQyxNQUFrQjtRQUMzQyxLQUFLLE1BQU0sSUFBSSxJQUFJLE1BQU0sRUFBRSxDQUFDO1lBQzFCLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUU7Z0JBQ2xDLEdBQUcsQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQztnQkFDeEQsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDOUIsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDO0lBQ0gsQ0FBQztJQUVELElBQVksT0FBTztRQUNqQixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ25CLE1BQU0sSUFBSSxLQUFLLENBQUMsaURBQWlELENBQUMsQ0FBQztRQUNyRSxDQUFDO1FBQ0QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7SUFFTSxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQTBCO1FBQzFDLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO1FBQ3hCLGtFQUFrRTtRQUNsRSw4REFBOEQ7UUFDOUQsc0NBQXNDO1FBQ3RDLE1BQU0sUUFBUSxHQUFnQixNQUFNLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ2xFLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLGlCQUFpQixFQUFFLEdBQUcsRUFBRTtnQkFDdkQsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsQ0FBQztnQkFDcEMsSUFBSSxJQUFJLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxJQUFLLElBQW9CLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQ25FLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDaEIsQ0FBQztxQkFBTSxDQUFDO29CQUNOLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hDLENBQUM7WUFDSCxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLEdBQUcsR0FBRyxVQUFVLFFBQVEsQ0FBQyxPQUFPLElBQUksUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1FBRXpELElBQUksQ0FBQyxRQUFRLENBQUMsK0JBQStCLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxjQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFeEUsT0FBTztZQUNMLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRztTQUNkLENBQUM7SUFDSixDQUFDO0lBRU0sS0FBSyxDQUFDLE9BQU87UUFDbEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxxQkFBcUIsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLGNBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNqRSxJQUFJLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxNQUFNLEVBQUUsbUJBQW1CLEVBQUUsQ0FBQztJQUNyQyxDQUFDO0lBRU0sS0FBSyxDQUFDLElBQUksS0FBbUIsQ0FBQztJQUU5QixLQUFLLENBQUMsSUFBSTtRQUNmLE9BQU8sc0JBQVUsQ0FBQyxJQUFJLENBQUM7SUFDekIsQ0FBQztJQUVPLFFBQVEsQ0FBQyxPQUFlLEVBQUUsS0FBZTtRQUMvQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQztZQUNwQixJQUFJLEVBQUUsZUFBUyxDQUFDLFFBQVE7WUFDeEIsSUFBSSxFQUFFO2dCQUNKLE9BQU87YUFDUjtZQUNELFVBQVUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVk7WUFDckMsVUFBVSxFQUFFLG1CQUFXO1lBQ3ZCLFNBQVMsRUFBRSxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRTtZQUNuQyxLQUFLO1NBQ04sQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBeEZELDBCQXdGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNlcnZlciB9IGZyb20gXCJodHRwXCI7XG5pbXBvcnQgeyBBZGRyZXNzSW5mbyB9IGZyb20gXCJuZXRcIjtcbmltcG9ydCB7IGpvaW4gfSBmcm9tIFwicGF0aFwiO1xuaW1wb3J0IGV4cHJlc3MgZnJvbSBcImV4cHJlc3NcIjtcbmltcG9ydCB7IEFwaUF0dHJpYnV0ZXMsIFdlYnNpdGVTY2hlbWEsIEZpbGVSb3V0ZXMgfSBmcm9tIFwiLi9zY2hlbWEtcmVzb3VyY2VzXCI7XG5pbXBvcnQgeyBJV2Vic2l0ZUNsaWVudCwgV0VCU0lURV9GUU4gfSBmcm9tIFwiLi4vY2xvdWRcIjtcbmltcG9ydCB7XG4gIElTaW11bGF0b3JDb250ZXh0LFxuICBJU2ltdWxhdG9yUmVzb3VyY2VJbnN0YW5jZSxcbiAgVXBkYXRlUGxhbixcbn0gZnJvbSBcIi4uL3NpbXVsYXRvci9zaW11bGF0b3JcIjtcbmltcG9ydCB7IExvZ0xldmVsLCBUcmFjZVR5cGUgfSBmcm9tIFwiLi4vc3RkXCI7XG5cbmNvbnN0IExPQ0FMSE9TVF9BRERSRVNTID0gXCIxMjcuMC4wLjFcIjtcblxuZXhwb3J0IGNsYXNzIFdlYnNpdGUgaW1wbGVtZW50cyBJV2Vic2l0ZUNsaWVudCwgSVNpbXVsYXRvclJlc291cmNlSW5zdGFuY2Uge1xuICBwcml2YXRlIF9jb250ZXh0OiBJU2ltdWxhdG9yQ29udGV4dCB8IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSByZWFkb25seSBhcHA6IGV4cHJlc3MuQXBwbGljYXRpb247XG4gIHByaXZhdGUgc2VydmVyPzogU2VydmVyO1xuICBwcml2YXRlIHVybD86IHN0cmluZztcblxuICBjb25zdHJ1Y3Rvcihwcm9wczogV2Vic2l0ZVNjaGVtYSkge1xuICAgIC8vIFNldCB1cCBhbiBleHByZXNzIHNlcnZlciB0aGF0IGhhbmRsZXMgdGhlIHJvdXRlcy5cbiAgICB0aGlzLmFwcCA9IGV4cHJlc3MoKTtcblxuICAgIC8vIFVzZSBzdGF0aWMgZGlyZWN0b3J5XG4gICAgdGhpcy5hcHAudXNlKGV4cHJlc3Muc3RhdGljKHByb3BzLnN0YXRpY0ZpbGVzUGF0aCkpO1xuXG4gICAgdGhpcy5pbml0aWF0ZUZpbGVSb3V0ZXMocHJvcHMuZmlsZVJvdXRlcyk7XG5cbiAgICBpZiAocHJvcHMuZXJyb3JEb2N1bWVudCkge1xuICAgICAgbGV0IGVycm9yRG9jdW1lbnQgPSBwcm9wcy5lcnJvckRvY3VtZW50O1xuXG4gICAgICB0aGlzLmFwcC5nZXQoXCIqXCIsIGZ1bmN0aW9uIChfLCByZXMpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zZW5kRmlsZShqb2luKHByb3BzLnN0YXRpY0ZpbGVzUGF0aCwgZXJyb3JEb2N1bWVudCkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBpbml0aWF0ZUZpbGVSb3V0ZXMocm91dGVzOiBGaWxlUm91dGVzKSB7XG4gICAgZm9yIChjb25zdCBwYXRoIGluIHJvdXRlcykge1xuICAgICAgdGhpcy5hcHAuZ2V0KGAvJHtwYXRofWAsIChfLCByZXMpID0+IHtcbiAgICAgICAgcmVzLnNldEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLCByb3V0ZXNbcGF0aF0uY29udGVudFR5cGUpO1xuICAgICAgICByZXMuc2VuZChyb3V0ZXNbcGF0aF0uZGF0YSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldCBjb250ZXh0KCk6IElTaW11bGF0b3JDb250ZXh0IHtcbiAgICBpZiAoIXRoaXMuX2NvbnRleHQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBhY2Nlc3MgY29udGV4dCBkdXJpbmcgY2xhc3MgY29uc3RydWN0aW9uXCIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY29udGV4dDtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBpbml0KGNvbnRleHQ6IElTaW11bGF0b3JDb250ZXh0KTogUHJvbWlzZTxBcGlBdHRyaWJ1dGVzPiB7XG4gICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gICAgLy8gYHNlcnZlci5hZGRyZXNzKClgIHJldHVybnMgYG51bGxgIHVudGlsIHRoZSBzZXJ2ZXIgaXMgbGlzdGVuaW5nXG4gICAgLy8gb24gYSBwb3J0LiBXZSB1c2UgYSBwcm9taXNlIHRvIHdhaXQgZm9yIHRoZSBzZXJ2ZXIgdG8gc3RhcnRcbiAgICAvLyBsaXN0ZW5pbmcgYmVmb3JlIHJldHVybmluZyB0aGUgVVJMLlxuICAgIGNvbnN0IGFkZHJJbmZvOiBBZGRyZXNzSW5mbyA9IGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuc2VydmVyID0gdGhpcy5hcHAubGlzdGVuKDAsIExPQ0FMSE9TVF9BRERSRVNTLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGFkZHIgPSB0aGlzLnNlcnZlcj8uYWRkcmVzcygpO1xuICAgICAgICBpZiAoYWRkciAmJiB0eXBlb2YgYWRkciA9PT0gXCJvYmplY3RcIiAmJiAoYWRkciBhcyBBZGRyZXNzSW5mbykucG9ydCkge1xuICAgICAgICAgIHJlc29sdmUoYWRkcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIk5vIGFkZHJlc3MgZm91bmRcIikpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICB0aGlzLnVybCA9IGBodHRwOi8vJHthZGRySW5mby5hZGRyZXNzfToke2FkZHJJbmZvLnBvcnR9YDtcblxuICAgIHRoaXMuYWRkVHJhY2UoYFdlYnNpdGUgc2VydmVyIGxpc3RlbmluZyBvbiAke3RoaXMudXJsfWAsIExvZ0xldmVsLklORk8pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHVybDogdGhpcy51cmwsXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBjbGVhbnVwKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMuYWRkVHJhY2UoYENsb3Npbmcgc2VydmVyIG9uICR7dGhpcy51cmx9YCwgTG9nTGV2ZWwuVkVSQk9TRSk7XG4gICAgdGhpcy5zZXJ2ZXI/LmNsb3NlKCk7XG4gICAgdGhpcy5zZXJ2ZXI/LmNsb3NlQWxsQ29ubmVjdGlvbnMoKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzYXZlKCk6IFByb21pc2U8dm9pZD4ge31cblxuICBwdWJsaWMgYXN5bmMgcGxhbigpIHtcbiAgICByZXR1cm4gVXBkYXRlUGxhbi5BVVRPO1xuICB9XG5cbiAgcHJpdmF0ZSBhZGRUcmFjZShtZXNzYWdlOiBzdHJpbmcsIGxldmVsOiBMb2dMZXZlbCk6IHZvaWQge1xuICAgIHRoaXMuY29udGV4dC5hZGRUcmFjZSh7XG4gICAgICB0eXBlOiBUcmFjZVR5cGUuUkVTT1VSQ0UsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIG1lc3NhZ2UsXG4gICAgICB9LFxuICAgICAgc291cmNlUGF0aDogdGhpcy5jb250ZXh0LnJlc291cmNlUGF0aCxcbiAgICAgIHNvdXJjZVR5cGU6IFdFQlNJVEVfRlFOLFxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICBsZXZlbCxcbiAgICB9KTtcbiAgfVxufVxuIl19