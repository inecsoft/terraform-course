"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Counter = void 0;
const resource_1 = require("./resource");
const util_1 = require("./util");
const cloud = __importStar(require("../cloud"));
const core_1 = require("../core");
const std_1 = require("../std");
/**
 * Simulator implementation of `cloud.Counter`.
 *
 * @inflight `@winglang/sdk.cloud.ICounterClient`
 */
class Counter extends cloud.Counter {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        this.initial = props.initial ?? 0;
        const factory = (0, core_1.lift)({
            initial: this.initial,
        }).inflight(async (ctx, simContext) => {
            // TODO: make CounterBackend liftable so we can add it to the list of captures
            const CounterBackend = 
            // eslint-disable-next-line @typescript-eslint/no-require-imports
            require("@winglang/sdk/lib/target-sim/counter.inflight").CounterBackend;
            const backend = new CounterBackend(simContext, { initial: ctx.initial });
            await backend.onStart();
            return backend;
        });
        this.backend = new resource_1.Resource(this, "Resource", factory);
        std_1.Node.of(this.backend).hidden = true;
    }
    /** @internal */
    get _liftMap() {
        return {
            [cloud.CounterInflightMethods.INC]: [[this.backend, ["call"]]],
            [cloud.CounterInflightMethods.DEC]: [[this.backend, ["call"]]],
            [cloud.CounterInflightMethods.PEEK]: [[this.backend, ["call"]]],
            [cloud.CounterInflightMethods.SET]: [[this.backend, ["call"]]],
        };
    }
    onLift(host, ops) {
        (0, util_1.bindSimulatorResource)(__filename, this.backend, host, ops);
        super.onLift(host, ops);
    }
    /** @internal */
    _toInflight() {
        return (0, util_1.makeSimulatorJsClientV2)(__filename, this.backend);
    }
}
exports.Counter = Counter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90YXJnZXQtc2ltL2NvdW50ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSx5Q0FBc0M7QUFDdEMsaUNBQXdFO0FBQ3hFLGdEQUFrQztBQUNsQyxrQ0FBd0M7QUFDeEMsZ0NBQTZDO0FBRTdDOzs7O0dBSUc7QUFDSCxNQUFhLE9BQVEsU0FBUSxLQUFLLENBQUMsT0FBTztJQUl4QyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLFFBQTRCLEVBQUU7UUFDdEUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFeEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQztRQUVsQyxNQUFNLE9BQU8sR0FBRyxJQUFBLFdBQUksRUFBQztZQUNuQixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87U0FDdEIsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxFQUFFO1lBQ3BDLDhFQUE4RTtZQUM5RSxNQUFNLGNBQWM7WUFDbEIsaUVBQWlFO1lBQ2pFLE9BQU8sQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDLGNBQWMsQ0FBQztZQUMxRSxNQUFNLE9BQU8sR0FBRyxJQUFJLGNBQWMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxPQUFPLEVBQUUsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7WUFDekUsTUFBTSxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDeEIsT0FBTyxPQUFPLENBQUM7UUFDakIsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksbUJBQVEsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZELFVBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDdEMsQ0FBQztJQUVELGdCQUFnQjtJQUNoQixJQUFXLFFBQVE7UUFDakIsT0FBTztZQUNMLENBQUMsS0FBSyxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUM5RCxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDOUQsQ0FBQyxLQUFLLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQy9ELENBQUMsS0FBSyxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztTQUMvRCxDQUFDO0lBQ0osQ0FBQztJQUVNLE1BQU0sQ0FBQyxJQUFtQixFQUFFLEdBQWE7UUFDOUMsSUFBQSw0QkFBcUIsRUFBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDM0QsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVELGdCQUFnQjtJQUNULFdBQVc7UUFDaEIsT0FBTyxJQUFBLDhCQUF1QixFQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDM0QsQ0FBQztDQUNGO0FBNUNELDBCQTRDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgeyBSZXNvdXJjZSB9IGZyb20gXCIuL3Jlc291cmNlXCI7XG5pbXBvcnQgeyBiaW5kU2ltdWxhdG9yUmVzb3VyY2UsIG1ha2VTaW11bGF0b3JKc0NsaWVudFYyIH0gZnJvbSBcIi4vdXRpbFwiO1xuaW1wb3J0ICogYXMgY2xvdWQgZnJvbSBcIi4uL2Nsb3VkXCI7XG5pbXBvcnQgeyBMaWZ0TWFwLCBsaWZ0IH0gZnJvbSBcIi4uL2NvcmVcIjtcbmltcG9ydCB7IE5vZGUsIElJbmZsaWdodEhvc3QgfSBmcm9tIFwiLi4vc3RkXCI7XG5cbi8qKlxuICogU2ltdWxhdG9yIGltcGxlbWVudGF0aW9uIG9mIGBjbG91ZC5Db3VudGVyYC5cbiAqXG4gKiBAaW5mbGlnaHQgYEB3aW5nbGFuZy9zZGsuY2xvdWQuSUNvdW50ZXJDbGllbnRgXG4gKi9cbmV4cG9ydCBjbGFzcyBDb3VudGVyIGV4dGVuZHMgY2xvdWQuQ291bnRlciB7XG4gIHB1YmxpYyByZWFkb25seSBpbml0aWFsOiBudW1iZXI7XG4gIHByaXZhdGUgcmVhZG9ubHkgYmFja2VuZDogUmVzb3VyY2U7XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IGNsb3VkLkNvdW50ZXJQcm9wcyA9IHt9KSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XG5cbiAgICB0aGlzLmluaXRpYWwgPSBwcm9wcy5pbml0aWFsID8/IDA7XG5cbiAgICBjb25zdCBmYWN0b3J5ID0gbGlmdCh7XG4gICAgICBpbml0aWFsOiB0aGlzLmluaXRpYWwsXG4gICAgfSkuaW5mbGlnaHQoYXN5bmMgKGN0eCwgc2ltQ29udGV4dCkgPT4ge1xuICAgICAgLy8gVE9ETzogbWFrZSBDb3VudGVyQmFja2VuZCBsaWZ0YWJsZSBzbyB3ZSBjYW4gYWRkIGl0IHRvIHRoZSBsaXN0IG9mIGNhcHR1cmVzXG4gICAgICBjb25zdCBDb3VudGVyQmFja2VuZCA9XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVxdWlyZS1pbXBvcnRzXG4gICAgICAgIHJlcXVpcmUoXCJAd2luZ2xhbmcvc2RrL2xpYi90YXJnZXQtc2ltL2NvdW50ZXIuaW5mbGlnaHRcIikuQ291bnRlckJhY2tlbmQ7XG4gICAgICBjb25zdCBiYWNrZW5kID0gbmV3IENvdW50ZXJCYWNrZW5kKHNpbUNvbnRleHQsIHsgaW5pdGlhbDogY3R4LmluaXRpYWwgfSk7XG4gICAgICBhd2FpdCBiYWNrZW5kLm9uU3RhcnQoKTtcbiAgICAgIHJldHVybiBiYWNrZW5kO1xuICAgIH0pO1xuXG4gICAgdGhpcy5iYWNrZW5kID0gbmV3IFJlc291cmNlKHRoaXMsIFwiUmVzb3VyY2VcIiwgZmFjdG9yeSk7XG4gICAgTm9kZS5vZih0aGlzLmJhY2tlbmQpLmhpZGRlbiA9IHRydWU7XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIHB1YmxpYyBnZXQgX2xpZnRNYXAoKTogTGlmdE1hcCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFtjbG91ZC5Db3VudGVySW5mbGlnaHRNZXRob2RzLklOQ106IFtbdGhpcy5iYWNrZW5kLCBbXCJjYWxsXCJdXV0sXG4gICAgICBbY2xvdWQuQ291bnRlckluZmxpZ2h0TWV0aG9kcy5ERUNdOiBbW3RoaXMuYmFja2VuZCwgW1wiY2FsbFwiXV1dLFxuICAgICAgW2Nsb3VkLkNvdW50ZXJJbmZsaWdodE1ldGhvZHMuUEVFS106IFtbdGhpcy5iYWNrZW5kLCBbXCJjYWxsXCJdXV0sXG4gICAgICBbY2xvdWQuQ291bnRlckluZmxpZ2h0TWV0aG9kcy5TRVRdOiBbW3RoaXMuYmFja2VuZCwgW1wiY2FsbFwiXV1dLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMgb25MaWZ0KGhvc3Q6IElJbmZsaWdodEhvc3QsIG9wczogc3RyaW5nW10pOiB2b2lkIHtcbiAgICBiaW5kU2ltdWxhdG9yUmVzb3VyY2UoX19maWxlbmFtZSwgdGhpcy5iYWNrZW5kLCBob3N0LCBvcHMpO1xuICAgIHN1cGVyLm9uTGlmdChob3N0LCBvcHMpO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwdWJsaWMgX3RvSW5mbGlnaHQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gbWFrZVNpbXVsYXRvckpzQ2xpZW50VjIoX19maWxlbmFtZSwgdGhpcy5iYWNrZW5kKTtcbiAgfVxufVxuXG4vKipcbiAqIFByb3BzIGZvciBDb3VudGVyQmFja2VuZFxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ291bnRlckJhY2tlbmRQcm9wcyB7XG4gIHJlYWRvbmx5IGluaXRpYWw6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBSdW50aW1lIGF0dHJpYnV0ZXMgZm9yIENvdW50ZXJCYWNrZW5kXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb3VudGVyQXR0cmlidXRlcyB7fVxuIl19