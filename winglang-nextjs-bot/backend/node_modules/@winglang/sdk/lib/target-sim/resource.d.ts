import { Construct } from "constructs";
import { LiftMap } from "../core";
import { ToSimulatorOutput } from "../simulator";
import { IInflight, IInflightHost, IResource as IStdResource, Resource as StdResource, Json, LogLevel } from "../std";
/**
 * Contract that a resource backend must implement.
 * @inflight
 */
export interface IResource {
    /**
     * Runs when the resource is stopped.
     */
    onStop(): Promise<void>;
}
/**
 * Context for implementing a simulator resource.
 * @inflight
 */
export interface IResourceContext {
    /**
     * The directory for the resource's state.
     */
    statedir(): Promise<string>;
    /**
     * Resolves a token value. All tokens must be resolved during the
     * constructor of the resource.
     *
     * @param name The name of the token.
     * @param value The value of the token.
     * @inflight
     */
    resolveToken(name: string, value: string): Promise<void>;
    /**
     * Log a message at the current point in time. Defaults to `info` level.
     *
     * @param message The message to log.
     * @param level The severity of the message.
     * @inflight
     */
    log(message: string, level: LogLevel | undefined): Promise<void>;
}
/**
 * Global identifier for `sim.Resource`.
 */
export declare const SIM_RESOURCE_FQN = "@winglang/sdk.sim.Resource";
/**
 * A backend for a simulated resource.
 * @inflight `@winglang/sdk.sim.IResourceClient`
 */
export declare class Resource extends StdResource implements IStdResource, ISimulatorResource, IInflightHost, ISimulatorInflightHost {
    private readonly permissions;
    private readonly _env;
    private readonly factory;
    private readonly entrypoint;
    constructor(scope: Construct, id: string, factory: IResourceFactory);
    addPermission(resource: IStdResource, op: string): void;
    /** @internal */
    get _liftMap(): LiftMap;
    /**
     * Obtain a token that can be used to reference an attribute of this
     * resource that is only resolved once the resource is started in the simulator.
     *
     * If the token is used in inflight code or in the configuration of a simulated
     * resource (e.g. as an environment variable), the relevant resource will
     * automatically take a dependency on the resource the token belongs to.
     *
     * @param name The name of the token.
     * @returns A string token.
     */
    createToken(name: string): string;
    /** @internal */
    _preSynthesize(): void;
    /**
     * Add an environment variable to make available to the inflight code.
     */
    addEnvironment(name: string, value: string): void;
    toSimulator(): ToSimulatorOutput;
    onLift(host: IInflightHost, ops: string[]): void;
    /** @internal */
    _toInflight(): string;
}
/**
 * Inflight interface for `sim.Resource`.
 */
export interface IResourceClient {
    /**
     * Call a method on the resource.
     * @inflight
     */
    call(method: string, args?: Array<Json>): Promise<Json>;
}
/**
 * List of inflight operations available for `Resource`.
 * @internal
 */
export declare enum ResourceInflightMethods {
    CALL = "call"
}
/**
 * A resource with an inflight "handle" method that can be passed to the
 * `sim.Resource` constructor.
 * @inflight `@winglang/sdk.sim.IResourceFactoryClient`
 */
export interface IResourceFactory extends IInflight {
}
/**
 * A resource with an inflight "handle" method that can be passed to the
 * `sim.Resource` constructor.
 */
export interface IResourceFactoryClient {
    /**
     * Function that will be called to initialize the simulator resource.
     *
     * To implement a shutdown sequence, return an object that implements the `IResource` inflight interface with an `onStop()` method.
     *
     * @inflight
     */
    handle(context: IResourceContext): Promise<IResource | undefined>;
}
/**
 * Interfaces shared by all preflight classes that host inflight code.
 */
export interface ISimulatorInflightHost extends IInflightHost {
    /**
     * Add a simulated permission to this inflight host.
     * @param resource The resource to add
     * @param op The action to add
     */
    addPermission(resource: IStdResource, op: string): void;
}
export declare function isSimulatorInflightHost(obj: any): obj is ISimulatorInflightHost;
/**
 * Interfaces shared by all preflight classes targeting the simulator.
 */
export interface ISimulatorResource extends IStdResource {
    /**
     * Convert this resource to a resource schema for the simulator.
     */
    toSimulator(): ToSimulatorOutput;
}
export declare function isSimulatorResource(obj: any): obj is ISimulatorResource;
