"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContainerInflightMethods = exports.Container = exports.HOST_PORT_ATTR = exports.SIM_CONTAINER_FQN = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const tokens_1 = require("./tokens");
const util_1 = require("./util");
const constants_1 = require("../constants");
const core_1 = require("../core");
const types_1 = require("../core/types");
const fs_1 = require("../fs");
const misc_1 = require("../shared/misc");
const std_1 = require("../std");
exports.SIM_CONTAINER_FQN = (0, constants_1.fqnForType)("sim.Container");
exports.HOST_PORT_ATTR = "host_port";
/**
 * Represents a container running in the Wing Simulator.
 *
 * @inflight `@winglang/sdk.sim.IContainerClient`
 */
class Container extends std_1.Resource {
    constructor(scope, id, props) {
        super(scope, id);
        this.props = props;
        // determine image tag - if the image is a path, we use a source hash (either explicitly
        // provided or calculated based on the source files). if the image is a name, we use the name
        if ((0, misc_1.isPath)(props.image)) {
            const hash = props.sourceHash ?? fs_1.Util.md5(props.image, props.sourcePattern);
            this.imageTag = `${props.name}:${hash}`;
        }
        else {
            this.imageTag = props.image;
        }
        if (props.containerPort) {
            this.hostPort = (0, tokens_1.simulatorAttrToken)(this, exports.HOST_PORT_ATTR);
        }
    }
    toSimulator() {
        const props = {
            image: this.props.image,
            imageTag: this.imageTag,
            containerPort: this.props.containerPort,
            env: this.props.env,
            volumes: this.props.volumes,
            args: this.props.args,
            cwd: core_1.App.of(this).entrypointDir,
            network: this.props.network,
            entrypoint: this.props.entrypoint,
        };
        return {
            type: exports.SIM_CONTAINER_FQN,
            props,
        };
    }
    onLift(host, ops) {
        (0, util_1.bindSimulatorResource)(__filename, this, host, ops);
        super.onLift(host, ops);
    }
    /** @internal */
    get _liftMap() {
        return {};
    }
    /** @internal */
    _toInflight() {
        return (0, util_1.makeSimulatorJsClient)(__filename, this);
    }
}
exports.Container = Container;
_a = JSII_RTTI_SYMBOL_1;
Container[_a] = { fqn: "@winglang/sdk.sim.Container", version: "0.0.0" };
/**
 * List of inflight operations available for `sim.Container`.
 * @internal
 */
var ContainerInflightMethods;
(function (ContainerInflightMethods) {
})(ContainerInflightMethods || (exports.ContainerInflightMethods = ContainerInflightMethods = {}));
//# sourceMappingURL=data:application/json;base64,