"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Service = void 0;
const path_1 = require("path");
const cloud_1 = require("../cloud");
const bundling_1 = require("../shared/bundling");
const sandbox_1 = require("../shared/sandbox");
const simulator_1 = require("../simulator");
const std_1 = require("../std");
class Service {
    constructor(props) {
        this.running = false;
        this.sourceCodeFile = props.sourceCodeFile;
        this.autoStart = props.autoStart;
        this.environmentVariables = props.environmentVariables ?? {};
    }
    get context() {
        if (!this._context) {
            throw new Error("Cannot access context during class construction");
        }
        return this._context;
    }
    async ensureBundled() {
        await this.createBundlePromise;
        if (!this.bundle) {
            throw new Error("Bundle not created");
        }
    }
    async createBundle() {
        this.bundle = await sandbox_1.Sandbox.createBundle(this.resolvedSourceCodeFile, (msg, level) => {
            this.addTrace(msg, std_1.TraceType.RESOURCE, level);
        });
    }
    async init(context) {
        this._context = context;
        this.resolvedSourceCodeFile = (0, path_1.resolve)(context.simdir, this.sourceCodeFile);
        this.createBundlePromise = this.createBundle();
        if (this.autoStart) {
            await this.start();
        }
        return {};
    }
    async cleanup() {
        await this.createBundlePromise;
        await this.stop();
    }
    async save() { }
    async plan(invalidated) {
        if (invalidated) {
            return simulator_1.UpdatePlan.REPLACE;
        }
        // Make sure that we don't have an ongoing bundle operation
        await this.ensureBundled();
        // Check if any of the bundled files have changed since the last bundling
        const bundleInvalidated = await (0, bundling_1.isBundleInvalidated)(this.resolvedSourceCodeFile, this.bundle, (msg) => this.addTrace(msg, std_1.TraceType.SIMULATOR, std_1.LogLevel.VERBOSE));
        if (bundleInvalidated) {
            return simulator_1.UpdatePlan.REPLACE;
        }
        return simulator_1.UpdatePlan.SKIP;
    }
    async start() {
        // Do nothing if service is already running.
        if (this.running) {
            return;
        }
        await this.createBundlePromise;
        if (!this.bundle) {
            this.addTrace("Failed to start service: bundle is not created", std_1.TraceType.RESOURCE, std_1.LogLevel.ERROR);
            return;
        }
        this.sandbox = new sandbox_1.Sandbox(this.bundle.outfilePath, {
            env: {
                ...this.environmentVariables,
                WING_SIMULATOR_URL: this.context.serverUrl,
                WING_SIMULATOR_CALLER: this.context.resourceHandle,
            },
            log: (internal, level, message) => {
                this.addTrace(message, internal ? std_1.TraceType.SIMULATOR : std_1.TraceType.LOG, level);
            },
        });
        try {
            await this.sandbox.call("start");
            this.running = true;
        }
        catch (e) {
            this.addTrace(`Failed to start service: ${e.message}`, std_1.TraceType.RESOURCE, std_1.LogLevel.ERROR);
        }
    }
    async stop() {
        // Do nothing if service is already stopped.
        if (!this.running || !this.sandbox) {
            return;
        }
        try {
            this.running = false;
            await this.createBundlePromise;
            await this.sandbox.call("stop");
            await this.sandbox.cleanup();
        }
        catch (e) {
            this.addTrace(`Failed to stop service: ${e.message} ${e.stack}`, std_1.TraceType.RESOURCE, std_1.LogLevel.ERROR);
        }
    }
    async started() {
        return this.running;
    }
    addTrace(message, type, level) {
        this.context.addTrace({
            data: { message },
            type,
            sourcePath: this.context.resourcePath,
            sourceType: cloud_1.SERVICE_FQN,
            timestamp: new Date().toISOString(),
            level,
        });
    }
}
exports.Service = Service;
//# sourceMappingURL=data:application/json;base64,