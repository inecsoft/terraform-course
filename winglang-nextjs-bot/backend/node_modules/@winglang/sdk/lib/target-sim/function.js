"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionInflightMethods = exports.Function = exports.ENV_WING_SIM_INFLIGHT_RESOURCE_TYPE = exports.ENV_WING_SIM_INFLIGHT_RESOURCE_PATH = void 0;
const path_1 = require("path");
const tokens_1 = require("./tokens");
const util_1 = require("./util");
const cloud = __importStar(require("../cloud"));
const core_1 = require("../core");
const duration_1 = require("../std/duration");
exports.ENV_WING_SIM_INFLIGHT_RESOURCE_PATH = "WING_SIM_INFLIGHT_RESOURCE_PATH";
exports.ENV_WING_SIM_INFLIGHT_RESOURCE_TYPE = "WING_SIM_INFLIGHT_RESOURCE_TYPE";
/**
 * Simulator implementation of `cloud.Function`.
 *
 * @inflight `@winglang/sdk.cloud.IFunctionClient`
 */
class Function extends cloud.Function {
    constructor(scope, id, inflight, props = {}) {
        super(scope, id, inflight, props);
        this.permissions = [];
        // props.memory is unused since we are not simulating it
        this.timeout = props.timeout ?? duration_1.Duration.fromMinutes(1);
        this.concurrency = props.concurrency ?? 100;
    }
    addPermission(resource, op) {
        this.permissions.push([resource, op]);
    }
    toSimulator() {
        const outdir = core_1.App.of(this).outdir;
        const policy = [];
        for (const [resource, operation] of this.permissions) {
            policy.push({
                operation,
                resourceHandle: (0, tokens_1.simulatorHandleToken)(resource),
            });
        }
        const props = {
            sourceCodeFile: (0, path_1.relative)(outdir, this.entrypoint),
            sourceCodeLanguage: "javascript",
            environmentVariables: this.env,
            timeout: this.timeout.seconds * 1000,
            concurrency: this.concurrency,
        };
        return {
            type: cloud.FUNCTION_FQN,
            props,
            policy,
        };
    }
    /** @internal */
    get _liftMap() {
        return {
            [cloud.FunctionInflightMethods.INVOKE]: [[this.handler, ["handle"]]],
            [cloud.FunctionInflightMethods.INVOKE_ASYNC]: [
                [this.handler, ["handle"]],
            ],
        };
    }
    onLift(host, ops) {
        (0, util_1.bindSimulatorResource)(__filename, this, host, ops);
        super.onLift(host, ops);
    }
    /** @internal */
    _toInflight() {
        return (0, util_1.makeSimulatorJsClient)(__filename, this);
    }
}
exports.Function = Function;
/**
 * Simulator-specific inflight methods for `cloud.Function`.
 */
var FunctionInflightMethods;
(function (FunctionInflightMethods) {
    FunctionInflightMethods["HAS_AVAILABLE_WORKERS"] = "hasAvailableWorkers";
})(FunctionInflightMethods || (exports.FunctionInflightMethods = FunctionInflightMethods = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVuY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGFyZ2V0LXNpbS9mdW5jdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLCtCQUFnQztBQUloQyxxQ0FBZ0Q7QUFDaEQsaUNBQXNFO0FBQ3RFLGdEQUFrQztBQUNsQyxrQ0FBdUM7QUFHdkMsOENBQTJDO0FBRTlCLFFBQUEsbUNBQW1DLEdBQzlDLGlDQUFpQyxDQUFDO0FBQ3ZCLFFBQUEsbUNBQW1DLEdBQzlDLGlDQUFpQyxDQUFDO0FBRXBDOzs7O0dBSUc7QUFDSCxNQUFhLFFBQ1gsU0FBUSxLQUFLLENBQUMsUUFBUTtJQU90QixZQUNFLEtBQWdCLEVBQ2hCLEVBQVUsRUFDVixRQUFnQyxFQUNoQyxRQUE2QixFQUFFO1FBRS9CLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztRQVJuQixnQkFBVyxHQUErQixFQUFFLENBQUM7UUFVNUQsd0RBQXdEO1FBQ3hELElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sSUFBSSxtQkFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4RCxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxXQUFXLElBQUksR0FBRyxDQUFDO0lBQzlDLENBQUM7SUFFTSxhQUFhLENBQUMsUUFBbUIsRUFBRSxFQUFVO1FBQ2xELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVNLFdBQVc7UUFDaEIsTUFBTSxNQUFNLEdBQUcsVUFBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFFbkMsTUFBTSxNQUFNLEdBQTJCLEVBQUUsQ0FBQztRQUMxQyxLQUFLLE1BQU0sQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3JELE1BQU0sQ0FBQyxJQUFJLENBQUM7Z0JBQ1YsU0FBUztnQkFDVCxjQUFjLEVBQUUsSUFBQSw2QkFBb0IsRUFBQyxRQUFRLENBQUM7YUFDL0MsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUVELE1BQU0sS0FBSyxHQUFtQjtZQUM1QixjQUFjLEVBQUUsSUFBQSxlQUFRLEVBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUM7WUFDakQsa0JBQWtCLEVBQUUsWUFBWTtZQUNoQyxvQkFBb0IsRUFBRSxJQUFJLENBQUMsR0FBRztZQUM5QixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEdBQUcsSUFBSTtZQUNwQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVc7U0FDOUIsQ0FBQztRQUNGLE9BQU87WUFDTCxJQUFJLEVBQUUsS0FBSyxDQUFDLFlBQVk7WUFDeEIsS0FBSztZQUNMLE1BQU07U0FDUCxDQUFDO0lBQ0osQ0FBQztJQUVELGdCQUFnQjtJQUNoQixJQUFXLFFBQVE7UUFDakIsT0FBTztZQUNMLENBQUMsS0FBSyxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNwRSxDQUFDLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxZQUFZLENBQUMsRUFBRTtnQkFDNUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDM0I7U0FDRixDQUFDO0lBQ0osQ0FBQztJQUVNLE1BQU0sQ0FBQyxJQUFtQixFQUFFLEdBQWE7UUFDOUMsSUFBQSw0QkFBcUIsRUFBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNuRCxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQsZ0JBQWdCO0lBQ1QsV0FBVztRQUNoQixPQUFPLElBQUEsNEJBQXFCLEVBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2pELENBQUM7Q0FDRjtBQXJFRCw0QkFxRUM7QUFFRDs7R0FFRztBQUNILElBQVksdUJBRVg7QUFGRCxXQUFZLHVCQUF1QjtJQUNqQyx3RUFBNkMsQ0FBQTtBQUMvQyxDQUFDLEVBRlcsdUJBQXVCLHVDQUF2Qix1QkFBdUIsUUFFbEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZWxhdGl2ZSB9IGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgSVNpbXVsYXRvckluZmxpZ2h0SG9zdCwgSVNpbXVsYXRvclJlc291cmNlIH0gZnJvbSBcIi4vcmVzb3VyY2VcIjtcbmltcG9ydCB7IEZ1bmN0aW9uU2NoZW1hIH0gZnJvbSBcIi4vc2NoZW1hLXJlc291cmNlc1wiO1xuaW1wb3J0IHsgc2ltdWxhdG9ySGFuZGxlVG9rZW4gfSBmcm9tIFwiLi90b2tlbnNcIjtcbmltcG9ydCB7IGJpbmRTaW11bGF0b3JSZXNvdXJjZSwgbWFrZVNpbXVsYXRvckpzQ2xpZW50IH0gZnJvbSBcIi4vdXRpbFwiO1xuaW1wb3J0ICogYXMgY2xvdWQgZnJvbSBcIi4uL2Nsb3VkXCI7XG5pbXBvcnQgeyBBcHAsIExpZnRNYXAgfSBmcm9tIFwiLi4vY29yZVwiO1xuaW1wb3J0IHsgUG9saWN5U3RhdGVtZW50LCBUb1NpbXVsYXRvck91dHB1dCB9IGZyb20gXCIuLi9zaW11bGF0b3Ivc2ltdWxhdG9yXCI7XG5pbXBvcnQgeyBJSW5mbGlnaHRIb3N0LCBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vc3RkXCI7XG5pbXBvcnQgeyBEdXJhdGlvbiB9IGZyb20gXCIuLi9zdGQvZHVyYXRpb25cIjtcblxuZXhwb3J0IGNvbnN0IEVOVl9XSU5HX1NJTV9JTkZMSUdIVF9SRVNPVVJDRV9QQVRIID1cbiAgXCJXSU5HX1NJTV9JTkZMSUdIVF9SRVNPVVJDRV9QQVRIXCI7XG5leHBvcnQgY29uc3QgRU5WX1dJTkdfU0lNX0lORkxJR0hUX1JFU09VUkNFX1RZUEUgPVxuICBcIldJTkdfU0lNX0lORkxJR0hUX1JFU09VUkNFX1RZUEVcIjtcblxuLyoqXG4gKiBTaW11bGF0b3IgaW1wbGVtZW50YXRpb24gb2YgYGNsb3VkLkZ1bmN0aW9uYC5cbiAqXG4gKiBAaW5mbGlnaHQgYEB3aW5nbGFuZy9zZGsuY2xvdWQuSUZ1bmN0aW9uQ2xpZW50YFxuICovXG5leHBvcnQgY2xhc3MgRnVuY3Rpb25cbiAgZXh0ZW5kcyBjbG91ZC5GdW5jdGlvblxuICBpbXBsZW1lbnRzIElTaW11bGF0b3JSZXNvdXJjZSwgSVNpbXVsYXRvckluZmxpZ2h0SG9zdFxue1xuICBwcml2YXRlIHJlYWRvbmx5IHRpbWVvdXQ6IER1cmF0aW9uO1xuICBwcml2YXRlIHJlYWRvbmx5IGNvbmN1cnJlbmN5OiBudW1iZXI7XG4gIHByaXZhdGUgcmVhZG9ubHkgcGVybWlzc2lvbnM6IEFycmF5PFtJUmVzb3VyY2UsIHN0cmluZ10+ID0gW107XG5cbiAgY29uc3RydWN0b3IoXG4gICAgc2NvcGU6IENvbnN0cnVjdCxcbiAgICBpZDogc3RyaW5nLFxuICAgIGluZmxpZ2h0OiBjbG91ZC5JRnVuY3Rpb25IYW5kbGVyLFxuICAgIHByb3BzOiBjbG91ZC5GdW5jdGlvblByb3BzID0ge31cbiAgKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCBpbmZsaWdodCwgcHJvcHMpO1xuXG4gICAgLy8gcHJvcHMubWVtb3J5IGlzIHVudXNlZCBzaW5jZSB3ZSBhcmUgbm90IHNpbXVsYXRpbmcgaXRcbiAgICB0aGlzLnRpbWVvdXQgPSBwcm9wcy50aW1lb3V0ID8/IER1cmF0aW9uLmZyb21NaW51dGVzKDEpO1xuICAgIHRoaXMuY29uY3VycmVuY3kgPSBwcm9wcy5jb25jdXJyZW5jeSA/PyAxMDA7XG4gIH1cblxuICBwdWJsaWMgYWRkUGVybWlzc2lvbihyZXNvdXJjZTogSVJlc291cmNlLCBvcDogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5wZXJtaXNzaW9ucy5wdXNoKFtyZXNvdXJjZSwgb3BdKTtcbiAgfVxuXG4gIHB1YmxpYyB0b1NpbXVsYXRvcigpOiBUb1NpbXVsYXRvck91dHB1dCB7XG4gICAgY29uc3Qgb3V0ZGlyID0gQXBwLm9mKHRoaXMpLm91dGRpcjtcblxuICAgIGNvbnN0IHBvbGljeTogQXJyYXk8UG9saWN5U3RhdGVtZW50PiA9IFtdO1xuICAgIGZvciAoY29uc3QgW3Jlc291cmNlLCBvcGVyYXRpb25dIG9mIHRoaXMucGVybWlzc2lvbnMpIHtcbiAgICAgIHBvbGljeS5wdXNoKHtcbiAgICAgICAgb3BlcmF0aW9uLFxuICAgICAgICByZXNvdXJjZUhhbmRsZTogc2ltdWxhdG9ySGFuZGxlVG9rZW4ocmVzb3VyY2UpLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgcHJvcHM6IEZ1bmN0aW9uU2NoZW1hID0ge1xuICAgICAgc291cmNlQ29kZUZpbGU6IHJlbGF0aXZlKG91dGRpciwgdGhpcy5lbnRyeXBvaW50KSxcbiAgICAgIHNvdXJjZUNvZGVMYW5ndWFnZTogXCJqYXZhc2NyaXB0XCIsXG4gICAgICBlbnZpcm9ubWVudFZhcmlhYmxlczogdGhpcy5lbnYsXG4gICAgICB0aW1lb3V0OiB0aGlzLnRpbWVvdXQuc2Vjb25kcyAqIDEwMDAsXG4gICAgICBjb25jdXJyZW5jeTogdGhpcy5jb25jdXJyZW5jeSxcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBjbG91ZC5GVU5DVElPTl9GUU4sXG4gICAgICBwcm9wcyxcbiAgICAgIHBvbGljeSxcbiAgICB9O1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwdWJsaWMgZ2V0IF9saWZ0TWFwKCk6IExpZnRNYXAge1xuICAgIHJldHVybiB7XG4gICAgICBbY2xvdWQuRnVuY3Rpb25JbmZsaWdodE1ldGhvZHMuSU5WT0tFXTogW1t0aGlzLmhhbmRsZXIsIFtcImhhbmRsZVwiXV1dLFxuICAgICAgW2Nsb3VkLkZ1bmN0aW9uSW5mbGlnaHRNZXRob2RzLklOVk9LRV9BU1lOQ106IFtcbiAgICAgICAgW3RoaXMuaGFuZGxlciwgW1wiaGFuZGxlXCJdXSxcbiAgICAgIF0sXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBvbkxpZnQoaG9zdDogSUluZmxpZ2h0SG9zdCwgb3BzOiBzdHJpbmdbXSk6IHZvaWQge1xuICAgIGJpbmRTaW11bGF0b3JSZXNvdXJjZShfX2ZpbGVuYW1lLCB0aGlzLCBob3N0LCBvcHMpO1xuICAgIHN1cGVyLm9uTGlmdChob3N0LCBvcHMpO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwdWJsaWMgX3RvSW5mbGlnaHQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gbWFrZVNpbXVsYXRvckpzQ2xpZW50KF9fZmlsZW5hbWUsIHRoaXMpO1xuICB9XG59XG5cbi8qKlxuICogU2ltdWxhdG9yLXNwZWNpZmljIGluZmxpZ2h0IG1ldGhvZHMgZm9yIGBjbG91ZC5GdW5jdGlvbmAuXG4gKi9cbmV4cG9ydCBlbnVtIEZ1bmN0aW9uSW5mbGlnaHRNZXRob2RzIHtcbiAgSEFTX0FWQUlMQUJMRV9XT1JLRVJTID0gXCJoYXNBdmFpbGFibGVXb3JrZXJzXCIsXG59XG4iXX0=