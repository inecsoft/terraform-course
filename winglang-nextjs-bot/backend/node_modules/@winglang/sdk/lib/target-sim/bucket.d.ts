import { Construct } from "constructs";
import { ISimulatorResource } from "./resource";
import * as cloud from "../cloud";
import { LiftMap } from "../core";
import { ToSimulatorOutput } from "../simulator/simulator";
import { IInflightHost } from "../std";
/**
 * Simulator implementation of `cloud.Bucket`.
 *
 * @inflight `@winglang/sdk.cloud.IBucketClient`
 */
export declare class Bucket extends cloud.Bucket implements ISimulatorResource {
    private readonly public;
    private readonly initialObjects;
    private readonly policy;
    constructor(scope: Construct, id: string, props?: cloud.BucketProps);
    /** @internal */
    get _liftMap(): LiftMap;
    /**
     * Iterates over the topics and supply their sim handler
     * @returns an object of Bucket event types (keys) and their topic handlers (values)
     */
    protected convertTopicsToHandles(): Record<string, string>;
    addObject(key: string, body: string): void;
    protected createTopicHandler(eventType: cloud.BucketEventType, inflight: cloud.IBucketEventHandler): cloud.ITopicOnMessageHandler;
    onCreate(fn: cloud.IBucketEventHandler, opts?: cloud.BucketOnCreateOptions | undefined): void;
    onDelete(fn: cloud.IBucketEventHandler, opts?: cloud.BucketOnDeleteOptions | undefined): void;
    onUpdate(fn: cloud.IBucketEventHandler, opts?: cloud.BucketOnUpdateOptions | undefined): void;
    onEvent(fn: cloud.IBucketEventHandler, opts?: cloud.BucketOnEventOptions): void;
    toSimulator(): ToSimulatorOutput;
    onLift(host: IInflightHost, ops: string[]): void;
    /** @internal */
    _toInflight(): string;
}
/**
 * Utility class to work with bucket event handlers.
 */
export declare class BucketEventHandler {
    /**
     * Converts a `cloud.IBucketEventHandler` to a `cloud.ITopicOnMessageHandler`.
     * @param handler the handler to convert
     * @param eventType the event type
     * @returns the on message handler.
     */
    static toTopicOnMessageHandler(handler: cloud.IBucketEventHandler, eventType: cloud.BucketEventType): cloud.ITopicOnMessageHandler;
}
