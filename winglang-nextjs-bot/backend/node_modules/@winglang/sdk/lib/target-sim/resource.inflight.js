"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Resource = void 0;
const path = __importStar(require("path"));
const resource_1 = require("./resource");
const bundling_1 = require("../shared/bundling");
const sandbox_1 = require("../shared/sandbox");
const simulator_1 = require("../simulator");
const std_1 = require("../std");
class Resource {
    constructor(props) {
        this.timeout = 30000;
        this.sourceCodeFile = props.sourceCodeFile;
    }
    get context() {
        if (!this._context) {
            throw new Error("Cannot access context during class construction");
        }
        return this._context;
    }
    async createBundle() {
        this.bundle = await sandbox_1.Sandbox.createBundle(this.resolvedSourceCodeFile, (msg, level) => {
            this.addTrace(msg, std_1.TraceType.RESOURCE, level);
        });
    }
    async init(context) {
        this._context = context;
        this.resolvedSourceCodeFile = path.resolve(context.simdir, this.sourceCodeFile);
        await this.createBundle();
        this.sandbox = new sandbox_1.Sandbox(this.bundle.outfilePath, {
            env: {
                WING_SIMULATOR_URL: this.context.serverUrl,
                WING_SIMULATOR_CALLER: this.context.resourceHandle,
            },
            log: (internal, level, message) => {
                this.addTrace(message, internal ? std_1.TraceType.SIMULATOR : std_1.TraceType.LOG, level);
            },
            // A resource needs to respond to method calls in a timely manner since
            // the simulator server will wait for a response before responding to
            // the caller. The default timeout is 30 seconds.
            timeout: this.timeout,
        });
        // We're communicating with the sandbox via IPC. It's not possible to pass
        // an IResourceContext object directly because methods like `resolveToken`
        // are not serializable. So instead, a fake ctx object is created within the
        // inflight wrapper code - see `resource.ts`.
        try {
            const attrs = await this.sandbox.call("start", this.context.statedir);
            return attrs;
        }
        catch (err) {
            this.context.addTrace({
                data: {
                    message: "Error initializing resource",
                    status: "failure",
                    error: err,
                },
                type: std_1.TraceType.LOG,
                level: std_1.LogLevel.ERROR,
                sourcePath: this.context.resourcePath,
                sourceType: resource_1.SIM_RESOURCE_FQN,
                timestamp: new Date().toISOString(),
            });
            return {};
        }
    }
    async cleanup() {
        try {
            // TODO: set a timeout for the stop call
            while (true) {
                try {
                    return await this.sandbox.call("stop");
                }
                catch (err) {
                    if (err instanceof sandbox_1.SandboxMultipleConcurrentCallsError) {
                        // If the sandbox is busy, wait and try again
                        this.addTrace("Sandbox is busy, waiting and retrying...", std_1.TraceType.SIMULATOR, std_1.LogLevel.VERBOSE);
                        await new Promise((resolve) => setTimeout(resolve, 100));
                    }
                    else {
                        throw err;
                    }
                }
            }
        }
        catch (err) {
            this.context.addTrace({
                data: {
                    message: "Error calling onStop",
                    status: "failure",
                    error: err,
                },
                type: std_1.TraceType.LOG,
                level: std_1.LogLevel.ERROR,
                sourcePath: this.context.resourcePath,
                sourceType: resource_1.SIM_RESOURCE_FQN,
                timestamp: new Date().toISOString(),
            });
        }
        finally {
            await this.sandbox.cleanup();
        }
    }
    async save() { }
    async plan(invalidated) {
        // TODO: support customizing update plans
        if (invalidated) {
            return simulator_1.UpdatePlan.REPLACE;
        }
        // Check if any of the bundled files have changed since the last bundling
        const bundleInvalidated = await (0, bundling_1.isBundleInvalidated)(this.resolvedSourceCodeFile, this.bundle, (msg) => this.addTrace(msg, std_1.TraceType.SIMULATOR, std_1.LogLevel.VERBOSE));
        if (bundleInvalidated) {
            return simulator_1.UpdatePlan.REPLACE;
        }
        return simulator_1.UpdatePlan.SKIP;
    }
    async call(method, args = []) {
        return this.context.withTrace({
            activity: async () => {
                // TODO: If requests take a long time for a resource to process,
                // we may end up passing requests to the sandbox after they have
                // timed out. We should consider adding a timeout to the call method
                // here or track the request's response deadline in some way.
                while (true) {
                    try {
                        return await this.sandbox.call("call", method, ...args);
                    }
                    catch (err) {
                        if (err instanceof sandbox_1.SandboxMultipleConcurrentCallsError) {
                            // If the sandbox is busy, wait and try again
                            this.addTrace("Sandbox is busy, waiting and retrying...", std_1.TraceType.SIMULATOR, std_1.LogLevel.VERBOSE);
                            await new Promise((resolve) => setTimeout(resolve, 100));
                        }
                        else if (err instanceof sandbox_1.SandboxTimeoutError) {
                            throw new Error(`Call to resource "${this.context.resourcePath}" timed out after ${this.timeout}ms`);
                        }
                        else {
                            throw err;
                        }
                    }
                }
            },
            message: this.formatCallMessage(method, args),
        });
    }
    formatCallMessage(method, args) {
        let message = method.toString();
        message += "(";
        for (let i = 0; i < args.length; i++) {
            let arg = args[i];
            if (arg === null || arg === undefined) {
                message += "nil";
            }
            else {
                message += JSON.stringify(args[i]);
            }
            if (i < args.length - 1) {
                message += ", ";
            }
        }
        message += ")";
        return message;
    }
    addTrace(message, type, level) {
        this.context.addTrace({
            data: { message, level },
            type,
            level: level ?? std_1.LogLevel.INFO,
            sourcePath: this.context.resourcePath,
            sourceType: resource_1.SIM_RESOURCE_FQN,
            timestamp: new Date().toISOString(),
        });
    }
}
exports.Resource = Resource;
//# sourceMappingURL=data:application/json;base64,