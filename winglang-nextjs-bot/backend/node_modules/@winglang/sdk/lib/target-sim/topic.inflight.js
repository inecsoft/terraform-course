"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Topic = void 0;
const cloud_1 = require("../cloud");
const simulator_1 = require("../simulator/simulator");
const std_1 = require("../std");
class Topic {
    constructor(_props) {
        this.subscribers = new Array();
    }
    get context() {
        if (!this._context) {
            throw new Error("Cannot access context during class construction");
        }
        return this._context;
    }
    async init(context) {
        this._context = context;
        return {};
    }
    async cleanup() { }
    async save() { }
    async plan() {
        return simulator_1.UpdatePlan.AUTO;
    }
    async publishMessage(message) {
        for (const subscriber of this.subscribers) {
            const fnClient = this.context.getClient(subscriber.functionHandle);
            this.context.addTrace({
                type: std_1.TraceType.RESOURCE,
                level: std_1.LogLevel.VERBOSE,
                data: {
                    message: `Sending message (message=${message}, subscriber=${subscriber.functionHandle}).`,
                },
                sourcePath: this.context.resourcePath,
                sourceType: cloud_1.TOPIC_FQN,
                timestamp: new Date().toISOString(),
            });
            await fnClient.invokeAsync(message);
        }
    }
    async addEventSubscription(subscriber, subscriptionProps) {
        let s = {
            functionHandle: subscriber,
            ...subscriptionProps,
        };
        this.subscribers.push(s);
    }
    async removeEventSubscription(subscriber) {
        const index = this.subscribers.findIndex((s) => s.functionHandle === subscriber);
        if (index >= 0) {
            this.subscribers.splice(index, 1);
        }
    }
    publish(...messages) {
        return this.context.withTrace({
            message: `Publish (messages=${messages}).`,
            activity: async () => {
                if (messages.includes("")) {
                    throw new Error("Empty messages are not allowed");
                }
                let publishAll = [];
                for (const message of messages) {
                    publishAll.push(this.publishMessage(message));
                }
                return Promise.all(publishAll);
            },
        });
    }
}
exports.Topic = Topic;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9waWMuaW5mbGlnaHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGFyZ2V0LXNpbS90b3BpYy5pbmZsaWdodC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFRQSxvQ0FBb0U7QUFDcEUsc0RBSWdDO0FBQ2hDLGdDQUE2QztBQUU3QyxNQUFhLEtBQUs7SUFNaEIsWUFBWSxNQUFtQjtRQUhkLGdCQUFXLEdBQUcsSUFBSSxLQUFLLEVBQW1CLENBQUM7SUFHMUIsQ0FBQztJQUVuQyxJQUFZLE9BQU87UUFDakIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNuQixNQUFNLElBQUksS0FBSyxDQUFDLGlEQUFpRCxDQUFDLENBQUM7UUFDckUsQ0FBQztRQUNELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDO0lBRU0sS0FBSyxDQUFDLElBQUksQ0FBQyxPQUEwQjtRQUMxQyxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztRQUN4QixPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFTSxLQUFLLENBQUMsT0FBTyxLQUFtQixDQUFDO0lBRWpDLEtBQUssQ0FBQyxJQUFJLEtBQW1CLENBQUM7SUFFOUIsS0FBSyxDQUFDLElBQUk7UUFDZixPQUFPLHNCQUFVLENBQUMsSUFBSSxDQUFDO0lBQ3pCLENBQUM7SUFFTyxLQUFLLENBQUMsY0FBYyxDQUFDLE9BQWU7UUFDMUMsS0FBSyxNQUFNLFVBQVUsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDMUMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQ3JDLFVBQVUsQ0FBQyxjQUFjLENBQ1AsQ0FBQztZQUNyQixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQztnQkFDcEIsSUFBSSxFQUFFLGVBQVMsQ0FBQyxRQUFRO2dCQUN4QixLQUFLLEVBQUUsY0FBUSxDQUFDLE9BQU87Z0JBQ3ZCLElBQUksRUFBRTtvQkFDSixPQUFPLEVBQUUsNEJBQTRCLE9BQU8sZ0JBQWdCLFVBQVUsQ0FBQyxjQUFjLElBQUk7aUJBQzFGO2dCQUNELFVBQVUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVk7Z0JBQ3JDLFVBQVUsRUFBRSxpQkFBUztnQkFDckIsU0FBUyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFO2FBQ3BDLENBQUMsQ0FBQztZQUVILE1BQU0sUUFBUSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN0QyxDQUFDO0lBQ0gsQ0FBQztJQUVNLEtBQUssQ0FBQyxvQkFBb0IsQ0FDL0IsVUFBMEIsRUFDMUIsaUJBQW9DO1FBRXBDLElBQUksQ0FBQyxHQUFHO1lBQ04sY0FBYyxFQUFFLFVBQVU7WUFDMUIsR0FBRyxpQkFBaUI7U0FDRixDQUFDO1FBQ3JCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFTSxLQUFLLENBQUMsdUJBQXVCLENBQUMsVUFBa0I7UUFDckQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQ3RDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsY0FBYyxLQUFLLFVBQVUsQ0FDdkMsQ0FBQztRQUNGLElBQUksS0FBSyxJQUFJLENBQUMsRUFBRSxDQUFDO1lBQ2YsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3BDLENBQUM7SUFDSCxDQUFDO0lBRU0sT0FBTyxDQUFDLEdBQUcsUUFBa0I7UUFDbEMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztZQUM1QixPQUFPLEVBQUUscUJBQXFCLFFBQVEsSUFBSTtZQUMxQyxRQUFRLEVBQUUsS0FBSyxJQUFJLEVBQUU7Z0JBQ25CLElBQUksUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO29CQUMxQixNQUFNLElBQUksS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7Z0JBQ3BELENBQUM7Z0JBQ0QsSUFBSSxVQUFVLEdBQXlCLEVBQUUsQ0FBQztnQkFDMUMsS0FBSyxNQUFNLE9BQU8sSUFBSSxRQUFRLEVBQUUsQ0FBQztvQkFDL0IsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQ2hELENBQUM7Z0JBRUQsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ2pDLENBQUM7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUFwRkQsc0JBb0ZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUV2ZW50UHVibGlzaGVyIH0gZnJvbSBcIi4vZXZlbnQtbWFwcGluZ1wiO1xuaW1wb3J0IHtcbiAgVG9waWNBdHRyaWJ1dGVzLFxuICBUb3BpY1NjaGVtYSxcbiAgVG9waWNTdWJzY3JpYmVyLFxuICBFdmVudFN1YnNjcmlwdGlvbixcbiAgUmVzb3VyY2VIYW5kbGUsXG59IGZyb20gXCIuL3NjaGVtYS1yZXNvdXJjZXNcIjtcbmltcG9ydCB7IElGdW5jdGlvbkNsaWVudCwgSVRvcGljQ2xpZW50LCBUT1BJQ19GUU4gfSBmcm9tIFwiLi4vY2xvdWRcIjtcbmltcG9ydCB7XG4gIElTaW11bGF0b3JDb250ZXh0LFxuICBJU2ltdWxhdG9yUmVzb3VyY2VJbnN0YW5jZSxcbiAgVXBkYXRlUGxhbixcbn0gZnJvbSBcIi4uL3NpbXVsYXRvci9zaW11bGF0b3JcIjtcbmltcG9ydCB7IExvZ0xldmVsLCBUcmFjZVR5cGUgfSBmcm9tIFwiLi4vc3RkXCI7XG5cbmV4cG9ydCBjbGFzcyBUb3BpY1xuICBpbXBsZW1lbnRzIElUb3BpY0NsaWVudCwgSVNpbXVsYXRvclJlc291cmNlSW5zdGFuY2UsIElFdmVudFB1Ymxpc2hlclxue1xuICBwcml2YXRlIHJlYWRvbmx5IHN1YnNjcmliZXJzID0gbmV3IEFycmF5PFRvcGljU3Vic2NyaWJlcj4oKTtcbiAgcHJpdmF0ZSBfY29udGV4dDogSVNpbXVsYXRvckNvbnRleHQgfCB1bmRlZmluZWQ7XG5cbiAgY29uc3RydWN0b3IoX3Byb3BzOiBUb3BpY1NjaGVtYSkge31cblxuICBwcml2YXRlIGdldCBjb250ZXh0KCk6IElTaW11bGF0b3JDb250ZXh0IHtcbiAgICBpZiAoIXRoaXMuX2NvbnRleHQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBhY2Nlc3MgY29udGV4dCBkdXJpbmcgY2xhc3MgY29uc3RydWN0aW9uXCIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY29udGV4dDtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBpbml0KGNvbnRleHQ6IElTaW11bGF0b3JDb250ZXh0KTogUHJvbWlzZTxUb3BpY0F0dHJpYnV0ZXM+IHtcbiAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgY2xlYW51cCgpOiBQcm9taXNlPHZvaWQ+IHt9XG5cbiAgcHVibGljIGFzeW5jIHNhdmUoKTogUHJvbWlzZTx2b2lkPiB7fVxuXG4gIHB1YmxpYyBhc3luYyBwbGFuKCkge1xuICAgIHJldHVybiBVcGRhdGVQbGFuLkFVVE87XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHB1Ymxpc2hNZXNzYWdlKG1lc3NhZ2U6IHN0cmluZykge1xuICAgIGZvciAoY29uc3Qgc3Vic2NyaWJlciBvZiB0aGlzLnN1YnNjcmliZXJzKSB7XG4gICAgICBjb25zdCBmbkNsaWVudCA9IHRoaXMuY29udGV4dC5nZXRDbGllbnQoXG4gICAgICAgIHN1YnNjcmliZXIuZnVuY3Rpb25IYW5kbGVcbiAgICAgICkgYXMgSUZ1bmN0aW9uQ2xpZW50O1xuICAgICAgdGhpcy5jb250ZXh0LmFkZFRyYWNlKHtcbiAgICAgICAgdHlwZTogVHJhY2VUeXBlLlJFU09VUkNFLFxuICAgICAgICBsZXZlbDogTG9nTGV2ZWwuVkVSQk9TRSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIG1lc3NhZ2U6IGBTZW5kaW5nIG1lc3NhZ2UgKG1lc3NhZ2U9JHttZXNzYWdlfSwgc3Vic2NyaWJlcj0ke3N1YnNjcmliZXIuZnVuY3Rpb25IYW5kbGV9KS5gLFxuICAgICAgICB9LFxuICAgICAgICBzb3VyY2VQYXRoOiB0aGlzLmNvbnRleHQucmVzb3VyY2VQYXRoLFxuICAgICAgICBzb3VyY2VUeXBlOiBUT1BJQ19GUU4sXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgfSk7XG5cbiAgICAgIGF3YWl0IGZuQ2xpZW50Lmludm9rZUFzeW5jKG1lc3NhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBhZGRFdmVudFN1YnNjcmlwdGlvbihcbiAgICBzdWJzY3JpYmVyOiBSZXNvdXJjZUhhbmRsZSxcbiAgICBzdWJzY3JpcHRpb25Qcm9wczogRXZlbnRTdWJzY3JpcHRpb25cbiAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgbGV0IHMgPSB7XG4gICAgICBmdW5jdGlvbkhhbmRsZTogc3Vic2NyaWJlcixcbiAgICAgIC4uLnN1YnNjcmlwdGlvblByb3BzLFxuICAgIH0gYXMgVG9waWNTdWJzY3JpYmVyO1xuICAgIHRoaXMuc3Vic2NyaWJlcnMucHVzaChzKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyByZW1vdmVFdmVudFN1YnNjcmlwdGlvbihzdWJzY3JpYmVyOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuc3Vic2NyaWJlcnMuZmluZEluZGV4KFxuICAgICAgKHMpID0+IHMuZnVuY3Rpb25IYW5kbGUgPT09IHN1YnNjcmliZXJcbiAgICApO1xuICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICB0aGlzLnN1YnNjcmliZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHB1Ymxpc2goLi4ubWVzc2FnZXM6IHN0cmluZ1tdKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC53aXRoVHJhY2Uoe1xuICAgICAgbWVzc2FnZTogYFB1Ymxpc2ggKG1lc3NhZ2VzPSR7bWVzc2FnZXN9KS5gLFxuICAgICAgYWN0aXZpdHk6IGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYgKG1lc3NhZ2VzLmluY2x1ZGVzKFwiXCIpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRW1wdHkgbWVzc2FnZXMgYXJlIG5vdCBhbGxvd2VkXCIpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBwdWJsaXNoQWxsOiBBcnJheTxQcm9taXNlPHZvaWQ+PiA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IG1lc3NhZ2Ugb2YgbWVzc2FnZXMpIHtcbiAgICAgICAgICBwdWJsaXNoQWxsLnB1c2godGhpcy5wdWJsaXNoTWVzc2FnZShtZXNzYWdlKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocHVibGlzaEFsbCk7XG4gICAgICB9LFxuICAgIH0pO1xuICB9XG59XG4iXX0=