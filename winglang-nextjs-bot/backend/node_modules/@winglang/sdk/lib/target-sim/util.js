"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertDurationToCronExpression = exports.makeSimulatorJsClientV2 = exports.makeSimulatorJsClient = exports.bindSimulatorResource = exports.exists = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const util_1 = require("util");
const resource_1 = require("./resource");
const tokens_1 = require("./tokens");
/**
 * Check if a file exists for an specific path
 * @param filePath
 * @Returns Return `true` if the file exists, `false` otherwise.
 */
async function exists(filePath) {
    try {
        await (0, util_1.promisify)(fs_1.access)(filePath, fs_1.constants.F_OK | fs_1.constants.R_OK | fs_1.constants.W_OK //eslint-disable-line no-bitwise
        );
        return true;
    }
    catch (er) {
        return false;
    }
}
exports.exists = exists;
function makeEnvVarName(type, resource) {
    return `${type
        .toUpperCase()
        .replace(/[^A-Z]+/g, "_")}_HANDLE_${resource.node.addr.slice(-8)}`;
}
function bindSimulatorResource(filename, resource, host, ops) {
    // Check if host implements ISimulatorInflightHost
    if (!(0, resource_1.isSimulatorInflightHost)(host)) {
        throw new Error("Host resource must implement sim.ISimulatorInflightHost to bind simulator resources");
    }
    const type = (0, path_1.basename)(filename).split(".")[0];
    const env = makeEnvVarName(type, resource);
    const handle = (0, tokens_1.simulatorHandleToken)(resource);
    host.addEnvironment(env, handle);
    host.node.addDependency(resource);
    for (const op of ops) {
        host.addPermission(resource, op);
    }
}
exports.bindSimulatorResource = bindSimulatorResource;
function makeSimulatorJsClient(filename, resource) {
    const type = (0, path_1.basename)(filename).split(".")[0];
    const env = makeEnvVarName(type, resource);
    return `(function() {
  let handle = process.env.${env};
  if (!handle) {
    throw new Error("Missing environment variable: ${env}");
  }
  const simulatorUrl = process.env.WING_SIMULATOR_URL;
  if (!simulatorUrl) {
    throw new Error("Missing environment variable: WING_SIMULATOR_URL");
  }
  const caller = process.env.WING_SIMULATOR_CALLER;
  if (!caller) {
    throw new Error("Missing environment variable: WING_SIMULATOR_CALLER");
  }
  return require("@winglang/sdk/lib/simulator/client").makeSimulatorClient(simulatorUrl, handle, caller);
})()`;
}
exports.makeSimulatorJsClient = makeSimulatorJsClient;
function makeSimulatorJsClientV2(filename, resource) {
    const type = (0, path_1.basename)(filename).split(".")[0];
    const env = makeEnvVarName(type, resource);
    return `(function() {
  let handle = process.env.${env};
  if (!handle) {
    throw new Error("Missing environment variable: ${env}");
  }
  const simulatorUrl = process.env.WING_SIMULATOR_URL;
  if (!simulatorUrl) {
    throw new Error("Missing environment variable: WING_SIMULATOR_URL");
  }
  const caller = process.env.WING_SIMULATOR_CALLER;
  if (!caller) {
    throw new Error("Missing environment variable: WING_SIMULATOR_CALLER");
  }
  const backend = require("@winglang/sdk/lib/simulator/client").makeSimulatorClient(simulatorUrl, handle, caller);
  const client = new Proxy(backend, {
    get: function(target, prop, receiver) {
      return async function(...args) {
        return backend.call(prop, args);
      };
    },
  });
  return client;
})()`;
}
exports.makeSimulatorJsClientV2 = makeSimulatorJsClientV2;
// helper function to convert duration to a cron string
// maybe this belongs in a util library but for now it's here
function convertDurationToCronExpression(dur) {
    if (dur.minutes % 1 !== 0) {
        // our cron expression format is [minute] [hour] [day] [month] [year]
        throw new Error("Cron expressions with second precision are not supported");
    }
    const totalInMinutes = Math.floor(dur.minutes);
    const h = Math.floor(totalInMinutes / 60);
    const m = totalInMinutes % 60;
    // [minute] [hour] [day of month] [month] [day of week]
    const minute = m != 0 ? `*/${m}` : "*";
    const hour = h != 0 ? `*/${h}` : "*";
    // TODO: Support longer durations once we implement https://github.com/winglang/wing/issues/2243
    // for now we just use * for day, month, and year
    const dayInMonth = "*";
    const month = "*";
    const dayOfWeek = "*";
    // Generate cron string based on the duration
    const cronString = `${minute} ${hour} ${dayInMonth} ${month} ${dayOfWeek}`;
    return cronString;
}
exports.convertDurationToCronExpression = convertDurationToCronExpression;
//# sourceMappingURL=data:application/json;base64,