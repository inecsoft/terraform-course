"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Endpoint = void 0;
const fs_1 = require("fs");
const promises_1 = require("node:fs/promises");
const node_path_1 = require("node:path");
const wingtunnels_1 = require("@winglang/wingtunnels");
const util_1 = require("./util");
const simulator_1 = require("../simulator");
const STATE_FILENAME = "state.json";
class Endpoint {
    constructor(_props) {
        this._props = _props;
        this.status = "disconnected";
    }
    get context() {
        if (!this._context) {
            throw new Error("Cannot access context during class construction");
        }
        return this._context;
    }
    async init(context) {
        this._context = context;
        const state = await this.loadState();
        if (state.subdomain) {
            await this.connect(state.subdomain);
        }
        return {
            inputUrl: this._props.inputUrl,
            url: this.connectResponse?.url ?? this._props.url,
            label: this._props.label,
            browserSupport: this._props.browserSupport,
        };
    }
    async cleanup() {
        this.connectResponse?.close();
    }
    async save() {
        return this.saveState({
            ...(this.lastSubdomain && { subdomain: this.lastSubdomain }),
        });
    }
    async plan() {
        return simulator_1.UpdatePlan.AUTO;
    }
    async expose() {
        if (this.status === "connecting" || this.status === "connected") {
            throw new Error("Can only expose when status is disconnected.");
        }
        return this.connect();
    }
    async hide() {
        this.connectResponse?.close();
        this.connectResponse = undefined;
        this.lastSubdomain = undefined;
        this.status = "disconnected";
    }
    async exposeStatus() {
        return this.status;
    }
    async loadState() {
        const stateFileExists = await (0, util_1.exists)((0, node_path_1.join)(this.context.statedir, STATE_FILENAME));
        if (stateFileExists) {
            const stateFileContents = await (0, promises_1.readFile)((0, node_path_1.join)(this.context.statedir, STATE_FILENAME), "utf-8");
            return JSON.parse(stateFileContents);
        }
        else {
            return {};
        }
    }
    async saveState(state) {
        (0, fs_1.writeFileSync)((0, node_path_1.join)(this.context.statedir, STATE_FILENAME), JSON.stringify(state));
    }
    async connect(subdomain) {
        try {
            await this.context.withTrace({
                message: `Creating tunnel for endpoint. ${subdomain ? `Using subdomain: ${subdomain}` : ""}`,
                activity: async () => {
                    this.status = "connecting";
                    this.connectResponse = await (0, wingtunnels_1.connect)(this._props.inputUrl, {
                        subdomain,
                    });
                    this.lastSubdomain = new URL(this.connectResponse.url).hostname.split(".")[0];
                    this.status = "connected";
                },
            });
        }
        catch {
            this.status = "disconnected";
        }
    }
}
exports.Endpoint = Endpoint;
//# sourceMappingURL=data:application/json;base64,