type Token = {
    path: string;
    attr?: string;
    prop?: string;
};
export declare function parseToken(s: string): Token;
type TokenResolver = (token: Token) => string;
/**
 * Return an object with all tokens in it resolved to their appropriate values.
 *
 * A token can be a string like "${app/my_bucket#attrs.handle}". This token would be resolved to
 * the "handle" attribute of the resource at path "app/my_bucket". If that attribute does not
 * exist at the time of resolution (for example, if my_bucket is not being simulated yet), an
 * error will be thrown.
 *
 * Tokens can also be nested, like "${app/my_bucket#attrs.handle}/foo/bar".
 *
 * @param obj The object to resolve tokens in.
 * @returns The resolved token or throws an error if the token cannot be resolved.
 */
export declare function resolveTokens(obj: any, resolver: TokenResolver): any;
export {};
