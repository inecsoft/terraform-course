"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeSimulatorClient = void 0;
const http = __importStar(require("http"));
const serialization_1 = require("./serialization");
function makeHttpRequest(options) {
    return new Promise((resolve, reject) => {
        const req = http.request(options, (res) => {
            let data = "";
            res.on("data", (chunk) => {
                data += chunk;
            });
            res.on("end", () => {
                resolve(data);
            });
        });
        req.on("error", (e) => {
            reject(e);
        });
        if (options.body !== undefined) {
            req.write(options.body);
        }
        req.end();
    });
}
/**
 * Creates a proxy object that forwards method calls to the simulator server.
 *
 * @param url The URL of the simulator server
 * @param handle The handle for the resource we're calling methods on or getting properties from
 * @param caller The handle of the resource that is making the calls
 * @returns A proxy object that forwards calls to the simulator server
 */
function makeSimulatorClient(url, handle, caller) {
    let proxy;
    let hasThenMethod = true; // assume that the object has a "then" method until proven otherwise
    const get = (_target, method, _receiver) => {
        if (method === "then" && !hasThenMethod) {
            return undefined;
        }
        return async function (...args) {
            const body = { caller, handle, method, args };
            const parsedUrl = new URL(url);
            const resp = await makeHttpRequest({
                hostname: parsedUrl.hostname,
                port: parsedUrl.port,
                path: "/v1/call",
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(body),
            });
            let parsed = (0, serialization_1.deserialize)(resp);
            if (parsed.error) {
                // objects with "then" methods are special-cased by the JS runtime
                // because they are assumed to be promises, and can be awaited. [0]
                // however, this client don't know ahead of time what methods are on the
                // object, so we have to assume that it has a "then" method until
                // we get an error back from the server saying that it doesn't.
                //
                // [0]: https://stackoverflow.com/questions/55262996/does-awaiting-a-non-promise-have-any-detectable-effect
                if (method === "then" &&
                    parsed.error?.message?.startsWith('Method "then" not found on resource')) {
                    hasThenMethod = false;
                    // args[0] is the onFulfilled callback passed to the then method.
                    // we call it with the proxy object so that that `await client`
                    // returns the proxy object back, as callers might expect.
                    return args[0](proxy);
                }
                let err = new Error();
                err.message = parsed.error?.message;
                err.name = parsed.error?.name;
                if (parsed.error?.stack) {
                    // combine the stack trace from the server with the stack trace from the client
                    err.stack = `${parsed.error.stack}\n${err.stack}`;
                }
                throw err;
            }
            return parsed.result;
        };
    };
    proxy = new Proxy({}, { get });
    return proxy;
}
exports.makeSimulatorClient = makeSimulatorClient;
//# sourceMappingURL=data:application/json;base64,