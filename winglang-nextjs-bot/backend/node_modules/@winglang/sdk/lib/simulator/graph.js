"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Graph = void 0;
const tokens_1 = require("./tokens");
class Node {
    constructor(def) {
        this.def = def;
        this.dependencies = new Set();
        this.dependents = new Set();
    }
    get path() {
        return this.def.path;
    }
}
class Graph {
    constructor(resources = []) {
        this.byPath = {};
        for (const resource of resources) {
            this.byPath[resource.path] = new Node(resource);
        }
        // build the dependency graph
        for (const resource of resources) {
            const consumer = resource.path;
            // add explicit dependencies
            for (const dep of resource.deps ?? []) {
                this.recordDependency(consumer, dep);
            }
            // add implicit dependencies (e.g. from tokens in props)
            const implicitDeps = [];
            // collect all tokens from the props object (recursive) the "resolver" here is just a dummy
            // function that collects all tokens and returns a dummy value (we don't care about the
            // result).
            (0, tokens_1.resolveTokens)(resource.props ?? {}, (token) => {
                implicitDeps.push(token.path);
                return "[T]"; // <-- we don't really use the result, just need to return something
            });
            // do the same for resource.policy
            (0, tokens_1.resolveTokens)(resource.policy ?? {}, (token) => {
                implicitDeps.push(token.path);
                return "[T]";
            });
            // now add all implicit dependencies
            for (const dep of implicitDeps) {
                this.recordDependency(consumer, dep);
            }
        }
    }
    get nodes() {
        return Object.values(this.byPath);
    }
    tryFind(path) {
        const node = this.byPath[path];
        if (!node) {
            return undefined;
        }
        return node;
    }
    recordDependency(consumer, producer) {
        this.tryFind(consumer)?.dependencies.add(producer);
        this.tryFind(producer)?.dependents.add(consumer);
        // check for cyclic dependencies
        this.detectCycles(consumer);
        this.detectCycles(producer);
    }
    detectCycles(root) {
        const visited = new Set();
        const stack = new Set();
        const visit = (path) => {
            if (stack.has(path)) {
                throw new Error(`cyclic dependency detected: ${[...stack, path].join(" -> ")}`);
            }
            if (visited.has(path)) {
                return;
            }
            visited.add(path);
            stack.add(path);
            for (const dep of this.tryFind(path)?.dependencies ?? []) {
                visit(dep);
            }
            stack.delete(path);
        };
        visit(root);
    }
}
exports.Graph = Graph;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JhcGguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2ltdWxhdG9yL2dyYXBoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLHFDQUF5QztBQVN6QyxNQUFNLElBQUk7SUFHUixZQUE0QixHQUFNO1FBQU4sUUFBRyxHQUFILEdBQUcsQ0FBRztRQUZsQixpQkFBWSxHQUFHLElBQUksR0FBRyxFQUFVLENBQUM7UUFDakMsZUFBVSxHQUFHLElBQUksR0FBRyxFQUFVLENBQUM7SUFDVixDQUFDO0lBRXRDLElBQVcsSUFBSTtRQUNiLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7SUFDdkIsQ0FBQztDQUNGO0FBRUQsTUFBYSxLQUFLO0lBR2hCLFlBQVksWUFBaUIsRUFBRTtRQUZ2QixXQUFNLEdBQTRCLEVBQUUsQ0FBQztRQUczQyxLQUFLLE1BQU0sUUFBUSxJQUFJLFNBQVMsRUFBRSxDQUFDO1lBQ2pDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2xELENBQUM7UUFFRCw2QkFBNkI7UUFDN0IsS0FBSyxNQUFNLFFBQVEsSUFBSSxTQUFTLEVBQUUsQ0FBQztZQUNqQyxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO1lBRS9CLDRCQUE0QjtZQUM1QixLQUFLLE1BQU0sR0FBRyxJQUFJLFFBQVEsQ0FBQyxJQUFJLElBQUksRUFBRSxFQUFFLENBQUM7Z0JBQ3RDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDdkMsQ0FBQztZQUVELHdEQUF3RDtZQUN4RCxNQUFNLFlBQVksR0FBYSxFQUFFLENBQUM7WUFFbEMsMkZBQTJGO1lBQzNGLHVGQUF1RjtZQUN2RixXQUFXO1lBQ1gsSUFBQSxzQkFBYSxFQUFDLFFBQVEsQ0FBQyxLQUFLLElBQUksRUFBRSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7Z0JBQzVDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUM5QixPQUFPLEtBQUssQ0FBQyxDQUFDLG9FQUFvRTtZQUNwRixDQUFDLENBQUMsQ0FBQztZQUVILGtDQUFrQztZQUNsQyxJQUFBLHNCQUFhLEVBQUMsUUFBUSxDQUFDLE1BQU0sSUFBSSxFQUFFLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDN0MsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQzlCLE9BQU8sS0FBSyxDQUFDO1lBQ2YsQ0FBQyxDQUFDLENBQUM7WUFFSCxvQ0FBb0M7WUFDcEMsS0FBSyxNQUFNLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztnQkFDL0IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUN2QyxDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7SUFFRCxJQUFXLEtBQUs7UUFDZCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFTSxPQUFPLENBQUMsSUFBWTtRQUN6QixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9CLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNWLE9BQU8sU0FBUyxDQUFDO1FBQ25CLENBQUM7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTyxnQkFBZ0IsQ0FBQyxRQUFnQixFQUFFLFFBQWdCO1FBQ3pELElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsWUFBWSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFakQsZ0NBQWdDO1FBQ2hDLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRU8sWUFBWSxDQUFDLElBQVk7UUFDL0IsTUFBTSxPQUFPLEdBQUcsSUFBSSxHQUFHLEVBQVUsQ0FBQztRQUNsQyxNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsRUFBVSxDQUFDO1FBRWhDLE1BQU0sS0FBSyxHQUFHLENBQUMsSUFBWSxFQUFFLEVBQUU7WUFDN0IsSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7Z0JBQ3BCLE1BQU0sSUFBSSxLQUFLLENBQ2IsK0JBQStCLENBQUMsR0FBRyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQy9ELENBQUM7WUFDSixDQUFDO1lBRUQsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7Z0JBQ3RCLE9BQU87WUFDVCxDQUFDO1lBRUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNsQixLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRWhCLEtBQUssTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxZQUFZLElBQUksRUFBRSxFQUFFLENBQUM7Z0JBQ3pELEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNiLENBQUM7WUFFRCxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JCLENBQUMsQ0FBQztRQUVGLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNkLENBQUM7Q0FDRjtBQTFGRCxzQkEwRkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQb2xpY3lTdGF0ZW1lbnQgfSBmcm9tIFwiLi9zaW11bGF0b3JcIjtcbmltcG9ydCB7IHJlc29sdmVUb2tlbnMgfSBmcm9tIFwiLi90b2tlbnNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBEZWZpbml0aW9uIHtcbiAgcGF0aDogc3RyaW5nO1xuICBkZXBzPzogc3RyaW5nW107XG4gIHByb3BzPzogUmVjb3JkPHN0cmluZywgYW55PjtcbiAgcG9saWN5PzogUG9saWN5U3RhdGVtZW50W107XG59XG5cbmNsYXNzIE5vZGU8VCBleHRlbmRzIERlZmluaXRpb24+IHtcbiAgcHVibGljIHJlYWRvbmx5IGRlcGVuZGVuY2llcyA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuICBwdWJsaWMgcmVhZG9ubHkgZGVwZW5kZW50cyA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgZGVmOiBUKSB7fVxuXG4gIHB1YmxpYyBnZXQgcGF0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5kZWYucGF0aDtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgR3JhcGg8VCBleHRlbmRzIERlZmluaXRpb24+IHtcbiAgcHJpdmF0ZSBieVBhdGg6IFJlY29yZDxzdHJpbmcsIE5vZGU8VD4+ID0ge307XG5cbiAgY29uc3RydWN0b3IocmVzb3VyY2VzOiBUW10gPSBbXSkge1xuICAgIGZvciAoY29uc3QgcmVzb3VyY2Ugb2YgcmVzb3VyY2VzKSB7XG4gICAgICB0aGlzLmJ5UGF0aFtyZXNvdXJjZS5wYXRoXSA9IG5ldyBOb2RlKHJlc291cmNlKTtcbiAgICB9XG5cbiAgICAvLyBidWlsZCB0aGUgZGVwZW5kZW5jeSBncmFwaFxuICAgIGZvciAoY29uc3QgcmVzb3VyY2Ugb2YgcmVzb3VyY2VzKSB7XG4gICAgICBjb25zdCBjb25zdW1lciA9IHJlc291cmNlLnBhdGg7XG5cbiAgICAgIC8vIGFkZCBleHBsaWNpdCBkZXBlbmRlbmNpZXNcbiAgICAgIGZvciAoY29uc3QgZGVwIG9mIHJlc291cmNlLmRlcHMgPz8gW10pIHtcbiAgICAgICAgdGhpcy5yZWNvcmREZXBlbmRlbmN5KGNvbnN1bWVyLCBkZXApO1xuICAgICAgfVxuXG4gICAgICAvLyBhZGQgaW1wbGljaXQgZGVwZW5kZW5jaWVzIChlLmcuIGZyb20gdG9rZW5zIGluIHByb3BzKVxuICAgICAgY29uc3QgaW1wbGljaXREZXBzOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgICAvLyBjb2xsZWN0IGFsbCB0b2tlbnMgZnJvbSB0aGUgcHJvcHMgb2JqZWN0IChyZWN1cnNpdmUpIHRoZSBcInJlc29sdmVyXCIgaGVyZSBpcyBqdXN0IGEgZHVtbXlcbiAgICAgIC8vIGZ1bmN0aW9uIHRoYXQgY29sbGVjdHMgYWxsIHRva2VucyBhbmQgcmV0dXJucyBhIGR1bW15IHZhbHVlICh3ZSBkb24ndCBjYXJlIGFib3V0IHRoZVxuICAgICAgLy8gcmVzdWx0KS5cbiAgICAgIHJlc29sdmVUb2tlbnMocmVzb3VyY2UucHJvcHMgPz8ge30sICh0b2tlbikgPT4ge1xuICAgICAgICBpbXBsaWNpdERlcHMucHVzaCh0b2tlbi5wYXRoKTtcbiAgICAgICAgcmV0dXJuIFwiW1RdXCI7IC8vIDwtLSB3ZSBkb24ndCByZWFsbHkgdXNlIHRoZSByZXN1bHQsIGp1c3QgbmVlZCB0byByZXR1cm4gc29tZXRoaW5nXG4gICAgICB9KTtcblxuICAgICAgLy8gZG8gdGhlIHNhbWUgZm9yIHJlc291cmNlLnBvbGljeVxuICAgICAgcmVzb2x2ZVRva2VucyhyZXNvdXJjZS5wb2xpY3kgPz8ge30sICh0b2tlbikgPT4ge1xuICAgICAgICBpbXBsaWNpdERlcHMucHVzaCh0b2tlbi5wYXRoKTtcbiAgICAgICAgcmV0dXJuIFwiW1RdXCI7XG4gICAgICB9KTtcblxuICAgICAgLy8gbm93IGFkZCBhbGwgaW1wbGljaXQgZGVwZW5kZW5jaWVzXG4gICAgICBmb3IgKGNvbnN0IGRlcCBvZiBpbXBsaWNpdERlcHMpIHtcbiAgICAgICAgdGhpcy5yZWNvcmREZXBlbmRlbmN5KGNvbnN1bWVyLCBkZXApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBnZXQgbm9kZXMoKTogTm9kZTxUPltdIHtcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyh0aGlzLmJ5UGF0aCk7XG4gIH1cblxuICBwdWJsaWMgdHJ5RmluZChwYXRoOiBzdHJpbmcpOiBOb2RlPFQ+IHwgdW5kZWZpbmVkIHtcbiAgICBjb25zdCBub2RlID0gdGhpcy5ieVBhdGhbcGF0aF07XG4gICAgaWYgKCFub2RlKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgcHJpdmF0ZSByZWNvcmREZXBlbmRlbmN5KGNvbnN1bWVyOiBzdHJpbmcsIHByb2R1Y2VyOiBzdHJpbmcpIHtcbiAgICB0aGlzLnRyeUZpbmQoY29uc3VtZXIpPy5kZXBlbmRlbmNpZXMuYWRkKHByb2R1Y2VyKTtcbiAgICB0aGlzLnRyeUZpbmQocHJvZHVjZXIpPy5kZXBlbmRlbnRzLmFkZChjb25zdW1lcik7XG5cbiAgICAvLyBjaGVjayBmb3IgY3ljbGljIGRlcGVuZGVuY2llc1xuICAgIHRoaXMuZGV0ZWN0Q3ljbGVzKGNvbnN1bWVyKTtcbiAgICB0aGlzLmRldGVjdEN5Y2xlcyhwcm9kdWNlcik7XG4gIH1cblxuICBwcml2YXRlIGRldGVjdEN5Y2xlcyhyb290OiBzdHJpbmcpIHtcbiAgICBjb25zdCB2aXNpdGVkID0gbmV3IFNldDxzdHJpbmc+KCk7XG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgU2V0PHN0cmluZz4oKTtcblxuICAgIGNvbnN0IHZpc2l0ID0gKHBhdGg6IHN0cmluZykgPT4ge1xuICAgICAgaWYgKHN0YWNrLmhhcyhwYXRoKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYGN5Y2xpYyBkZXBlbmRlbmN5IGRldGVjdGVkOiAke1suLi5zdGFjaywgcGF0aF0uam9pbihcIiAtPiBcIil9YFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBpZiAodmlzaXRlZC5oYXMocGF0aCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2aXNpdGVkLmFkZChwYXRoKTtcbiAgICAgIHN0YWNrLmFkZChwYXRoKTtcblxuICAgICAgZm9yIChjb25zdCBkZXAgb2YgdGhpcy50cnlGaW5kKHBhdGgpPy5kZXBlbmRlbmNpZXMgPz8gW10pIHtcbiAgICAgICAgdmlzaXQoZGVwKTtcbiAgICAgIH1cblxuICAgICAgc3RhY2suZGVsZXRlKHBhdGgpO1xuICAgIH07XG5cbiAgICB2aXNpdChyb290KTtcbiAgfVxufVxuIl19