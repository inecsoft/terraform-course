"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Connections = exports.CONNECTIONS_FILE_PATH = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const CONNECTIONS_SYMBOL = Symbol.for("@winglang/sdk.core.Connections");
exports.CONNECTIONS_FILE_PATH = "connections.json";
/**
 * Connections are a way to track relationships between constructs.
 */
class Connections {
    /**
     * Return the matching Connections of the given construct tree.
     */
    static of(construct) {
        let connections = construct.node.root[CONNECTIONS_SYMBOL];
        if (!connections) {
            connections = new Connections();
            construct.node.root[CONNECTIONS_SYMBOL] = connections;
        }
        return connections;
    }
    constructor() {
        this._connections = [];
    }
    /**
     * Adds a connection between two constructs. A connection is a piece of
     * metadata describing how one construct is related to another construct.
     */
    add(props) {
        const connection = props;
        // avoid duplicate connections
        if (this._connections.some((c) => c.source === connection.source &&
            c.sourceOp === connection.sourceOp &&
            c.target === connection.target &&
            c.targetOp === connection.targetOp &&
            c.name === connection.name)) {
            return;
        }
        this._connections.push(connection);
    }
    /**
     * Synthesize `connections.json` to the given directory.
     */
    synth(outdir) {
        const connections = this._connections.map((c) => ({
            source: c.source.node.path,
            sourceOp: c.sourceOp,
            target: c.target.node.path,
            targetOp: c.targetOp,
            name: c.name,
        }));
        const tree = {
            version: "connections-0.1",
            connections,
        };
        fs.writeFileSync(path.join(outdir, exports.CONNECTIONS_FILE_PATH), JSON.stringify(tree, undefined, 2), { encoding: "utf8" });
    }
}
exports.Connections = Connections;
_a = JSII_RTTI_SYMBOL_1;
Connections[_a] = { fqn: "@winglang/sdk.core.Connections", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ubmVjdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29yZS9jb25uZWN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsdUNBQXlCO0FBQ3pCLDJDQUE2QjtBQUc3QixNQUFNLGtCQUFrQixHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztBQUUzRCxRQUFBLHFCQUFxQixHQUFHLGtCQUFrQixDQUFDO0FBRXhEOztHQUVHO0FBQ0gsTUFBYSxXQUFXO0lBQ3RCOztPQUVHO0lBQ0ksTUFBTSxDQUFDLEVBQUUsQ0FBQyxTQUFxQjtRQUNwQyxJQUFJLFdBQVcsR0FBSSxTQUFTLENBQUMsSUFBSSxDQUFDLElBQVksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBRW5FLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNqQixXQUFXLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztZQUMvQixTQUFTLENBQUMsSUFBSSxDQUFDLElBQVksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLFdBQVcsQ0FBQztRQUNqRSxDQUFDO1FBRUQsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQztJQUdEO1FBRGlCLGlCQUFZLEdBQWlCLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRXhCOzs7T0FHRztJQUNJLEdBQUcsQ0FBQyxLQUF5QjtRQUNsQyxNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUM7UUFFekIsOEJBQThCO1FBQzlCLElBQ0UsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQ3BCLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FDSixDQUFDLENBQUMsTUFBTSxLQUFLLFVBQVUsQ0FBQyxNQUFNO1lBQzlCLENBQUMsQ0FBQyxRQUFRLEtBQUssVUFBVSxDQUFDLFFBQVE7WUFDbEMsQ0FBQyxDQUFDLE1BQU0sS0FBSyxVQUFVLENBQUMsTUFBTTtZQUM5QixDQUFDLENBQUMsUUFBUSxLQUFLLFVBQVUsQ0FBQyxRQUFRO1lBQ2xDLENBQUMsQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDLElBQUksQ0FDN0IsRUFDRCxDQUFDO1lBQ0QsT0FBTztRQUNULENBQUM7UUFFRCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQ7O09BRUc7SUFDSSxLQUFLLENBQUMsTUFBYztRQUN6QixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNoRCxNQUFNLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSTtZQUMxQixRQUFRLEVBQUUsQ0FBQyxDQUFDLFFBQVE7WUFDcEIsTUFBTSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUk7WUFDMUIsUUFBUSxFQUFFLENBQUMsQ0FBQyxRQUFRO1lBQ3BCLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSTtTQUNiLENBQUMsQ0FBQyxDQUFDO1FBRUosTUFBTSxJQUFJLEdBQUc7WUFDWCxPQUFPLEVBQUUsaUJBQWlCO1lBQzFCLFdBQVc7U0FDWixDQUFDO1FBRUYsRUFBRSxDQUFDLGFBQWEsQ0FDZCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSw2QkFBcUIsQ0FBQyxFQUN4QyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLEVBQ2xDLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxDQUNyQixDQUFDO0lBQ0osQ0FBQzs7QUFoRUgsa0NBaUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZnMgZnJvbSBcImZzXCI7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgeyBJQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcblxuY29uc3QgQ09OTkVDVElPTlNfU1lNQk9MID0gU3ltYm9sLmZvcihcIkB3aW5nbGFuZy9zZGsuY29yZS5Db25uZWN0aW9uc1wiKTtcblxuZXhwb3J0IGNvbnN0IENPTk5FQ1RJT05TX0ZJTEVfUEFUSCA9IFwiY29ubmVjdGlvbnMuanNvblwiO1xuXG4vKipcbiAqIENvbm5lY3Rpb25zIGFyZSBhIHdheSB0byB0cmFjayByZWxhdGlvbnNoaXBzIGJldHdlZW4gY29uc3RydWN0cy5cbiAqL1xuZXhwb3J0IGNsYXNzIENvbm5lY3Rpb25zIHtcbiAgLyoqXG4gICAqIFJldHVybiB0aGUgbWF0Y2hpbmcgQ29ubmVjdGlvbnMgb2YgdGhlIGdpdmVuIGNvbnN0cnVjdCB0cmVlLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBvZihjb25zdHJ1Y3Q6IElDb25zdHJ1Y3QpOiBDb25uZWN0aW9ucyB7XG4gICAgbGV0IGNvbm5lY3Rpb25zID0gKGNvbnN0cnVjdC5ub2RlLnJvb3QgYXMgYW55KVtDT05ORUNUSU9OU19TWU1CT0xdO1xuXG4gICAgaWYgKCFjb25uZWN0aW9ucykge1xuICAgICAgY29ubmVjdGlvbnMgPSBuZXcgQ29ubmVjdGlvbnMoKTtcbiAgICAgIChjb25zdHJ1Y3Qubm9kZS5yb290IGFzIGFueSlbQ09OTkVDVElPTlNfU1lNQk9MXSA9IGNvbm5lY3Rpb25zO1xuICAgIH1cblxuICAgIHJldHVybiBjb25uZWN0aW9ucztcbiAgfVxuXG4gIHByaXZhdGUgcmVhZG9ubHkgX2Nvbm5lY3Rpb25zOiBDb25uZWN0aW9uW10gPSBbXTtcbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBjb25uZWN0aW9uIGJldHdlZW4gdHdvIGNvbnN0cnVjdHMuIEEgY29ubmVjdGlvbiBpcyBhIHBpZWNlIG9mXG4gICAqIG1ldGFkYXRhIGRlc2NyaWJpbmcgaG93IG9uZSBjb25zdHJ1Y3QgaXMgcmVsYXRlZCB0byBhbm90aGVyIGNvbnN0cnVjdC5cbiAgICovXG4gIHB1YmxpYyBhZGQocHJvcHM6IEFkZENvbm5lY3Rpb25Qcm9wcykge1xuICAgIGNvbnN0IGNvbm5lY3Rpb24gPSBwcm9wcztcblxuICAgIC8vIGF2b2lkIGR1cGxpY2F0ZSBjb25uZWN0aW9uc1xuICAgIGlmIChcbiAgICAgIHRoaXMuX2Nvbm5lY3Rpb25zLnNvbWUoXG4gICAgICAgIChjKSA9PlxuICAgICAgICAgIGMuc291cmNlID09PSBjb25uZWN0aW9uLnNvdXJjZSAmJlxuICAgICAgICAgIGMuc291cmNlT3AgPT09IGNvbm5lY3Rpb24uc291cmNlT3AgJiZcbiAgICAgICAgICBjLnRhcmdldCA9PT0gY29ubmVjdGlvbi50YXJnZXQgJiZcbiAgICAgICAgICBjLnRhcmdldE9wID09PSBjb25uZWN0aW9uLnRhcmdldE9wICYmXG4gICAgICAgICAgYy5uYW1lID09PSBjb25uZWN0aW9uLm5hbWVcbiAgICAgIClcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9jb25uZWN0aW9ucy5wdXNoKGNvbm5lY3Rpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIFN5bnRoZXNpemUgYGNvbm5lY3Rpb25zLmpzb25gIHRvIHRoZSBnaXZlbiBkaXJlY3RvcnkuXG4gICAqL1xuICBwdWJsaWMgc3ludGgob3V0ZGlyOiBzdHJpbmcpIHtcbiAgICBjb25zdCBjb25uZWN0aW9ucyA9IHRoaXMuX2Nvbm5lY3Rpb25zLm1hcCgoYykgPT4gKHtcbiAgICAgIHNvdXJjZTogYy5zb3VyY2Uubm9kZS5wYXRoLFxuICAgICAgc291cmNlT3A6IGMuc291cmNlT3AsXG4gICAgICB0YXJnZXQ6IGMudGFyZ2V0Lm5vZGUucGF0aCxcbiAgICAgIHRhcmdldE9wOiBjLnRhcmdldE9wLFxuICAgICAgbmFtZTogYy5uYW1lLFxuICAgIH0pKTtcblxuICAgIGNvbnN0IHRyZWUgPSB7XG4gICAgICB2ZXJzaW9uOiBcImNvbm5lY3Rpb25zLTAuMVwiLFxuICAgICAgY29ubmVjdGlvbnMsXG4gICAgfTtcblxuICAgIGZzLndyaXRlRmlsZVN5bmMoXG4gICAgICBwYXRoLmpvaW4ob3V0ZGlyLCBDT05ORUNUSU9OU19GSUxFX1BBVEgpLFxuICAgICAgSlNPTi5zdHJpbmdpZnkodHJlZSwgdW5kZWZpbmVkLCAyKSxcbiAgICAgIHsgZW5jb2Rpbmc6IFwidXRmOFwiIH1cbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogUHJvcHMgZm9yIGBDb25uZWN0aW9ucy5hZGRgLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFkZENvbm5lY3Rpb25Qcm9wcyB7XG4gIC8qKlxuICAgKiBUaGUgc291cmNlIG9mIHRoZSBjb25uZWN0aW9uLlxuICAgKi9cbiAgcmVhZG9ubHkgc291cmNlOiBJQ29uc3RydWN0O1xuXG4gIC8qKlxuICAgKiBBbiBvcGVyYXRpb24gdGhhdCB0aGUgc291cmNlIG9iamVjdCBzdXBwb3J0cy5cbiAgICogQGRlZmF1bHQgLSBubyBvcGVyYXRpb25cbiAgICovXG4gIHJlYWRvbmx5IHNvdXJjZU9wPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgdGFyZ2V0IG9mIHRoZSBjb25uZWN0aW9uLlxuICAgKi9cbiAgcmVhZG9ubHkgdGFyZ2V0OiBJQ29uc3RydWN0O1xuXG4gIC8qKlxuICAgKiBBbiBvcGVyYXRpb24gdGhhdCB0aGUgdGFyZ2V0IG9iamVjdCBzdXBwb3J0cy5cbiAgICogQGRlZmF1bHQgLSBubyBvcGVyYXRpb25cbiAgICovXG4gIHJlYWRvbmx5IHRhcmdldE9wPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBBIG5hbWUgZm9yIHRoZSBjb25uZWN0aW9uLlxuICAgKi9cbiAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xufVxuXG4vKipcbiAqIEEgY29ubmVjdGlvbiB0byBhbm90aGVyIGNvbnN0cnVjdC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb25uZWN0aW9uIHtcbiAgLyoqXG4gICAqIFRoZSBzb3VyY2Ugb2YgdGhlIGNvbm5lY3Rpb24uXG4gICAqL1xuICByZWFkb25seSBzb3VyY2U6IElDb25zdHJ1Y3Q7XG5cbiAgLyoqXG4gICAqIEFuIG9wZXJhdGlvbiB0aGF0IHRoZSBzb3VyY2Ugb2JqZWN0IHN1cHBvcnRzLlxuICAgKiBAZGVmYXVsdCAtIG5vIG9wZXJhdGlvblxuICAgKi9cbiAgcmVhZG9ubHkgc291cmNlT3A/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSB0YXJnZXQgb2YgdGhlIGNvbm5lY3Rpb24uXG4gICAqL1xuICByZWFkb25seSB0YXJnZXQ6IElDb25zdHJ1Y3Q7XG5cbiAgLyoqXG4gICAqIEFuIG9wZXJhdGlvbiB0aGF0IHRoZSB0YXJnZXQgb2JqZWN0IHN1cHBvcnRzLlxuICAgKiBAZGVmYXVsdCAtIG5vIG9wZXJhdGlvblxuICAgKi9cbiAgcmVhZG9ubHkgdGFyZ2V0T3A/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEEgbmFtZSBmb3IgdGhlIGNvbm5lY3Rpb24uXG4gICAqL1xuICByZWFkb25seSBuYW1lOiBzdHJpbmc7XG59XG4iXX0=