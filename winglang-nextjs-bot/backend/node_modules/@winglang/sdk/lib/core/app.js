"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.preSynthesizeAllConstructs = exports.App = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const constructs_1 = require("constructs");
const errors_1 = require("./errors");
const constants_1 = require("../constants");
const platform_1 = require("../platform");
const node_1 = require("../std/node");
/**
 * A Wing application.
 */
class App extends constructs_1.Construct {
    /**
     * Returns the root app.
     */
    static of(scope) {
        return node_1.Node.of(scope).app;
    }
    constructor(scope, id, props) {
        super(scope, id);
        /** @internal */
        this[_b] = true;
        /**
         * Used in `makeId` to keep track of known IDs
         */
        this._idCounters = {};
        if (!props.entrypointDir) {
            throw new Error("Missing environment variable: WING_SOURCE_DIR");
        }
        // the app is also marked as root in the case where there is no root construct
        if (!props.rootConstruct) {
            node_1.Node._markRoot(this.constructor);
        }
        this.entrypointDir = props.entrypointDir;
        this._newInstanceOverrides = props.newInstanceOverrides ?? [];
        this._synthHooks = props.synthHooks;
        this.isTestEnvironment = props.isTestEnvironment ?? false;
    }
    /**
     * The ".wing" directory, which is where the compiler emits its output. We are taking an implicit
     * assumption here that it is always set to be `$outdir/.wing` which is currently hard coded into
     * the `cli/compile.ts` file.
     */
    get workdir() {
        return `${this.outdir}/.wing`;
    }
    /**
     * The parameter registrar for the app, can be used to find and register
     * parameter values that were provided to the wing application.
     */
    get parameters() {
        if (!this._parameters) {
            this._parameters = new platform_1.ParameterRegistrar(this, "ParameterRegistrar");
        }
        return this._parameters;
    }
    /**
     * Creates a new object of the given FQN.
     * @param fqn the fqn of the class to instantiate
     * @param ctor the constructor of the class to instantiate (undefined for abstract classes)
     * @param scope the scope of the resource
     * @param id the id of the resource
     * @param args the arguments to pass to the resource
     * @returns the new instance
     * @throws if the FQN is not supported
     */
    new(fqn, ctor, scope, id, ...args) {
        // delegate to "tryNew" first, which will allow derived classes to inject
        const instance = this.tryNew(fqn, scope, id, ...args);
        if (instance) {
            return instance;
        }
        // no injection, so we'll just create a new instance
        return new ctor(scope, id, ...args);
    }
    /**
     * Creates a new object of the given abstract class FQN.
     */
    newAbstract(fqn, scope, id, ...args) {
        // next delegate to "tryNew", which will allow derived classes to inject
        const instance = this.tryNew(fqn, scope, id, ...args);
        if (!instance) {
            const typeName = fqn.replace(`${constants_1.SDK_PACKAGE_NAME}.`, "");
            const typeNameParts = typeName.split(".");
            throw new errors_1.NotImplementedError(`Resource "${fqn}" is not yet implemented for "${this._target}" target. Please refer to the roadmap https://github.com/orgs/winglang/projects/3/views/1?filterQuery=${typeName}`, { resource: typeNameParts[typeNameParts.length - 1] });
        }
        return instance;
    }
    makeId(scope, prefix = "") {
        const key = `${scope.node.addr}|${prefix}`;
        this._idCounters[key] = this._idCounters[key] ?? 0;
        return `${prefix}${this._idCounters[key]++}`;
    }
    /**
     * Can be overridden by derived classes to inject dependencies.
     *
     * @param fqn The fully qualified name of the class we want the type for (jsii).
     *
     * @returns The dependency injected specific target type for the given FQN, or undefined if not found.
     */
    typeForFqn(fqn) {
        fqn;
        return undefined;
    }
    /**
     * Can be overridden by derived classes to inject dependencies.
     *
     * @param fqn The fully qualified name of the class to instantiate (jsii).
     * @param scope The construct scope.
     * @param id The construct id.
     * @param args The arguments to pass to the constructor.
     */
    tryNew(fqn, scope, id, ...args) {
        // first check if overrides have been provided
        for (const override of this._newInstanceOverrides) {
            const instance = override(fqn, scope, id, ...args);
            if (instance) {
                return instance;
            }
        }
        const type = this.typeForFqn(fqn);
        if (!type) {
            return undefined;
        }
        return new type(scope, id, ...args);
    }
}
exports.App = App;
_a = JSII_RTTI_SYMBOL_1, _b = node_1.APP_SYMBOL;
App[_a] = { fqn: "@winglang/sdk.core.App", version: "0.0.0" };
function preSynthesizeAllConstructs(app) {
    for (const c of app.node.findAll()) {
        if (typeof c._preSynthesize === "function") {
            c._preSynthesize();
        }
    }
}
exports.preSynthesizeAllConstructs = preSynthesizeAllConstructs;
//# sourceMappingURL=data:application/json;base64,