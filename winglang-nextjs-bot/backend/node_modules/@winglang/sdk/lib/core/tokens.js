"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTokenResolver = exports.registerTokenResolver = exports.tokenEnvName = void 0;
/**
 * Global registry of available token resolvers.
 */
const _resolvers = [];
/**
 * Creates a valid environment variable name from the given token.
 */
function tokenEnvName(value) {
    return `WING_TOKEN_${value
        .replace(/([^a-zA-Z0-9]+)/g, "_")
        .replace(/_+$/, "")
        .replace(/^_+/, "")
        .toUpperCase()}`;
}
exports.tokenEnvName = tokenEnvName;
/**
 * Globally registers a new token resolver
 */
function registerTokenResolver(resolver) {
    _resolvers.push(resolver);
}
exports.registerTokenResolver = registerTokenResolver;
/**
 * Find the first token resolver that considers the given value a token (or containing token(s)).
 */
function getTokenResolver(value) {
    return _resolvers.find((r) => r.isToken(value));
}
exports.getTokenResolver = getTokenResolver;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW5zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvcmUvdG9rZW5zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQXNCQTs7R0FFRztBQUNILE1BQU0sVUFBVSxHQUFxQixFQUFFLENBQUM7QUFFeEM7O0dBRUc7QUFDSCxTQUFnQixZQUFZLENBQUMsS0FBYTtJQUN4QyxPQUFPLGNBQWMsS0FBSztTQUN2QixPQUFPLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxDQUFDO1NBQ2hDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO1NBQ2xCLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO1NBQ2xCLFdBQVcsRUFBRSxFQUFFLENBQUM7QUFDckIsQ0FBQztBQU5ELG9DQU1DO0FBRUQ7O0dBRUc7QUFDSCxTQUFnQixxQkFBcUIsQ0FBQyxRQUF3QjtJQUM1RCxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzVCLENBQUM7QUFGRCxzREFFQztBQUVEOztHQUVHO0FBQ0gsU0FBZ0IsZ0JBQWdCLENBQUMsS0FBVTtJQUN6QyxPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNsRCxDQUFDO0FBRkQsNENBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJSW5mbGlnaHRIb3N0IH0gZnJvbSBcIi4uL3N0ZFwiO1xuLyoqXG4gKiBSZXByZXNlbnRzIHZhbHVlcyB0aGF0IGNhbiBvbmx5IGJlIHJlc29sdmVkIGFmdGVyIHRoZSBhcHAgaXMgc3ludGhlc2l6ZWQuXG4gKiBUb2tlbnMgdmFsdWVzIGFyZSBjYXB0dXJlZCBhcyBlbnZpcm9ubWVudCB2YXJpYWJsZSwgYW5kIHJlc29sdmVkIHRocm91Z2ggdGhlIGNvbXBpbGF0aW9uIHRhcmdldCB0b2tlbiBtZWNoYW5pc20uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVRva2VuUmVzb2x2ZXIge1xuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlzIHRoZSBnaXZlbiB2YWx1ZSBpcyBhIHRva2VuLlxuICAgKi9cbiAgaXNUb2tlbih2YWx1ZTogYW55KTogYm9vbGVhbjtcblxuICAvKipcbiAgICogXCJMaWZ0c1wiIGEgdmFsdWUgaW50byBhbiBpbmZsaWdodCBjb250ZXh0LlxuICAgKi9cbiAgbGlmdCh2YWx1ZTogYW55KTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBMaWZ0cyB0aGUgZ2l2ZW4gdG9rZW4gdG8gdGhlIGhvc3QuXG4gICAqL1xuICBvbkxpZnRWYWx1ZShob3N0OiBJSW5mbGlnaHRIb3N0LCB2YWx1ZTogYW55KTogdm9pZDtcbn1cblxuLyoqXG4gKiBHbG9iYWwgcmVnaXN0cnkgb2YgYXZhaWxhYmxlIHRva2VuIHJlc29sdmVycy5cbiAqL1xuY29uc3QgX3Jlc29sdmVyczogSVRva2VuUmVzb2x2ZXJbXSA9IFtdO1xuXG4vKipcbiAqIENyZWF0ZXMgYSB2YWxpZCBlbnZpcm9ubWVudCB2YXJpYWJsZSBuYW1lIGZyb20gdGhlIGdpdmVuIHRva2VuLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9rZW5FbnZOYW1lKHZhbHVlOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gYFdJTkdfVE9LRU5fJHt2YWx1ZVxuICAgIC5yZXBsYWNlKC8oW15hLXpBLVowLTldKykvZywgXCJfXCIpXG4gICAgLnJlcGxhY2UoL18rJC8sIFwiXCIpXG4gICAgLnJlcGxhY2UoL15fKy8sIFwiXCIpXG4gICAgLnRvVXBwZXJDYXNlKCl9YDtcbn1cblxuLyoqXG4gKiBHbG9iYWxseSByZWdpc3RlcnMgYSBuZXcgdG9rZW4gcmVzb2x2ZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyVG9rZW5SZXNvbHZlcihyZXNvbHZlcjogSVRva2VuUmVzb2x2ZXIpIHtcbiAgX3Jlc29sdmVycy5wdXNoKHJlc29sdmVyKTtcbn1cblxuLyoqXG4gKiBGaW5kIHRoZSBmaXJzdCB0b2tlbiByZXNvbHZlciB0aGF0IGNvbnNpZGVycyB0aGUgZ2l2ZW4gdmFsdWUgYSB0b2tlbiAob3IgY29udGFpbmluZyB0b2tlbihzKSkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRUb2tlblJlc29sdmVyKHZhbHVlOiBhbnkpOiBJVG9rZW5SZXNvbHZlciB8IHVuZGVmaW5lZCB7XG4gIHJldHVybiBfcmVzb2x2ZXJzLmZpbmQoKHIpID0+IHIuaXNUb2tlbih2YWx1ZSkpO1xufVxuIl19