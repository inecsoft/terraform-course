"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BucketClient = void 0;
const storage_1 = require("@google-cloud/storage");
const mime_types_1 = __importDefault(require("mime-types"));
const cloud_1 = require("../cloud");
const std_1 = require("../std");
class BucketClient {
    constructor(bucketName, storage, projectId = process.env.GCP_PROJECT_ID ?? "wingsdk-test") {
        this.bucketName = bucketName;
        this.storage = storage ? storage : new storage_1.Storage({ projectId });
        this.bucket = this.storage.bucket(this.bucketName);
    }
    async metadata(key) {
        try {
            const [metadata] = await this.bucket.file(key).getMetadata();
            return {
                contentType: metadata.contentType,
                lastModified: std_1.Datetime.fromIso(metadata.updated),
                size: Number(metadata.size),
            };
        }
        catch (error) {
            throw new Error(`Object does not exist (key=${key}).`);
        }
    }
    async copy(srcKey, dstKey) {
        try {
            const srcFile = this.bucket.file(srcKey);
            await srcFile.copy(this.bucket.file(dstKey));
        }
        catch (error) {
            throw new Error(`Source object does not exist (srcKey=${srcKey}).`);
        }
    }
    /**
     * Move object within the bucket
     *
     * @param srcKey The key of the source object you wish to rename.
     * @param dstKey The key of the destination object after rename.
     * @throws if `srcKey` object doesn't exist or if it matches `dstKey`.
     */
    async rename(srcKey, dstKey) {
        if (srcKey === dstKey) {
            throw new Error(`Renaming an object to its current name is not a valid operation (srcKey=${srcKey}, dstKey=${dstKey}).`);
        }
        await this.copy(srcKey, dstKey);
        await this.delete(srcKey);
    }
    // check if bucket is public or not from bucket metadata
    async isPublic() {
        try {
            const [metadata] = await this.bucket.getMetadata();
            return metadata.iamConfiguration?.publicAccessPrevention === "inherited";
        }
        catch (error) {
            throw new Error(`Failed to check if bucket is public. (bucket=${this.bucketName})`);
        }
    }
    async exists(key) {
        try {
            const [exists] = await this.bucket.file(key).exists();
            return exists;
        }
        catch (err) {
            throw new Error(`Failed to check if object exists. (key=${key})`);
        }
    }
    /**
     * Put object into bucket with given body contents
     *
     * @param key Key of the object
     * @param body string contents of the object
     */
    async put(key, body, opts) {
        const options = {
            contentType: (opts?.contentType ?? mime_types_1.default.lookup(key)) || "application/octet-stream",
        };
        await this.bucket.file(key).save(body, options);
    }
    /**
     * Put Json object into bucket with given body contents
     *
     * @param key Key of the object
     * @param body Json object
     */
    async putJson(key, body) {
        await this.put(key, JSON.stringify(body, null, 2), {
            contentType: "application/json",
        });
    }
    async get(key, options) {
        const body = await this.bucket
            .file(key)
            .download({ start: options?.startByte, end: options?.endByte })
            .catch((e) => {
            throw new Error(`Failed to get object (key=${key}): ${e.stack})}`);
        });
        try {
            return new TextDecoder("utf8", { fatal: true }).decode(body[0]);
        }
        catch (e) {
            throw new Error(`Object content could not be read as text (key=${key}): ${e.stack})}`);
        }
    }
    async tryGet(key, options) {
        try {
            if (await this.exists(key)) {
                return await this.get(key, options);
            }
            return undefined;
        }
        catch (error) {
            throw new Error(`Failed to tryGet object. (key=${key}) ${error.stack}`);
        }
    }
    async getJson(key) {
        try {
            if (!(await this.exists(key))) {
                throw new Error(`Cannot get JSON object that does not exist. (key=${key})`);
            }
            return JSON.parse(await this.get(key));
        }
        catch (error) {
            throw new Error(`Failed to get JSON object. (key=${key})`);
        }
    }
    async tryGetJson(key) {
        try {
            if (await this.exists(key)) {
                return await this.getJson(key);
            }
            return undefined;
        }
        catch (error) {
            throw new Error(`Failed to tryGet JSON object. (key=${key})`);
        }
    }
    async delete(key, opts = {}) {
        const mustExist = opts?.mustExist ?? false;
        if (mustExist && !(await this.exists(key))) {
            throw new Error(`Object does not exist (key=${key}).`);
        }
        try {
            await this.bucket.file(key).delete();
        }
        catch (error) {
            if (!mustExist && error.code === 404) {
                return;
            }
            throw new Error(`Failed to delete object (key=${key}).`);
        }
    }
    async tryDelete(key) {
        if (await this.exists(key)) {
            await this.delete(key);
            return true;
        }
        return false;
    }
    async list(prefix) {
        try {
            const [files] = await this.bucket.getFiles({ prefix });
            return files.map((file) => file.name);
        }
        catch (error) {
            throw new Error(`Failed to list objects. (prefix=${prefix})`);
        }
    }
    async publicUrl(key) {
        if (!(await this.isPublic())) {
            throw new Error("Cannot provide public url for a non-public bucket");
        }
        if (!(await this.exists(key))) {
            throw new Error(`Cannot provide public url for a non-existent key (key=${key})`);
        }
        return `https://storage.googleapis.com/${this.bucketName}/${key}`;
    }
    /**
     * Returns a presigned URL for the specified key in the bucket.
     * @param key The key of the object in the bucket.
     * @param opts The options including the action and the duration for the signed URL.
     * @returns The presigned URL string.
     * @inflight
     */
    async signedUrl(key, opts) {
        const gcsFile = this.bucket.file(key);
        let gcsAction;
        // Set default action to DOWNLOAD if not provided
        const action = opts?.action ?? cloud_1.BucketSignedUrlAction.DOWNLOAD;
        // Set the GCS action
        switch (action) {
            case cloud_1.BucketSignedUrlAction.DOWNLOAD:
                if (!(await this.exists(key))) {
                    throw new Error(`Cannot provide signed url for a non-existent key (key=${key})`);
                }
                gcsAction = "read";
                break;
            case cloud_1.BucketSignedUrlAction.UPLOAD:
                gcsAction = "write";
                break;
            default:
                throw new Error(`Invalid action: ${opts?.action}`);
        }
        // Generate the presigned URL
        const [signedUrl] = await gcsFile.getSignedUrl({
            version: "v4",
            action: gcsAction,
            expires: Date.now() + (opts?.duration?.seconds ?? 900) * 1000,
        });
        return signedUrl;
    }
}
exports.BucketClient = BucketClient;
//# sourceMappingURL=data:application/json;base64,