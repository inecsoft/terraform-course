import { Storage } from "@google-cloud/storage";
import { BucketDeleteOptions, BucketSignedUrlOptions, BucketPutOptions, IBucketClient, ObjectMetadata, BucketGetOptions, BucketTryGetOptions } from "../cloud";
import { Json } from "../std";
export declare class BucketClient implements IBucketClient {
    private bucketName;
    private storage;
    private bucket;
    constructor(bucketName: string, storage: Storage, projectId?: string);
    metadata(key: string): Promise<ObjectMetadata>;
    copy(srcKey: string, dstKey: string): Promise<void>;
    /**
     * Move object within the bucket
     *
     * @param srcKey The key of the source object you wish to rename.
     * @param dstKey The key of the destination object after rename.
     * @throws if `srcKey` object doesn't exist or if it matches `dstKey`.
     */
    rename(srcKey: string, dstKey: string): Promise<void>;
    private isPublic;
    exists(key: string): Promise<boolean>;
    /**
     * Put object into bucket with given body contents
     *
     * @param key Key of the object
     * @param body string contents of the object
     */
    put(key: string, body: string, opts?: BucketPutOptions): Promise<void>;
    /**
     * Put Json object into bucket with given body contents
     *
     * @param key Key of the object
     * @param body Json object
     */
    putJson(key: string, body: Json): Promise<void>;
    get(key: string, options?: BucketGetOptions): Promise<string>;
    tryGet(key: string, options?: BucketTryGetOptions): Promise<string | undefined>;
    getJson(key: string): Promise<Json>;
    tryGetJson(key: string): Promise<Json | undefined>;
    delete(key: string, opts?: BucketDeleteOptions): Promise<void>;
    tryDelete(key: string): Promise<boolean>;
    list(prefix?: string): Promise<string[]>;
    publicUrl(key: string): Promise<string>;
    /**
     * Returns a presigned URL for the specified key in the bucket.
     * @param key The key of the object in the bucket.
     * @param opts The options including the action and the duration for the signed URL.
     * @returns The presigned URL string.
     * @inflight
     */
    signedUrl(key: string, opts: BucketSignedUrlOptions): Promise<string>;
}
