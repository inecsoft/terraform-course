"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveDirname = exports.createExternRequire = exports.assign = exports.lookup = exports.unwrap = exports.normalPath = exports.nodeof = exports.range = exports.assert = exports.neq = exports.eq = void 0;
// Code in this file will be automatically included in all inflight code bundles,
// so avoid importing anything heavy here.
const node_assert_1 = require("node:assert");
const path = __importStar(require("node:path"));
// since we moved from node:18 to node:20 the deepStrictEqual doesn't work as expected.
// https://github.com/winglang/wing/issues/4444
// therefore we're using a local version of the comparison from node 18.
const equality_1 = require("./util/equality");
function eq(a, b) {
    try {
        return (0, equality_1.deepStrictEqual)(a, b);
    }
    catch {
        return false;
    }
}
exports.eq = eq;
function neq(a, b) {
    try {
        (0, node_assert_1.notDeepStrictEqual)(a, b);
        return true;
    }
    catch {
        return false;
    }
}
exports.neq = neq;
function assert(condition, message) {
    if (!condition) {
        throw new Error("assertion failed: " + message);
    }
}
exports.assert = assert;
function range(start, end, inclusive) {
    function* iterator() {
        let i = start;
        let limit = inclusive ? (end < start ? end - 1 : end + 1) : end;
        while (i < limit)
            yield i++;
        while (i > limit)
            yield i--;
    }
    return iterator();
}
exports.range = range;
function nodeof(construct) {
    // Should only be used preflight, avoid bundling
    const Node = eval("require('./std/node').Node");
    return Node.of(construct);
}
exports.nodeof = nodeof;
function normalPath(p) {
    return p.replace(/\\+/g, "/");
}
exports.normalPath = normalPath;
function unwrap(value) {
    if (value != null) {
        return value;
    }
    throw new Error("Unexpected nil");
}
exports.unwrap = unwrap;
function lookup(obj, index) {
    checkIndex(index);
    if (typeof index === "number") {
        index = checkArrayAccess(obj, index);
        return obj[index];
    }
    if (typeof obj !== "object") {
        throw new TypeError(`Lookup failed, value is not an object (found "${typeof obj}")`);
    }
    if (!(index in obj)) {
        throw new RangeError(`Key "${index}" not found`);
    }
    return obj[index];
}
exports.lookup = lookup;
function assign(obj, index, kind, value) {
    checkIndex(index);
    if (typeof index === "number") {
        index = checkArrayAccess(obj, index);
    }
    if (typeof index === "string" && typeof obj !== "object") {
        throw new TypeError(`Assignment failed, value is not an object (found \"${typeof obj}\")`);
    }
    switch (kind) {
        case "=":
            obj[index] = value;
            break;
        case "+=":
            obj[index] += value;
            break;
        case "-=":
            obj[index] -= value;
            break;
        default:
            throw new Error(`Invalid assignment kind: ${kind}`);
    }
}
exports.assign = assign;
function checkIndex(index) {
    if (typeof index !== "string" && typeof index !== "number") {
        throw new TypeError(`Index must be a string or number (found "${typeof index}")`);
    }
}
function checkArrayAccess(obj, index) {
    if (!Array.isArray(obj) && !Buffer.isBuffer(obj) && typeof obj !== "string") {
        throw new TypeError("Index is a number but collection is not an array or string");
    }
    if (index < 0 && index >= -obj.length) {
        index = obj.length + index;
    }
    if (index < 0 || index >= obj.length) {
        throw new RangeError(`Index ${index} out of bounds for array of length ${obj.length}`);
    }
    return index;
}
function createExternRequire(dirname) {
    return (externPath) => {
        // using eval to always avoid bundling
        const jiti = eval("require('jiti')");
        const esbuild = eval("require('esbuild')");
        const newRequire = jiti(dirname, {
            sourceMaps: true,
            interopDefault: true,
            transform(opts) {
                return esbuild.transformSync(opts.source, {
                    format: "cjs",
                    target: "node20",
                    sourcemap: "inline",
                    loader: opts.ts ? "ts" : "js",
                });
            },
        });
        return newRequire(externPath);
    };
}
exports.createExternRequire = createExternRequire;
function resolveDirname(outdir, relativeSourceDir) {
    return normalPath(path.resolve(outdir, relativeSourceDir));
}
exports.resolveDirname = resolveDirname;
//# sourceMappingURL=data:application/json;base64,