"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Website = exports.WEBSITE_FQN = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const path_1 = require("path");
const constants_1 = require("../constants");
const core_1 = require("../core");
const errors_1 = require("../core/errors");
const types_1 = require("../core/types");
const std_1 = require("../std");
/**
 * Global identifier for `Website`.
 */
exports.WEBSITE_FQN = (0, constants_1.fqnForType)("cloud.Website");
/**
 * A cloud static website.
 *
 * @inflight `@winglang/sdk.cloud.IWebsiteClient`
 * @abstract
 */
class Website extends std_1.Resource {
    constructor(scope, id, props) {
        if (new.target === Website) {
            return std_1.Resource._newFromFactory(exports.WEBSITE_FQN, scope, id, props);
        }
        super(scope, id);
        std_1.Node.of(this).title = "Website";
        std_1.Node.of(this).description = "A static website";
        this._path = (0, path_1.isAbsolute)(props.path)
            ? props.path
            : (0, path_1.resolve)(core_1.App.of(scope).entrypointDir, props.path);
        this._domain = props.domain;
    }
    /**
     * Absolute local path to the website's static files.
     */
    get path() {
        return this._path;
    }
    /**
     * The website's url.
     */
    get url() {
        return this._endpoint.url;
    }
    /**
     * The Endpoint of the Website.
     * @abstract
     * @internal
     */
    get _endpoint() {
        throw new errors_1.AbstractMemberError();
    }
    /**
     * Add a JSON file with custom values during the website's deployment.
     * If the path conflicts with file path from the website's static assets, an error will be thrown.
     * @param path the file path it will be uploaded as
     * @param data the data to write to the file
     */
    addJson(path, data) {
        if (!path.endsWith(".json")) {
            throw new Error(`key must have a .json suffix. (current: "${path.split(".").pop()}")`);
        }
        return this.addFile(path, JSON.stringify(data), {
            contentType: "application/json",
        });
    }
    /**
     * Add a file to the website during deployment.
     * If the path conflicts with file path from the website's static assets, an error will be thrown.
     * @param path the file path it will be uploaded as
     * @param data the data to write to the file
     * @param options configure the file's options
     * @abstract
     */
    addFile(path, data, options) {
        path;
        data;
        options;
        throw new errors_1.AbstractMemberError();
    }
}
exports.Website = Website;
_a = JSII_RTTI_SYMBOL_1;
Website[_a] = { fqn: "@winglang/sdk.cloud.Website", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vic2l0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbG91ZC93ZWJzaXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsK0JBQTJDO0FBRzNDLDRDQUEwQztBQUMxQyxrQ0FBOEI7QUFDOUIsMkNBQXFEO0FBQ3JELHlDQUFnRDtBQUNoRCxnQ0FBOEM7QUFFOUM7O0dBRUc7QUFDVSxRQUFBLFdBQVcsR0FBRyxJQUFBLHNCQUFVLEVBQUMsZUFBZSxDQUFDLENBQUM7QUFvQ3ZEOzs7OztHQUtHO0FBQ0gsTUFBYSxPQUFRLFNBQVEsY0FBUTtJQVVuQyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQW1CO1FBQzNELElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxPQUFPLEVBQUUsQ0FBQztZQUMzQixPQUFPLGNBQVEsQ0FBQyxlQUFlLENBQUMsbUJBQVcsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2pFLENBQUM7UUFFRCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLFVBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQztRQUNoQyxVQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsR0FBRyxrQkFBa0IsQ0FBQztRQUUvQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUEsaUJBQVUsRUFBQyxLQUFLLENBQUMsSUFBSSxDQUFDO1lBQ2pDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSTtZQUNaLENBQUMsQ0FBQyxJQUFBLGNBQU8sRUFBQyxVQUFHLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFckQsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO0lBQzlCLENBQUM7SUFFRDs7T0FFRztJQUNILElBQVcsSUFBSTtRQUNiLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFXLEdBQUc7UUFDWixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO0lBQzVCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsSUFBYyxTQUFTO1FBQ3JCLE1BQU0sSUFBSSw0QkFBbUIsRUFBRSxDQUFDO0lBQ2xDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLE9BQU8sQ0FBQyxJQUFZLEVBQUUsSUFBVTtRQUNyQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1lBQzVCLE1BQU0sSUFBSSxLQUFLLENBQ2IsNENBQTRDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksQ0FDdEUsQ0FBQztRQUNKLENBQUM7UUFDRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDOUMsV0FBVyxFQUFFLGtCQUFrQjtTQUNoQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNJLE9BQU8sQ0FBQyxJQUFZLEVBQUUsSUFBWSxFQUFFLE9BQXdCO1FBQ2pFLElBQUksQ0FBQztRQUNMLElBQUksQ0FBQztRQUNMLE9BQU8sQ0FBQztRQUNSLE1BQU0sSUFBSSw0QkFBbUIsRUFBRSxDQUFDO0lBQ2xDLENBQUM7O0FBaEZILDBCQWlGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzQWJzb2x1dGUsIHJlc29sdmUgfSBmcm9tIFwicGF0aFwiO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCB7IGNsb3VkIH0gZnJvbSBcIi4uXCI7XG5pbXBvcnQgeyBmcW5Gb3JUeXBlIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4uL2NvcmVcIjtcbmltcG9ydCB7IEFic3RyYWN0TWVtYmVyRXJyb3IgfSBmcm9tIFwiLi4vY29yZS9lcnJvcnNcIjtcbmltcG9ydCB7IElORkxJR0hUX1NZTUJPTCB9IGZyb20gXCIuLi9jb3JlL3R5cGVzXCI7XG5pbXBvcnQgeyBKc29uLCBOb2RlLCBSZXNvdXJjZSB9IGZyb20gXCIuLi9zdGRcIjtcblxuLyoqXG4gKiBHbG9iYWwgaWRlbnRpZmllciBmb3IgYFdlYnNpdGVgLlxuICovXG5leHBvcnQgY29uc3QgV0VCU0lURV9GUU4gPSBmcW5Gb3JUeXBlKFwiY2xvdWQuV2Vic2l0ZVwiKTtcblxuLyoqXG4gKiBPcHRpb25zIGZvciBgV2Vic2l0ZWBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBXZWJzaXRlUHJvcHMgZXh0ZW5kcyBXZWJzaXRlT3B0aW9ucywgV2Vic2l0ZURvbWFpbk9wdGlvbnMge31cblxuLyoqXG4gKiBCYXNpYyBvcHRpb25zIGZvciBgV2Vic2l0ZWBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBXZWJzaXRlT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBMb2NhbCBwYXRoIHRvIHRoZSB3ZWJzaXRlJ3Mgc3RhdGljIGZpbGVzLCByZWxhdGl2ZSB0byB0aGUgV2luZyBzb3VyY2UgZmlsZSBvciBhYnNvbHV0ZS5cbiAgICogQGV4YW1wbGUgXCIuL2Rpc3RcIlxuICAgKi9cbiAgcmVhZG9ubHkgcGF0aDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBOYW1lIG9mIHRoZSBlcnJvciBkb2N1bWVudCBmb3IgdGhlIHdlYnNpdGUuXG4gICAqIEBleGFtcGxlIFwiNDA0Lmh0bWxcIlxuICAgKiBAZGVmYXVsdCAtIHVuZGVmaW5lZFxuICAgKi9cbiAgcmVhZG9ubHkgZXJyb3JEb2N1bWVudD86IHN0cmluZztcbn1cblxuLyoqXG4gKiBPcHRpb25zIGZvciBgV2Vic2l0ZWBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBXZWJzaXRlRG9tYWluT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBUaGUgd2Vic2l0ZSdzIGN1c3RvbSBkb21haW4gb2JqZWN0LlxuICAgKiBAZGVmYXVsdCAtIHVuZGVmaW5lZFxuICAgKi9cbiAgcmVhZG9ubHkgZG9tYWluPzogY2xvdWQuRG9tYWluO1xufVxuXG4vKipcbiAqIEEgY2xvdWQgc3RhdGljIHdlYnNpdGUuXG4gKlxuICogQGluZmxpZ2h0IGBAd2luZ2xhbmcvc2RrLmNsb3VkLklXZWJzaXRlQ2xpZW50YFxuICogQGFic3RyYWN0XG4gKi9cbmV4cG9ydCBjbGFzcyBXZWJzaXRlIGV4dGVuZHMgUmVzb3VyY2UgaW1wbGVtZW50cyBJV2Vic2l0ZSB7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHVibGljIFtJTkZMSUdIVF9TWU1CT0xdPzogSVdlYnNpdGVDbGllbnQ7XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwcml2YXRlIHJlYWRvbmx5IF9wYXRoITogc3RyaW5nO1xuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHJvdGVjdGVkIF9kb21haW4/OiBjbG91ZC5Eb21haW47XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFdlYnNpdGVQcm9wcykge1xuICAgIGlmIChuZXcudGFyZ2V0ID09PSBXZWJzaXRlKSB7XG4gICAgICByZXR1cm4gUmVzb3VyY2UuX25ld0Zyb21GYWN0b3J5KFdFQlNJVEVfRlFOLCBzY29wZSwgaWQsIHByb3BzKTtcbiAgICB9XG5cbiAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgTm9kZS5vZih0aGlzKS50aXRsZSA9IFwiV2Vic2l0ZVwiO1xuICAgIE5vZGUub2YodGhpcykuZGVzY3JpcHRpb24gPSBcIkEgc3RhdGljIHdlYnNpdGVcIjtcblxuICAgIHRoaXMuX3BhdGggPSBpc0Fic29sdXRlKHByb3BzLnBhdGgpXG4gICAgICA/IHByb3BzLnBhdGhcbiAgICAgIDogcmVzb2x2ZShBcHAub2Yoc2NvcGUpLmVudHJ5cG9pbnREaXIsIHByb3BzLnBhdGgpO1xuXG4gICAgdGhpcy5fZG9tYWluID0gcHJvcHMuZG9tYWluO1xuICB9XG5cbiAgLyoqXG4gICAqIEFic29sdXRlIGxvY2FsIHBhdGggdG8gdGhlIHdlYnNpdGUncyBzdGF0aWMgZmlsZXMuXG4gICAqL1xuICBwdWJsaWMgZ2V0IHBhdGgoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fcGF0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgd2Vic2l0ZSdzIHVybC5cbiAgICovXG4gIHB1YmxpYyBnZXQgdXJsKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2VuZHBvaW50LnVybDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgRW5kcG9pbnQgb2YgdGhlIFdlYnNpdGUuXG4gICAqIEBhYnN0cmFjdFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHByb3RlY3RlZCBnZXQgX2VuZHBvaW50KCk6IGNsb3VkLkVuZHBvaW50IHtcbiAgICB0aHJvdyBuZXcgQWJzdHJhY3RNZW1iZXJFcnJvcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIEpTT04gZmlsZSB3aXRoIGN1c3RvbSB2YWx1ZXMgZHVyaW5nIHRoZSB3ZWJzaXRlJ3MgZGVwbG95bWVudC5cbiAgICogSWYgdGhlIHBhdGggY29uZmxpY3RzIHdpdGggZmlsZSBwYXRoIGZyb20gdGhlIHdlYnNpdGUncyBzdGF0aWMgYXNzZXRzLCBhbiBlcnJvciB3aWxsIGJlIHRocm93bi5cbiAgICogQHBhcmFtIHBhdGggdGhlIGZpbGUgcGF0aCBpdCB3aWxsIGJlIHVwbG9hZGVkIGFzXG4gICAqIEBwYXJhbSBkYXRhIHRoZSBkYXRhIHRvIHdyaXRlIHRvIHRoZSBmaWxlXG4gICAqL1xuICBwdWJsaWMgYWRkSnNvbihwYXRoOiBzdHJpbmcsIGRhdGE6IEpzb24pOiBzdHJpbmcge1xuICAgIGlmICghcGF0aC5lbmRzV2l0aChcIi5qc29uXCIpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBrZXkgbXVzdCBoYXZlIGEgLmpzb24gc3VmZml4LiAoY3VycmVudDogXCIke3BhdGguc3BsaXQoXCIuXCIpLnBvcCgpfVwiKWBcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmFkZEZpbGUocGF0aCwgSlNPTi5zdHJpbmdpZnkoZGF0YSksIHtcbiAgICAgIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBmaWxlIHRvIHRoZSB3ZWJzaXRlIGR1cmluZyBkZXBsb3ltZW50LlxuICAgKiBJZiB0aGUgcGF0aCBjb25mbGljdHMgd2l0aCBmaWxlIHBhdGggZnJvbSB0aGUgd2Vic2l0ZSdzIHN0YXRpYyBhc3NldHMsIGFuIGVycm9yIHdpbGwgYmUgdGhyb3duLlxuICAgKiBAcGFyYW0gcGF0aCB0aGUgZmlsZSBwYXRoIGl0IHdpbGwgYmUgdXBsb2FkZWQgYXNcbiAgICogQHBhcmFtIGRhdGEgdGhlIGRhdGEgdG8gd3JpdGUgdG8gdGhlIGZpbGVcbiAgICogQHBhcmFtIG9wdGlvbnMgY29uZmlndXJlIHRoZSBmaWxlJ3Mgb3B0aW9uc1xuICAgKiBAYWJzdHJhY3RcbiAgICovXG4gIHB1YmxpYyBhZGRGaWxlKHBhdGg6IHN0cmluZywgZGF0YTogc3RyaW5nLCBvcHRpb25zPzogQWRkRmlsZU9wdGlvbnMpOiBzdHJpbmcge1xuICAgIHBhdGg7XG4gICAgZGF0YTtcbiAgICBvcHRpb25zO1xuICAgIHRocm93IG5ldyBBYnN0cmFjdE1lbWJlckVycm9yKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBJbmZsaWdodCBtZXRob2RzIGFuZCBtZW1iZXJzIG9mIGBjbG91ZC5XZWJzaXRlYC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJV2Vic2l0ZUNsaWVudCB7fVxuXG4vKipcbiAqIE9wdGlvbnMgZm9yIGFkZGluZyBhIGZpbGUgd2l0aCBjdXN0b20gdmFsdWUgZHVyaW5nIHRoZSB3ZWJzaXRlJ3MgZGVwbG95bWVudC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBZGRGaWxlT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBGaWxlJ3MgY29udGVudCB0eXBlXG4gICAqL1xuICByZWFkb25seSBjb250ZW50VHlwZT86IHN0cmluZztcbn1cblxuLyoqXG4gKiBCYXNlIGludGVyZmFjZSBmb3IgYSB3ZWJzaXRlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVdlYnNpdGUge1xuICAvKipcbiAgICogVGhlIHdlYnNpdGUgVVJMXG4gICAqL1xuICByZWFkb25seSB1cmw6IHN0cmluZztcbn1cbiJdfQ==