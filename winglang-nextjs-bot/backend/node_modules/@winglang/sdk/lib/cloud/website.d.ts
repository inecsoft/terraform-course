import { Construct } from "constructs";
import { cloud } from "..";
import { INFLIGHT_SYMBOL } from "../core/types";
import { Json, Resource } from "../std";
/**
 * Global identifier for `Website`.
 */
export declare const WEBSITE_FQN: string;
/**
 * Options for `Website`
 */
export interface WebsiteProps extends WebsiteOptions, WebsiteDomainOptions {
}
/**
 * Basic options for `Website`
 */
export interface WebsiteOptions {
    /**
     * Local path to the website's static files, relative to the Wing source file or absolute.
     * @example "./dist"
     */
    readonly path: string;
    /**
     * Name of the error document for the website.
     * @example "404.html"
     * @default - undefined
     */
    readonly errorDocument?: string;
}
/**
 * Options for `Website`
 */
export interface WebsiteDomainOptions {
    /**
     * The website's custom domain object.
     * @default - undefined
     */
    readonly domain?: cloud.Domain;
}
/**
 * A cloud static website.
 *
 * @inflight `@winglang/sdk.cloud.IWebsiteClient`
 * @abstract
 */
export declare class Website extends Resource implements IWebsite {
    /** @internal */
    [INFLIGHT_SYMBOL]?: IWebsiteClient;
    /** @internal */
    private readonly _path;
    /** @internal */
    protected _domain?: cloud.Domain;
    constructor(scope: Construct, id: string, props: WebsiteProps);
    /**
     * Absolute local path to the website's static files.
     */
    get path(): string;
    /**
     * The website's url.
     */
    get url(): string;
    /**
     * The Endpoint of the Website.
     * @abstract
     * @internal
     */
    protected get _endpoint(): cloud.Endpoint;
    /**
     * Add a JSON file with custom values during the website's deployment.
     * If the path conflicts with file path from the website's static assets, an error will be thrown.
     * @param path the file path it will be uploaded as
     * @param data the data to write to the file
     */
    addJson(path: string, data: Json): string;
    /**
     * Add a file to the website during deployment.
     * If the path conflicts with file path from the website's static assets, an error will be thrown.
     * @param path the file path it will be uploaded as
     * @param data the data to write to the file
     * @param options configure the file's options
     * @abstract
     */
    addFile(path: string, data: string, options?: AddFileOptions): string;
}
/**
 * Inflight methods and members of `cloud.Website`.
 */
export interface IWebsiteClient {
}
/**
 * Options for adding a file with custom value during the website's deployment.
 */
export interface AddFileOptions {
    /**
     * File's content type
     */
    readonly contentType?: string;
}
/**
 * Base interface for a website
 */
export interface IWebsite {
    /**
     * The website URL
     */
    readonly url: string;
}
