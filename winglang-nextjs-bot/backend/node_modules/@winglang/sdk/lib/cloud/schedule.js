"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScheduleInflightMethods = exports.Schedule = exports.SCHEDULE_FQN = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cron_validator_1 = require("cron-validator");
const constants_1 = require("../constants");
const errors_1 = require("../core/errors");
const types_1 = require("../core/types");
const std_1 = require("../std");
/**
 * Global identifier for `Schedule`.
 */
exports.SCHEDULE_FQN = (0, constants_1.fqnForType)("cloud.Schedule");
/**
 * A schedule.
 *
 * @inflight `@winglang/sdk.cloud.IScheduleClient`
 * @abstract
 */
class Schedule extends std_1.Resource {
    constructor(scope, id, props = {}) {
        if (new.target === Schedule) {
            return std_1.Resource._newFromFactory(exports.SCHEDULE_FQN, scope, id, props);
        }
        super(scope, id);
        std_1.Node.of(this).title = "Schedule";
        std_1.Node.of(this).description =
            "A cloud schedule to trigger events at regular intervals";
        const { cron, rate } = props;
        if (rate && cron) {
            throw new Error("rate and cron cannot be configured simultaneously.");
        }
        if (!rate && !cron) {
            throw new Error("rate or cron need to be filled.");
        }
        if (rate && rate.seconds < 60) {
            throw new Error("rate can not be set to less than 1 minute.");
        }
        // Check for valid UNIX cron format
        // https://www.ibm.com/docs/en/db2/11.5?topic=task-unix-cron-format
        if (cron &&
            !(0, cron_validator_1.isValidCron)(cron, {
                alias: true,
                allowSevenAsSunday: true,
                allowBlankDay: false,
                seconds: false,
            })) {
            throw new Error("cron string must be in UNIX cron format");
        }
    }
    /**
     * Create a function that runs when receiving the scheduled event.
     * @abstract
     */
    onTick(inflight, props) {
        inflight;
        props;
        throw new errors_1.AbstractMemberError();
    }
}
exports.Schedule = Schedule;
_a = JSII_RTTI_SYMBOL_1;
Schedule[_a] = { fqn: "@winglang/sdk.cloud.Schedule", version: "0.0.0" };
/**
 * List of inflight operations available for `Schedule`.
 * @internal
 */
var ScheduleInflightMethods;
(function (ScheduleInflightMethods) {
    /** When the schedule runs its scheduled actions. */
    ScheduleInflightMethods["TICK"] = "tick";
})(ScheduleInflightMethods || (exports.ScheduleInflightMethods = ScheduleInflightMethods = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZWR1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY2xvdWQvc2NoZWR1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxtREFBNkM7QUFFN0MsNENBQTBDO0FBQzFDLDJDQUFxRDtBQUNyRCx5Q0FBZ0Q7QUFDaEQsZ0NBQTZEO0FBRTdEOztHQUVHO0FBQ1UsUUFBQSxZQUFZLEdBQUcsSUFBQSxzQkFBVSxFQUFDLGdCQUFnQixDQUFDLENBQUM7QUE4QnpEOzs7OztHQUtHO0FBQ0gsTUFBYSxRQUFTLFNBQVEsY0FBUTtJQUlwQyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLFFBQXVCLEVBQUU7UUFDakUsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLFFBQVEsRUFBRSxDQUFDO1lBQzVCLE9BQU8sY0FBUSxDQUFDLGVBQWUsQ0FBQyxvQkFBWSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbEUsQ0FBQztRQUVELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsVUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDO1FBQ2pDLFVBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVztZQUN2Qix5REFBeUQsQ0FBQztRQUU1RCxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQztRQUU3QixJQUFJLElBQUksSUFBSSxJQUFJLEVBQUUsQ0FBQztZQUNqQixNQUFNLElBQUksS0FBSyxDQUFDLG9EQUFvRCxDQUFDLENBQUM7UUFDeEUsQ0FBQztRQUNELElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNuQixNQUFNLElBQUksS0FBSyxDQUFDLGlDQUFpQyxDQUFDLENBQUM7UUFDckQsQ0FBQztRQUNELElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxFQUFFLENBQUM7WUFDOUIsTUFBTSxJQUFJLEtBQUssQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDO1FBQ2hFLENBQUM7UUFDRCxtQ0FBbUM7UUFDbkMsbUVBQW1FO1FBQ25FLElBQ0UsSUFBSTtZQUNKLENBQUMsSUFBQSw0QkFBVyxFQUFDLElBQUksRUFBRTtnQkFDakIsS0FBSyxFQUFFLElBQUk7Z0JBQ1gsa0JBQWtCLEVBQUUsSUFBSTtnQkFDeEIsYUFBYSxFQUFFLEtBQUs7Z0JBQ3BCLE9BQU8sRUFBRSxLQUFLO2FBQ2YsQ0FBQyxFQUNGLENBQUM7WUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLHlDQUF5QyxDQUFDLENBQUM7UUFDN0QsQ0FBQztJQUNILENBQUM7SUFFRDs7O09BR0c7SUFDSSxNQUFNLENBQ1gsUUFBZ0MsRUFDaEMsS0FBNkI7UUFFN0IsUUFBUSxDQUFDO1FBQ1QsS0FBSyxDQUFDO1FBQ04sTUFBTSxJQUFJLDRCQUFtQixFQUFFLENBQUM7SUFDbEMsQ0FBQzs7QUFwREgsNEJBcURDOzs7QUF1QkQ7OztHQUdHO0FBQ0gsSUFBWSx1QkFHWDtBQUhELFdBQVksdUJBQXVCO0lBQ2pDLG9EQUFvRDtJQUNwRCx3Q0FBYSxDQUFBO0FBQ2YsQ0FBQyxFQUhXLHVCQUF1Qix1Q0FBdkIsdUJBQXVCLFFBR2xDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCB7IGlzVmFsaWRDcm9uIH0gZnJvbSBcImNyb24tdmFsaWRhdG9yXCI7XG5pbXBvcnQgeyBGdW5jdGlvbiwgRnVuY3Rpb25Qcm9wcyB9IGZyb20gXCIuL2Z1bmN0aW9uXCI7XG5pbXBvcnQgeyBmcW5Gb3JUeXBlIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgQWJzdHJhY3RNZW1iZXJFcnJvciB9IGZyb20gXCIuLi9jb3JlL2Vycm9yc1wiO1xuaW1wb3J0IHsgSU5GTElHSFRfU1lNQk9MIH0gZnJvbSBcIi4uL2NvcmUvdHlwZXNcIjtcbmltcG9ydCB7IER1cmF0aW9uLCBJSW5mbGlnaHQsIE5vZGUsIFJlc291cmNlIH0gZnJvbSBcIi4uL3N0ZFwiO1xuXG4vKipcbiAqIEdsb2JhbCBpZGVudGlmaWVyIGZvciBgU2NoZWR1bGVgLlxuICovXG5leHBvcnQgY29uc3QgU0NIRURVTEVfRlFOID0gZnFuRm9yVHlwZShcImNsb3VkLlNjaGVkdWxlXCIpO1xuXG4vKipcbiAqIE9wdGlvbnMgZm9yIGBTY2hlZHVsZWAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2NoZWR1bGVQcm9wcyB7XG4gIC8qKlxuICAgKiBUcmlnZ2VyIGV2ZW50cyBhdCBhIHBlcmlvZGljIHJhdGUuXG4gICAqIEBleGFtcGxlIDFtXG4gICAqIEBkZWZhdWx0IHVuZGVmaW5lZFxuICAgKi9cbiAgcmVhZG9ubHkgcmF0ZT86IER1cmF0aW9uO1xuXG4gIC8qKlxuICAgKiBUcmlnZ2VyIGV2ZW50cyBhY2NvcmRpbmcgdG8gYSBjcm9uIHNjaGVkdWxlIHVzaW5nIHRoZSBVTklYIGNyb24gZm9ybWF0LiBUaW1lem9uZSBpcyBVVEMuXG4gICAqIFttaW51dGVdIFtob3VyXSBbZGF5IG9mIG1vbnRoXSBbbW9udGhdIFtkYXkgb2Ygd2Vla11cbiAgICogJyonIG1lYW5zIGFsbCBwb3NzaWJsZSB2YWx1ZXMuXG4gICAqICctJyBtZWFucyBhIHJhbmdlIG9mIHZhbHVlcy5cbiAgICogJywnIG1lYW5zIGEgbGlzdCBvZiB2YWx1ZXMuXG4gICAqIFttaW51dGVdIGFsbG93cyAwLTU5LlxuICAgKiBbaG91cl0gYWxsb3dzIDAtMjMuXG4gICAqIFtkYXkgb2YgbW9udGhdIGFsbG93cyAxLTMxLlxuICAgKiBbbW9udGhdIGFsbG93cyAxLTEyIG9yIEpBTi1ERUMuXG4gICAqIFtkYXkgb2Ygd2Vla10gYWxsb3dzIDAtNiBvciBTVU4tU0FULlxuICAgKiBAZXhhbXBsZSBcIiogKiAqICogKlwiXG4gICAqIEBkZWZhdWx0IHVuZGVmaW5lZFxuICAgKi9cbiAgcmVhZG9ubHkgY3Jvbj86IHN0cmluZztcbn1cblxuLyoqXG4gKiBBIHNjaGVkdWxlLlxuICpcbiAqIEBpbmZsaWdodCBgQHdpbmdsYW5nL3Nkay5jbG91ZC5JU2NoZWR1bGVDbGllbnRgXG4gKiBAYWJzdHJhY3RcbiAqL1xuZXhwb3J0IGNsYXNzIFNjaGVkdWxlIGV4dGVuZHMgUmVzb3VyY2Uge1xuICAvKiogQGludGVybmFsICovXG4gIHB1YmxpYyBbSU5GTElHSFRfU1lNQk9MXT86IElTY2hlZHVsZUNsaWVudDtcblxuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogU2NoZWR1bGVQcm9wcyA9IHt9KSB7XG4gICAgaWYgKG5ldy50YXJnZXQgPT09IFNjaGVkdWxlKSB7XG4gICAgICByZXR1cm4gUmVzb3VyY2UuX25ld0Zyb21GYWN0b3J5KFNDSEVEVUxFX0ZRTiwgc2NvcGUsIGlkLCBwcm9wcyk7XG4gICAgfVxuXG4gICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgIE5vZGUub2YodGhpcykudGl0bGUgPSBcIlNjaGVkdWxlXCI7XG4gICAgTm9kZS5vZih0aGlzKS5kZXNjcmlwdGlvbiA9XG4gICAgICBcIkEgY2xvdWQgc2NoZWR1bGUgdG8gdHJpZ2dlciBldmVudHMgYXQgcmVndWxhciBpbnRlcnZhbHNcIjtcblxuICAgIGNvbnN0IHsgY3JvbiwgcmF0ZSB9ID0gcHJvcHM7XG5cbiAgICBpZiAocmF0ZSAmJiBjcm9uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyYXRlIGFuZCBjcm9uIGNhbm5vdCBiZSBjb25maWd1cmVkIHNpbXVsdGFuZW91c2x5LlwiKTtcbiAgICB9XG4gICAgaWYgKCFyYXRlICYmICFjcm9uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyYXRlIG9yIGNyb24gbmVlZCB0byBiZSBmaWxsZWQuXCIpO1xuICAgIH1cbiAgICBpZiAocmF0ZSAmJiByYXRlLnNlY29uZHMgPCA2MCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmF0ZSBjYW4gbm90IGJlIHNldCB0byBsZXNzIHRoYW4gMSBtaW51dGUuXCIpO1xuICAgIH1cbiAgICAvLyBDaGVjayBmb3IgdmFsaWQgVU5JWCBjcm9uIGZvcm1hdFxuICAgIC8vIGh0dHBzOi8vd3d3LmlibS5jb20vZG9jcy9lbi9kYjIvMTEuNT90b3BpYz10YXNrLXVuaXgtY3Jvbi1mb3JtYXRcbiAgICBpZiAoXG4gICAgICBjcm9uICYmXG4gICAgICAhaXNWYWxpZENyb24oY3Jvbiwge1xuICAgICAgICBhbGlhczogdHJ1ZSxcbiAgICAgICAgYWxsb3dTZXZlbkFzU3VuZGF5OiB0cnVlLFxuICAgICAgICBhbGxvd0JsYW5rRGF5OiBmYWxzZSxcbiAgICAgICAgc2Vjb25kczogZmFsc2UsXG4gICAgICB9KVxuICAgICkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY3JvbiBzdHJpbmcgbXVzdCBiZSBpbiBVTklYIGNyb24gZm9ybWF0XCIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBmdW5jdGlvbiB0aGF0IHJ1bnMgd2hlbiByZWNlaXZpbmcgdGhlIHNjaGVkdWxlZCBldmVudC5cbiAgICogQGFic3RyYWN0XG4gICAqL1xuICBwdWJsaWMgb25UaWNrKFxuICAgIGluZmxpZ2h0OiBJU2NoZWR1bGVPblRpY2tIYW5kbGVyLFxuICAgIHByb3BzPzogU2NoZWR1bGVPblRpY2tPcHRpb25zXG4gICk6IEZ1bmN0aW9uIHtcbiAgICBpbmZsaWdodDtcbiAgICBwcm9wcztcbiAgICB0aHJvdyBuZXcgQWJzdHJhY3RNZW1iZXJFcnJvcigpO1xuICB9XG59XG5cbi8qKlxuICogT3B0aW9ucyBmb3IgU2NoZWR1bGUub25UaWNrLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNjaGVkdWxlT25UaWNrT3B0aW9ucyBleHRlbmRzIEZ1bmN0aW9uUHJvcHMge31cblxuLyoqXG4gKiBBIHJlc291cmNlIHdpdGggYW4gaW5mbGlnaHQgXCJoYW5kbGVcIiBtZXRob2QgdGhhdCBjYW4gYmUgcGFzc2VkIHRvXG4gKiBgU2NoZWR1bGUub25fdGlja2AuXG4gKlxuICogQGluZmxpZ2h0IGBAd2luZ2xhbmcvc2RrLmNsb3VkLklTY2hlZHVsZU9uVGlja0hhbmRsZXJDbGllbnRgXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVNjaGVkdWxlT25UaWNrSGFuZGxlciBleHRlbmRzIElJbmZsaWdodCB7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgW0lORkxJR0hUX1NZTUJPTF0/OiBJU2NoZWR1bGVPblRpY2tIYW5kbGVyQ2xpZW50W1wiaGFuZGxlXCJdO1xufVxuXG4vKipcbiAqIEluZmxpZ2h0IGludGVyZmFjZSBmb3IgYFNjaGVkdWxlYC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJU2NoZWR1bGVDbGllbnQge31cblxuLyoqXG4gKiBMaXN0IG9mIGluZmxpZ2h0IG9wZXJhdGlvbnMgYXZhaWxhYmxlIGZvciBgU2NoZWR1bGVgLlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBlbnVtIFNjaGVkdWxlSW5mbGlnaHRNZXRob2RzIHtcbiAgLyoqIFdoZW4gdGhlIHNjaGVkdWxlIHJ1bnMgaXRzIHNjaGVkdWxlZCBhY3Rpb25zLiAqL1xuICBUSUNLID0gXCJ0aWNrXCIsXG59XG5cbi8qKlxuICogSW5mbGlnaHQgY2xpZW50IGZvciBgSVNjaGVkdWxlT25UaWNrSGFuZGxlcmAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVNjaGVkdWxlT25UaWNrSGFuZGxlckNsaWVudCB7XG4gIC8qKlxuICAgKiBGdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW4gYSBtZXNzYWdlIGlzIHJlY2VpdmVkIGZyb20gdGhlIHNjaGVkdWxlLlxuICAgKiBAaW5mbGlnaHRcbiAgICovXG4gIGhhbmRsZSgpOiBQcm9taXNlPHZvaWQ+O1xufVxuIl19