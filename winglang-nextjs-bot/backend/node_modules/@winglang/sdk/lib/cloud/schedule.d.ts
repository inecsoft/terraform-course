import { Construct } from "constructs";
import { Function, FunctionProps } from "./function";
import { INFLIGHT_SYMBOL } from "../core/types";
import { Duration, IInflight, Resource } from "../std";
/**
 * Global identifier for `Schedule`.
 */
export declare const SCHEDULE_FQN: string;
/**
 * Options for `Schedule`.
 */
export interface ScheduleProps {
    /**
     * Trigger events at a periodic rate.
     * @example 1m
     * @default undefined
     */
    readonly rate?: Duration;
    /**
     * Trigger events according to a cron schedule using the UNIX cron format. Timezone is UTC.
     * [minute] [hour] [day of month] [month] [day of week]
     * '*' means all possible values.
     * '-' means a range of values.
     * ',' means a list of values.
     * [minute] allows 0-59.
     * [hour] allows 0-23.
     * [day of month] allows 1-31.
     * [month] allows 1-12 or JAN-DEC.
     * [day of week] allows 0-6 or SUN-SAT.
     * @example "* * * * *"
     * @default undefined
     */
    readonly cron?: string;
}
/**
 * A schedule.
 *
 * @inflight `@winglang/sdk.cloud.IScheduleClient`
 * @abstract
 */
export declare class Schedule extends Resource {
    /** @internal */
    [INFLIGHT_SYMBOL]?: IScheduleClient;
    constructor(scope: Construct, id: string, props?: ScheduleProps);
    /**
     * Create a function that runs when receiving the scheduled event.
     * @abstract
     */
    onTick(inflight: IScheduleOnTickHandler, props?: ScheduleOnTickOptions): Function;
}
/**
 * Options for Schedule.onTick.
 */
export interface ScheduleOnTickOptions extends FunctionProps {
}
/**
 * A resource with an inflight "handle" method that can be passed to
 * `Schedule.on_tick`.
 *
 * @inflight `@winglang/sdk.cloud.IScheduleOnTickHandlerClient`
 */
export interface IScheduleOnTickHandler extends IInflight {
    /** @internal */
    [INFLIGHT_SYMBOL]?: IScheduleOnTickHandlerClient["handle"];
}
/**
 * Inflight interface for `Schedule`.
 */
export interface IScheduleClient {
}
/**
 * List of inflight operations available for `Schedule`.
 * @internal
 */
export declare enum ScheduleInflightMethods {
    /** When the schedule runs its scheduled actions. */
    TICK = "tick"
}
/**
 * Inflight client for `IScheduleOnTickHandler`.
 */
export interface IScheduleOnTickHandlerClient {
    /**
     * Function that will be called when a message is received from the schedule.
     * @inflight
     */
    handle(): Promise<void>;
}
