"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.sanitizeParamLikeObject = exports.parseHttpMethod = exports.DEFAULT_RESPONSE_STATUS = exports.HttpMethod = exports.ApiInflightMethods = exports.Api = exports.API_FQN = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const constants_1 = require("../constants");
const errors_1 = require("../core/errors");
const types_1 = require("../core/types");
const std_1 = require("../std");
/**
 * Global identifier for `Api`.
 */
exports.API_FQN = (0, constants_1.fqnForType)("cloud.Api");
/**
 * Functionality shared between all `Api` implementations.
 * @inflight `@winglang/sdk.cloud.IApiClient`
 * @abstract
 */
class Api extends std_1.Resource {
    /**
     * Converts input path to a valid OpenAPI path (replaces `:` based path params with `{}`)
     * @param path The path to convert (assumes path is valid)
     * @returns OpenAPI path
     */
    static renderOpenApiPath(path) {
        return path.replace(/\/:([A-Za-z0-9_-]+)/g, "/{$1}");
    }
    /**
     * Generates an object containing default CORS response headers and OPTIONS response headers.
     * @param corsOptions The CORS options to generate the headers from.
     * @returns An object containing default CORS response headers and OPTIONS response headers.
     */
    static renderCorsHeaders(corsOptions) {
        if (corsOptions == undefined) {
            return;
        }
        const { allowOrigin = "*", allowHeaders = [], allowMethods = [], exposeHeaders = [], allowCredentials = false, maxAge = std_1.Duration.fromMinutes(5), } = corsOptions;
        const defaultHeaders = {
            "Access-Control-Allow-Origin": allowOrigin || "*",
            "Access-Control-Expose-Headers": exposeHeaders.join(",") || "",
            "Access-Control-Allow-Credentials": allowCredentials ? "true" : "false",
        };
        const optionsHeaders = {
            "Access-Control-Allow-Origin": allowOrigin || "*",
            "Access-Control-Allow-Headers": allowHeaders.join(",") || "",
            "Access-Control-Allow-Methods": allowMethods.join(",") || "",
            "Access-Control-Max-Age": maxAge.seconds.toString(),
        };
        return {
            defaultResponse: defaultHeaders,
            optionsResponse: optionsHeaders,
        };
    }
    /**
     * The base URL of the API endpoint.
     */
    get url() {
        return this._endpoint.url;
    }
    /**
     * The Endpoint of the API.
     * @abstract
     * @internal
     */
    get _endpoint() {
        throw new errors_1.AbstractMemberError();
    }
    constructor(scope, id, props = {}) {
        if (new.target === Api) {
            return std_1.Resource._newFromFactory(exports.API_FQN, scope, id, props);
        }
        super(scope, id);
        // https://spec.openapis.org/oas/v3.0.3
        this.apiSpec = {
            paths: {},
        };
        this.corsDefaultValues = {
            allowOrigin: "*",
            allowMethods: [
                HttpMethod.GET,
                HttpMethod.POST,
                HttpMethod.PUT,
                HttpMethod.DELETE,
                HttpMethod.HEAD,
                HttpMethod.OPTIONS,
            ],
            allowHeaders: ["Content-Type", "Authorization", "X-Requested-With"],
            exposeHeaders: [],
            allowCredentials: false,
            maxAge: std_1.Duration.fromMinutes(5),
        };
        this.corsOptions = props.cors ? this._cors(props.corsOptions) : undefined;
        std_1.Node.of(this).title = "Api";
        std_1.Node.of(this).description = "A REST API endpoint";
    }
    /**
     * Add a inflight handler to the api for GET requests on the given path.
     * @param path The path to handle GET requests for.
     * @param inflight The function to handle the request.
     * @param props Options for the route.
     * @abstract
     */
    get(path, inflight, props) {
        path;
        inflight;
        props;
        throw new errors_1.AbstractMemberError();
    }
    /**
     * Add a inflight handler to the api for POST requests on the given path.
     * @param path The path to handle POST requests for.
     * @param inflight The function to handle the request.
     * @param props Options for the route.
     * @abstract
     */
    post(path, inflight, props) {
        path;
        inflight;
        props;
        throw new errors_1.AbstractMemberError();
    }
    /**
     * Add a inflight handler to the api for PUT requests on the given path.
     * @param path The path to handle PUT requests for.
     * @param inflight The function to handle the request.
     * @param props Options for the route.
     * @abstract
     */
    put(path, inflight, props) {
        path;
        inflight;
        props;
        throw new errors_1.AbstractMemberError();
    }
    /**
     * Add a inflight handler to the api for DELETE requests on the given path.
     * @param path The path to handle DELETE requests for.
     * @param inflight The function to handle the request.
     * @param props Options for the route.
     * @abstract
     */
    delete(path, inflight, props) {
        path;
        inflight;
        props;
        throw new errors_1.AbstractMemberError();
    }
    /**
     * Add a inflight handler to the api for PATCH requests on the given path.
     * @param path The path to handle PATCH requests for.
     * @param inflight The function to handle the request.
     * @param props Options for the route.
     * @abstract
     */
    patch(path, inflight, props) {
        path;
        inflight;
        props;
        throw new errors_1.AbstractMemberError();
    }
    /**
     * Add a inflight handler to the api for OPTIONS requests on the given path.
     * @param path The path to handle OPTIONS requests for.
     * @param inflight The function to handle the request.
     * @param props Options for the route.
     * @abstract
     */
    options(path, inflight, props) {
        path;
        inflight;
        props;
        throw new errors_1.AbstractMemberError();
    }
    /**
     * Add a inflight handler to the api for HEAD requests on the given path.
     * @param path The path to handle HEAD requests for.
     * @param inflight The function to handle the request.
     * @param props Options for the route.
     * @abstract
     */
    head(path, inflight, props) {
        path;
        inflight;
        props;
        throw new errors_1.AbstractMemberError();
    }
    /**
     * Add a inflight handler to the api for CONNECT requests on the given path.
     * @param path The path to handle CONNECT requests for.
     * @param inflight The function to handle the request.
     * @param props Options for the route.
     * @abstract
     */
    connect(path, inflight, props) {
        path;
        inflight;
        props;
        throw new errors_1.AbstractMemberError();
    }
    /**
     * Validating path:
     * if has `:` prefix - the part following that prefix is only letter, digit or _, not empty and placed before and after "/"
     * @param path
     * @throws if the path is invalid
     * @internal
     */
    _validatePath(path) {
        if (!/^((\/\:[a-zA-Z0-9_\-]+|\/[a-zA-Z0-9_\-\.]*)*(?:\?[^#]*)?)?$/g.test(path)) {
            throw new Error(`Invalid path ${path}. Url parts can only contain alpha-numeric chars, "-", "_" and ".". Params can only contain alpha-numeric chars and "_".`);
        }
    }
    /**
     * Returns CORS configuration. If props are provided, they will have precedence over defaults.
     * @param props
     * @returns ApiCorsOptions
     * @internal
     */
    _cors(props) {
        return {
            ...this.corsDefaultValues,
            ...props,
        };
    }
    /**
     * Checks if two given paths are siblings.
     * @param pathA
     * @param pathB
     * @returns A boolean value indicating if provided paths are siblings.
     * @internal
     */
    _arePathsSiblings(pathA, pathB) {
        const partsA = pathA.split("/");
        const partsB = pathB.split("/");
        let shorter = partsA.length < partsB.length ? partsA : partsB;
        for (let i = 0; i < shorter.length; i++) {
            const partA = partsA[i];
            const partB = partsB[i];
            if ((!partA.match(/^:.+?$/) || !partB.match(/^:.+?$/)) &&
                partA[i] !== partB[i]) {
                return false;
            }
            if (partA.match(/^:.+?$/) &&
                partB.match(/^:.+?$/) &&
                partA[i] !== partB[i]) {
                return true;
            }
        }
        return false;
    }
    /**
     * Checks if two given paths are ambiguous.
     * @param pathA
     * @param pathB
     * @returns A boolean value indicating if provided paths are ambiguous.
     * @internal
     */
    _arePathsAmbiguous(pathA, pathB) {
        const partsA = pathA.split("/");
        const partsB = pathB.split("/");
        if (partsA.length !== partsB.length) {
            return false;
        }
        for (let i = 0; i < partsA.length; i++) {
            const partA = partsA[i];
            const partB = partsB[i];
            if (partA !== partB && !partA.match(/^:.+?$/) && !partB.match(/^:.+?$/)) {
                return false;
            }
        }
        return true;
    }
    /**
     * Checks if provided path and method are ambigous with paths and methods already defined in the api spec.
     * @param path Path to be checked
     * @param method HTTP method
     * @returns A boolean value indicating if provided path and method are ambiguous.
     * @internal
     */
    _findAmbiguousPath(path, method) {
        const existingPaths = Object.keys(this.apiSpec.paths);
        return existingPaths.find((existingPath) => !!this.apiSpec.paths[existingPath][method.toLowerCase()] &&
            this._arePathsAmbiguous(existingPath, path));
    }
    /**
     * Checks if provided path is a sibling of paths already defined in the api spec- i.e "/:username" and "/:id".
     * @param path Path to be checked
     * @returns A boolean value indicating if provided path has a sibling.
     * @internal
     */
    _findSiblingPath(path) {
        const existingPaths = Object.keys(this.apiSpec.paths);
        return existingPaths.find((existingPath) => this._arePathsSiblings(existingPath, path));
    }
    /**
     * Generates the OpenAPI schema for CORS headers based on the provided CORS options.
     * @param corsOptions The CORS options to generate the schema from.
     * @returns An object representing the OpenAPI schema for CORS headers.
     */
    _corsOpenApiSchema(corsOptions) {
        const corsHeaders = {};
        if (corsOptions) {
            const corsHeaderSchema = {
                schema: {
                    type: "string",
                },
            };
            corsHeaders["Access-Control-Allow-Origin"] = corsHeaderSchema;
            corsHeaders["Access-Control-Allow-Methods"] = corsHeaderSchema;
            corsHeaders["Access-Control-Allow-Headers"] = corsHeaderSchema;
            corsHeaders["Access-Control-Max-Age"] = corsHeaderSchema;
        }
        return corsHeaders;
    }
    /**
     * Add a route to the api spec.
     * @param path The path to add.
     * @param method The method to add.
     * @param apiSpecExtension The extension to add to the api spec for this route and method.
     *
     * @internal
     * */
    _addToSpec(path, method, apiSpecExtension, corsOptions) {
        if (this.apiSpec.paths[path]?.[method.toLowerCase()]) {
            throw new Error(`Endpoint for path '${path}' and method '${method}' already exists`);
        }
        const ambiguousPath = this._findAmbiguousPath(path, method);
        if (!!ambiguousPath) {
            throw new Error(`Endpoint for path '${path}' and method '${method}' is ambiguous - it conflicts with existing endpoint for path '${ambiguousPath}'`);
        }
        const siblingPath = this._findSiblingPath(path);
        if (!!siblingPath) {
            throw new Error(`Endpoint for path '${path}' and method '${method}' conflicts with existing sibling endpoint for path '${siblingPath}'- try to match the parameter names to avoid this error.`);
        }
        const operationId = `${method.toLowerCase()}${path === "/" ? "" : path.replace("/", "-")}`;
        const pathParams = path.match(/:([A-Za-z0-9_-]+)/g);
        const pathParameters = [];
        if (pathParams) {
            pathParams.forEach((param) => {
                const paramName = param.replace(":", "");
                pathParameters.push({
                    name: paramName,
                    in: "path",
                    required: true,
                    schema: {
                        type: "string",
                    },
                });
            });
        }
        const corsOpenApiSchema = this._corsOpenApiSchema(corsOptions);
        const methodSpec = {
            [method.toLowerCase()]: {
                operationId: operationId,
                responses: {
                    "200": {
                        description: "200 response",
                        content: {},
                        ...(Object.keys(corsOpenApiSchema).length > 0
                            ? { headers: corsOpenApiSchema }
                            : {}),
                    },
                },
                parameters: pathParameters,
                ...apiSpecExtension,
            },
        };
        this.apiSpec.paths[path] = {
            ...this.apiSpec.paths[path],
            ...methodSpec,
        };
    }
    /**
     * Return the OpenAPI spec for this Api.
     * @internal */
    _getOpenApiSpec() {
        // Convert our paths to valid OpenAPI paths
        let paths = {};
        Object.keys(this.apiSpec.paths).forEach((key) => {
            paths[Api.renderOpenApiPath(key)] = this.apiSpec.paths[key];
        });
        // https://spec.openapis.org/oas/v3.0.3
        return {
            ...this.apiSpec,
            openapi: "3.0.3",
            paths: paths,
        };
    }
}
exports.Api = Api;
_a = JSII_RTTI_SYMBOL_1;
Api[_a] = { fqn: "@winglang/sdk.cloud.Api", version: "0.0.0" };
/**
 * List of inflight operations available for `Api`.
 * @internal
 */
var ApiInflightMethods;
(function (ApiInflightMethods) {
    /** When the API endpoint receives a request. */
    ApiInflightMethods["REQUEST"] = "request";
})(ApiInflightMethods || (exports.ApiInflightMethods = ApiInflightMethods = {}));
/**
 * Allowed HTTP methods for a endpoint.
 */
var HttpMethod;
(function (HttpMethod) {
    /** Get */
    HttpMethod["GET"] = "GET";
    /** Head */
    HttpMethod["HEAD"] = "HEAD";
    /** Post */
    HttpMethod["POST"] = "POST";
    /** Put */
    HttpMethod["PUT"] = "PUT";
    /** Delete */
    HttpMethod["DELETE"] = "DELETE";
    /** Connect */
    HttpMethod["CONNECT"] = "CONNECT";
    /** Options */
    HttpMethod["OPTIONS"] = "OPTIONS";
    /** Patch */
    HttpMethod["PATCH"] = "PATCH";
})(HttpMethod || (exports.HttpMethod = HttpMethod = {}));
exports.DEFAULT_RESPONSE_STATUS = 200;
/**
 * Parse an HTTP method string to an HttpMethod enum
 * @param method HTTP method string
 * @returns HttpMethod enum
 * @throws Error if the method is not supported
 */
function parseHttpMethod(method) {
    switch (method) {
        case "GET":
            return HttpMethod.GET;
        case "POST":
            return HttpMethod.POST;
        case "PUT":
            return HttpMethod.PUT;
        case "HEAD":
            return HttpMethod.HEAD;
        case "DELETE":
            return HttpMethod.DELETE;
        case "CONNECT":
            return HttpMethod.CONNECT;
        case "OPTIONS":
            return HttpMethod.OPTIONS;
        case "PATCH":
            return HttpMethod.PATCH;
        default:
            throw new Error(`Unsupported HTTP method: ${method}`);
    }
}
exports.parseHttpMethod = parseHttpMethod;
/**
 * Convert an object with multi-valued parameters to a an object with
 * single-valued parameters.
 */
function sanitizeParamLikeObject(obj) {
    const newObj = {};
    Object.keys(obj).forEach((key) => {
        const value = obj[key];
        if (Array.isArray(value)) {
            newObj[key] = value.join(",");
        }
        else if (typeof value === "string") {
            newObj[key] = value;
        }
    });
    return newObj;
}
exports.sanitizeParamLikeObject = sanitizeParamLikeObject;
//# sourceMappingURL=data:application/json;base64,