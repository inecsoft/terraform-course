import { Construct } from "constructs";
import { Endpoint } from "./endpoint";
import { FunctionProps } from "./function";
import { INFLIGHT_SYMBOL } from "../core/types";
import { Resource, Duration, IInflight } from "../std";
/**
 * Global identifier for `Api`.
 */
export declare const API_FQN: string;
/**
 * Cors Options for `Api`.
 */
export interface ApiCorsOptions {
    /**
     * The allowed origin.
     * @example "https://example.com"
     * @default - "*"
     */
    readonly allowOrigin?: string;
    /**
     * The list of allowed methods.
     * @example [HttpMethod.GET, HttpMethod.POST]
     * @default - [HttpMethod.GET, HttpMethod.POST, HttpMethod.PUT, HttpMethod.PATCH, HttpMethod.DELETE, HttpMethod.HEAD, HttpMethod.OPTIONS]
     */
    readonly allowMethods?: Array<HttpMethod>;
    /**
     * The list of allowed headers.
     * @example ["Content-Type"]
     * @default - ["Content-Type", "Authorization"]
     */
    readonly allowHeaders?: Array<string>;
    /**
     * The list of exposed headers.
     * @example ["Content-Type"]
     * @default - []
     */
    readonly exposeHeaders?: Array<string>;
    /**
     * Whether to allow credentials.
     * @default - false
     */
    readonly allowCredentials?: boolean;
    /**
     * How long the browser should cache preflight request results.
     * @default - 300 seconds
     */
    readonly maxAge?: Duration;
}
/**
 * Options for `Api`.
 */
export interface ApiProps {
    /**
     * Options for configuring the API's CORS behavior across all routes.
     * Options can also be overridden on a per-route basis. (not yet implemented)
     * When enabled this will add CORS headers with default options.
     * Can be customized by passing `corsOptions`
     * @example true
     * @default - false, CORS configuration is disabled
     */
    readonly cors?: boolean;
    /**
     * Options for configuring the API's CORS behavior across all routes.
     * Options can also be overridden on a per-route basis. (not yet implemented)
     *
     * @example { allowOrigin: "https://example.com" }
     * @default - Default CORS options are applied when `cors` is set to `true`
     *  allowOrigin: "*",
     *  allowMethods: [
     *   HttpMethod.GET,
     *   HttpMethod.POST,
     *   HttpMethod.PUT,
     *   HttpMethod.DELETE,
     *   HttpMethod.HEAD,
     *   HttpMethod.OPTIONS,
     *  ],
     *  allowHeaders: ["Content-Type", "Authorization"],
     *  exposeHeaders: [],
     *  allowCredentials: false,
     *
     */
    readonly corsOptions?: ApiCorsOptions;
}
/**
 * The OpenAPI spec.
 */
export type OpenApiSpec = any;
/**
 * The OpenAPI spec extension for a route.
 * @see https://spec.openapis.org/oas/v3.0.3
 * */
export type OpenApiSpecExtension = any;
/**
 * The OpenAPI spec for CORS headers.
 * */
export type OpenApiCorsHeaders = Record<string, {
    schema: {
        type: string;
    };
}>;
/**
 * Type definition for default CORS headers.
 * @property {string} "Access-Control-Allow-Origin" - Specifies the origin that is allowed to access the resource. See {@link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin}
 * @property {string} "Access-Control-Expose-Headers" - Lists the headers that the client can access. See {@link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Expose-Headers}
 * @property {string} "Access-Control-Allow-Credentials" - Indicates whether the response to the request can be exposed when the credentials flag is true. See {@link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials}
 */
type CorsDefaultResponseHeaders = {
    [key: string]: string;
};
/**
 * Type definition for CORS option headers.
 * @property {string} "Access-Control-Allow-Origin" - Specifies the origin that is allowed to access the resource. See {@link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin}
 * @property {string} "Access-Control-Allow-Headers" - Specifies the headers that are allowed in a request. See {@link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Headers}
 * @property {string} "Access-Control-Allow-Methods" - Specifies the methods that are allowed in a request. See {@link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Methods}
 * @property {string} "Access-Control-Max-Age" - Indicates how long the results of a preflight request can be cached. See {@link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Max-Age}
 */
type CorsOptionsResponseHeaders = {
    [key: string]: string;
};
/**
 * Type definition for CORS headers which includes default and options headers.
 */
export interface CorsHeaders {
    /**
     * Default CORS response headers.
     */
    readonly defaultResponse: CorsDefaultResponseHeaders;
    /**
     * CORS options response headers.
     */
    readonly optionsResponse: CorsOptionsResponseHeaders;
}
/**
 * Functionality shared between all `Api` implementations.
 * @inflight `@winglang/sdk.cloud.IApiClient`
 * @abstract
 */
export declare class Api extends Resource {
    /**
     * Converts input path to a valid OpenAPI path (replaces `:` based path params with `{}`)
     * @param path The path to convert (assumes path is valid)
     * @returns OpenAPI path
     */
    static renderOpenApiPath(path: string): string;
    /**
     * Generates an object containing default CORS response headers and OPTIONS response headers.
     * @param corsOptions The CORS options to generate the headers from.
     * @returns An object containing default CORS response headers and OPTIONS response headers.
     */
    static renderCorsHeaders(corsOptions?: ApiCorsOptions): CorsHeaders | undefined;
    /**
     * The base URL of the API endpoint.
     */
    get url(): string;
    /**
     * The Endpoint of the API.
     * @abstract
     * @internal
     */
    protected get _endpoint(): Endpoint;
    private apiSpec;
    private corsDefaultValues;
    /**
     * CORS options for api
     */
    protected corsOptions?: ApiCorsOptions;
    /** @internal */
    [INFLIGHT_SYMBOL]?: IApiClient;
    constructor(scope: Construct, id: string, props?: ApiProps);
    /**
     * Add a inflight handler to the api for GET requests on the given path.
     * @param path The path to handle GET requests for.
     * @param inflight The function to handle the request.
     * @param props Options for the route.
     * @abstract
     */
    get(path: string, inflight: IApiEndpointHandler, props?: ApiGetOptions): void;
    /**
     * Add a inflight handler to the api for POST requests on the given path.
     * @param path The path to handle POST requests for.
     * @param inflight The function to handle the request.
     * @param props Options for the route.
     * @abstract
     */
    post(path: string, inflight: IApiEndpointHandler, props?: ApiPostOptions): void;
    /**
     * Add a inflight handler to the api for PUT requests on the given path.
     * @param path The path to handle PUT requests for.
     * @param inflight The function to handle the request.
     * @param props Options for the route.
     * @abstract
     */
    put(path: string, inflight: IApiEndpointHandler, props?: ApiPutOptions): void;
    /**
     * Add a inflight handler to the api for DELETE requests on the given path.
     * @param path The path to handle DELETE requests for.
     * @param inflight The function to handle the request.
     * @param props Options for the route.
     * @abstract
     */
    delete(path: string, inflight: IApiEndpointHandler, props?: ApiDeleteOptions): void;
    /**
     * Add a inflight handler to the api for PATCH requests on the given path.
     * @param path The path to handle PATCH requests for.
     * @param inflight The function to handle the request.
     * @param props Options for the route.
     * @abstract
     */
    patch(path: string, inflight: IApiEndpointHandler, props?: ApiPatchOptions): void;
    /**
     * Add a inflight handler to the api for OPTIONS requests on the given path.
     * @param path The path to handle OPTIONS requests for.
     * @param inflight The function to handle the request.
     * @param props Options for the route.
     * @abstract
     */
    options(path: string, inflight: IApiEndpointHandler, props?: ApiOptionsOptions): void;
    /**
     * Add a inflight handler to the api for HEAD requests on the given path.
     * @param path The path to handle HEAD requests for.
     * @param inflight The function to handle the request.
     * @param props Options for the route.
     * @abstract
     */
    head(path: string, inflight: IApiEndpointHandler, props?: ApiHeadOptions): void;
    /**
     * Add a inflight handler to the api for CONNECT requests on the given path.
     * @param path The path to handle CONNECT requests for.
     * @param inflight The function to handle the request.
     * @param props Options for the route.
     * @abstract
     */
    connect(path: string, inflight: IApiEndpointHandler, props?: ApiConnectOptions): void;
    /**
     * Validating path:
     * if has `:` prefix - the part following that prefix is only letter, digit or _, not empty and placed before and after "/"
     * @param path
     * @throws if the path is invalid
     * @internal
     */
    protected _validatePath(path: string): void;
    /**
     * Returns CORS configuration. If props are provided, they will have precedence over defaults.
     * @param props
     * @returns ApiCorsOptions
     * @internal
     */
    protected _cors(props?: ApiCorsOptions): ApiCorsOptions;
    /**
     * Checks if two given paths are siblings.
     * @param pathA
     * @param pathB
     * @returns A boolean value indicating if provided paths are siblings.
     * @internal
     */
    protected _arePathsSiblings(pathA: string, pathB: string): boolean;
    /**
     * Checks if two given paths are ambiguous.
     * @param pathA
     * @param pathB
     * @returns A boolean value indicating if provided paths are ambiguous.
     * @internal
     */
    protected _arePathsAmbiguous(pathA: string, pathB: string): boolean;
    /**
     * Checks if provided path and method are ambigous with paths and methods already defined in the api spec.
     * @param path Path to be checked
     * @param method HTTP method
     * @returns A boolean value indicating if provided path and method are ambiguous.
     * @internal
     */
    protected _findAmbiguousPath(path: string, method: string): string | undefined;
    /**
     * Checks if provided path is a sibling of paths already defined in the api spec- i.e "/:username" and "/:id".
     * @param path Path to be checked
     * @returns A boolean value indicating if provided path has a sibling.
     * @internal
     */
    private _findSiblingPath;
    /**
     * Generates the OpenAPI schema for CORS headers based on the provided CORS options.
     * @param corsOptions The CORS options to generate the schema from.
     * @returns An object representing the OpenAPI schema for CORS headers.
     */
    private _corsOpenApiSchema;
    /**
     * Add a route to the api spec.
     * @param path The path to add.
     * @param method The method to add.
     * @param apiSpecExtension The extension to add to the api spec for this route and method.
     *
     * @internal
     * */
    _addToSpec(path: string, method: string, apiSpecExtension: OpenApiSpecExtension, corsOptions?: ApiCorsOptions): void;
    /**
     * Return the OpenAPI spec for this Api.
     * @internal */
    _getOpenApiSpec(): OpenApiSpec;
}
/**
 * Base options for Api endpoints.
 */
export interface ApiEndpointOptions extends FunctionProps {
}
/**
 * Options for Api get endpoint.
 */
export interface ApiGetOptions extends ApiEndpointOptions {
}
/**
 * Options for Api post endpoint.
 */
export interface ApiPostOptions extends ApiEndpointOptions {
}
/**
 * Options for Api put endpoint.
 */
export interface ApiPutOptions extends ApiEndpointOptions {
}
/**
 * Options for Api put endpoint.
 */
export interface ApiDeleteOptions extends ApiEndpointOptions {
}
/**
 * Options for Api patch endpoint.
 */
export interface ApiPatchOptions extends ApiEndpointOptions {
}
/**
 * Options for Api patch endpoint.
 */
export interface ApiOptionsOptions extends ApiEndpointOptions {
}
/**
 * Options for Api patch endpoint.
 */
export interface ApiHeadOptions extends ApiEndpointOptions {
}
/**
 * Options for Api patch endpoint.
 */
export interface ApiConnectOptions extends ApiEndpointOptions {
}
/**
 * Inflight methods and members of `cloud.Api`.
 */
export interface IApiClient {
}
/**
 * List of inflight operations available for `Api`.
 * @internal
 */
export declare enum ApiInflightMethods {
    /** When the API endpoint receives a request. */
    REQUEST = "request"
}
/**
 * Allowed HTTP methods for a endpoint.
 */
export declare enum HttpMethod {
    /** Get */
    GET = "GET",
    /** Head */
    HEAD = "HEAD",
    /** Post */
    POST = "POST",
    /** Put */
    PUT = "PUT",
    /** Delete */
    DELETE = "DELETE",
    /** Connect */
    CONNECT = "CONNECT",
    /** Options */
    OPTIONS = "OPTIONS",
    /** Patch */
    PATCH = "PATCH"
}
/**
 * Shape of a request to an inflight handler.
 */
export interface ApiRequest {
    /** The request's HTTP method. */
    readonly method: HttpMethod;
    /** The request's path. */
    readonly path: string;
    /** The request's query string values. */
    readonly query: Record<string, string>;
    /** The path variables. */
    readonly vars: Record<string, string>;
    /** The request's body. */
    readonly body?: string;
    /** The request's headers. */
    readonly headers?: Record<string, string>;
}
export declare const DEFAULT_RESPONSE_STATUS = 200;
/**
 * Shape of a response from a inflight handler.
 */
export interface ApiResponse {
    /**
     * The response's status code.
     * @default 200
     **/
    readonly status?: number;
    /**
     * The response's body.
     * @default - no body
     **/
    readonly body?: string;
    /**
     * The response's headers.
     * @default {}
     **/
    readonly headers?: Record<string, string>;
}
/**
 * A resource with an inflight "handle" method that can be passed to
 * one of the `Api` request preflight methods.
 *
 * @inflight `@winglang/sdk.cloud.IApiEndpointHandlerClient`
 */
export interface IApiEndpointHandler extends IInflight {
    /** @internal */
    [INFLIGHT_SYMBOL]?: IApiEndpointHandlerClient["handle"];
}
/**
 * Inflight client for `IApiEndpointHandler`.
 */
export interface IApiEndpointHandlerClient {
    /**
     * Inflight that will be called when a request is made to the endpoint.
     * @inflight
     */
    handle(request: ApiRequest): Promise<ApiResponse | undefined>;
}
/**
 * Parse an HTTP method string to an HttpMethod enum
 * @param method HTTP method string
 * @returns HttpMethod enum
 * @throws Error if the method is not supported
 */
export declare function parseHttpMethod(method: string): HttpMethod;
/**
 * Convert an object with multi-valued parameters to a an object with
 * single-valued parameters.
 */
export declare function sanitizeParamLikeObject(obj: Record<string, string | string[] | undefined>): Record<string, string>;
export {};
