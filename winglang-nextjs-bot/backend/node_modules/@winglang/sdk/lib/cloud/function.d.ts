import { Construct } from "constructs";
import { INFLIGHT_SYMBOL } from "../core/types";
import { Duration, IInflight, IInflightHost, Resource } from "../std";
/**
 * Global identifier for `Function`.
 */
export declare const FUNCTION_FQN: string;
/**
 * Options for `Function`.
 */
export interface FunctionProps {
    /**
     * Environment variables to pass to the function.
     * @default - No environment variables.
     */
    readonly env?: {
        [key: string]: string;
    };
    /**
     * The maximum amount of time the function can run.
     * @default 1m
     */
    readonly timeout?: Duration;
    /**
     * The amount of memory to allocate to the function, in MB.
     * @default 1024
     */
    readonly memory?: number;
    /**
     * Specifies the number of days that function logs will be kept.
     * Setting negative value means logs will not expire.
     * @default 30
     */
    readonly logRetentionDays?: number;
    /**
     * The maximum concurrent invocations that can run at one time.
     * @default - platform specific limits (100 on the simulator)
     */
    readonly concurrency?: number;
}
/**
 * A function.
 *
 * @inflight `@winglang/sdk.cloud.IFunctionClient`
 * @abstract
 */
export declare class Function extends Resource implements IInflightHost {
    /** @internal */
    [INFLIGHT_SYMBOL]?: IFunctionClient;
    private readonly _env;
    /**
     * Reference to the function handler - an inflight closure.
     */
    protected readonly handler: IFunctionHandler;
    /**
     * The path where the entrypoint of the function source code will be eventually written to.
     */
    protected readonly entrypoint: string;
    constructor(scope: Construct, id: string, handler: IFunctionHandler, props?: FunctionProps);
    /** @internal */
    _preSynthesize(): void;
    /**
     * @internal
     * @param handler IFunctionHandler
     * @returns the function code lines as strings
     */
    protected _getCodeLines(handler: IFunctionHandler): string[];
    /**
     * Add an environment variable to the function.
     */
    addEnvironment(name: string, value: string): void;
    /**
     * Returns the set of environment variables for this function.
     */
    get env(): Record<string, string>;
}
/**
 * Inflight interface for `Function`.
 */
export interface IFunctionClient {
    /**
     * Invokes the function with a payload and waits for the result.
     * @param payload payload to pass to the function. If not defined, an empty string will be passed.
     * @returns An optional response from the function
     * @inflight
     */
    invoke(payload?: string): Promise<string | undefined>;
    /**
     * Kicks off the execution of the function with a payload and returns immediately while the function is running.
     * @param payload payload to pass to the function. If not defined, an empty string will be passed.
     * @inflight
     */
    invokeAsync(payload?: string): Promise<void>;
}
/**
 * A resource with an inflight "handle" method that can be used to
 * create a `cloud.Function`.
 *
 * @inflight `@winglang/sdk.cloud.IFunctionHandlerClient`
 */
export interface IFunctionHandler extends IInflight {
    /** @internal */
    [INFLIGHT_SYMBOL]?: IFunctionHandlerClient["handle"];
}
/**
 * Inflight client for `IFunctionHandler`.
 */
export interface IFunctionHandlerClient {
    /**
     * Entrypoint function that will be called when the cloud function is invoked.
     * @inflight
     */
    handle(event?: string): Promise<string | undefined>;
}
/**
 * List of inflight operations available for `Function`.
 * @internal
 */
export declare enum FunctionInflightMethods {
    /** `Function.invoke` */
    INVOKE = "invoke",
    /** `Function.invokeAsync` */
    INVOKE_ASYNC = "invokeAsync"
}
