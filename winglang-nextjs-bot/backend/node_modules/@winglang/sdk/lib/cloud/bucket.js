"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BucketInflightMethods = exports.BucketEventType = exports.BucketSignedUrlAction = exports.Bucket = exports.BUCKET_FQN = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const fs = __importStar(require("fs"));
const path_1 = require("path");
const topic_1 = require("./topic");
const constants_1 = require("../constants");
const core_1 = require("../core");
const errors_1 = require("../core/errors");
const types_1 = require("../core/types");
const std_1 = require("../std");
/**
 * Global identifier for `Bucket`.
 */
exports.BUCKET_FQN = (0, constants_1.fqnForType)("cloud.Bucket");
/**
 * A cloud object store.
 *
 * @inflight `@winglang/sdk.cloud.IBucketClient`
 * @abstract
 */
class Bucket extends std_1.Resource {
    constructor(scope, id, props = {}) {
        if (new.target === Bucket) {
            return std_1.Resource._newFromFactory(exports.BUCKET_FQN, scope, id, props);
        }
        super(scope, id);
        /** @internal */
        this._topics = new Map();
        std_1.Node.of(this).title = "Bucket";
        std_1.Node.of(this).description = "A cloud object store";
    }
    /**
     * Add a file to the bucket that is uploaded when the app is deployed.
     *
     * TODO: In the future this will support uploading any `Blob` type or
     * referencing a file from the local filesystem.
     * @abstract
     */
    addObject(key, body) {
        key;
        body;
        throw new errors_1.AbstractMemberError();
    }
    /**
     * Add a file to the bucket from system folder
     *
     * @param {string} key - The key or name to associate with the file.
     * @param {string} path - The path to the file on the local system.
     * @param {BufferEncoding} encoding - The encoding to use when reading the file. Defaults to "utf-8".
     */
    addFile(key, path, encoding = "utf-8") {
        const app = core_1.App.of(this);
        const data = fs.readFileSync((0, path_1.isAbsolute)(path) ? path : (0, path_1.resolve)(app.entrypointDir, path), { encoding: encoding });
        this.addObject(key, data);
    }
    /**
     * Creates a topic for subscribing to notification events
     * @param actionType
     * @returns the created topic
     */
    createTopic(actionType) {
        const topic = new topic_1.Topic(this, actionType);
        this.node.addDependency(topic);
        return topic;
    }
    /**
     * Gets topic form the topics map, or creates if not exists
     * @param actionType
     */
    getTopic(actionType) {
        if (!this._topics.has(actionType)) {
            this._topics.set(actionType, this.createTopic(actionType));
        }
        return this._topics.get(actionType);
    }
    /**
     * Creates an inflight handler from inflight code
     * @param eventType
     * @param inflight
     */
    createTopicHandler(eventType, inflight) {
        eventType;
        inflight;
        throw new Error("Method not implemented.");
    }
    /**
     * Creates a bucket event notifier
     * @param eventNames the events to subscribe the inflight function to
     * @param inflight the code to run upon event
     * @param opts
     */
    createBucketEvent(eventNames, inflight, opts) {
        opts;
        if (eventNames.includes(BucketEventType.CREATE)) {
            const topic = this.getTopic(BucketEventType.CREATE).onMessage(this.createTopicHandler(BucketEventType.CREATE, inflight));
            for (const op of [
                BucketInflightMethods.PUT,
                BucketInflightMethods.PUT_JSON,
            ]) {
                std_1.Node.of(this).addConnection({
                    source: this,
                    sourceOp: op,
                    target: topic,
                    targetOp: topic_1.TopicInflightMethods.PUBLISH,
                    name: BucketEventType.CREATE,
                });
            }
        }
        if (eventNames.includes(BucketEventType.UPDATE)) {
            const topic = this.getTopic(BucketEventType.UPDATE).onMessage(this.createTopicHandler(BucketEventType.UPDATE, inflight));
            for (const op of [
                BucketInflightMethods.PUT,
                BucketInflightMethods.PUT_JSON,
            ]) {
                std_1.Node.of(this).addConnection({
                    source: this,
                    sourceOp: op,
                    target: topic,
                    targetOp: topic_1.TopicInflightMethods.PUBLISH,
                    name: BucketEventType.UPDATE,
                });
            }
        }
        if (eventNames.includes(BucketEventType.DELETE)) {
            const topic = this.getTopic(BucketEventType.DELETE).onMessage(this.createTopicHandler(BucketEventType.DELETE, inflight));
            for (const op of [
                BucketInflightMethods.DELETE,
                BucketInflightMethods.TRY_DELETE,
            ]) {
                std_1.Node.of(this).addConnection({
                    source: this,
                    sourceOp: op,
                    target: topic,
                    targetOp: topic_1.TopicInflightMethods.PUBLISH,
                    name: BucketEventType.DELETE,
                });
            }
        }
    }
    /**
     * Run an inflight whenever a file is uploaded to the bucket.
     */
    onCreate(fn, opts) {
        if (opts) {
            console.warn("bucket.onCreate does not support options yet");
        }
        this.createBucketEvent([BucketEventType.CREATE], fn, opts);
    }
    /**
     * Run an inflight whenever a file is deleted from the bucket.
     */
    onDelete(fn, opts) {
        if (opts) {
            console.warn("bucket.onDelete does not support options yet");
        }
        this.createBucketEvent([BucketEventType.DELETE], fn, opts);
    }
    /**
     * Run an inflight whenever a file is updated in the bucket.
     */
    onUpdate(fn, opts) {
        if (opts) {
            console.warn("bucket.onUpdate does not support options yet");
        }
        this.createBucketEvent([BucketEventType.UPDATE], fn, opts);
    }
    /**
     * Run an inflight whenever a file is uploaded, modified, or deleted from the bucket.
     */
    onEvent(fn, opts) {
        if (opts) {
            console.warn("bucket.onEvent does not support options yet");
        }
        this.createBucketEvent([BucketEventType.CREATE, BucketEventType.UPDATE, BucketEventType.DELETE], fn, opts);
    }
}
exports.Bucket = Bucket;
_a = JSII_RTTI_SYMBOL_1;
Bucket[_a] = { fqn: "@winglang/sdk.cloud.Bucket", version: "0.0.0" };
/**
 * Specifies the action permitted by a presigned URL for a bucket.
 */
var BucketSignedUrlAction;
(function (BucketSignedUrlAction) {
    /**
     * Represents a HTTP GET request for a presigned URL, allowing read access for an object in the bucket.
     */
    BucketSignedUrlAction["DOWNLOAD"] = "DOWNLOAD";
    /**
     * Represents a HTTP PUT request for a presigned URL, allowing write access for an object in the bucket.
     */
    BucketSignedUrlAction["UPLOAD"] = "UPLOAD";
})(BucketSignedUrlAction || (exports.BucketSignedUrlAction = BucketSignedUrlAction = {}));
/**
 * Bucket events to subscribe to
 */
var BucketEventType;
(function (BucketEventType) {
    /**
     * Create
     */
    BucketEventType["CREATE"] = "OnCreate";
    /**
     * Delete
     */
    BucketEventType["DELETE"] = "OnDelete";
    /**
     * Update
     */
    BucketEventType["UPDATE"] = "OnUpdate";
})(BucketEventType || (exports.BucketEventType = BucketEventType = {}));
/**
 * List of inflight operations available for `Bucket`.
 * @internal
 */
var BucketInflightMethods;
(function (BucketInflightMethods) {
    /** `Bucket.put` */
    BucketInflightMethods["PUT"] = "put";
    /** `Bucket.get` */
    BucketInflightMethods["GET"] = "get";
    /** `Bucket.list` */
    BucketInflightMethods["LIST"] = "list";
    /** `Bucket.delete` */
    BucketInflightMethods["DELETE"] = "delete";
    /** `Bucket.putJson` */
    BucketInflightMethods["PUT_JSON"] = "putJson";
    /** `Bucket.getJson` */
    BucketInflightMethods["GET_JSON"] = "getJson";
    /** `Bucket.publicUrl` */
    BucketInflightMethods["PUBLIC_URL"] = "publicUrl";
    /** `Bucket.exists` */
    BucketInflightMethods["EXISTS"] = "exists";
    /** `Bucket.tryGet` */
    BucketInflightMethods["TRY_GET"] = "tryGet";
    /** `Bucket.tryGetJson` */
    BucketInflightMethods["TRY_GET_JSON"] = "tryGetJson";
    /** `Bucket.tryDelete` */
    BucketInflightMethods["TRY_DELETE"] = "tryDelete";
    /** `Bucket.signedUrl` */
    BucketInflightMethods["SIGNED_URL"] = "signedUrl";
    /** `Bucket.metadata` */
    BucketInflightMethods["METADATA"] = "metadata";
    /** `Bucket.copy` */
    BucketInflightMethods["COPY"] = "copy";
    /** `Bucket.rename` */
    BucketInflightMethods["RENAME"] = "rename";
})(BucketInflightMethods || (exports.BucketInflightMethods = BucketInflightMethods = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVja2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Nsb3VkL2J1Y2tldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsdUNBQXlCO0FBQ3pCLCtCQUEyQztBQUUzQyxtQ0FBOEU7QUFDOUUsNENBQTBDO0FBQzFDLGtDQUE4QjtBQUM5QiwyQ0FBcUQ7QUFDckQseUNBQWdEO0FBQ2hELGdDQUE2RTtBQUU3RTs7R0FFRztBQUNVLFFBQUEsVUFBVSxHQUFHLElBQUEsc0JBQVUsRUFBQyxjQUFjLENBQUMsQ0FBQztBQWFyRDs7Ozs7R0FLRztBQUNILE1BQWEsTUFBTyxTQUFRLGNBQVE7SUFNbEMsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxRQUFxQixFQUFFO1FBQy9ELElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxNQUFNLEVBQUUsQ0FBQztZQUMxQixPQUFPLGNBQVEsQ0FBQyxlQUFlLENBQUMsa0JBQVUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2hFLENBQUM7UUFFRCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBVm5CLGdCQUFnQjtRQUNHLFlBQU8sR0FBRyxJQUFJLEdBQUcsRUFBMEIsQ0FBQztRQVc3RCxVQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUM7UUFDL0IsVUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLEdBQUcsc0JBQXNCLENBQUM7SUFDckQsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNJLFNBQVMsQ0FBQyxHQUFXLEVBQUUsSUFBWTtRQUN4QyxHQUFHLENBQUM7UUFDSixJQUFJLENBQUM7UUFDTCxNQUFNLElBQUksNEJBQW1CLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBRUksT0FBTyxDQUNaLEdBQVcs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YkQsV0FBWSxlQUFlO0lBQ3pCOztPQUVHO0lBQ0gsc0NBQW1CLENBQUE7SUFDbkI7O09BRUc7SUFDSCxzQ0FBbUIsQ0FBQTtJQUNuQjs7T0FFRztJQUNILHNDQUFtQixDQUFBO0FBQ3JCLENBQUMsRUFiVyxlQUFlLCtCQUFmLGVBQWUsUUFhMUI7QUFFRDs7O0dBR0c7QUFDSCxJQUFZLHFCQStCWDtBQS9CRCxXQUFZLHFCQUFxQjtJQUMvQixtQkFBbUI7SUFDbkIsb0NBQVcsQ0FBQTtJQUNYLG1CQUFtQjtJQUNuQixvQ0FBVyxDQUFBO0lBQ1gsb0JBQW9CO0lBQ3BCLHNDQUFhLENBQUE7SUFDYixzQkFBc0I7SUFDdEIsMENBQWlCLENBQUE7SUFDakIsdUJBQXVCO0lBQ3ZCLDZDQUFvQixDQUFBO0lBQ3BCLHVCQUF1QjtJQUN2Qiw2Q0FBb0IsQ0FBQTtJQUNwQix5QkFBeUI7SUFDekIsaURBQXdCLENBQUE7SUFDeEIsc0JBQXNCO0lBQ3RCLDBDQUFpQixDQUFBO0lBQ2pCLHNCQUFzQjtJQUN0QiwyQ0FBa0IsQ0FBQTtJQUNsQiwwQkFBMEI7SUFDMUIsb0RBQTJCLENBQUE7SUFDM0IseUJBQXlCO0lBQ3pCLGlEQUF3QixDQUFBO0lBQ3hCLHlCQUF5QjtJQUN6QixpREFBd0IsQ0FBQTtJQUN4Qix3QkFBd0I7SUFDeEIsOENBQXFCLENBQUE7SUFDckIsb0JBQW9CO0lBQ3BCLHNDQUFhLENBQUE7SUFDYixzQkFBc0I7SUFDdEIsMENBQWlCLENBQUE7QUFDbkIsQ0FBQyxFQS9CVyxxQkFBcUIscUNBQXJCLHFCQUFxQixRQStCaEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBmcyBmcm9tIFwiZnNcIjtcbmltcG9ydCB7IGlzQWJzb2x1dGUsIHJlc29sdmUgfSBmcm9tIFwicGF0aFwiO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCB7IElUb3BpY09uTWVzc2FnZUhhbmRsZXIsIFRvcGljLCBUb3BpY0luZmxpZ2h0TWV0aG9kcyB9IGZyb20gXCIuL3RvcGljXCI7XG5pbXBvcnQgeyBmcW5Gb3JUeXBlIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4uL2NvcmVcIjtcbmltcG9ydCB7IEFic3RyYWN0TWVtYmVyRXJyb3IgfSBmcm9tIFwiLi4vY29yZS9lcnJvcnNcIjtcbmltcG9ydCB7IElORkxJR0hUX1NZTUJPTCB9IGZyb20gXCIuLi9jb3JlL3R5cGVzXCI7XG5pbXBvcnQgeyBKc29uLCBOb2RlLCBSZXNvdXJjZSwgRGF0ZXRpbWUsIER1cmF0aW9uLCBJSW5mbGlnaHQgfSBmcm9tIFwiLi4vc3RkXCI7XG5cbi8qKlxuICogR2xvYmFsIGlkZW50aWZpZXIgZm9yIGBCdWNrZXRgLlxuICovXG5leHBvcnQgY29uc3QgQlVDS0VUX0ZRTiA9IGZxbkZvclR5cGUoXCJjbG91ZC5CdWNrZXRcIik7XG5cbi8qKlxuICogT3B0aW9ucyBmb3IgYEJ1Y2tldGAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQnVja2V0UHJvcHMge1xuICAvKipcbiAgICogV2hldGhlciB0aGUgYnVja2V0J3Mgb2JqZWN0cyBzaG91bGQgYmUgcHVibGljbHkgYWNjZXNzaWJsZS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHJlYWRvbmx5IHB1YmxpYz86IGJvb2xlYW47XG59XG5cbi8qKlxuICogQSBjbG91ZCBvYmplY3Qgc3RvcmUuXG4gKlxuICogQGluZmxpZ2h0IGBAd2luZ2xhbmcvc2RrLmNsb3VkLklCdWNrZXRDbGllbnRgXG4gKiBAYWJzdHJhY3RcbiAqL1xuZXhwb3J0IGNsYXNzIEJ1Y2tldCBleHRlbmRzIFJlc291cmNlIHtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgX3RvcGljcyA9IG5ldyBNYXA8QnVja2V0RXZlbnRUeXBlLCBUb3BpYz4oKTtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwdWJsaWMgW0lORkxJR0hUX1NZTUJPTF0/OiBJQnVja2V0Q2xpZW50O1xuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBCdWNrZXRQcm9wcyA9IHt9KSB7XG4gICAgaWYgKG5ldy50YXJnZXQgPT09IEJ1Y2tldCkge1xuICAgICAgcmV0dXJuIFJlc291cmNlLl9uZXdGcm9tRmFjdG9yeShCVUNLRVRfRlFOLCBzY29wZSwgaWQsIHByb3BzKTtcbiAgICB9XG5cbiAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgTm9kZS5vZih0aGlzKS50aXRsZSA9IFwiQnVja2V0XCI7XG4gICAgTm9kZS5vZih0aGlzKS5kZXNjcmlwdGlvbiA9IFwiQSBjbG91ZCBvYmplY3Qgc3RvcmVcIjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBmaWxlIHRvIHRoZSBidWNrZXQgdGhhdCBpcyB1cGxvYWRlZCB3aGVuIHRoZSBhcHAgaXMgZGVwbG95ZWQuXG4gICAqXG4gICAqIFRPRE86IEluIHRoZSBmdXR1cmUgdGhpcyB3aWxsIHN1cHBvcnQgdXBsb2FkaW5nIGFueSBgQmxvYmAgdHlwZSBvclxuICAgKiByZWZlcmVuY2luZyBhIGZpbGUgZnJvbSB0aGUgbG9jYWwgZmlsZXN5c3RlbS5cbiAgICogQGFic3RyYWN0XG4gICAqL1xuICBwdWJsaWMgYWRkT2JqZWN0KGtleTogc3RyaW5nLCBib2R5OiBzdHJpbmcpOiB2b2lkIHtcbiAgICBrZXk7XG4gICAgYm9keTtcbiAgICB0aHJvdyBuZXcgQWJzdHJhY3RNZW1iZXJFcnJvcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIGZpbGUgdG8gdGhlIGJ1Y2tldCBmcm9tIHN5c3RlbSBmb2xkZXJcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIFRoZSBrZXkgb3IgbmFtZSB0byBhc3NvY2lhdGUgd2l0aCB0aGUgZmlsZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggLSBUaGUgcGF0aCB0byB0aGUgZmlsZSBvbiB0aGUgbG9jYWwgc3lzdGVtLlxuICAgKiBAcGFyYW0ge0J1ZmZlckVuY29kaW5nfSBlbmNvZGluZyAtIFRoZSBlbmNvZGluZyB0byB1c2Ugd2hlbiByZWFkaW5nIHRoZSBmaWxlLiBEZWZhdWx0cyB0byBcInV0Zi04XCIuXG4gICAqL1xuXG4gIHB1YmxpYyBhZGRGaWxlKFxuICAgIGtleTogc3RyaW5nLFxuICAgIHBhdGg6IHN0cmluZyxcbiAgICBlbmNvZGluZzogQnVmZmVyRW5jb2RpbmcgPSBcInV0Zi04XCJcbiAgKTogdm9pZCB7XG4gICAgY29uc3QgYXBwID0gQXBwLm9mKHRoaXMpO1xuXG4gICAgY29uc3QgZGF0YSA9IGZzLnJlYWRGaWxlU3luYyhcbiAgICAgIGlzQWJzb2x1dGUocGF0aCkgPyBwYXRoIDogcmVzb2x2ZShhcHAuZW50cnlwb2ludERpciwgcGF0aCksXG4gICAgICB7IGVuY29kaW5nOiBlbmNvZGluZyB9XG4gICAgKTtcblxuICAgIHRoaXMuYWRkT2JqZWN0KGtleSwgZGF0YSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHRvcGljIGZvciBzdWJzY3JpYmluZyB0byBub3RpZmljYXRpb24gZXZlbnRzXG4gICAqIEBwYXJhbSBhY3Rpb25UeXBlXG4gICAqIEByZXR1cm5zIHRoZSBjcmVhdGVkIHRvcGljXG4gICAqL1xuICBwcm90ZWN0ZWQgY3JlYXRlVG9waWMoYWN0aW9uVHlwZTogQnVja2V0RXZlbnRUeXBlKTogVG9waWMge1xuICAgIGNvbnN0IHRvcGljID0gbmV3IFRvcGljKHRoaXMsIGFjdGlvblR5cGUpO1xuICAgIHRoaXMubm9kZS5hZGREZXBlbmRlbmN5KHRvcGljKTtcbiAgICByZXR1cm4gdG9waWM7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0b3BpYyBmb3JtIHRoZSB0b3BpY3MgbWFwLCBvciBjcmVhdGVzIGlmIG5vdCBleGlzdHNcbiAgICogQHBhcmFtIGFjdGlvblR5cGVcbiAgICovXG4gIHByb3RlY3RlZCBnZXRUb3BpYyhhY3Rpb25UeXBlOiBCdWNrZXRFdmVudFR5cGUpOiBUb3BpYyB7XG4gICAgaWYgKCF0aGlzLl90b3BpY3MuaGFzKGFjdGlvblR5cGUpKSB7XG4gICAgICB0aGlzLl90b3BpY3Muc2V0KGFjdGlvblR5cGUsIHRoaXMuY3JlYXRlVG9waWMoYWN0aW9uVHlwZSkpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fdG9waWNzLmdldChhY3Rpb25UeXBlKSBhcyBUb3BpYztcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluZmxpZ2h0IGhhbmRsZXIgZnJvbSBpbmZsaWdodCBjb2RlXG4gICAqIEBwYXJhbSBldmVudFR5cGVcbiAgICogQHBhcmFtIGluZmxpZ2h0XG4gICAqL1xuICBwcm90ZWN0ZWQgY3JlYXRlVG9waWNIYW5kbGVyKFxuICAgIGV2ZW50VHlwZTogQnVja2V0RXZlbnRUeXBlLFxuICAgIGluZmxpZ2h0OiBJQnVja2V0RXZlbnRIYW5kbGVyXG4gICk6IElUb3BpY09uTWVzc2FnZUhhbmRsZXIge1xuICAgIGV2ZW50VHlwZTtcbiAgICBpbmZsaWdodDtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgYnVja2V0IGV2ZW50IG5vdGlmaWVyXG4gICAqIEBwYXJhbSBldmVudE5hbWVzIHRoZSBldmVudHMgdG8gc3Vic2NyaWJlIHRoZSBpbmZsaWdodCBmdW5jdGlvbiB0b1xuICAgKiBAcGFyYW0gaW5mbGlnaHQgdGhlIGNvZGUgdG8gcnVuIHVwb24gZXZlbnRcbiAgICogQHBhcmFtIG9wdHNcbiAgICovXG4gIHByaXZhdGUgY3JlYXRlQnVja2V0RXZlbnQoXG4gICAgZXZlbnROYW1lczogQnVja2V0RXZlbnRUeXBlW10sXG4gICAgaW5mbGlnaHQ6IElCdWNrZXRFdmVudEhhbmRsZXIsXG4gICAgb3B0cz86IEJ1Y2tldE9uQ3JlYXRlT3B0aW9uc1xuICApIHtcbiAgICBvcHRzO1xuICAgIGlmIChldmVudE5hbWVzLmluY2x1ZGVzKEJ1Y2tldEV2ZW50VHlwZS5DUkVBVEUpKSB7XG4gICAgICBjb25zdCB0b3BpYyA9IHRoaXMuZ2V0VG9waWMoQnVja2V0RXZlbnRUeXBlLkNSRUFURSkub25NZXNzYWdlKFxuICAgICAgICB0aGlzLmNyZWF0ZVRvcGljSGFuZGxlcihCdWNrZXRFdmVudFR5cGUuQ1JFQVRFLCBpbmZsaWdodClcbiAgICAgICk7XG4gICAgICBmb3IgKGNvbnN0IG9wIG9mIFtcbiAgICAgICAgQnVja2V0SW5mbGlnaHRNZXRob2RzLlBVVCxcbiAgICAgICAgQnVja2V0SW5mbGlnaHRNZXRob2RzLlBVVF9KU09OLFxuICAgICAgXSkge1xuICAgICAgICBOb2RlLm9mKHRoaXMpLmFkZENvbm5lY3Rpb24oe1xuICAgICAgICAgIHNvdXJjZTogdGhpcyxcbiAgICAgICAgICBzb3VyY2VPcDogb3AsXG4gICAgICAgICAgdGFyZ2V0OiB0b3BpYyxcbiAgICAgICAgICB0YXJnZXRPcDogVG9waWNJbmZsaWdodE1ldGhvZHMuUFVCTElTSCxcbiAgICAgICAgICBuYW1lOiBCdWNrZXRFdmVudFR5cGUuQ1JFQVRFLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGV2ZW50TmFtZXMuaW5jbHVkZXMoQnVja2V0RXZlbnRUeXBlLlVQREFURSkpIHtcbiAgICAgIGNvbnN0IHRvcGljID0gdGhpcy5nZXRUb3BpYyhCdWNrZXRFdmVudFR5cGUuVVBEQVRFKS5vbk1lc3NhZ2UoXG4gICAgICAgIHRoaXMuY3JlYXRlVG9waWNIYW5kbGVyKEJ1Y2tldEV2ZW50VHlwZS5VUERBVEUsIGluZmxpZ2h0KVxuICAgICAgKTtcbiAgICAgIGZvciAoY29uc3Qgb3Agb2YgW1xuICAgICAgICBCdWNrZXRJbmZsaWdodE1ldGhvZHMuUFVULFxuICAgICAgICBCdWNrZXRJbmZsaWdodE1ldGhvZHMuUFVUX0pTT04sXG4gICAgICBdKSB7XG4gICAgICAgIE5vZGUub2YodGhpcykuYWRkQ29ubmVjdGlvbih7XG4gICAgICAgICAgc291cmNlOiB0aGlzLFxuICAgICAgICAgIHNvdXJjZU9wOiBvcCxcbiAgICAgICAgICB0YXJnZXQ6IHRvcGljLFxuICAgICAgICAgIHRhcmdldE9wOiBUb3BpY0luZmxpZ2h0TWV0aG9kcy5QVUJMSVNILFxuICAgICAgICAgIG5hbWU6IEJ1Y2tldEV2ZW50VHlwZS5VUERBVEUsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZXZlbnROYW1lcy5pbmNsdWRlcyhCdWNrZXRFdmVudFR5cGUuREVMRVRFKSkge1xuICAgICAgY29uc3QgdG9waWMgPSB0aGlzLmdldFRvcGljKEJ1Y2tldEV2ZW50VHlwZS5ERUxFVEUpLm9uTWVzc2FnZShcbiAgICAgICAgdGhpcy5jcmVhdGVUb3BpY0hhbmRsZXIoQnVja2V0RXZlbnRUeXBlLkRFTEVURSwgaW5mbGlnaHQpXG4gICAgICApO1xuICAgICAgZm9yIChjb25zdCBvcCBvZiBbXG4gICAgICAgIEJ1Y2tldEluZmxpZ2h0TWV0aG9kcy5ERUxFVEUsXG4gICAgICAgIEJ1Y2tldEluZmxpZ2h0TWV0aG9kcy5UUllfREVMRVRFLFxuICAgICAgXSkge1xuICAgICAgICBOb2RlLm9mKHRoaXMpLmFkZENvbm5lY3Rpb24oe1xuICAgICAgICAgIHNvdXJjZTogdGhpcyxcbiAgICAgICAgICBzb3VyY2VPcDogb3AsXG4gICAgICAgICAgdGFyZ2V0OiB0b3BpYyxcbiAgICAgICAgICB0YXJnZXRPcDogVG9waWNJbmZsaWdodE1ldGhvZHMuUFVCTElTSCxcbiAgICAgICAgICBuYW1lOiBCdWNrZXRFdmVudFR5cGUuREVMRVRFLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUnVuIGFuIGluZmxpZ2h0IHdoZW5ldmVyIGEgZmlsZSBpcyB1cGxvYWRlZCB0byB0aGUgYnVja2V0LlxuICAgKi9cbiAgcHVibGljIG9uQ3JlYXRlKGZuOiBJQnVja2V0RXZlbnRIYW5kbGVyLCBvcHRzPzogQnVja2V0T25DcmVhdGVPcHRpb25zKTogdm9pZCB7XG4gICAgaWYgKG9wdHMpIHtcbiAgICAgIGNvbnNvbGUud2FybihcImJ1Y2tldC5vbkNyZWF0ZSBkb2VzIG5vdCBzdXBwb3J0IG9wdGlvbnMgeWV0XCIpO1xuICAgIH1cbiAgICB0aGlzLmNyZWF0ZUJ1Y2tldEV2ZW50KFtCdWNrZXRFdmVudFR5cGUuQ1JFQVRFXSwgZm4sIG9wdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJ1biBhbiBpbmZsaWdodCB3aGVuZXZlciBhIGZpbGUgaXMgZGVsZXRlZCBmcm9tIHRoZSBidWNrZXQuXG4gICAqL1xuICBwdWJsaWMgb25EZWxldGUoZm46IElCdWNrZXRFdmVudEhhbmRsZXIsIG9wdHM/OiBCdWNrZXRPbkRlbGV0ZU9wdGlvbnMpOiB2b2lkIHtcbiAgICBpZiAob3B0cykge1xuICAgICAgY29uc29sZS53YXJuKFwiYnVja2V0Lm9uRGVsZXRlIGRvZXMgbm90IHN1cHBvcnQgb3B0aW9ucyB5ZXRcIik7XG4gICAgfVxuICAgIHRoaXMuY3JlYXRlQnVja2V0RXZlbnQoW0J1Y2tldEV2ZW50VHlwZS5ERUxFVEVdLCBmbiwgb3B0cyk7XG4gIH1cblxuICAvKipcbiAgICogUnVuIGFuIGluZmxpZ2h0IHdoZW5ldmVyIGEgZmlsZSBpcyB1cGRhdGVkIGluIHRoZSBidWNrZXQuXG4gICAqL1xuICBwdWJsaWMgb25VcGRhdGUoZm46IElCdWNrZXRFdmVudEhhbmRsZXIsIG9wdHM/OiBCdWNrZXRPblVwZGF0ZU9wdGlvbnMpOiB2b2lkIHtcbiAgICBpZiAob3B0cykge1xuICAgICAgY29uc29sZS53YXJuKFwiYnVja2V0Lm9uVXBkYXRlIGRvZXMgbm90IHN1cHBvcnQgb3B0aW9ucyB5ZXRcIik7XG4gICAgfVxuICAgIHRoaXMuY3JlYXRlQnVja2V0RXZlbnQoW0J1Y2tldEV2ZW50VHlwZS5VUERBVEVdLCBmbiwgb3B0cyk7XG4gIH1cblxuICAvKipcbiAgICogUnVuIGFuIGluZmxpZ2h0IHdoZW5ldmVyIGEgZmlsZSBpcyB1cGxvYWRlZCwgbW9kaWZpZWQsIG9yIGRlbGV0ZWQgZnJvbSB0aGUgYnVja2V0LlxuICAgKi9cbiAgcHVibGljIG9uRXZlbnQoZm46IElCdWNrZXRFdmVudEhhbmRsZXIsIG9wdHM/OiBCdWNrZXRPbkV2ZW50T3B0aW9ucyk6IHZvaWQge1xuICAgIGlmIChvcHRzKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJidWNrZXQub25FdmVudCBkb2VzIG5vdCBzdXBwb3J0IG9wdGlvbnMgeWV0XCIpO1xuICAgIH1cbiAgICB0aGlzLmNyZWF0ZUJ1Y2tldEV2ZW50KFxuICAgICAgW0J1Y2tldEV2ZW50VHlwZS5DUkVBVEUsIEJ1Y2tldEV2ZW50VHlwZS5VUERBVEUsIEJ1Y2tldEV2ZW50VHlwZS5ERUxFVEVdLFxuICAgICAgZm4sXG4gICAgICBvcHRzXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIE1ldGFkYXRhIG9mIGEgYnVja2V0IG9iamVjdC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBPYmplY3RNZXRhZGF0YSB7XG4gIC8qKiBUaGUgc2l6ZSBvZiB0aGUgb2JqZWN0IGluIGJ5dGVzLiAqL1xuICByZWFkb25seSBzaXplOiBudW1iZXI7XG5cbiAgLyoqIFRoZSB0aW1lIHRoZSBvYmplY3Qgd2FzIGxhc3QgbW9kaWZpZWQuICovXG4gIHJlYWRvbmx5IGxhc3RNb2RpZmllZDogRGF0ZXRpbWU7XG5cbiAgLyoqIFRoZSBjb250ZW50IHR5cGUgb2YgdGhlIG9iamVjdCwgaWYgaXQgaXMga25vd24uICovXG4gIHJlYWRvbmx5IGNvbnRlbnRUeXBlPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIE9wdGlvbnMgZm9yIGBCdWNrZXQuZ2V0KClgLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEJ1Y2tldEdldE9wdGlvbnMge1xuICAvKipcbiAgICogVGhlIHN0YXJ0aW5nIGJ5dGUgdG8gcmVhZCBmcm9tLlxuICAgKiBAZGVmYXVsdCAtIHVuZGVmaW5lZFxuICAgKi9cbiAgcmVhZG9ubHkgc3RhcnRCeXRlPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgZW5kaW5nIGJ5dGUgdG8gcmVhZCB1cCB0byAoaW5jbHVkaW5nKS5cbiAgICogQGRlZmF1bHQgLSB1bmRlZmluZWRcbiAgICovXG4gIHJlYWRvbmx5IGVuZEJ5dGU/OiBudW1iZXI7XG59XG5cbi8qKlxuICogT3B0aW9ucyBmb3IgYEJ1Y2tldC50cnlHZXQoKWAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQnVja2V0VHJ5R2V0T3B0aW9ucyBleHRlbmRzIEJ1Y2tldEdldE9wdGlvbnMge31cblxuLyoqXG4gKiBPcHRpb25zIGZvciBgQnVja2V0LnB1dCgpYC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBCdWNrZXRQdXRPcHRpb25zIHtcbiAgLyoqXG4gICAqIFRoZSBIVFRQIENvbnRlbnQtVHlwZSBvZiB0aGUgb2JqZWN0LlxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUVFAvSGVhZGVycy9Db250ZW50LVR5cGVcbiAgICogQGRlZmF1bHQgLSBEZXRlcm1pbmVkIGJ5IGZpbGUgZXh0ZW5zaW9uIG9yIGZhbGxiYWNrIHRvIFwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCJcbiAgICovXG4gIHJlYWRvbmx5IGNvbnRlbnRUeXBlOiBzdHJpbmc7XG59XG5cbi8qKlxuICogT3B0aW9ucyBmb3IgYEJ1Y2tldC5kZWxldGUoKWAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQnVja2V0RGVsZXRlT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBDaGVjayBmYWlsdXJlcyBvbiB0aGUgbWV0aG9kIGFuZCByZXRyaWV2ZSBlcnJvcnMgaWYgYW55XG4gICAqIEBUaHJvd3MgaWYgdGhpcyBpcyBgdHJ1ZWAsIGFuIGVycm9yIGlzIHRocm93biBpZiB0aGUgZmlsZSBpcyBub3QgZm91bmQgKG9yIGFueSBlcnJvciBjYXNlKS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHJlYWRvbmx5IG11c3RFeGlzdD86IGJvb2xlYW47XG59XG5cbi8qKlxuICogU3BlY2lmaWVzIHRoZSBhY3Rpb24gcGVybWl0dGVkIGJ5IGEgcHJlc2lnbmVkIFVSTCBmb3IgYSBidWNrZXQuXG4gKi9cbmV4cG9ydCBlbnVtIEJ1Y2tldFNpZ25lZFVybEFjdGlvbiB7XG4gIC8qKlxuICAgKiBSZXByZXNlbnRzIGEgSFRUUCBHRVQgcmVxdWVzdCBmb3IgYSBwcmVzaWduZWQgVVJMLCBhbGxvd2luZyByZWFkIGFjY2VzcyBmb3IgYW4gb2JqZWN0IGluIHRoZSBidWNrZXQuXG4gICAqL1xuICBET1dOTE9BRCA9IFwiRE9XTkxPQURcIixcbiAgLyoqXG4gICAqIFJlcHJlc2VudHMgYSBIVFRQIFBVVCByZXF1ZXN0IGZvciBhIHByZXNpZ25lZCBVUkwsIGFsbG93aW5nIHdyaXRlIGFjY2VzcyBmb3IgYW4gb2JqZWN0IGluIHRoZSBidWNrZXQuXG4gICAqL1xuICBVUExPQUQgPSBcIlVQTE9BRFwiLFxufVxuXG4vKipcbiAqIE9wdGlvbnMgZm9yIGBCdWNrZXQuc2lnbmVkVXJsKClgLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEJ1Y2tldFNpZ25lZFVybE9wdGlvbnMge1xuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgc2lnbmVkIFVSTCB0byBleHBpcmUuXG4gICAqIEBkZWZhdWx0IDE1bVxuICAgKi9cbiAgcmVhZG9ubHkgZHVyYXRpb24/OiBEdXJhdGlvbjtcblxuICAvKipcbiAgICogVGhlIGFjdGlvbiBhbGxvd2VkIGJ5IHRoZSBzaWduZWQgVVJMLlxuICAgKiBAZGVmYXVsdCBCdWNrZXRTaWduZWRVcmxBY3Rpb24uRE9XTkxPQURcbiAgICovXG4gIHJlYWRvbmx5IGFjdGlvbj86IEJ1Y2tldFNpZ25lZFVybEFjdGlvbjtcbn1cblxuLyoqXG4gKiBJbmZsaWdodCBpbnRlcmZhY2UgZm9yIGBCdWNrZXRgLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElCdWNrZXRDbGllbnQge1xuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gb2JqZWN0IGV4aXN0cyBpbiB0aGUgYnVja2V0LlxuICAgKiBAcGFyYW0ga2V5IEtleSBvZiB0aGUgb2JqZWN0LlxuICAgKiBAaW5mbGlnaHRcbiAgICovXG4gIGV4aXN0cyhrZXk6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj47XG5cbiAgLyoqXG4gICAqIFB1dCBhbiBvYmplY3QgaW4gdGhlIGJ1Y2tldC5cbiAgICogQHBhcmFtIGtleSBLZXkgb2YgdGhlIG9iamVjdC5cbiAgICogQHBhcmFtIGJvZHkgQ29udGVudCBvZiB0aGUgb2JqZWN0IHdlIHdhbnQgdG8gc3RvcmUgaW50byB0aGUgYnVja2V0LlxuICAgKiBAcGFyYW0gb3B0aW9ucyBBZGRpdGlvbmFsIG9wdGlvbnNcbiAgICogQGluZmxpZ2h0XG4gICAqL1xuICBwdXQoa2V5OiBzdHJpbmcsIGJvZHk6IHN0cmluZywgb3B0aW9ucz86IEJ1Y2tldFB1dE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBQdXQgYSBKc29uIG9iamVjdCBpbiB0aGUgYnVja2V0LlxuICAgKiBAcGFyYW0ga2V5IEtleSBvZiB0aGUgb2JqZWN0LlxuICAgKiBAcGFyYW0gYm9keSBKc29uIG9iamVjdCB0aGF0IHdlIHdhbnQgdG8gc3RvcmUgaW50byB0aGUgYnVja2V0LlxuICAgKiBAaW5mbGlnaHRcbiAgICovXG4gIHB1dEpzb24oa2V5OiBzdHJpbmcsIGJvZHk6IEpzb24pOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZSBhbiBvYmplY3QgZnJvbSB0aGUgYnVja2V0LlxuICAgKiBJZiB0aGUgYnl0ZXMgcmV0dXJuZWQgYXJlIG5vdCBhIHZhbGlkIFVURi04IHN0cmluZywgYW4gZXJyb3IgaXMgdGhyb3duLlxuICAgKiBAcGFyYW0ga2V5IEtleSBvZiB0aGUgb2JqZWN0LlxuICAgKiBAcGFyYW0gb3B0aW9ucyBBZGRpdGlvbmFsIGdldCBvcHRpb25zXG4gICAqIEBUaHJvd3MgaWYgbm8gb2JqZWN0IHdpdGggdGhlIGdpdmVuIGtleSBleGlzdHMuXG4gICAqIEBSZXR1cm5zIHRoZSBvYmplY3QncyBib2R5LlxuICAgKiBAaW5mbGlnaHRcbiAgICovXG4gIGdldChrZXk6IHN0cmluZywgb3B0aW9ucz86IEJ1Y2tldEdldE9wdGlvbnMpOiBQcm9taXNlPHN0cmluZz47XG5cbiAgLyoqXG4gICAqIEdldCBhbiBvYmplY3QgZnJvbSB0aGUgYnVja2V0IGlmIGl0IGV4aXN0c1xuICAgKiBJZiB0aGUgYnl0ZXMgcmV0dXJuZWQgYXJlIG5vdCBhIHZhbGlkIFVURi04IHN0cmluZywgYW4gZXJyb3IgaXMgdGhyb3duLlxuICAgKiBAcGFyYW0ga2V5IEtleSBvZiB0aGUgb2JqZWN0LlxuICAgKiBAcGFyYW0gb3B0aW9ucyBBZGRpdGlvbmFsIGdldCBvcHRpb25zXG4gICAqIEByZXR1cm5zIHRoZSBjb250ZW50cyBvZiB0aGUgb2JqZWN0IGFzIGEgc3RyaW5nIGlmIGl0IGV4aXN0cywgbmlsIG90aGVyd2lzZVxuICAgKiBAaW5mbGlnaHRcbiAgICovXG4gIHRyeUdldChcbiAgICBrZXk6IHN0cmluZyxcbiAgICBvcHRpb25zPzogQnVja2V0VHJ5R2V0T3B0aW9uc1xuICApOiBQcm9taXNlPHN0cmluZyB8IHVuZGVmaW5lZD47XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlIGEgSnNvbiBvYmplY3QgZnJvbSB0aGUgYnVja2V0LlxuICAgKiBAcGFyYW0ga2V5IEtleSBvZiB0aGUgb2JqZWN0LlxuICAgKiBAVGhyb3dzIGlmIG5vIG9iamVjdCB3aXRoIHRoZSBnaXZlbiBrZXkgZXhpc3RzLlxuICAgKiBAUmV0dXJucyB0aGUgb2JqZWN0J3MgcGFyc2VkIEpzb24uXG4gICAqIEBpbmZsaWdodFxuICAgKi9cbiAgZ2V0SnNvbihrZXk6IHN0cmluZyk6IFByb21pc2U8SnNvbj47XG5cbiAgLyoqXG4gICAqIEdldHMgYW4gb2JqZWN0IGZyb20gdGhlIGJ1Y2tldCBpZiBpdCBleGlzdHMsIHBhcnNpbmcgaXQgYXMgSnNvbi5cbiAgICogQHBhcmFtIGtleSBLZXkgb2YgdGhlIG9iamVjdC5cbiAgICogQHJldHVybnMgdGhlIGNvbnRlbnRzIG9mIHRoZSBvYmplY3QgYXMgSnNvbiBpZiBpdCBleGlzdHMsIG5pbCBvdGhlcndpc2VcbiAgICogQGluZmxpZ2h0XG4gICAqL1xuICB0cnlHZXRKc29uKGtleTogc3RyaW5nKTogUHJvbWlzZTxKc29uIHwgdW5kZWZpbmVkPjtcblxuICAvKipcbiAgICogRGVsZXRlIGFuIGV4aXN0aW5nIG9iamVjdCB1c2luZyBhIGtleSBmcm9tIHRoZSBidWNrZXRcbiAgICogQHBhcmFtIGtleSBLZXkgb2YgdGhlIG9iamVjdC5cbiAgICogQHBhcmFtIG9wdHMgT3B0aW9ucyBhdmFpbGFibGUgZm9yIGRlbGV0ZSBhbiBpdGVtIGZyb20gYSBidWNrZXQuXG4gICAqIEBpbmZsaWdodFxuICAgKi9cbiAgZGVsZXRlKGtleTogc3RyaW5nLCBvcHRzPzogQnVja2V0RGVsZXRlT3B0aW9ucyk6IFByb21pc2U8dm9pZD47XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBhbiBvYmplY3QgZnJvbSB0aGUgYnVja2V0IGlmIGl0IGV4aXN0cy5cbiAgICogQHBhcmFtIGtleSBLZXkgb2YgdGhlIG9iamVjdC5cbiAgICogQHJldHVybnMgdGhlIHJlc3VsdCBvZiB0aGUgZGVsZXRlIG9wZXJhdGlvblxuICAgKiBAaW5mbGlnaHRcbiAgICovXG4gIHRyeURlbGV0ZShrZXk6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj47XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlIGV4aXN0aW5nIG9iamVjdHMga2V5cyBmcm9tIHRoZSBidWNrZXQuXG4gICAqIEBwYXJhbSBwcmVmaXggTGltaXRzIHRoZSByZXNwb25zZSB0byBrZXlzIHRoYXQgYmVnaW4gd2l0aCB0aGUgc3BlY2lmaWVkIHByZWZpeC5cbiAgICogQHJldHVybnMgYSBsaXN0IG9mIGtleXMgb3IgYW4gZW1wdHkgYXJyYXkgaWYgdGhlIGJ1Y2tldCBpcyBlbXB0eS5cbiAgICogQGluZmxpZ2h0XG4gICAqL1xuICBsaXN0KHByZWZpeD86IHN0cmluZyk6IFByb21pc2U8c3RyaW5nW10+O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgdXJsIHRvIHRoZSBnaXZlbiBmaWxlLlxuICAgKiBAVGhyb3dzIGlmIHRoZSBmaWxlIGlzIG5vdCBwdWJsaWMgb3IgaWYgb2JqZWN0IGRvZXMgbm90IGV4aXN0LlxuICAgKiBAaW5mbGlnaHRcbiAgICovXG4gIHB1YmxpY1VybChrZXk6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPjtcblxuICAvKipcbiAgICogUmV0dXJucyBhIHNpZ25lZCB1cmwgdG8gdGhlIGdpdmVuIGZpbGUuXG4gICAqIEBUaHJvd3MgaWYgb2JqZWN0IGRvZXMgbm90IGV4aXN0LlxuICAgKiBAcGFyYW0ga2V5IFRoZSBrZXkgdG8gYWNjZXNzIHRoZSBjbG91ZCBvYmplY3RcbiAgICogQHBhcmFtIG9wdGlvbnMgVGhlIHNpZ25lZFVybE9wdGlvbnMgd2hlcmUgeW91IGNhbiBwcm92aWRlIHRoZSBjb25maWd1cmF0aW9ucyBvZiB0aGUgc2lnbmVkIHVybFxuICAgKiBAcmV0dXJucyBBIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHNpZ25lZCB1cmwgb2YgdGhlIG9iamVjdCB3aGljaCBjYW4gYmUgdXNlZCB0byBkb3dubG9hZCBpbiBhbnkgZG93bnN0cmVhbSBzeXN0ZW1cbiAgICogQGluZmxpZ2h0XG4gICAqL1xuICBzaWduZWRVcmwoa2V5OiBzdHJpbmcsIG9wdGlvbnM/OiBCdWNrZXRTaWduZWRVcmxPcHRpb25zKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG1ldGFkYXRhIG9mIGFuIG9iamVjdCBpbiB0aGUgYnVja2V0LlxuICAgKiBAcGFyYW0ga2V5IEtleSBvZiB0aGUgb2JqZWN0LlxuICAgKiBAVGhyb3dzIGlmIHRoZXJlIGlzIG5vIG9iamVjdCB3aXRoIHRoZSBnaXZlbiBrZXkuXG4gICAqIEBpbmZsaWdodFxuICAgKi9cbiAgbWV0YWRhdGEoa2V5OiBzdHJpbmcpOiBQcm9taXNlPE9iamVjdE1ldGFkYXRhPjtcblxuICAvKipcbiAgICogQ29weSBhbiBvYmplY3QgdG8gYSBuZXcgbG9jYXRpb24gaW4gdGhlIGJ1Y2tldC4gSWYgdGhlIGRlc3RpbmF0aW9uIG9iamVjdFxuICAgKiBhbHJlYWR5IGV4aXN0cywgaXQgd2lsbCBiZSBvdmVyd3JpdHRlbi5cbiAgICogQHBhcmFtIHNyY0tleSBUaGUga2V5IG9mIHRoZSBzb3VyY2Ugb2JqZWN0IHlvdSB3aXNoIHRvIGNvcHkuXG4gICAqIEBwYXJhbSBkc3RLZXkgVGhlIGtleSBvZiB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGFmdGVyIGNvcHlpbmcuXG4gICAqIEB0aHJvd3MgaWYgYHNyY0tleWAgb2JqZWN0IGRvZXNuJ3QgZXhpc3QuXG4gICAqIEBpbmZsaWdodFxuICAgKi9cbiAgY29weShzcmNLZXk6IHN0cmluZywgZHN0S2V5OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBNb3ZlIGFuIG9iamVjdCB0byBhIG5ldyBsb2NhdGlvbiBpbiB0aGUgYnVja2V0LiBJZiB0aGUgZGVzdGluYXRpb24gb2JqZWN0XG4gICAqIGFscmVhZHkgZXhpc3RzLCBpdCB3aWxsIGJlIG92ZXJ3cml0dGVuLiBSZXR1cm5zIG9uY2UgdGhlIHJlbmFtaW5nIGlzIGZpbmlzaGVkLlxuICAgKiBAcGFyYW0gc3JjS2V5IFRoZSBrZXkgb2YgdGhlIHNvdXJjZSBvYmplY3QgeW91IHdpc2ggdG8gcmVuYW1lLlxuICAgKiBAcGFyYW0gZHN0S2V5IFRoZSBrZXkgb2YgdGhlIGRlc3RpbmF0aW9uIG9iamVjdCBhZnRlciByZW5hbWluZy5cbiAgICogQHRocm93cyBpZiBgc3JjS2V5YCBvYmplY3QgZG9lc24ndCBleGlzdCBvciBpZiBpdCBtYXRjaGVzIGBkc3RLZXlgLlxuICAgKiBAaW5mbGlnaHRcbiAgICovXG4gIHJlbmFtZShzcmNLZXk6IHN0cmluZywgZHN0S2V5OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+O1xufVxuXG4vKipcbiAqIGBvbkNyZWF0ZWAgZXZlbnQgb3B0aW9uc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEJ1Y2tldE9uQ3JlYXRlT3B0aW9ucyB7fVxuXG4vKipcbiAqIGBvbkRlbGV0ZWAgZXZlbnQgb3B0aW9uc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEJ1Y2tldE9uRGVsZXRlT3B0aW9ucyB7fVxuXG4vKipcbiAqIGBvblVwZGF0ZWAgZXZlbnQgb3B0aW9uc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEJ1Y2tldE9uVXBkYXRlT3B0aW9ucyB7fVxuXG4vKipcbiAqIGBvbkV2ZW50YCBvcHRpb25zXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQnVja2V0T25FdmVudE9wdGlvbnMge31cblxuLyoqXG4gKiBBIHJlc291cmNlIHdpdGggYW4gaW5mbGlnaHQgXCJoYW5kbGVcIiBtZXRob2QgdGhhdCBjYW4gYmUgcGFzc2VkIHRvXG4gKiB0aGUgYnVja2V0IGV2ZW50cy5cbiAqXG4gKiBAaW5mbGlnaHQgYEB3aW5nbGFuZy9zZGsuY2xvdWQuSUJ1Y2tldEV2ZW50SGFuZGxlckNsaWVudGBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJQnVja2V0RXZlbnRIYW5kbGVyIGV4dGVuZHMgSUluZmxpZ2h0IHtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBbSU5GTElHSFRfU1lNQk9MXT86IElCdWNrZXRFdmVudEhhbmRsZXJDbGllbnRbXCJoYW5kbGVcIl07XG59XG5cbi8qKlxuICogQSByZXNvdXJjZSB3aXRoIGFuIGluZmxpZ2h0IFwiaGFuZGxlXCIgbWV0aG9kIHRoYXQgY2FuIGJlIHBhc3NlZCB0b1xuICogdGhlIGJ1Y2tldCBldmVudHMuXG4gKlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElCdWNrZXRFdmVudEhhbmRsZXJDbGllbnQge1xuICAvKipcbiAgICogRnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuIGFuIGV2ZW50IG5vdGlmaWNhdGlvbiBpcyBmaXJlZC5cbiAgICogQGluZmxpZ2h0XG4gICAqL1xuICBoYW5kbGUoa2V5OiBzdHJpbmcsIHR5cGU6IEJ1Y2tldEV2ZW50VHlwZSk6IFByb21pc2U8dm9pZD47XG59XG5cbi8qKlxuICogT25fZXZlbnQgbm90aWZpY2F0aW9uIHBheWxvYWQtIHdpbGwgYmUgaW4gdXNlIGFmdGVyIHNvbHZpbmcgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS93aW5nbGFuZy93aW5nL2lzc3Vlcy8xOTI3XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQnVja2V0RXZlbnQge1xuICAvKipcbiAgICogVGhlIGJ1Y2tldCBrZXkgdGhhdCB0cmlnZ2VyZWQgdGhlIGV2ZW50XG4gICAqL1xuICByZWFkb25seSBrZXk6IHN0cmluZztcbiAgLyoqXG4gICAqIFR5cGUgb2YgZXZlbnRcbiAgICovXG4gIHJlYWRvbmx5IHR5cGU6IEJ1Y2tldEV2ZW50VHlwZTtcbn1cblxuLyoqXG4gKiBCdWNrZXQgZXZlbnRzIHRvIHN1YnNjcmliZSB0b1xuICovXG5leHBvcnQgZW51bSBCdWNrZXRFdmVudFR5cGUge1xuICAvKipcbiAgICogQ3JlYXRlXG4gICAqL1xuICBDUkVBVEUgPSBcIk9uQ3JlYXRlXCIsXG4gIC8qKlxuICAgKiBEZWxldGVcbiAgICovXG4gIERFTEVURSA9IFwiT25EZWxldGVcIixcbiAgLyoqXG4gICAqIFVwZGF0ZVxuICAgKi9cbiAgVVBEQVRFID0gXCJPblVwZGF0ZVwiLFxufVxuXG4vKipcbiAqIExpc3Qgb2YgaW5mbGlnaHQgb3BlcmF0aW9ucyBhdmFpbGFibGUgZm9yIGBCdWNrZXRgLlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBlbnVtIEJ1Y2tldEluZmxpZ2h0TWV0aG9kcyB7XG4gIC8qKiBgQnVja2V0LnB1dGAgKi9cbiAgUFVUID0gXCJwdXRcIixcbiAgLyoqIGBCdWNrZXQuZ2V0YCAqL1xuICBHRVQgPSBcImdldFwiLFxuICAvKiogYEJ1Y2tldC5saXN0YCAqL1xuICBMSVNUID0gXCJsaXN0XCIsXG4gIC8qKiBgQnVja2V0LmRlbGV0ZWAgKi9cbiAgREVMRVRFID0gXCJkZWxldGVcIixcbiAgLyoqIGBCdWNrZXQucHV0SnNvbmAgKi9cbiAgUFVUX0pTT04gPSBcInB1dEpzb25cIixcbiAgLyoqIGBCdWNrZXQuZ2V0SnNvbmAgKi9cbiAgR0VUX0pTT04gPSBcImdldEpzb25cIixcbiAgLyoqIGBCdWNrZXQucHVibGljVXJsYCAqL1xuICBQVUJMSUNfVVJMID0gXCJwdWJsaWNVcmxcIixcbiAgLyoqIGBCdWNrZXQuZXhpc3RzYCAqL1xuICBFWElTVFMgPSBcImV4aXN0c1wiLFxuICAvKiogYEJ1Y2tldC50cnlHZXRgICovXG4gIFRSWV9HRVQgPSBcInRyeUdldFwiLFxuICAvKiogYEJ1Y2tldC50cnlHZXRKc29uYCAqL1xuICBUUllfR0VUX0pTT04gPSBcInRyeUdldEpzb25cIixcbiAgLyoqIGBCdWNrZXQudHJ5RGVsZXRlYCAqL1xuICBUUllfREVMRVRFID0gXCJ0cnlEZWxldGVcIixcbiAgLyoqIGBCdWNrZXQuc2lnbmVkVXJsYCAqL1xuICBTSUdORURfVVJMID0gXCJzaWduZWRVcmxcIixcbiAgLyoqIGBCdWNrZXQubWV0YWRhdGFgICovXG4gIE1FVEFEQVRBID0gXCJtZXRhZGF0YVwiLFxuICAvKiogYEJ1Y2tldC5jb3B5YCAqL1xuICBDT1BZID0gXCJjb3B5XCIsXG4gIC8qKiBgQnVja2V0LnJlbmFtZWAgKi9cbiAgUkVOQU1FID0gXCJyZW5hbWVcIixcbn1cbiJdfQ==