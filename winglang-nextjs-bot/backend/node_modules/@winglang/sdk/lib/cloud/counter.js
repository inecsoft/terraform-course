"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CounterInflightMethods = exports.Counter = exports.COUNTER_FQN = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const constants_1 = require("../constants");
const types_1 = require("../core/types");
const std_1 = require("../std");
/**
 * Global identifier for `Counter`.
 */
exports.COUNTER_FQN = (0, constants_1.fqnForType)("cloud.Counter");
/**
 * A distributed atomic counter.
 * @inflight `@winglang/sdk.cloud.ICounterClient`
 * @abstract
 */
class Counter extends std_1.Resource {
    constructor(scope, id, props = {}) {
        if (new.target === Counter) {
            return std_1.Resource._newFromFactory(exports.COUNTER_FQN, scope, id, props);
        }
        super(scope, id);
        std_1.Node.of(this).title = "Counter";
        std_1.Node.of(this).description = "A distributed atomic counter";
        this.initial = props.initial ?? 0;
    }
}
exports.Counter = Counter;
_a = JSII_RTTI_SYMBOL_1;
Counter[_a] = { fqn: "@winglang/sdk.cloud.Counter", version: "0.0.0" };
/**
 * List of inflight operations available for `Counter`.
 * @internal
 */
var CounterInflightMethods;
(function (CounterInflightMethods) {
    /** `Counter.inc` */
    CounterInflightMethods["INC"] = "inc";
    /** `Counter.dec` */
    CounterInflightMethods["DEC"] = "dec";
    /** `Counter.peek` */
    CounterInflightMethods["PEEK"] = "peek";
    /** `Counter.set` */
    CounterInflightMethods["SET"] = "set";
})(CounterInflightMethods || (exports.CounterInflightMethods = CounterInflightMethods = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbG91ZC9jb3VudGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsNENBQTBDO0FBQzFDLHlDQUFnRDtBQUNoRCxnQ0FBd0M7QUFFeEM7O0dBRUc7QUFDVSxRQUFBLFdBQVcsR0FBRyxJQUFBLHNCQUFVLEVBQUMsZUFBZSxDQUFDLENBQUM7QUFhdkQ7Ozs7R0FJRztBQUNILE1BQWEsT0FBUSxTQUFRLGNBQVE7SUFTbkMsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxRQUFzQixFQUFFO1FBQ2hFLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxPQUFPLEVBQUUsQ0FBQztZQUMzQixPQUFPLGNBQVEsQ0FBQyxlQUFlLENBQUMsbUJBQVcsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2pFLENBQUM7UUFFRCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLFVBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQztRQUNoQyxVQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsR0FBRyw4QkFBOEIsQ0FBQztRQUUzRCxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDO0lBQ3BDLENBQUM7O0FBcEJILDBCQXFCQzs7O0FBMkNEOzs7R0FHRztBQUNILElBQVksc0JBU1g7QUFURCxXQUFZLHNCQUFzQjtJQUNoQyxvQkFBb0I7SUFDcEIscUNBQVcsQ0FBQTtJQUNYLG9CQUFvQjtJQUNwQixxQ0FBVyxDQUFBO0lBQ1gscUJBQXFCO0lBQ3JCLHVDQUFhLENBQUE7SUFDYixvQkFBb0I7SUFDcEIscUNBQVcsQ0FBQTtBQUNiLENBQUMsRUFUVyxzQkFBc0Isc0NBQXRCLHNCQUFzQixRQVNqQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgeyBmcW5Gb3JUeXBlIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgSU5GTElHSFRfU1lNQk9MIH0gZnJvbSBcIi4uL2NvcmUvdHlwZXNcIjtcbmltcG9ydCB7IE5vZGUsIFJlc291cmNlIH0gZnJvbSBcIi4uL3N0ZFwiO1xuXG4vKipcbiAqIEdsb2JhbCBpZGVudGlmaWVyIGZvciBgQ291bnRlcmAuXG4gKi9cbmV4cG9ydCBjb25zdCBDT1VOVEVSX0ZRTiA9IGZxbkZvclR5cGUoXCJjbG91ZC5Db3VudGVyXCIpO1xuXG4vKipcbiAqIE9wdGlvbnMgZm9yIGBDb3VudGVyYC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb3VudGVyUHJvcHMge1xuICAvKipcbiAgICogVGhlIGluaXRpYWwgdmFsdWUgb2YgdGhlIGNvdW50ZXIuXG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIHJlYWRvbmx5IGluaXRpYWw/OiBudW1iZXI7XG59XG5cbi8qKlxuICogQSBkaXN0cmlidXRlZCBhdG9taWMgY291bnRlci5cbiAqIEBpbmZsaWdodCBgQHdpbmdsYW5nL3Nkay5jbG91ZC5JQ291bnRlckNsaWVudGBcbiAqIEBhYnN0cmFjdFxuICovXG5leHBvcnQgY2xhc3MgQ291bnRlciBleHRlbmRzIFJlc291cmNlIHtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwdWJsaWMgW0lORkxJR0hUX1NZTUJPTF0/OiBJQ291bnRlckNsaWVudDtcblxuICAvKipcbiAgICogVGhlIGluaXRpYWwgdmFsdWUgb2YgdGhlIGNvdW50ZXIuXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgaW5pdGlhbCE6IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogQ291bnRlclByb3BzID0ge30pIHtcbiAgICBpZiAobmV3LnRhcmdldCA9PT0gQ291bnRlcikge1xuICAgICAgcmV0dXJuIFJlc291cmNlLl9uZXdGcm9tRmFjdG9yeShDT1VOVEVSX0ZRTiwgc2NvcGUsIGlkLCBwcm9wcyk7XG4gICAgfVxuXG4gICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgIE5vZGUub2YodGhpcykudGl0bGUgPSBcIkNvdW50ZXJcIjtcbiAgICBOb2RlLm9mKHRoaXMpLmRlc2NyaXB0aW9uID0gXCJBIGRpc3RyaWJ1dGVkIGF0b21pYyBjb3VudGVyXCI7XG5cbiAgICB0aGlzLmluaXRpYWwgPSBwcm9wcy5pbml0aWFsID8/IDA7XG4gIH1cbn1cblxuLyoqXG4gKiBJbmZsaWdodCBpbnRlcmZhY2UgZm9yIGBDb3VudGVyYC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJQ291bnRlckNsaWVudCB7XG4gIC8qKlxuICAgKiBJbmNyZW1lbnRzIHRoZSBjb3VudGVyIGF0b21pY2FsbHkgYnkgYSBjZXJ0YWluIGFtb3VudCBhbmQgcmV0dXJucyB0aGUgcHJldmlvdXMgdmFsdWUuXG4gICAqIEBwYXJhbSBhbW91bnQgYW1vdW50IHRvIGluY3JlbWVudCAoZGVmYXVsdCBpcyAxKS5cbiAgICogQHBhcmFtIGtleSBzcGVjaWZ5IHRoZSBrZXkgdG8gYmUgaW5jcmVtZW50ZWQuXG4gICAqIEByZXR1cm5zIHRoZSBwcmV2aW91cyB2YWx1ZSBvZiB0aGUgY291bnRlci5cbiAgICogQGluZmxpZ2h0XG4gICAqL1xuICBpbmMoYW1vdW50PzogbnVtYmVyLCBrZXk/OiBzdHJpbmcpOiBQcm9taXNlPG51bWJlcj47XG5cbiAgLyoqXG4gICAqIERlY3JlbWVudCB0aGUgY291bnRlciwgcmV0dXJuaW5nIHRoZSBwcmV2aW91cyB2YWx1ZS5cbiAgICogQHBhcmFtIGFtb3VudCBhbW91bnQgdG8gZGVjcmVtZW50IChkZWZhdWx0IGlzIDEpLlxuICAgKiBAcGFyYW0ga2V5IHNwZWNpZnkgdGhlIGtleSB0byBiZSBkZWNyZW1lbnRlZC5cbiAgICogQHJldHVybnMgdGhlIHByZXZpb3VzIHZhbHVlIG9mIHRoZSBjb3VudGVyLlxuICAgKiBAaW5mbGlnaHRcbiAgICovXG4gIGRlYyhhbW91bnQ/OiBudW1iZXIsIGtleT86IHN0cmluZyk6IFByb21pc2U8bnVtYmVyPjtcblxuICAvKipcbiAgICogR2V0IHRoZSBjdXJyZW50IHZhbHVlIG9mIHRoZSBjb3VudGVyLlxuICAgKiBVc2luZyB0aGlzIEFQSSBtYXkgaW50cm9kdWNlIHJhY2UgY29uZGl0aW9ucyBzaW5jZSB0aGUgdmFsdWUgY2FuIGNoYW5nZSBiZXR3ZWVuXG4gICAqIHRoZSB0aW1lIGl0IGlzIHJlYWQgYW5kIHRoZSB0aW1lIGl0IGlzIHVzZWQgaW4geW91ciBjb2RlLlxuICAgKiBAcGFyYW0ga2V5IHNwZWNpZnkgdGhlIGtleSB0byBiZSByZXRyaWV2ZWQuXG4gICAqIEByZXR1cm5zIGN1cnJlbnQgdmFsdWVcbiAgICogQGluZmxpZ2h0XG4gICAqL1xuICBwZWVrKGtleT86IHN0cmluZyk6IFByb21pc2U8bnVtYmVyPjtcblxuICAvKipcbiAgICogU2V0IGEgY291bnRlciB0byBhIGdpdmVuIHZhbHVlLlxuICAgKiBAcGFyYW0gdmFsdWUgbmV3IHZhbHVlXG4gICAqIEBwYXJhbSBrZXkgc3BlY2lmeSB0aGUga2V5IHRvIGJlIHNldC5cbiAgICogQGluZmxpZ2h0XG4gICAqL1xuICBzZXQodmFsdWU6IG51bWJlciwga2V5Pzogc3RyaW5nKTogUHJvbWlzZTx2b2lkPjtcbn1cblxuLyoqXG4gKiBMaXN0IG9mIGluZmxpZ2h0IG9wZXJhdGlvbnMgYXZhaWxhYmxlIGZvciBgQ291bnRlcmAuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGVudW0gQ291bnRlckluZmxpZ2h0TWV0aG9kcyB7XG4gIC8qKiBgQ291bnRlci5pbmNgICovXG4gIElOQyA9IFwiaW5jXCIsXG4gIC8qKiBgQ291bnRlci5kZWNgICovXG4gIERFQyA9IFwiZGVjXCIsXG4gIC8qKiBgQ291bnRlci5wZWVrYCAqL1xuICBQRUVLID0gXCJwZWVrXCIsXG4gIC8qKiBgQ291bnRlci5zZXRgICovXG4gIFNFVCA9IFwic2V0XCIsXG59XG4iXX0=