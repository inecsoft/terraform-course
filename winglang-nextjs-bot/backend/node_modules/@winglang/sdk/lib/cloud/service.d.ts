import { Construct } from "constructs";
import { FunctionProps } from "./function";
import { INFLIGHT_SYMBOL } from "../core/types";
import { IInflight, IInflightHost, Resource } from "../std";
/**
 * Global identifier for `Service`.
 */
export declare const SERVICE_FQN: string;
/**
 * Options for `Service`.
 */
export interface ServiceProps {
    /**
     * Environment variables to pass to the function.
     * @default - No environment variables.
     */
    readonly env?: {
        [key: string]: string;
    };
    /**
     * Whether the service should start automatically. If `false`, the service will need to be started
     * manually by calling the inflight `start()` method.
     *
     * @default true
     */
    readonly autoStart?: boolean;
}
/**
 * A long-running service.
 *
 * @inflight `@winglang/sdk.cloud.IServiceClient`
 * @abstract
 */
export declare class Service extends Resource implements IInflightHost {
    /** @internal */
    [INFLIGHT_SYMBOL]?: IServiceClient;
    /**
     * The path where the entrypoint of the service source code will be eventually written to.
     */
    protected readonly entrypoint: string;
    /**
     * Reference to the service's handler - an inflight closure.
     */
    protected readonly handler: IServiceHandler;
    private readonly _env;
    constructor(scope: Construct, id: string, handler: IServiceHandler, props?: ServiceProps);
    /** @internal */
    _preSynthesize(): void;
    /**
     * Add an environment variable to the function.
     */
    addEnvironment(name: string, value: string): void;
    /**
     * Returns the set of environment variables for this function.
     */
    get env(): Record<string, string>;
}
/**
 * Options for Service.onStart.
 */
export interface ServiceOnStartOptions extends FunctionProps {
}
/**
 * Inflight interface for `Service`.
 */
export interface IServiceClient {
    /**
     * Start the service.
     * @inflight
     */
    start(): Promise<void>;
    /**
     * Stop the service
     * @inflight
     */
    stop(): Promise<void>;
    /**
     * Indicates whether the service is started.
     * @inflight
     */
    started(): Promise<boolean>;
}
/**
 * Executed when a `cloud.Service` is started.
 *
 * @inflight `@winglang/sdk.cloud.IServiceHandlerClient`
 */
export interface IServiceHandler extends IInflight {
    /** @internal */
    [INFLIGHT_SYMBOL]?: IServiceHandlerClient["handle"];
}
/**
 * Inflight client for `IServiceHandler`.
 */
export interface IServiceHandlerClient {
    /**
     * Handler to run when the service starts. This is where you implement the initialization logic of
     * the service, start any activities asynchronously.
     *
     * DO NOT BLOCK! This handler should return as quickly as possible. If you need to run a long
     * running process, start it asynchronously.
     *
     * @inflight
     * @returns an optional function that can be used to cleanup any resources when the service is
     * stopped.
     *
     * @example
     *
     * bring cloud;
     *
     * new cloud.Service(inflight () => {
     *   log("starting service...");
     *   return () => {
     *     log("stoping service...");
     *   };
     * });
     */
    handle(): Promise<IServiceStopHandler | undefined>;
}
/**
 * Executed when a `cloud.Service` is stopped.
 *
 * @inflight `@winglang/sdk.cloud.IServiceStopHandlerClient`
 */
export interface IServiceStopHandler extends IInflight {
    /** @internal */
    [INFLIGHT_SYMBOL]?: IServiceStopHandlerClient["handle"];
}
/**
 * Inflight client for `IServiceStopHandler`.
 */
export interface IServiceStopHandlerClient {
    /**
     * Handler to run when the service stops. This is where you implement the cleanup logic of
     * the service, stop any activities asychronously.
     *
     * @inflight
     */
    handle(): Promise<void>;
}
/**
 * List of inflight operations for `Service`.
 * @internal
 */
export declare enum ServiceInflightMethods {
    START = "start",
    STOP = "stop",
    STARTED = "started"
}
