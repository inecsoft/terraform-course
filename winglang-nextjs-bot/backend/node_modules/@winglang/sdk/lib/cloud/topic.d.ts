import { Construct } from "constructs";
import { Function, FunctionProps } from "./function";
import { Queue, QueueProps } from "./queue";
import { INFLIGHT_SYMBOL } from "../core/types";
import { Resource, IInflight } from "../std";
export declare const TOPIC_FQN: string;
/**
 * Options for `Topic`.
 */
export interface TopicProps {
}
/**
 * A topic.
 *
 * @inflight `@winglang/sdk.cloud.ITopicClient`
 * @abstract
 */
export declare class Topic extends Resource {
    /** @internal */
    [INFLIGHT_SYMBOL]?: ITopicClient;
    constructor(scope: Construct, id: string, props?: TopicProps);
    /**
     * Run an inflight whenever an message is published to the topic.
     * @abstract
     */
    onMessage(inflight: ITopicOnMessageHandler, props?: TopicOnMessageOptions): Function;
    /**
     * Subscribing queue to the topic
     * @abstract
     */
    subscribeQueue(queue: Queue, props?: TopicSubscribeQueueOptions): void;
}
/**
 * Options for `Topic.onMessage`.
 */
export interface TopicOnMessageOptions extends FunctionProps {
}
/**
 * Options for `Topic.subscribeQueue`.
 */
export interface TopicSubscribeQueueOptions extends QueueProps {
}
/**
 * Inflight interface for `Topic`.
 */
export interface ITopicClient {
    /**
     * Publish messages to topic, if multiple messages are passed then they
     * will be published as a batch if supported by the target platform
     * @param messages Payload to publish to Topic
     * @inflight
     */
    publish(...messages: string[]): Promise<void>;
}
/**
 * A resource with an inflight "handle" method that can be passed to
 * `Topic.on_message`.
 *
 * @inflight `@winglang/sdk.cloud.ITopicOnMessageHandlerClient`
 */
export interface ITopicOnMessageHandler extends IInflight {
    /** @internal */
    [INFLIGHT_SYMBOL]?: ITopicOnMessageHandlerClient["handle"];
}
/**
 * Inflight client for `ITopicOnMessageHandler`.
 */
export interface ITopicOnMessageHandlerClient {
    /**
     * Function that will be called when a message is received from the topic.
     * @inflight
     */
    handle(event: string): Promise<void>;
}
/**
 * List of inflight operations available for `Topic`.
 * @internal
 */
export declare enum TopicInflightMethods {
    /** `Topic.publish` */
    PUBLISH = "publish"
}
