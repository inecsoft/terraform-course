"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceInflightMethods = exports.Service = exports.SERVICE_FQN = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const fs_1 = require("fs");
const path_1 = require("path");
const constants_1 = require("../constants");
const core_1 = require("../core");
const types_1 = require("../core/types");
const resource_names_1 = require("../shared/resource-names");
const std_1 = require("../std");
/**
 * Global identifier for `Service`.
 */
exports.SERVICE_FQN = (0, constants_1.fqnForType)("cloud.Service");
/**
 * A long-running service.
 *
 * @inflight `@winglang/sdk.cloud.IServiceClient`
 * @abstract
 */
class Service extends std_1.Resource {
    constructor(scope, id, handler, props = {}) {
        if (new.target === Service) {
            return std_1.Resource._newFromFactory(exports.SERVICE_FQN, scope, id, handler, props);
        }
        super(scope, id);
        this._env = {};
        for (const [key, value] of Object.entries(props.env ?? {})) {
            this.addEnvironment(key, value);
        }
        std_1.Node.of(this).title = "Service";
        std_1.Node.of(this).description = "A cloud service";
        const assetName = resource_names_1.ResourceNames.generateName(this, {
            disallowedRegex: /[><:"/\\|?*\s]/g, // avoid characters that may cause path issues
            case: resource_names_1.CaseConventions.LOWERCASE,
            sep: "_",
        });
        const workdir = core_1.App.of(this).workdir;
        (0, fs_1.mkdirSync)(workdir, { recursive: true });
        const entrypoint = (0, path_1.join)(workdir, `${assetName}.cjs`);
        this.entrypoint = entrypoint;
        if (process.env.WING_TARGET) {
            this.addEnvironment("WING_TARGET", process.env.WING_TARGET);
        }
        this.handler = handler;
    }
    /** @internal */
    _preSynthesize() {
        super._preSynthesize();
        const inflightClient = this.handler._toInflight();
        const code = `\
      "use strict";
      let $stop;
      exports.start = async function() {
        if ($stop) {
          throw Error('service already started');
        }
        const client = await ${inflightClient};
        const noop = () => {};
        $stop = (await client.handle()) ?? noop;
      };

      exports.stop = async function() {
        if (!$stop) {
          throw Error('service not started');
        }
        await $stop();
        $stop = undefined;
      };
      `;
        (0, fs_1.writeFileSync)(this.entrypoint, code);
        // indicates that we are calling the inflight constructor and the
        // inflight "handle" method on the handler resource.
        core_1.Lifting.lift(this.handler, this, ["handle"]);
    }
    /**
     * Add an environment variable to the function.
     */
    addEnvironment(name, value) {
        if (this._env[name] !== undefined && this._env[name] !== value) {
            throw new Error(`Environment variable "${name}" already set with a different value.`);
        }
        this._env[name] = value;
    }
    /**
     * Returns the set of environment variables for this function.
     */
    get env() {
        return { ...this._env };
    }
}
exports.Service = Service;
_a = JSII_RTTI_SYMBOL_1;
Service[_a] = { fqn: "@winglang/sdk.cloud.Service", version: "0.0.0" };
/**
 * List of inflight operations for `Service`.
 * @internal
 */
var ServiceInflightMethods;
(function (ServiceInflightMethods) {
    ServiceInflightMethods["START"] = "start";
    ServiceInflightMethods["STOP"] = "stop";
    ServiceInflightMethods["STARTED"] = "started";
})(ServiceInflightMethods || (exports.ServiceInflightMethods = ServiceInflightMethods = {}));
//# sourceMappingURL=data:application/json;base64,