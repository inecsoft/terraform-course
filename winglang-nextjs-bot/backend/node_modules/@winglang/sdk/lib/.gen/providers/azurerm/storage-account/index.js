"use strict";
// https://registry.terraform.io/providers/hashicorp/azurerm/3.96.0/docs/resources/storage_account
// generated from terraform resource schema
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.storageAccountQueuePropertiesLoggingToHclTerraform = exports.storageAccountQueuePropertiesLoggingToTerraform = exports.StorageAccountQueuePropertiesHourMetricsOutputReference = exports.storageAccountQueuePropertiesHourMetricsToHclTerraform = exports.storageAccountQueuePropertiesHourMetricsToTerraform = exports.StorageAccountQueuePropertiesCorsRuleList = exports.StorageAccountQueuePropertiesCorsRuleOutputReference = exports.storageAccountQueuePropertiesCorsRuleToHclTerraform = exports.storageAccountQueuePropertiesCorsRuleToTerraform = exports.StorageAccountNetworkRulesOutputReference = exports.storageAccountNetworkRulesToHclTerraform = exports.storageAccountNetworkRulesToTerraform = exports.StorageAccountNetworkRulesPrivateLinkAccessList = exports.StorageAccountNetworkRulesPrivateLinkAccessOutputReference = exports.storageAccountNetworkRulesPrivateLinkAccessToHclTerraform = exports.storageAccountNetworkRulesPrivateLinkAccessToTerraform = exports.StorageAccountImmutabilityPolicyOutputReference = exports.storageAccountImmutabilityPolicyToHclTerraform = exports.storageAccountImmutabilityPolicyToTerraform = exports.StorageAccountIdentityOutputReference = exports.storageAccountIdentityToHclTerraform = exports.storageAccountIdentityToTerraform = exports.StorageAccountCustomerManagedKeyOutputReference = exports.storageAccountCustomerManagedKeyToHclTerraform = exports.storageAccountCustomerManagedKeyToTerraform = exports.StorageAccountCustomDomainOutputReference = exports.storageAccountCustomDomainToHclTerraform = exports.storageAccountCustomDomainToTerraform = exports.StorageAccountBlobPropertiesOutputReference = exports.storageAccountBlobPropertiesToHclTerraform = exports.storageAccountBlobPropertiesToTerraform = exports.StorageAccountBlobPropertiesRestorePolicyOutputReference = exports.storageAccountBlobPropertiesRestorePolicyToHclTerraform = exports.storageAccountBlobPropertiesRestorePolicyToTerraform = exports.StorageAccountBlobPropertiesDeleteRetentionPolicyOutputReference = exports.storageAccountBlobPropertiesDeleteRetentionPolicyToHclTerraform = exports.storageAccountBlobPropertiesDeleteRetentionPolicyToTerraform = exports.StorageAccountBlobPropertiesCorsRuleList = exports.StorageAccountBlobPropertiesCorsRuleOutputReference = exports.storageAccountBlobPropertiesCorsRuleToHclTerraform = exports.storageAccountBlobPropertiesCorsRuleToTerraform = exports.StorageAccountBlobPropertiesContainerDeleteRetentionPolicyOutputReference = exports.storageAccountBlobPropertiesContainerDeleteRetentionPolicyToHclTerraform = exports.storageAccountBlobPropertiesContainerDeleteRetentionPolicyToTerraform = exports.StorageAccountAzureFilesAuthenticationOutputReference = exports.storageAccountAzureFilesAuthenticationToHclTerraform = exports.storageAccountAzureFilesAuthenticationToTerraform = exports.StorageAccountAzureFilesAuthenticationActiveDirectoryOutputReference = exports.storageAccountAzureFilesAuthenticationActiveDirectoryToHclTerraform = exports.storageAccountAzureFilesAuthenticationActiveDirectoryToTerraform = void 0;
exports.StorageAccount = exports.StorageAccountTimeoutsOutputReference = exports.storageAccountTimeoutsToHclTerraform = exports.storageAccountTimeoutsToTerraform = exports.StorageAccountStaticWebsiteOutputReference = exports.storageAccountStaticWebsiteToHclTerraform = exports.storageAccountStaticWebsiteToTerraform = exports.StorageAccountSharePropertiesOutputReference = exports.storageAccountSharePropertiesToHclTerraform = exports.storageAccountSharePropertiesToTerraform = exports.StorageAccountSharePropertiesSmbOutputReference = exports.storageAccountSharePropertiesSmbToHclTerraform = exports.storageAccountSharePropertiesSmbToTerraform = exports.StorageAccountSharePropertiesRetentionPolicyOutputReference = exports.storageAccountSharePropertiesRetentionPolicyToHclTerraform = exports.storageAccountSharePropertiesRetentionPolicyToTerraform = exports.StorageAccountSharePropertiesCorsRuleList = exports.StorageAccountSharePropertiesCorsRuleOutputReference = exports.storageAccountSharePropertiesCorsRuleToHclTerraform = exports.storageAccountSharePropertiesCorsRuleToTerraform = exports.StorageAccountSasPolicyOutputReference = exports.storageAccountSasPolicyToHclTerraform = exports.storageAccountSasPolicyToTerraform = exports.StorageAccountRoutingOutputReference = exports.storageAccountRoutingToHclTerraform = exports.storageAccountRoutingToTerraform = exports.StorageAccountQueuePropertiesOutputReference = exports.storageAccountQueuePropertiesToHclTerraform = exports.storageAccountQueuePropertiesToTerraform = exports.StorageAccountQueuePropertiesMinuteMetricsOutputReference = exports.storageAccountQueuePropertiesMinuteMetricsToHclTerraform = exports.storageAccountQueuePropertiesMinuteMetricsToTerraform = exports.StorageAccountQueuePropertiesLoggingOutputReference = void 0;
const cdktf = __importStar(require("cdktf"));
function storageAccountAzureFilesAuthenticationActiveDirectoryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        domain_guid: cdktf.stringToTerraform(struct.domainGuid),
        domain_name: cdktf.stringToTerraform(struct.domainName),
        domain_sid: cdktf.stringToTerraform(struct.domainSid),
        forest_name: cdktf.stringToTerraform(struct.forestName),
        netbios_domain_name: cdktf.stringToTerraform(struct.netbiosDomainName),
        storage_sid: cdktf.stringToTerraform(struct.storageSid),
    };
}
exports.storageAccountAzureFilesAuthenticationActiveDirectoryToTerraform = storageAccountAzureFilesAuthenticationActiveDirectoryToTerraform;
function storageAccountAzureFilesAuthenticationActiveDirectoryToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        domain_guid: {
            value: cdktf.stringToHclTerraform(struct.domainGuid),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        domain_name: {
            value: cdktf.stringToHclTerraform(struct.domainName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        domain_sid: {
            value: cdktf.stringToHclTerraform(struct.domainSid),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        forest_name: {
            value: cdktf.stringToHclTerraform(struct.forestName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        netbios_domain_name: {
            value: cdktf.stringToHclTerraform(struct.netbiosDomainName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        storage_sid: {
            value: cdktf.stringToHclTerraform(struct.storageSid),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.storageAccountAzureFilesAuthenticationActiveDirectoryToHclTerraform = storageAccountAzureFilesAuthenticationActiveDirectoryToHclTerraform;
class StorageAccountAzureFilesAuthenticationActiveDirectoryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._domainGuid !== undefined) {
            hasAnyValues = true;
            internalValueResult.domainGuid = this._domainGuid;
        }
        if (this._domainName !== undefined) {
            hasAnyValues = true;
            internalValueResult.domainName = this._domainName;
        }
        if (this._domainSid !== undefined) {
            hasAnyValues = true;
            internalValueResult.domainSid = this._domainSid;
        }
        if (this._forestName !== undefined) {
            hasAnyValues = true;
            internalValueResult.forestName = this._forestName;
        }
        if (this._netbiosDomainName !== undefined) {
            hasAnyValues = true;
            internalValueResult.netbiosDomainName = this._netbiosDomainName;
        }
        if (this._storageSid !== undefined) {
            hasAnyValues = true;
            internalValueResult.storageSid = this._storageSid;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._domainGuid = undefined;
            this._domainName = undefined;
            this._domainSid = undefined;
            this._forestName = undefined;
            this._netbiosDomainName = undefined;
            this._storageSid = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._domainGuid = value.domainGuid;
            this._domainName = value.domainName;
            this._domainSid = value.domainSid;
            this._forestName = value.forestName;
            this._netbiosDomainName = value.netbiosDomainName;
            this._storageSid = value.storageSid;
        }
    }
    get domainGuid() {
        return this.getStringAttribute('domain_guid');
    }
    set domainGuid(value) {
        this._domainGuid = value;
    }
    // Temporarily expose input value. Use with caution.
    get domainGuidInput() {
        return this._domainGuid;
    }
    get domainName() {
        return this.getStringAttribute('domain_name');
    }
    set domainName(value) {
        this._domainName = value;
    }
    // Temporarily expose input value. Use with caution.
    get domainNameInput() {
        return this._domainName;
    }
    get domainSid() {
        return this.getStringAttribute('domain_sid');
    }
    set domainSid(value) {
        this._domainSid = value;
    }
    resetDomainSid() {
        this._domainSid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get domainSidInput() {
        return this._domainSid;
    }
    get forestName() {
        return this.getStringAttribute('forest_name');
    }
    set forestName(value) {
        this._forestName = value;
    }
    resetForestName() {
        this._forestName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get forestNameInput() {
        return this._forestName;
    }
    get netbiosDomainName() {
        return this.getStringAttribute('netbios_domain_name');
    }
    set netbiosDomainName(value) {
        this._netbiosDomainName = value;
    }
    resetNetbiosDomainName() {
        this._netbiosDomainName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get netbiosDomainNameInput() {
        return this._netbiosDomainName;
    }
    get storageSid() {
        return this.getStringAttribute('storage_sid');
    }
    set storageSid(value) {
        this._storageSid = value;
    }
    resetStorageSid() {
        this._storageSid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storageSidInput() {
        return this._storageSid;
    }
}
exports.StorageAccountAzureFilesAuthenticationActiveDirectoryOutputReference = StorageAccountAzureFilesAuthenticationActiveDirectoryOutputReference;
function storageAccountAzureFilesAuthenticationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        directory_type: cdktf.stringToTerraform(struct.directoryType),
        active_directory: storageAccountAzureFilesAuthenticationActiveDirectoryToTerraform(struct.activeDirectory),
    };
}
exports.storageAccountAzureFilesAuthenticationToTerraform = storageAccountAzureFilesAuthenticationToTerraform;
function storageAccountAzureFilesAuthenticationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        directory_type: {
            value: cdktf.stringToHclTerraform(struct.directoryType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        active_directory: {
            value: storageAccountAzureFilesAuthenticationActiveDirectoryToHclTerraform(struct.activeDirectory),
            isBlock: true,
            type: "list",
            storageClassType: "StorageAccountAzureFilesAuthenticationActiveDirectoryList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.storageAccountAzureFilesAuthenticationToHclTerraform = storageAccountAzureFilesAuthenticationToHclTerraform;
class StorageAccountAzureFilesAuthenticationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // active_directory - computed: false, optional: true, required: false
        this._activeDirectory = new StorageAccountAzureFilesAuthenticationActiveDirectoryOutputReference(this, "active_directory");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._directoryType !== undefined) {
            hasAnyValues = true;
            internalValueResult.directoryType = this._directoryType;
        }
        if (this._activeDirectory?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.activeDirectory = this._activeDirectory?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._directoryType = undefined;
            this._activeDirectory.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._directoryType = value.directoryType;
            this._activeDirectory.internalValue = value.activeDirectory;
        }
    }
    get directoryType() {
        return this.getStringAttribute('directory_type');
    }
    set directoryType(value) {
        this._directoryType = value;
    }
    // Temporarily expose input value. Use with caution.
    get directoryTypeInput() {
        return this._directoryType;
    }
    get activeDirectory() {
        return this._activeDirectory;
    }
    putActiveDirectory(value) {
        this._activeDirectory.internalValue = value;
    }
    resetActiveDirectory() {
        this._activeDirectory.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get activeDirectoryInput() {
        return this._activeDirectory.internalValue;
    }
}
exports.StorageAccountAzureFilesAuthenticationOutputReference = StorageAccountAzureFilesAuthenticationOutputReference;
function storageAccountBlobPropertiesContainerDeleteRetentionPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        days: cdktf.numberToTerraform(struct.days),
    };
}
exports.storageAccountBlobPropertiesContainerDeleteRetentionPolicyToTerraform = storageAccountBlobPropertiesContainerDeleteRetentionPolicyToTerraform;
function storageAccountBlobPropertiesContainerDeleteRetentionPolicyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        days: {
            value: cdktf.numberToHclTerraform(struct.days),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.storageAccountBlobPropertiesContainerDeleteRetentionPolicyToHclTerraform = storageAccountBlobPropertiesContainerDeleteRetentionPolicyToHclTerraform;
class StorageAccountBlobPropertiesContainerDeleteRetentionPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._days !== undefined) {
            hasAnyValues = true;
            internalValueResult.days = this._days;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._days = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._days = value.days;
        }
    }
    get days() {
        return this.getNumberAttribute('days');
    }
    set days(value) {
        this._days = value;
    }
    resetDays() {
        this._days = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get daysInput() {
        return this._days;
    }
}
exports.StorageAccountBlobPropertiesContainerDeleteRetentionPolicyOutputReference = StorageAccountBlobPropertiesContainerDeleteRetentionPolicyOutputReference;
function storageAccountBlobPropertiesCorsRuleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allowed_headers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowedHeaders),
        allowed_methods: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowedMethods),
        allowed_origins: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowedOrigins),
        exposed_headers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.exposedHeaders),
        max_age_in_seconds: cdktf.numberToTerraform(struct.maxAgeInSeconds),
    };
}
exports.storageAccountBlobPropertiesCorsRuleToTerraform = storageAccountBlobPropertiesCorsRuleToTerraform;
function storageAccountBlobPropertiesCorsRuleToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allowed_headers: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.allowedHeaders),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        allowed_methods: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.allowedMethods),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        allowed_origins: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.allowedOrigins),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        exposed_headers: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.exposedHeaders),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        max_age_in_seconds: {
            value: cdktf.numberToHclTerraform(struct.maxAgeInSeconds),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.storageAccountBlobPropertiesCorsRuleToHclTerraform = storageAccountBlobPropertiesCorsRuleToHclTerraform;
class StorageAccountBlobPropertiesCorsRuleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowedHeaders !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedHeaders = this._allowedHeaders;
        }
        if (this._allowedMethods !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedMethods = this._allowedMethods;
        }
        if (this._allowedOrigins !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedOrigins = this._allowedOrigins;
        }
        if (this._exposedHeaders !== undefined) {
            hasAnyValues = true;
            internalValueResult.exposedHeaders = this._exposedHeaders;
        }
        if (this._maxAgeInSeconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxAgeInSeconds = this._maxAgeInSeconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._allowedHeaders = undefined;
            this._allowedMethods = undefined;
            this._allowedOrigins = undefined;
            this._exposedHeaders = undefined;
            this._maxAgeInSeconds = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._allowedHeaders = value.allowedHeaders;
            this._allowedMethods = value.allowedMethods;
            this._allowedOrigins = value.allowedOrigins;
            this._exposedHeaders = value.exposedHeaders;
            this._maxAgeInSeconds = value.maxAgeInSeconds;
        }
    }
    get allowedHeaders() {
        return this.getListAttribute('allowed_headers');
    }
    set allowedHeaders(value) {
        this._allowedHeaders = value;
    }
    // Temporarily expose input value. Use with caution.
    get allowedHeadersInput() {
        return this._allowedHeaders;
    }
    get allowedMethods() {
        return this.getListAttribute('allowed_methods');
    }
    set allowedMethods(value) {
        this._allowedMethods = value;
    }
    // Temporarily expose input value. Use with caution.
    get allowedMethodsInput() {
        return this._allowedMethods;
    }
    get allowedOrigins() {
        return this.getListAttribute('allowed_origins');
    }
    set allowedOrigins(value) {
        this._allowedOrigins = value;
    }
    // Temporarily expose input value. Use with caution.
    get allowedOriginsInput() {
        return this._allowedOrigins;
    }
    get exposedHeaders() {
        return this.getListAttribute('exposed_headers');
    }
    set exposedHeaders(value) {
        this._exposedHeaders = value;
    }
    // Temporarily expose input value. Use with caution.
    get exposedHeadersInput() {
        return this._exposedHeaders;
    }
    get maxAgeInSeconds() {
        return this.getNumberAttribute('max_age_in_seconds');
    }
    set maxAgeInSeconds(value) {
        this._maxAgeInSeconds = value;
    }
    // Temporarily expose input value. Use with caution.
    get maxAgeInSecondsInput() {
        return this._maxAgeInSeconds;
    }
}
exports.StorageAccountBlobPropertiesCorsRuleOutputReference = StorageAccountBlobPropertiesCorsRuleOutputReference;
class StorageAccountBlobPropertiesCorsRuleList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new StorageAccountBlobPropertiesCorsRuleOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.StorageAccountBlobPropertiesCorsRuleList = StorageAccountBlobPropertiesCorsRuleList;
function storageAccountBlobPropertiesDeleteRetentionPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        days: cdktf.numberToTerraform(struct.days),
    };
}
exports.storageAccountBlobPropertiesDeleteRetentionPolicyToTerraform = storageAccountBlobPropertiesDeleteRetentionPolicyToTerraform;
function storageAccountBlobPropertiesDeleteRetentionPolicyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        days: {
            value: cdktf.numberToHclTerraform(struct.days),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.storageAccountBlobPropertiesDeleteRetentionPolicyToHclTerraform = storageAccountBlobPropertiesDeleteRetentionPolicyToHclTerraform;
class StorageAccountBlobPropertiesDeleteRetentionPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._days !== undefined) {
            hasAnyValues = true;
            internalValueResult.days = this._days;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._days = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._days = value.days;
        }
    }
    get days() {
        return this.getNumberAttribute('days');
    }
    set days(value) {
        this._days = value;
    }
    resetDays() {
        this._days = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get daysInput() {
        return this._days;
    }
}
exports.StorageAccountBlobPropertiesDeleteRetentionPolicyOutputReference = StorageAccountBlobPropertiesDeleteRetentionPolicyOutputReference;
function storageAccountBlobPropertiesRestorePolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        days: cdktf.numberToTerraform(struct.days),
    };
}
exports.storageAccountBlobPropertiesRestorePolicyToTerraform = storageAccountBlobPropertiesRestorePolicyToTerraform;
function storageAccountBlobPropertiesRestorePolicyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        days: {
            value: cdktf.numberToHclTerraform(struct.days),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.storageAccountBlobPropertiesRestorePolicyToHclTerraform = storageAccountBlobPropertiesRestorePolicyToHclTerraform;
class StorageAccountBlobPropertiesRestorePolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._days !== undefined) {
            hasAnyValues = true;
            internalValueResult.days = this._days;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._days = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._days = value.days;
        }
    }
    get days() {
        return this.getNumberAttribute('days');
    }
    set days(value) {
        this._days = value;
    }
    // Temporarily expose input value. Use with caution.
    get daysInput() {
        return this._days;
    }
}
exports.StorageAccountBlobPropertiesRestorePolicyOutputReference = StorageAccountBlobPropertiesRestorePolicyOutputReference;
function storageAccountBlobPropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        change_feed_enabled: cdktf.booleanToTerraform(struct.changeFeedEnabled),
        change_feed_retention_in_days: cdktf.numberToTerraform(struct.changeFeedRetentionInDays),
        default_service_version: cdktf.stringToTerraform(struct.defaultServiceVersion),
        last_access_time_enabled: cdktf.booleanToTerraform(struct.lastAccessTimeEnabled),
        versioning_enabled: cdktf.booleanToTerraform(struct.versioningEnabled),
        container_delete_retention_policy: storageAccountBlobPropertiesContainerDeleteRetentionPolicyToTerraform(struct.containerDeleteRetentionPolicy),
        cors_rule: cdktf.listMapper(storageAccountBlobPropertiesCorsRuleToTerraform, true)(struct.corsRule),
        delete_retention_policy: storageAccountBlobPropertiesDeleteRetentionPolicyToTerraform(struct.deleteRetentionPolicy),
        restore_policy: storageAccountBlobPropertiesRestorePolicyToTerraform(struct.restorePolicy),
    };
}
exports.storageAccountBlobPropertiesToTerraform = storageAccountBlobPropertiesToTerraform;
function storageAccountBlobPropertiesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        change_feed_enabled: {
            value: cdktf.booleanToHclTerraform(struct.changeFeedEnabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        change_feed_retention_in_days: {
            value: cdktf.numberToHclTerraform(struct.changeFeedRetentionInDays),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        default_service_version: {
            value: cdktf.stringToHclTerraform(struct.defaultServiceVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        last_access_time_enabled: {
            value: cdktf.booleanToHclTerraform(struct.lastAccessTimeEnabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        versioning_enabled: {
            value: cdktf.booleanToHclTerraform(struct.versioningEnabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        container_delete_retention_policy: {
            value: storageAccountBlobPropertiesContainerDeleteRetentionPolicyToHclTerraform(struct.containerDeleteRetentionPolicy),
            isBlock: true,
            type: "list",
            storageClassType: "StorageAccountBlobPropertiesContainerDeleteRetentionPolicyList",
        },
        cors_rule: {
            value: cdktf.listMapperHcl(storageAccountBlobPropertiesCorsRuleToHclTerraform, true)(struct.corsRule),
            isBlock: true,
            type: "list",
            storageClassType: "StorageAccountBlobPropertiesCorsRuleList",
        },
        delete_retention_policy: {
            value: storageAccountBlobPropertiesDeleteRetentionPolicyToHclTerraform(struct.deleteRetentionPolicy),
            isBlock: true,
            type: "list",
            storageClassType: "StorageAccountBlobPropertiesDeleteRetentionPolicyList",
        },
        restore_policy: {
            value: storageAccountBlobPropertiesRestorePolicyToHclTerraform(struct.restorePolicy),
            isBlock: true,
            type: "list",
            storageClassType: "StorageAccountBlobPropertiesRestorePolicyList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.storageAccountBlobPropertiesToHclTerraform = storageAccountBlobPropertiesToHclTerraform;
class StorageAccountBlobPropertiesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // container_delete_retention_policy - computed: false, optional: true, required: false
        this._containerDeleteRetentionPolicy = new StorageAccountBlobPropertiesContainerDeleteRetentionPolicyOutputReference(this, "container_delete_retention_policy");
        // cors_rule - computed: false, optional: true, required: false
        this._corsRule = new StorageAccountBlobPropertiesCorsRuleList(this, "cors_rule", false);
        // delete_retention_policy - computed: false, optional: true, required: false
        this._deleteRetentionPolicy = new StorageAccountBlobPropertiesDeleteRetentionPolicyOutputReference(this, "delete_retention_policy");
        // restore_policy - computed: false, optional: true, required: false
        this._restorePolicy = new StorageAccountBlobPropertiesRestorePolicyOutputReference(this, "restore_policy");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._changeFeedEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.changeFeedEnabled = this._changeFeedEnabled;
        }
        if (this._changeFeedRetentionInDays !== undefined) {
            hasAnyValues = true;
            internalValueResult.changeFeedRetentionInDays = this._changeFeedRetentionInDays;
        }
        if (this._defaultServiceVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultServiceVersion = this._defaultServiceVersion;
        }
        if (this._lastAccessTimeEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.lastAccessTimeEnabled = this._lastAccessTimeEnabled;
        }
        if (this._versioningEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.versioningEnabled = this._versioningEnabled;
        }
        if (this._containerDeleteRetentionPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.containerDeleteRetentionPolicy = this._containerDeleteRetentionPolicy?.internalValue;
        }
        if (this._corsRule?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.corsRule = this._corsRule?.internalValue;
        }
        if (this._deleteRetentionPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.deleteRetentionPolicy = this._deleteRetentionPolicy?.internalValue;
        }
        if (this._restorePolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.restorePolicy = this._restorePolicy?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._changeFeedEnabled = undefined;
            this._changeFeedRetentionInDays = undefined;
            this._defaultServiceVersion = undefined;
            this._lastAccessTimeEnabled = undefined;
            this._versioningEnabled = undefined;
            this._containerDeleteRetentionPolicy.internalValue = undefined;
            this._corsRule.internalValue = undefined;
            this._deleteRetentionPolicy.internalValue = undefined;
            this._restorePolicy.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._changeFeedEnabled = value.changeFeedEnabled;
            this._changeFeedRetentionInDays = value.changeFeedRetentionInDays;
            this._defaultServiceVersion = value.defaultServiceVersion;
            this._lastAccessTimeEnabled = value.lastAccessTimeEnabled;
            this._versioningEnabled = value.versioningEnabled;
            this._containerDeleteRetentionPolicy.internalValue = value.containerDeleteRetentionPolicy;
            this._corsRule.internalValue = value.corsRule;
            this._deleteRetentionPolicy.internalValue = value.deleteRetentionPolicy;
            this._restorePolicy.internalValue = value.restorePolicy;
        }
    }
    get changeFeedEnabled() {
        return this.getBooleanAttribute('change_feed_enabled');
    }
    set changeFeedEnabled(value) {
        this._changeFeedEnabled = value;
    }
    resetChangeFeedEnabled() {
        this._changeFeedEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get changeFeedEnabledInput() {
        return this._changeFeedEnabled;
    }
    get changeFeedRetentionInDays() {
        return this.getNumberAttribute('change_feed_retention_in_days');
    }
    set changeFeedRetentionInDays(value) {
        this._changeFeedRetentionInDays = value;
    }
    resetChangeFeedRetentionInDays() {
        this._changeFeedRetentionInDays = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get changeFeedRetentionInDaysInput() {
        return this._changeFeedRetentionInDays;
    }
    get defaultServiceVersion() {
        return this.getStringAttribute('default_service_version');
    }
    set defaultServiceVersion(value) {
        this._defaultServiceVersion = value;
    }
    resetDefaultServiceVersion() {
        this._defaultServiceVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultServiceVersionInput() {
        return this._defaultServiceVersion;
    }
    get lastAccessTimeEnabled() {
        return this.getBooleanAttribute('last_access_time_enabled');
    }
    set lastAccessTimeEnabled(value) {
        this._lastAccessTimeEnabled = value;
    }
    resetLastAccessTimeEnabled() {
        this._lastAccessTimeEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lastAccessTimeEnabledInput() {
        return this._lastAccessTimeEnabled;
    }
    get versioningEnabled() {
        return this.getBooleanAttribute('versioning_enabled');
    }
    set versioningEnabled(value) {
        this._versioningEnabled = value;
    }
    resetVersioningEnabled() {
        this._versioningEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versioningEnabledInput() {
        return this._versioningEnabled;
    }
    get containerDeleteRetentionPolicy() {
        return this._containerDeleteRetentionPolicy;
    }
    putContainerDeleteRetentionPolicy(value) {
        this._containerDeleteRetentionPolicy.internalValue = value;
    }
    resetContainerDeleteRetentionPolicy() {
        this._containerDeleteRetentionPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get containerDeleteRetentionPolicyInput() {
        return this._containerDeleteRetentionPolicy.internalValue;
    }
    get corsRule() {
        return this._corsRule;
    }
    putCorsRule(value) {
        this._corsRule.internalValue = value;
    }
    resetCorsRule() {
        this._corsRule.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get corsRuleInput() {
        return this._corsRule.internalValue;
    }
    get deleteRetentionPolicy() {
        return this._deleteRetentionPolicy;
    }
    putDeleteRetentionPolicy(value) {
        this._deleteRetentionPolicy.internalValue = value;
    }
    resetDeleteRetentionPolicy() {
        this._deleteRetentionPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteRetentionPolicyInput() {
        return this._deleteRetentionPolicy.internalValue;
    }
    get restorePolicy() {
        return this._restorePolicy;
    }
    putRestorePolicy(value) {
        this._restorePolicy.internalValue = value;
    }
    resetRestorePolicy() {
        this._restorePolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get restorePolicyInput() {
        return this._restorePolicy.internalValue;
    }
}
exports.StorageAccountBlobPropertiesOutputReference = StorageAccountBlobPropertiesOutputReference;
function storageAccountCustomDomainToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        use_subdomain: cdktf.booleanToTerraform(struct.useSubdomain),
    };
}
exports.storageAccountCustomDomainToTerraform = storageAccountCustomDomainToTerraform;
function storageAccountCustomDomainToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        use_subdomain: {
            value: cdktf.booleanToHclTerraform(struct.useSubdomain),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.storageAccountCustomDomainToHclTerraform = storageAccountCustomDomainToHclTerraform;
class StorageAccountCustomDomainOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._useSubdomain !== undefined) {
            hasAnyValues = true;
            internalValueResult.useSubdomain = this._useSubdomain;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._name = undefined;
            this._useSubdomain = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._name = value.name;
            this._useSubdomain = value.useSubdomain;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get useSubdomain() {
        return this.getBooleanAttribute('use_subdomain');
    }
    set useSubdomain(value) {
        this._useSubdomain = value;
    }
    resetUseSubdomain() {
        this._useSubdomain = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get useSubdomainInput() {
        return this._useSubdomain;
    }
}
exports.StorageAccountCustomDomainOutputReference = StorageAccountCustomDomainOutputReference;
function storageAccountCustomerManagedKeyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key_vault_key_id: cdktf.stringToTerraform(struct.keyVaultKeyId),
        user_assigned_identity_id: cdktf.stringToTerraform(struct.userAssignedIdentityId),
    };
}
exports.storageAccountCustomerManagedKeyToTerraform = storageAccountCustomerManagedKeyToTerraform;
function storageAccountCustomerManagedKeyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        key_vault_key_id: {
            value: cdktf.stringToHclTerraform(struct.keyVaultKeyId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        user_assigned_identity_id: {
            value: cdktf.stringToHclTerraform(struct.userAssignedIdentityId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.storageAccountCustomerManagedKeyToHclTerraform = storageAccountCustomerManagedKeyToHclTerraform;
class StorageAccountCustomerManagedKeyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._keyVaultKeyId !== undefined) {
            hasAnyValues = true;
            internalValueResult.keyVaultKeyId = this._keyVaultKeyId;
        }
        if (this._userAssignedIdentityId !== undefined) {
            hasAnyValues = true;
            internalValueResult.userAssignedIdentityId = this._userAssignedIdentityId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._keyVaultKeyId = undefined;
            this._userAssignedIdentityId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._keyVaultKeyId = value.keyVaultKeyId;
            this._userAssignedIdentityId = value.userAssignedIdentityId;
        }
    }
    get keyVaultKeyId() {
        return this.getStringAttribute('key_vault_key_id');
    }
    set keyVaultKeyId(value) {
        this._keyVaultKeyId = value;
    }
    // Temporarily expose input value. Use with caution.
    get keyVaultKeyIdInput() {
        return this._keyVaultKeyId;
    }
    get userAssignedIdentityId() {
        return this.getStringAttribute('user_assigned_identity_id');
    }
    set userAssignedIdentityId(value) {
        this._userAssignedIdentityId = value;
    }
    // Temporarily expose input value. Use with caution.
    get userAssignedIdentityIdInput() {
        return this._userAssignedIdentityId;
    }
}
exports.StorageAccountCustomerManagedKeyOutputReference = StorageAccountCustomerManagedKeyOutputReference;
function storageAccountIdentityToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        identity_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.identityIds),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.storageAccountIdentityToTerraform = storageAccountIdentityToTerraform;
function storageAccountIdentityToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        identity_ids: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.identityIds),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        type: {
            value: cdktf.stringToHclTerraform(struct.type),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.storageAccountIdentityToHclTerraform = storageAccountIdentityToHclTerraform;
class StorageAccountIdentityOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._identityIds !== undefined) {
            hasAnyValues = true;
            internalValueResult.identityIds = this._identityIds;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._identityIds = undefined;
            this._type = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._identityIds = value.identityIds;
            this._type = value.type;
        }
    }
    get identityIds() {
        return cdktf.Fn.tolist(this.getListAttribute('identity_ids'));
    }
    set identityIds(value) {
        this._identityIds = value;
    }
    resetIdentityIds() {
        this._identityIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get identityIdsInput() {
        return this._identityIds;
    }
    // principal_id - computed: true, optional: false, required: false
    get principalId() {
        return this.getStringAttribute('principal_id');
    }
    // tenant_id - computed: true, optional: false, required: false
    get tenantId() {
        return this.getStringAttribute('tenant_id');
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
}
exports.StorageAccountIdentityOutputReference = StorageAccountIdentityOutputReference;
function storageAccountImmutabilityPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_protected_append_writes: cdktf.booleanToTerraform(struct.allowProtectedAppendWrites),
        period_since_creation_in_days: cdktf.numberToTerraform(struct.periodSinceCreationInDays),
        state: cdktf.stringToTerraform(struct.state),
    };
}
exports.storageAccountImmutabilityPolicyToTerraform = storageAccountImmutabilityPolicyToTerraform;
function storageAccountImmutabilityPolicyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allow_protected_append_writes: {
            value: cdktf.booleanToHclTerraform(struct.allowProtectedAppendWrites),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        period_since_creation_in_days: {
            value: cdktf.numberToHclTerraform(struct.periodSinceCreationInDays),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        state: {
            value: cdktf.stringToHclTerraform(struct.state),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.storageAccountImmutabilityPolicyToHclTerraform = storageAccountImmutabilityPolicyToHclTerraform;
class StorageAccountImmutabilityPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowProtectedAppendWrites !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowProtectedAppendWrites = this._allowProtectedAppendWrites;
        }
        if (this._periodSinceCreationInDays !== undefined) {
            hasAnyValues = true;
            internalValueResult.periodSinceCreationInDays = this._periodSinceCreationInDays;
        }
        if (this._state !== undefined) {
            hasAnyValues = true;
            internalValueResult.state = this._state;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowProtectedAppendWrites = undefined;
            this._periodSinceCreationInDays = undefined;
            this._state = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowProtectedAppendWrites = value.allowProtectedAppendWrites;
            this._periodSinceCreationInDays = value.periodSinceCreationInDays;
            this._state = value.state;
        }
    }
    get allowProtectedAppendWrites() {
        return this.getBooleanAttribute('allow_protected_append_writes');
    }
    set allowProtectedAppendWrites(value) {
        this._allowProtectedAppendWrites = value;
    }
    // Temporarily expose input value. Use with caution.
    get allowProtectedAppendWritesInput() {
        return this._allowProtectedAppendWrites;
    }
    get periodSinceCreationInDays() {
        return this.getNumberAttribute('period_since_creation_in_days');
    }
    set periodSinceCreationInDays(value) {
        this._periodSinceCreationInDays = value;
    }
    // Temporarily expose input value. Use with caution.
    get periodSinceCreationInDaysInput() {
        return this._periodSinceCreationInDays;
    }
    get state() {
        return this.getStringAttribute('state');
    }
    set state(value) {
        this._state = value;
    }
    // Temporarily expose input value. Use with caution.
    get stateInput() {
        return this._state;
    }
}
exports.StorageAccountImmutabilityPolicyOutputReference = StorageAccountImmutabilityPolicyOutputReference;
function storageAccountNetworkRulesPrivateLinkAccessToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        endpoint_resource_id: cdktf.stringToTerraform(struct.endpointResourceId),
        endpoint_tenant_id: cdktf.stringToTerraform(struct.endpointTenantId),
    };
}
exports.storageAccountNetworkRulesPrivateLinkAccessToTerraform = storageAccountNetworkRulesPrivateLinkAccessToTerraform;
function storageAccountNetworkRulesPrivateLinkAccessToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        endpoint_resource_id: {
            value: cdktf.stringToHclTerraform(struct.endpointResourceId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        endpoint_tenant_id: {
            value: cdktf.stringToHclTerraform(struct.endpointTenantId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.storageAccountNetworkRulesPrivateLinkAccessToHclTerraform = storageAccountNetworkRulesPrivateLinkAccessToHclTerraform;
class StorageAccountNetworkRulesPrivateLinkAccessOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._endpointResourceId !== undefined) {
            hasAnyValues = true;
            internalValueResult.endpointResourceId = this._endpointResourceId;
        }
        if (this._endpointTenantId !== undefined) {
            hasAnyValues = true;
            internalValueResult.endpointTenantId = this._endpointTenantId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._endpointResourceId = undefined;
            this._endpointTenantId = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._endpointResourceId = value.endpointResourceId;
            this._endpointTenantId = value.endpointTenantId;
        }
    }
    get endpointResourceId() {
        return this.getStringAttribute('endpoint_resource_id');
    }
    set endpointResourceId(value) {
        this._endpointResourceId = value;
    }
    // Temporarily expose input value. Use with caution.
    get endpointResourceIdInput() {
        return this._endpointResourceId;
    }
    get endpointTenantId() {
        return this.getStringAttribute('endpoint_tenant_id');
    }
    set endpointTenantId(value) {
        this._endpointTenantId = value;
    }
    resetEndpointTenantId() {
        this._endpointTenantId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get endpointTenantIdInput() {
        return this._endpointTenantId;
    }
}
exports.StorageAccountNetworkRulesPrivateLinkAccessOutputReference = StorageAccountNetworkRulesPrivateLinkAccessOutputReference;
class StorageAccountNetworkRulesPrivateLinkAccessList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new StorageAccountNetworkRulesPrivateLinkAccessOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.StorageAccountNetworkRulesPrivateLinkAccessList = StorageAccountNetworkRulesPrivateLinkAccessList;
function storageAccountNetworkRulesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bypass: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.bypass),
        default_action: cdktf.stringToTerraform(struct.defaultAction),
        ip_rules: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.ipRules),
        virtual_network_subnet_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.virtualNetworkSubnetIds),
        private_link_access: cdktf.listMapper(storageAccountNetworkRulesPrivateLinkAccessToTerraform, true)(struct.privateLinkAccess),
    };
}
exports.storageAccountNetworkRulesToTerraform = storageAccountNetworkRulesToTerraform;
function storageAccountNetworkRulesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bypass: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.bypass),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        default_action: {
            value: cdktf.stringToHclTerraform(struct.defaultAction),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ip_rules: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.ipRules),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        virtual_network_subnet_ids: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.virtualNetworkSubnetIds),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        private_link_access: {
            value: cdktf.listMapperHcl(storageAccountNetworkRulesPrivateLinkAccessToHclTerraform, true)(struct.privateLinkAccess),
            isBlock: true,
            type: "list",
            storageClassType: "StorageAccountNetworkRulesPrivateLinkAccessList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.storageAccountNetworkRulesToHclTerraform = storageAccountNetworkRulesToHclTerraform;
class StorageAccountNetworkRulesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // private_link_access - computed: false, optional: true, required: false
        this._privateLinkAccess = new StorageAccountNetworkRulesPrivateLinkAccessList(this, "private_link_access", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bypass !== undefined) {
            hasAnyValues = true;
            internalValueResult.bypass = this._bypass;
        }
        if (this._defaultAction !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultAction = this._defaultAction;
        }
        if (this._ipRules !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipRules = this._ipRules;
        }
        if (this._virtualNetworkSubnetIds !== undefined) {
            hasAnyValues = true;
            internalValueResult.virtualNetworkSubnetIds = this._virtualNetworkSubnetIds;
        }
        if (this._privateLinkAccess?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.privateLinkAccess = this._privateLinkAccess?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bypass = undefined;
            this._defaultAction = undefined;
            this._ipRules = undefined;
            this._virtualNetworkSubnetIds = undefined;
            this._privateLinkAccess.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bypass = value.bypass;
            this._defaultAction = value.defaultAction;
            this._ipRules = value.ipRules;
            this._virtualNetworkSubnetIds = value.virtualNetworkSubnetIds;
            this._privateLinkAccess.internalValue = value.privateLinkAccess;
        }
    }
    get bypass() {
        return cdktf.Fn.tolist(this.getListAttribute('bypass'));
    }
    set bypass(value) {
        this._bypass = value;
    }
    resetBypass() {
        this._bypass = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bypassInput() {
        return this._bypass;
    }
    get defaultAction() {
        return this.getStringAttribute('default_action');
    }
    set defaultAction(value) {
        this._defaultAction = value;
    }
    // Temporarily expose input value. Use with caution.
    get defaultActionInput() {
        return this._defaultAction;
    }
    get ipRules() {
        return cdktf.Fn.tolist(this.getListAttribute('ip_rules'));
    }
    set ipRules(value) {
        this._ipRules = value;
    }
    resetIpRules() {
        this._ipRules = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipRulesInput() {
        return this._ipRules;
    }
    get virtualNetworkSubnetIds() {
        return cdktf.Fn.tolist(this.getListAttribute('virtual_network_subnet_ids'));
    }
    set virtualNetworkSubnetIds(value) {
        this._virtualNetworkSubnetIds = value;
    }
    resetVirtualNetworkSubnetIds() {
        this._virtualNetworkSubnetIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get virtualNetworkSubnetIdsInput() {
        return this._virtualNetworkSubnetIds;
    }
    get privateLinkAccess() {
        return this._privateLinkAccess;
    }
    putPrivateLinkAccess(value) {
        this._privateLinkAccess.internalValue = value;
    }
    resetPrivateLinkAccess() {
        this._privateLinkAccess.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get privateLinkAccessInput() {
        return this._privateLinkAccess.internalValue;
    }
}
exports.StorageAccountNetworkRulesOutputReference = StorageAccountNetworkRulesOutputReference;
function storageAccountQueuePropertiesCorsRuleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allowed_headers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowedHeaders),
        allowed_methods: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowedMethods),
        allowed_origins: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowedOrigins),
        exposed_headers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.exposedHeaders),
        max_age_in_seconds: cdktf.numberToTerraform(struct.maxAgeInSeconds),
    };
}
exports.storageAccountQueuePropertiesCorsRuleToTerraform = storageAccountQueuePropertiesCorsRuleToTerraform;
function storageAccountQueuePropertiesCorsRuleToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allowed_headers: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.allowedHeaders),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        allowed_methods: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.allowedMethods),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        allowed_origins: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.allowedOrigins),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        exposed_headers: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.exposedHeaders),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        max_age_in_seconds: {
            value: cdktf.numberToHclTerraform(struct.maxAgeInSeconds),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.storageAccountQueuePropertiesCorsRuleToHclTerraform = storageAccountQueuePropertiesCorsRuleToHclTerraform;
class StorageAccountQueuePropertiesCorsRuleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowedHeaders !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedHeaders = this._allowedHeaders;
        }
        if (this._allowedMethods !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedMethods = this._allowedMethods;
        }
        if (this._allowedOrigins !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedOrigins = this._allowedOrigins;
        }
        if (this._exposedHeaders !== undefined) {
            hasAnyValues = true;
            internalValueResult.exposedHeaders = this._exposedHeaders;
        }
        if (this._maxAgeInSeconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxAgeInSeconds = this._maxAgeInSeconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._allowedHeaders = undefined;
            this._allowedMethods = undefined;
            this._allowedOrigins = undefined;
            this._exposedHeaders = undefined;
            this._maxAgeInSeconds = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._allowedHeaders = value.allowedHeaders;
            this._allowedMethods = value.allowedMethods;
            this._allowedOrigins = value.allowedOrigins;
            this._exposedHeaders = value.exposedHeaders;
            this._maxAgeInSeconds = value.maxAgeInSeconds;
        }
    }
    get allowedHeaders() {
        return this.getListAttribute('allowed_headers');
    }
    set allowedHeaders(value) {
        this._allowedHeaders = value;
    }
    // Temporarily expose input value. Use with caution.
    get allowedHeadersInput() {
        return this._allowedHeaders;
    }
    get allowedMethods() {
        return this.getListAttribute('allowed_methods');
    }
    set allowedMethods(value) {
        this._allowedMethods = value;
    }
    // Temporarily expose input value. Use with caution.
    get allowedMethodsInput() {
        return this._allowedMethods;
    }
    get allowedOrigins() {
        return this.getListAttribute('allowed_origins');
    }
    set allowedOrigins(value) {
        this._allowedOrigins = value;
    }
    // Temporarily expose input value. Use with caution.
    get allowedOriginsInput() {
        return this._allowedOrigins;
    }
    get exposedHeaders() {
        return this.getListAttribute('exposed_headers');
    }
    set exposedHeaders(value) {
        this._exposedHeaders = value;
    }
    // Temporarily expose input value. Use with caution.
    get exposedHeadersInput() {
        return this._exposedHeaders;
    }
    get maxAgeInSeconds() {
        return this.getNumberAttribute('max_age_in_seconds');
    }
    set maxAgeInSeconds(value) {
        this._maxAgeInSeconds = value;
    }
    // Temporarily expose input value. Use with caution.
    get maxAgeInSecondsInput() {
        return this._maxAgeInSeconds;
    }
}
exports.StorageAccountQueuePropertiesCorsRuleOutputReference = StorageAccountQueuePropertiesCorsRuleOutputReference;
class StorageAccountQueuePropertiesCorsRuleList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new StorageAccountQueuePropertiesCorsRuleOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.StorageAccountQueuePropertiesCorsRuleList = StorageAccountQueuePropertiesCorsRuleList;
function storageAccountQueuePropertiesHourMetricsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        include_apis: cdktf.booleanToTerraform(struct.includeApis),
        retention_policy_days: cdktf.numberToTerraform(struct.retentionPolicyDays),
        version: cdktf.stringToTerraform(struct.version),
    };
}
exports.storageAccountQueuePropertiesHourMetricsToTerraform = storageAccountQueuePropertiesHourMetricsToTerraform;
function storageAccountQueuePropertiesHourMetricsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        include_apis: {
            value: cdktf.booleanToHclTerraform(struct.includeApis),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        retention_policy_days: {
            value: cdktf.numberToHclTerraform(struct.retentionPolicyDays),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        version: {
            value: cdktf.stringToHclTerraform(struct.version),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.storageAccountQueuePropertiesHourMetricsToHclTerraform = storageAccountQueuePropertiesHourMetricsToHclTerraform;
class StorageAccountQueuePropertiesHourMetricsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._includeApis !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeApis = this._includeApis;
        }
        if (this._retentionPolicyDays !== undefined) {
            hasAnyValues = true;
            internalValueResult.retentionPolicyDays = this._retentionPolicyDays;
        }
        if (this._version !== undefined) {
            hasAnyValues = true;
            internalValueResult.version = this._version;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._includeApis = undefined;
            this._retentionPolicyDays = undefined;
            this._version = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._includeApis = value.includeApis;
            this._retentionPolicyDays = value.retentionPolicyDays;
            this._version = value.version;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get includeApis() {
        return this.getBooleanAttribute('include_apis');
    }
    set includeApis(value) {
        this._includeApis = value;
    }
    resetIncludeApis() {
        this._includeApis = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeApisInput() {
        return this._includeApis;
    }
    get retentionPolicyDays() {
        return this.getNumberAttribute('retention_policy_days');
    }
    set retentionPolicyDays(value) {
        this._retentionPolicyDays = value;
    }
    resetRetentionPolicyDays() {
        this._retentionPolicyDays = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retentionPolicyDaysInput() {
        return this._retentionPolicyDays;
    }
    get version() {
        return this.getStringAttribute('version');
    }
    set version(value) {
        this._version = value;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
}
exports.StorageAccountQueuePropertiesHourMetricsOutputReference = StorageAccountQueuePropertiesHourMetricsOutputReference;
function storageAccountQueuePropertiesLoggingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        delete: cdktf.booleanToTerraform(struct.delete),
        read: cdktf.booleanToTerraform(struct.read),
        retention_policy_days: cdktf.numberToTerraform(struct.retentionPolicyDays),
        version: cdktf.stringToTerraform(struct.version),
        write: cdktf.booleanToTerraform(struct.write),
    };
}
exports.storageAccountQueuePropertiesLoggingToTerraform = storageAccountQueuePropertiesLoggingToTerraform;
function storageAccountQueuePropertiesLoggingToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        delete: {
            value: cdktf.booleanToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        read: {
            value: cdktf.booleanToHclTerraform(struct.read),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        retention_policy_days: {
            value: cdktf.numberToHclTerraform(struct.retentionPolicyDays),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        version: {
            value: cdktf.stringToHclTerraform(struct.version),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        write: {
            value: cdktf.booleanToHclTerraform(struct.write),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.storageAccountQueuePropertiesLoggingToHclTerraform = storageAccountQueuePropertiesLoggingToHclTerraform;
class StorageAccountQueuePropertiesLoggingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._read !== undefined) {
            hasAnyValues = true;
            internalValueResult.read = this._read;
        }
        if (this._retentionPolicyDays !== undefined) {
            hasAnyValues = true;
            internalValueResult.retentionPolicyDays = this._retentionPolicyDays;
        }
        if (this._version !== undefined) {
            hasAnyValues = true;
            internalValueResult.version = this._version;
        }
        if (this._write !== undefined) {
            hasAnyValues = true;
            internalValueResult.write = this._write;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._delete = undefined;
            this._read = undefined;
            this._retentionPolicyDays = undefined;
            this._version = undefined;
            this._write = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._delete = value.delete;
            this._read = value.read;
            this._retentionPolicyDays = value.retentionPolicyDays;
            this._version = value.version;
            this._write = value.write;
        }
    }
    get delete() {
        return this.getBooleanAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get read() {
        return this.getBooleanAttribute('read');
    }
    set read(value) {
        this._read = value;
    }
    // Temporarily expose input value. Use with caution.
    get readInput() {
        return this._read;
    }
    get retentionPolicyDays() {
        return this.getNumberAttribute('retention_policy_days');
    }
    set retentionPolicyDays(value) {
        this._retentionPolicyDays = value;
    }
    resetRetentionPolicyDays() {
        this._retentionPolicyDays = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retentionPolicyDaysInput() {
        return this._retentionPolicyDays;
    }
    get version() {
        return this.getStringAttribute('version');
    }
    set version(value) {
        this._version = value;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
    get write() {
        return this.getBooleanAttribute('write');
    }
    set write(value) {
        this._write = value;
    }
    // Temporarily expose input value. Use with caution.
    get writeInput() {
        return this._write;
    }
}
exports.StorageAccountQueuePropertiesLoggingOutputReference = StorageAccountQueuePropertiesLoggingOutputReference;
function storageAccountQueuePropertiesMinuteMetricsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        include_apis: cdktf.booleanToTerraform(struct.includeApis),
        retention_policy_days: cdktf.numberToTerraform(struct.retentionPolicyDays),
        version: cdktf.stringToTerraform(struct.version),
    };
}
exports.storageAccountQueuePropertiesMinuteMetricsToTerraform = storageAccountQueuePropertiesMinuteMetricsToTerraform;
function storageAccountQueuePropertiesMinuteMetricsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        include_apis: {
            value: cdktf.booleanToHclTerraform(struct.includeApis),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        retention_policy_days: {
            value: cdktf.numberToHclTerraform(struct.retentionPolicyDays),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        version: {
            value: cdktf.stringToHclTerraform(struct.version),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.storageAccountQueuePropertiesMinuteMetricsToHclTerraform = storageAccountQueuePropertiesMinuteMetricsToHclTerraform;
class StorageAccountQueuePropertiesMinuteMetricsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._includeApis !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeApis = this._includeApis;
        }
        if (this._retentionPolicyDays !== undefined) {
            hasAnyValues = true;
            internalValueResult.retentionPolicyDays = this._retentionPolicyDays;
        }
        if (this._version !== undefined) {
            hasAnyValues = true;
            internalValueResult.version = this._version;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._includeApis = undefined;
            this._retentionPolicyDays = undefined;
            this._version = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._includeApis = value.includeApis;
            this._retentionPolicyDays = value.retentionPolicyDays;
            this._version = value.version;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get includeApis() {
        return this.getBooleanAttribute('include_apis');
    }
    set includeApis(value) {
        this._includeApis = value;
    }
    resetIncludeApis() {
        this._includeApis = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeApisInput() {
        return this._includeApis;
    }
    get retentionPolicyDays() {
        return this.getNumberAttribute('retention_policy_days');
    }
    set retentionPolicyDays(value) {
        this._retentionPolicyDays = value;
    }
    resetRetentionPolicyDays() {
        this._retentionPolicyDays = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retentionPolicyDaysInput() {
        return this._retentionPolicyDays;
    }
    get version() {
        return this.getStringAttribute('version');
    }
    set version(value) {
        this._version = value;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
}
exports.StorageAccountQueuePropertiesMinuteMetricsOutputReference = StorageAccountQueuePropertiesMinuteMetricsOutputReference;
function storageAccountQueuePropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cors_rule: cdktf.listMapper(storageAccountQueuePropertiesCorsRuleToTerraform, true)(struct.corsRule),
        hour_metrics: storageAccountQueuePropertiesHourMetricsToTerraform(struct.hourMetrics),
        logging: storageAccountQueuePropertiesLoggingToTerraform(struct.logging),
        minute_metrics: storageAccountQueuePropertiesMinuteMetricsToTerraform(struct.minuteMetrics),
    };
}
exports.storageAccountQueuePropertiesToTerraform = storageAccountQueuePropertiesToTerraform;
function storageAccountQueuePropertiesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cors_rule: {
            value: cdktf.listMapperHcl(storageAccountQueuePropertiesCorsRuleToHclTerraform, true)(struct.corsRule),
            isBlock: true,
            type: "list",
            storageClassType: "StorageAccountQueuePropertiesCorsRuleList",
        },
        hour_metrics: {
            value: storageAccountQueuePropertiesHourMetricsToHclTerraform(struct.hourMetrics),
            isBlock: true,
            type: "list",
            storageClassType: "StorageAccountQueuePropertiesHourMetricsList",
        },
        logging: {
            value: storageAccountQueuePropertiesLoggingToHclTerraform(struct.logging),
            isBlock: true,
            type: "list",
            storageClassType: "StorageAccountQueuePropertiesLoggingList",
        },
        minute_metrics: {
            value: storageAccountQueuePropertiesMinuteMetricsToHclTerraform(struct.minuteMetrics),
            isBlock: true,
            type: "list",
            storageClassType: "StorageAccountQueuePropertiesMinuteMetricsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.storageAccountQueuePropertiesToHclTerraform = storageAccountQueuePropertiesToHclTerraform;
class StorageAccountQueuePropertiesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cors_rule - computed: false, optional: true, required: false
        this._corsRule = new StorageAccountQueuePropertiesCorsRuleList(this, "cors_rule", false);
        // hour_metrics - computed: false, optional: true, required: false
        this._hourMetrics = new StorageAccountQueuePropertiesHourMetricsOutputReference(this, "hour_metrics");
        // logging - computed: false, optional: true, required: false
        this._logging = new StorageAccountQueuePropertiesLoggingOutputReference(this, "logging");
        // minute_metrics - computed: false, optional: true, required: false
        this._minuteMetrics = new StorageAccountQueuePropertiesMinuteMetricsOutputReference(this, "minute_metrics");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._corsRule?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.corsRule = this._corsRule?.internalValue;
        }
        if (this._hourMetrics?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.hourMetrics = this._hourMetrics?.internalValue;
        }
        if (this._logging?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.logging = this._logging?.internalValue;
        }
        if (this._minuteMetrics?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.minuteMetrics = this._minuteMetrics?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._corsRule.internalValue = undefined;
            this._hourMetrics.internalValue = undefined;
            this._logging.internalValue = undefined;
            this._minuteMetrics.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._corsRule.internalValue = value.corsRule;
            this._hourMetrics.internalValue = value.hourMetrics;
            this._logging.internalValue = value.logging;
            this._minuteMetrics.internalValue = value.minuteMetrics;
        }
    }
    get corsRule() {
        return this._corsRule;
    }
    putCorsRule(value) {
        this._corsRule.internalValue = value;
    }
    resetCorsRule() {
        this._corsRule.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get corsRuleInput() {
        return this._corsRule.internalValue;
    }
    get hourMetrics() {
        return this._hourMetrics;
    }
    putHourMetrics(value) {
        this._hourMetrics.internalValue = value;
    }
    resetHourMetrics() {
        this._hourMetrics.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hourMetricsInput() {
        return this._hourMetrics.internalValue;
    }
    get logging() {
        return this._logging;
    }
    putLogging(value) {
        this._logging.internalValue = value;
    }
    resetLogging() {
        this._logging.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loggingInput() {
        return this._logging.internalValue;
    }
    get minuteMetrics() {
        return this._minuteMetrics;
    }
    putMinuteMetrics(value) {
        this._minuteMetrics.internalValue = value;
    }
    resetMinuteMetrics() {
        this._minuteMetrics.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minuteMetricsInput() {
        return this._minuteMetrics.internalValue;
    }
}
exports.StorageAccountQueuePropertiesOutputReference = StorageAccountQueuePropertiesOutputReference;
function storageAccountRoutingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        choice: cdktf.stringToTerraform(struct.choice),
        publish_internet_endpoints: cdktf.booleanToTerraform(struct.publishInternetEndpoints),
        publish_microsoft_endpoints: cdktf.booleanToTerraform(struct.publishMicrosoftEndpoints),
    };
}
exports.storageAccountRoutingToTerraform = storageAccountRoutingToTerraform;
function storageAccountRoutingToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        choice: {
            value: cdktf.stringToHclTerraform(struct.choice),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        publish_internet_endpoints: {
            value: cdktf.booleanToHclTerraform(struct.publishInternetEndpoints),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        publish_microsoft_endpoints: {
            value: cdktf.booleanToHclTerraform(struct.publishMicrosoftEndpoints),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.storageAccountRoutingToHclTerraform = storageAccountRoutingToHclTerraform;
class StorageAccountRoutingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._choice !== undefined) {
            hasAnyValues = true;
            internalValueResult.choice = this._choice;
        }
        if (this._publishInternetEndpoints !== undefined) {
            hasAnyValues = true;
            internalValueResult.publishInternetEndpoints = this._publishInternetEndpoints;
        }
        if (this._publishMicrosoftEndpoints !== undefined) {
            hasAnyValues = true;
            internalValueResult.publishMicrosoftEndpoints = this._publishMicrosoftEndpoints;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._choice = undefined;
            this._publishInternetEndpoints = undefined;
            this._publishMicrosoftEndpoints = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._choice = value.choice;
            this._publishInternetEndpoints = value.publishInternetEndpoints;
            this._publishMicrosoftEndpoints = value.publishMicrosoftEndpoints;
        }
    }
    get choice() {
        return this.getStringAttribute('choice');
    }
    set choice(value) {
        this._choice = value;
    }
    resetChoice() {
        this._choice = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get choiceInput() {
        return this._choice;
    }
    get publishInternetEndpoints() {
        return this.getBooleanAttribute('publish_internet_endpoints');
    }
    set publishInternetEndpoints(value) {
        this._publishInternetEndpoints = value;
    }
    resetPublishInternetEndpoints() {
        this._publishInternetEndpoints = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get publishInternetEndpointsInput() {
        return this._publishInternetEndpoints;
    }
    get publishMicrosoftEndpoints() {
        return this.getBooleanAttribute('publish_microsoft_endpoints');
    }
    set publishMicrosoftEndpoints(value) {
        this._publishMicrosoftEndpoints = value;
    }
    resetPublishMicrosoftEndpoints() {
        this._publishMicrosoftEndpoints = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get publishMicrosoftEndpointsInput() {
        return this._publishMicrosoftEndpoints;
    }
}
exports.StorageAccountRoutingOutputReference = StorageAccountRoutingOutputReference;
function storageAccountSasPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        expiration_action: cdktf.stringToTerraform(struct.expirationAction),
        expiration_period: cdktf.stringToTerraform(struct.expirationPeriod),
    };
}
exports.storageAccountSasPolicyToTerraform = storageAccountSasPolicyToTerraform;
function storageAccountSasPolicyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        expiration_action: {
            value: cdktf.stringToHclTerraform(struct.expirationAction),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        expiration_period: {
            value: cdktf.stringToHclTerraform(struct.expirationPeriod),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.storageAccountSasPolicyToHclTerraform = storageAccountSasPolicyToHclTerraform;
class StorageAccountSasPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._expirationAction !== undefined) {
            hasAnyValues = true;
            internalValueResult.expirationAction = this._expirationAction;
        }
        if (this._expirationPeriod !== undefined) {
            hasAnyValues = true;
            internalValueResult.expirationPeriod = this._expirationPeriod;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._expirationAction = undefined;
            this._expirationPeriod = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._expirationAction = value.expirationAction;
            this._expirationPeriod = value.expirationPeriod;
        }
    }
    get expirationAction() {
        return this.getStringAttribute('expiration_action');
    }
    set expirationAction(value) {
        this._expirationAction = value;
    }
    resetExpirationAction() {
        this._expirationAction = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get expirationActionInput() {
        return this._expirationAction;
    }
    get expirationPeriod() {
        return this.getStringAttribute('expiration_period');
    }
    set expirationPeriod(value) {
        this._expirationPeriod = value;
    }
    // Temporarily expose input value. Use with caution.
    get expirationPeriodInput() {
        return this._expirationPeriod;
    }
}
exports.StorageAccountSasPolicyOutputReference = StorageAccountSasPolicyOutputReference;
function storageAccountSharePropertiesCorsRuleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allowed_headers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowedHeaders),
        allowed_methods: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowedMethods),
        allowed_origins: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowedOrigins),
        exposed_headers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.exposedHeaders),
        max_age_in_seconds: cdktf.numberToTerraform(struct.maxAgeInSeconds),
    };
}
exports.storageAccountSharePropertiesCorsRuleToTerraform = storageAccountSharePropertiesCorsRuleToTerraform;
function storageAccountSharePropertiesCorsRuleToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allowed_headers: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.allowedHeaders),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        allowed_methods: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.allowedMethods),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        allowed_origins: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.allowedOrigins),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        exposed_headers: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.exposedHeaders),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        max_age_in_seconds: {
            value: cdktf.numberToHclTerraform(struct.maxAgeInSeconds),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.storageAccountSharePropertiesCorsRuleToHclTerraform = storageAccountSharePropertiesCorsRuleToHclTerraform;
class StorageAccountSharePropertiesCorsRuleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowedHeaders !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedHeaders = this._allowedHeaders;
        }
        if (this._allowedMethods !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedMethods = this._allowedMethods;
        }
        if (this._allowedOrigins !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedOrigins = this._allowedOrigins;
        }
        if (this._exposedHeaders !== undefined) {
            hasAnyValues = true;
            internalValueResult.exposedHeaders = this._exposedHeaders;
        }
        if (this._maxAgeInSeconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxAgeInSeconds = this._maxAgeInSeconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._allowedHeaders = undefined;
            this._allowedMethods = undefined;
            this._allowedOrigins = undefined;
            this._exposedHeaders = undefined;
            this._maxAgeInSeconds = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._allowedHeaders = value.allowedHeaders;
            this._allowedMethods = value.allowedMethods;
            this._allowedOrigins = value.allowedOrigins;
            this._exposedHeaders = value.exposedHeaders;
            this._maxAgeInSeconds = value.maxAgeInSeconds;
        }
    }
    get allowedHeaders() {
        return this.getListAttribute('allowed_headers');
    }
    set allowedHeaders(value) {
        this._allowedHeaders = value;
    }
    // Temporarily expose input value. Use with caution.
    get allowedHeadersInput() {
        return this._allowedHeaders;
    }
    get allowedMethods() {
        return this.getListAttribute('allowed_methods');
    }
    set allowedMethods(value) {
        this._allowedMethods = value;
    }
    // Temporarily expose input value. Use with caution.
    get allowedMethodsInput() {
        return this._allowedMethods;
    }
    get allowedOrigins() {
        return this.getListAttribute('allowed_origins');
    }
    set allowedOrigins(value) {
        this._allowedOrigins = value;
    }
    // Temporarily expose input value. Use with caution.
    get allowedOriginsInput() {
        return this._allowedOrigins;
    }
    get exposedHeaders() {
        return this.getListAttribute('exposed_headers');
    }
    set exposedHeaders(value) {
        this._exposedHeaders = value;
    }
    // Temporarily expose input value. Use with caution.
    get exposedHeadersInput() {
        return this._exposedHeaders;
    }
    get maxAgeInSeconds() {
        return this.getNumberAttribute('max_age_in_seconds');
    }
    set maxAgeInSeconds(value) {
        this._maxAgeInSeconds = value;
    }
    // Temporarily expose input value. Use with caution.
    get maxAgeInSecondsInput() {
        return this._maxAgeInSeconds;
    }
}
exports.StorageAccountSharePropertiesCorsRuleOutputReference = StorageAccountSharePropertiesCorsRuleOutputReference;
class StorageAccountSharePropertiesCorsRuleList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new StorageAccountSharePropertiesCorsRuleOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.StorageAccountSharePropertiesCorsRuleList = StorageAccountSharePropertiesCorsRuleList;
function storageAccountSharePropertiesRetentionPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        days: cdktf.numberToTerraform(struct.days),
    };
}
exports.storageAccountSharePropertiesRetentionPolicyToTerraform = storageAccountSharePropertiesRetentionPolicyToTerraform;
function storageAccountSharePropertiesRetentionPolicyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        days: {
            value: cdktf.numberToHclTerraform(struct.days),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.storageAccountSharePropertiesRetentionPolicyToHclTerraform = storageAccountSharePropertiesRetentionPolicyToHclTerraform;
class StorageAccountSharePropertiesRetentionPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._days !== undefined) {
            hasAnyValues = true;
            internalValueResult.days = this._days;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._days = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._days = value.days;
        }
    }
    get days() {
        return this.getNumberAttribute('days');
    }
    set days(value) {
        this._days = value;
    }
    resetDays() {
        this._days = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get daysInput() {
        return this._days;
    }
}
exports.StorageAccountSharePropertiesRetentionPolicyOutputReference = StorageAccountSharePropertiesRetentionPolicyOutputReference;
function storageAccountSharePropertiesSmbToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        authentication_types: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.authenticationTypes),
        channel_encryption_type: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.channelEncryptionType),
        kerberos_ticket_encryption_type: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.kerberosTicketEncryptionType),
        multichannel_enabled: cdktf.booleanToTerraform(struct.multichannelEnabled),
        versions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.versions),
    };
}
exports.storageAccountSharePropertiesSmbToTerraform = storageAccountSharePropertiesSmbToTerraform;
function storageAccountSharePropertiesSmbToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        authentication_types: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.authenticationTypes),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        channel_encryption_type: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.channelEncryptionType),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        kerberos_ticket_encryption_type: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.kerberosTicketEncryptionType),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        multichannel_enabled: {
            value: cdktf.booleanToHclTerraform(struct.multichannelEnabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        versions: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.versions),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.storageAccountSharePropertiesSmbToHclTerraform = storageAccountSharePropertiesSmbToHclTerraform;
class StorageAccountSharePropertiesSmbOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._authenticationTypes !== undefined) {
            hasAnyValues = true;
            internalValueResult.authenticationTypes = this._authenticationTypes;
        }
        if (this._channelEncryptionType !== undefined) {
            hasAnyValues = true;
            internalValueResult.channelEncryptionType = this._channelEncryptionType;
        }
        if (this._kerberosTicketEncryptionType !== undefined) {
            hasAnyValues = true;
            internalValueResult.kerberosTicketEncryptionType = this._kerberosTicketEncryptionType;
        }
        if (this._multichannelEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.multichannelEnabled = this._multichannelEnabled;
        }
        if (this._versions !== undefined) {
            hasAnyValues = true;
            internalValueResult.versions = this._versions;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._authenticationTypes = undefined;
            this._channelEncryptionType = undefined;
            this._kerberosTicketEncryptionType = undefined;
            this._multichannelEnabled = undefined;
            this._versions = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._authenticationTypes = value.authenticationTypes;
            this._channelEncryptionType = value.channelEncryptionType;
            this._kerberosTicketEncryptionType = value.kerberosTicketEncryptionType;
            this._multichannelEnabled = value.multichannelEnabled;
            this._versions = value.versions;
        }
    }
    get authenticationTypes() {
        return cdktf.Fn.tolist(this.getListAttribute('authentication_types'));
    }
    set authenticationTypes(value) {
        this._authenticationTypes = value;
    }
    resetAuthenticationTypes() {
        this._authenticationTypes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authenticationTypesInput() {
        return this._authenticationTypes;
    }
    get channelEncryptionType() {
        return cdktf.Fn.tolist(this.getListAttribute('channel_encryption_type'));
    }
    set channelEncryptionType(value) {
        this._channelEncryptionType = value;
    }
    resetChannelEncryptionType() {
        this._channelEncryptionType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get channelEncryptionTypeInput() {
        return this._channelEncryptionType;
    }
    get kerberosTicketEncryptionType() {
        return cdktf.Fn.tolist(this.getListAttribute('kerberos_ticket_encryption_type'));
    }
    set kerberosTicketEncryptionType(value) {
        this._kerberosTicketEncryptionType = value;
    }
    resetKerberosTicketEncryptionType() {
        this._kerberosTicketEncryptionType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kerberosTicketEncryptionTypeInput() {
        return this._kerberosTicketEncryptionType;
    }
    get multichannelEnabled() {
        return this.getBooleanAttribute('multichannel_enabled');
    }
    set multichannelEnabled(value) {
        this._multichannelEnabled = value;
    }
    resetMultichannelEnabled() {
        this._multichannelEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get multichannelEnabledInput() {
        return this._multichannelEnabled;
    }
    get versions() {
        return cdktf.Fn.tolist(this.getListAttribute('versions'));
    }
    set versions(value) {
        this._versions = value;
    }
    resetVersions() {
        this._versions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionsInput() {
        return this._versions;
    }
}
exports.StorageAccountSharePropertiesSmbOutputReference = StorageAccountSharePropertiesSmbOutputReference;
function storageAccountSharePropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cors_rule: cdktf.listMapper(storageAccountSharePropertiesCorsRuleToTerraform, true)(struct.corsRule),
        retention_policy: storageAccountSharePropertiesRetentionPolicyToTerraform(struct.retentionPolicy),
        smb: storageAccountSharePropertiesSmbToTerraform(struct.smb),
    };
}
exports.storageAccountSharePropertiesToTerraform = storageAccountSharePropertiesToTerraform;
function storageAccountSharePropertiesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cors_rule: {
            value: cdktf.listMapperHcl(storageAccountSharePropertiesCorsRuleToHclTerraform, true)(struct.corsRule),
            isBlock: true,
            type: "list",
            storageClassType: "StorageAccountSharePropertiesCorsRuleList",
        },
        retention_policy: {
            value: storageAccountSharePropertiesRetentionPolicyToHclTerraform(struct.retentionPolicy),
            isBlock: true,
            type: "list",
            storageClassType: "StorageAccountSharePropertiesRetentionPolicyList",
        },
        smb: {
            value: storageAccountSharePropertiesSmbToHclTerraform(struct.smb),
            isBlock: true,
            type: "list",
            storageClassType: "StorageAccountSharePropertiesSmbList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.storageAccountSharePropertiesToHclTerraform = storageAccountSharePropertiesToHclTerraform;
class StorageAccountSharePropertiesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cors_rule - computed: false, optional: true, required: false
        this._corsRule = new StorageAccountSharePropertiesCorsRuleList(this, "cors_rule", false);
        // retention_policy - computed: false, optional: true, required: false
        this._retentionPolicy = new StorageAccountSharePropertiesRetentionPolicyOutputReference(this, "retention_policy");
        // smb - computed: false, optional: true, required: false
        this._smb = new StorageAccountSharePropertiesSmbOutputReference(this, "smb");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._corsRule?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.corsRule = this._corsRule?.internalValue;
        }
        if (this._retentionPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.retentionPolicy = this._retentionPolicy?.internalValue;
        }
        if (this._smb?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.smb = this._smb?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._corsRule.internalValue = undefined;
            this._retentionPolicy.internalValue = undefined;
            this._smb.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._corsRule.internalValue = value.corsRule;
            this._retentionPolicy.internalValue = value.retentionPolicy;
            this._smb.internalValue = value.smb;
        }
    }
    get corsRule() {
        return this._corsRule;
    }
    putCorsRule(value) {
        this._corsRule.internalValue = value;
    }
    resetCorsRule() {
        this._corsRule.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get corsRuleInput() {
        return this._corsRule.internalValue;
    }
    get retentionPolicy() {
        return this._retentionPolicy;
    }
    putRetentionPolicy(value) {
        this._retentionPolicy.internalValue = value;
    }
    resetRetentionPolicy() {
        this._retentionPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retentionPolicyInput() {
        return this._retentionPolicy.internalValue;
    }
    get smb() {
        return this._smb;
    }
    putSmb(value) {
        this._smb.internalValue = value;
    }
    resetSmb() {
        this._smb.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get smbInput() {
        return this._smb.internalValue;
    }
}
exports.StorageAccountSharePropertiesOutputReference = StorageAccountSharePropertiesOutputReference;
function storageAccountStaticWebsiteToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        error_404_document: cdktf.stringToTerraform(struct.error404Document),
        index_document: cdktf.stringToTerraform(struct.indexDocument),
    };
}
exports.storageAccountStaticWebsiteToTerraform = storageAccountStaticWebsiteToTerraform;
function storageAccountStaticWebsiteToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        error_404_document: {
            value: cdktf.stringToHclTerraform(struct.error404Document),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        index_document: {
            value: cdktf.stringToHclTerraform(struct.indexDocument),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.storageAccountStaticWebsiteToHclTerraform = storageAccountStaticWebsiteToHclTerraform;
class StorageAccountStaticWebsiteOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._error404Document !== undefined) {
            hasAnyValues = true;
            internalValueResult.error404Document = this._error404Document;
        }
        if (this._indexDocument !== undefined) {
            hasAnyValues = true;
            internalValueResult.indexDocument = this._indexDocument;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._error404Document = undefined;
            this._indexDocument = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._error404Document = value.error404Document;
            this._indexDocument = value.indexDocument;
        }
    }
    get error404Document() {
        return this.getStringAttribute('error_404_document');
    }
    set error404Document(value) {
        this._error404Document = value;
    }
    resetError404Document() {
        this._error404Document = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get error404DocumentInput() {
        return this._error404Document;
    }
    get indexDocument() {
        return this.getStringAttribute('index_document');
    }
    set indexDocument(value) {
        this._indexDocument = value;
    }
    resetIndexDocument() {
        this._indexDocument = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get indexDocumentInput() {
        return this._indexDocument;
    }
}
exports.StorageAccountStaticWebsiteOutputReference = StorageAccountStaticWebsiteOutputReference;
function storageAccountTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        read: cdktf.stringToTerraform(struct.read),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.storageAccountTimeoutsToTerraform = storageAccountTimeoutsToTerraform;
function storageAccountTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        read: {
            value: cdktf.stringToHclTerraform(struct.read),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.storageAccountTimeoutsToHclTerraform = storageAccountTimeoutsToHclTerraform;
class StorageAccountTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._read !== undefined) {
            hasAnyValues = true;
            internalValueResult.read = this._read;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._read = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._read = value.read;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get read() {
        return this.getStringAttribute('read');
    }
    set read(value) {
        this._read = value;
    }
    resetRead() {
        this._read = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get readInput() {
        return this._read;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.StorageAccountTimeoutsOutputReference = StorageAccountTimeoutsOutputReference;
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/azurerm/3.96.0/docs/resources/storage_account azurerm_storage_account}
*/
class StorageAccount extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a StorageAccount resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the StorageAccount to import
    * @param importFromId The id of the existing StorageAccount that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/azurerm/3.96.0/docs/resources/storage_account#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the StorageAccount to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "azurerm_storage_account", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/azurerm/3.96.0/docs/resources/storage_account azurerm_storage_account} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options StorageAccountConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'azurerm_storage_account',
            terraformGeneratorMetadata: {
                providerName: 'azurerm',
                providerVersion: '3.96.0',
                providerVersionConstraint: '~>3.96.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // azure_files_authentication - computed: false, optional: true, required: false
        this._azureFilesAuthentication = new StorageAccountAzureFilesAuthenticationOutputReference(this, "azure_files_authentication");
        // blob_properties - computed: false, optional: true, required: false
        this._blobProperties = new StorageAccountBlobPropertiesOutputReference(this, "blob_properties");
        // custom_domain - computed: false, optional: true, required: false
        this._customDomain = new StorageAccountCustomDomainOutputReference(this, "custom_domain");
        // customer_managed_key - computed: false, optional: true, required: false
        this._customerManagedKey = new StorageAccountCustomerManagedKeyOutputReference(this, "customer_managed_key");
        // identity - computed: false, optional: true, required: false
        this._identity = new StorageAccountIdentityOutputReference(this, "identity");
        // immutability_policy - computed: false, optional: true, required: false
        this._immutabilityPolicy = new StorageAccountImmutabilityPolicyOutputReference(this, "immutability_policy");
        // network_rules - computed: false, optional: true, required: false
        this._networkRules = new StorageAccountNetworkRulesOutputReference(this, "network_rules");
        // queue_properties - computed: false, optional: true, required: false
        this._queueProperties = new StorageAccountQueuePropertiesOutputReference(this, "queue_properties");
        // routing - computed: false, optional: true, required: false
        this._routing = new StorageAccountRoutingOutputReference(this, "routing");
        // sas_policy - computed: false, optional: true, required: false
        this._sasPolicy = new StorageAccountSasPolicyOutputReference(this, "sas_policy");
        // share_properties - computed: false, optional: true, required: false
        this._shareProperties = new StorageAccountSharePropertiesOutputReference(this, "share_properties");
        // static_website - computed: false, optional: true, required: false
        this._staticWebsite = new StorageAccountStaticWebsiteOutputReference(this, "static_website");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new StorageAccountTimeoutsOutputReference(this, "timeouts");
        this._accessTier = config.accessTier;
        this._accountKind = config.accountKind;
        this._accountReplicationType = config.accountReplicationType;
        this._accountTier = config.accountTier;
        this._allowNestedItemsToBePublic = config.allowNestedItemsToBePublic;
        this._allowedCopyScope = config.allowedCopyScope;
        this._crossTenantReplicationEnabled = config.crossTenantReplicationEnabled;
        this._defaultToOauthAuthentication = config.defaultToOauthAuthentication;
        this._edgeZone = config.edgeZone;
        this._enableHttpsTrafficOnly = config.enableHttpsTrafficOnly;
        this._id = config.id;
        this._infrastructureEncryptionEnabled = config.infrastructureEncryptionEnabled;
        this._isHnsEnabled = config.isHnsEnabled;
        this._largeFileShareEnabled = config.largeFileShareEnabled;
        this._localUserEnabled = config.localUserEnabled;
        this._location = config.location;
        this._minTlsVersion = config.minTlsVersion;
        this._name = config.name;
        this._nfsv3Enabled = config.nfsv3Enabled;
        this._publicNetworkAccessEnabled = config.publicNetworkAccessEnabled;
        this._queueEncryptionKeyType = config.queueEncryptionKeyType;
        this._resourceGroupName = config.resourceGroupName;
        this._sftpEnabled = config.sftpEnabled;
        this._sharedAccessKeyEnabled = config.sharedAccessKeyEnabled;
        this._tableEncryptionKeyType = config.tableEncryptionKeyType;
        this._tags = config.tags;
        this._azureFilesAuthentication.internalValue = config.azureFilesAuthentication;
        this._blobProperties.internalValue = config.blobProperties;
        this._customDomain.internalValue = config.customDomain;
        this._customerManagedKey.internalValue = config.customerManagedKey;
        this._identity.internalValue = config.identity;
        this._immutabilityPolicy.internalValue = config.immutabilityPolicy;
        this._networkRules.internalValue = config.networkRules;
        this._queueProperties.internalValue = config.queueProperties;
        this._routing.internalValue = config.routing;
        this._sasPolicy.internalValue = config.sasPolicy;
        this._shareProperties.internalValue = config.shareProperties;
        this._staticWebsite.internalValue = config.staticWebsite;
        this._timeouts.internalValue = config.timeouts;
    }
    get accessTier() {
        return this.getStringAttribute('access_tier');
    }
    set accessTier(value) {
        this._accessTier = value;
    }
    resetAccessTier() {
        this._accessTier = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessTierInput() {
        return this._accessTier;
    }
    get accountKind() {
        return this.getStringAttribute('account_kind');
    }
    set accountKind(value) {
        this._accountKind = value;
    }
    resetAccountKind() {
        this._accountKind = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accountKindInput() {
        return this._accountKind;
    }
    get accountReplicationType() {
        return this.getStringAttribute('account_replication_type');
    }
    set accountReplicationType(value) {
        this._accountReplicationType = value;
    }
    // Temporarily expose input value. Use with caution.
    get accountReplicationTypeInput() {
        return this._accountReplicationType;
    }
    get accountTier() {
        return this.getStringAttribute('account_tier');
    }
    set accountTier(value) {
        this._accountTier = value;
    }
    // Temporarily expose input value. Use with caution.
    get accountTierInput() {
        return this._accountTier;
    }
    get allowNestedItemsToBePublic() {
        return this.getBooleanAttribute('allow_nested_items_to_be_public');
    }
    set allowNestedItemsToBePublic(value) {
        this._allowNestedItemsToBePublic = value;
    }
    resetAllowNestedItemsToBePublic() {
        this._allowNestedItemsToBePublic = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowNestedItemsToBePublicInput() {
        return this._allowNestedItemsToBePublic;
    }
    get allowedCopyScope() {
        return this.getStringAttribute('allowed_copy_scope');
    }
    set allowedCopyScope(value) {
        this._allowedCopyScope = value;
    }
    resetAllowedCopyScope() {
        this._allowedCopyScope = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedCopyScopeInput() {
        return this._allowedCopyScope;
    }
    get crossTenantReplicationEnabled() {
        return this.getBooleanAttribute('cross_tenant_replication_enabled');
    }
    set crossTenantReplicationEnabled(value) {
        this._crossTenantReplicationEnabled = value;
    }
    resetCrossTenantReplicationEnabled() {
        this._crossTenantReplicationEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get crossTenantReplicationEnabledInput() {
        return this._crossTenantReplicationEnabled;
    }
    get defaultToOauthAuthentication() {
        return this.getBooleanAttribute('default_to_oauth_authentication');
    }
    set defaultToOauthAuthentication(value) {
        this._defaultToOauthAuthentication = value;
    }
    resetDefaultToOauthAuthentication() {
        this._defaultToOauthAuthentication = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultToOauthAuthenticationInput() {
        return this._defaultToOauthAuthentication;
    }
    get edgeZone() {
        return this.getStringAttribute('edge_zone');
    }
    set edgeZone(value) {
        this._edgeZone = value;
    }
    resetEdgeZone() {
        this._edgeZone = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get edgeZoneInput() {
        return this._edgeZone;
    }
    get enableHttpsTrafficOnly() {
        return this.getBooleanAttribute('enable_https_traffic_only');
    }
    set enableHttpsTrafficOnly(value) {
        this._enableHttpsTrafficOnly = value;
    }
    resetEnableHttpsTrafficOnly() {
        this._enableHttpsTrafficOnly = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableHttpsTrafficOnlyInput() {
        return this._enableHttpsTrafficOnly;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get infrastructureEncryptionEnabled() {
        return this.getBooleanAttribute('infrastructure_encryption_enabled');
    }
    set infrastructureEncryptionEnabled(value) {
        this._infrastructureEncryptionEnabled = value;
    }
    resetInfrastructureEncryptionEnabled() {
        this._infrastructureEncryptionEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get infrastructureEncryptionEnabledInput() {
        return this._infrastructureEncryptionEnabled;
    }
    get isHnsEnabled() {
        return this.getBooleanAttribute('is_hns_enabled');
    }
    set isHnsEnabled(value) {
        this._isHnsEnabled = value;
    }
    resetIsHnsEnabled() {
        this._isHnsEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get isHnsEnabledInput() {
        return this._isHnsEnabled;
    }
    get largeFileShareEnabled() {
        return this.getBooleanAttribute('large_file_share_enabled');
    }
    set largeFileShareEnabled(value) {
        this._largeFileShareEnabled = value;
    }
    resetLargeFileShareEnabled() {
        this._largeFileShareEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get largeFileShareEnabledInput() {
        return this._largeFileShareEnabled;
    }
    get localUserEnabled() {
        return this.getBooleanAttribute('local_user_enabled');
    }
    set localUserEnabled(value) {
        this._localUserEnabled = value;
    }
    resetLocalUserEnabled() {
        this._localUserEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localUserEnabledInput() {
        return this._localUserEnabled;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get minTlsVersion() {
        return this.getStringAttribute('min_tls_version');
    }
    set minTlsVersion(value) {
        this._minTlsVersion = value;
    }
    resetMinTlsVersion() {
        this._minTlsVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minTlsVersionInput() {
        return this._minTlsVersion;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get nfsv3Enabled() {
        return this.getBooleanAttribute('nfsv3_enabled');
    }
    set nfsv3Enabled(value) {
        this._nfsv3Enabled = value;
    }
    resetNfsv3Enabled() {
        this._nfsv3Enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nfsv3EnabledInput() {
        return this._nfsv3Enabled;
    }
    // primary_access_key - computed: true, optional: false, required: false
    get primaryAccessKey() {
        return this.getStringAttribute('primary_access_key');
    }
    // primary_blob_connection_string - computed: true, optional: false, required: false
    get primaryBlobConnectionString() {
        return this.getStringAttribute('primary_blob_connection_string');
    }
    // primary_blob_endpoint - computed: true, optional: false, required: false
    get primaryBlobEndpoint() {
        return this.getStringAttribute('primary_blob_endpoint');
    }
    // primary_blob_host - computed: true, optional: false, required: false
    get primaryBlobHost() {
        return this.getStringAttribute('primary_blob_host');
    }
    // primary_blob_internet_endpoint - computed: true, optional: false, required: false
    get primaryBlobInternetEndpoint() {
        return this.getStringAttribute('primary_blob_internet_endpoint');
    }
    // primary_blob_internet_host - computed: true, optional: false, required: false
    get primaryBlobInternetHost() {
        return this.getStringAttribute('primary_blob_internet_host');
    }
    // primary_blob_microsoft_endpoint - computed: true, optional: false, required: false
    get primaryBlobMicrosoftEndpoint() {
        return this.getStringAttribute('primary_blob_microsoft_endpoint');
    }
    // primary_blob_microsoft_host - computed: true, optional: false, required: false
    get primaryBlobMicrosoftHost() {
        return this.getStringAttribute('primary_blob_microsoft_host');
    }
    // primary_connection_string - computed: true, optional: false, required: false
    get primaryConnectionString() {
        return this.getStringAttribute('primary_connection_string');
    }
    // primary_dfs_endpoint - computed: true, optional: false, required: false
    get primaryDfsEndpoint() {
        return this.getStringAttribute('primary_dfs_endpoint');
    }
    // primary_dfs_host - computed: true, optional: false, required: false
    get primaryDfsHost() {
        return this.getStringAttribute('primary_dfs_host');
    }
    // primary_dfs_internet_endpoint - computed: true, optional: false, required: false
    get primaryDfsInternetEndpoint() {
        return this.getStringAttribute('primary_dfs_internet_endpoint');
    }
    // primary_dfs_internet_host - computed: true, optional: false, required: false
    get primaryDfsInternetHost() {
        return this.getStringAttribute('primary_dfs_internet_host');
    }
    // primary_dfs_microsoft_endpoint - computed: true, optional: false, required: false
    get primaryDfsMicrosoftEndpoint() {
        return this.getStringAttribute('primary_dfs_microsoft_endpoint');
    }
    // primary_dfs_microsoft_host - computed: true, optional: false, required: false
    get primaryDfsMicrosoftHost() {
        return this.getStringAttribute('primary_dfs_microsoft_host');
    }
    // primary_file_endpoint - computed: true, optional: false, required: false
    get primaryFileEndpoint() {
        return this.getStringAttribute('primary_file_endpoint');
    }
    // primary_file_host - computed: true, optional: false, required: false
    get primaryFileHost() {
        return this.getStringAttribute('primary_file_host');
    }
    // primary_file_internet_endpoint - computed: true, optional: false, required: false
    get primaryFileInternetEndpoint() {
        return this.getStringAttribute('primary_file_internet_endpoint');
    }
    // primary_file_internet_host - computed: true, optional: false, required: false
    get primaryFileInternetHost() {
        return this.getStringAttribute('primary_file_internet_host');
    }
    // primary_file_microsoft_endpoint - computed: true, optional: false, required: false
    get primaryFileMicrosoftEndpoint() {
        return this.getStringAttribute('primary_file_microsoft_endpoint');
    }
    // primary_file_microsoft_host - computed: true, optional: false, required: false
    get primaryFileMicrosoftHost() {
        return this.getStringAttribute('primary_file_microsoft_host');
    }
    // primary_location - computed: true, optional: false, required: false
    get primaryLocation() {
        return this.getStringAttribute('primary_location');
    }
    // primary_queue_endpoint - computed: true, optional: false, required: false
    get primaryQueueEndpoint() {
        return this.getStringAttribute('primary_queue_endpoint');
    }
    // primary_queue_host - computed: true, optional: false, required: false
    get primaryQueueHost() {
        return this.getStringAttribute('primary_queue_host');
    }
    // primary_queue_microsoft_endpoint - computed: true, optional: false, required: false
    get primaryQueueMicrosoftEndpoint() {
        return this.getStringAttribute('primary_queue_microsoft_endpoint');
    }
    // primary_queue_microsoft_host - computed: true, optional: false, required: false
    get primaryQueueMicrosoftHost() {
        return this.getStringAttribute('primary_queue_microsoft_host');
    }
    // primary_table_endpoint - computed: true, optional: false, required: false
    get primaryTableEndpoint() {
        return this.getStringAttribute('primary_table_endpoint');
    }
    // primary_table_host - computed: true, optional: false, required: false
    get primaryTableHost() {
        return this.getStringAttribute('primary_table_host');
    }
    // primary_table_microsoft_endpoint - computed: true, optional: false, required: false
    get primaryTableMicrosoftEndpoint() {
        return this.getStringAttribute('primary_table_microsoft_endpoint');
    }
    // primary_table_microsoft_host - computed: true, optional: false, required: false
    get primaryTableMicrosoftHost() {
        return this.getStringAttribute('primary_table_microsoft_host');
    }
    // primary_web_endpoint - computed: true, optional: false, required: false
    get primaryWebEndpoint() {
        return this.getStringAttribute('primary_web_endpoint');
    }
    // primary_web_host - computed: true, optional: false, required: false
    get primaryWebHost() {
        return this.getStringAttribute('primary_web_host');
    }
    // primary_web_internet_endpoint - computed: true, optional: false, required: false
    get primaryWebInternetEndpoint() {
        return this.getStringAttribute('primary_web_internet_endpoint');
    }
    // primary_web_internet_host - computed: true, optional: false, required: false
    get primaryWebInternetHost() {
        return this.getStringAttribute('primary_web_internet_host');
    }
    // primary_web_microsoft_endpoint - computed: true, optional: false, required: false
    get primaryWebMicrosoftEndpoint() {
        return this.getStringAttribute('primary_web_microsoft_endpoint');
    }
    // primary_web_microsoft_host - computed: true, optional: false, required: false
    get primaryWebMicrosoftHost() {
        return this.getStringAttribute('primary_web_microsoft_host');
    }
    get publicNetworkAccessEnabled() {
        return this.getBooleanAttribute('public_network_access_enabled');
    }
    set publicNetworkAccessEnabled(value) {
        this._publicNetworkAccessEnabled = value;
    }
    resetPublicNetworkAccessEnabled() {
        this._publicNetworkAccessEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get publicNetworkAccessEnabledInput() {
        return this._publicNetworkAccessEnabled;
    }
    get queueEncryptionKeyType() {
        return this.getStringAttribute('queue_encryption_key_type');
    }
    set queueEncryptionKeyType(value) {
        this._queueEncryptionKeyType = value;
    }
    resetQueueEncryptionKeyType() {
        this._queueEncryptionKeyType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queueEncryptionKeyTypeInput() {
        return this._queueEncryptionKeyType;
    }
    get resourceGroupName() {
        return this.getStringAttribute('resource_group_name');
    }
    set resourceGroupName(value) {
        this._resourceGroupName = value;
    }
    // Temporarily expose input value. Use with caution.
    get resourceGroupNameInput() {
        return this._resourceGroupName;
    }
    // secondary_access_key - computed: true, optional: false, required: false
    get secondaryAccessKey() {
        return this.getStringAttribute('secondary_access_key');
    }
    // secondary_blob_connection_string - computed: true, optional: false, required: false
    get secondaryBlobConnectionString() {
        return this.getStringAttribute('secondary_blob_connection_string');
    }
    // secondary_blob_endpoint - computed: true, optional: false, required: false
    get secondaryBlobEndpoint() {
        return this.getStringAttribute('secondary_blob_endpoint');
    }
    // secondary_blob_host - computed: true, optional: false, required: false
    get secondaryBlobHost() {
        return this.getStringAttribute('secondary_blob_host');
    }
    // secondary_blob_internet_endpoint - computed: true, optional: false, required: false
    get secondaryBlobInternetEndpoint() {
        return this.getStringAttribute('secondary_blob_internet_endpoint');
    }
    // secondary_blob_internet_host - computed: true, optional: false, required: false
    get secondaryBlobInternetHost() {
        return this.getStringAttribute('secondary_blob_internet_host');
    }
    // secondary_blob_microsoft_endpoint - computed: true, optional: false, required: false
    get secondaryBlobMicrosoftEndpoint() {
        return this.getStringAttribute('secondary_blob_microsoft_endpoint');
    }
    // secondary_blob_microsoft_host - computed: true, optional: false, required: false
    get secondaryBlobMicrosoftHost() {
        return this.getStringAttribute('secondary_blob_microsoft_host');
    }
    // secondary_connection_string - computed: true, optional: false, required: false
    get secondaryConnectionString() {
        return this.getStringAttribute('secondary_connection_string');
    }
    // secondary_dfs_endpoint - computed: true, optional: false, required: false
    get secondaryDfsEndpoint() {
        return this.getStringAttribute('secondary_dfs_endpoint');
    }
    // secondary_dfs_host - computed: true, optional: false, required: false
    get secondaryDfsHost() {
        return this.getStringAttribute('secondary_dfs_host');
    }
    // secondary_dfs_internet_endpoint - computed: true, optional: false, required: false
    get secondaryDfsInternetEndpoint() {
        return this.getStringAttribute('secondary_dfs_internet_endpoint');
    }
    // secondary_dfs_internet_host - computed: true, optional: false, required: false
    get secondaryDfsInternetHost() {
        return this.getStringAttribute('secondary_dfs_internet_host');
    }
    // secondary_dfs_microsoft_endpoint - computed: true, optional: false, required: false
    get secondaryDfsMicrosoftEndpoint() {
        return this.getStringAttribute('secondary_dfs_microsoft_endpoint');
    }
    // secondary_dfs_microsoft_host - computed: true, optional: false, required: false
    get secondaryDfsMicrosoftHost() {
        return this.getStringAttribute('secondary_dfs_microsoft_host');
    }
    // secondary_file_endpoint - computed: true, optional: false, required: false
    get secondaryFileEndpoint() {
        return this.getStringAttribute('secondary_file_endpoint');
    }
    // secondary_file_host - computed: true, optional: false, required: false
    get secondaryFileHost() {
        return this.getStringAttribute('secondary_file_host');
    }
    // secondary_file_internet_endpoint - computed: true, optional: false, required: false
    get secondaryFileInternetEndpoint() {
        return this.getStringAttribute('secondary_file_internet_endpoint');
    }
    // secondary_file_internet_host - computed: true, optional: false, required: false
    get secondaryFileInternetHost() {
        return this.getStringAttribute('secondary_file_internet_host');
    }
    // secondary_file_microsoft_endpoint - computed: true, optional: false, required: false
    get secondaryFileMicrosoftEndpoint() {
        return this.getStringAttribute('secondary_file_microsoft_endpoint');
    }
    // secondary_file_microsoft_host - computed: true, optional: false, required: false
    get secondaryFileMicrosoftHost() {
        return this.getStringAttribute('secondary_file_microsoft_host');
    }
    // secondary_location - computed: true, optional: false, required: false
    get secondaryLocation() {
        return this.getStringAttribute('secondary_location');
    }
    // secondary_queue_endpoint - computed: true, optional: false, required: false
    get secondaryQueueEndpoint() {
        return this.getStringAttribute('secondary_queue_endpoint');
    }
    // secondary_queue_host - computed: true, optional: false, required: false
    get secondaryQueueHost() {
        return this.getStringAttribute('secondary_queue_host');
    }
    // secondary_queue_microsoft_endpoint - computed: true, optional: false, required: false
    get secondaryQueueMicrosoftEndpoint() {
        return this.getStringAttribute('secondary_queue_microsoft_endpoint');
    }
    // secondary_queue_microsoft_host - computed: true, optional: false, required: false
    get secondaryQueueMicrosoftHost() {
        return this.getStringAttribute('secondary_queue_microsoft_host');
    }
    // secondary_table_endpoint - computed: true, optional: false, required: false
    get secondaryTableEndpoint() {
        return this.getStringAttribute('secondary_table_endpoint');
    }
    // secondary_table_host - computed: true, optional: false, required: false
    get secondaryTableHost() {
        return this.getStringAttribute('secondary_table_host');
    }
    // secondary_table_microsoft_endpoint - computed: true, optional: false, required: false
    get secondaryTableMicrosoftEndpoint() {
        return this.getStringAttribute('secondary_table_microsoft_endpoint');
    }
    // secondary_table_microsoft_host - computed: true, optional: false, required: false
    get secondaryTableMicrosoftHost() {
        return this.getStringAttribute('secondary_table_microsoft_host');
    }
    // secondary_web_endpoint - computed: true, optional: false, required: false
    get secondaryWebEndpoint() {
        return this.getStringAttribute('secondary_web_endpoint');
    }
    // secondary_web_host - computed: true, optional: false, required: false
    get secondaryWebHost() {
        return this.getStringAttribute('secondary_web_host');
    }
    // secondary_web_internet_endpoint - computed: true, optional: false, required: false
    get secondaryWebInternetEndpoint() {
        return this.getStringAttribute('secondary_web_internet_endpoint');
    }
    // secondary_web_internet_host - computed: true, optional: false, required: false
    get secondaryWebInternetHost() {
        return this.getStringAttribute('secondary_web_internet_host');
    }
    // secondary_web_microsoft_endpoint - computed: true, optional: false, required: false
    get secondaryWebMicrosoftEndpoint() {
        return this.getStringAttribute('secondary_web_microsoft_endpoint');
    }
    // secondary_web_microsoft_host - computed: true, optional: false, required: false
    get secondaryWebMicrosoftHost() {
        return this.getStringAttribute('secondary_web_microsoft_host');
    }
    get sftpEnabled() {
        return this.getBooleanAttribute('sftp_enabled');
    }
    set sftpEnabled(value) {
        this._sftpEnabled = value;
    }
    resetSftpEnabled() {
        this._sftpEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sftpEnabledInput() {
        return this._sftpEnabled;
    }
    get sharedAccessKeyEnabled() {
        return this.getBooleanAttribute('shared_access_key_enabled');
    }
    set sharedAccessKeyEnabled(value) {
        this._sharedAccessKeyEnabled = value;
    }
    resetSharedAccessKeyEnabled() {
        this._sharedAccessKeyEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sharedAccessKeyEnabledInput() {
        return this._sharedAccessKeyEnabled;
    }
    get tableEncryptionKeyType() {
        return this.getStringAttribute('table_encryption_key_type');
    }
    set tableEncryptionKeyType(value) {
        this._tableEncryptionKeyType = value;
    }
    resetTableEncryptionKeyType() {
        this._tableEncryptionKeyType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tableEncryptionKeyTypeInput() {
        return this._tableEncryptionKeyType;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get azureFilesAuthentication() {
        return this._azureFilesAuthentication;
    }
    putAzureFilesAuthentication(value) {
        this._azureFilesAuthentication.internalValue = value;
    }
    resetAzureFilesAuthentication() {
        this._azureFilesAuthentication.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get azureFilesAuthenticationInput() {
        return this._azureFilesAuthentication.internalValue;
    }
    get blobProperties() {
        return this._blobProperties;
    }
    putBlobProperties(value) {
        this._blobProperties.internalValue = value;
    }
    resetBlobProperties() {
        this._blobProperties.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get blobPropertiesInput() {
        return this._blobProperties.internalValue;
    }
    get customDomain() {
        return this._customDomain;
    }
    putCustomDomain(value) {
        this._customDomain.internalValue = value;
    }
    resetCustomDomain() {
        this._customDomain.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customDomainInput() {
        return this._customDomain.internalValue;
    }
    get customerManagedKey() {
        return this._customerManagedKey;
    }
    putCustomerManagedKey(value) {
        this._customerManagedKey.internalValue = value;
    }
    resetCustomerManagedKey() {
        this._customerManagedKey.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customerManagedKeyInput() {
        return this._customerManagedKey.internalValue;
    }
    get identity() {
        return this._identity;
    }
    putIdentity(value) {
        this._identity.internalValue = value;
    }
    resetIdentity() {
        this._identity.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get identityInput() {
        return this._identity.internalValue;
    }
    get immutabilityPolicy() {
        return this._immutabilityPolicy;
    }
    putImmutabilityPolicy(value) {
        this._immutabilityPolicy.internalValue = value;
    }
    resetImmutabilityPolicy() {
        this._immutabilityPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get immutabilityPolicyInput() {
        return this._immutabilityPolicy.internalValue;
    }
    get networkRules() {
        return this._networkRules;
    }
    putNetworkRules(value) {
        this._networkRules.internalValue = value;
    }
    resetNetworkRules() {
        this._networkRules.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkRulesInput() {
        return this._networkRules.internalValue;
    }
    get queueProperties() {
        return this._queueProperties;
    }
    putQueueProperties(value) {
        this._queueProperties.internalValue = value;
    }
    resetQueueProperties() {
        this._queueProperties.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queuePropertiesInput() {
        return this._queueProperties.internalValue;
    }
    get routing() {
        return this._routing;
    }
    putRouting(value) {
        this._routing.internalValue = value;
    }
    resetRouting() {
        this._routing.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get routingInput() {
        return this._routing.internalValue;
    }
    get sasPolicy() {
        return this._sasPolicy;
    }
    putSasPolicy(value) {
        this._sasPolicy.internalValue = value;
    }
    resetSasPolicy() {
        this._sasPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sasPolicyInput() {
        return this._sasPolicy.internalValue;
    }
    get shareProperties() {
        return this._shareProperties;
    }
    putShareProperties(value) {
        this._shareProperties.internalValue = value;
    }
    resetShareProperties() {
        this._shareProperties.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sharePropertiesInput() {
        return this._shareProperties.internalValue;
    }
    get staticWebsite() {
        return this._staticWebsite;
    }
    putStaticWebsite(value) {
        this._staticWebsite.internalValue = value;
    }
    resetStaticWebsite() {
        this._staticWebsite.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get staticWebsiteInput() {
        return this._staticWebsite.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            access_tier: cdktf.stringToTerraform(this._accessTier),
            account_kind: cdktf.stringToTerraform(this._accountKind),
            account_replication_type: cdktf.stringToTerraform(this._accountReplicationType),
            account_tier: cdktf.stringToTerraform(this._accountTier),
            allow_nested_items_to_be_public: cdktf.booleanToTerraform(this._allowNestedItemsToBePublic),
            allowed_copy_scope: cdktf.stringToTerraform(this._allowedCopyScope),
            cross_tenant_replication_enabled: cdktf.booleanToTerraform(this._crossTenantReplicationEnabled),
            default_to_oauth_authentication: cdktf.booleanToTerraform(this._defaultToOauthAuthentication),
            edge_zone: cdktf.stringToTerraform(this._edgeZone),
            enable_https_traffic_only: cdktf.booleanToTerraform(this._enableHttpsTrafficOnly),
            id: cdktf.stringToTerraform(this._id),
            infrastructure_encryption_enabled: cdktf.booleanToTerraform(this._infrastructureEncryptionEnabled),
            is_hns_enabled: cdktf.booleanToTerraform(this._isHnsEnabled),
            large_file_share_enabled: cdktf.booleanToTerraform(this._largeFileShareEnabled),
            local_user_enabled: cdktf.booleanToTerraform(this._localUserEnabled),
            location: cdktf.stringToTerraform(this._location),
            min_tls_version: cdktf.stringToTerraform(this._minTlsVersion),
            name: cdktf.stringToTerraform(this._name),
            nfsv3_enabled: cdktf.booleanToTerraform(this._nfsv3Enabled),
            public_network_access_enabled: cdktf.booleanToTerraform(this._publicNetworkAccessEnabled),
            queue_encryption_key_type: cdktf.stringToTerraform(this._queueEncryptionKeyType),
            resource_group_name: cdktf.stringToTerraform(this._resourceGroupName),
            sftp_enabled: cdktf.booleanToTerraform(this._sftpEnabled),
            shared_access_key_enabled: cdktf.booleanToTerraform(this._sharedAccessKeyEnabled),
            table_encryption_key_type: cdktf.stringToTerraform(this._tableEncryptionKeyType),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            azure_files_authentication: storageAccountAzureFilesAuthenticationToTerraform(this._azureFilesAuthentication.internalValue),
            blob_properties: storageAccountBlobPropertiesToTerraform(this._blobProperties.internalValue),
            custom_domain: storageAccountCustomDomainToTerraform(this._customDomain.internalValue),
            customer_managed_key: storageAccountCustomerManagedKeyToTerraform(this._customerManagedKey.internalValue),
            identity: storageAccountIdentityToTerraform(this._identity.internalValue),
            immutability_policy: storageAccountImmutabilityPolicyToTerraform(this._immutabilityPolicy.internalValue),
            network_rules: storageAccountNetworkRulesToTerraform(this._networkRules.internalValue),
            queue_properties: storageAccountQueuePropertiesToTerraform(this._queueProperties.internalValue),
            routing: storageAccountRoutingToTerraform(this._routing.internalValue),
            sas_policy: storageAccountSasPolicyToTerraform(this._sasPolicy.internalValue),
            share_properties: storageAccountSharePropertiesToTerraform(this._shareProperties.internalValue),
            static_website: storageAccountStaticWebsiteToTerraform(this._staticWebsite.internalValue),
            timeouts: storageAccountTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            access_tier: {
                value: cdktf.stringToHclTerraform(this._accessTier),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            account_kind: {
                value: cdktf.stringToHclTerraform(this._accountKind),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            account_replication_type: {
                value: cdktf.stringToHclTerraform(this._accountReplicationType),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            account_tier: {
                value: cdktf.stringToHclTerraform(this._accountTier),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            allow_nested_items_to_be_public: {
                value: cdktf.booleanToHclTerraform(this._allowNestedItemsToBePublic),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            allowed_copy_scope: {
                value: cdktf.stringToHclTerraform(this._allowedCopyScope),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            cross_tenant_replication_enabled: {
                value: cdktf.booleanToHclTerraform(this._crossTenantReplicationEnabled),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            default_to_oauth_authentication: {
                value: cdktf.booleanToHclTerraform(this._defaultToOauthAuthentication),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            edge_zone: {
                value: cdktf.stringToHclTerraform(this._edgeZone),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            enable_https_traffic_only: {
                value: cdktf.booleanToHclTerraform(this._enableHttpsTrafficOnly),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            infrastructure_encryption_enabled: {
                value: cdktf.booleanToHclTerraform(this._infrastructureEncryptionEnabled),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            is_hns_enabled: {
                value: cdktf.booleanToHclTerraform(this._isHnsEnabled),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            large_file_share_enabled: {
                value: cdktf.booleanToHclTerraform(this._largeFileShareEnabled),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            local_user_enabled: {
                value: cdktf.booleanToHclTerraform(this._localUserEnabled),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            location: {
                value: cdktf.stringToHclTerraform(this._location),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            min_tls_version: {
                value: cdktf.stringToHclTerraform(this._minTlsVersion),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            nfsv3_enabled: {
                value: cdktf.booleanToHclTerraform(this._nfsv3Enabled),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            public_network_access_enabled: {
                value: cdktf.booleanToHclTerraform(this._publicNetworkAccessEnabled),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            queue_encryption_key_type: {
                value: cdktf.stringToHclTerraform(this._queueEncryptionKeyType),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            resource_group_name: {
                value: cdktf.stringToHclTerraform(this._resourceGroupName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            sftp_enabled: {
                value: cdktf.booleanToHclTerraform(this._sftpEnabled),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            shared_access_key_enabled: {
                value: cdktf.booleanToHclTerraform(this._sharedAccessKeyEnabled),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            table_encryption_key_type: {
                value: cdktf.stringToHclTerraform(this._tableEncryptionKeyType),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            tags: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tags),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            azure_files_authentication: {
                value: storageAccountAzureFilesAuthenticationToHclTerraform(this._azureFilesAuthentication.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "StorageAccountAzureFilesAuthenticationList",
            },
            blob_properties: {
                value: storageAccountBlobPropertiesToHclTerraform(this._blobProperties.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "StorageAccountBlobPropertiesList",
            },
            custom_domain: {
                value: storageAccountCustomDomainToHclTerraform(this._customDomain.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "StorageAccountCustomDomainList",
            },
            customer_managed_key: {
                value: storageAccountCustomerManagedKeyToHclTerraform(this._customerManagedKey.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "StorageAccountCustomerManagedKeyList",
            },
            identity: {
                value: storageAccountIdentityToHclTerraform(this._identity.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "StorageAccountIdentityList",
            },
            immutability_policy: {
                value: storageAccountImmutabilityPolicyToHclTerraform(this._immutabilityPolicy.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "StorageAccountImmutabilityPolicyList",
            },
            network_rules: {
                value: storageAccountNetworkRulesToHclTerraform(this._networkRules.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "StorageAccountNetworkRulesList",
            },
            queue_properties: {
                value: storageAccountQueuePropertiesToHclTerraform(this._queueProperties.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "StorageAccountQueuePropertiesList",
            },
            routing: {
                value: storageAccountRoutingToHclTerraform(this._routing.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "StorageAccountRoutingList",
            },
            sas_policy: {
                value: storageAccountSasPolicyToHclTerraform(this._sasPolicy.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "StorageAccountSasPolicyList",
            },
            share_properties: {
                value: storageAccountSharePropertiesToHclTerraform(this._shareProperties.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "StorageAccountSharePropertiesList",
            },
            static_website: {
                value: storageAccountStaticWebsiteToHclTerraform(this._staticWebsite.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "StorageAccountStaticWebsiteList",
            },
            timeouts: {
                value: storageAccountTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "StorageAccountTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.StorageAccount = StorageAccount;
// =================
// STATIC PROPERTIES
// =================
StorageAccount.tfResourceType = "azurerm_storage_account";
//# sourceMappingURL=data:application/json;base64,