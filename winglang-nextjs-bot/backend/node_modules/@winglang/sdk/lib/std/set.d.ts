import { Array } from "./array";
import { T1 } from "./generics";
/**
 * Immutable Set
 *
 * @typeparam T1
 */
export declare class Set {
    /**
     * @internal
     */
    static _toInflightType(): string;
    private constructor();
    /**
     * The length of the set
     * @returns the length of the set
     */
    get size(): number;
    /**
     * Returns a boolean indicating whether an element with the specified value exists in the set.
     * @param value The value to test for presence in the Set object.
     * @returns `true` if an element with the specified value exists in the set; otherwise `false`.
     */
    has(value: T1): boolean;
    /**
     * Create a mutable shallow copy of this set
     *
     * @macro new Set($self$)
     *
     * @returns a MutableSet with the same values as this set
     */
    copyMut(): MutSet;
    /**
     * Create an immutable array shallow copy of this set
     *
     * @macro [...($self$)]
     *
     * @returns an ImmutableArray with the same values as this set
     */
    toArray(): Array;
}
/**
 * Mutable Set
 *
 * @typeparam T1
 */
export declare class MutSet {
    /**
     * @internal
     */
    static _toInflightType(): string;
    private constructor();
    /**
     * The length of the set
     * @returns the length of the set
     */
    get size(): number;
    /**
     * Add value to set
     * @param value value to add
     * @returns true if the value was added, false if it was already in the set
     */
    add(value: T1): MutSet;
    /**
     * The clear() method removes all elements from a set.
     */
    clear(): void;
    /**
     * Create an immutable shallow copy of this set
     *
     * @macro new Set($self$)
     *
     * @returns an ImmutableSet with the same values as this set
     */
    copy(): Set;
    /**
     * Removes a specified value from a set, if it is in the set.
     * @param value The value to remove from the set.
     * @returns Returns `true` if `value` was already in the set; otherwise `false`.
     */
    delete(value: T1): boolean;
    /**
     * Returns a boolean indicating whether an element with the specified value exists in the set.
     * @param value The value to test for presence in the Set object.
     * @returns `true` if an element with the specified value exists in the set; otherwise `false`.
     */
    has(value: T1): boolean;
    /**
     * Create an immutable array shallow copy of this set
     *
     * @macro [...($self$)]
     *
     * @returns an ImmutableArray with the same values as this set
     */
    toArray(): Array;
}
