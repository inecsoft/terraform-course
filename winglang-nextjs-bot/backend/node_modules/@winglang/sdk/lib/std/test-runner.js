"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestRunnerInflightMethods = exports.TraceType = exports.LogLevel = exports.TestRunner = exports.TEST_RUNNER_FQN = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const resource_1 = require("./resource");
const test_1 = require("./test");
const cloud_1 = require("../cloud");
const constants_1 = require("../constants");
const std_1 = require("../std");
/**
 * Global identifier for `TestRunner`.
 */
exports.TEST_RUNNER_FQN = (0, constants_1.fqnForType)("std.TestRunner");
/**
 * A test engine.
 *
 * @inflight `@winglang/sdk.std.ITestRunnerClient`
 * @skipDocs
 * @abstract
 */
class TestRunner extends resource_1.Resource {
    /**
     * Instantiate one or more copies of a tree inside of an app based
     * on how many isolated environments are needed for testing.
     * @internal
     */
    static _createTree(app, Root) {
        if (app.isTestEnvironment) {
            app._testRunner = new TestRunner(app, "cloud.TestRunner");
        }
        if (Root) {
            // mark the root type so that we can find it later through
            // Node.of(root).root
            std_1.Node._markRoot(Root);
            if (app.isTestEnvironment) {
                new Root(app, "env0");
                const tests = app._testRunner.findTests();
                for (let i = 1; i < tests.length; i++) {
                    new Root(app, "env" + i);
                }
            }
            else {
                new Root(app, "Default");
            }
        }
    }
    constructor(scope, id, props = {}) {
        if (new.target === TestRunner) {
            return resource_1.Resource._newFromFactory(exports.TEST_RUNNER_FQN, scope, id, props);
        }
        super(scope, id);
        /**
         * List of isolated environment names where we've already created a cloud.Function
         * for a unit test. We keep track of these so that we don't synthesize
         * multiple test functions into the same isolated environment.
         */
        this._synthedEnvs = new Set();
        /**
         * List of test paths that we have already created a cloud.Function for.
         * We keep track of these so that we don't create identical test functions in multiple
         * isolated environments.
         */
        this._synthedTests = new Set();
        std_1.Node.of(this).hidden = true;
        std_1.Node.of(this).title = "TestRunner";
        std_1.Node.of(this).description =
            "A suite of APIs for running tests and collecting results.";
        props;
    }
    /** @internal */
    _addTestFunction(scope, id, inflight, props) {
        // searching exactly for `env${number}`
        const testEnv = scope.node.path.match(/env[0-9]+/)?.at(0);
        // searching for the rest of the path that appears after `env${number}`- this would be the test path
        const testPath = scope.node.path
            .match(/env[\d]+\/.+/)
            ?.at(0)
            .replace(`${testEnv}/`, "") +
            "/" +
            id;
        if (!this._synthedEnvs.has(testEnv) && !this._synthedTests.has(testPath)) {
            this._synthedEnvs.add(testEnv);
            this._synthedTests.add(testPath);
            return new cloud_1.Function(scope, id, inflight, props);
        }
        return undefined;
    }
    /** @internal */
    get _liftMap() {
        return {
            [TestRunnerInflightMethods.LIST_TESTS]: [],
            [TestRunnerInflightMethods.RUN_TEST]: [],
        };
    }
    /**
     * Find all tests in the construct tree.
     * @returns A list of tests.
     */
    findTests() {
        const isTest = (fn) => {
            return fn instanceof test_1.Test;
        };
        return this.node.root.node.findAll().filter(isTest);
    }
}
exports.TestRunner = TestRunner;
_a = JSII_RTTI_SYMBOL_1;
TestRunner[_a] = { fqn: "@winglang/sdk.std.TestRunner", version: "0.0.0" };
/**
 * Log level
 */
var LogLevel;
(function (LogLevel) {
    /**
     * Mostly used for debugging
     */
    LogLevel["VERBOSE"] = "verbose";
    /**
     * Information that is useful to developers
     */
    LogLevel["INFO"] = "info";
    /**
     * Warnings that are not errors, but may require attention
     */
    LogLevel["WARNING"] = "warning";
    /**
     * Errors that should be addressed
     */
    LogLevel["ERROR"] = "error";
})(LogLevel || (exports.LogLevel = LogLevel = {}));
/**
 * The type of a trace.
 * @skipDocs
 */
var TraceType;
(function (TraceType) {
    /**
     * A trace representing simulator activity.
     */
    TraceType["SIMULATOR"] = "simulator";
    /**
     * A trace representing a resource activity.
     */
    TraceType["RESOURCE"] = "resource";
    /**
     * A trace representing a message emitted by the logger.
     */
    TraceType["LOG"] = "log";
})(TraceType || (exports.TraceType = TraceType = {}));
/**
 * List of inflight operations available for `TestRunner`.
 * @internal
 */
var TestRunnerInflightMethods;
(function (TestRunnerInflightMethods) {
    /** `TestRunner.runTest` */
    TestRunnerInflightMethods["RUN_TEST"] = "runTest";
    /** `TestRunner.listTests` */
    TestRunnerInflightMethods["LIST_TESTS"] = "listTests";
})(TestRunnerInflightMethods || (exports.TestRunnerInflightMethods = TestRunnerInflightMethods = {}));
//# sourceMappingURL=data:application/json;base64,