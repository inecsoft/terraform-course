"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MutMap = exports.Map = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const core_1 = require("../core");
/**
 * Immutable Map
 *
 * @typeparam T1
 */
class Map {
    /**
     * @internal
     */
    static _toInflightType() {
        return core_1.InflightClient.forType(__filename, this.name);
    }
    constructor() { }
    /**
     * Returns the number of elements in the map.
     *
     * TODO: For now this has to be a method rather than a getter as macros only work on methods https://github.com/winglang/wing/issues/1658
     * @macro Object.keys($self$).length
     *
     * @returns The number of elements in map
     */
    size() {
        throw new Error("Macro");
    }
    /**
     * Returns a specified element from the map.
     *
     * If the value that is associated to the provided key is an object, then you will get a reference
     * to that object and any change made to that object will effectively modify it inside the map.
     *
     * @macro ((obj, key) => { if (!(key in obj)) throw new Error(`Map does not contain key: "${key}"`); return obj[key]; })($self$, $args$)
     *
     * @param key The key of the element to return.
     * @returns The element associated with the specified key, or throw an error if the key can't be found
     */
    get(key) {
        key;
        throw new Error("Macro");
    }
    /**
     * Optionally returns a specified element from the map.
     *
     * @macro ($self$)[$args$]
     *
     * @param key The key of the element to return.
     * @returns The element associated with the specified key, or undefined if the key can't be found
     */
    tryGet(key) {
        key;
        throw new Error("Macro");
    }
    /**
     * Returns a boolean indicating whether an element with the specified key exists or not.
     *
     * @macro ($args$ in ($self$))
     *
     * @param key The key of the element to test for presence
     * @returns true if an element with the specified key exists in the map; otherwise false.
     */
    has(key) {
        key;
        throw new Error("Macro");
    }
    /**
     * Create a mutable shallow copy of this map
     *
     * @macro {...($self$)}
     *
     * @returns a MutableMap with the same values as this map
     */
    copyMut() {
        throw new Error("Macro");
    }
    /**
     * Returns the keys of this map
     *
     * @macro Object.keys($self$)
     *
     * @returns an array containing the keys of this map
     */
    keys() {
        throw new Error("Macro");
    }
    /**
     * Returns the values of this map
     *
     * @macro Object.values($self$)
     *
     * @returns an array of type T containing the values of this map
     */
    values() {
        throw new Error("Macro");
    }
    /**
     * Returns the entries from the map.
     *
     * @macro Object.entries($self$).map(([key, value]) => ({ key, value }))
     *
     * @returns the entries as Array<ArrayEntry>
     */
    entries() {
        throw new Error("Macro");
    }
}
exports.Map = Map;
_a = JSII_RTTI_SYMBOL_1;
Map[_a] = { fqn: "@winglang/sdk.std.Map", version: "0.0.0" };
/**
 * Mutable Map
 *
 * @typeparam T1
 */
class MutMap {
    /**
     * @internal
     */
    static _toInflightType() {
        return core_1.InflightClient.forType(__filename, this.name);
    }
    constructor() { }
    /**
     * Returns the number of elements in the map.
     *
     * TODO: For now this has to be a method rather than a getter as macros only work on methods https://github.com/winglang/wing/issues/1658
     * @macro Object.keys($self$).length
     *
     * @returns The number of elements in map
     */
    size() {
        throw new Error("Macro");
    }
    /**
     * Removes all elements
     *
     * @macro ((map) => { for(const k in map){delete map[k]}; })($self$)
     */
    clear() {
        throw new Error("Macro");
    }
    /**
     * Create an immutable shallow copy of this map
     *
     * @macro ({...($self$)})
     *
     * @returns an ImmutableMap with the same values as this map
     */
    copy() {
        throw new Error("Macro");
    }
    /**
     * Removes the specified element from a map.
     *
     * @macro (delete ($self$)[$args$])
     *
     * @param key The key
     * @returns true if the given key is no longer present
     */
    delete(key) {
        key;
        throw new Error("Macro");
    }
    /**
     * Returns a specified element from the map.
     *
     * If the value that is associated to the provided key is an object, then you will get a reference
     * to that object and any change made to that object will effectively modify it inside the map.
     *
     * @macro ((obj, key) => { if (!(key in obj)) throw new Error(`MutMap does not contain key: "${key}"`); return obj[key]; })($self$, $args$)
     *
     * @param key The key of the element to return.
     * @returns The element associated with the specified key, or throw an error if the key can't be found
     */
    get(key) {
        key;
        throw new Error("Macro");
    }
    /**
     * Optionally returns a specified element from the map.
     *
     * @macro ($self$)[$args$]
     *
     * @param key The key of the element to return.
     * @returns The element associated with the specified key, or undefined if the key can't be found
     */
    tryGet(key) {
        key;
        throw new Error("Macro");
    }
    /**
     * Returns a boolean indicating whether an element with the specified key exists or not.
     *
     * @macro ($args$ in ($self$))
     *
     * @param key The key of the element to test for presence
     * @returns true if an element with the specified key exists in the map; otherwise false.
     */
    has(key) {
        key;
        throw new Error("Macro");
    }
    /**
     * Adds or updates an entry in a Map object with a specified key and a value.
     *
     * TODO: revisit this macro after we support indexed args https://github.com/winglang/wing/issues/1659
     * @macro ((obj, args) => { obj[args[0]] = args[1]; })($self$, [$args$])
     *
     * @param key The key of the element to add
     * @param value The value of the element to add
     */
    set(key, value) {
        key;
        value;
        throw new Error("Macro");
    }
    /**
     * Returns the keys of this map
     *
     * @macro Object.keys($self$)
     *
     * @returns an array containing the keys of this map
     */
    keys() {
        throw new Error("Macro");
    }
    /**
     * Returns the values of this map
     *
     * @macro Object.values($self$)
     *
     * @returns an array containing of type T the values of this map
     */
    values() {
        throw new Error("Macro");
    }
    /**
     * Returns the entries from the map.
     *
     * @macro Object.entries($self$).map(([key, value]) => ({ key, value }))
     *
     * @returns the entries as Array<ArrayEntry>
     */
    entries() {
        throw new Error("Macro");
    }
}
exports.MutMap = MutMap;
_b = JSII_RTTI_SYMBOL_1;
MutMap[_b] = { fqn: "@winglang/sdk.std.MutMap", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,