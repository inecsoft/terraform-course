import { T1 } from "./generics";
import { Json, JsonValidationOptions } from "./json";
import { JsonSchema } from "./json_schema";
/**
 * Shared behavior for all structs
 *
 * @typeparam T1
 */
export declare class Struct {
    /**
     * @internal
     */
    static _toInflightType(): string;
    /**
     * Converts a Json to a Struct
     *
     * @macro $self$._fromJson($args$)
     */
    static fromJson(json: Json, options?: JsonValidationOptions): T1;
    /**
     * Converts a Json to a Struct, returning nil if the Json is not valid
     *
     * @macro $self$._tryFromJson($args$)
     */
    static tryFromJson(json: Json): T1 | undefined;
    /**
     * Parse a Json string into a Struct
     *
     * @macro $self$._fromJson(JSON.parse($args$))
     */
    static parseJson(json: string): T1;
    /**
     * Parse a Json string into a Struct, returning nil if the Json is not valid
     *
     * @macro $self$._tryParseJson($args$)
     */
    static tryParseJson(json: string | undefined): T1 | undefined;
    /**
     * Retrieve the schema for this struct
     * @macro $self$
     */
    static schema(): JsonSchema;
    /**
     * Create an instance of a StructSchema from a JsonSchema
     *
     * @internal
     */
    static _createJsonSchema(schema: Json): JsonSchema;
    private constructor();
}
