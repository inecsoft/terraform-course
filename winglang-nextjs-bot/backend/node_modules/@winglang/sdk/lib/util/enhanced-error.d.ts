import type Chalk from "chalk";
export interface PrettyPrintErrorOptions {
    /**
     * The source entrypoint. If provided, the stack trace will only show source files that are in the same directory or its subdirectories.
     * It will also exclude files in a `target` subdirectory.
     */
    sourceEntrypoint?: string;
    /**
     * "chalk" instance to format output.
     * If provided, ANSI color and format will be used.
     */
    chalk?: typeof Chalk;
    /**
     * If true, will force reload all sources.
     */
    resetCache?: boolean;
}
/**
 * Pretty print an error, rewrites stack traces with sourcemaps, shows line that caused the error, and add general formatting.
 * This function has some special handling for winglang-based errors, but can be used whether winglang is used or not.
 * @param error An error object or a simple error string. If the string contains a stacktrace, it will be rewritten.
 * @param options Display options
 * @returns a pretty printed error, containing ANSI formatting if color is enabled
 */
export declare function prettyPrintError(error: Error | string, options?: PrettyPrintErrorOptions): Promise<string>;
export declare function rewriteCommonError(error: Error): Error;
export declare function dedent(lines: string[]): string[];
