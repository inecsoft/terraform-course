import { Output, SpawnOptions } from "./util";
/**
 * Handle to a running child process.
 */
export declare class ChildProcess {
    /**
     * @internal
     */
    static _toInflightType(): string;
    /**
     * The underlying native child process object representing the spawned process.
     */
    private readonly child;
    /**
     * The child's OS-assigned process ID.
     */
    readonly pid: number | undefined;
    /**
     * The accumulated standard output from the child process.
     */
    private stdout;
    /**
     * The accumulated standard error from the child process.
     */
    private stderr;
    /**
     * The exit status of the child process. Null if the process has not yet finished.
     */
    private exitStatus;
    constructor(program: string, args: string[], opts?: SpawnOptions);
    /**
     * Kill the process.
     * @param signal - the signal to send to the process (defaults to SIGTERM)
     */
    kill(signal?: number): void;
    /**
     * Wait for the process to finish and return its output.
     * Calling this method multiple times will return the same output.
     */
    wait(): Promise<Output>;
}
