"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Counter = exports.StorageAccountPermissions = void 0;
const app_1 = require("./app");
const function_1 = require("./function");
const storage_table_1 = require("../.gen/providers/azurerm/storage-table");
const cloud = __importStar(require("../cloud"));
const core = __importStar(require("../core"));
const resource_names_1 = require("../shared/resource-names");
/**
 * - Table names must be unique within an account.
 * - Table names may contain only alphanumeric characters.
 * - Table names cannot begin with a numeric character.
 * - Table names are case-insensitive.
 * - Table names must be from 3 to 63 characters long.
 * - Some table names are reserved, including "tables".
 *   Attempting to create a table with a reserved table name returns error code 404 (Bad Request).
 *
 * @see https://learn.microsoft.com/en-us/rest/api/storageservices/understanding-the-table-service-data-model#table-names
 */
const TABLE_NAME_OPTS = {
    maxLen: 63,
    case: resource_names_1.CaseConventions.LOWERCASE,
    disallowedRegex: /(^[^a-z])|([^a-z0-9])/g,
    sep: "x",
};
/**
 * Azure bult-in storage account permissions.
 */
var StorageAccountPermissions;
(function (StorageAccountPermissions) {
    /** Read only permission */
    StorageAccountPermissions["READ"] = "Storage Table Data Reader";
    /** Read write permission */
    StorageAccountPermissions["READ_WRITE"] = "Storage Table Data Contributor";
})(StorageAccountPermissions || (exports.StorageAccountPermissions = StorageAccountPermissions = {}));
/**
 * Azure implementation of `cloud.Counter`.
 *
 * @inflight `@winglang/sdk.cloud.ICounterClient`
 */
class Counter extends cloud.Counter {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        const app = app_1.App.of(this);
        this.storageAccount = app.storageAccount;
        const storageTableName = resource_names_1.ResourceNames.generateName(this, TABLE_NAME_OPTS);
        this.storageTable = new storage_table_1.StorageTable(this, "CounterTable", {
            name: storageTableName,
            storageAccountName: this.storageAccount.name,
        });
    }
    /** @internal */
    get _liftMap() {
        return {
            [cloud.CounterInflightMethods.INC]: [],
            [cloud.CounterInflightMethods.DEC]: [],
            [cloud.CounterInflightMethods.SET]: [],
            [cloud.CounterInflightMethods.PEEK]: [],
        };
    }
    onLift(host, ops) {
        if (!(host instanceof function_1.Function)) {
            throw new Error("counters can only be bound by tfazure.Function for now");
        }
        // TODO: investigate customized roles over builtin for finer grained access control: https://github.com/winglang/wing/issues/5598
        if (ops.includes(cloud.CounterInflightMethods.PEEK)) {
            host.addPermission(this.storageAccount, {
                scope: this.storageAccount.id,
                roleDefinitionName: StorageAccountPermissions.READ,
            });
        }
        else if (ops.includes(cloud.CounterInflightMethods.INC) ||
            ops.includes(cloud.CounterInflightMethods.DEC) ||
            ops.includes(cloud.CounterInflightMethods.SET)) {
            host.addPermission(this.storageAccount, {
                scope: this.storageAccount.id,
                roleDefinitionName: StorageAccountPermissions.READ_WRITE,
            });
        }
        host.addEnvironment(this.envAccountKeyVariable(), this.storageAccount.primaryAccessKey);
        host.addEnvironment(this.envStorageAccountName(), this.storageAccount.name);
        host.addEnvironment(this.envStorageTableName(), this.storageTable.name);
        super.onLift(host, ops);
    }
    /** @internal */
    _toInflight() {
        return core.InflightClient.for(__dirname.replace("target-tf-azure", "shared-azure"), __filename, "CounterClient", [
            `process.env["${this.envStorageAccountName()}"]`,
            `process.env["${this.envStorageTableName()}"]`,
            `"${this.envAccountKeyVariable()}"`,
            `${this.initial}`,
        ]);
    }
    envStorageAccountName() {
        return `STORAGE_ACCOUNT_${this.storageTable.node.addr.slice(-8)}`;
    }
    envAccountKeyVariable() {
        return `STORAGE_ACCOUNT_KEY_${this.storageTable.node.addr.slice(-8)}`;
    }
    envStorageTableName() {
        return `TABLE_NAME_${this.storageTable.node.addr.slice(-8)}`;
    }
}
exports.Counter = Counter;
//# sourceMappingURL=data:application/json;base64,