import { Construct } from "constructs";
import * as cloud from "../cloud";
import { LiftMap } from "../core";
import { IInflightHost } from "../std";
/**
 * Azure scoped role assignment.
 */
export interface ScopedRoleAssignment {
    /** The azure scope ie. /subscription/xxxxx/yyyyy/zzz */
    readonly scope: string;
    /** Role definition to assign */
    readonly roleDefinitionName: string;
}
/**
 * Azure implementation of `cloud.Function`.
 *
 * @inflight `@winglang/sdk.cloud.IFunctionClient`
 */
export declare class Function extends cloud.Function {
    private readonly function;
    private readonly servicePlan;
    private readonly storageAccount;
    private readonly resourceGroup;
    private readonly applicationInsights;
    private permissions;
    private readonly functionName;
    private assetPath;
    constructor(scope: Construct, id: string, inflight: cloud.IFunctionHandler, props?: cloud.FunctionProps);
    /** @internal */
    _preSynthesize(): void;
    /**
     * Function name, used for invocation
     */
    get name(): string;
    /**
     *  Adds role to function for given azure scope
     *
     * @param scopedResource - The resource to which the role assignment will be scoped.
     * @param scopedRoleAssignment - The mapping of azure scope to role definition name.
     */
    addPermission(scopedResource: Construct, scopedRoleAssignment: ScopedRoleAssignment): void;
    protected _getCodeLines(handler: cloud.IFunctionHandler): string[];
    /** @internal */
    get _liftMap(): LiftMap;
    onLift(host: IInflightHost, ops: string[]): void;
    /** @internal */
    _toInflight(): string;
    private envName;
}
