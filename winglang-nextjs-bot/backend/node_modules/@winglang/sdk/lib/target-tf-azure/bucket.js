"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bucket = exports.StorageAccountPermissions = void 0;
const app_1 = require("./app");
const function_1 = require("./function");
const storage_blob_1 = require("../.gen/providers/azurerm/storage-blob");
const storage_container_1 = require("../.gen/providers/azurerm/storage-container");
const cloud = __importStar(require("../cloud"));
const core = __importStar(require("../core"));
const errors_1 = require("../core/errors");
const resource_names_1 = require("../shared/resource-names");
/**
 * Bucket names must be between 3 and 63 characters.
 *
 * You can use lowercase alphanumeric characters, dash (-)
 * and two or more consecutive dash characters aren't permitted.
 */
const BUCKET_NAME_OPTS = {
    maxLen: 63,
    case: resource_names_1.CaseConventions.LOWERCASE,
    disallowedRegex: /([^a-z0-9\-]+)|(\-{2,})/g,
};
/**
 * Azure bult-in storage account permissions.
 */
var StorageAccountPermissions;
(function (StorageAccountPermissions) {
    /** Read only permission */
    StorageAccountPermissions["READ"] = "Storage Blob Data Reader";
    /** Read write permission */
    StorageAccountPermissions["READ_WRITE"] = "Storage Blob Data Contributor";
})(StorageAccountPermissions || (exports.StorageAccountPermissions = StorageAccountPermissions = {}));
/**
 * Azure implementation of `cloud.Bucket`.
 *
 * @inflight `@winglang/sdk.cloud.IBucketClient`
 */
class Bucket extends cloud.Bucket {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        this.public = props.public ?? false;
        const app = app_1.App.of(this);
        this.storageAccount = app.storageAccount;
        const storageContainerName = resource_names_1.ResourceNames.generateName(this, BUCKET_NAME_OPTS);
        // name must begin and end with alphanumeric character
        if (storageContainerName.match(/(^\W{1,})|(\W{1,}$)/g)?.length) {
            throw new Error("Bucket names must begin and end with alphanumeric character.");
        }
        this.storageContainer = new storage_container_1.StorageContainer(this, "Bucket", {
            name: storageContainerName,
            storageAccountName: this.storageAccount.name,
            containerAccessType: this.public ? "blob" : "private",
        });
    }
    addObject(key, body) {
        // Blob naming conventions:
        // https://learn.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata#blob-names
        const blobName = key
            .split("/")
            .map((s) => encodeURIComponent(s))
            .join("/");
        new storage_blob_1.StorageBlob(this, `Blob-${key}`, {
            name: blobName,
            storageAccountName: this.storageAccount.name,
            storageContainerName: this.storageContainer.name,
            type: "Block",
            sourceContent: body,
        });
    }
    /** @internal */
    get _liftMap() {
        // TODO: After fixing the tests we realized that nothing is working-https://github.com/winglang/wing/issues/5123
        return {
        // [cloud.BucketInflightMethods.DELETE]: [],
        // [cloud.BucketInflightMethods.GET]: [],
        // [cloud.BucketInflightMethods.GET_JSON]: [],
        // [cloud.BucketInflightMethods.LIST]: [],
        // [cloud.BucketInflightMethods.PUT]: [],
        // [cloud.BucketInflightMethods.PUT_JSON]: [],
        // [cloud.BucketInflightMethods.EXISTS]: [],
        // [cloud.BucketInflightMethods.TRY_GET]: [],
        // [cloud.BucketInflightMethods.TRY_GET_JSON]: [],
        // [cloud.BucketInflightMethods.TRY_DELETE]: [],
        };
    }
    onLift(host, ops) {
        if (!(host instanceof function_1.Function)) {
            throw new Error("buckets can only be bound by tfazure.Function for now");
        }
        // TODO: investigate customized roles over builtin for finer grained access control: https://github.com/winglang/wing/issues/5598
        if (ops.includes(cloud.BucketInflightMethods.DELETE) ||
            ops.includes(cloud.BucketInflightMethods.TRY_DELETE) ||
            ops.includes(cloud.BucketInflightMethods.PUT) ||
            ops.includes(cloud.BucketInflightMethods.PUT_JSON)) {
            host.addPermission(this.storageAccount, {
                scope: this.storageAccount.id,
                roleDefinitionName: StorageAccountPermissions.READ_WRITE,
            });
        }
        else if (ops.includes(cloud.BucketInflightMethods.GET) ||
            ops.includes(cloud.BucketInflightMethods.LIST) ||
            ops.includes(cloud.BucketInflightMethods.GET_JSON) ||
            ops.includes(cloud.BucketInflightMethods.PUBLIC_URL) ||
            ops.includes(cloud.BucketInflightMethods.TRY_GET) ||
            ops.includes(cloud.BucketInflightMethods.TRY_GET_JSON) ||
            ops.includes(cloud.BucketInflightMethods.EXISTS)) {
            host.addPermission(this.storageAccount, {
                scope: this.storageAccount.id,
                roleDefinitionName: StorageAccountPermissions.READ,
            });
        }
        host.addEnvironment(this.envName(), this.storageContainer.name);
        host.addEnvironment(this.envStorageAccountName(), this.storageAccount.name);
        super.onLift(host, ops);
    }
    /**
     * Run an inflight whenever a file is uploaded to the bucket.
     */
    onCreate(fn, opts) {
        fn;
        opts;
        throw new errors_1.NotImplementedError("onCreate method isn't implemented yet on the current target.", {
            issue: "https://github.com/winglang/wing/issues/1954",
            resource: this.constructor.name,
            operation: cloud.BucketEventType.CREATE,
        });
    }
    /**
     * Run an inflight whenever a file is deleted from the bucket.
     */
    onDelete(fn, opts) {
        fn;
        opts;
        throw new errors_1.NotImplementedError("onDelete method isn't implemented yet on the current target.", {
            issue: "https://github.com/winglang/wing/issues/1954",
            resource: this.constructor.name,
            operation: cloud.BucketEventType.DELETE,
        });
    }
    /**
     * Run an inflight whenever a file is updated in the bucket.
     */
    onUpdate(fn, opts) {
        fn;
        opts;
        throw new errors_1.NotImplementedError("onUpdate method isn't implemented yet on the current target.", {
            issue: "https://github.com/winglang/wing/issues/1954",
            resource: this.constructor.name,
            operation: cloud.BucketEventType.UPDATE,
        });
    }
    /**
     * Run an inflight whenever a file is uploaded, modified, or deleted from the bucket.
     */
    onEvent(fn, opts) {
        fn;
        opts;
        throw new errors_1.NotImplementedError("onEvent method isn't implemented yet on the current target.", {
            issue: "https://github.com/winglang/wing/issues/1954",
            resource: this.constructor.name,
            operation: "onEvent",
        });
    }
    /** @internal */
    _toInflight() {
        return core.InflightClient.for(__dirname.replace("target-tf-azure", "shared-azure"), __filename, "BucketClient", [
            `process.env["${this.envName()}"]`,
            `process.env["${this.envStorageAccountName()}"]`,
        ]);
    }
    envName() {
        return `BUCKET_NAME_${this.storageContainer.node.addr.slice(-8)}`;
    }
    envStorageAccountName() {
        return `STORAGE_ACCOUNT_${this.storageContainer.node.addr.slice(-8)}`;
    }
}
exports.Bucket = Bucket;
//# sourceMappingURL=data:application/json;base64,