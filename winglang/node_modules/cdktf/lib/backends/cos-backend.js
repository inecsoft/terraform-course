"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataTerraformRemoteStateCos = exports.CosBackend = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const terraform_backend_1 = require("../terraform-backend");
const util_1 = require("../util");
const terraform_remote_state_1 = require("../terraform-remote-state");
// eslint-disable-next-line jsdoc/require-jsdoc
class CosBackend extends terraform_backend_1.TerraformBackend {
    constructor(scope, props) {
        super(scope, "backend", "cos");
        this.props = props;
    }
    synthesizeAttributes() {
        return (0, util_1.keysToSnakeCase)({ ...this.props });
    }
    synthesizeHclAttributes() {
        return (0, util_1.keysToSnakeCase)({ ...this.props });
    }
    getRemoteStateDataSource(scope, name, _fromStack) {
        return new DataTerraformRemoteStateCos(scope, name, {
            ...this.props,
            workspace: "${terraform.workspace}",
        });
    }
}
exports.CosBackend = CosBackend;
_a = JSII_RTTI_SYMBOL_1;
CosBackend[_a] = { fqn: "cdktf.CosBackend", version: "0.20.7" };
// eslint-disable-next-line jsdoc/require-jsdoc
class DataTerraformRemoteStateCos extends terraform_remote_state_1.TerraformRemoteState {
    constructor(scope, id, config) {
        super(scope, id, "cos", config);
    }
}
exports.DataTerraformRemoteStateCos = DataTerraformRemoteStateCos;
_b = JSII_RTTI_SYMBOL_1;
DataTerraformRemoteStateCos[_b] = { fqn: "cdktf.DataTerraformRemoteStateCos", version: "0.20.7" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29zLWJhY2tlbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb3MtYmFja2VuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUdBLDREQUF3RDtBQUN4RCxrQ0FBMEM7QUFDMUMsc0VBR21DO0FBRW5DLCtDQUErQztBQUMvQyxNQUFhLFVBQVcsU0FBUSxvQ0FBZ0I7SUFDOUMsWUFBWSxLQUFnQixFQUFtQixLQUF1QjtRQUNwRSxLQUFLLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQURjLFVBQUssR0FBTCxLQUFLLENBQWtCO0lBRXRFLENBQUM7SUFFUyxvQkFBb0I7UUFDNUIsT0FBTyxJQUFBLHNCQUFlLEVBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFUyx1QkFBdUI7UUFDL0IsT0FBTyxJQUFBLHNCQUFlLEVBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFTSx3QkFBd0IsQ0FDN0IsS0FBZ0IsRUFDaEIsSUFBWSxFQUNaLFVBQWtCO1FBRWxCLE9BQU8sSUFBSSwyQkFBMkIsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFO1lBQ2xELEdBQUcsSUFBSSxDQUFDLEtBQUs7WUFDYixTQUFTLEVBQUUsd0JBQXdCO1NBQ3BDLENBQUMsQ0FBQztJQUNMLENBQUM7O0FBdEJILGdDQXVCQzs7O0FBRUQsK0NBQStDO0FBQy9DLE1BQWEsMkJBQTRCLFNBQVEsNkNBQW9CO0lBQ25FLFlBQ0UsS0FBZ0IsRUFDaEIsRUFBVSxFQUNWLE1BQXlDO1FBRXpDLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNsQyxDQUFDOztBQVBILGtFQVFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBIYXNoaUNvcnAsIEluY1xuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1QTC0yLjBcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgeyBUZXJyYWZvcm1CYWNrZW5kIH0gZnJvbSBcIi4uL3RlcnJhZm9ybS1iYWNrZW5kXCI7XG5pbXBvcnQgeyBrZXlzVG9TbmFrZUNhc2UgfSBmcm9tIFwiLi4vdXRpbFwiO1xuaW1wb3J0IHtcbiAgVGVycmFmb3JtUmVtb3RlU3RhdGUsXG4gIERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZUNvbmZpZyxcbn0gZnJvbSBcIi4uL3RlcnJhZm9ybS1yZW1vdGUtc3RhdGVcIjtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzZG9jL3JlcXVpcmUtanNkb2NcbmV4cG9ydCBjbGFzcyBDb3NCYWNrZW5kIGV4dGVuZHMgVGVycmFmb3JtQmFja2VuZCB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIHByaXZhdGUgcmVhZG9ubHkgcHJvcHM6IENvc0JhY2tlbmRDb25maWcpIHtcbiAgICBzdXBlcihzY29wZSwgXCJiYWNrZW5kXCIsIFwiY29zXCIpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHN5bnRoZXNpemVBdHRyaWJ1dGVzKCk6IHsgW25hbWU6IHN0cmluZ106IGFueSB9IHtcbiAgICByZXR1cm4ga2V5c1RvU25ha2VDYXNlKHsgLi4udGhpcy5wcm9wcyB9KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzeW50aGVzaXplSGNsQXR0cmlidXRlcygpOiB7IFtuYW1lOiBzdHJpbmddOiBhbnkgfSB7XG4gICAgcmV0dXJuIGtleXNUb1NuYWtlQ2FzZSh7IC4uLnRoaXMucHJvcHMgfSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0UmVtb3RlU3RhdGVEYXRhU291cmNlKFxuICAgIHNjb3BlOiBDb25zdHJ1Y3QsXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIF9mcm9tU3RhY2s6IHN0cmluZ1xuICApOiBUZXJyYWZvcm1SZW1vdGVTdGF0ZSB7XG4gICAgcmV0dXJuIG5ldyBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVDb3Moc2NvcGUsIG5hbWUsIHtcbiAgICAgIC4uLnRoaXMucHJvcHMsXG4gICAgICB3b3Jrc3BhY2U6IFwiJHt0ZXJyYWZvcm0ud29ya3NwYWNlfVwiLFxuICAgIH0pO1xuICB9XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc2RvYy9yZXF1aXJlLWpzZG9jXG5leHBvcnQgY2xhc3MgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlQ29zIGV4dGVuZHMgVGVycmFmb3JtUmVtb3RlU3RhdGUge1xuICBjb25zdHJ1Y3RvcihcbiAgICBzY29wZTogQ29uc3RydWN0LFxuICAgIGlkOiBzdHJpbmcsXG4gICAgY29uZmlnOiBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVDb3NDb25maWdcbiAgKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCBcImNvc1wiLCBjb25maWcpO1xuICB9XG59XG4vKipcbiAqIFN0b3JlcyB0aGUgc3RhdGUgYXMgYW4gb2JqZWN0IGluIGEgY29uZmlndXJhYmxlIHByZWZpeCBpblxuICogYSBnaXZlbiBidWNrZXQgb24gVGVuY2VudCBDbG91ZCBPYmplY3QgU3RvcmFnZSAoQ09TKS5cbiAqXG4gKiBUaGlzIGJhY2tlbmQgc3VwcG9ydHMgc3RhdGUgbG9ja2luZy5cbiAqXG4gKiBXYXJuaW5nISBJdCBpcyBoaWdobHkgcmVjb21tZW5kZWQgdGhhdCB5b3UgZW5hYmxlIE9iamVjdCBWZXJzaW9uaW5nIG9uIHRoZSBDT1MgYnVja2V0IHRvIGFsbG93IGZvciBzdGF0ZSByZWNvdmVyeSBpbiB0aGUgY2FzZSBvZiBhY2NpZGVudGFsIGRlbGV0aW9ucyBhbmQgaHVtYW4gZXJyb3IuXG4gKlxuICogUmVhZCBtb3JlIGFib3V0IHRoaXMgYmFja2VuZCBpbiB0aGUgVGVycmFmb3JtIGRvY3M6XG4gKiBodHRwczovL2RldmVsb3Blci5oYXNoaWNvcnAuY29tL3RlcnJhZm9ybS9sYW5ndWFnZS9zZXR0aW5ncy9iYWNrZW5kcy9jb3NcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb3NCYWNrZW5kQ29uZmlnIHtcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgU2VjcmV0IGlkIG9mIFRlbmNlbnQgQ2xvdWQuXG4gICAqIEl0IHN1cHBvcnRzIGVudmlyb25tZW50IHZhcmlhYmxlcyBURU5DRU5UQ0xPVURfU0VDUkVUX0lELlxuICAgKi9cbiAgcmVhZG9ubHkgc2VjcmV0SWQ/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIFNlY3JldCBrZXkgb2YgVGVuY2VudCBDbG91ZC5cbiAgICogSXQgc3VwcG9ydHMgZW52aXJvbm1lbnQgdmFyaWFibGVzIFRFTkNFTlRDTE9VRF9TRUNSRVRfS0VZLlxuICAgKi9cbiAgcmVhZG9ubHkgc2VjcmV0S2V5Pzogc3RyaW5nO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBUZW5jZW50Q2xvdWQgU2VjdXJpdHkgVG9rZW4gb2YgdGVtcG9yYXJ5IGFjY2VzcyBjcmVkZW50aWFscy5cbiAgICogSXQgc3VwcG9ydHMgZW52aXJvbm1lbnQgdmFyaWFibGVzIFRFTkNFTlRDTE9VRF9TRUNVUklUWV9UT0tFTi5cbiAgICovXG4gIHJlYWRvbmx5IHNlY3VyaXR5VG9rZW4/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIFRoZSByZWdpb24gb2YgdGhlIENPUyBidWNrZXQuXG4gICAqIEl0IHN1cHBvcnRzIGVudmlyb25tZW50IHZhcmlhYmxlcyBURU5DRU5UQ0xPVURfUkVHSU9OLlxuICAgKi9cbiAgcmVhZG9ubHkgcmVnaW9uPzogc3RyaW5nO1xuICAvKipcbiAgICogKFJlcXVpcmVkKSBUaGUgbmFtZSBvZiB0aGUgQ09TIGJ1Y2tldC4gWW91IHNoYWxsIG1hbnVhbGx5IGNyZWF0ZSBpdCBmaXJzdC5cbiAgICovXG4gIHJlYWRvbmx5IGJ1Y2tldDogc3RyaW5nO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBUaGUgZGlyZWN0b3J5IGZvciBzYXZpbmcgdGhlIHN0YXRlIGZpbGUgaW4gYnVja2V0LiBEZWZhdWx0IHRvIFwiZW52OlwiLlxuICAgKi9cbiAgcmVhZG9ubHkgcHJlZml4Pzogc3RyaW5nO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBUaGUgcGF0aCBmb3Igc2F2aW5nIHRoZSBzdGF0ZSBmaWxlIGluIGJ1Y2tldC4gRGVmYXVsdHMgdG8gdGVycmFmb3JtLnRmc3RhdGUuXG4gICAqL1xuICByZWFkb25seSBrZXk/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIFdoZXRoZXIgdG8gZW5hYmxlIHNlcnZlciBzaWRlIGVuY3J5cHRpb24gb2YgdGhlIHN0YXRlIGZpbGUuXG4gICAqIElmIGl0IGlzIHRydWUsIENPUyB3aWxsIHVzZSAnQUVTMjU2JyBlbmNyeXB0aW9uIGFsZ29yaXRobSB0byBlbmNyeXB0IHN0YXRlIGZpbGUuXG4gICAqL1xuICByZWFkb25seSBlbmNyeXB0PzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgT2JqZWN0IEFDTCB0byBiZSBhcHBsaWVkIHRvIHRoZSBzdGF0ZSBmaWxlLCBhbGxvd3MgcHJpdmF0ZSBhbmQgcHVibGljLXJlYWQuXG4gICAqIERlZmF1bHRzIHRvIHByaXZhdGUuXG4gICAqL1xuICByZWFkb25seSBhY2w/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIFdoZXRoZXIgdG8gZW5hYmxlIGdsb2JhbCBBY2NlbGVyYXRpb24uIERlZmF1bHRzIHRvIGZhbHNlLlxuICAgKi9cbiAgcmVhZG9ubHkgYWNjZWxlcmF0ZT86IGJvb2xlYW47XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIFRoZSBDdXN0b20gRW5kcG9pbnQgZm9yIHRoZSBDT1MgYmFja2VuZC5cbiAgICogSXQgc3VwcG9ydHMgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlIFRFTkNFTlRDTE9VRF9FTkRQT0lOVC5cbiAgICovXG4gIHJlYWRvbmx5IGVuZHBvaW50Pzogc3RyaW5nO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBUaGUgcm9vdCBkb21haW4gb2YgdGhlIEFQSSByZXF1ZXN0LiBEZWZhdWx0cyB0byB0ZW5jZW50Y2xvdWRhcGkuY29tLlxuICAgKiBJdCBzdXBwb3J0cyB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGUgVEVOQ0VOVENMT1VEX0RPTUFJTi5cbiAgICovXG4gIHJlYWRvbmx5IGRvbWFpbj86IHN0cmluZztcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgVGhlIGFzc3VtZV9yb2xlIGJsb2NrLlxuICAgKiBJZiBwcm92aWRlZCwgdGVycmFmb3JtIHdpbGwgYXR0ZW1wdCB0byBhc3N1bWUgdGhpcyByb2xlIHVzaW5nIHRoZSBzdXBwbGllZCBjcmVkZW50aWFscy5cbiAgICovXG4gIHJlYWRvbmx5IGFzc3VtZVJvbGU/OiBDb3NCYWNrZW5kQXNzdW1lUm9sZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb3NCYWNrZW5kQXNzdW1lUm9sZSB7XG4gIC8qKlxuICAgKiAoUmVxdWlyZWQpIFRoZSBBUk4gb2YgdGhlIHJvbGUgdG8gYXNzdW1lLlxuICAgKiBJdCBjYW4gYmUgc291cmNlZCBmcm9tIHRoZSBURU5DRU5UQ0xPVURfQVNTVU1FX1JPTEVfQVJOLlxuICAgKi9cbiAgcmVhZG9ubHkgcm9sZUFybjogc3RyaW5nO1xuICAvKipcbiAgICogKFJlcXVpcmVkKSBUaGUgc2Vzc2lvbiBuYW1lIHRvIHVzZSB3aGVuIG1ha2luZyB0aGUgQXNzdW1lUm9sZSBjYWxsLlxuICAgKiBJdCBjYW4gYmUgc291cmNlZCBmcm9tIHRoZSBURU5DRU5UQ0xPVURfQVNTVU1FX1JPTEVfU0VTU0lPTl9OQU1FLlxuICAgKi9cbiAgcmVhZG9ubHkgc2Vzc2lvbk5hbWU6IHN0cmluZztcbiAgLyoqXG4gICAqIChSZXF1aXJlZCkgVGhlIGR1cmF0aW9uIG9mIHRoZSBzZXNzaW9uIHdoZW4gbWFraW5nIHRoZSBBc3N1bWVSb2xlIGNhbGwuXG4gICAqIEl0cyB2YWx1ZSByYW5nZXMgZnJvbSAwIHRvIDQzMjAwKHNlY29uZHMpLCBhbmQgZGVmYXVsdCBpcyA3MjAwIHNlY29uZHMuXG4gICAqIEl0IGNhbiBiZSBzb3VyY2VkIGZyb20gdGhlIFRFTkNFTlRDTE9VRF9BU1NVTUVfUk9MRV9TRVNTSU9OX0RVUkFUSU9OLlxuICAgKi9cbiAgcmVhZG9ubHkgc2Vzc2lvbkR1cmF0aW9uOiBudW1iZXI7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIEEgbW9yZSByZXN0cmljdGl2ZSBwb2xpY3kgd2hlbiBtYWtpbmcgdGhlIEFzc3VtZVJvbGUgY2FsbC5cbiAgICogSXRzIGNvbnRlbnQgbXVzdCBub3QgY29udGFpbnMgcHJpbmNpcGFsIGVsZW1lbnRzLlxuICAgKiBQbGVhc2UgcmVmZXIgdG8ge0BsaW5rIGh0dHBzOi8vd3d3LnRlbmNlbnRjbG91ZC5jb20vZG9jdW1lbnQvcHJvZHVjdC81OTgvMTA2MDMgcG9saWNpZXMgc3ludGF4IGxvZ2ljfS5cbiAgICovXG4gIHJlYWRvbmx5IHBvbGljeT86IGFueTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVDb3NDb25maWdcbiAgZXh0ZW5kcyBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVDb25maWcsXG4gICAgQ29zQmFja2VuZENvbmZpZyB7fVxuIl19