"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31;
Object.defineProperty(exports, "__esModule", { value: true });
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2ToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2ToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeToTerraform = void 0;
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftOutputReference = void 0;
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeToHclTerraform = void 0;
exports.AppflowConnectorProfile = exports.AppflowConnectorProfileConnectorProfileConfigOutputReference = exports.appflowConnectorProfileConnectorProfileConfigToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaToTerraform = exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroOutputReference = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroToHclTerraform = exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        api_key: cdktf.stringToTerraform(struct.apiKey),
        secret_key: cdktf.stringToTerraform(struct.secretKey),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        api_key: {
            value: cdktf.stringToHclTerraform(struct.apiKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        secret_key: {
            value: cdktf.stringToHclTerraform(struct.secretKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._apiKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.apiKey = this._apiKey;
        }
        if (this._secretKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretKey = this._secretKey;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._apiKey = undefined;
            this._secretKey = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._apiKey = value.apiKey;
            this._secretKey = value.secretKey;
        }
    }
    get apiKey() {
        return this.getStringAttribute('api_key');
    }
    set apiKey(value) {
        this._apiKey = value;
    }
    // Temporarily expose input value. Use with caution.
    get apiKeyInput() {
        return this._apiKey;
    }
    get secretKey() {
        return this.getStringAttribute('secret_key');
    }
    set secretKey(value) {
        this._secretKey = value;
    }
    // Temporarily expose input value. Use with caution.
    get secretKeyInput() {
        return this._secretKey;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeOutputReference;
_a = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeOutputReference[_a] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        api_key: cdktf.stringToTerraform(struct.apiKey),
        api_secret_key: cdktf.stringToTerraform(struct.apiSecretKey),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        api_key: {
            value: cdktf.stringToHclTerraform(struct.apiKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        api_secret_key: {
            value: cdktf.stringToHclTerraform(struct.apiSecretKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._apiKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.apiKey = this._apiKey;
        }
        if (this._apiSecretKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.apiSecretKey = this._apiSecretKey;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._apiKey = undefined;
            this._apiSecretKey = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._apiKey = value.apiKey;
            this._apiSecretKey = value.apiSecretKey;
        }
    }
    get apiKey() {
        return this.getStringAttribute('api_key');
    }
    set apiKey(value) {
        this._apiKey = value;
    }
    // Temporarily expose input value. Use with caution.
    get apiKeyInput() {
        return this._apiKey;
    }
    get apiSecretKey() {
        return this.getStringAttribute('api_secret_key');
    }
    set apiSecretKey(value) {
        this._apiSecretKey = value;
    }
    resetApiSecretKey() {
        this._apiSecretKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get apiSecretKeyInput() {
        return this._apiSecretKey;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyOutputReference;
_b = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyOutputReference[_b] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        password: cdktf.stringToTerraform(struct.password),
        username: cdktf.stringToTerraform(struct.username),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        password: {
            value: cdktf.stringToHclTerraform(struct.password),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        username: {
            value: cdktf.stringToHclTerraform(struct.username),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._password !== undefined) {
            hasAnyValues = true;
            internalValueResult.password = this._password;
        }
        if (this._username !== undefined) {
            hasAnyValues = true;
            internalValueResult.username = this._username;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._password = undefined;
            this._username = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._password = value.password;
            this._username = value.username;
        }
    }
    get password() {
        return this.getStringAttribute('password');
    }
    set password(value) {
        this._password = value;
    }
    // Temporarily expose input value. Use with caution.
    get passwordInput() {
        return this._password;
    }
    get username() {
        return this.getStringAttribute('username');
    }
    set username(value) {
        this._username = value;
    }
    // Temporarily expose input value. Use with caution.
    get usernameInput() {
        return this._username;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicOutputReference;
_c = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicOutputReference[_c] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        credentials_map: cdktf.hashMapper(cdktf.stringToTerraform)(struct.credentialsMap),
        custom_authentication_type: cdktf.stringToTerraform(struct.customAuthenticationType),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        credentials_map: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.credentialsMap),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        custom_authentication_type: {
            value: cdktf.stringToHclTerraform(struct.customAuthenticationType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._credentialsMap !== undefined) {
            hasAnyValues = true;
            internalValueResult.credentialsMap = this._credentialsMap;
        }
        if (this._customAuthenticationType !== undefined) {
            hasAnyValues = true;
            internalValueResult.customAuthenticationType = this._customAuthenticationType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._credentialsMap = undefined;
            this._customAuthenticationType = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._credentialsMap = value.credentialsMap;
            this._customAuthenticationType = value.customAuthenticationType;
        }
    }
    get credentialsMap() {
        return this.getStringMapAttribute('credentials_map');
    }
    set credentialsMap(value) {
        this._credentialsMap = value;
    }
    resetCredentialsMap() {
        this._credentialsMap = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get credentialsMapInput() {
        return this._credentialsMap;
    }
    get customAuthenticationType() {
        return this.getStringAttribute('custom_authentication_type');
    }
    set customAuthenticationType(value) {
        this._customAuthenticationType = value;
    }
    // Temporarily expose input value. Use with caution.
    get customAuthenticationTypeInput() {
        return this._customAuthenticationType;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomOutputReference;
_d = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomOutputReference[_d] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auth_code: cdktf.stringToTerraform(struct.authCode),
        redirect_uri: cdktf.stringToTerraform(struct.redirectUri),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        auth_code: {
            value: cdktf.stringToHclTerraform(struct.authCode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        redirect_uri: {
            value: cdktf.stringToHclTerraform(struct.redirectUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._authCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.authCode = this._authCode;
        }
        if (this._redirectUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.redirectUri = this._redirectUri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._authCode = undefined;
            this._redirectUri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._authCode = value.authCode;
            this._redirectUri = value.redirectUri;
        }
    }
    get authCode() {
        return this.getStringAttribute('auth_code');
    }
    set authCode(value) {
        this._authCode = value;
    }
    resetAuthCode() {
        this._authCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authCodeInput() {
        return this._authCode;
    }
    get redirectUri() {
        return this.getStringAttribute('redirect_uri');
    }
    set redirectUri(value) {
        this._redirectUri = value;
    }
    resetRedirectUri() {
        this._redirectUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redirectUriInput() {
        return this._redirectUri;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestOutputReference;
_e = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestOutputReference[_e] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2ToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        access_token: cdktf.stringToTerraform(struct.accessToken),
        client_id: cdktf.stringToTerraform(struct.clientId),
        client_secret: cdktf.stringToTerraform(struct.clientSecret),
        refresh_token: cdktf.stringToTerraform(struct.refreshToken),
        oauth_request: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestToTerraform(struct.oauthRequest),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2ToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2ToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2ToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        access_token: {
            value: cdktf.stringToHclTerraform(struct.accessToken),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_id: {
            value: cdktf.stringToHclTerraform(struct.clientId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_secret: {
            value: cdktf.stringToHclTerraform(struct.clientSecret),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        refresh_token: {
            value: cdktf.stringToHclTerraform(struct.refreshToken),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        oauth_request: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestToHclTerraform(struct.oauthRequest),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2ToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2ToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // oauth_request - computed: false, optional: true, required: false
        this._oauthRequest = new AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestOutputReference(this, "oauth_request");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._accessToken !== undefined) {
            hasAnyValues = true;
            internalValueResult.accessToken = this._accessToken;
        }
        if (this._clientId !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientId = this._clientId;
        }
        if (this._clientSecret !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientSecret = this._clientSecret;
        }
        if (this._refreshToken !== undefined) {
            hasAnyValues = true;
            internalValueResult.refreshToken = this._refreshToken;
        }
        if (this._oauthRequest?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.oauthRequest = this._oauthRequest?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._accessToken = undefined;
            this._clientId = undefined;
            this._clientSecret = undefined;
            this._refreshToken = undefined;
            this._oauthRequest.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._accessToken = value.accessToken;
            this._clientId = value.clientId;
            this._clientSecret = value.clientSecret;
            this._refreshToken = value.refreshToken;
            this._oauthRequest.internalValue = value.oauthRequest;
        }
    }
    get accessToken() {
        return this.getStringAttribute('access_token');
    }
    set accessToken(value) {
        this._accessToken = value;
    }
    resetAccessToken() {
        this._accessToken = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessTokenInput() {
        return this._accessToken;
    }
    get clientId() {
        return this.getStringAttribute('client_id');
    }
    set clientId(value) {
        this._clientId = value;
    }
    resetClientId() {
        this._clientId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientIdInput() {
        return this._clientId;
    }
    get clientSecret() {
        return this.getStringAttribute('client_secret');
    }
    set clientSecret(value) {
        this._clientSecret = value;
    }
    resetClientSecret() {
        this._clientSecret = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientSecretInput() {
        return this._clientSecret;
    }
    get refreshToken() {
        return this.getStringAttribute('refresh_token');
    }
    set refreshToken(value) {
        this._refreshToken = value;
    }
    resetRefreshToken() {
        this._refreshToken = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get refreshTokenInput() {
        return this._refreshToken;
    }
    get oauthRequest() {
        return this._oauthRequest;
    }
    putOauthRequest(value) {
        this._oauthRequest.internalValue = value;
    }
    resetOauthRequest() {
        this._oauthRequest.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oauthRequestInput() {
        return this._oauthRequest.internalValue;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OutputReference;
_f = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OutputReference[_f] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        authentication_type: cdktf.stringToTerraform(struct.authenticationType),
        api_key: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyToTerraform(struct.apiKey),
        basic: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicToTerraform(struct.basic),
        custom: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomToTerraform(struct.custom),
        oauth2: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2ToTerraform(struct.oauth2),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        authentication_type: {
            value: cdktf.stringToHclTerraform(struct.authenticationType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        api_key: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyToHclTerraform(struct.apiKey),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyList",
        },
        basic: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicToHclTerraform(struct.basic),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicList",
        },
        custom: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomToHclTerraform(struct.custom),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomList",
        },
        oauth2: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2ToHclTerraform(struct.oauth2),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2List",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // api_key - computed: false, optional: true, required: false
        this._apiKey = new AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyOutputReference(this, "api_key");
        // basic - computed: false, optional: true, required: false
        this._basic = new AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicOutputReference(this, "basic");
        // custom - computed: false, optional: true, required: false
        this._custom = new AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomOutputReference(this, "custom");
        // oauth2 - computed: false, optional: true, required: false
        this._oauth2 = new AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OutputReference(this, "oauth2");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._authenticationType !== undefined) {
            hasAnyValues = true;
            internalValueResult.authenticationType = this._authenticationType;
        }
        if (this._apiKey?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.apiKey = this._apiKey?.internalValue;
        }
        if (this._basic?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.basic = this._basic?.internalValue;
        }
        if (this._custom?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.custom = this._custom?.internalValue;
        }
        if (this._oauth2?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.oauth2 = this._oauth2?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._authenticationType = undefined;
            this._apiKey.internalValue = undefined;
            this._basic.internalValue = undefined;
            this._custom.internalValue = undefined;
            this._oauth2.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._authenticationType = value.authenticationType;
            this._apiKey.internalValue = value.apiKey;
            this._basic.internalValue = value.basic;
            this._custom.internalValue = value.custom;
            this._oauth2.internalValue = value.oauth2;
        }
    }
    get authenticationType() {
        return this.getStringAttribute('authentication_type');
    }
    set authenticationType(value) {
        this._authenticationType = value;
    }
    // Temporarily expose input value. Use with caution.
    get authenticationTypeInput() {
        return this._authenticationType;
    }
    get apiKey() {
        return this._apiKey;
    }
    putApiKey(value) {
        this._apiKey.internalValue = value;
    }
    resetApiKey() {
        this._apiKey.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get apiKeyInput() {
        return this._apiKey.internalValue;
    }
    get basic() {
        return this._basic;
    }
    putBasic(value) {
        this._basic.internalValue = value;
    }
    resetBasic() {
        this._basic.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get basicInput() {
        return this._basic.internalValue;
    }
    get custom() {
        return this._custom;
    }
    putCustom(value) {
        this._custom.internalValue = value;
    }
    resetCustom() {
        this._custom.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customInput() {
        return this._custom.internalValue;
    }
    get oauth2() {
        return this._oauth2;
    }
    putOauth2(value) {
        this._oauth2.internalValue = value;
    }
    resetOauth2() {
        this._oauth2.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oauth2Input() {
        return this._oauth2.internalValue;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOutputReference;
_g = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOutputReference[_g] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        api_key: cdktf.stringToTerraform(struct.apiKey),
        application_key: cdktf.stringToTerraform(struct.applicationKey),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        api_key: {
            value: cdktf.stringToHclTerraform(struct.apiKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        application_key: {
            value: cdktf.stringToHclTerraform(struct.applicationKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._apiKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.apiKey = this._apiKey;
        }
        if (this._applicationKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.applicationKey = this._applicationKey;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._apiKey = undefined;
            this._applicationKey = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._apiKey = value.apiKey;
            this._applicationKey = value.applicationKey;
        }
    }
    get apiKey() {
        return this.getStringAttribute('api_key');
    }
    set apiKey(value) {
        this._apiKey = value;
    }
    // Temporarily expose input value. Use with caution.
    get apiKeyInput() {
        return this._apiKey;
    }
    get applicationKey() {
        return this.getStringAttribute('application_key');
    }
    set applicationKey(value) {
        this._applicationKey = value;
    }
    // Temporarily expose input value. Use with caution.
    get applicationKeyInput() {
        return this._applicationKey;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogOutputReference;
_h = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogOutputReference[_h] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        api_token: cdktf.stringToTerraform(struct.apiToken),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        api_token: {
            value: cdktf.stringToHclTerraform(struct.apiToken),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._apiToken !== undefined) {
            hasAnyValues = true;
            internalValueResult.apiToken = this._apiToken;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._apiToken = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._apiToken = value.apiToken;
        }
    }
    get apiToken() {
        return this.getStringAttribute('api_token');
    }
    set apiToken(value) {
        this._apiToken = value;
    }
    // Temporarily expose input value. Use with caution.
    get apiTokenInput() {
        return this._apiToken;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceOutputReference;
_j = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceOutputReference[_j] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auth_code: cdktf.stringToTerraform(struct.authCode),
        redirect_uri: cdktf.stringToTerraform(struct.redirectUri),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        auth_code: {
            value: cdktf.stringToHclTerraform(struct.authCode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        redirect_uri: {
            value: cdktf.stringToHclTerraform(struct.redirectUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._authCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.authCode = this._authCode;
        }
        if (this._redirectUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.redirectUri = this._redirectUri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._authCode = undefined;
            this._redirectUri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._authCode = value.authCode;
            this._redirectUri = value.redirectUri;
        }
    }
    get authCode() {
        return this.getStringAttribute('auth_code');
    }
    set authCode(value) {
        this._authCode = value;
    }
    resetAuthCode() {
        this._authCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authCodeInput() {
        return this._authCode;
    }
    get redirectUri() {
        return this.getStringAttribute('redirect_uri');
    }
    set redirectUri(value) {
        this._redirectUri = value;
    }
    resetRedirectUri() {
        this._redirectUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redirectUriInput() {
        return this._redirectUri;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestOutputReference;
_k = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestOutputReference[_k] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        access_token: cdktf.stringToTerraform(struct.accessToken),
        client_id: cdktf.stringToTerraform(struct.clientId),
        client_secret: cdktf.stringToTerraform(struct.clientSecret),
        refresh_token: cdktf.stringToTerraform(struct.refreshToken),
        oauth_request: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestToTerraform(struct.oauthRequest),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        access_token: {
            value: cdktf.stringToHclTerraform(struct.accessToken),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_id: {
            value: cdktf.stringToHclTerraform(struct.clientId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_secret: {
            value: cdktf.stringToHclTerraform(struct.clientSecret),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        refresh_token: {
            value: cdktf.stringToHclTerraform(struct.refreshToken),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        oauth_request: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestToHclTerraform(struct.oauthRequest),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // oauth_request - computed: false, optional: true, required: false
        this._oauthRequest = new AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestOutputReference(this, "oauth_request");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._accessToken !== undefined) {
            hasAnyValues = true;
            internalValueResult.accessToken = this._accessToken;
        }
        if (this._clientId !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientId = this._clientId;
        }
        if (this._clientSecret !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientSecret = this._clientSecret;
        }
        if (this._refreshToken !== undefined) {
            hasAnyValues = true;
            internalValueResult.refreshToken = this._refreshToken;
        }
        if (this._oauthRequest?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.oauthRequest = this._oauthRequest?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._accessToken = undefined;
            this._clientId = undefined;
            this._clientSecret = undefined;
            this._refreshToken = undefined;
            this._oauthRequest.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._accessToken = value.accessToken;
            this._clientId = value.clientId;
            this._clientSecret = value.clientSecret;
            this._refreshToken = value.refreshToken;
            this._oauthRequest.internalValue = value.oauthRequest;
        }
    }
    get accessToken() {
        return this.getStringAttribute('access_token');
    }
    set accessToken(value) {
        this._accessToken = value;
    }
    resetAccessToken() {
        this._accessToken = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessTokenInput() {
        return this._accessToken;
    }
    get clientId() {
        return this.getStringAttribute('client_id');
    }
    set clientId(value) {
        this._clientId = value;
    }
    // Temporarily expose input value. Use with caution.
    get clientIdInput() {
        return this._clientId;
    }
    get clientSecret() {
        return this.getStringAttribute('client_secret');
    }
    set clientSecret(value) {
        this._clientSecret = value;
    }
    // Temporarily expose input value. Use with caution.
    get clientSecretInput() {
        return this._clientSecret;
    }
    get refreshToken() {
        return this.getStringAttribute('refresh_token');
    }
    set refreshToken(value) {
        this._refreshToken = value;
    }
    resetRefreshToken() {
        this._refreshToken = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get refreshTokenInput() {
        return this._refreshToken;
    }
    get oauthRequest() {
        return this._oauthRequest;
    }
    putOauthRequest(value) {
        this._oauthRequest.internalValue = value;
    }
    resetOauthRequest() {
        this._oauthRequest.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oauthRequestInput() {
        return this._oauthRequest.internalValue;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOutputReference;
_l = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOutputReference[_l] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auth_code: cdktf.stringToTerraform(struct.authCode),
        redirect_uri: cdktf.stringToTerraform(struct.redirectUri),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        auth_code: {
            value: cdktf.stringToHclTerraform(struct.authCode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        redirect_uri: {
            value: cdktf.stringToHclTerraform(struct.redirectUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._authCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.authCode = this._authCode;
        }
        if (this._redirectUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.redirectUri = this._redirectUri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._authCode = undefined;
            this._redirectUri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._authCode = value.authCode;
            this._redirectUri = value.redirectUri;
        }
    }
    get authCode() {
        return this.getStringAttribute('auth_code');
    }
    set authCode(value) {
        this._authCode = value;
    }
    resetAuthCode() {
        this._authCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authCodeInput() {
        return this._authCode;
    }
    get redirectUri() {
        return this.getStringAttribute('redirect_uri');
    }
    set redirectUri(value) {
        this._redirectUri = value;
    }
    resetRedirectUri() {
        this._redirectUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redirectUriInput() {
        return this._redirectUri;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestOutputReference;
_m = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestOutputReference[_m] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        access_token: cdktf.stringToTerraform(struct.accessToken),
        refresh_token: cdktf.stringToTerraform(struct.refreshToken),
        oauth_request: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestToTerraform(struct.oauthRequest),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        access_token: {
            value: cdktf.stringToHclTerraform(struct.accessToken),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        refresh_token: {
            value: cdktf.stringToHclTerraform(struct.refreshToken),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        oauth_request: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestToHclTerraform(struct.oauthRequest),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // oauth_request - computed: false, optional: true, required: false
        this._oauthRequest = new AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestOutputReference(this, "oauth_request");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._accessToken !== undefined) {
            hasAnyValues = true;
            internalValueResult.accessToken = this._accessToken;
        }
        if (this._refreshToken !== undefined) {
            hasAnyValues = true;
            internalValueResult.refreshToken = this._refreshToken;
        }
        if (this._oauthRequest?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.oauthRequest = this._oauthRequest?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._accessToken = undefined;
            this._refreshToken = undefined;
            this._oauthRequest.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._accessToken = value.accessToken;
            this._refreshToken = value.refreshToken;
            this._oauthRequest.internalValue = value.oauthRequest;
        }
    }
    get accessToken() {
        return this.getStringAttribute('access_token');
    }
    set accessToken(value) {
        this._accessToken = value;
    }
    resetAccessToken() {
        this._accessToken = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessTokenInput() {
        return this._accessToken;
    }
    get refreshToken() {
        return this.getStringAttribute('refresh_token');
    }
    set refreshToken(value) {
        this._refreshToken = value;
    }
    resetRefreshToken() {
        this._refreshToken = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get refreshTokenInput() {
        return this._refreshToken;
    }
    get oauthRequest() {
        return this._oauthRequest;
    }
    putOauthRequest(value) {
        this._oauthRequest.internalValue = value;
    }
    resetOauthRequest() {
        this._oauthRequest.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oauthRequestInput() {
        return this._oauthRequest.internalValue;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOutputReference;
_o = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOutputReference[_o] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        access_key_id: cdktf.stringToTerraform(struct.accessKeyId),
        datakey: cdktf.stringToTerraform(struct.datakey),
        secret_access_key: cdktf.stringToTerraform(struct.secretAccessKey),
        user_id: cdktf.stringToTerraform(struct.userId),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        access_key_id: {
            value: cdktf.stringToHclTerraform(struct.accessKeyId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        datakey: {
            value: cdktf.stringToHclTerraform(struct.datakey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        secret_access_key: {
            value: cdktf.stringToHclTerraform(struct.secretAccessKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        user_id: {
            value: cdktf.stringToHclTerraform(struct.userId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._accessKeyId !== undefined) {
            hasAnyValues = true;
            internalValueResult.accessKeyId = this._accessKeyId;
        }
        if (this._datakey !== undefined) {
            hasAnyValues = true;
            internalValueResult.datakey = this._datakey;
        }
        if (this._secretAccessKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretAccessKey = this._secretAccessKey;
        }
        if (this._userId !== undefined) {
            hasAnyValues = true;
            internalValueResult.userId = this._userId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._accessKeyId = undefined;
            this._datakey = undefined;
            this._secretAccessKey = undefined;
            this._userId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._accessKeyId = value.accessKeyId;
            this._datakey = value.datakey;
            this._secretAccessKey = value.secretAccessKey;
            this._userId = value.userId;
        }
    }
    get accessKeyId() {
        return this.getStringAttribute('access_key_id');
    }
    set accessKeyId(value) {
        this._accessKeyId = value;
    }
    // Temporarily expose input value. Use with caution.
    get accessKeyIdInput() {
        return this._accessKeyId;
    }
    get datakey() {
        return this.getStringAttribute('datakey');
    }
    set datakey(value) {
        this._datakey = value;
    }
    // Temporarily expose input value. Use with caution.
    get datakeyInput() {
        return this._datakey;
    }
    get secretAccessKey() {
        return this.getStringAttribute('secret_access_key');
    }
    set secretAccessKey(value) {
        this._secretAccessKey = value;
    }
    // Temporarily expose input value. Use with caution.
    get secretAccessKeyInput() {
        return this._secretAccessKey;
    }
    get userId() {
        return this.getStringAttribute('user_id');
    }
    set userId(value) {
        this._userId = value;
    }
    // Temporarily expose input value. Use with caution.
    get userIdInput() {
        return this._userId;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusOutputReference;
_p = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusOutputReference[_p] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auth_code: cdktf.stringToTerraform(struct.authCode),
        redirect_uri: cdktf.stringToTerraform(struct.redirectUri),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        auth_code: {
            value: cdktf.stringToHclTerraform(struct.authCode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        redirect_uri: {
            value: cdktf.stringToHclTerraform(struct.redirectUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._authCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.authCode = this._authCode;
        }
        if (this._redirectUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.redirectUri = this._redirectUri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._authCode = undefined;
            this._redirectUri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._authCode = value.authCode;
            this._redirectUri = value.redirectUri;
        }
    }
    get authCode() {
        return this.getStringAttribute('auth_code');
    }
    set authCode(value) {
        this._authCode = value;
    }
    resetAuthCode() {
        this._authCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authCodeInput() {
        return this._authCode;
    }
    get redirectUri() {
        return this.getStringAttribute('redirect_uri');
    }
    set redirectUri(value) {
        this._redirectUri = value;
    }
    resetRedirectUri() {
        this._redirectUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redirectUriInput() {
        return this._redirectUri;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestOutputReference;
_q = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestOutputReference[_q] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        access_token: cdktf.stringToTerraform(struct.accessToken),
        client_id: cdktf.stringToTerraform(struct.clientId),
        client_secret: cdktf.stringToTerraform(struct.clientSecret),
        oauth_request: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestToTerraform(struct.oauthRequest),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        access_token: {
            value: cdktf.stringToHclTerraform(struct.accessToken),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_id: {
            value: cdktf.stringToHclTerraform(struct.clientId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_secret: {
            value: cdktf.stringToHclTerraform(struct.clientSecret),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        oauth_request: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestToHclTerraform(struct.oauthRequest),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // oauth_request - computed: false, optional: true, required: false
        this._oauthRequest = new AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestOutputReference(this, "oauth_request");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._accessToken !== undefined) {
            hasAnyValues = true;
            internalValueResult.accessToken = this._accessToken;
        }
        if (this._clientId !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientId = this._clientId;
        }
        if (this._clientSecret !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientSecret = this._clientSecret;
        }
        if (this._oauthRequest?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.oauthRequest = this._oauthRequest?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._accessToken = undefined;
            this._clientId = undefined;
            this._clientSecret = undefined;
            this._oauthRequest.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._accessToken = value.accessToken;
            this._clientId = value.clientId;
            this._clientSecret = value.clientSecret;
            this._oauthRequest.internalValue = value.oauthRequest;
        }
    }
    get accessToken() {
        return this.getStringAttribute('access_token');
    }
    set accessToken(value) {
        this._accessToken = value;
    }
    resetAccessToken() {
        this._accessToken = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessTokenInput() {
        return this._accessToken;
    }
    get clientId() {
        return this.getStringAttribute('client_id');
    }
    set clientId(value) {
        this._clientId = value;
    }
    // Temporarily expose input value. Use with caution.
    get clientIdInput() {
        return this._clientId;
    }
    get clientSecret() {
        return this.getStringAttribute('client_secret');
    }
    set clientSecret(value) {
        this._clientSecret = value;
    }
    // Temporarily expose input value. Use with caution.
    get clientSecretInput() {
        return this._clientSecret;
    }
    get oauthRequest() {
        return this._oauthRequest;
    }
    putOauthRequest(value) {
        this._oauthRequest.internalValue = value;
    }
    resetOauthRequest() {
        this._oauthRequest.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oauthRequestInput() {
        return this._oauthRequest.internalValue;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOutputReference;
_r = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOutputReference[_r] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        password: cdktf.stringToTerraform(struct.password),
        username: cdktf.stringToTerraform(struct.username),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        password: {
            value: cdktf.stringToHclTerraform(struct.password),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        username: {
            value: cdktf.stringToHclTerraform(struct.username),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._password !== undefined) {
            hasAnyValues = true;
            internalValueResult.password = this._password;
        }
        if (this._username !== undefined) {
            hasAnyValues = true;
            internalValueResult.username = this._username;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._password = undefined;
            this._username = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._password = value.password;
            this._username = value.username;
        }
    }
    get password() {
        return this.getStringAttribute('password');
    }
    set password(value) {
        this._password = value;
    }
    // Temporarily expose input value. Use with caution.
    get passwordInput() {
        return this._password;
    }
    get username() {
        return this.getStringAttribute('username');
    }
    set username(value) {
        this._username = value;
    }
    // Temporarily expose input value. Use with caution.
    get usernameInput() {
        return this._username;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftOutputReference;
_s = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftOutputReference[_s] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auth_code: cdktf.stringToTerraform(struct.authCode),
        redirect_uri: cdktf.stringToTerraform(struct.redirectUri),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        auth_code: {
            value: cdktf.stringToHclTerraform(struct.authCode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        redirect_uri: {
            value: cdktf.stringToHclTerraform(struct.redirectUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._authCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.authCode = this._authCode;
        }
        if (this._redirectUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.redirectUri = this._redirectUri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._authCode = undefined;
            this._redirectUri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._authCode = value.authCode;
            this._redirectUri = value.redirectUri;
        }
    }
    get authCode() {
        return this.getStringAttribute('auth_code');
    }
    set authCode(value) {
        this._authCode = value;
    }
    resetAuthCode() {
        this._authCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authCodeInput() {
        return this._authCode;
    }
    get redirectUri() {
        return this.getStringAttribute('redirect_uri');
    }
    set redirectUri(value) {
        this._redirectUri = value;
    }
    resetRedirectUri() {
        this._redirectUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redirectUriInput() {
        return this._redirectUri;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestOutputReference;
_t = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestOutputReference[_t] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        access_token: cdktf.stringToTerraform(struct.accessToken),
        client_credentials_arn: cdktf.stringToTerraform(struct.clientCredentialsArn),
        jwt_token: cdktf.stringToTerraform(struct.jwtToken),
        oauth2_grant_type: cdktf.stringToTerraform(struct.oauth2GrantType),
        refresh_token: cdktf.stringToTerraform(struct.refreshToken),
        oauth_request: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestToTerraform(struct.oauthRequest),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        access_token: {
            value: cdktf.stringToHclTerraform(struct.accessToken),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_credentials_arn: {
            value: cdktf.stringToHclTerraform(struct.clientCredentialsArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        jwt_token: {
            value: cdktf.stringToHclTerraform(struct.jwtToken),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        oauth2_grant_type: {
            value: cdktf.stringToHclTerraform(struct.oauth2GrantType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        refresh_token: {
            value: cdktf.stringToHclTerraform(struct.refreshToken),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        oauth_request: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestToHclTerraform(struct.oauthRequest),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // oauth_request - computed: false, optional: true, required: false
        this._oauthRequest = new AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestOutputReference(this, "oauth_request");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._accessToken !== undefined) {
            hasAnyValues = true;
            internalValueResult.accessToken = this._accessToken;
        }
        if (this._clientCredentialsArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientCredentialsArn = this._clientCredentialsArn;
        }
        if (this._jwtToken !== undefined) {
            hasAnyValues = true;
            internalValueResult.jwtToken = this._jwtToken;
        }
        if (this._oauth2GrantType !== undefined) {
            hasAnyValues = true;
            internalValueResult.oauth2GrantType = this._oauth2GrantType;
        }
        if (this._refreshToken !== undefined) {
            hasAnyValues = true;
            internalValueResult.refreshToken = this._refreshToken;
        }
        if (this._oauthRequest?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.oauthRequest = this._oauthRequest?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._accessToken = undefined;
            this._clientCredentialsArn = undefined;
            this._jwtToken = undefined;
            this._oauth2GrantType = undefined;
            this._refreshToken = undefined;
            this._oauthRequest.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._accessToken = value.accessToken;
            this._clientCredentialsArn = value.clientCredentialsArn;
            this._jwtToken = value.jwtToken;
            this._oauth2GrantType = value.oauth2GrantType;
            this._refreshToken = value.refreshToken;
            this._oauthRequest.internalValue = value.oauthRequest;
        }
    }
    get accessToken() {
        return this.getStringAttribute('access_token');
    }
    set accessToken(value) {
        this._accessToken = value;
    }
    resetAccessToken() {
        this._accessToken = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessTokenInput() {
        return this._accessToken;
    }
    get clientCredentialsArn() {
        return this.getStringAttribute('client_credentials_arn');
    }
    set clientCredentialsArn(value) {
        this._clientCredentialsArn = value;
    }
    resetClientCredentialsArn() {
        this._clientCredentialsArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientCredentialsArnInput() {
        return this._clientCredentialsArn;
    }
    get jwtToken() {
        return this.getStringAttribute('jwt_token');
    }
    set jwtToken(value) {
        this._jwtToken = value;
    }
    resetJwtToken() {
        this._jwtToken = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jwtTokenInput() {
        return this._jwtToken;
    }
    get oauth2GrantType() {
        return this.getStringAttribute('oauth2_grant_type');
    }
    set oauth2GrantType(value) {
        this._oauth2GrantType = value;
    }
    resetOauth2GrantType() {
        this._oauth2GrantType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oauth2GrantTypeInput() {
        return this._oauth2GrantType;
    }
    get refreshToken() {
        return this.getStringAttribute('refresh_token');
    }
    set refreshToken(value) {
        this._refreshToken = value;
    }
    resetRefreshToken() {
        this._refreshToken = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get refreshTokenInput() {
        return this._refreshToken;
    }
    get oauthRequest() {
        return this._oauthRequest;
    }
    putOauthRequest(value) {
        this._oauthRequest.internalValue = value;
    }
    resetOauthRequest() {
        this._oauthRequest.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oauthRequestInput() {
        return this._oauthRequest.internalValue;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOutputReference;
_u = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOutputReference[_u] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        password: cdktf.stringToTerraform(struct.password),
        username: cdktf.stringToTerraform(struct.username),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        password: {
            value: cdktf.stringToHclTerraform(struct.password),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        username: {
            value: cdktf.stringToHclTerraform(struct.username),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._password !== undefined) {
            hasAnyValues = true;
            internalValueResult.password = this._password;
        }
        if (this._username !== undefined) {
            hasAnyValues = true;
            internalValueResult.username = this._username;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._password = undefined;
            this._username = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._password = value.password;
            this._username = value.username;
        }
    }
    get password() {
        return this.getStringAttribute('password');
    }
    set password(value) {
        this._password = value;
    }
    // Temporarily expose input value. Use with caution.
    get passwordInput() {
        return this._password;
    }
    get username() {
        return this.getStringAttribute('username');
    }
    set username(value) {
        this._username = value;
    }
    // Temporarily expose input value. Use with caution.
    get usernameInput() {
        return this._username;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsOutputReference;
_v = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsOutputReference[_v] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auth_code: cdktf.stringToTerraform(struct.authCode),
        redirect_uri: cdktf.stringToTerraform(struct.redirectUri),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        auth_code: {
            value: cdktf.stringToHclTerraform(struct.authCode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        redirect_uri: {
            value: cdktf.stringToHclTerraform(struct.redirectUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._authCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.authCode = this._authCode;
        }
        if (this._redirectUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.redirectUri = this._redirectUri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._authCode = undefined;
            this._redirectUri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._authCode = value.authCode;
            this._redirectUri = value.redirectUri;
        }
    }
    get authCode() {
        return this.getStringAttribute('auth_code');
    }
    set authCode(value) {
        this._authCode = value;
    }
    resetAuthCode() {
        this._authCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authCodeInput() {
        return this._authCode;
    }
    get redirectUri() {
        return this.getStringAttribute('redirect_uri');
    }
    set redirectUri(value) {
        this._redirectUri = value;
    }
    resetRedirectUri() {
        this._redirectUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redirectUriInput() {
        return this._redirectUri;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestOutputReference;
_w = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestOutputReference[_w] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        access_token: cdktf.stringToTerraform(struct.accessToken),
        client_id: cdktf.stringToTerraform(struct.clientId),
        client_secret: cdktf.stringToTerraform(struct.clientSecret),
        refresh_token: cdktf.stringToTerraform(struct.refreshToken),
        oauth_request: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestToTerraform(struct.oauthRequest),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        access_token: {
            value: cdktf.stringToHclTerraform(struct.accessToken),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_id: {
            value: cdktf.stringToHclTerraform(struct.clientId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_secret: {
            value: cdktf.stringToHclTerraform(struct.clientSecret),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        refresh_token: {
            value: cdktf.stringToHclTerraform(struct.refreshToken),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        oauth_request: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestToHclTerraform(struct.oauthRequest),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // oauth_request - computed: false, optional: true, required: false
        this._oauthRequest = new AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestOutputReference(this, "oauth_request");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._accessToken !== undefined) {
            hasAnyValues = true;
            internalValueResult.accessToken = this._accessToken;
        }
        if (this._clientId !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientId = this._clientId;
        }
        if (this._clientSecret !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientSecret = this._clientSecret;
        }
        if (this._refreshToken !== undefined) {
            hasAnyValues = true;
            internalValueResult.refreshToken = this._refreshToken;
        }
        if (this._oauthRequest?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.oauthRequest = this._oauthRequest?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._accessToken = undefined;
            this._clientId = undefined;
            this._clientSecret = undefined;
            this._refreshToken = undefined;
            this._oauthRequest.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._accessToken = value.accessToken;
            this._clientId = value.clientId;
            this._clientSecret = value.clientSecret;
            this._refreshToken = value.refreshToken;
            this._oauthRequest.internalValue = value.oauthRequest;
        }
    }
    get accessToken() {
        return this.getStringAttribute('access_token');
    }
    set accessToken(value) {
        this._accessToken = value;
    }
    resetAccessToken() {
        this._accessToken = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessTokenInput() {
        return this._accessToken;
    }
    get clientId() {
        return this.getStringAttribute('client_id');
    }
    set clientId(value) {
        this._clientId = value;
    }
    // Temporarily expose input value. Use with caution.
    get clientIdInput() {
        return this._clientId;
    }
    get clientSecret() {
        return this.getStringAttribute('client_secret');
    }
    set clientSecret(value) {
        this._clientSecret = value;
    }
    // Temporarily expose input value. Use with caution.
    get clientSecretInput() {
        return this._clientSecret;
    }
    get refreshToken() {
        return this.getStringAttribute('refresh_token');
    }
    set refreshToken(value) {
        this._refreshToken = value;
    }
    resetRefreshToken() {
        this._refreshToken = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get refreshTokenInput() {
        return this._refreshToken;
    }
    get oauthRequest() {
        return this._oauthRequest;
    }
    putOauthRequest(value) {
        this._oauthRequest.internalValue = value;
    }
    resetOauthRequest() {
        this._oauthRequest.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oauthRequestInput() {
        return this._oauthRequest.internalValue;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOutputReference;
_x = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOutputReference[_x] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        basic_auth_credentials: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsToTerraform(struct.basicAuthCredentials),
        oauth_credentials: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsToTerraform(struct.oauthCredentials),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        basic_auth_credentials: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsToHclTerraform(struct.basicAuthCredentials),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsList",
        },
        oauth_credentials: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsToHclTerraform(struct.oauthCredentials),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // basic_auth_credentials - computed: false, optional: true, required: false
        this._basicAuthCredentials = new AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsOutputReference(this, "basic_auth_credentials");
        // oauth_credentials - computed: false, optional: true, required: false
        this._oauthCredentials = new AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOutputReference(this, "oauth_credentials");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._basicAuthCredentials?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.basicAuthCredentials = this._basicAuthCredentials?.internalValue;
        }
        if (this._oauthCredentials?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.oauthCredentials = this._oauthCredentials?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._basicAuthCredentials.internalValue = undefined;
            this._oauthCredentials.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._basicAuthCredentials.internalValue = value.basicAuthCredentials;
            this._oauthCredentials.internalValue = value.oauthCredentials;
        }
    }
    get basicAuthCredentials() {
        return this._basicAuthCredentials;
    }
    putBasicAuthCredentials(value) {
        this._basicAuthCredentials.internalValue = value;
    }
    resetBasicAuthCredentials() {
        this._basicAuthCredentials.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get basicAuthCredentialsInput() {
        return this._basicAuthCredentials.internalValue;
    }
    get oauthCredentials() {
        return this._oauthCredentials;
    }
    putOauthCredentials(value) {
        this._oauthCredentials.internalValue = value;
    }
    resetOauthCredentials() {
        this._oauthCredentials.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oauthCredentialsInput() {
        return this._oauthCredentials.internalValue;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOutputReference;
_y = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOutputReference[_y] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        password: cdktf.stringToTerraform(struct.password),
        username: cdktf.stringToTerraform(struct.username),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        password: {
            value: cdktf.stringToHclTerraform(struct.password),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        username: {
            value: cdktf.stringToHclTerraform(struct.username),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._password !== undefined) {
            hasAnyValues = true;
            internalValueResult.password = this._password;
        }
        if (this._username !== undefined) {
            hasAnyValues = true;
            internalValueResult.username = this._username;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._password = undefined;
            this._username = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._password = value.password;
            this._username = value.username;
        }
    }
    get password() {
        return this.getStringAttribute('password');
    }
    set password(value) {
        this._password = value;
    }
    // Temporarily expose input value. Use with caution.
    get passwordInput() {
        return this._password;
    }
    get username() {
        return this.getStringAttribute('username');
    }
    set username(value) {
        this._username = value;
    }
    // Temporarily expose input value. Use with caution.
    get usernameInput() {
        return this._username;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowOutputReference;
_z = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowOutputReference[_z] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        api_key: cdktf.stringToTerraform(struct.apiKey),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        api_key: {
            value: cdktf.stringToHclTerraform(struct.apiKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._apiKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.apiKey = this._apiKey;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._apiKey = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._apiKey = value.apiKey;
        }
    }
    get apiKey() {
        return this.getStringAttribute('api_key');
    }
    set apiKey(value) {
        this._apiKey = value;
    }
    // Temporarily expose input value. Use with caution.
    get apiKeyInput() {
        return this._apiKey;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularOutputReference[_0] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auth_code: cdktf.stringToTerraform(struct.authCode),
        redirect_uri: cdktf.stringToTerraform(struct.redirectUri),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        auth_code: {
            value: cdktf.stringToHclTerraform(struct.authCode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        redirect_uri: {
            value: cdktf.stringToHclTerraform(struct.redirectUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._authCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.authCode = this._authCode;
        }
        if (this._redirectUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.redirectUri = this._redirectUri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._authCode = undefined;
            this._redirectUri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._authCode = value.authCode;
            this._redirectUri = value.redirectUri;
        }
    }
    get authCode() {
        return this.getStringAttribute('auth_code');
    }
    set authCode(value) {
        this._authCode = value;
    }
    resetAuthCode() {
        this._authCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authCodeInput() {
        return this._authCode;
    }
    get redirectUri() {
        return this.getStringAttribute('redirect_uri');
    }
    set redirectUri(value) {
        this._redirectUri = value;
    }
    resetRedirectUri() {
        this._redirectUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redirectUriInput() {
        return this._redirectUri;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestOutputReference[_1] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        access_token: cdktf.stringToTerraform(struct.accessToken),
        client_id: cdktf.stringToTerraform(struct.clientId),
        client_secret: cdktf.stringToTerraform(struct.clientSecret),
        oauth_request: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestToTerraform(struct.oauthRequest),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        access_token: {
            value: cdktf.stringToHclTerraform(struct.accessToken),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_id: {
            value: cdktf.stringToHclTerraform(struct.clientId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_secret: {
            value: cdktf.stringToHclTerraform(struct.clientSecret),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        oauth_request: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestToHclTerraform(struct.oauthRequest),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // oauth_request - computed: false, optional: true, required: false
        this._oauthRequest = new AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestOutputReference(this, "oauth_request");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._accessToken !== undefined) {
            hasAnyValues = true;
            internalValueResult.accessToken = this._accessToken;
        }
        if (this._clientId !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientId = this._clientId;
        }
        if (this._clientSecret !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientSecret = this._clientSecret;
        }
        if (this._oauthRequest?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.oauthRequest = this._oauthRequest?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._accessToken = undefined;
            this._clientId = undefined;
            this._clientSecret = undefined;
            this._oauthRequest.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._accessToken = value.accessToken;
            this._clientId = value.clientId;
            this._clientSecret = value.clientSecret;
            this._oauthRequest.internalValue = value.oauthRequest;
        }
    }
    get accessToken() {
        return this.getStringAttribute('access_token');
    }
    set accessToken(value) {
        this._accessToken = value;
    }
    resetAccessToken() {
        this._accessToken = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessTokenInput() {
        return this._accessToken;
    }
    get clientId() {
        return this.getStringAttribute('client_id');
    }
    set clientId(value) {
        this._clientId = value;
    }
    // Temporarily expose input value. Use with caution.
    get clientIdInput() {
        return this._clientId;
    }
    get clientSecret() {
        return this.getStringAttribute('client_secret');
    }
    set clientSecret(value) {
        this._clientSecret = value;
    }
    // Temporarily expose input value. Use with caution.
    get clientSecretInput() {
        return this._clientSecret;
    }
    get oauthRequest() {
        return this._oauthRequest;
    }
    putOauthRequest(value) {
        this._oauthRequest.internalValue = value;
    }
    resetOauthRequest() {
        this._oauthRequest.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oauthRequestInput() {
        return this._oauthRequest.internalValue;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOutputReference[_2] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        password: cdktf.stringToTerraform(struct.password),
        username: cdktf.stringToTerraform(struct.username),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        password: {
            value: cdktf.stringToHclTerraform(struct.password),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        username: {
            value: cdktf.stringToHclTerraform(struct.username),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._password !== undefined) {
            hasAnyValues = true;
            internalValueResult.password = this._password;
        }
        if (this._username !== undefined) {
            hasAnyValues = true;
            internalValueResult.username = this._username;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._password = undefined;
            this._username = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._password = value.password;
            this._username = value.username;
        }
    }
    get password() {
        return this.getStringAttribute('password');
    }
    set password(value) {
        this._password = value;
    }
    // Temporarily expose input value. Use with caution.
    get passwordInput() {
        return this._password;
    }
    get username() {
        return this.getStringAttribute('username');
    }
    set username(value) {
        this._username = value;
    }
    // Temporarily expose input value. Use with caution.
    get usernameInput() {
        return this._username;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeOutputReference;
_3 = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeOutputReference[_3] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        api_secret_key: cdktf.stringToTerraform(struct.apiSecretKey),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        api_secret_key: {
            value: cdktf.stringToHclTerraform(struct.apiSecretKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._apiSecretKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.apiSecretKey = this._apiSecretKey;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._apiSecretKey = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._apiSecretKey = value.apiSecretKey;
        }
    }
    get apiSecretKey() {
        return this.getStringAttribute('api_secret_key');
    }
    set apiSecretKey(value) {
        this._apiSecretKey = value;
    }
    // Temporarily expose input value. Use with caution.
    get apiSecretKeyInput() {
        return this._apiSecretKey;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroOutputReference[_4] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        password: cdktf.stringToTerraform(struct.password),
        username: cdktf.stringToTerraform(struct.username),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        password: {
            value: cdktf.stringToHclTerraform(struct.password),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        username: {
            value: cdktf.stringToHclTerraform(struct.username),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._password !== undefined) {
            hasAnyValues = true;
            internalValueResult.password = this._password;
        }
        if (this._username !== undefined) {
            hasAnyValues = true;
            internalValueResult.username = this._username;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._password = undefined;
            this._username = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._password = value.password;
            this._username = value.username;
        }
    }
    get password() {
        return this.getStringAttribute('password');
    }
    set password(value) {
        this._password = value;
    }
    // Temporarily expose input value. Use with caution.
    get passwordInput() {
        return this._password;
    }
    get username() {
        return this.getStringAttribute('username');
    }
    set username(value) {
        this._username = value;
    }
    // Temporarily expose input value. Use with caution.
    get usernameInput() {
        return this._username;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaOutputReference;
_5 = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaOutputReference[_5] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auth_code: cdktf.stringToTerraform(struct.authCode),
        redirect_uri: cdktf.stringToTerraform(struct.redirectUri),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        auth_code: {
            value: cdktf.stringToHclTerraform(struct.authCode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        redirect_uri: {
            value: cdktf.stringToHclTerraform(struct.redirectUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._authCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.authCode = this._authCode;
        }
        if (this._redirectUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.redirectUri = this._redirectUri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._authCode = undefined;
            this._redirectUri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._authCode = value.authCode;
            this._redirectUri = value.redirectUri;
        }
    }
    get authCode() {
        return this.getStringAttribute('auth_code');
    }
    set authCode(value) {
        this._authCode = value;
    }
    resetAuthCode() {
        this._authCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authCodeInput() {
        return this._authCode;
    }
    get redirectUri() {
        return this.getStringAttribute('redirect_uri');
    }
    set redirectUri(value) {
        this._redirectUri = value;
    }
    resetRedirectUri() {
        this._redirectUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redirectUriInput() {
        return this._redirectUri;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestOutputReference;
_6 = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestOutputReference[_6] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        access_token: cdktf.stringToTerraform(struct.accessToken),
        client_id: cdktf.stringToTerraform(struct.clientId),
        client_secret: cdktf.stringToTerraform(struct.clientSecret),
        oauth_request: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestToTerraform(struct.oauthRequest),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        access_token: {
            value: cdktf.stringToHclTerraform(struct.accessToken),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_id: {
            value: cdktf.stringToHclTerraform(struct.clientId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_secret: {
            value: cdktf.stringToHclTerraform(struct.clientSecret),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        oauth_request: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestToHclTerraform(struct.oauthRequest),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // oauth_request - computed: false, optional: true, required: false
        this._oauthRequest = new AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestOutputReference(this, "oauth_request");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._accessToken !== undefined) {
            hasAnyValues = true;
            internalValueResult.accessToken = this._accessToken;
        }
        if (this._clientId !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientId = this._clientId;
        }
        if (this._clientSecret !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientSecret = this._clientSecret;
        }
        if (this._oauthRequest?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.oauthRequest = this._oauthRequest?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._accessToken = undefined;
            this._clientId = undefined;
            this._clientSecret = undefined;
            this._oauthRequest.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._accessToken = value.accessToken;
            this._clientId = value.clientId;
            this._clientSecret = value.clientSecret;
            this._oauthRequest.internalValue = value.oauthRequest;
        }
    }
    get accessToken() {
        return this.getStringAttribute('access_token');
    }
    set accessToken(value) {
        this._accessToken = value;
    }
    resetAccessToken() {
        this._accessToken = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessTokenInput() {
        return this._accessToken;
    }
    get clientId() {
        return this.getStringAttribute('client_id');
    }
    set clientId(value) {
        this._clientId = value;
    }
    // Temporarily expose input value. Use with caution.
    get clientIdInput() {
        return this._clientId;
    }
    get clientSecret() {
        return this.getStringAttribute('client_secret');
    }
    set clientSecret(value) {
        this._clientSecret = value;
    }
    // Temporarily expose input value. Use with caution.
    get clientSecretInput() {
        return this._clientSecret;
    }
    get oauthRequest() {
        return this._oauthRequest;
    }
    putOauthRequest(value) {
        this._oauthRequest.internalValue = value;
    }
    resetOauthRequest() {
        this._oauthRequest.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oauthRequestInput() {
        return this._oauthRequest.internalValue;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOutputReference;
_7 = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOutputReference[_7] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        amplitude: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeToTerraform(struct.amplitude),
        custom_connector: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorToTerraform(struct.customConnector),
        datadog: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogToTerraform(struct.datadog),
        dynatrace: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceToTerraform(struct.dynatrace),
        google_analytics: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsToTerraform(struct.googleAnalytics),
        honeycode: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeToTerraform(struct.honeycode),
        infor_nexus: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusToTerraform(struct.inforNexus),
        marketo: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoToTerraform(struct.marketo),
        redshift: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftToTerraform(struct.redshift),
        salesforce: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceToTerraform(struct.salesforce),
        sapo_data: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataToTerraform(struct.sapoData),
        service_now: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowToTerraform(struct.serviceNow),
        singular: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularToTerraform(struct.singular),
        slack: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackToTerraform(struct.slack),
        snowflake: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeToTerraform(struct.snowflake),
        trendmicro: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroToTerraform(struct.trendmicro),
        veeva: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaToTerraform(struct.veeva),
        zendesk: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskToTerraform(struct.zendesk),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        amplitude: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeToHclTerraform(struct.amplitude),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeList",
        },
        custom_connector: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorToHclTerraform(struct.customConnector),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorList",
        },
        datadog: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogToHclTerraform(struct.datadog),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogList",
        },
        dynatrace: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceToHclTerraform(struct.dynatrace),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceList",
        },
        google_analytics: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsToHclTerraform(struct.googleAnalytics),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsList",
        },
        honeycode: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeToHclTerraform(struct.honeycode),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeList",
        },
        infor_nexus: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusToHclTerraform(struct.inforNexus),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusList",
        },
        marketo: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoToHclTerraform(struct.marketo),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoList",
        },
        redshift: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftToHclTerraform(struct.redshift),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftList",
        },
        salesforce: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceToHclTerraform(struct.salesforce),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceList",
        },
        sapo_data: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataToHclTerraform(struct.sapoData),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataList",
        },
        service_now: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowToHclTerraform(struct.serviceNow),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowList",
        },
        singular: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularToHclTerraform(struct.singular),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularList",
        },
        slack: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackToHclTerraform(struct.slack),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackList",
        },
        snowflake: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeToHclTerraform(struct.snowflake),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeList",
        },
        trendmicro: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroToHclTerraform(struct.trendmicro),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroList",
        },
        veeva: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaToHclTerraform(struct.veeva),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaList",
        },
        zendesk: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskToHclTerraform(struct.zendesk),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // amplitude - computed: false, optional: true, required: false
        this._amplitude = new AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeOutputReference(this, "amplitude");
        // custom_connector - computed: false, optional: true, required: false
        this._customConnector = new AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOutputReference(this, "custom_connector");
        // datadog - computed: false, optional: true, required: false
        this._datadog = new AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogOutputReference(this, "datadog");
        // dynatrace - computed: false, optional: true, required: false
        this._dynatrace = new AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceOutputReference(this, "dynatrace");
        // google_analytics - computed: false, optional: true, required: false
        this._googleAnalytics = new AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOutputReference(this, "google_analytics");
        // honeycode - computed: false, optional: true, required: false
        this._honeycode = new AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOutputReference(this, "honeycode");
        // infor_nexus - computed: false, optional: true, required: false
        this._inforNexus = new AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusOutputReference(this, "infor_nexus");
        // marketo - computed: false, optional: true, required: false
        this._marketo = new AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOutputReference(this, "marketo");
        // redshift - computed: false, optional: true, required: false
        this._redshift = new AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftOutputReference(this, "redshift");
        // salesforce - computed: false, optional: true, required: false
        this._salesforce = new AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOutputReference(this, "salesforce");
        // sapo_data - computed: false, optional: true, required: false
        this._sapoData = new AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOutputReference(this, "sapo_data");
        // service_now - computed: false, optional: true, required: false
        this._serviceNow = new AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowOutputReference(this, "service_now");
        // singular - computed: false, optional: true, required: false
        this._singular = new AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularOutputReference(this, "singular");
        // slack - computed: false, optional: true, required: false
        this._slack = new AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOutputReference(this, "slack");
        // snowflake - computed: false, optional: true, required: false
        this._snowflake = new AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeOutputReference(this, "snowflake");
        // trendmicro - computed: false, optional: true, required: false
        this._trendmicro = new AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroOutputReference(this, "trendmicro");
        // veeva - computed: false, optional: true, required: false
        this._veeva = new AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaOutputReference(this, "veeva");
        // zendesk - computed: false, optional: true, required: false
        this._zendesk = new AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOutputReference(this, "zendesk");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._amplitude?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.amplitude = this._amplitude?.internalValue;
        }
        if (this._customConnector?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customConnector = this._customConnector?.internalValue;
        }
        if (this._datadog?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.datadog = this._datadog?.internalValue;
        }
        if (this._dynatrace?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dynatrace = this._dynatrace?.internalValue;
        }
        if (this._googleAnalytics?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.googleAnalytics = this._googleAnalytics?.internalValue;
        }
        if (this._honeycode?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.honeycode = this._honeycode?.internalValue;
        }
        if (this._inforNexus?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.inforNexus = this._inforNexus?.internalValue;
        }
        if (this._marketo?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.marketo = this._marketo?.internalValue;
        }
        if (this._redshift?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.redshift = this._redshift?.internalValue;
        }
        if (this._salesforce?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.salesforce = this._salesforce?.internalValue;
        }
        if (this._sapoData?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sapoData = this._sapoData?.internalValue;
        }
        if (this._serviceNow?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceNow = this._serviceNow?.internalValue;
        }
        if (this._singular?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.singular = this._singular?.internalValue;
        }
        if (this._slack?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.slack = this._slack?.internalValue;
        }
        if (this._snowflake?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.snowflake = this._snowflake?.internalValue;
        }
        if (this._trendmicro?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.trendmicro = this._trendmicro?.internalValue;
        }
        if (this._veeva?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.veeva = this._veeva?.internalValue;
        }
        if (this._zendesk?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.zendesk = this._zendesk?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._amplitude.internalValue = undefined;
            this._customConnector.internalValue = undefined;
            this._datadog.internalValue = undefined;
            this._dynatrace.internalValue = undefined;
            this._googleAnalytics.internalValue = undefined;
            this._honeycode.internalValue = undefined;
            this._inforNexus.internalValue = undefined;
            this._marketo.internalValue = undefined;
            this._redshift.internalValue = undefined;
            this._salesforce.internalValue = undefined;
            this._sapoData.internalValue = undefined;
            this._serviceNow.internalValue = undefined;
            this._singular.internalValue = undefined;
            this._slack.internalValue = undefined;
            this._snowflake.internalValue = undefined;
            this._trendmicro.internalValue = undefined;
            this._veeva.internalValue = undefined;
            this._zendesk.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._amplitude.internalValue = value.amplitude;
            this._customConnector.internalValue = value.customConnector;
            this._datadog.internalValue = value.datadog;
            this._dynatrace.internalValue = value.dynatrace;
            this._googleAnalytics.internalValue = value.googleAnalytics;
            this._honeycode.internalValue = value.honeycode;
            this._inforNexus.internalValue = value.inforNexus;
            this._marketo.internalValue = value.marketo;
            this._redshift.internalValue = value.redshift;
            this._salesforce.internalValue = value.salesforce;
            this._sapoData.internalValue = value.sapoData;
            this._serviceNow.internalValue = value.serviceNow;
            this._singular.internalValue = value.singular;
            this._slack.internalValue = value.slack;
            this._snowflake.internalValue = value.snowflake;
            this._trendmicro.internalValue = value.trendmicro;
            this._veeva.internalValue = value.veeva;
            this._zendesk.internalValue = value.zendesk;
        }
    }
    get amplitude() {
        return this._amplitude;
    }
    putAmplitude(value) {
        this._amplitude.internalValue = value;
    }
    resetAmplitude() {
        this._amplitude.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get amplitudeInput() {
        return this._amplitude.internalValue;
    }
    get customConnector() {
        return this._customConnector;
    }
    putCustomConnector(value) {
        this._customConnector.internalValue = value;
    }
    resetCustomConnector() {
        this._customConnector.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customConnectorInput() {
        return this._customConnector.internalValue;
    }
    get datadog() {
        return this._datadog;
    }
    putDatadog(value) {
        this._datadog.internalValue = value;
    }
    resetDatadog() {
        this._datadog.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get datadogInput() {
        return this._datadog.internalValue;
    }
    get dynatrace() {
        return this._dynatrace;
    }
    putDynatrace(value) {
        this._dynatrace.internalValue = value;
    }
    resetDynatrace() {
        this._dynatrace.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dynatraceInput() {
        return this._dynatrace.internalValue;
    }
    get googleAnalytics() {
        return this._googleAnalytics;
    }
    putGoogleAnalytics(value) {
        this._googleAnalytics.internalValue = value;
    }
    resetGoogleAnalytics() {
        this._googleAnalytics.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get googleAnalyticsInput() {
        return this._googleAnalytics.internalValue;
    }
    get honeycode() {
        return this._honeycode;
    }
    putHoneycode(value) {
        this._honeycode.internalValue = value;
    }
    resetHoneycode() {
        this._honeycode.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get honeycodeInput() {
        return this._honeycode.internalValue;
    }
    get inforNexus() {
        return this._inforNexus;
    }
    putInforNexus(value) {
        this._inforNexus.internalValue = value;
    }
    resetInforNexus() {
        this._inforNexus.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inforNexusInput() {
        return this._inforNexus.internalValue;
    }
    get marketo() {
        return this._marketo;
    }
    putMarketo(value) {
        this._marketo.internalValue = value;
    }
    resetMarketo() {
        this._marketo.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get marketoInput() {
        return this._marketo.internalValue;
    }
    get redshift() {
        return this._redshift;
    }
    putRedshift(value) {
        this._redshift.internalValue = value;
    }
    resetRedshift() {
        this._redshift.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redshiftInput() {
        return this._redshift.internalValue;
    }
    get salesforce() {
        return this._salesforce;
    }
    putSalesforce(value) {
        this._salesforce.internalValue = value;
    }
    resetSalesforce() {
        this._salesforce.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get salesforceInput() {
        return this._salesforce.internalValue;
    }
    get sapoData() {
        return this._sapoData;
    }
    putSapoData(value) {
        this._sapoData.internalValue = value;
    }
    resetSapoData() {
        this._sapoData.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sapoDataInput() {
        return this._sapoData.internalValue;
    }
    get serviceNow() {
        return this._serviceNow;
    }
    putServiceNow(value) {
        this._serviceNow.internalValue = value;
    }
    resetServiceNow() {
        this._serviceNow.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceNowInput() {
        return this._serviceNow.internalValue;
    }
    get singular() {
        return this._singular;
    }
    putSingular(value) {
        this._singular.internalValue = value;
    }
    resetSingular() {
        this._singular.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get singularInput() {
        return this._singular.internalValue;
    }
    get slack() {
        return this._slack;
    }
    putSlack(value) {
        this._slack.internalValue = value;
    }
    resetSlack() {
        this._slack.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get slackInput() {
        return this._slack.internalValue;
    }
    get snowflake() {
        return this._snowflake;
    }
    putSnowflake(value) {
        this._snowflake.internalValue = value;
    }
    resetSnowflake() {
        this._snowflake.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get snowflakeInput() {
        return this._snowflake.internalValue;
    }
    get trendmicro() {
        return this._trendmicro;
    }
    putTrendmicro(value) {
        this._trendmicro.internalValue = value;
    }
    resetTrendmicro() {
        this._trendmicro.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get trendmicroInput() {
        return this._trendmicro.internalValue;
    }
    get veeva() {
        return this._veeva;
    }
    putVeeva(value) {
        this._veeva.internalValue = value;
    }
    resetVeeva() {
        this._veeva.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get veevaInput() {
        return this._veeva.internalValue;
    }
    get zendesk() {
        return this._zendesk;
    }
    putZendesk(value) {
        this._zendesk.internalValue = value;
    }
    resetZendesk() {
        this._zendesk.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get zendeskInput() {
        return this._zendesk.internalValue;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutputReference;
_8 = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutputReference[_8] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeOutputReference;
_9 = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeOutputReference[_9] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        oauth2_grant_type: cdktf.stringToTerraform(struct.oauth2GrantType),
        token_url: cdktf.stringToTerraform(struct.tokenUrl),
        token_url_custom_properties: cdktf.hashMapper(cdktf.stringToTerraform)(struct.tokenUrlCustomProperties),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        oauth2_grant_type: {
            value: cdktf.stringToHclTerraform(struct.oauth2GrantType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        token_url: {
            value: cdktf.stringToHclTerraform(struct.tokenUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        token_url_custom_properties: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.tokenUrlCustomProperties),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._oauth2GrantType !== undefined) {
            hasAnyValues = true;
            internalValueResult.oauth2GrantType = this._oauth2GrantType;
        }
        if (this._tokenUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.tokenUrl = this._tokenUrl;
        }
        if (this._tokenUrlCustomProperties !== undefined) {
            hasAnyValues = true;
            internalValueResult.tokenUrlCustomProperties = this._tokenUrlCustomProperties;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._oauth2GrantType = undefined;
            this._tokenUrl = undefined;
            this._tokenUrlCustomProperties = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._oauth2GrantType = value.oauth2GrantType;
            this._tokenUrl = value.tokenUrl;
            this._tokenUrlCustomProperties = value.tokenUrlCustomProperties;
        }
    }
    get oauth2GrantType() {
        return this.getStringAttribute('oauth2_grant_type');
    }
    set oauth2GrantType(value) {
        this._oauth2GrantType = value;
    }
    // Temporarily expose input value. Use with caution.
    get oauth2GrantTypeInput() {
        return this._oauth2GrantType;
    }
    get tokenUrl() {
        return this.getStringAttribute('token_url');
    }
    set tokenUrl(value) {
        this._tokenUrl = value;
    }
    // Temporarily expose input value. Use with caution.
    get tokenUrlInput() {
        return this._tokenUrl;
    }
    get tokenUrlCustomProperties() {
        return this.getStringMapAttribute('token_url_custom_properties');
    }
    set tokenUrlCustomProperties(value) {
        this._tokenUrlCustomProperties = value;
    }
    resetTokenUrlCustomProperties() {
        this._tokenUrlCustomProperties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tokenUrlCustomPropertiesInput() {
        return this._tokenUrlCustomProperties;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesOutputReference;
_10 = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesOutputReference[_10] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        profile_properties: cdktf.hashMapper(cdktf.stringToTerraform)(struct.profileProperties),
        oauth2_properties: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesToTerraform(struct.oauth2Properties),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        profile_properties: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.profileProperties),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        oauth2_properties: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesToHclTerraform(struct.oauth2Properties),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // oauth2_properties - computed: false, optional: true, required: false
        this._oauth2Properties = new AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesOutputReference(this, "oauth2_properties");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._profileProperties !== undefined) {
            hasAnyValues = true;
            internalValueResult.profileProperties = this._profileProperties;
        }
        if (this._oauth2Properties?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.oauth2Properties = this._oauth2Properties?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._profileProperties = undefined;
            this._oauth2Properties.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._profileProperties = value.profileProperties;
            this._oauth2Properties.internalValue = value.oauth2Properties;
        }
    }
    get profileProperties() {
        return this.getStringMapAttribute('profile_properties');
    }
    set profileProperties(value) {
        this._profileProperties = value;
    }
    resetProfileProperties() {
        this._profileProperties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get profilePropertiesInput() {
        return this._profileProperties;
    }
    get oauth2Properties() {
        return this._oauth2Properties;
    }
    putOauth2Properties(value) {
        this._oauth2Properties.internalValue = value;
    }
    resetOauth2Properties() {
        this._oauth2Properties.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oauth2PropertiesInput() {
        return this._oauth2Properties.internalValue;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOutputReference;
_11 = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOutputReference[_11] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        instance_url: cdktf.stringToTerraform(struct.instanceUrl),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        instance_url: {
            value: cdktf.stringToHclTerraform(struct.instanceUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._instanceUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceUrl = this._instanceUrl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._instanceUrl = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._instanceUrl = value.instanceUrl;
        }
    }
    get instanceUrl() {
        return this.getStringAttribute('instance_url');
    }
    set instanceUrl(value) {
        this._instanceUrl = value;
    }
    // Temporarily expose input value. Use with caution.
    get instanceUrlInput() {
        return this._instanceUrl;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogOutputReference;
_12 = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogOutputReference[_12] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        instance_url: cdktf.stringToTerraform(struct.instanceUrl),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        instance_url: {
            value: cdktf.stringToHclTerraform(struct.instanceUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._instanceUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceUrl = this._instanceUrl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._instanceUrl = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._instanceUrl = value.instanceUrl;
        }
    }
    get instanceUrl() {
        return this.getStringAttribute('instance_url');
    }
    set instanceUrl(value) {
        this._instanceUrl = value;
    }
    // Temporarily expose input value. Use with caution.
    get instanceUrlInput() {
        return this._instanceUrl;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceOutputReference;
_13 = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceOutputReference[_13] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsOutputReference;
_14 = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsOutputReference[_14] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeOutputReference;
_15 = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeOutputReference[_15] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        instance_url: cdktf.stringToTerraform(struct.instanceUrl),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        instance_url: {
            value: cdktf.stringToHclTerraform(struct.instanceUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._instanceUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceUrl = this._instanceUrl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._instanceUrl = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._instanceUrl = value.instanceUrl;
        }
    }
    get instanceUrl() {
        return this.getStringAttribute('instance_url');
    }
    set instanceUrl(value) {
        this._instanceUrl = value;
    }
    // Temporarily expose input value. Use with caution.
    get instanceUrlInput() {
        return this._instanceUrl;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusOutputReference;
_16 = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusOutputReference[_16] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        instance_url: cdktf.stringToTerraform(struct.instanceUrl),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        instance_url: {
            value: cdktf.stringToHclTerraform(struct.instanceUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._instanceUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceUrl = this._instanceUrl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._instanceUrl = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._instanceUrl = value.instanceUrl;
        }
    }
    get instanceUrl() {
        return this.getStringAttribute('instance_url');
    }
    set instanceUrl(value) {
        this._instanceUrl = value;
    }
    // Temporarily expose input value. Use with caution.
    get instanceUrlInput() {
        return this._instanceUrl;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoOutputReference;
_17 = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoOutputReference[_17] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        bucket_prefix: cdktf.stringToTerraform(struct.bucketPrefix),
        cluster_identifier: cdktf.stringToTerraform(struct.clusterIdentifier),
        data_api_role_arn: cdktf.stringToTerraform(struct.dataApiRoleArn),
        database_name: cdktf.stringToTerraform(struct.databaseName),
        database_url: cdktf.stringToTerraform(struct.databaseUrl),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bucket_name: {
            value: cdktf.stringToHclTerraform(struct.bucketName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        bucket_prefix: {
            value: cdktf.stringToHclTerraform(struct.bucketPrefix),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cluster_identifier: {
            value: cdktf.stringToHclTerraform(struct.clusterIdentifier),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        data_api_role_arn: {
            value: cdktf.stringToHclTerraform(struct.dataApiRoleArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        database_name: {
            value: cdktf.stringToHclTerraform(struct.databaseName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        database_url: {
            value: cdktf.stringToHclTerraform(struct.databaseUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        role_arn: {
            value: cdktf.stringToHclTerraform(struct.roleArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketName !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketName = this._bucketName;
        }
        if (this._bucketPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketPrefix = this._bucketPrefix;
        }
        if (this._clusterIdentifier !== undefined) {
            hasAnyValues = true;
            internalValueResult.clusterIdentifier = this._clusterIdentifier;
        }
        if (this._dataApiRoleArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataApiRoleArn = this._dataApiRoleArn;
        }
        if (this._databaseName !== undefined) {
            hasAnyValues = true;
            internalValueResult.databaseName = this._databaseName;
        }
        if (this._databaseUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.databaseUrl = this._databaseUrl;
        }
        if (this._roleArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.roleArn = this._roleArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketName = undefined;
            this._bucketPrefix = undefined;
            this._clusterIdentifier = undefined;
            this._dataApiRoleArn = undefined;
            this._databaseName = undefined;
            this._databaseUrl = undefined;
            this._roleArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketName = value.bucketName;
            this._bucketPrefix = value.bucketPrefix;
            this._clusterIdentifier = value.clusterIdentifier;
            this._dataApiRoleArn = value.dataApiRoleArn;
            this._databaseName = value.databaseName;
            this._databaseUrl = value.databaseUrl;
            this._roleArn = value.roleArn;
        }
    }
    get bucketName() {
        return this.getStringAttribute('bucket_name');
    }
    set bucketName(value) {
        this._bucketName = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketNameInput() {
        return this._bucketName;
    }
    get bucketPrefix() {
        return this.getStringAttribute('bucket_prefix');
    }
    set bucketPrefix(value) {
        this._bucketPrefix = value;
    }
    resetBucketPrefix() {
        this._bucketPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketPrefixInput() {
        return this._bucketPrefix;
    }
    get clusterIdentifier() {
        return this.getStringAttribute('cluster_identifier');
    }
    set clusterIdentifier(value) {
        this._clusterIdentifier = value;
    }
    resetClusterIdentifier() {
        this._clusterIdentifier = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clusterIdentifierInput() {
        return this._clusterIdentifier;
    }
    get dataApiRoleArn() {
        return this.getStringAttribute('data_api_role_arn');
    }
    set dataApiRoleArn(value) {
        this._dataApiRoleArn = value;
    }
    resetDataApiRoleArn() {
        this._dataApiRoleArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataApiRoleArnInput() {
        return this._dataApiRoleArn;
    }
    get databaseName() {
        return this.getStringAttribute('database_name');
    }
    set databaseName(value) {
        this._databaseName = value;
    }
    resetDatabaseName() {
        this._databaseName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get databaseNameInput() {
        return this._databaseName;
    }
    get databaseUrl() {
        return this.getStringAttribute('database_url');
    }
    set databaseUrl(value) {
        this._databaseUrl = value;
    }
    resetDatabaseUrl() {
        this._databaseUrl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get databaseUrlInput() {
        return this._databaseUrl;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftOutputReference;
_18 = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftOutputReference[_18] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        instance_url: cdktf.stringToTerraform(struct.instanceUrl),
        is_sandbox_environment: cdktf.booleanToTerraform(struct.isSandboxEnvironment),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        instance_url: {
            value: cdktf.stringToHclTerraform(struct.instanceUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        is_sandbox_environment: {
            value: cdktf.booleanToHclTerraform(struct.isSandboxEnvironment),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._instanceUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceUrl = this._instanceUrl;
        }
        if (this._isSandboxEnvironment !== undefined) {
            hasAnyValues = true;
            internalValueResult.isSandboxEnvironment = this._isSandboxEnvironment;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._instanceUrl = undefined;
            this._isSandboxEnvironment = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._instanceUrl = value.instanceUrl;
            this._isSandboxEnvironment = value.isSandboxEnvironment;
        }
    }
    get instanceUrl() {
        return this.getStringAttribute('instance_url');
    }
    set instanceUrl(value) {
        this._instanceUrl = value;
    }
    resetInstanceUrl() {
        this._instanceUrl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceUrlInput() {
        return this._instanceUrl;
    }
    get isSandboxEnvironment() {
        return this.getBooleanAttribute('is_sandbox_environment');
    }
    set isSandboxEnvironment(value) {
        this._isSandboxEnvironment = value;
    }
    resetIsSandboxEnvironment() {
        this._isSandboxEnvironment = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get isSandboxEnvironmentInput() {
        return this._isSandboxEnvironment;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceOutputReference;
_19 = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceOutputReference[_19] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auth_code_url: cdktf.stringToTerraform(struct.authCodeUrl),
        oauth_scopes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.oauthScopes),
        token_url: cdktf.stringToTerraform(struct.tokenUrl),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        auth_code_url: {
            value: cdktf.stringToHclTerraform(struct.authCodeUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        oauth_scopes: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.oauthScopes),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        token_url: {
            value: cdktf.stringToHclTerraform(struct.tokenUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._authCodeUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.authCodeUrl = this._authCodeUrl;
        }
        if (this._oauthScopes !== undefined) {
            hasAnyValues = true;
            internalValueResult.oauthScopes = this._oauthScopes;
        }
        if (this._tokenUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.tokenUrl = this._tokenUrl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._authCodeUrl = undefined;
            this._oauthScopes = undefined;
            this._tokenUrl = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._authCodeUrl = value.authCodeUrl;
            this._oauthScopes = value.oauthScopes;
            this._tokenUrl = value.tokenUrl;
        }
    }
    get authCodeUrl() {
        return this.getStringAttribute('auth_code_url');
    }
    set authCodeUrl(value) {
        this._authCodeUrl = value;
    }
    // Temporarily expose input value. Use with caution.
    get authCodeUrlInput() {
        return this._authCodeUrl;
    }
    get oauthScopes() {
        return this.getListAttribute('oauth_scopes');
    }
    set oauthScopes(value) {
        this._oauthScopes = value;
    }
    // Temporarily expose input value. Use with caution.
    get oauthScopesInput() {
        return this._oauthScopes;
    }
    get tokenUrl() {
        return this.getStringAttribute('token_url');
    }
    set tokenUrl(value) {
        this._tokenUrl = value;
    }
    // Temporarily expose input value. Use with caution.
    get tokenUrlInput() {
        return this._tokenUrl;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesOutputReference;
_20 = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesOutputReference[_20] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        application_host_url: cdktf.stringToTerraform(struct.applicationHostUrl),
        application_service_path: cdktf.stringToTerraform(struct.applicationServicePath),
        client_number: cdktf.stringToTerraform(struct.clientNumber),
        logon_language: cdktf.stringToTerraform(struct.logonLanguage),
        port_number: cdktf.numberToTerraform(struct.portNumber),
        private_link_service_name: cdktf.stringToTerraform(struct.privateLinkServiceName),
        oauth_properties: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesToTerraform(struct.oauthProperties),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        application_host_url: {
            value: cdktf.stringToHclTerraform(struct.applicationHostUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        application_service_path: {
            value: cdktf.stringToHclTerraform(struct.applicationServicePath),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_number: {
            value: cdktf.stringToHclTerraform(struct.clientNumber),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        logon_language: {
            value: cdktf.stringToHclTerraform(struct.logonLanguage),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        port_number: {
            value: cdktf.numberToHclTerraform(struct.portNumber),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        private_link_service_name: {
            value: cdktf.stringToHclTerraform(struct.privateLinkServiceName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        oauth_properties: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesToHclTerraform(struct.oauthProperties),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // oauth_properties - computed: false, optional: true, required: false
        this._oauthProperties = new AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesOutputReference(this, "oauth_properties");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._applicationHostUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.applicationHostUrl = this._applicationHostUrl;
        }
        if (this._applicationServicePath !== undefined) {
            hasAnyValues = true;
            internalValueResult.applicationServicePath = this._applicationServicePath;
        }
        if (this._clientNumber !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientNumber = this._clientNumber;
        }
        if (this._logonLanguage !== undefined) {
            hasAnyValues = true;
            internalValueResult.logonLanguage = this._logonLanguage;
        }
        if (this._portNumber !== undefined) {
            hasAnyValues = true;
            internalValueResult.portNumber = this._portNumber;
        }
        if (this._privateLinkServiceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.privateLinkServiceName = this._privateLinkServiceName;
        }
        if (this._oauthProperties?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.oauthProperties = this._oauthProperties?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._applicationHostUrl = undefined;
            this._applicationServicePath = undefined;
            this._clientNumber = undefined;
            this._logonLanguage = undefined;
            this._portNumber = undefined;
            this._privateLinkServiceName = undefined;
            this._oauthProperties.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._applicationHostUrl = value.applicationHostUrl;
            this._applicationServicePath = value.applicationServicePath;
            this._clientNumber = value.clientNumber;
            this._logonLanguage = value.logonLanguage;
            this._portNumber = value.portNumber;
            this._privateLinkServiceName = value.privateLinkServiceName;
            this._oauthProperties.internalValue = value.oauthProperties;
        }
    }
    get applicationHostUrl() {
        return this.getStringAttribute('application_host_url');
    }
    set applicationHostUrl(value) {
        this._applicationHostUrl = value;
    }
    // Temporarily expose input value. Use with caution.
    get applicationHostUrlInput() {
        return this._applicationHostUrl;
    }
    get applicationServicePath() {
        return this.getStringAttribute('application_service_path');
    }
    set applicationServicePath(value) {
        this._applicationServicePath = value;
    }
    // Temporarily expose input value. Use with caution.
    get applicationServicePathInput() {
        return this._applicationServicePath;
    }
    get clientNumber() {
        return this.getStringAttribute('client_number');
    }
    set clientNumber(value) {
        this._clientNumber = value;
    }
    // Temporarily expose input value. Use with caution.
    get clientNumberInput() {
        return this._clientNumber;
    }
    get logonLanguage() {
        return this.getStringAttribute('logon_language');
    }
    set logonLanguage(value) {
        this._logonLanguage = value;
    }
    resetLogonLanguage() {
        this._logonLanguage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logonLanguageInput() {
        return this._logonLanguage;
    }
    get portNumber() {
        return this.getNumberAttribute('port_number');
    }
    set portNumber(value) {
        this._portNumber = value;
    }
    // Temporarily expose input value. Use with caution.
    get portNumberInput() {
        return this._portNumber;
    }
    get privateLinkServiceName() {
        return this.getStringAttribute('private_link_service_name');
    }
    set privateLinkServiceName(value) {
        this._privateLinkServiceName = value;
    }
    resetPrivateLinkServiceName() {
        this._privateLinkServiceName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get privateLinkServiceNameInput() {
        return this._privateLinkServiceName;
    }
    get oauthProperties() {
        return this._oauthProperties;
    }
    putOauthProperties(value) {
        this._oauthProperties.internalValue = value;
    }
    resetOauthProperties() {
        this._oauthProperties.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oauthPropertiesInput() {
        return this._oauthProperties.internalValue;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOutputReference;
_21 = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOutputReference[_21] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        instance_url: cdktf.stringToTerraform(struct.instanceUrl),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        instance_url: {
            value: cdktf.stringToHclTerraform(struct.instanceUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._instanceUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceUrl = this._instanceUrl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._instanceUrl = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._instanceUrl = value.instanceUrl;
        }
    }
    get instanceUrl() {
        return this.getStringAttribute('instance_url');
    }
    set instanceUrl(value) {
        this._instanceUrl = value;
    }
    // Temporarily expose input value. Use with caution.
    get instanceUrlInput() {
        return this._instanceUrl;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowOutputReference;
_22 = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowOutputReference[_22] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularOutputReference;
_23 = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularOutputReference[_23] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        instance_url: cdktf.stringToTerraform(struct.instanceUrl),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        instance_url: {
            value: cdktf.stringToHclTerraform(struct.instanceUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._instanceUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceUrl = this._instanceUrl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._instanceUrl = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._instanceUrl = value.instanceUrl;
        }
    }
    get instanceUrl() {
        return this.getStringAttribute('instance_url');
    }
    set instanceUrl(value) {
        this._instanceUrl = value;
    }
    // Temporarily expose input value. Use with caution.
    get instanceUrlInput() {
        return this._instanceUrl;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackOutputReference;
_24 = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackOutputReference[_24] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        account_name: cdktf.stringToTerraform(struct.accountName),
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        bucket_prefix: cdktf.stringToTerraform(struct.bucketPrefix),
        private_link_service_name: cdktf.stringToTerraform(struct.privateLinkServiceName),
        region: cdktf.stringToTerraform(struct.region),
        stage: cdktf.stringToTerraform(struct.stage),
        warehouse: cdktf.stringToTerraform(struct.warehouse),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        account_name: {
            value: cdktf.stringToHclTerraform(struct.accountName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        bucket_name: {
            value: cdktf.stringToHclTerraform(struct.bucketName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        bucket_prefix: {
            value: cdktf.stringToHclTerraform(struct.bucketPrefix),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        private_link_service_name: {
            value: cdktf.stringToHclTerraform(struct.privateLinkServiceName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        region: {
            value: cdktf.stringToHclTerraform(struct.region),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        stage: {
            value: cdktf.stringToHclTerraform(struct.stage),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        warehouse: {
            value: cdktf.stringToHclTerraform(struct.warehouse),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._accountName !== undefined) {
            hasAnyValues = true;
            internalValueResult.accountName = this._accountName;
        }
        if (this._bucketName !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketName = this._bucketName;
        }
        if (this._bucketPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketPrefix = this._bucketPrefix;
        }
        if (this._privateLinkServiceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.privateLinkServiceName = this._privateLinkServiceName;
        }
        if (this._region !== undefined) {
            hasAnyValues = true;
            internalValueResult.region = this._region;
        }
        if (this._stage !== undefined) {
            hasAnyValues = true;
            internalValueResult.stage = this._stage;
        }
        if (this._warehouse !== undefined) {
            hasAnyValues = true;
            internalValueResult.warehouse = this._warehouse;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._accountName = undefined;
            this._bucketName = undefined;
            this._bucketPrefix = undefined;
            this._privateLinkServiceName = undefined;
            this._region = undefined;
            this._stage = undefined;
            this._warehouse = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._accountName = value.accountName;
            this._bucketName = value.bucketName;
            this._bucketPrefix = value.bucketPrefix;
            this._privateLinkServiceName = value.privateLinkServiceName;
            this._region = value.region;
            this._stage = value.stage;
            this._warehouse = value.warehouse;
        }
    }
    get accountName() {
        return this.getStringAttribute('account_name');
    }
    set accountName(value) {
        this._accountName = value;
    }
    resetAccountName() {
        this._accountName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accountNameInput() {
        return this._accountName;
    }
    get bucketName() {
        return this.getStringAttribute('bucket_name');
    }
    set bucketName(value) {
        this._bucketName = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketNameInput() {
        return this._bucketName;
    }
    get bucketPrefix() {
        return this.getStringAttribute('bucket_prefix');
    }
    set bucketPrefix(value) {
        this._bucketPrefix = value;
    }
    resetBucketPrefix() {
        this._bucketPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketPrefixInput() {
        return this._bucketPrefix;
    }
    get privateLinkServiceName() {
        return this.getStringAttribute('private_link_service_name');
    }
    set privateLinkServiceName(value) {
        this._privateLinkServiceName = value;
    }
    resetPrivateLinkServiceName() {
        this._privateLinkServiceName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get privateLinkServiceNameInput() {
        return this._privateLinkServiceName;
    }
    get region() {
        return this.getStringAttribute('region');
    }
    set region(value) {
        this._region = value;
    }
    resetRegion() {
        this._region = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regionInput() {
        return this._region;
    }
    get stage() {
        return this.getStringAttribute('stage');
    }
    set stage(value) {
        this._stage = value;
    }
    // Temporarily expose input value. Use with caution.
    get stageInput() {
        return this._stage;
    }
    get warehouse() {
        return this.getStringAttribute('warehouse');
    }
    set warehouse(value) {
        this._warehouse = value;
    }
    // Temporarily expose input value. Use with caution.
    get warehouseInput() {
        return this._warehouse;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeOutputReference;
_25 = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeOutputReference[_25] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroOutputReference;
_26 = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroOutputReference[_26] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        instance_url: cdktf.stringToTerraform(struct.instanceUrl),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        instance_url: {
            value: cdktf.stringToHclTerraform(struct.instanceUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._instanceUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceUrl = this._instanceUrl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._instanceUrl = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._instanceUrl = value.instanceUrl;
        }
    }
    get instanceUrl() {
        return this.getStringAttribute('instance_url');
    }
    set instanceUrl(value) {
        this._instanceUrl = value;
    }
    // Temporarily expose input value. Use with caution.
    get instanceUrlInput() {
        return this._instanceUrl;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaOutputReference;
_27 = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaOutputReference[_27] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        instance_url: cdktf.stringToTerraform(struct.instanceUrl),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        instance_url: {
            value: cdktf.stringToHclTerraform(struct.instanceUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._instanceUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceUrl = this._instanceUrl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._instanceUrl = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._instanceUrl = value.instanceUrl;
        }
    }
    get instanceUrl() {
        return this.getStringAttribute('instance_url');
    }
    set instanceUrl(value) {
        this._instanceUrl = value;
    }
    // Temporarily expose input value. Use with caution.
    get instanceUrlInput() {
        return this._instanceUrl;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskOutputReference;
_28 = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskOutputReference[_28] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        amplitude: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeToTerraform(struct.amplitude),
        custom_connector: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorToTerraform(struct.customConnector),
        datadog: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogToTerraform(struct.datadog),
        dynatrace: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceToTerraform(struct.dynatrace),
        google_analytics: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsToTerraform(struct.googleAnalytics),
        honeycode: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeToTerraform(struct.honeycode),
        infor_nexus: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusToTerraform(struct.inforNexus),
        marketo: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoToTerraform(struct.marketo),
        redshift: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftToTerraform(struct.redshift),
        salesforce: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceToTerraform(struct.salesforce),
        sapo_data: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataToTerraform(struct.sapoData),
        service_now: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowToTerraform(struct.serviceNow),
        singular: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularToTerraform(struct.singular),
        slack: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackToTerraform(struct.slack),
        snowflake: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeToTerraform(struct.snowflake),
        trendmicro: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroToTerraform(struct.trendmicro),
        veeva: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaToTerraform(struct.veeva),
        zendesk: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskToTerraform(struct.zendesk),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesToTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesToTerraform;
function appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        amplitude: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeToHclTerraform(struct.amplitude),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeList",
        },
        custom_connector: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorToHclTerraform(struct.customConnector),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorList",
        },
        datadog: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogToHclTerraform(struct.datadog),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogList",
        },
        dynatrace: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceToHclTerraform(struct.dynatrace),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceList",
        },
        google_analytics: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsToHclTerraform(struct.googleAnalytics),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsList",
        },
        honeycode: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeToHclTerraform(struct.honeycode),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeList",
        },
        infor_nexus: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusToHclTerraform(struct.inforNexus),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusList",
        },
        marketo: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoToHclTerraform(struct.marketo),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoList",
        },
        redshift: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftToHclTerraform(struct.redshift),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftList",
        },
        salesforce: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceToHclTerraform(struct.salesforce),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceList",
        },
        sapo_data: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataToHclTerraform(struct.sapoData),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataList",
        },
        service_now: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowToHclTerraform(struct.serviceNow),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowList",
        },
        singular: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularToHclTerraform(struct.singular),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularList",
        },
        slack: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackToHclTerraform(struct.slack),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackList",
        },
        snowflake: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeToHclTerraform(struct.snowflake),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeList",
        },
        trendmicro: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroToHclTerraform(struct.trendmicro),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroList",
        },
        veeva: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaToHclTerraform(struct.veeva),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaList",
        },
        zendesk: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskToHclTerraform(struct.zendesk),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesToHclTerraform = appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // amplitude - computed: false, optional: true, required: false
        this._amplitude = new AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeOutputReference(this, "amplitude");
        // custom_connector - computed: false, optional: true, required: false
        this._customConnector = new AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOutputReference(this, "custom_connector");
        // datadog - computed: false, optional: true, required: false
        this._datadog = new AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogOutputReference(this, "datadog");
        // dynatrace - computed: false, optional: true, required: false
        this._dynatrace = new AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceOutputReference(this, "dynatrace");
        // google_analytics - computed: false, optional: true, required: false
        this._googleAnalytics = new AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsOutputReference(this, "google_analytics");
        // honeycode - computed: false, optional: true, required: false
        this._honeycode = new AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeOutputReference(this, "honeycode");
        // infor_nexus - computed: false, optional: true, required: false
        this._inforNexus = new AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusOutputReference(this, "infor_nexus");
        // marketo - computed: false, optional: true, required: false
        this._marketo = new AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoOutputReference(this, "marketo");
        // redshift - computed: false, optional: true, required: false
        this._redshift = new AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftOutputReference(this, "redshift");
        // salesforce - computed: false, optional: true, required: false
        this._salesforce = new AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceOutputReference(this, "salesforce");
        // sapo_data - computed: false, optional: true, required: false
        this._sapoData = new AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOutputReference(this, "sapo_data");
        // service_now - computed: false, optional: true, required: false
        this._serviceNow = new AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowOutputReference(this, "service_now");
        // singular - computed: false, optional: true, required: false
        this._singular = new AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularOutputReference(this, "singular");
        // slack - computed: false, optional: true, required: false
        this._slack = new AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackOutputReference(this, "slack");
        // snowflake - computed: false, optional: true, required: false
        this._snowflake = new AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeOutputReference(this, "snowflake");
        // trendmicro - computed: false, optional: true, required: false
        this._trendmicro = new AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroOutputReference(this, "trendmicro");
        // veeva - computed: false, optional: true, required: false
        this._veeva = new AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaOutputReference(this, "veeva");
        // zendesk - computed: false, optional: true, required: false
        this._zendesk = new AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskOutputReference(this, "zendesk");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._amplitude?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.amplitude = this._amplitude?.internalValue;
        }
        if (this._customConnector?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customConnector = this._customConnector?.internalValue;
        }
        if (this._datadog?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.datadog = this._datadog?.internalValue;
        }
        if (this._dynatrace?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dynatrace = this._dynatrace?.internalValue;
        }
        if (this._googleAnalytics?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.googleAnalytics = this._googleAnalytics?.internalValue;
        }
        if (this._honeycode?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.honeycode = this._honeycode?.internalValue;
        }
        if (this._inforNexus?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.inforNexus = this._inforNexus?.internalValue;
        }
        if (this._marketo?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.marketo = this._marketo?.internalValue;
        }
        if (this._redshift?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.redshift = this._redshift?.internalValue;
        }
        if (this._salesforce?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.salesforce = this._salesforce?.internalValue;
        }
        if (this._sapoData?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sapoData = this._sapoData?.internalValue;
        }
        if (this._serviceNow?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceNow = this._serviceNow?.internalValue;
        }
        if (this._singular?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.singular = this._singular?.internalValue;
        }
        if (this._slack?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.slack = this._slack?.internalValue;
        }
        if (this._snowflake?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.snowflake = this._snowflake?.internalValue;
        }
        if (this._trendmicro?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.trendmicro = this._trendmicro?.internalValue;
        }
        if (this._veeva?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.veeva = this._veeva?.internalValue;
        }
        if (this._zendesk?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.zendesk = this._zendesk?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._amplitude.internalValue = undefined;
            this._customConnector.internalValue = undefined;
            this._datadog.internalValue = undefined;
            this._dynatrace.internalValue = undefined;
            this._googleAnalytics.internalValue = undefined;
            this._honeycode.internalValue = undefined;
            this._inforNexus.internalValue = undefined;
            this._marketo.internalValue = undefined;
            this._redshift.internalValue = undefined;
            this._salesforce.internalValue = undefined;
            this._sapoData.internalValue = undefined;
            this._serviceNow.internalValue = undefined;
            this._singular.internalValue = undefined;
            this._slack.internalValue = undefined;
            this._snowflake.internalValue = undefined;
            this._trendmicro.internalValue = undefined;
            this._veeva.internalValue = undefined;
            this._zendesk.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._amplitude.internalValue = value.amplitude;
            this._customConnector.internalValue = value.customConnector;
            this._datadog.internalValue = value.datadog;
            this._dynatrace.internalValue = value.dynatrace;
            this._googleAnalytics.internalValue = value.googleAnalytics;
            this._honeycode.internalValue = value.honeycode;
            this._inforNexus.internalValue = value.inforNexus;
            this._marketo.internalValue = value.marketo;
            this._redshift.internalValue = value.redshift;
            this._salesforce.internalValue = value.salesforce;
            this._sapoData.internalValue = value.sapoData;
            this._serviceNow.internalValue = value.serviceNow;
            this._singular.internalValue = value.singular;
            this._slack.internalValue = value.slack;
            this._snowflake.internalValue = value.snowflake;
            this._trendmicro.internalValue = value.trendmicro;
            this._veeva.internalValue = value.veeva;
            this._zendesk.internalValue = value.zendesk;
        }
    }
    get amplitude() {
        return this._amplitude;
    }
    putAmplitude(value) {
        this._amplitude.internalValue = value;
    }
    resetAmplitude() {
        this._amplitude.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get amplitudeInput() {
        return this._amplitude.internalValue;
    }
    get customConnector() {
        return this._customConnector;
    }
    putCustomConnector(value) {
        this._customConnector.internalValue = value;
    }
    resetCustomConnector() {
        this._customConnector.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customConnectorInput() {
        return this._customConnector.internalValue;
    }
    get datadog() {
        return this._datadog;
    }
    putDatadog(value) {
        this._datadog.internalValue = value;
    }
    resetDatadog() {
        this._datadog.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get datadogInput() {
        return this._datadog.internalValue;
    }
    get dynatrace() {
        return this._dynatrace;
    }
    putDynatrace(value) {
        this._dynatrace.internalValue = value;
    }
    resetDynatrace() {
        this._dynatrace.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dynatraceInput() {
        return this._dynatrace.internalValue;
    }
    get googleAnalytics() {
        return this._googleAnalytics;
    }
    putGoogleAnalytics(value) {
        this._googleAnalytics.internalValue = value;
    }
    resetGoogleAnalytics() {
        this._googleAnalytics.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get googleAnalyticsInput() {
        return this._googleAnalytics.internalValue;
    }
    get honeycode() {
        return this._honeycode;
    }
    putHoneycode(value) {
        this._honeycode.internalValue = value;
    }
    resetHoneycode() {
        this._honeycode.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get honeycodeInput() {
        return this._honeycode.internalValue;
    }
    get inforNexus() {
        return this._inforNexus;
    }
    putInforNexus(value) {
        this._inforNexus.internalValue = value;
    }
    resetInforNexus() {
        this._inforNexus.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inforNexusInput() {
        return this._inforNexus.internalValue;
    }
    get marketo() {
        return this._marketo;
    }
    putMarketo(value) {
        this._marketo.internalValue = value;
    }
    resetMarketo() {
        this._marketo.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get marketoInput() {
        return this._marketo.internalValue;
    }
    get redshift() {
        return this._redshift;
    }
    putRedshift(value) {
        this._redshift.internalValue = value;
    }
    resetRedshift() {
        this._redshift.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redshiftInput() {
        return this._redshift.internalValue;
    }
    get salesforce() {
        return this._salesforce;
    }
    putSalesforce(value) {
        this._salesforce.internalValue = value;
    }
    resetSalesforce() {
        this._salesforce.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get salesforceInput() {
        return this._salesforce.internalValue;
    }
    get sapoData() {
        return this._sapoData;
    }
    putSapoData(value) {
        this._sapoData.internalValue = value;
    }
    resetSapoData() {
        this._sapoData.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sapoDataInput() {
        return this._sapoData.internalValue;
    }
    get serviceNow() {
        return this._serviceNow;
    }
    putServiceNow(value) {
        this._serviceNow.internalValue = value;
    }
    resetServiceNow() {
        this._serviceNow.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceNowInput() {
        return this._serviceNow.internalValue;
    }
    get singular() {
        return this._singular;
    }
    putSingular(value) {
        this._singular.internalValue = value;
    }
    resetSingular() {
        this._singular.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get singularInput() {
        return this._singular.internalValue;
    }
    get slack() {
        return this._slack;
    }
    putSlack(value) {
        this._slack.internalValue = value;
    }
    resetSlack() {
        this._slack.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get slackInput() {
        return this._slack.internalValue;
    }
    get snowflake() {
        return this._snowflake;
    }
    putSnowflake(value) {
        this._snowflake.internalValue = value;
    }
    resetSnowflake() {
        this._snowflake.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get snowflakeInput() {
        return this._snowflake.internalValue;
    }
    get trendmicro() {
        return this._trendmicro;
    }
    putTrendmicro(value) {
        this._trendmicro.internalValue = value;
    }
    resetTrendmicro() {
        this._trendmicro.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get trendmicroInput() {
        return this._trendmicro.internalValue;
    }
    get veeva() {
        return this._veeva;
    }
    putVeeva(value) {
        this._veeva.internalValue = value;
    }
    resetVeeva() {
        this._veeva.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get veevaInput() {
        return this._veeva.internalValue;
    }
    get zendesk() {
        return this._zendesk;
    }
    putZendesk(value) {
        this._zendesk.internalValue = value;
    }
    resetZendesk() {
        this._zendesk.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get zendeskInput() {
        return this._zendesk.internalValue;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutputReference = AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutputReference;
_29 = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutputReference[_29] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutputReference", version: "19.15.0" };
function appflowConnectorProfileConnectorProfileConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        connector_profile_credentials: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsToTerraform(struct.connectorProfileCredentials),
        connector_profile_properties: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesToTerraform(struct.connectorProfileProperties),
    };
}
exports.appflowConnectorProfileConnectorProfileConfigToTerraform = appflowConnectorProfileConnectorProfileConfigToTerraform;
function appflowConnectorProfileConnectorProfileConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        connector_profile_credentials: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsToHclTerraform(struct.connectorProfileCredentials),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsList",
        },
        connector_profile_properties: {
            value: appflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesToHclTerraform(struct.connectorProfileProperties),
            isBlock: true,
            type: "list",
            storageClassType: "AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appflowConnectorProfileConnectorProfileConfigToHclTerraform = appflowConnectorProfileConnectorProfileConfigToHclTerraform;
class AppflowConnectorProfileConnectorProfileConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // connector_profile_credentials - computed: false, optional: false, required: true
        this._connectorProfileCredentials = new AppflowConnectorProfileConnectorProfileConfigConnectorProfileCredentialsOutputReference(this, "connector_profile_credentials");
        // connector_profile_properties - computed: false, optional: false, required: true
        this._connectorProfileProperties = new AppflowConnectorProfileConnectorProfileConfigConnectorProfilePropertiesOutputReference(this, "connector_profile_properties");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._connectorProfileCredentials?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectorProfileCredentials = this._connectorProfileCredentials?.internalValue;
        }
        if (this._connectorProfileProperties?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectorProfileProperties = this._connectorProfileProperties?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._connectorProfileCredentials.internalValue = undefined;
            this._connectorProfileProperties.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._connectorProfileCredentials.internalValue = value.connectorProfileCredentials;
            this._connectorProfileProperties.internalValue = value.connectorProfileProperties;
        }
    }
    get connectorProfileCredentials() {
        return this._connectorProfileCredentials;
    }
    putConnectorProfileCredentials(value) {
        this._connectorProfileCredentials.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get connectorProfileCredentialsInput() {
        return this._connectorProfileCredentials.internalValue;
    }
    get connectorProfileProperties() {
        return this._connectorProfileProperties;
    }
    putConnectorProfileProperties(value) {
        this._connectorProfileProperties.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get connectorProfilePropertiesInput() {
        return this._connectorProfileProperties.internalValue;
    }
}
exports.AppflowConnectorProfileConnectorProfileConfigOutputReference = AppflowConnectorProfileConnectorProfileConfigOutputReference;
_30 = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfileConnectorProfileConfigOutputReference[_30] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfileConnectorProfileConfigOutputReference", version: "19.15.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/appflow_connector_profile aws_appflow_connector_profile}
*/
class AppflowConnectorProfile extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a AppflowConnectorProfile resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the AppflowConnectorProfile to import
    * @param importFromId The id of the existing AppflowConnectorProfile that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/appflow_connector_profile#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the AppflowConnectorProfile to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_appflow_connector_profile", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/appflow_connector_profile aws_appflow_connector_profile} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options AppflowConnectorProfileConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_appflow_connector_profile',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // connector_profile_config - computed: false, optional: false, required: true
        this._connectorProfileConfig = new AppflowConnectorProfileConnectorProfileConfigOutputReference(this, "connector_profile_config");
        this._connectionMode = config.connectionMode;
        this._connectorLabel = config.connectorLabel;
        this._connectorType = config.connectorType;
        this._id = config.id;
        this._kmsArn = config.kmsArn;
        this._name = config.name;
        this._connectorProfileConfig.internalValue = config.connectorProfileConfig;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get connectionMode() {
        return this.getStringAttribute('connection_mode');
    }
    set connectionMode(value) {
        this._connectionMode = value;
    }
    // Temporarily expose input value. Use with caution.
    get connectionModeInput() {
        return this._connectionMode;
    }
    get connectorLabel() {
        return this.getStringAttribute('connector_label');
    }
    set connectorLabel(value) {
        this._connectorLabel = value;
    }
    resetConnectorLabel() {
        this._connectorLabel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectorLabelInput() {
        return this._connectorLabel;
    }
    get connectorType() {
        return this.getStringAttribute('connector_type');
    }
    set connectorType(value) {
        this._connectorType = value;
    }
    // Temporarily expose input value. Use with caution.
    get connectorTypeInput() {
        return this._connectorType;
    }
    // credentials_arn - computed: true, optional: false, required: false
    get credentialsArn() {
        return this.getStringAttribute('credentials_arn');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get kmsArn() {
        return this.getStringAttribute('kms_arn');
    }
    set kmsArn(value) {
        this._kmsArn = value;
    }
    resetKmsArn() {
        this._kmsArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsArnInput() {
        return this._kmsArn;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get connectorProfileConfig() {
        return this._connectorProfileConfig;
    }
    putConnectorProfileConfig(value) {
        this._connectorProfileConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get connectorProfileConfigInput() {
        return this._connectorProfileConfig.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            connection_mode: cdktf.stringToTerraform(this._connectionMode),
            connector_label: cdktf.stringToTerraform(this._connectorLabel),
            connector_type: cdktf.stringToTerraform(this._connectorType),
            id: cdktf.stringToTerraform(this._id),
            kms_arn: cdktf.stringToTerraform(this._kmsArn),
            name: cdktf.stringToTerraform(this._name),
            connector_profile_config: appflowConnectorProfileConnectorProfileConfigToTerraform(this._connectorProfileConfig.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            connection_mode: {
                value: cdktf.stringToHclTerraform(this._connectionMode),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            connector_label: {
                value: cdktf.stringToHclTerraform(this._connectorLabel),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            connector_type: {
                value: cdktf.stringToHclTerraform(this._connectorType),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            kms_arn: {
                value: cdktf.stringToHclTerraform(this._kmsArn),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            connector_profile_config: {
                value: appflowConnectorProfileConnectorProfileConfigToHclTerraform(this._connectorProfileConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "AppflowConnectorProfileConnectorProfileConfigList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.AppflowConnectorProfile = AppflowConnectorProfile;
_31 = JSII_RTTI_SYMBOL_1;
AppflowConnectorProfile[_31] = { fqn: "@cdktf/provider-aws.appflowConnectorProfile.AppflowConnectorProfile", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
AppflowConnectorProfile.tfResourceType = "aws_appflow_connector_profile";
//# sourceMappingURL=data:application/json;base64,