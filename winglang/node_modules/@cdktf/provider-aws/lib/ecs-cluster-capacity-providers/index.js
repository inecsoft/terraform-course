"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EcsClusterCapacityProviders = exports.EcsClusterCapacityProvidersDefaultCapacityProviderStrategyList = exports.EcsClusterCapacityProvidersDefaultCapacityProviderStrategyOutputReference = exports.ecsClusterCapacityProvidersDefaultCapacityProviderStrategyToHclTerraform = exports.ecsClusterCapacityProvidersDefaultCapacityProviderStrategyToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function ecsClusterCapacityProvidersDefaultCapacityProviderStrategyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        base: cdktf.numberToTerraform(struct.base),
        capacity_provider: cdktf.stringToTerraform(struct.capacityProvider),
        weight: cdktf.numberToTerraform(struct.weight),
    };
}
exports.ecsClusterCapacityProvidersDefaultCapacityProviderStrategyToTerraform = ecsClusterCapacityProvidersDefaultCapacityProviderStrategyToTerraform;
function ecsClusterCapacityProvidersDefaultCapacityProviderStrategyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        base: {
            value: cdktf.numberToHclTerraform(struct.base),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        capacity_provider: {
            value: cdktf.stringToHclTerraform(struct.capacityProvider),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        weight: {
            value: cdktf.numberToHclTerraform(struct.weight),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.ecsClusterCapacityProvidersDefaultCapacityProviderStrategyToHclTerraform = ecsClusterCapacityProvidersDefaultCapacityProviderStrategyToHclTerraform;
class EcsClusterCapacityProvidersDefaultCapacityProviderStrategyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._base !== undefined) {
            hasAnyValues = true;
            internalValueResult.base = this._base;
        }
        if (this._capacityProvider !== undefined) {
            hasAnyValues = true;
            internalValueResult.capacityProvider = this._capacityProvider;
        }
        if (this._weight !== undefined) {
            hasAnyValues = true;
            internalValueResult.weight = this._weight;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._base = undefined;
            this._capacityProvider = undefined;
            this._weight = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._base = value.base;
            this._capacityProvider = value.capacityProvider;
            this._weight = value.weight;
        }
    }
    get base() {
        return this.getNumberAttribute('base');
    }
    set base(value) {
        this._base = value;
    }
    resetBase() {
        this._base = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get baseInput() {
        return this._base;
    }
    get capacityProvider() {
        return this.getStringAttribute('capacity_provider');
    }
    set capacityProvider(value) {
        this._capacityProvider = value;
    }
    // Temporarily expose input value. Use with caution.
    get capacityProviderInput() {
        return this._capacityProvider;
    }
    get weight() {
        return this.getNumberAttribute('weight');
    }
    set weight(value) {
        this._weight = value;
    }
    resetWeight() {
        this._weight = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get weightInput() {
        return this._weight;
    }
}
exports.EcsClusterCapacityProvidersDefaultCapacityProviderStrategyOutputReference = EcsClusterCapacityProvidersDefaultCapacityProviderStrategyOutputReference;
_a = JSII_RTTI_SYMBOL_1;
EcsClusterCapacityProvidersDefaultCapacityProviderStrategyOutputReference[_a] = { fqn: "@cdktf/provider-aws.ecsClusterCapacityProviders.EcsClusterCapacityProvidersDefaultCapacityProviderStrategyOutputReference", version: "19.15.0" };
class EcsClusterCapacityProvidersDefaultCapacityProviderStrategyList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new EcsClusterCapacityProvidersDefaultCapacityProviderStrategyOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.EcsClusterCapacityProvidersDefaultCapacityProviderStrategyList = EcsClusterCapacityProvidersDefaultCapacityProviderStrategyList;
_b = JSII_RTTI_SYMBOL_1;
EcsClusterCapacityProvidersDefaultCapacityProviderStrategyList[_b] = { fqn: "@cdktf/provider-aws.ecsClusterCapacityProviders.EcsClusterCapacityProvidersDefaultCapacityProviderStrategyList", version: "19.15.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/ecs_cluster_capacity_providers aws_ecs_cluster_capacity_providers}
*/
class EcsClusterCapacityProviders extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a EcsClusterCapacityProviders resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the EcsClusterCapacityProviders to import
    * @param importFromId The id of the existing EcsClusterCapacityProviders that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/ecs_cluster_capacity_providers#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the EcsClusterCapacityProviders to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_ecs_cluster_capacity_providers", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/ecs_cluster_capacity_providers aws_ecs_cluster_capacity_providers} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options EcsClusterCapacityProvidersConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_ecs_cluster_capacity_providers',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // default_capacity_provider_strategy - computed: false, optional: true, required: false
        this._defaultCapacityProviderStrategy = new EcsClusterCapacityProvidersDefaultCapacityProviderStrategyList(this, "default_capacity_provider_strategy", true);
        this._capacityProviders = config.capacityProviders;
        this._clusterName = config.clusterName;
        this._id = config.id;
        this._defaultCapacityProviderStrategy.internalValue = config.defaultCapacityProviderStrategy;
    }
    get capacityProviders() {
        return cdktf.Fn.tolist(this.getListAttribute('capacity_providers'));
    }
    set capacityProviders(value) {
        this._capacityProviders = value;
    }
    resetCapacityProviders() {
        this._capacityProviders = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get capacityProvidersInput() {
        return this._capacityProviders;
    }
    get clusterName() {
        return this.getStringAttribute('cluster_name');
    }
    set clusterName(value) {
        this._clusterName = value;
    }
    // Temporarily expose input value. Use with caution.
    get clusterNameInput() {
        return this._clusterName;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get defaultCapacityProviderStrategy() {
        return this._defaultCapacityProviderStrategy;
    }
    putDefaultCapacityProviderStrategy(value) {
        this._defaultCapacityProviderStrategy.internalValue = value;
    }
    resetDefaultCapacityProviderStrategy() {
        this._defaultCapacityProviderStrategy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultCapacityProviderStrategyInput() {
        return this._defaultCapacityProviderStrategy.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            capacity_providers: cdktf.listMapper(cdktf.stringToTerraform, false)(this._capacityProviders),
            cluster_name: cdktf.stringToTerraform(this._clusterName),
            id: cdktf.stringToTerraform(this._id),
            default_capacity_provider_strategy: cdktf.listMapper(ecsClusterCapacityProvidersDefaultCapacityProviderStrategyToTerraform, true)(this._defaultCapacityProviderStrategy.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            capacity_providers: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._capacityProviders),
                isBlock: false,
                type: "set",
                storageClassType: "stringList",
            },
            cluster_name: {
                value: cdktf.stringToHclTerraform(this._clusterName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            default_capacity_provider_strategy: {
                value: cdktf.listMapperHcl(ecsClusterCapacityProvidersDefaultCapacityProviderStrategyToHclTerraform, true)(this._defaultCapacityProviderStrategy.internalValue),
                isBlock: true,
                type: "set",
                storageClassType: "EcsClusterCapacityProvidersDefaultCapacityProviderStrategyList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.EcsClusterCapacityProviders = EcsClusterCapacityProviders;
_c = JSII_RTTI_SYMBOL_1;
EcsClusterCapacityProviders[_c] = { fqn: "@cdktf/provider-aws.ecsClusterCapacityProviders.EcsClusterCapacityProviders", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
EcsClusterCapacityProviders.tfResourceType = "aws_ecs_cluster_capacity_providers";
//# sourceMappingURL=data:application/json;base64,