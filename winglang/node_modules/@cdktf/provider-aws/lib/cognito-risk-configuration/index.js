"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CognitoRiskConfiguration = exports.CognitoRiskConfigurationRiskExceptionConfigurationOutputReference = exports.cognitoRiskConfigurationRiskExceptionConfigurationToHclTerraform = exports.cognitoRiskConfigurationRiskExceptionConfigurationToTerraform = exports.CognitoRiskConfigurationCompromisedCredentialsRiskConfigurationOutputReference = exports.cognitoRiskConfigurationCompromisedCredentialsRiskConfigurationToHclTerraform = exports.cognitoRiskConfigurationCompromisedCredentialsRiskConfigurationToTerraform = exports.CognitoRiskConfigurationCompromisedCredentialsRiskConfigurationActionsOutputReference = exports.cognitoRiskConfigurationCompromisedCredentialsRiskConfigurationActionsToHclTerraform = exports.cognitoRiskConfigurationCompromisedCredentialsRiskConfigurationActionsToTerraform = exports.CognitoRiskConfigurationAccountTakeoverRiskConfigurationOutputReference = exports.cognitoRiskConfigurationAccountTakeoverRiskConfigurationToHclTerraform = exports.cognitoRiskConfigurationAccountTakeoverRiskConfigurationToTerraform = exports.CognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationOutputReference = exports.cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationToHclTerraform = exports.cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationToTerraform = exports.CognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailOutputReference = exports.cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailToHclTerraform = exports.cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailToTerraform = exports.CognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailOutputReference = exports.cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailToHclTerraform = exports.cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailToTerraform = exports.CognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailOutputReference = exports.cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailToHclTerraform = exports.cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailToTerraform = exports.CognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsOutputReference = exports.cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsToHclTerraform = exports.cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsToTerraform = exports.CognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionOutputReference = exports.cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionToHclTerraform = exports.cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionToTerraform = exports.CognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionOutputReference = exports.cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionToHclTerraform = exports.cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionToTerraform = exports.CognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionOutputReference = exports.cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionToHclTerraform = exports.cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        event_action: cdktf.stringToTerraform(struct.eventAction),
        notify: cdktf.booleanToTerraform(struct.notify),
    };
}
exports.cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionToTerraform = cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionToTerraform;
function cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        event_action: {
            value: cdktf.stringToHclTerraform(struct.eventAction),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        notify: {
            value: cdktf.booleanToHclTerraform(struct.notify),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionToHclTerraform = cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionToHclTerraform;
class CognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._eventAction !== undefined) {
            hasAnyValues = true;
            internalValueResult.eventAction = this._eventAction;
        }
        if (this._notify !== undefined) {
            hasAnyValues = true;
            internalValueResult.notify = this._notify;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._eventAction = undefined;
            this._notify = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._eventAction = value.eventAction;
            this._notify = value.notify;
        }
    }
    get eventAction() {
        return this.getStringAttribute('event_action');
    }
    set eventAction(value) {
        this._eventAction = value;
    }
    // Temporarily expose input value. Use with caution.
    get eventActionInput() {
        return this._eventAction;
    }
    get notify() {
        return this.getBooleanAttribute('notify');
    }
    set notify(value) {
        this._notify = value;
    }
    // Temporarily expose input value. Use with caution.
    get notifyInput() {
        return this._notify;
    }
}
exports.CognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionOutputReference = CognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionOutputReference;
_a = JSII_RTTI_SYMBOL_1;
CognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionOutputReference[_a] = { fqn: "@cdktf/provider-aws.cognitoRiskConfiguration.CognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionOutputReference", version: "19.15.0" };
function cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        event_action: cdktf.stringToTerraform(struct.eventAction),
        notify: cdktf.booleanToTerraform(struct.notify),
    };
}
exports.cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionToTerraform = cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionToTerraform;
function cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        event_action: {
            value: cdktf.stringToHclTerraform(struct.eventAction),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        notify: {
            value: cdktf.booleanToHclTerraform(struct.notify),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionToHclTerraform = cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionToHclTerraform;
class CognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._eventAction !== undefined) {
            hasAnyValues = true;
            internalValueResult.eventAction = this._eventAction;
        }
        if (this._notify !== undefined) {
            hasAnyValues = true;
            internalValueResult.notify = this._notify;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._eventAction = undefined;
            this._notify = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._eventAction = value.eventAction;
            this._notify = value.notify;
        }
    }
    get eventAction() {
        return this.getStringAttribute('event_action');
    }
    set eventAction(value) {
        this._eventAction = value;
    }
    // Temporarily expose input value. Use with caution.
    get eventActionInput() {
        return this._eventAction;
    }
    get notify() {
        return this.getBooleanAttribute('notify');
    }
    set notify(value) {
        this._notify = value;
    }
    // Temporarily expose input value. Use with caution.
    get notifyInput() {
        return this._notify;
    }
}
exports.CognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionOutputReference = CognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionOutputReference;
_b = JSII_RTTI_SYMBOL_1;
CognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionOutputReference[_b] = { fqn: "@cdktf/provider-aws.cognitoRiskConfiguration.CognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionOutputReference", version: "19.15.0" };
function cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        event_action: cdktf.stringToTerraform(struct.eventAction),
        notify: cdktf.booleanToTerraform(struct.notify),
    };
}
exports.cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionToTerraform = cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionToTerraform;
function cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        event_action: {
            value: cdktf.stringToHclTerraform(struct.eventAction),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        notify: {
            value: cdktf.booleanToHclTerraform(struct.notify),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionToHclTerraform = cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionToHclTerraform;
class CognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._eventAction !== undefined) {
            hasAnyValues = true;
            internalValueResult.eventAction = this._eventAction;
        }
        if (this._notify !== undefined) {
            hasAnyValues = true;
            internalValueResult.notify = this._notify;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._eventAction = undefined;
            this._notify = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._eventAction = value.eventAction;
            this._notify = value.notify;
        }
    }
    get eventAction() {
        return this.getStringAttribute('event_action');
    }
    set eventAction(value) {
        this._eventAction = value;
    }
    // Temporarily expose input value. Use with caution.
    get eventActionInput() {
        return this._eventAction;
    }
    get notify() {
        return this.getBooleanAttribute('notify');
    }
    set notify(value) {
        this._notify = value;
    }
    // Temporarily expose input value. Use with caution.
    get notifyInput() {
        return this._notify;
    }
}
exports.CognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionOutputReference = CognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionOutputReference;
_c = JSII_RTTI_SYMBOL_1;
CognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionOutputReference[_c] = { fqn: "@cdktf/provider-aws.cognitoRiskConfiguration.CognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionOutputReference", version: "19.15.0" };
function cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        high_action: cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionToTerraform(struct.highAction),
        low_action: cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionToTerraform(struct.lowAction),
        medium_action: cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionToTerraform(struct.mediumAction),
    };
}
exports.cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsToTerraform = cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsToTerraform;
function cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        high_action: {
            value: cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionToHclTerraform(struct.highAction),
            isBlock: true,
            type: "list",
            storageClassType: "CognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionList",
        },
        low_action: {
            value: cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionToHclTerraform(struct.lowAction),
            isBlock: true,
            type: "list",
            storageClassType: "CognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionList",
        },
        medium_action: {
            value: cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionToHclTerraform(struct.mediumAction),
            isBlock: true,
            type: "list",
            storageClassType: "CognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsToHclTerraform = cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsToHclTerraform;
class CognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // high_action - computed: false, optional: true, required: false
        this._highAction = new CognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsHighActionOutputReference(this, "high_action");
        // low_action - computed: false, optional: true, required: false
        this._lowAction = new CognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsLowActionOutputReference(this, "low_action");
        // medium_action - computed: false, optional: true, required: false
        this._mediumAction = new CognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsMediumActionOutputReference(this, "medium_action");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._highAction?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.highAction = this._highAction?.internalValue;
        }
        if (this._lowAction?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.lowAction = this._lowAction?.internalValue;
        }
        if (this._mediumAction?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mediumAction = this._mediumAction?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._highAction.internalValue = undefined;
            this._lowAction.internalValue = undefined;
            this._mediumAction.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._highAction.internalValue = value.highAction;
            this._lowAction.internalValue = value.lowAction;
            this._mediumAction.internalValue = value.mediumAction;
        }
    }
    get highAction() {
        return this._highAction;
    }
    putHighAction(value) {
        this._highAction.internalValue = value;
    }
    resetHighAction() {
        this._highAction.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get highActionInput() {
        return this._highAction.internalValue;
    }
    get lowAction() {
        return this._lowAction;
    }
    putLowAction(value) {
        this._lowAction.internalValue = value;
    }
    resetLowAction() {
        this._lowAction.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lowActionInput() {
        return this._lowAction.internalValue;
    }
    get mediumAction() {
        return this._mediumAction;
    }
    putMediumAction(value) {
        this._mediumAction.internalValue = value;
    }
    resetMediumAction() {
        this._mediumAction.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mediumActionInput() {
        return this._mediumAction.internalValue;
    }
}
exports.CognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsOutputReference = CognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsOutputReference;
_d = JSII_RTTI_SYMBOL_1;
CognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsOutputReference[_d] = { fqn: "@cdktf/provider-aws.cognitoRiskConfiguration.CognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsOutputReference", version: "19.15.0" };
function cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        html_body: cdktf.stringToTerraform(struct.htmlBody),
        subject: cdktf.stringToTerraform(struct.subject),
        text_body: cdktf.stringToTerraform(struct.textBody),
    };
}
exports.cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailToTerraform = cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailToTerraform;
function cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        html_body: {
            value: cdktf.stringToHclTerraform(struct.htmlBody),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        subject: {
            value: cdktf.stringToHclTerraform(struct.subject),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        text_body: {
            value: cdktf.stringToHclTerraform(struct.textBody),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailToHclTerraform = cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailToHclTerraform;
class CognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._htmlBody !== undefined) {
            hasAnyValues = true;
            internalValueResult.htmlBody = this._htmlBody;
        }
        if (this._subject !== undefined) {
            hasAnyValues = true;
            internalValueResult.subject = this._subject;
        }
        if (this._textBody !== undefined) {
            hasAnyValues = true;
            internalValueResult.textBody = this._textBody;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._htmlBody = undefined;
            this._subject = undefined;
            this._textBody = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._htmlBody = value.htmlBody;
            this._subject = value.subject;
            this._textBody = value.textBody;
        }
    }
    get htmlBody() {
        return this.getStringAttribute('html_body');
    }
    set htmlBody(value) {
        this._htmlBody = value;
    }
    // Temporarily expose input value. Use with caution.
    get htmlBodyInput() {
        return this._htmlBody;
    }
    get subject() {
        return this.getStringAttribute('subject');
    }
    set subject(value) {
        this._subject = value;
    }
    // Temporarily expose input value. Use with caution.
    get subjectInput() {
        return this._subject;
    }
    get textBody() {
        return this.getStringAttribute('text_body');
    }
    set textBody(value) {
        this._textBody = value;
    }
    // Temporarily expose input value. Use with caution.
    get textBodyInput() {
        return this._textBody;
    }
}
exports.CognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailOutputReference = CognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailOutputReference;
_e = JSII_RTTI_SYMBOL_1;
CognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailOutputReference[_e] = { fqn: "@cdktf/provider-aws.cognitoRiskConfiguration.CognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailOutputReference", version: "19.15.0" };
function cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        html_body: cdktf.stringToTerraform(struct.htmlBody),
        subject: cdktf.stringToTerraform(struct.subject),
        text_body: cdktf.stringToTerraform(struct.textBody),
    };
}
exports.cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailToTerraform = cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailToTerraform;
function cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        html_body: {
            value: cdktf.stringToHclTerraform(struct.htmlBody),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        subject: {
            value: cdktf.stringToHclTerraform(struct.subject),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        text_body: {
            value: cdktf.stringToHclTerraform(struct.textBody),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailToHclTerraform = cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailToHclTerraform;
class CognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._htmlBody !== undefined) {
            hasAnyValues = true;
            internalValueResult.htmlBody = this._htmlBody;
        }
        if (this._subject !== undefined) {
            hasAnyValues = true;
            internalValueResult.subject = this._subject;
        }
        if (this._textBody !== undefined) {
            hasAnyValues = true;
            internalValueResult.textBody = this._textBody;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._htmlBody = undefined;
            this._subject = undefined;
            this._textBody = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._htmlBody = value.htmlBody;
            this._subject = value.subject;
            this._textBody = value.textBody;
        }
    }
    get htmlBody() {
        return this.getStringAttribute('html_body');
    }
    set htmlBody(value) {
        this._htmlBody = value;
    }
    // Temporarily expose input value. Use with caution.
    get htmlBodyInput() {
        return this._htmlBody;
    }
    get subject() {
        return this.getStringAttribute('subject');
    }
    set subject(value) {
        this._subject = value;
    }
    // Temporarily expose input value. Use with caution.
    get subjectInput() {
        return this._subject;
    }
    get textBody() {
        return this.getStringAttribute('text_body');
    }
    set textBody(value) {
        this._textBody = value;
    }
    // Temporarily expose input value. Use with caution.
    get textBodyInput() {
        return this._textBody;
    }
}
exports.CognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailOutputReference = CognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailOutputReference;
_f = JSII_RTTI_SYMBOL_1;
CognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailOutputReference[_f] = { fqn: "@cdktf/provider-aws.cognitoRiskConfiguration.CognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailOutputReference", version: "19.15.0" };
function cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        html_body: cdktf.stringToTerraform(struct.htmlBody),
        subject: cdktf.stringToTerraform(struct.subject),
        text_body: cdktf.stringToTerraform(struct.textBody),
    };
}
exports.cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailToTerraform = cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailToTerraform;
function cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        html_body: {
            value: cdktf.stringToHclTerraform(struct.htmlBody),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        subject: {
            value: cdktf.stringToHclTerraform(struct.subject),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        text_body: {
            value: cdktf.stringToHclTerraform(struct.textBody),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailToHclTerraform = cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailToHclTerraform;
class CognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._htmlBody !== undefined) {
            hasAnyValues = true;
            internalValueResult.htmlBody = this._htmlBody;
        }
        if (this._subject !== undefined) {
            hasAnyValues = true;
            internalValueResult.subject = this._subject;
        }
        if (this._textBody !== undefined) {
            hasAnyValues = true;
            internalValueResult.textBody = this._textBody;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._htmlBody = undefined;
            this._subject = undefined;
            this._textBody = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._htmlBody = value.htmlBody;
            this._subject = value.subject;
            this._textBody = value.textBody;
        }
    }
    get htmlBody() {
        return this.getStringAttribute('html_body');
    }
    set htmlBody(value) {
        this._htmlBody = value;
    }
    // Temporarily expose input value. Use with caution.
    get htmlBodyInput() {
        return this._htmlBody;
    }
    get subject() {
        return this.getStringAttribute('subject');
    }
    set subject(value) {
        this._subject = value;
    }
    // Temporarily expose input value. Use with caution.
    get subjectInput() {
        return this._subject;
    }
    get textBody() {
        return this.getStringAttribute('text_body');
    }
    set textBody(value) {
        this._textBody = value;
    }
    // Temporarily expose input value. Use with caution.
    get textBodyInput() {
        return this._textBody;
    }
}
exports.CognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailOutputReference = CognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailOutputReference;
_g = JSII_RTTI_SYMBOL_1;
CognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailOutputReference[_g] = { fqn: "@cdktf/provider-aws.cognitoRiskConfiguration.CognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailOutputReference", version: "19.15.0" };
function cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        from: cdktf.stringToTerraform(struct.from),
        reply_to: cdktf.stringToTerraform(struct.replyTo),
        source_arn: cdktf.stringToTerraform(struct.sourceArn),
        block_email: cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailToTerraform(struct.blockEmail),
        mfa_email: cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailToTerraform(struct.mfaEmail),
        no_action_email: cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailToTerraform(struct.noActionEmail),
    };
}
exports.cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationToTerraform = cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationToTerraform;
function cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        from: {
            value: cdktf.stringToHclTerraform(struct.from),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        reply_to: {
            value: cdktf.stringToHclTerraform(struct.replyTo),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        source_arn: {
            value: cdktf.stringToHclTerraform(struct.sourceArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        block_email: {
            value: cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailToHclTerraform(struct.blockEmail),
            isBlock: true,
            type: "list",
            storageClassType: "CognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailList",
        },
        mfa_email: {
            value: cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailToHclTerraform(struct.mfaEmail),
            isBlock: true,
            type: "list",
            storageClassType: "CognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailList",
        },
        no_action_email: {
            value: cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailToHclTerraform(struct.noActionEmail),
            isBlock: true,
            type: "list",
            storageClassType: "CognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationToHclTerraform = cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationToHclTerraform;
class CognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // block_email - computed: false, optional: true, required: false
        this._blockEmail = new CognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmailOutputReference(this, "block_email");
        // mfa_email - computed: false, optional: true, required: false
        this._mfaEmail = new CognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmailOutputReference(this, "mfa_email");
        // no_action_email - computed: false, optional: true, required: false
        this._noActionEmail = new CognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmailOutputReference(this, "no_action_email");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._from !== undefined) {
            hasAnyValues = true;
            internalValueResult.from = this._from;
        }
        if (this._replyTo !== undefined) {
            hasAnyValues = true;
            internalValueResult.replyTo = this._replyTo;
        }
        if (this._sourceArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceArn = this._sourceArn;
        }
        if (this._blockEmail?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.blockEmail = this._blockEmail?.internalValue;
        }
        if (this._mfaEmail?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mfaEmail = this._mfaEmail?.internalValue;
        }
        if (this._noActionEmail?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.noActionEmail = this._noActionEmail?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._from = undefined;
            this._replyTo = undefined;
            this._sourceArn = undefined;
            this._blockEmail.internalValue = undefined;
            this._mfaEmail.internalValue = undefined;
            this._noActionEmail.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._from = value.from;
            this._replyTo = value.replyTo;
            this._sourceArn = value.sourceArn;
            this._blockEmail.internalValue = value.blockEmail;
            this._mfaEmail.internalValue = value.mfaEmail;
            this._noActionEmail.internalValue = value.noActionEmail;
        }
    }
    get from() {
        return this.getStringAttribute('from');
    }
    set from(value) {
        this._from = value;
    }
    resetFrom() {
        this._from = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fromInput() {
        return this._from;
    }
    get replyTo() {
        return this.getStringAttribute('reply_to');
    }
    set replyTo(value) {
        this._replyTo = value;
    }
    resetReplyTo() {
        this._replyTo = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replyToInput() {
        return this._replyTo;
    }
    get sourceArn() {
        return this.getStringAttribute('source_arn');
    }
    set sourceArn(value) {
        this._sourceArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get sourceArnInput() {
        return this._sourceArn;
    }
    get blockEmail() {
        return this._blockEmail;
    }
    putBlockEmail(value) {
        this._blockEmail.internalValue = value;
    }
    resetBlockEmail() {
        this._blockEmail.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get blockEmailInput() {
        return this._blockEmail.internalValue;
    }
    get mfaEmail() {
        return this._mfaEmail;
    }
    putMfaEmail(value) {
        this._mfaEmail.internalValue = value;
    }
    resetMfaEmail() {
        this._mfaEmail.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mfaEmailInput() {
        return this._mfaEmail.internalValue;
    }
    get noActionEmail() {
        return this._noActionEmail;
    }
    putNoActionEmail(value) {
        this._noActionEmail.internalValue = value;
    }
    resetNoActionEmail() {
        this._noActionEmail.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get noActionEmailInput() {
        return this._noActionEmail.internalValue;
    }
}
exports.CognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationOutputReference = CognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationOutputReference;
_h = JSII_RTTI_SYMBOL_1;
CognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationOutputReference[_h] = { fqn: "@cdktf/provider-aws.cognitoRiskConfiguration.CognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationOutputReference", version: "19.15.0" };
function cognitoRiskConfigurationAccountTakeoverRiskConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        actions: cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsToTerraform(struct.actions),
        notify_configuration: cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationToTerraform(struct.notifyConfiguration),
    };
}
exports.cognitoRiskConfigurationAccountTakeoverRiskConfigurationToTerraform = cognitoRiskConfigurationAccountTakeoverRiskConfigurationToTerraform;
function cognitoRiskConfigurationAccountTakeoverRiskConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        actions: {
            value: cognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsToHclTerraform(struct.actions),
            isBlock: true,
            type: "list",
            storageClassType: "CognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsList",
        },
        notify_configuration: {
            value: cognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationToHclTerraform(struct.notifyConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "CognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cognitoRiskConfigurationAccountTakeoverRiskConfigurationToHclTerraform = cognitoRiskConfigurationAccountTakeoverRiskConfigurationToHclTerraform;
class CognitoRiskConfigurationAccountTakeoverRiskConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // actions - computed: false, optional: false, required: true
        this._actions = new CognitoRiskConfigurationAccountTakeoverRiskConfigurationActionsOutputReference(this, "actions");
        // notify_configuration - computed: false, optional: false, required: true
        this._notifyConfiguration = new CognitoRiskConfigurationAccountTakeoverRiskConfigurationNotifyConfigurationOutputReference(this, "notify_configuration");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._actions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.actions = this._actions?.internalValue;
        }
        if (this._notifyConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.notifyConfiguration = this._notifyConfiguration?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._actions.internalValue = undefined;
            this._notifyConfiguration.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._actions.internalValue = value.actions;
            this._notifyConfiguration.internalValue = value.notifyConfiguration;
        }
    }
    get actions() {
        return this._actions;
    }
    putActions(value) {
        this._actions.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get actionsInput() {
        return this._actions.internalValue;
    }
    get notifyConfiguration() {
        return this._notifyConfiguration;
    }
    putNotifyConfiguration(value) {
        this._notifyConfiguration.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get notifyConfigurationInput() {
        return this._notifyConfiguration.internalValue;
    }
}
exports.CognitoRiskConfigurationAccountTakeoverRiskConfigurationOutputReference = CognitoRiskConfigurationAccountTakeoverRiskConfigurationOutputReference;
_j = JSII_RTTI_SYMBOL_1;
CognitoRiskConfigurationAccountTakeoverRiskConfigurationOutputReference[_j] = { fqn: "@cdktf/provider-aws.cognitoRiskConfiguration.CognitoRiskConfigurationAccountTakeoverRiskConfigurationOutputReference", version: "19.15.0" };
function cognitoRiskConfigurationCompromisedCredentialsRiskConfigurationActionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        event_action: cdktf.stringToTerraform(struct.eventAction),
    };
}
exports.cognitoRiskConfigurationCompromisedCredentialsRiskConfigurationActionsToTerraform = cognitoRiskConfigurationCompromisedCredentialsRiskConfigurationActionsToTerraform;
function cognitoRiskConfigurationCompromisedCredentialsRiskConfigurationActionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        event_action: {
            value: cdktf.stringToHclTerraform(struct.eventAction),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cognitoRiskConfigurationCompromisedCredentialsRiskConfigurationActionsToHclTerraform = cognitoRiskConfigurationCompromisedCredentialsRiskConfigurationActionsToHclTerraform;
class CognitoRiskConfigurationCompromisedCredentialsRiskConfigurationActionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._eventAction !== undefined) {
            hasAnyValues = true;
            internalValueResult.eventAction = this._eventAction;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._eventAction = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._eventAction = value.eventAction;
        }
    }
    get eventAction() {
        return this.getStringAttribute('event_action');
    }
    set eventAction(value) {
        this._eventAction = value;
    }
    // Temporarily expose input value. Use with caution.
    get eventActionInput() {
        return this._eventAction;
    }
}
exports.CognitoRiskConfigurationCompromisedCredentialsRiskConfigurationActionsOutputReference = CognitoRiskConfigurationCompromisedCredentialsRiskConfigurationActionsOutputReference;
_k = JSII_RTTI_SYMBOL_1;
CognitoRiskConfigurationCompromisedCredentialsRiskConfigurationActionsOutputReference[_k] = { fqn: "@cdktf/provider-aws.cognitoRiskConfiguration.CognitoRiskConfigurationCompromisedCredentialsRiskConfigurationActionsOutputReference", version: "19.15.0" };
function cognitoRiskConfigurationCompromisedCredentialsRiskConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        event_filter: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.eventFilter),
        actions: cognitoRiskConfigurationCompromisedCredentialsRiskConfigurationActionsToTerraform(struct.actions),
    };
}
exports.cognitoRiskConfigurationCompromisedCredentialsRiskConfigurationToTerraform = cognitoRiskConfigurationCompromisedCredentialsRiskConfigurationToTerraform;
function cognitoRiskConfigurationCompromisedCredentialsRiskConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        event_filter: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.eventFilter),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        actions: {
            value: cognitoRiskConfigurationCompromisedCredentialsRiskConfigurationActionsToHclTerraform(struct.actions),
            isBlock: true,
            type: "list",
            storageClassType: "CognitoRiskConfigurationCompromisedCredentialsRiskConfigurationActionsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cognitoRiskConfigurationCompromisedCredentialsRiskConfigurationToHclTerraform = cognitoRiskConfigurationCompromisedCredentialsRiskConfigurationToHclTerraform;
class CognitoRiskConfigurationCompromisedCredentialsRiskConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // actions - computed: false, optional: false, required: true
        this._actions = new CognitoRiskConfigurationCompromisedCredentialsRiskConfigurationActionsOutputReference(this, "actions");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._eventFilter !== undefined) {
            hasAnyValues = true;
            internalValueResult.eventFilter = this._eventFilter;
        }
        if (this._actions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.actions = this._actions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._eventFilter = undefined;
            this._actions.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._eventFilter = value.eventFilter;
            this._actions.internalValue = value.actions;
        }
    }
    get eventFilter() {
        return cdktf.Fn.tolist(this.getListAttribute('event_filter'));
    }
    set eventFilter(value) {
        this._eventFilter = value;
    }
    resetEventFilter() {
        this._eventFilter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get eventFilterInput() {
        return this._eventFilter;
    }
    get actions() {
        return this._actions;
    }
    putActions(value) {
        this._actions.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get actionsInput() {
        return this._actions.internalValue;
    }
}
exports.CognitoRiskConfigurationCompromisedCredentialsRiskConfigurationOutputReference = CognitoRiskConfigurationCompromisedCredentialsRiskConfigurationOutputReference;
_l = JSII_RTTI_SYMBOL_1;
CognitoRiskConfigurationCompromisedCredentialsRiskConfigurationOutputReference[_l] = { fqn: "@cdktf/provider-aws.cognitoRiskConfiguration.CognitoRiskConfigurationCompromisedCredentialsRiskConfigurationOutputReference", version: "19.15.0" };
function cognitoRiskConfigurationRiskExceptionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        blocked_ip_range_list: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.blockedIpRangeList),
        skipped_ip_range_list: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.skippedIpRangeList),
    };
}
exports.cognitoRiskConfigurationRiskExceptionConfigurationToTerraform = cognitoRiskConfigurationRiskExceptionConfigurationToTerraform;
function cognitoRiskConfigurationRiskExceptionConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        blocked_ip_range_list: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.blockedIpRangeList),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        skipped_ip_range_list: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.skippedIpRangeList),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cognitoRiskConfigurationRiskExceptionConfigurationToHclTerraform = cognitoRiskConfigurationRiskExceptionConfigurationToHclTerraform;
class CognitoRiskConfigurationRiskExceptionConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._blockedIpRangeList !== undefined) {
            hasAnyValues = true;
            internalValueResult.blockedIpRangeList = this._blockedIpRangeList;
        }
        if (this._skippedIpRangeList !== undefined) {
            hasAnyValues = true;
            internalValueResult.skippedIpRangeList = this._skippedIpRangeList;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._blockedIpRangeList = undefined;
            this._skippedIpRangeList = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._blockedIpRangeList = value.blockedIpRangeList;
            this._skippedIpRangeList = value.skippedIpRangeList;
        }
    }
    get blockedIpRangeList() {
        return cdktf.Fn.tolist(this.getListAttribute('blocked_ip_range_list'));
    }
    set blockedIpRangeList(value) {
        this._blockedIpRangeList = value;
    }
    resetBlockedIpRangeList() {
        this._blockedIpRangeList = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get blockedIpRangeListInput() {
        return this._blockedIpRangeList;
    }
    get skippedIpRangeList() {
        return cdktf.Fn.tolist(this.getListAttribute('skipped_ip_range_list'));
    }
    set skippedIpRangeList(value) {
        this._skippedIpRangeList = value;
    }
    resetSkippedIpRangeList() {
        this._skippedIpRangeList = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get skippedIpRangeListInput() {
        return this._skippedIpRangeList;
    }
}
exports.CognitoRiskConfigurationRiskExceptionConfigurationOutputReference = CognitoRiskConfigurationRiskExceptionConfigurationOutputReference;
_m = JSII_RTTI_SYMBOL_1;
CognitoRiskConfigurationRiskExceptionConfigurationOutputReference[_m] = { fqn: "@cdktf/provider-aws.cognitoRiskConfiguration.CognitoRiskConfigurationRiskExceptionConfigurationOutputReference", version: "19.15.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/cognito_risk_configuration aws_cognito_risk_configuration}
*/
class CognitoRiskConfiguration extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a CognitoRiskConfiguration resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the CognitoRiskConfiguration to import
    * @param importFromId The id of the existing CognitoRiskConfiguration that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/cognito_risk_configuration#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the CognitoRiskConfiguration to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_cognito_risk_configuration", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/cognito_risk_configuration aws_cognito_risk_configuration} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options CognitoRiskConfigurationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_cognito_risk_configuration',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // account_takeover_risk_configuration - computed: false, optional: true, required: false
        this._accountTakeoverRiskConfiguration = new CognitoRiskConfigurationAccountTakeoverRiskConfigurationOutputReference(this, "account_takeover_risk_configuration");
        // compromised_credentials_risk_configuration - computed: false, optional: true, required: false
        this._compromisedCredentialsRiskConfiguration = new CognitoRiskConfigurationCompromisedCredentialsRiskConfigurationOutputReference(this, "compromised_credentials_risk_configuration");
        // risk_exception_configuration - computed: false, optional: true, required: false
        this._riskExceptionConfiguration = new CognitoRiskConfigurationRiskExceptionConfigurationOutputReference(this, "risk_exception_configuration");
        this._clientId = config.clientId;
        this._id = config.id;
        this._userPoolId = config.userPoolId;
        this._accountTakeoverRiskConfiguration.internalValue = config.accountTakeoverRiskConfiguration;
        this._compromisedCredentialsRiskConfiguration.internalValue = config.compromisedCredentialsRiskConfiguration;
        this._riskExceptionConfiguration.internalValue = config.riskExceptionConfiguration;
    }
    get clientId() {
        return this.getStringAttribute('client_id');
    }
    set clientId(value) {
        this._clientId = value;
    }
    resetClientId() {
        this._clientId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientIdInput() {
        return this._clientId;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get userPoolId() {
        return this.getStringAttribute('user_pool_id');
    }
    set userPoolId(value) {
        this._userPoolId = value;
    }
    // Temporarily expose input value. Use with caution.
    get userPoolIdInput() {
        return this._userPoolId;
    }
    get accountTakeoverRiskConfiguration() {
        return this._accountTakeoverRiskConfiguration;
    }
    putAccountTakeoverRiskConfiguration(value) {
        this._accountTakeoverRiskConfiguration.internalValue = value;
    }
    resetAccountTakeoverRiskConfiguration() {
        this._accountTakeoverRiskConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accountTakeoverRiskConfigurationInput() {
        return this._accountTakeoverRiskConfiguration.internalValue;
    }
    get compromisedCredentialsRiskConfiguration() {
        return this._compromisedCredentialsRiskConfiguration;
    }
    putCompromisedCredentialsRiskConfiguration(value) {
        this._compromisedCredentialsRiskConfiguration.internalValue = value;
    }
    resetCompromisedCredentialsRiskConfiguration() {
        this._compromisedCredentialsRiskConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get compromisedCredentialsRiskConfigurationInput() {
        return this._compromisedCredentialsRiskConfiguration.internalValue;
    }
    get riskExceptionConfiguration() {
        return this._riskExceptionConfiguration;
    }
    putRiskExceptionConfiguration(value) {
        this._riskExceptionConfiguration.internalValue = value;
    }
    resetRiskExceptionConfiguration() {
        this._riskExceptionConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get riskExceptionConfigurationInput() {
        return this._riskExceptionConfiguration.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            client_id: cdktf.stringToTerraform(this._clientId),
            id: cdktf.stringToTerraform(this._id),
            user_pool_id: cdktf.stringToTerraform(this._userPoolId),
            account_takeover_risk_configuration: cognitoRiskConfigurationAccountTakeoverRiskConfigurationToTerraform(this._accountTakeoverRiskConfiguration.internalValue),
            compromised_credentials_risk_configuration: cognitoRiskConfigurationCompromisedCredentialsRiskConfigurationToTerraform(this._compromisedCredentialsRiskConfiguration.internalValue),
            risk_exception_configuration: cognitoRiskConfigurationRiskExceptionConfigurationToTerraform(this._riskExceptionConfiguration.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            client_id: {
                value: cdktf.stringToHclTerraform(this._clientId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            user_pool_id: {
                value: cdktf.stringToHclTerraform(this._userPoolId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            account_takeover_risk_configuration: {
                value: cognitoRiskConfigurationAccountTakeoverRiskConfigurationToHclTerraform(this._accountTakeoverRiskConfiguration.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "CognitoRiskConfigurationAccountTakeoverRiskConfigurationList",
            },
            compromised_credentials_risk_configuration: {
                value: cognitoRiskConfigurationCompromisedCredentialsRiskConfigurationToHclTerraform(this._compromisedCredentialsRiskConfiguration.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "CognitoRiskConfigurationCompromisedCredentialsRiskConfigurationList",
            },
            risk_exception_configuration: {
                value: cognitoRiskConfigurationRiskExceptionConfigurationToHclTerraform(this._riskExceptionConfiguration.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "CognitoRiskConfigurationRiskExceptionConfigurationList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.CognitoRiskConfiguration = CognitoRiskConfiguration;
_o = JSII_RTTI_SYMBOL_1;
CognitoRiskConfiguration[_o] = { fqn: "@cdktf/provider-aws.cognitoRiskConfiguration.CognitoRiskConfiguration", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
CognitoRiskConfiguration.tfResourceType = "aws_cognito_risk_configuration";
//# sourceMappingURL=data:application/json;base64,