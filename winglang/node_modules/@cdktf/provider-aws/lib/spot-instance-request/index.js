"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpotInstanceRequest = exports.SpotInstanceRequestTimeoutsOutputReference = exports.spotInstanceRequestTimeoutsToHclTerraform = exports.spotInstanceRequestTimeoutsToTerraform = exports.SpotInstanceRequestRootBlockDeviceOutputReference = exports.spotInstanceRequestRootBlockDeviceToHclTerraform = exports.spotInstanceRequestRootBlockDeviceToTerraform = exports.SpotInstanceRequestPrivateDnsNameOptionsOutputReference = exports.spotInstanceRequestPrivateDnsNameOptionsToHclTerraform = exports.spotInstanceRequestPrivateDnsNameOptionsToTerraform = exports.SpotInstanceRequestNetworkInterfaceList = exports.SpotInstanceRequestNetworkInterfaceOutputReference = exports.spotInstanceRequestNetworkInterfaceToHclTerraform = exports.spotInstanceRequestNetworkInterfaceToTerraform = exports.SpotInstanceRequestMetadataOptionsOutputReference = exports.spotInstanceRequestMetadataOptionsToHclTerraform = exports.spotInstanceRequestMetadataOptionsToTerraform = exports.SpotInstanceRequestMaintenanceOptionsOutputReference = exports.spotInstanceRequestMaintenanceOptionsToHclTerraform = exports.spotInstanceRequestMaintenanceOptionsToTerraform = exports.SpotInstanceRequestLaunchTemplateOutputReference = exports.spotInstanceRequestLaunchTemplateToHclTerraform = exports.spotInstanceRequestLaunchTemplateToTerraform = exports.SpotInstanceRequestEphemeralBlockDeviceList = exports.SpotInstanceRequestEphemeralBlockDeviceOutputReference = exports.spotInstanceRequestEphemeralBlockDeviceToHclTerraform = exports.spotInstanceRequestEphemeralBlockDeviceToTerraform = exports.SpotInstanceRequestEnclaveOptionsOutputReference = exports.spotInstanceRequestEnclaveOptionsToHclTerraform = exports.spotInstanceRequestEnclaveOptionsToTerraform = exports.SpotInstanceRequestEbsBlockDeviceList = exports.SpotInstanceRequestEbsBlockDeviceOutputReference = exports.spotInstanceRequestEbsBlockDeviceToHclTerraform = exports.spotInstanceRequestEbsBlockDeviceToTerraform = exports.SpotInstanceRequestCreditSpecificationOutputReference = exports.spotInstanceRequestCreditSpecificationToHclTerraform = exports.spotInstanceRequestCreditSpecificationToTerraform = exports.SpotInstanceRequestCpuOptionsOutputReference = exports.spotInstanceRequestCpuOptionsToHclTerraform = exports.spotInstanceRequestCpuOptionsToTerraform = exports.SpotInstanceRequestCapacityReservationSpecificationOutputReference = exports.spotInstanceRequestCapacityReservationSpecificationToHclTerraform = exports.spotInstanceRequestCapacityReservationSpecificationToTerraform = exports.SpotInstanceRequestCapacityReservationSpecificationCapacityReservationTargetOutputReference = exports.spotInstanceRequestCapacityReservationSpecificationCapacityReservationTargetToHclTerraform = exports.spotInstanceRequestCapacityReservationSpecificationCapacityReservationTargetToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function spotInstanceRequestCapacityReservationSpecificationCapacityReservationTargetToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        capacity_reservation_id: cdktf.stringToTerraform(struct.capacityReservationId),
        capacity_reservation_resource_group_arn: cdktf.stringToTerraform(struct.capacityReservationResourceGroupArn),
    };
}
exports.spotInstanceRequestCapacityReservationSpecificationCapacityReservationTargetToTerraform = spotInstanceRequestCapacityReservationSpecificationCapacityReservationTargetToTerraform;
function spotInstanceRequestCapacityReservationSpecificationCapacityReservationTargetToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        capacity_reservation_id: {
            value: cdktf.stringToHclTerraform(struct.capacityReservationId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        capacity_reservation_resource_group_arn: {
            value: cdktf.stringToHclTerraform(struct.capacityReservationResourceGroupArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.spotInstanceRequestCapacityReservationSpecificationCapacityReservationTargetToHclTerraform = spotInstanceRequestCapacityReservationSpecificationCapacityReservationTargetToHclTerraform;
class SpotInstanceRequestCapacityReservationSpecificationCapacityReservationTargetOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._capacityReservationId !== undefined) {
            hasAnyValues = true;
            internalValueResult.capacityReservationId = this._capacityReservationId;
        }
        if (this._capacityReservationResourceGroupArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.capacityReservationResourceGroupArn = this._capacityReservationResourceGroupArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._capacityReservationId = undefined;
            this._capacityReservationResourceGroupArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._capacityReservationId = value.capacityReservationId;
            this._capacityReservationResourceGroupArn = value.capacityReservationResourceGroupArn;
        }
    }
    get capacityReservationId() {
        return this.getStringAttribute('capacity_reservation_id');
    }
    set capacityReservationId(value) {
        this._capacityReservationId = value;
    }
    resetCapacityReservationId() {
        this._capacityReservationId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get capacityReservationIdInput() {
        return this._capacityReservationId;
    }
    get capacityReservationResourceGroupArn() {
        return this.getStringAttribute('capacity_reservation_resource_group_arn');
    }
    set capacityReservationResourceGroupArn(value) {
        this._capacityReservationResourceGroupArn = value;
    }
    resetCapacityReservationResourceGroupArn() {
        this._capacityReservationResourceGroupArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get capacityReservationResourceGroupArnInput() {
        return this._capacityReservationResourceGroupArn;
    }
}
exports.SpotInstanceRequestCapacityReservationSpecificationCapacityReservationTargetOutputReference = SpotInstanceRequestCapacityReservationSpecificationCapacityReservationTargetOutputReference;
_a = JSII_RTTI_SYMBOL_1;
SpotInstanceRequestCapacityReservationSpecificationCapacityReservationTargetOutputReference[_a] = { fqn: "@cdktf/provider-aws.spotInstanceRequest.SpotInstanceRequestCapacityReservationSpecificationCapacityReservationTargetOutputReference", version: "19.15.0" };
function spotInstanceRequestCapacityReservationSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        capacity_reservation_preference: cdktf.stringToTerraform(struct.capacityReservationPreference),
        capacity_reservation_target: spotInstanceRequestCapacityReservationSpecificationCapacityReservationTargetToTerraform(struct.capacityReservationTarget),
    };
}
exports.spotInstanceRequestCapacityReservationSpecificationToTerraform = spotInstanceRequestCapacityReservationSpecificationToTerraform;
function spotInstanceRequestCapacityReservationSpecificationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        capacity_reservation_preference: {
            value: cdktf.stringToHclTerraform(struct.capacityReservationPreference),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        capacity_reservation_target: {
            value: spotInstanceRequestCapacityReservationSpecificationCapacityReservationTargetToHclTerraform(struct.capacityReservationTarget),
            isBlock: true,
            type: "list",
            storageClassType: "SpotInstanceRequestCapacityReservationSpecificationCapacityReservationTargetList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.spotInstanceRequestCapacityReservationSpecificationToHclTerraform = spotInstanceRequestCapacityReservationSpecificationToHclTerraform;
class SpotInstanceRequestCapacityReservationSpecificationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // capacity_reservation_target - computed: false, optional: true, required: false
        this._capacityReservationTarget = new SpotInstanceRequestCapacityReservationSpecificationCapacityReservationTargetOutputReference(this, "capacity_reservation_target");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._capacityReservationPreference !== undefined) {
            hasAnyValues = true;
            internalValueResult.capacityReservationPreference = this._capacityReservationPreference;
        }
        if (this._capacityReservationTarget?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.capacityReservationTarget = this._capacityReservationTarget?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._capacityReservationPreference = undefined;
            this._capacityReservationTarget.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._capacityReservationPreference = value.capacityReservationPreference;
            this._capacityReservationTarget.internalValue = value.capacityReservationTarget;
        }
    }
    get capacityReservationPreference() {
        return this.getStringAttribute('capacity_reservation_preference');
    }
    set capacityReservationPreference(value) {
        this._capacityReservationPreference = value;
    }
    resetCapacityReservationPreference() {
        this._capacityReservationPreference = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get capacityReservationPreferenceInput() {
        return this._capacityReservationPreference;
    }
    get capacityReservationTarget() {
        return this._capacityReservationTarget;
    }
    putCapacityReservationTarget(value) {
        this._capacityReservationTarget.internalValue = value;
    }
    resetCapacityReservationTarget() {
        this._capacityReservationTarget.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get capacityReservationTargetInput() {
        return this._capacityReservationTarget.internalValue;
    }
}
exports.SpotInstanceRequestCapacityReservationSpecificationOutputReference = SpotInstanceRequestCapacityReservationSpecificationOutputReference;
_b = JSII_RTTI_SYMBOL_1;
SpotInstanceRequestCapacityReservationSpecificationOutputReference[_b] = { fqn: "@cdktf/provider-aws.spotInstanceRequest.SpotInstanceRequestCapacityReservationSpecificationOutputReference", version: "19.15.0" };
function spotInstanceRequestCpuOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        amd_sev_snp: cdktf.stringToTerraform(struct.amdSevSnp),
        core_count: cdktf.numberToTerraform(struct.coreCount),
        threads_per_core: cdktf.numberToTerraform(struct.threadsPerCore),
    };
}
exports.spotInstanceRequestCpuOptionsToTerraform = spotInstanceRequestCpuOptionsToTerraform;
function spotInstanceRequestCpuOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        amd_sev_snp: {
            value: cdktf.stringToHclTerraform(struct.amdSevSnp),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        core_count: {
            value: cdktf.numberToHclTerraform(struct.coreCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        threads_per_core: {
            value: cdktf.numberToHclTerraform(struct.threadsPerCore),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.spotInstanceRequestCpuOptionsToHclTerraform = spotInstanceRequestCpuOptionsToHclTerraform;
class SpotInstanceRequestCpuOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._amdSevSnp !== undefined) {
            hasAnyValues = true;
            internalValueResult.amdSevSnp = this._amdSevSnp;
        }
        if (this._coreCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.coreCount = this._coreCount;
        }
        if (this._threadsPerCore !== undefined) {
            hasAnyValues = true;
            internalValueResult.threadsPerCore = this._threadsPerCore;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._amdSevSnp = undefined;
            this._coreCount = undefined;
            this._threadsPerCore = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._amdSevSnp = value.amdSevSnp;
            this._coreCount = value.coreCount;
            this._threadsPerCore = value.threadsPerCore;
        }
    }
    get amdSevSnp() {
        return this.getStringAttribute('amd_sev_snp');
    }
    set amdSevSnp(value) {
        this._amdSevSnp = value;
    }
    resetAmdSevSnp() {
        this._amdSevSnp = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get amdSevSnpInput() {
        return this._amdSevSnp;
    }
    get coreCount() {
        return this.getNumberAttribute('core_count');
    }
    set coreCount(value) {
        this._coreCount = value;
    }
    resetCoreCount() {
        this._coreCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get coreCountInput() {
        return this._coreCount;
    }
    get threadsPerCore() {
        return this.getNumberAttribute('threads_per_core');
    }
    set threadsPerCore(value) {
        this._threadsPerCore = value;
    }
    resetThreadsPerCore() {
        this._threadsPerCore = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get threadsPerCoreInput() {
        return this._threadsPerCore;
    }
}
exports.SpotInstanceRequestCpuOptionsOutputReference = SpotInstanceRequestCpuOptionsOutputReference;
_c = JSII_RTTI_SYMBOL_1;
SpotInstanceRequestCpuOptionsOutputReference[_c] = { fqn: "@cdktf/provider-aws.spotInstanceRequest.SpotInstanceRequestCpuOptionsOutputReference", version: "19.15.0" };
function spotInstanceRequestCreditSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cpu_credits: cdktf.stringToTerraform(struct.cpuCredits),
    };
}
exports.spotInstanceRequestCreditSpecificationToTerraform = spotInstanceRequestCreditSpecificationToTerraform;
function spotInstanceRequestCreditSpecificationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cpu_credits: {
            value: cdktf.stringToHclTerraform(struct.cpuCredits),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.spotInstanceRequestCreditSpecificationToHclTerraform = spotInstanceRequestCreditSpecificationToHclTerraform;
class SpotInstanceRequestCreditSpecificationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cpuCredits !== undefined) {
            hasAnyValues = true;
            internalValueResult.cpuCredits = this._cpuCredits;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cpuCredits = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cpuCredits = value.cpuCredits;
        }
    }
    get cpuCredits() {
        return this.getStringAttribute('cpu_credits');
    }
    set cpuCredits(value) {
        this._cpuCredits = value;
    }
    resetCpuCredits() {
        this._cpuCredits = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cpuCreditsInput() {
        return this._cpuCredits;
    }
}
exports.SpotInstanceRequestCreditSpecificationOutputReference = SpotInstanceRequestCreditSpecificationOutputReference;
_d = JSII_RTTI_SYMBOL_1;
SpotInstanceRequestCreditSpecificationOutputReference[_d] = { fqn: "@cdktf/provider-aws.spotInstanceRequest.SpotInstanceRequestCreditSpecificationOutputReference", version: "19.15.0" };
function spotInstanceRequestEbsBlockDeviceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        delete_on_termination: cdktf.booleanToTerraform(struct.deleteOnTermination),
        device_name: cdktf.stringToTerraform(struct.deviceName),
        encrypted: cdktf.booleanToTerraform(struct.encrypted),
        iops: cdktf.numberToTerraform(struct.iops),
        kms_key_id: cdktf.stringToTerraform(struct.kmsKeyId),
        snapshot_id: cdktf.stringToTerraform(struct.snapshotId),
        tags: cdktf.hashMapper(cdktf.stringToTerraform)(struct.tags),
        tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(struct.tagsAll),
        throughput: cdktf.numberToTerraform(struct.throughput),
        volume_size: cdktf.numberToTerraform(struct.volumeSize),
        volume_type: cdktf.stringToTerraform(struct.volumeType),
    };
}
exports.spotInstanceRequestEbsBlockDeviceToTerraform = spotInstanceRequestEbsBlockDeviceToTerraform;
function spotInstanceRequestEbsBlockDeviceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        delete_on_termination: {
            value: cdktf.booleanToHclTerraform(struct.deleteOnTermination),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        device_name: {
            value: cdktf.stringToHclTerraform(struct.deviceName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        encrypted: {
            value: cdktf.booleanToHclTerraform(struct.encrypted),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        iops: {
            value: cdktf.numberToHclTerraform(struct.iops),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        kms_key_id: {
            value: cdktf.stringToHclTerraform(struct.kmsKeyId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        snapshot_id: {
            value: cdktf.stringToHclTerraform(struct.snapshotId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        tags: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.tags),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        tags_all: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.tagsAll),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        throughput: {
            value: cdktf.numberToHclTerraform(struct.throughput),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        volume_size: {
            value: cdktf.numberToHclTerraform(struct.volumeSize),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        volume_type: {
            value: cdktf.stringToHclTerraform(struct.volumeType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.spotInstanceRequestEbsBlockDeviceToHclTerraform = spotInstanceRequestEbsBlockDeviceToHclTerraform;
class SpotInstanceRequestEbsBlockDeviceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._deleteOnTermination !== undefined) {
            hasAnyValues = true;
            internalValueResult.deleteOnTermination = this._deleteOnTermination;
        }
        if (this._deviceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.deviceName = this._deviceName;
        }
        if (this._encrypted !== undefined) {
            hasAnyValues = true;
            internalValueResult.encrypted = this._encrypted;
        }
        if (this._iops !== undefined) {
            hasAnyValues = true;
            internalValueResult.iops = this._iops;
        }
        if (this._kmsKeyId !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyId = this._kmsKeyId;
        }
        if (this._snapshotId !== undefined) {
            hasAnyValues = true;
            internalValueResult.snapshotId = this._snapshotId;
        }
        if (this._tags !== undefined) {
            hasAnyValues = true;
            internalValueResult.tags = this._tags;
        }
        if (this._tagsAll !== undefined) {
            hasAnyValues = true;
            internalValueResult.tagsAll = this._tagsAll;
        }
        if (this._throughput !== undefined) {
            hasAnyValues = true;
            internalValueResult.throughput = this._throughput;
        }
        if (this._volumeSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.volumeSize = this._volumeSize;
        }
        if (this._volumeType !== undefined) {
            hasAnyValues = true;
            internalValueResult.volumeType = this._volumeType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._deleteOnTermination = undefined;
            this._deviceName = undefined;
            this._encrypted = undefined;
            this._iops = undefined;
            this._kmsKeyId = undefined;
            this._snapshotId = undefined;
            this._tags = undefined;
            this._tagsAll = undefined;
            this._throughput = undefined;
            this._volumeSize = undefined;
            this._volumeType = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._deleteOnTermination = value.deleteOnTermination;
            this._deviceName = value.deviceName;
            this._encrypted = value.encrypted;
            this._iops = value.iops;
            this._kmsKeyId = value.kmsKeyId;
            this._snapshotId = value.snapshotId;
            this._tags = value.tags;
            this._tagsAll = value.tagsAll;
            this._throughput = value.throughput;
            this._volumeSize = value.volumeSize;
            this._volumeType = value.volumeType;
        }
    }
    get deleteOnTermination() {
        return this.getBooleanAttribute('delete_on_termination');
    }
    set deleteOnTermination(value) {
        this._deleteOnTermination = value;
    }
    resetDeleteOnTermination() {
        this._deleteOnTermination = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteOnTerminationInput() {
        return this._deleteOnTermination;
    }
    get deviceName() {
        return this.getStringAttribute('device_name');
    }
    set deviceName(value) {
        this._deviceName = value;
    }
    // Temporarily expose input value. Use with caution.
    get deviceNameInput() {
        return this._deviceName;
    }
    get encrypted() {
        return this.getBooleanAttribute('encrypted');
    }
    set encrypted(value) {
        this._encrypted = value;
    }
    resetEncrypted() {
        this._encrypted = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptedInput() {
        return this._encrypted;
    }
    get iops() {
        return this.getNumberAttribute('iops');
    }
    set iops(value) {
        this._iops = value;
    }
    resetIops() {
        this._iops = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get iopsInput() {
        return this._iops;
    }
    get kmsKeyId() {
        return this.getStringAttribute('kms_key_id');
    }
    set kmsKeyId(value) {
        this._kmsKeyId = value;
    }
    resetKmsKeyId() {
        this._kmsKeyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyIdInput() {
        return this._kmsKeyId;
    }
    get snapshotId() {
        return this.getStringAttribute('snapshot_id');
    }
    set snapshotId(value) {
        this._snapshotId = value;
    }
    resetSnapshotId() {
        this._snapshotId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get snapshotIdInput() {
        return this._snapshotId;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get throughput() {
        return this.getNumberAttribute('throughput');
    }
    set throughput(value) {
        this._throughput = value;
    }
    resetThroughput() {
        this._throughput = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get throughputInput() {
        return this._throughput;
    }
    // volume_id - computed: true, optional: false, required: false
    get volumeId() {
        return this.getStringAttribute('volume_id');
    }
    get volumeSize() {
        return this.getNumberAttribute('volume_size');
    }
    set volumeSize(value) {
        this._volumeSize = value;
    }
    resetVolumeSize() {
        this._volumeSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get volumeSizeInput() {
        return this._volumeSize;
    }
    get volumeType() {
        return this.getStringAttribute('volume_type');
    }
    set volumeType(value) {
        this._volumeType = value;
    }
    resetVolumeType() {
        this._volumeType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get volumeTypeInput() {
        return this._volumeType;
    }
}
exports.SpotInstanceRequestEbsBlockDeviceOutputReference = SpotInstanceRequestEbsBlockDeviceOutputReference;
_e = JSII_RTTI_SYMBOL_1;
SpotInstanceRequestEbsBlockDeviceOutputReference[_e] = { fqn: "@cdktf/provider-aws.spotInstanceRequest.SpotInstanceRequestEbsBlockDeviceOutputReference", version: "19.15.0" };
class SpotInstanceRequestEbsBlockDeviceList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SpotInstanceRequestEbsBlockDeviceOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SpotInstanceRequestEbsBlockDeviceList = SpotInstanceRequestEbsBlockDeviceList;
_f = JSII_RTTI_SYMBOL_1;
SpotInstanceRequestEbsBlockDeviceList[_f] = { fqn: "@cdktf/provider-aws.spotInstanceRequest.SpotInstanceRequestEbsBlockDeviceList", version: "19.15.0" };
function spotInstanceRequestEnclaveOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.spotInstanceRequestEnclaveOptionsToTerraform = spotInstanceRequestEnclaveOptionsToTerraform;
function spotInstanceRequestEnclaveOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.spotInstanceRequestEnclaveOptionsToHclTerraform = spotInstanceRequestEnclaveOptionsToHclTerraform;
class SpotInstanceRequestEnclaveOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.SpotInstanceRequestEnclaveOptionsOutputReference = SpotInstanceRequestEnclaveOptionsOutputReference;
_g = JSII_RTTI_SYMBOL_1;
SpotInstanceRequestEnclaveOptionsOutputReference[_g] = { fqn: "@cdktf/provider-aws.spotInstanceRequest.SpotInstanceRequestEnclaveOptionsOutputReference", version: "19.15.0" };
function spotInstanceRequestEphemeralBlockDeviceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        device_name: cdktf.stringToTerraform(struct.deviceName),
        no_device: cdktf.booleanToTerraform(struct.noDevice),
        virtual_name: cdktf.stringToTerraform(struct.virtualName),
    };
}
exports.spotInstanceRequestEphemeralBlockDeviceToTerraform = spotInstanceRequestEphemeralBlockDeviceToTerraform;
function spotInstanceRequestEphemeralBlockDeviceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        device_name: {
            value: cdktf.stringToHclTerraform(struct.deviceName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        no_device: {
            value: cdktf.booleanToHclTerraform(struct.noDevice),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        virtual_name: {
            value: cdktf.stringToHclTerraform(struct.virtualName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.spotInstanceRequestEphemeralBlockDeviceToHclTerraform = spotInstanceRequestEphemeralBlockDeviceToHclTerraform;
class SpotInstanceRequestEphemeralBlockDeviceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._deviceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.deviceName = this._deviceName;
        }
        if (this._noDevice !== undefined) {
            hasAnyValues = true;
            internalValueResult.noDevice = this._noDevice;
        }
        if (this._virtualName !== undefined) {
            hasAnyValues = true;
            internalValueResult.virtualName = this._virtualName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._deviceName = undefined;
            this._noDevice = undefined;
            this._virtualName = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._deviceName = value.deviceName;
            this._noDevice = value.noDevice;
            this._virtualName = value.virtualName;
        }
    }
    get deviceName() {
        return this.getStringAttribute('device_name');
    }
    set deviceName(value) {
        this._deviceName = value;
    }
    // Temporarily expose input value. Use with caution.
    get deviceNameInput() {
        return this._deviceName;
    }
    get noDevice() {
        return this.getBooleanAttribute('no_device');
    }
    set noDevice(value) {
        this._noDevice = value;
    }
    resetNoDevice() {
        this._noDevice = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get noDeviceInput() {
        return this._noDevice;
    }
    get virtualName() {
        return this.getStringAttribute('virtual_name');
    }
    set virtualName(value) {
        this._virtualName = value;
    }
    resetVirtualName() {
        this._virtualName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get virtualNameInput() {
        return this._virtualName;
    }
}
exports.SpotInstanceRequestEphemeralBlockDeviceOutputReference = SpotInstanceRequestEphemeralBlockDeviceOutputReference;
_h = JSII_RTTI_SYMBOL_1;
SpotInstanceRequestEphemeralBlockDeviceOutputReference[_h] = { fqn: "@cdktf/provider-aws.spotInstanceRequest.SpotInstanceRequestEphemeralBlockDeviceOutputReference", version: "19.15.0" };
class SpotInstanceRequestEphemeralBlockDeviceList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SpotInstanceRequestEphemeralBlockDeviceOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SpotInstanceRequestEphemeralBlockDeviceList = SpotInstanceRequestEphemeralBlockDeviceList;
_j = JSII_RTTI_SYMBOL_1;
SpotInstanceRequestEphemeralBlockDeviceList[_j] = { fqn: "@cdktf/provider-aws.spotInstanceRequest.SpotInstanceRequestEphemeralBlockDeviceList", version: "19.15.0" };
function spotInstanceRequestLaunchTemplateToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        id: cdktf.stringToTerraform(struct.id),
        name: cdktf.stringToTerraform(struct.name),
        version: cdktf.stringToTerraform(struct.version),
    };
}
exports.spotInstanceRequestLaunchTemplateToTerraform = spotInstanceRequestLaunchTemplateToTerraform;
function spotInstanceRequestLaunchTemplateToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        id: {
            value: cdktf.stringToHclTerraform(struct.id),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        version: {
            value: cdktf.stringToHclTerraform(struct.version),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.spotInstanceRequestLaunchTemplateToHclTerraform = spotInstanceRequestLaunchTemplateToHclTerraform;
class SpotInstanceRequestLaunchTemplateOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._id !== undefined) {
            hasAnyValues = true;
            internalValueResult.id = this._id;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._version !== undefined) {
            hasAnyValues = true;
            internalValueResult.version = this._version;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._id = undefined;
            this._name = undefined;
            this._version = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._id = value.id;
            this._name = value.name;
            this._version = value.version;
        }
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get version() {
        return this.getStringAttribute('version');
    }
    set version(value) {
        this._version = value;
    }
    resetVersion() {
        this._version = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
}
exports.SpotInstanceRequestLaunchTemplateOutputReference = SpotInstanceRequestLaunchTemplateOutputReference;
_k = JSII_RTTI_SYMBOL_1;
SpotInstanceRequestLaunchTemplateOutputReference[_k] = { fqn: "@cdktf/provider-aws.spotInstanceRequest.SpotInstanceRequestLaunchTemplateOutputReference", version: "19.15.0" };
function spotInstanceRequestMaintenanceOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auto_recovery: cdktf.stringToTerraform(struct.autoRecovery),
    };
}
exports.spotInstanceRequestMaintenanceOptionsToTerraform = spotInstanceRequestMaintenanceOptionsToTerraform;
function spotInstanceRequestMaintenanceOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        auto_recovery: {
            value: cdktf.stringToHclTerraform(struct.autoRecovery),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.spotInstanceRequestMaintenanceOptionsToHclTerraform = spotInstanceRequestMaintenanceOptionsToHclTerraform;
class SpotInstanceRequestMaintenanceOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._autoRecovery !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoRecovery = this._autoRecovery;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._autoRecovery = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._autoRecovery = value.autoRecovery;
        }
    }
    get autoRecovery() {
        return this.getStringAttribute('auto_recovery');
    }
    set autoRecovery(value) {
        this._autoRecovery = value;
    }
    resetAutoRecovery() {
        this._autoRecovery = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoRecoveryInput() {
        return this._autoRecovery;
    }
}
exports.SpotInstanceRequestMaintenanceOptionsOutputReference = SpotInstanceRequestMaintenanceOptionsOutputReference;
_l = JSII_RTTI_SYMBOL_1;
SpotInstanceRequestMaintenanceOptionsOutputReference[_l] = { fqn: "@cdktf/provider-aws.spotInstanceRequest.SpotInstanceRequestMaintenanceOptionsOutputReference", version: "19.15.0" };
function spotInstanceRequestMetadataOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        http_endpoint: cdktf.stringToTerraform(struct.httpEndpoint),
        http_protocol_ipv6: cdktf.stringToTerraform(struct.httpProtocolIpv6),
        http_put_response_hop_limit: cdktf.numberToTerraform(struct.httpPutResponseHopLimit),
        http_tokens: cdktf.stringToTerraform(struct.httpTokens),
        instance_metadata_tags: cdktf.stringToTerraform(struct.instanceMetadataTags),
    };
}
exports.spotInstanceRequestMetadataOptionsToTerraform = spotInstanceRequestMetadataOptionsToTerraform;
function spotInstanceRequestMetadataOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        http_endpoint: {
            value: cdktf.stringToHclTerraform(struct.httpEndpoint),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        http_protocol_ipv6: {
            value: cdktf.stringToHclTerraform(struct.httpProtocolIpv6),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        http_put_response_hop_limit: {
            value: cdktf.numberToHclTerraform(struct.httpPutResponseHopLimit),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        http_tokens: {
            value: cdktf.stringToHclTerraform(struct.httpTokens),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        instance_metadata_tags: {
            value: cdktf.stringToHclTerraform(struct.instanceMetadataTags),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.spotInstanceRequestMetadataOptionsToHclTerraform = spotInstanceRequestMetadataOptionsToHclTerraform;
class SpotInstanceRequestMetadataOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._httpEndpoint !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpEndpoint = this._httpEndpoint;
        }
        if (this._httpProtocolIpv6 !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpProtocolIpv6 = this._httpProtocolIpv6;
        }
        if (this._httpPutResponseHopLimit !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpPutResponseHopLimit = this._httpPutResponseHopLimit;
        }
        if (this._httpTokens !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpTokens = this._httpTokens;
        }
        if (this._instanceMetadataTags !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceMetadataTags = this._instanceMetadataTags;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._httpEndpoint = undefined;
            this._httpProtocolIpv6 = undefined;
            this._httpPutResponseHopLimit = undefined;
            this._httpTokens = undefined;
            this._instanceMetadataTags = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._httpEndpoint = value.httpEndpoint;
            this._httpProtocolIpv6 = value.httpProtocolIpv6;
            this._httpPutResponseHopLimit = value.httpPutResponseHopLimit;
            this._httpTokens = value.httpTokens;
            this._instanceMetadataTags = value.instanceMetadataTags;
        }
    }
    get httpEndpoint() {
        return this.getStringAttribute('http_endpoint');
    }
    set httpEndpoint(value) {
        this._httpEndpoint = value;
    }
    resetHttpEndpoint() {
        this._httpEndpoint = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpEndpointInput() {
        return this._httpEndpoint;
    }
    get httpProtocolIpv6() {
        return this.getStringAttribute('http_protocol_ipv6');
    }
    set httpProtocolIpv6(value) {
        this._httpProtocolIpv6 = value;
    }
    resetHttpProtocolIpv6() {
        this._httpProtocolIpv6 = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpProtocolIpv6Input() {
        return this._httpProtocolIpv6;
    }
    get httpPutResponseHopLimit() {
        return this.getNumberAttribute('http_put_response_hop_limit');
    }
    set httpPutResponseHopLimit(value) {
        this._httpPutResponseHopLimit = value;
    }
    resetHttpPutResponseHopLimit() {
        this._httpPutResponseHopLimit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpPutResponseHopLimitInput() {
        return this._httpPutResponseHopLimit;
    }
    get httpTokens() {
        return this.getStringAttribute('http_tokens');
    }
    set httpTokens(value) {
        this._httpTokens = value;
    }
    resetHttpTokens() {
        this._httpTokens = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpTokensInput() {
        return this._httpTokens;
    }
    get instanceMetadataTags() {
        return this.getStringAttribute('instance_metadata_tags');
    }
    set instanceMetadataTags(value) {
        this._instanceMetadataTags = value;
    }
    resetInstanceMetadataTags() {
        this._instanceMetadataTags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceMetadataTagsInput() {
        return this._instanceMetadataTags;
    }
}
exports.SpotInstanceRequestMetadataOptionsOutputReference = SpotInstanceRequestMetadataOptionsOutputReference;
_m = JSII_RTTI_SYMBOL_1;
SpotInstanceRequestMetadataOptionsOutputReference[_m] = { fqn: "@cdktf/provider-aws.spotInstanceRequest.SpotInstanceRequestMetadataOptionsOutputReference", version: "19.15.0" };
function spotInstanceRequestNetworkInterfaceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        delete_on_termination: cdktf.booleanToTerraform(struct.deleteOnTermination),
        device_index: cdktf.numberToTerraform(struct.deviceIndex),
        network_card_index: cdktf.numberToTerraform(struct.networkCardIndex),
        network_interface_id: cdktf.stringToTerraform(struct.networkInterfaceId),
    };
}
exports.spotInstanceRequestNetworkInterfaceToTerraform = spotInstanceRequestNetworkInterfaceToTerraform;
function spotInstanceRequestNetworkInterfaceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        delete_on_termination: {
            value: cdktf.booleanToHclTerraform(struct.deleteOnTermination),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        device_index: {
            value: cdktf.numberToHclTerraform(struct.deviceIndex),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        network_card_index: {
            value: cdktf.numberToHclTerraform(struct.networkCardIndex),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        network_interface_id: {
            value: cdktf.stringToHclTerraform(struct.networkInterfaceId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.spotInstanceRequestNetworkInterfaceToHclTerraform = spotInstanceRequestNetworkInterfaceToHclTerraform;
class SpotInstanceRequestNetworkInterfaceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._deleteOnTermination !== undefined) {
            hasAnyValues = true;
            internalValueResult.deleteOnTermination = this._deleteOnTermination;
        }
        if (this._deviceIndex !== undefined) {
            hasAnyValues = true;
            internalValueResult.deviceIndex = this._deviceIndex;
        }
        if (this._networkCardIndex !== undefined) {
            hasAnyValues = true;
            internalValueResult.networkCardIndex = this._networkCardIndex;
        }
        if (this._networkInterfaceId !== undefined) {
            hasAnyValues = true;
            internalValueResult.networkInterfaceId = this._networkInterfaceId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._deleteOnTermination = undefined;
            this._deviceIndex = undefined;
            this._networkCardIndex = undefined;
            this._networkInterfaceId = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._deleteOnTermination = value.deleteOnTermination;
            this._deviceIndex = value.deviceIndex;
            this._networkCardIndex = value.networkCardIndex;
            this._networkInterfaceId = value.networkInterfaceId;
        }
    }
    get deleteOnTermination() {
        return this.getBooleanAttribute('delete_on_termination');
    }
    set deleteOnTermination(value) {
        this._deleteOnTermination = value;
    }
    resetDeleteOnTermination() {
        this._deleteOnTermination = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteOnTerminationInput() {
        return this._deleteOnTermination;
    }
    get deviceIndex() {
        return this.getNumberAttribute('device_index');
    }
    set deviceIndex(value) {
        this._deviceIndex = value;
    }
    // Temporarily expose input value. Use with caution.
    get deviceIndexInput() {
        return this._deviceIndex;
    }
    get networkCardIndex() {
        return this.getNumberAttribute('network_card_index');
    }
    set networkCardIndex(value) {
        this._networkCardIndex = value;
    }
    resetNetworkCardIndex() {
        this._networkCardIndex = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkCardIndexInput() {
        return this._networkCardIndex;
    }
    get networkInterfaceId() {
        return this.getStringAttribute('network_interface_id');
    }
    set networkInterfaceId(value) {
        this._networkInterfaceId = value;
    }
    // Temporarily expose input value. Use with caution.
    get networkInterfaceIdInput() {
        return this._networkInterfaceId;
    }
}
exports.SpotInstanceRequestNetworkInterfaceOutputReference = SpotInstanceRequestNetworkInterfaceOutputReference;
_o = JSII_RTTI_SYMBOL_1;
SpotInstanceRequestNetworkInterfaceOutputReference[_o] = { fqn: "@cdktf/provider-aws.spotInstanceRequest.SpotInstanceRequestNetworkInterfaceOutputReference", version: "19.15.0" };
class SpotInstanceRequestNetworkInterfaceList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SpotInstanceRequestNetworkInterfaceOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SpotInstanceRequestNetworkInterfaceList = SpotInstanceRequestNetworkInterfaceList;
_p = JSII_RTTI_SYMBOL_1;
SpotInstanceRequestNetworkInterfaceList[_p] = { fqn: "@cdktf/provider-aws.spotInstanceRequest.SpotInstanceRequestNetworkInterfaceList", version: "19.15.0" };
function spotInstanceRequestPrivateDnsNameOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable_resource_name_dns_a_record: cdktf.booleanToTerraform(struct.enableResourceNameDnsARecord),
        enable_resource_name_dns_aaaa_record: cdktf.booleanToTerraform(struct.enableResourceNameDnsAaaaRecord),
        hostname_type: cdktf.stringToTerraform(struct.hostnameType),
    };
}
exports.spotInstanceRequestPrivateDnsNameOptionsToTerraform = spotInstanceRequestPrivateDnsNameOptionsToTerraform;
function spotInstanceRequestPrivateDnsNameOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enable_resource_name_dns_a_record: {
            value: cdktf.booleanToHclTerraform(struct.enableResourceNameDnsARecord),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        enable_resource_name_dns_aaaa_record: {
            value: cdktf.booleanToHclTerraform(struct.enableResourceNameDnsAaaaRecord),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        hostname_type: {
            value: cdktf.stringToHclTerraform(struct.hostnameType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.spotInstanceRequestPrivateDnsNameOptionsToHclTerraform = spotInstanceRequestPrivateDnsNameOptionsToHclTerraform;
class SpotInstanceRequestPrivateDnsNameOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enableResourceNameDnsARecord !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableResourceNameDnsARecord = this._enableResourceNameDnsARecord;
        }
        if (this._enableResourceNameDnsAaaaRecord !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableResourceNameDnsAaaaRecord = this._enableResourceNameDnsAaaaRecord;
        }
        if (this._hostnameType !== undefined) {
            hasAnyValues = true;
            internalValueResult.hostnameType = this._hostnameType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enableResourceNameDnsARecord = undefined;
            this._enableResourceNameDnsAaaaRecord = undefined;
            this._hostnameType = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enableResourceNameDnsARecord = value.enableResourceNameDnsARecord;
            this._enableResourceNameDnsAaaaRecord = value.enableResourceNameDnsAaaaRecord;
            this._hostnameType = value.hostnameType;
        }
    }
    get enableResourceNameDnsARecord() {
        return this.getBooleanAttribute('enable_resource_name_dns_a_record');
    }
    set enableResourceNameDnsARecord(value) {
        this._enableResourceNameDnsARecord = value;
    }
    resetEnableResourceNameDnsARecord() {
        this._enableResourceNameDnsARecord = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableResourceNameDnsARecordInput() {
        return this._enableResourceNameDnsARecord;
    }
    get enableResourceNameDnsAaaaRecord() {
        return this.getBooleanAttribute('enable_resource_name_dns_aaaa_record');
    }
    set enableResourceNameDnsAaaaRecord(value) {
        this._enableResourceNameDnsAaaaRecord = value;
    }
    resetEnableResourceNameDnsAaaaRecord() {
        this._enableResourceNameDnsAaaaRecord = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableResourceNameDnsAaaaRecordInput() {
        return this._enableResourceNameDnsAaaaRecord;
    }
    get hostnameType() {
        return this.getStringAttribute('hostname_type');
    }
    set hostnameType(value) {
        this._hostnameType = value;
    }
    resetHostnameType() {
        this._hostnameType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostnameTypeInput() {
        return this._hostnameType;
    }
}
exports.SpotInstanceRequestPrivateDnsNameOptionsOutputReference = SpotInstanceRequestPrivateDnsNameOptionsOutputReference;
_q = JSII_RTTI_SYMBOL_1;
SpotInstanceRequestPrivateDnsNameOptionsOutputReference[_q] = { fqn: "@cdktf/provider-aws.spotInstanceRequest.SpotInstanceRequestPrivateDnsNameOptionsOutputReference", version: "19.15.0" };
function spotInstanceRequestRootBlockDeviceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        delete_on_termination: cdktf.booleanToTerraform(struct.deleteOnTermination),
        encrypted: cdktf.booleanToTerraform(struct.encrypted),
        iops: cdktf.numberToTerraform(struct.iops),
        kms_key_id: cdktf.stringToTerraform(struct.kmsKeyId),
        tags: cdktf.hashMapper(cdktf.stringToTerraform)(struct.tags),
        tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(struct.tagsAll),
        throughput: cdktf.numberToTerraform(struct.throughput),
        volume_size: cdktf.numberToTerraform(struct.volumeSize),
        volume_type: cdktf.stringToTerraform(struct.volumeType),
    };
}
exports.spotInstanceRequestRootBlockDeviceToTerraform = spotInstanceRequestRootBlockDeviceToTerraform;
function spotInstanceRequestRootBlockDeviceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        delete_on_termination: {
            value: cdktf.booleanToHclTerraform(struct.deleteOnTermination),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        encrypted: {
            value: cdktf.booleanToHclTerraform(struct.encrypted),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        iops: {
            value: cdktf.numberToHclTerraform(struct.iops),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        kms_key_id: {
            value: cdktf.stringToHclTerraform(struct.kmsKeyId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        tags: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.tags),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        tags_all: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.tagsAll),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        throughput: {
            value: cdktf.numberToHclTerraform(struct.throughput),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        volume_size: {
            value: cdktf.numberToHclTerraform(struct.volumeSize),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        volume_type: {
            value: cdktf.stringToHclTerraform(struct.volumeType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.spotInstanceRequestRootBlockDeviceToHclTerraform = spotInstanceRequestRootBlockDeviceToHclTerraform;
class SpotInstanceRequestRootBlockDeviceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._deleteOnTermination !== undefined) {
            hasAnyValues = true;
            internalValueResult.deleteOnTermination = this._deleteOnTermination;
        }
        if (this._encrypted !== undefined) {
            hasAnyValues = true;
            internalValueResult.encrypted = this._encrypted;
        }
        if (this._iops !== undefined) {
            hasAnyValues = true;
            internalValueResult.iops = this._iops;
        }
        if (this._kmsKeyId !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyId = this._kmsKeyId;
        }
        if (this._tags !== undefined) {
            hasAnyValues = true;
            internalValueResult.tags = this._tags;
        }
        if (this._tagsAll !== undefined) {
            hasAnyValues = true;
            internalValueResult.tagsAll = this._tagsAll;
        }
        if (this._throughput !== undefined) {
            hasAnyValues = true;
            internalValueResult.throughput = this._throughput;
        }
        if (this._volumeSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.volumeSize = this._volumeSize;
        }
        if (this._volumeType !== undefined) {
            hasAnyValues = true;
            internalValueResult.volumeType = this._volumeType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._deleteOnTermination = undefined;
            this._encrypted = undefined;
            this._iops = undefined;
            this._kmsKeyId = undefined;
            this._tags = undefined;
            this._tagsAll = undefined;
            this._throughput = undefined;
            this._volumeSize = undefined;
            this._volumeType = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._deleteOnTermination = value.deleteOnTermination;
            this._encrypted = value.encrypted;
            this._iops = value.iops;
            this._kmsKeyId = value.kmsKeyId;
            this._tags = value.tags;
            this._tagsAll = value.tagsAll;
            this._throughput = value.throughput;
            this._volumeSize = value.volumeSize;
            this._volumeType = value.volumeType;
        }
    }
    get deleteOnTermination() {
        return this.getBooleanAttribute('delete_on_termination');
    }
    set deleteOnTermination(value) {
        this._deleteOnTermination = value;
    }
    resetDeleteOnTermination() {
        this._deleteOnTermination = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteOnTerminationInput() {
        return this._deleteOnTermination;
    }
    // device_name - computed: true, optional: false, required: false
    get deviceName() {
        return this.getStringAttribute('device_name');
    }
    get encrypted() {
        return this.getBooleanAttribute('encrypted');
    }
    set encrypted(value) {
        this._encrypted = value;
    }
    resetEncrypted() {
        this._encrypted = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptedInput() {
        return this._encrypted;
    }
    get iops() {
        return this.getNumberAttribute('iops');
    }
    set iops(value) {
        this._iops = value;
    }
    resetIops() {
        this._iops = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get iopsInput() {
        return this._iops;
    }
    get kmsKeyId() {
        return this.getStringAttribute('kms_key_id');
    }
    set kmsKeyId(value) {
        this._kmsKeyId = value;
    }
    resetKmsKeyId() {
        this._kmsKeyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyIdInput() {
        return this._kmsKeyId;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get throughput() {
        return this.getNumberAttribute('throughput');
    }
    set throughput(value) {
        this._throughput = value;
    }
    resetThroughput() {
        this._throughput = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get throughputInput() {
        return this._throughput;
    }
    // volume_id - computed: true, optional: false, required: false
    get volumeId() {
        return this.getStringAttribute('volume_id');
    }
    get volumeSize() {
        return this.getNumberAttribute('volume_size');
    }
    set volumeSize(value) {
        this._volumeSize = value;
    }
    resetVolumeSize() {
        this._volumeSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get volumeSizeInput() {
        return this._volumeSize;
    }
    get volumeType() {
        return this.getStringAttribute('volume_type');
    }
    set volumeType(value) {
        this._volumeType = value;
    }
    resetVolumeType() {
        this._volumeType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get volumeTypeInput() {
        return this._volumeType;
    }
}
exports.SpotInstanceRequestRootBlockDeviceOutputReference = SpotInstanceRequestRootBlockDeviceOutputReference;
_r = JSII_RTTI_SYMBOL_1;
SpotInstanceRequestRootBlockDeviceOutputReference[_r] = { fqn: "@cdktf/provider-aws.spotInstanceRequest.SpotInstanceRequestRootBlockDeviceOutputReference", version: "19.15.0" };
function spotInstanceRequestTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        read: cdktf.stringToTerraform(struct.read),
    };
}
exports.spotInstanceRequestTimeoutsToTerraform = spotInstanceRequestTimeoutsToTerraform;
function spotInstanceRequestTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        read: {
            value: cdktf.stringToHclTerraform(struct.read),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.spotInstanceRequestTimeoutsToHclTerraform = spotInstanceRequestTimeoutsToHclTerraform;
class SpotInstanceRequestTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._read !== undefined) {
            hasAnyValues = true;
            internalValueResult.read = this._read;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._read = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._read = value.read;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get read() {
        return this.getStringAttribute('read');
    }
    set read(value) {
        this._read = value;
    }
    resetRead() {
        this._read = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get readInput() {
        return this._read;
    }
}
exports.SpotInstanceRequestTimeoutsOutputReference = SpotInstanceRequestTimeoutsOutputReference;
_s = JSII_RTTI_SYMBOL_1;
SpotInstanceRequestTimeoutsOutputReference[_s] = { fqn: "@cdktf/provider-aws.spotInstanceRequest.SpotInstanceRequestTimeoutsOutputReference", version: "19.15.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/spot_instance_request aws_spot_instance_request}
*/
class SpotInstanceRequest extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a SpotInstanceRequest resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the SpotInstanceRequest to import
    * @param importFromId The id of the existing SpotInstanceRequest that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/spot_instance_request#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the SpotInstanceRequest to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_spot_instance_request", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/spot_instance_request aws_spot_instance_request} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SpotInstanceRequestConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'aws_spot_instance_request',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // capacity_reservation_specification - computed: false, optional: true, required: false
        this._capacityReservationSpecification = new SpotInstanceRequestCapacityReservationSpecificationOutputReference(this, "capacity_reservation_specification");
        // cpu_options - computed: false, optional: true, required: false
        this._cpuOptions = new SpotInstanceRequestCpuOptionsOutputReference(this, "cpu_options");
        // credit_specification - computed: false, optional: true, required: false
        this._creditSpecification = new SpotInstanceRequestCreditSpecificationOutputReference(this, "credit_specification");
        // ebs_block_device - computed: false, optional: true, required: false
        this._ebsBlockDevice = new SpotInstanceRequestEbsBlockDeviceList(this, "ebs_block_device", true);
        // enclave_options - computed: false, optional: true, required: false
        this._enclaveOptions = new SpotInstanceRequestEnclaveOptionsOutputReference(this, "enclave_options");
        // ephemeral_block_device - computed: false, optional: true, required: false
        this._ephemeralBlockDevice = new SpotInstanceRequestEphemeralBlockDeviceList(this, "ephemeral_block_device", true);
        // launch_template - computed: false, optional: true, required: false
        this._launchTemplate = new SpotInstanceRequestLaunchTemplateOutputReference(this, "launch_template");
        // maintenance_options - computed: false, optional: true, required: false
        this._maintenanceOptions = new SpotInstanceRequestMaintenanceOptionsOutputReference(this, "maintenance_options");
        // metadata_options - computed: false, optional: true, required: false
        this._metadataOptions = new SpotInstanceRequestMetadataOptionsOutputReference(this, "metadata_options");
        // network_interface - computed: false, optional: true, required: false
        this._networkInterface = new SpotInstanceRequestNetworkInterfaceList(this, "network_interface", true);
        // private_dns_name_options - computed: false, optional: true, required: false
        this._privateDnsNameOptions = new SpotInstanceRequestPrivateDnsNameOptionsOutputReference(this, "private_dns_name_options");
        // root_block_device - computed: false, optional: true, required: false
        this._rootBlockDevice = new SpotInstanceRequestRootBlockDeviceOutputReference(this, "root_block_device");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new SpotInstanceRequestTimeoutsOutputReference(this, "timeouts");
        this._ami = config.ami;
        this._associatePublicIpAddress = config.associatePublicIpAddress;
        this._availabilityZone = config.availabilityZone;
        this._blockDurationMinutes = config.blockDurationMinutes;
        this._cpuCoreCount = config.cpuCoreCount;
        this._cpuThreadsPerCore = config.cpuThreadsPerCore;
        this._disableApiStop = config.disableApiStop;
        this._disableApiTermination = config.disableApiTermination;
        this._ebsOptimized = config.ebsOptimized;
        this._getPasswordData = config.fetchPasswordData;
        this._hibernation = config.hibernation;
        this._hostId = config.hostId;
        this._hostResourceGroupArn = config.hostResourceGroupArn;
        this._iamInstanceProfile = config.iamInstanceProfile;
        this._id = config.id;
        this._instanceInitiatedShutdownBehavior = config.instanceInitiatedShutdownBehavior;
        this._instanceInterruptionBehavior = config.instanceInterruptionBehavior;
        this._instanceType = config.instanceType;
        this._ipv6AddressCount = config.ipv6AddressCount;
        this._ipv6Addresses = config.ipv6Addresses;
        this._keyName = config.keyName;
        this._launchGroup = config.launchGroup;
        this._monitoring = config.monitoring;
        this._placementGroup = config.placementGroup;
        this._placementPartitionNumber = config.placementPartitionNumber;
        this._privateIp = config.privateIp;
        this._secondaryPrivateIps = config.secondaryPrivateIps;
        this._securityGroups = config.securityGroups;
        this._sourceDestCheck = config.sourceDestCheck;
        this._spotPrice = config.spotPrice;
        this._spotType = config.spotType;
        this._subnetId = config.subnetId;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._tenancy = config.tenancy;
        this._userData = config.userData;
        this._userDataBase64 = config.userDataBase64;
        this._userDataReplaceOnChange = config.userDataReplaceOnChange;
        this._validFrom = config.validFrom;
        this._validUntil = config.validUntil;
        this._volumeTags = config.volumeTags;
        this._vpcSecurityGroupIds = config.vpcSecurityGroupIds;
        this._waitForFulfillment = config.waitForFulfillment;
        this._capacityReservationSpecification.internalValue = config.capacityReservationSpecification;
        this._cpuOptions.internalValue = config.cpuOptions;
        this._creditSpecification.internalValue = config.creditSpecification;
        this._ebsBlockDevice.internalValue = config.ebsBlockDevice;
        this._enclaveOptions.internalValue = config.enclaveOptions;
        this._ephemeralBlockDevice.internalValue = config.ephemeralBlockDevice;
        this._launchTemplate.internalValue = config.launchTemplate;
        this._maintenanceOptions.internalValue = config.maintenanceOptions;
        this._metadataOptions.internalValue = config.metadataOptions;
        this._networkInterface.internalValue = config.networkInterface;
        this._privateDnsNameOptions.internalValue = config.privateDnsNameOptions;
        this._rootBlockDevice.internalValue = config.rootBlockDevice;
        this._timeouts.internalValue = config.timeouts;
    }
    get ami() {
        return this.getStringAttribute('ami');
    }
    set ami(value) {
        this._ami = value;
    }
    resetAmi() {
        this._ami = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get amiInput() {
        return this._ami;
    }
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get associatePublicIpAddress() {
        return this.getBooleanAttribute('associate_public_ip_address');
    }
    set associatePublicIpAddress(value) {
        this._associatePublicIpAddress = value;
    }
    resetAssociatePublicIpAddress() {
        this._associatePublicIpAddress = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get associatePublicIpAddressInput() {
        return this._associatePublicIpAddress;
    }
    get availabilityZone() {
        return this.getStringAttribute('availability_zone');
    }
    set availabilityZone(value) {
        this._availabilityZone = value;
    }
    resetAvailabilityZone() {
        this._availabilityZone = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get availabilityZoneInput() {
        return this._availabilityZone;
    }
    get blockDurationMinutes() {
        return this.getNumberAttribute('block_duration_minutes');
    }
    set blockDurationMinutes(value) {
        this._blockDurationMinutes = value;
    }
    resetBlockDurationMinutes() {
        this._blockDurationMinutes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get blockDurationMinutesInput() {
        return this._blockDurationMinutes;
    }
    get cpuCoreCount() {
        return this.getNumberAttribute('cpu_core_count');
    }
    set cpuCoreCount(value) {
        this._cpuCoreCount = value;
    }
    resetCpuCoreCount() {
        this._cpuCoreCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cpuCoreCountInput() {
        return this._cpuCoreCount;
    }
    get cpuThreadsPerCore() {
        return this.getNumberAttribute('cpu_threads_per_core');
    }
    set cpuThreadsPerCore(value) {
        this._cpuThreadsPerCore = value;
    }
    resetCpuThreadsPerCore() {
        this._cpuThreadsPerCore = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cpuThreadsPerCoreInput() {
        return this._cpuThreadsPerCore;
    }
    get disableApiStop() {
        return this.getBooleanAttribute('disable_api_stop');
    }
    set disableApiStop(value) {
        this._disableApiStop = value;
    }
    resetDisableApiStop() {
        this._disableApiStop = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disableApiStopInput() {
        return this._disableApiStop;
    }
    get disableApiTermination() {
        return this.getBooleanAttribute('disable_api_termination');
    }
    set disableApiTermination(value) {
        this._disableApiTermination = value;
    }
    resetDisableApiTermination() {
        this._disableApiTermination = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disableApiTerminationInput() {
        return this._disableApiTermination;
    }
    get ebsOptimized() {
        return this.getBooleanAttribute('ebs_optimized');
    }
    set ebsOptimized(value) {
        this._ebsOptimized = value;
    }
    resetEbsOptimized() {
        this._ebsOptimized = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ebsOptimizedInput() {
        return this._ebsOptimized;
    }
    get fetchPasswordData() {
        return this.getBooleanAttribute('get_password_data');
    }
    set fetchPasswordData(value) {
        this._getPasswordData = value;
    }
    resetFetchPasswordData() {
        this._getPasswordData = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fetchPasswordDataInput() {
        return this._getPasswordData;
    }
    get hibernation() {
        return this.getBooleanAttribute('hibernation');
    }
    set hibernation(value) {
        this._hibernation = value;
    }
    resetHibernation() {
        this._hibernation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hibernationInput() {
        return this._hibernation;
    }
    get hostId() {
        return this.getStringAttribute('host_id');
    }
    set hostId(value) {
        this._hostId = value;
    }
    resetHostId() {
        this._hostId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostIdInput() {
        return this._hostId;
    }
    get hostResourceGroupArn() {
        return this.getStringAttribute('host_resource_group_arn');
    }
    set hostResourceGroupArn(value) {
        this._hostResourceGroupArn = value;
    }
    resetHostResourceGroupArn() {
        this._hostResourceGroupArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostResourceGroupArnInput() {
        return this._hostResourceGroupArn;
    }
    get iamInstanceProfile() {
        return this.getStringAttribute('iam_instance_profile');
    }
    set iamInstanceProfile(value) {
        this._iamInstanceProfile = value;
    }
    resetIamInstanceProfile() {
        this._iamInstanceProfile = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get iamInstanceProfileInput() {
        return this._iamInstanceProfile;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get instanceInitiatedShutdownBehavior() {
        return this.getStringAttribute('instance_initiated_shutdown_behavior');
    }
    set instanceInitiatedShutdownBehavior(value) {
        this._instanceInitiatedShutdownBehavior = value;
    }
    resetInstanceInitiatedShutdownBehavior() {
        this._instanceInitiatedShutdownBehavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceInitiatedShutdownBehaviorInput() {
        return this._instanceInitiatedShutdownBehavior;
    }
    get instanceInterruptionBehavior() {
        return this.getStringAttribute('instance_interruption_behavior');
    }
    set instanceInterruptionBehavior(value) {
        this._instanceInterruptionBehavior = value;
    }
    resetInstanceInterruptionBehavior() {
        this._instanceInterruptionBehavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceInterruptionBehaviorInput() {
        return this._instanceInterruptionBehavior;
    }
    // instance_state - computed: true, optional: false, required: false
    get instanceState() {
        return this.getStringAttribute('instance_state');
    }
    get instanceType() {
        return this.getStringAttribute('instance_type');
    }
    set instanceType(value) {
        this._instanceType = value;
    }
    resetInstanceType() {
        this._instanceType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceTypeInput() {
        return this._instanceType;
    }
    get ipv6AddressCount() {
        return this.getNumberAttribute('ipv6_address_count');
    }
    set ipv6AddressCount(value) {
        this._ipv6AddressCount = value;
    }
    resetIpv6AddressCount() {
        this._ipv6AddressCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipv6AddressCountInput() {
        return this._ipv6AddressCount;
    }
    get ipv6Addresses() {
        return this.getListAttribute('ipv6_addresses');
    }
    set ipv6Addresses(value) {
        this._ipv6Addresses = value;
    }
    resetIpv6Addresses() {
        this._ipv6Addresses = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipv6AddressesInput() {
        return this._ipv6Addresses;
    }
    get keyName() {
        return this.getStringAttribute('key_name');
    }
    set keyName(value) {
        this._keyName = value;
    }
    resetKeyName() {
        this._keyName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyNameInput() {
        return this._keyName;
    }
    get launchGroup() {
        return this.getStringAttribute('launch_group');
    }
    set launchGroup(value) {
        this._launchGroup = value;
    }
    resetLaunchGroup() {
        this._launchGroup = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get launchGroupInput() {
        return this._launchGroup;
    }
    get monitoring() {
        return this.getBooleanAttribute('monitoring');
    }
    set monitoring(value) {
        this._monitoring = value;
    }
    resetMonitoring() {
        this._monitoring = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get monitoringInput() {
        return this._monitoring;
    }
    // outpost_arn - computed: true, optional: false, required: false
    get outpostArn() {
        return this.getStringAttribute('outpost_arn');
    }
    // password_data - computed: true, optional: false, required: false
    get passwordData() {
        return this.getStringAttribute('password_data');
    }
    get placementGroup() {
        return this.getStringAttribute('placement_group');
    }
    set placementGroup(value) {
        this._placementGroup = value;
    }
    resetPlacementGroup() {
        this._placementGroup = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get placementGroupInput() {
        return this._placementGroup;
    }
    get placementPartitionNumber() {
        return this.getNumberAttribute('placement_partition_number');
    }
    set placementPartitionNumber(value) {
        this._placementPartitionNumber = value;
    }
    resetPlacementPartitionNumber() {
        this._placementPartitionNumber = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get placementPartitionNumberInput() {
        return this._placementPartitionNumber;
    }
    // primary_network_interface_id - computed: true, optional: false, required: false
    get primaryNetworkInterfaceId() {
        return this.getStringAttribute('primary_network_interface_id');
    }
    // private_dns - computed: true, optional: false, required: false
    get privateDns() {
        return this.getStringAttribute('private_dns');
    }
    get privateIp() {
        return this.getStringAttribute('private_ip');
    }
    set privateIp(value) {
        this._privateIp = value;
    }
    resetPrivateIp() {
        this._privateIp = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get privateIpInput() {
        return this._privateIp;
    }
    // public_dns - computed: true, optional: false, required: false
    get publicDns() {
        return this.getStringAttribute('public_dns');
    }
    // public_ip - computed: true, optional: false, required: false
    get publicIp() {
        return this.getStringAttribute('public_ip');
    }
    get secondaryPrivateIps() {
        return cdktf.Fn.tolist(this.getListAttribute('secondary_private_ips'));
    }
    set secondaryPrivateIps(value) {
        this._secondaryPrivateIps = value;
    }
    resetSecondaryPrivateIps() {
        this._secondaryPrivateIps = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secondaryPrivateIpsInput() {
        return this._secondaryPrivateIps;
    }
    get securityGroups() {
        return cdktf.Fn.tolist(this.getListAttribute('security_groups'));
    }
    set securityGroups(value) {
        this._securityGroups = value;
    }
    resetSecurityGroups() {
        this._securityGroups = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityGroupsInput() {
        return this._securityGroups;
    }
    get sourceDestCheck() {
        return this.getBooleanAttribute('source_dest_check');
    }
    set sourceDestCheck(value) {
        this._sourceDestCheck = value;
    }
    resetSourceDestCheck() {
        this._sourceDestCheck = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourceDestCheckInput() {
        return this._sourceDestCheck;
    }
    // spot_bid_status - computed: true, optional: false, required: false
    get spotBidStatus() {
        return this.getStringAttribute('spot_bid_status');
    }
    // spot_instance_id - computed: true, optional: false, required: false
    get spotInstanceId() {
        return this.getStringAttribute('spot_instance_id');
    }
    get spotPrice() {
        return this.getStringAttribute('spot_price');
    }
    set spotPrice(value) {
        this._spotPrice = value;
    }
    resetSpotPrice() {
        this._spotPrice = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get spotPriceInput() {
        return this._spotPrice;
    }
    // spot_request_state - computed: true, optional: false, required: false
    get spotRequestState() {
        return this.getStringAttribute('spot_request_state');
    }
    get spotType() {
        return this.getStringAttribute('spot_type');
    }
    set spotType(value) {
        this._spotType = value;
    }
    resetSpotType() {
        this._spotType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get spotTypeInput() {
        return this._spotType;
    }
    get subnetId() {
        return this.getStringAttribute('subnet_id');
    }
    set subnetId(value) {
        this._subnetId = value;
    }
    resetSubnetId() {
        this._subnetId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subnetIdInput() {
        return this._subnetId;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get tenancy() {
        return this.getStringAttribute('tenancy');
    }
    set tenancy(value) {
        this._tenancy = value;
    }
    resetTenancy() {
        this._tenancy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tenancyInput() {
        return this._tenancy;
    }
    get userData() {
        return this.getStringAttribute('user_data');
    }
    set userData(value) {
        this._userData = value;
    }
    resetUserData() {
        this._userData = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userDataInput() {
        return this._userData;
    }
    get userDataBase64() {
        return this.getStringAttribute('user_data_base64');
    }
    set userDataBase64(value) {
        this._userDataBase64 = value;
    }
    resetUserDataBase64() {
        this._userDataBase64 = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userDataBase64Input() {
        return this._userDataBase64;
    }
    get userDataReplaceOnChange() {
        return this.getBooleanAttribute('user_data_replace_on_change');
    }
    set userDataReplaceOnChange(value) {
        this._userDataReplaceOnChange = value;
    }
    resetUserDataReplaceOnChange() {
        this._userDataReplaceOnChange = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userDataReplaceOnChangeInput() {
        return this._userDataReplaceOnChange;
    }
    get validFrom() {
        return this.getStringAttribute('valid_from');
    }
    set validFrom(value) {
        this._validFrom = value;
    }
    resetValidFrom() {
        this._validFrom = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get validFromInput() {
        return this._validFrom;
    }
    get validUntil() {
        return this.getStringAttribute('valid_until');
    }
    set validUntil(value) {
        this._validUntil = value;
    }
    resetValidUntil() {
        this._validUntil = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get validUntilInput() {
        return this._validUntil;
    }
    get volumeTags() {
        return this.getStringMapAttribute('volume_tags');
    }
    set volumeTags(value) {
        this._volumeTags = value;
    }
    resetVolumeTags() {
        this._volumeTags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get volumeTagsInput() {
        return this._volumeTags;
    }
    get vpcSecurityGroupIds() {
        return cdktf.Fn.tolist(this.getListAttribute('vpc_security_group_ids'));
    }
    set vpcSecurityGroupIds(value) {
        this._vpcSecurityGroupIds = value;
    }
    resetVpcSecurityGroupIds() {
        this._vpcSecurityGroupIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vpcSecurityGroupIdsInput() {
        return this._vpcSecurityGroupIds;
    }
    get waitForFulfillment() {
        return this.getBooleanAttribute('wait_for_fulfillment');
    }
    set waitForFulfillment(value) {
        this._waitForFulfillment = value;
    }
    resetWaitForFulfillment() {
        this._waitForFulfillment = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get waitForFulfillmentInput() {
        return this._waitForFulfillment;
    }
    get capacityReservationSpecification() {
        return this._capacityReservationSpecification;
    }
    putCapacityReservationSpecification(value) {
        this._capacityReservationSpecification.internalValue = value;
    }
    resetCapacityReservationSpecification() {
        this._capacityReservationSpecification.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get capacityReservationSpecificationInput() {
        return this._capacityReservationSpecification.internalValue;
    }
    get cpuOptions() {
        return this._cpuOptions;
    }
    putCpuOptions(value) {
        this._cpuOptions.internalValue = value;
    }
    resetCpuOptions() {
        this._cpuOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cpuOptionsInput() {
        return this._cpuOptions.internalValue;
    }
    get creditSpecification() {
        return this._creditSpecification;
    }
    putCreditSpecification(value) {
        this._creditSpecification.internalValue = value;
    }
    resetCreditSpecification() {
        this._creditSpecification.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get creditSpecificationInput() {
        return this._creditSpecification.internalValue;
    }
    get ebsBlockDevice() {
        return this._ebsBlockDevice;
    }
    putEbsBlockDevice(value) {
        this._ebsBlockDevice.internalValue = value;
    }
    resetEbsBlockDevice() {
        this._ebsBlockDevice.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ebsBlockDeviceInput() {
        return this._ebsBlockDevice.internalValue;
    }
    get enclaveOptions() {
        return this._enclaveOptions;
    }
    putEnclaveOptions(value) {
        this._enclaveOptions.internalValue = value;
    }
    resetEnclaveOptions() {
        this._enclaveOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enclaveOptionsInput() {
        return this._enclaveOptions.internalValue;
    }
    get ephemeralBlockDevice() {
        return this._ephemeralBlockDevice;
    }
    putEphemeralBlockDevice(value) {
        this._ephemeralBlockDevice.internalValue = value;
    }
    resetEphemeralBlockDevice() {
        this._ephemeralBlockDevice.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ephemeralBlockDeviceInput() {
        return this._ephemeralBlockDevice.internalValue;
    }
    get launchTemplate() {
        return this._launchTemplate;
    }
    putLaunchTemplate(value) {
        this._launchTemplate.internalValue = value;
    }
    resetLaunchTemplate() {
        this._launchTemplate.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get launchTemplateInput() {
        return this._launchTemplate.internalValue;
    }
    get maintenanceOptions() {
        return this._maintenanceOptions;
    }
    putMaintenanceOptions(value) {
        this._maintenanceOptions.internalValue = value;
    }
    resetMaintenanceOptions() {
        this._maintenanceOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maintenanceOptionsInput() {
        return this._maintenanceOptions.internalValue;
    }
    get metadataOptions() {
        return this._metadataOptions;
    }
    putMetadataOptions(value) {
        this._metadataOptions.internalValue = value;
    }
    resetMetadataOptions() {
        this._metadataOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metadataOptionsInput() {
        return this._metadataOptions.internalValue;
    }
    get networkInterface() {
        return this._networkInterface;
    }
    putNetworkInterface(value) {
        this._networkInterface.internalValue = value;
    }
    resetNetworkInterface() {
        this._networkInterface.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkInterfaceInput() {
        return this._networkInterface.internalValue;
    }
    get privateDnsNameOptions() {
        return this._privateDnsNameOptions;
    }
    putPrivateDnsNameOptions(value) {
        this._privateDnsNameOptions.internalValue = value;
    }
    resetPrivateDnsNameOptions() {
        this._privateDnsNameOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get privateDnsNameOptionsInput() {
        return this._privateDnsNameOptions.internalValue;
    }
    get rootBlockDevice() {
        return this._rootBlockDevice;
    }
    putRootBlockDevice(value) {
        this._rootBlockDevice.internalValue = value;
    }
    resetRootBlockDevice() {
        this._rootBlockDevice.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rootBlockDeviceInput() {
        return this._rootBlockDevice.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            ami: cdktf.stringToTerraform(this._ami),
            associate_public_ip_address: cdktf.booleanToTerraform(this._associatePublicIpAddress),
            availability_zone: cdktf.stringToTerraform(this._availabilityZone),
            block_duration_minutes: cdktf.numberToTerraform(this._blockDurationMinutes),
            cpu_core_count: cdktf.numberToTerraform(this._cpuCoreCount),
            cpu_threads_per_core: cdktf.numberToTerraform(this._cpuThreadsPerCore),
            disable_api_stop: cdktf.booleanToTerraform(this._disableApiStop),
            disable_api_termination: cdktf.booleanToTerraform(this._disableApiTermination),
            ebs_optimized: cdktf.booleanToTerraform(this._ebsOptimized),
            get_password_data: cdktf.booleanToTerraform(this._getPasswordData),
            hibernation: cdktf.booleanToTerraform(this._hibernation),
            host_id: cdktf.stringToTerraform(this._hostId),
            host_resource_group_arn: cdktf.stringToTerraform(this._hostResourceGroupArn),
            iam_instance_profile: cdktf.stringToTerraform(this._iamInstanceProfile),
            id: cdktf.stringToTerraform(this._id),
            instance_initiated_shutdown_behavior: cdktf.stringToTerraform(this._instanceInitiatedShutdownBehavior),
            instance_interruption_behavior: cdktf.stringToTerraform(this._instanceInterruptionBehavior),
            instance_type: cdktf.stringToTerraform(this._instanceType),
            ipv6_address_count: cdktf.numberToTerraform(this._ipv6AddressCount),
            ipv6_addresses: cdktf.listMapper(cdktf.stringToTerraform, false)(this._ipv6Addresses),
            key_name: cdktf.stringToTerraform(this._keyName),
            launch_group: cdktf.stringToTerraform(this._launchGroup),
            monitoring: cdktf.booleanToTerraform(this._monitoring),
            placement_group: cdktf.stringToTerraform(this._placementGroup),
            placement_partition_number: cdktf.numberToTerraform(this._placementPartitionNumber),
            private_ip: cdktf.stringToTerraform(this._privateIp),
            secondary_private_ips: cdktf.listMapper(cdktf.stringToTerraform, false)(this._secondaryPrivateIps),
            security_groups: cdktf.listMapper(cdktf.stringToTerraform, false)(this._securityGroups),
            source_dest_check: cdktf.booleanToTerraform(this._sourceDestCheck),
            spot_price: cdktf.stringToTerraform(this._spotPrice),
            spot_type: cdktf.stringToTerraform(this._spotType),
            subnet_id: cdktf.stringToTerraform(this._subnetId),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            tenancy: cdktf.stringToTerraform(this._tenancy),
            user_data: cdktf.stringToTerraform(this._userData),
            user_data_base64: cdktf.stringToTerraform(this._userDataBase64),
            user_data_replace_on_change: cdktf.booleanToTerraform(this._userDataReplaceOnChange),
            valid_from: cdktf.stringToTerraform(this._validFrom),
            valid_until: cdktf.stringToTerraform(this._validUntil),
            volume_tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._volumeTags),
            vpc_security_group_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(this._vpcSecurityGroupIds),
            wait_for_fulfillment: cdktf.booleanToTerraform(this._waitForFulfillment),
            capacity_reservation_specification: spotInstanceRequestCapacityReservationSpecificationToTerraform(this._capacityReservationSpecification.internalValue),
            cpu_options: spotInstanceRequestCpuOptionsToTerraform(this._cpuOptions.internalValue),
            credit_specification: spotInstanceRequestCreditSpecificationToTerraform(this._creditSpecification.internalValue),
            ebs_block_device: cdktf.listMapper(spotInstanceRequestEbsBlockDeviceToTerraform, true)(this._ebsBlockDevice.internalValue),
            enclave_options: spotInstanceRequestEnclaveOptionsToTerraform(this._enclaveOptions.internalValue),
            ephemeral_block_device: cdktf.listMapper(spotInstanceRequestEphemeralBlockDeviceToTerraform, true)(this._ephemeralBlockDevice.internalValue),
            launch_template: spotInstanceRequestLaunchTemplateToTerraform(this._launchTemplate.internalValue),
            maintenance_options: spotInstanceRequestMaintenanceOptionsToTerraform(this._maintenanceOptions.internalValue),
            metadata_options: spotInstanceRequestMetadataOptionsToTerraform(this._metadataOptions.internalValue),
            network_interface: cdktf.listMapper(spotInstanceRequestNetworkInterfaceToTerraform, true)(this._networkInterface.internalValue),
            private_dns_name_options: spotInstanceRequestPrivateDnsNameOptionsToTerraform(this._privateDnsNameOptions.internalValue),
            root_block_device: spotInstanceRequestRootBlockDeviceToTerraform(this._rootBlockDevice.internalValue),
            timeouts: spotInstanceRequestTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            ami: {
                value: cdktf.stringToHclTerraform(this._ami),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            associate_public_ip_address: {
                value: cdktf.booleanToHclTerraform(this._associatePublicIpAddress),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            availability_zone: {
                value: cdktf.stringToHclTerraform(this._availabilityZone),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            block_duration_minutes: {
                value: cdktf.numberToHclTerraform(this._blockDurationMinutes),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            cpu_core_count: {
                value: cdktf.numberToHclTerraform(this._cpuCoreCount),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            cpu_threads_per_core: {
                value: cdktf.numberToHclTerraform(this._cpuThreadsPerCore),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            disable_api_stop: {
                value: cdktf.booleanToHclTerraform(this._disableApiStop),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            disable_api_termination: {
                value: cdktf.booleanToHclTerraform(this._disableApiTermination),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            ebs_optimized: {
                value: cdktf.booleanToHclTerraform(this._ebsOptimized),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            get_password_data: {
                value: cdktf.booleanToHclTerraform(this._getPasswordData),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            hibernation: {
                value: cdktf.booleanToHclTerraform(this._hibernation),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            host_id: {
                value: cdktf.stringToHclTerraform(this._hostId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            host_resource_group_arn: {
                value: cdktf.stringToHclTerraform(this._hostResourceGroupArn),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            iam_instance_profile: {
                value: cdktf.stringToHclTerraform(this._iamInstanceProfile),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            instance_initiated_shutdown_behavior: {
                value: cdktf.stringToHclTerraform(this._instanceInitiatedShutdownBehavior),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            instance_interruption_behavior: {
                value: cdktf.stringToHclTerraform(this._instanceInterruptionBehavior),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            instance_type: {
                value: cdktf.stringToHclTerraform(this._instanceType),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            ipv6_address_count: {
                value: cdktf.numberToHclTerraform(this._ipv6AddressCount),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            ipv6_addresses: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._ipv6Addresses),
                isBlock: false,
                type: "list",
                storageClassType: "stringList",
            },
            key_name: {
                value: cdktf.stringToHclTerraform(this._keyName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            launch_group: {
                value: cdktf.stringToHclTerraform(this._launchGroup),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            monitoring: {
                value: cdktf.booleanToHclTerraform(this._monitoring),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            placement_group: {
                value: cdktf.stringToHclTerraform(this._placementGroup),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            placement_partition_number: {
                value: cdktf.numberToHclTerraform(this._placementPartitionNumber),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            private_ip: {
                value: cdktf.stringToHclTerraform(this._privateIp),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            secondary_private_ips: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._secondaryPrivateIps),
                isBlock: false,
                type: "set",
                storageClassType: "stringList",
            },
            security_groups: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._securityGroups),
                isBlock: false,
                type: "set",
                storageClassType: "stringList",
            },
            source_dest_check: {
                value: cdktf.booleanToHclTerraform(this._sourceDestCheck),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            spot_price: {
                value: cdktf.stringToHclTerraform(this._spotPrice),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            spot_type: {
                value: cdktf.stringToHclTerraform(this._spotType),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            subnet_id: {
                value: cdktf.stringToHclTerraform(this._subnetId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            tags: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tags),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            tags_all: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tagsAll),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            tenancy: {
                value: cdktf.stringToHclTerraform(this._tenancy),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            user_data: {
                value: cdktf.stringToHclTerraform(this._userData),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            user_data_base64: {
                value: cdktf.stringToHclTerraform(this._userDataBase64),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            user_data_replace_on_change: {
                value: cdktf.booleanToHclTerraform(this._userDataReplaceOnChange),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            valid_from: {
                value: cdktf.stringToHclTerraform(this._validFrom),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            valid_until: {
                value: cdktf.stringToHclTerraform(this._validUntil),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            volume_tags: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._volumeTags),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            vpc_security_group_ids: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._vpcSecurityGroupIds),
                isBlock: false,
                type: "set",
                storageClassType: "stringList",
            },
            wait_for_fulfillment: {
                value: cdktf.booleanToHclTerraform(this._waitForFulfillment),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            capacity_reservation_specification: {
                value: spotInstanceRequestCapacityReservationSpecificationToHclTerraform(this._capacityReservationSpecification.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "SpotInstanceRequestCapacityReservationSpecificationList",
            },
            cpu_options: {
                value: spotInstanceRequestCpuOptionsToHclTerraform(this._cpuOptions.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "SpotInstanceRequestCpuOptionsList",
            },
            credit_specification: {
                value: spotInstanceRequestCreditSpecificationToHclTerraform(this._creditSpecification.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "SpotInstanceRequestCreditSpecificationList",
            },
            ebs_block_device: {
                value: cdktf.listMapperHcl(spotInstanceRequestEbsBlockDeviceToHclTerraform, true)(this._ebsBlockDevice.internalValue),
                isBlock: true,
                type: "set",
                storageClassType: "SpotInstanceRequestEbsBlockDeviceList",
            },
            enclave_options: {
                value: spotInstanceRequestEnclaveOptionsToHclTerraform(this._enclaveOptions.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "SpotInstanceRequestEnclaveOptionsList",
            },
            ephemeral_block_device: {
                value: cdktf.listMapperHcl(spotInstanceRequestEphemeralBlockDeviceToHclTerraform, true)(this._ephemeralBlockDevice.internalValue),
                isBlock: true,
                type: "set",
                storageClassType: "SpotInstanceRequestEphemeralBlockDeviceList",
            },
            launch_template: {
                value: spotInstanceRequestLaunchTemplateToHclTerraform(this._launchTemplate.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "SpotInstanceRequestLaunchTemplateList",
            },
            maintenance_options: {
                value: spotInstanceRequestMaintenanceOptionsToHclTerraform(this._maintenanceOptions.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "SpotInstanceRequestMaintenanceOptionsList",
            },
            metadata_options: {
                value: spotInstanceRequestMetadataOptionsToHclTerraform(this._metadataOptions.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "SpotInstanceRequestMetadataOptionsList",
            },
            network_interface: {
                value: cdktf.listMapperHcl(spotInstanceRequestNetworkInterfaceToHclTerraform, true)(this._networkInterface.internalValue),
                isBlock: true,
                type: "set",
                storageClassType: "SpotInstanceRequestNetworkInterfaceList",
            },
            private_dns_name_options: {
                value: spotInstanceRequestPrivateDnsNameOptionsToHclTerraform(this._privateDnsNameOptions.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "SpotInstanceRequestPrivateDnsNameOptionsList",
            },
            root_block_device: {
                value: spotInstanceRequestRootBlockDeviceToHclTerraform(this._rootBlockDevice.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "SpotInstanceRequestRootBlockDeviceList",
            },
            timeouts: {
                value: spotInstanceRequestTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "SpotInstanceRequestTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.SpotInstanceRequest = SpotInstanceRequest;
_t = JSII_RTTI_SYMBOL_1;
SpotInstanceRequest[_t] = { fqn: "@cdktf/provider-aws.spotInstanceRequest.SpotInstanceRequest", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
SpotInstanceRequest.tfResourceType = "aws_spot_instance_request";
//# sourceMappingURL=data:application/json;base64,