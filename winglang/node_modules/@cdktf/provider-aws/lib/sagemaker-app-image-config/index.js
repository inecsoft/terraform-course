"use strict";
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SagemakerAppImageConfig = exports.SagemakerAppImageConfigKernelGatewayImageConfigOutputReference = exports.sagemakerAppImageConfigKernelGatewayImageConfigToHclTerraform = exports.sagemakerAppImageConfigKernelGatewayImageConfigToTerraform = exports.SagemakerAppImageConfigKernelGatewayImageConfigKernelSpecOutputReference = exports.sagemakerAppImageConfigKernelGatewayImageConfigKernelSpecToHclTerraform = exports.sagemakerAppImageConfigKernelGatewayImageConfigKernelSpecToTerraform = exports.SagemakerAppImageConfigKernelGatewayImageConfigFileSystemConfigOutputReference = exports.sagemakerAppImageConfigKernelGatewayImageConfigFileSystemConfigToHclTerraform = exports.sagemakerAppImageConfigKernelGatewayImageConfigFileSystemConfigToTerraform = exports.SagemakerAppImageConfigJupyterLabImageConfigOutputReference = exports.sagemakerAppImageConfigJupyterLabImageConfigToHclTerraform = exports.sagemakerAppImageConfigJupyterLabImageConfigToTerraform = exports.SagemakerAppImageConfigJupyterLabImageConfigContainerConfigOutputReference = exports.sagemakerAppImageConfigJupyterLabImageConfigContainerConfigToHclTerraform = exports.sagemakerAppImageConfigJupyterLabImageConfigContainerConfigToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function sagemakerAppImageConfigJupyterLabImageConfigContainerConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        container_arguments: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.containerArguments),
        container_entrypoint: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.containerEntrypoint),
        container_environment_variables: cdktf.hashMapper(cdktf.stringToTerraform)(struct.containerEnvironmentVariables),
    };
}
exports.sagemakerAppImageConfigJupyterLabImageConfigContainerConfigToTerraform = sagemakerAppImageConfigJupyterLabImageConfigContainerConfigToTerraform;
function sagemakerAppImageConfigJupyterLabImageConfigContainerConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        container_arguments: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.containerArguments),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        container_entrypoint: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.containerEntrypoint),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        container_environment_variables: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.containerEnvironmentVariables),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerAppImageConfigJupyterLabImageConfigContainerConfigToHclTerraform = sagemakerAppImageConfigJupyterLabImageConfigContainerConfigToHclTerraform;
class SagemakerAppImageConfigJupyterLabImageConfigContainerConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._containerArguments !== undefined) {
            hasAnyValues = true;
            internalValueResult.containerArguments = this._containerArguments;
        }
        if (this._containerEntrypoint !== undefined) {
            hasAnyValues = true;
            internalValueResult.containerEntrypoint = this._containerEntrypoint;
        }
        if (this._containerEnvironmentVariables !== undefined) {
            hasAnyValues = true;
            internalValueResult.containerEnvironmentVariables = this._containerEnvironmentVariables;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._containerArguments = undefined;
            this._containerEntrypoint = undefined;
            this._containerEnvironmentVariables = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._containerArguments = value.containerArguments;
            this._containerEntrypoint = value.containerEntrypoint;
            this._containerEnvironmentVariables = value.containerEnvironmentVariables;
        }
    }
    get containerArguments() {
        return this.getListAttribute('container_arguments');
    }
    set containerArguments(value) {
        this._containerArguments = value;
    }
    resetContainerArguments() {
        this._containerArguments = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get containerArgumentsInput() {
        return this._containerArguments;
    }
    get containerEntrypoint() {
        return this.getListAttribute('container_entrypoint');
    }
    set containerEntrypoint(value) {
        this._containerEntrypoint = value;
    }
    resetContainerEntrypoint() {
        this._containerEntrypoint = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get containerEntrypointInput() {
        return this._containerEntrypoint;
    }
    get containerEnvironmentVariables() {
        return this.getStringMapAttribute('container_environment_variables');
    }
    set containerEnvironmentVariables(value) {
        this._containerEnvironmentVariables = value;
    }
    resetContainerEnvironmentVariables() {
        this._containerEnvironmentVariables = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get containerEnvironmentVariablesInput() {
        return this._containerEnvironmentVariables;
    }
}
exports.SagemakerAppImageConfigJupyterLabImageConfigContainerConfigOutputReference = SagemakerAppImageConfigJupyterLabImageConfigContainerConfigOutputReference;
_a = JSII_RTTI_SYMBOL_1;
SagemakerAppImageConfigJupyterLabImageConfigContainerConfigOutputReference[_a] = { fqn: "@cdktf/provider-aws.sagemakerAppImageConfig.SagemakerAppImageConfigJupyterLabImageConfigContainerConfigOutputReference", version: "19.15.0" };
function sagemakerAppImageConfigJupyterLabImageConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        container_config: sagemakerAppImageConfigJupyterLabImageConfigContainerConfigToTerraform(struct.containerConfig),
    };
}
exports.sagemakerAppImageConfigJupyterLabImageConfigToTerraform = sagemakerAppImageConfigJupyterLabImageConfigToTerraform;
function sagemakerAppImageConfigJupyterLabImageConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        container_config: {
            value: sagemakerAppImageConfigJupyterLabImageConfigContainerConfigToHclTerraform(struct.containerConfig),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerAppImageConfigJupyterLabImageConfigContainerConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerAppImageConfigJupyterLabImageConfigToHclTerraform = sagemakerAppImageConfigJupyterLabImageConfigToHclTerraform;
class SagemakerAppImageConfigJupyterLabImageConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // container_config - computed: false, optional: true, required: false
        this._containerConfig = new SagemakerAppImageConfigJupyterLabImageConfigContainerConfigOutputReference(this, "container_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._containerConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.containerConfig = this._containerConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._containerConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._containerConfig.internalValue = value.containerConfig;
        }
    }
    get containerConfig() {
        return this._containerConfig;
    }
    putContainerConfig(value) {
        this._containerConfig.internalValue = value;
    }
    resetContainerConfig() {
        this._containerConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get containerConfigInput() {
        return this._containerConfig.internalValue;
    }
}
exports.SagemakerAppImageConfigJupyterLabImageConfigOutputReference = SagemakerAppImageConfigJupyterLabImageConfigOutputReference;
_b = JSII_RTTI_SYMBOL_1;
SagemakerAppImageConfigJupyterLabImageConfigOutputReference[_b] = { fqn: "@cdktf/provider-aws.sagemakerAppImageConfig.SagemakerAppImageConfigJupyterLabImageConfigOutputReference", version: "19.15.0" };
function sagemakerAppImageConfigKernelGatewayImageConfigFileSystemConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        default_gid: cdktf.numberToTerraform(struct.defaultGid),
        default_uid: cdktf.numberToTerraform(struct.defaultUid),
        mount_path: cdktf.stringToTerraform(struct.mountPath),
    };
}
exports.sagemakerAppImageConfigKernelGatewayImageConfigFileSystemConfigToTerraform = sagemakerAppImageConfigKernelGatewayImageConfigFileSystemConfigToTerraform;
function sagemakerAppImageConfigKernelGatewayImageConfigFileSystemConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        default_gid: {
            value: cdktf.numberToHclTerraform(struct.defaultGid),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        default_uid: {
            value: cdktf.numberToHclTerraform(struct.defaultUid),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        mount_path: {
            value: cdktf.stringToHclTerraform(struct.mountPath),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerAppImageConfigKernelGatewayImageConfigFileSystemConfigToHclTerraform = sagemakerAppImageConfigKernelGatewayImageConfigFileSystemConfigToHclTerraform;
class SagemakerAppImageConfigKernelGatewayImageConfigFileSystemConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._defaultGid !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultGid = this._defaultGid;
        }
        if (this._defaultUid !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultUid = this._defaultUid;
        }
        if (this._mountPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.mountPath = this._mountPath;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._defaultGid = undefined;
            this._defaultUid = undefined;
            this._mountPath = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._defaultGid = value.defaultGid;
            this._defaultUid = value.defaultUid;
            this._mountPath = value.mountPath;
        }
    }
    get defaultGid() {
        return this.getNumberAttribute('default_gid');
    }
    set defaultGid(value) {
        this._defaultGid = value;
    }
    resetDefaultGid() {
        this._defaultGid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultGidInput() {
        return this._defaultGid;
    }
    get defaultUid() {
        return this.getNumberAttribute('default_uid');
    }
    set defaultUid(value) {
        this._defaultUid = value;
    }
    resetDefaultUid() {
        this._defaultUid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultUidInput() {
        return this._defaultUid;
    }
    get mountPath() {
        return this.getStringAttribute('mount_path');
    }
    set mountPath(value) {
        this._mountPath = value;
    }
    resetMountPath() {
        this._mountPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mountPathInput() {
        return this._mountPath;
    }
}
exports.SagemakerAppImageConfigKernelGatewayImageConfigFileSystemConfigOutputReference = SagemakerAppImageConfigKernelGatewayImageConfigFileSystemConfigOutputReference;
_c = JSII_RTTI_SYMBOL_1;
SagemakerAppImageConfigKernelGatewayImageConfigFileSystemConfigOutputReference[_c] = { fqn: "@cdktf/provider-aws.sagemakerAppImageConfig.SagemakerAppImageConfigKernelGatewayImageConfigFileSystemConfigOutputReference", version: "19.15.0" };
function sagemakerAppImageConfigKernelGatewayImageConfigKernelSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        display_name: cdktf.stringToTerraform(struct.displayName),
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.sagemakerAppImageConfigKernelGatewayImageConfigKernelSpecToTerraform = sagemakerAppImageConfigKernelGatewayImageConfigKernelSpecToTerraform;
function sagemakerAppImageConfigKernelGatewayImageConfigKernelSpecToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        display_name: {
            value: cdktf.stringToHclTerraform(struct.displayName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerAppImageConfigKernelGatewayImageConfigKernelSpecToHclTerraform = sagemakerAppImageConfigKernelGatewayImageConfigKernelSpecToHclTerraform;
class SagemakerAppImageConfigKernelGatewayImageConfigKernelSpecOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._displayName !== undefined) {
            hasAnyValues = true;
            internalValueResult.displayName = this._displayName;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._displayName = undefined;
            this._name = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._displayName = value.displayName;
            this._name = value.name;
        }
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    resetDisplayName() {
        this._displayName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
}
exports.SagemakerAppImageConfigKernelGatewayImageConfigKernelSpecOutputReference = SagemakerAppImageConfigKernelGatewayImageConfigKernelSpecOutputReference;
_d = JSII_RTTI_SYMBOL_1;
SagemakerAppImageConfigKernelGatewayImageConfigKernelSpecOutputReference[_d] = { fqn: "@cdktf/provider-aws.sagemakerAppImageConfig.SagemakerAppImageConfigKernelGatewayImageConfigKernelSpecOutputReference", version: "19.15.0" };
function sagemakerAppImageConfigKernelGatewayImageConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        file_system_config: sagemakerAppImageConfigKernelGatewayImageConfigFileSystemConfigToTerraform(struct.fileSystemConfig),
        kernel_spec: sagemakerAppImageConfigKernelGatewayImageConfigKernelSpecToTerraform(struct.kernelSpec),
    };
}
exports.sagemakerAppImageConfigKernelGatewayImageConfigToTerraform = sagemakerAppImageConfigKernelGatewayImageConfigToTerraform;
function sagemakerAppImageConfigKernelGatewayImageConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        file_system_config: {
            value: sagemakerAppImageConfigKernelGatewayImageConfigFileSystemConfigToHclTerraform(struct.fileSystemConfig),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerAppImageConfigKernelGatewayImageConfigFileSystemConfigList",
        },
        kernel_spec: {
            value: sagemakerAppImageConfigKernelGatewayImageConfigKernelSpecToHclTerraform(struct.kernelSpec),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerAppImageConfigKernelGatewayImageConfigKernelSpecList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerAppImageConfigKernelGatewayImageConfigToHclTerraform = sagemakerAppImageConfigKernelGatewayImageConfigToHclTerraform;
class SagemakerAppImageConfigKernelGatewayImageConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // file_system_config - computed: false, optional: true, required: false
        this._fileSystemConfig = new SagemakerAppImageConfigKernelGatewayImageConfigFileSystemConfigOutputReference(this, "file_system_config");
        // kernel_spec - computed: false, optional: false, required: true
        this._kernelSpec = new SagemakerAppImageConfigKernelGatewayImageConfigKernelSpecOutputReference(this, "kernel_spec");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._fileSystemConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileSystemConfig = this._fileSystemConfig?.internalValue;
        }
        if (this._kernelSpec?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.kernelSpec = this._kernelSpec?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._fileSystemConfig.internalValue = undefined;
            this._kernelSpec.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._fileSystemConfig.internalValue = value.fileSystemConfig;
            this._kernelSpec.internalValue = value.kernelSpec;
        }
    }
    get fileSystemConfig() {
        return this._fileSystemConfig;
    }
    putFileSystemConfig(value) {
        this._fileSystemConfig.internalValue = value;
    }
    resetFileSystemConfig() {
        this._fileSystemConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileSystemConfigInput() {
        return this._fileSystemConfig.internalValue;
    }
    get kernelSpec() {
        return this._kernelSpec;
    }
    putKernelSpec(value) {
        this._kernelSpec.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get kernelSpecInput() {
        return this._kernelSpec.internalValue;
    }
}
exports.SagemakerAppImageConfigKernelGatewayImageConfigOutputReference = SagemakerAppImageConfigKernelGatewayImageConfigOutputReference;
_e = JSII_RTTI_SYMBOL_1;
SagemakerAppImageConfigKernelGatewayImageConfigOutputReference[_e] = { fqn: "@cdktf/provider-aws.sagemakerAppImageConfig.SagemakerAppImageConfigKernelGatewayImageConfigOutputReference", version: "19.15.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/sagemaker_app_image_config aws_sagemaker_app_image_config}
*/
class SagemakerAppImageConfig extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a SagemakerAppImageConfig resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the SagemakerAppImageConfig to import
    * @param importFromId The id of the existing SagemakerAppImageConfig that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/sagemaker_app_image_config#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the SagemakerAppImageConfig to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_sagemaker_app_image_config", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/sagemaker_app_image_config aws_sagemaker_app_image_config} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SagemakerAppImageConfigConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_sagemaker_app_image_config',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // jupyter_lab_image_config - computed: false, optional: true, required: false
        this._jupyterLabImageConfig = new SagemakerAppImageConfigJupyterLabImageConfigOutputReference(this, "jupyter_lab_image_config");
        // kernel_gateway_image_config - computed: false, optional: true, required: false
        this._kernelGatewayImageConfig = new SagemakerAppImageConfigKernelGatewayImageConfigOutputReference(this, "kernel_gateway_image_config");
        this._appImageConfigName = config.appImageConfigName;
        this._id = config.id;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._jupyterLabImageConfig.internalValue = config.jupyterLabImageConfig;
        this._kernelGatewayImageConfig.internalValue = config.kernelGatewayImageConfig;
    }
    get appImageConfigName() {
        return this.getStringAttribute('app_image_config_name');
    }
    set appImageConfigName(value) {
        this._appImageConfigName = value;
    }
    // Temporarily expose input value. Use with caution.
    get appImageConfigNameInput() {
        return this._appImageConfigName;
    }
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get jupyterLabImageConfig() {
        return this._jupyterLabImageConfig;
    }
    putJupyterLabImageConfig(value) {
        this._jupyterLabImageConfig.internalValue = value;
    }
    resetJupyterLabImageConfig() {
        this._jupyterLabImageConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jupyterLabImageConfigInput() {
        return this._jupyterLabImageConfig.internalValue;
    }
    get kernelGatewayImageConfig() {
        return this._kernelGatewayImageConfig;
    }
    putKernelGatewayImageConfig(value) {
        this._kernelGatewayImageConfig.internalValue = value;
    }
    resetKernelGatewayImageConfig() {
        this._kernelGatewayImageConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kernelGatewayImageConfigInput() {
        return this._kernelGatewayImageConfig.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            app_image_config_name: cdktf.stringToTerraform(this._appImageConfigName),
            id: cdktf.stringToTerraform(this._id),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            jupyter_lab_image_config: sagemakerAppImageConfigJupyterLabImageConfigToTerraform(this._jupyterLabImageConfig.internalValue),
            kernel_gateway_image_config: sagemakerAppImageConfigKernelGatewayImageConfigToTerraform(this._kernelGatewayImageConfig.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            app_image_config_name: {
                value: cdktf.stringToHclTerraform(this._appImageConfigName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            tags: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tags),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            tags_all: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tagsAll),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            jupyter_lab_image_config: {
                value: sagemakerAppImageConfigJupyterLabImageConfigToHclTerraform(this._jupyterLabImageConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "SagemakerAppImageConfigJupyterLabImageConfigList",
            },
            kernel_gateway_image_config: {
                value: sagemakerAppImageConfigKernelGatewayImageConfigToHclTerraform(this._kernelGatewayImageConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "SagemakerAppImageConfigKernelGatewayImageConfigList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.SagemakerAppImageConfig = SagemakerAppImageConfig;
_f = JSII_RTTI_SYMBOL_1;
SagemakerAppImageConfig[_f] = { fqn: "@cdktf/provider-aws.sagemakerAppImageConfig.SagemakerAppImageConfig", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
SagemakerAppImageConfig.tfResourceType = "aws_sagemaker_app_image_config";
//# sourceMappingURL=data:application/json;base64,