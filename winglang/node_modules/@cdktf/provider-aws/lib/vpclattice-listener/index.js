"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h;
Object.defineProperty(exports, "__esModule", { value: true });
exports.VpclatticeListener = exports.VpclatticeListenerTimeoutsOutputReference = exports.vpclatticeListenerTimeoutsToHclTerraform = exports.vpclatticeListenerTimeoutsToTerraform = exports.VpclatticeListenerDefaultActionOutputReference = exports.vpclatticeListenerDefaultActionToHclTerraform = exports.vpclatticeListenerDefaultActionToTerraform = exports.VpclatticeListenerDefaultActionForwardList = exports.VpclatticeListenerDefaultActionForwardOutputReference = exports.vpclatticeListenerDefaultActionForwardToHclTerraform = exports.vpclatticeListenerDefaultActionForwardToTerraform = exports.VpclatticeListenerDefaultActionForwardTargetGroupsList = exports.VpclatticeListenerDefaultActionForwardTargetGroupsOutputReference = exports.vpclatticeListenerDefaultActionForwardTargetGroupsToHclTerraform = exports.vpclatticeListenerDefaultActionForwardTargetGroupsToTerraform = exports.VpclatticeListenerDefaultActionFixedResponseOutputReference = exports.vpclatticeListenerDefaultActionFixedResponseToHclTerraform = exports.vpclatticeListenerDefaultActionFixedResponseToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function vpclatticeListenerDefaultActionFixedResponseToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        status_code: cdktf.numberToTerraform(struct.statusCode),
    };
}
exports.vpclatticeListenerDefaultActionFixedResponseToTerraform = vpclatticeListenerDefaultActionFixedResponseToTerraform;
function vpclatticeListenerDefaultActionFixedResponseToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        status_code: {
            value: cdktf.numberToHclTerraform(struct.statusCode),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.vpclatticeListenerDefaultActionFixedResponseToHclTerraform = vpclatticeListenerDefaultActionFixedResponseToHclTerraform;
class VpclatticeListenerDefaultActionFixedResponseOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._statusCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.statusCode = this._statusCode;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._statusCode = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._statusCode = value.statusCode;
        }
    }
    get statusCode() {
        return this.getNumberAttribute('status_code');
    }
    set statusCode(value) {
        this._statusCode = value;
    }
    // Temporarily expose input value. Use with caution.
    get statusCodeInput() {
        return this._statusCode;
    }
}
exports.VpclatticeListenerDefaultActionFixedResponseOutputReference = VpclatticeListenerDefaultActionFixedResponseOutputReference;
_a = JSII_RTTI_SYMBOL_1;
VpclatticeListenerDefaultActionFixedResponseOutputReference[_a] = { fqn: "@cdktf/provider-aws.vpclatticeListener.VpclatticeListenerDefaultActionFixedResponseOutputReference", version: "19.15.0" };
function vpclatticeListenerDefaultActionForwardTargetGroupsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        target_group_identifier: cdktf.stringToTerraform(struct.targetGroupIdentifier),
        weight: cdktf.numberToTerraform(struct.weight),
    };
}
exports.vpclatticeListenerDefaultActionForwardTargetGroupsToTerraform = vpclatticeListenerDefaultActionForwardTargetGroupsToTerraform;
function vpclatticeListenerDefaultActionForwardTargetGroupsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        target_group_identifier: {
            value: cdktf.stringToHclTerraform(struct.targetGroupIdentifier),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        weight: {
            value: cdktf.numberToHclTerraform(struct.weight),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.vpclatticeListenerDefaultActionForwardTargetGroupsToHclTerraform = vpclatticeListenerDefaultActionForwardTargetGroupsToHclTerraform;
class VpclatticeListenerDefaultActionForwardTargetGroupsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._targetGroupIdentifier !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetGroupIdentifier = this._targetGroupIdentifier;
        }
        if (this._weight !== undefined) {
            hasAnyValues = true;
            internalValueResult.weight = this._weight;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._targetGroupIdentifier = undefined;
            this._weight = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._targetGroupIdentifier = value.targetGroupIdentifier;
            this._weight = value.weight;
        }
    }
    get targetGroupIdentifier() {
        return this.getStringAttribute('target_group_identifier');
    }
    set targetGroupIdentifier(value) {
        this._targetGroupIdentifier = value;
    }
    resetTargetGroupIdentifier() {
        this._targetGroupIdentifier = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetGroupIdentifierInput() {
        return this._targetGroupIdentifier;
    }
    get weight() {
        return this.getNumberAttribute('weight');
    }
    set weight(value) {
        this._weight = value;
    }
    resetWeight() {
        this._weight = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get weightInput() {
        return this._weight;
    }
}
exports.VpclatticeListenerDefaultActionForwardTargetGroupsOutputReference = VpclatticeListenerDefaultActionForwardTargetGroupsOutputReference;
_b = JSII_RTTI_SYMBOL_1;
VpclatticeListenerDefaultActionForwardTargetGroupsOutputReference[_b] = { fqn: "@cdktf/provider-aws.vpclatticeListener.VpclatticeListenerDefaultActionForwardTargetGroupsOutputReference", version: "19.15.0" };
class VpclatticeListenerDefaultActionForwardTargetGroupsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new VpclatticeListenerDefaultActionForwardTargetGroupsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.VpclatticeListenerDefaultActionForwardTargetGroupsList = VpclatticeListenerDefaultActionForwardTargetGroupsList;
_c = JSII_RTTI_SYMBOL_1;
VpclatticeListenerDefaultActionForwardTargetGroupsList[_c] = { fqn: "@cdktf/provider-aws.vpclatticeListener.VpclatticeListenerDefaultActionForwardTargetGroupsList", version: "19.15.0" };
function vpclatticeListenerDefaultActionForwardToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        target_groups: cdktf.listMapper(vpclatticeListenerDefaultActionForwardTargetGroupsToTerraform, true)(struct.targetGroups),
    };
}
exports.vpclatticeListenerDefaultActionForwardToTerraform = vpclatticeListenerDefaultActionForwardToTerraform;
function vpclatticeListenerDefaultActionForwardToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        target_groups: {
            value: cdktf.listMapperHcl(vpclatticeListenerDefaultActionForwardTargetGroupsToHclTerraform, true)(struct.targetGroups),
            isBlock: true,
            type: "list",
            storageClassType: "VpclatticeListenerDefaultActionForwardTargetGroupsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.vpclatticeListenerDefaultActionForwardToHclTerraform = vpclatticeListenerDefaultActionForwardToHclTerraform;
class VpclatticeListenerDefaultActionForwardOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // target_groups - computed: false, optional: true, required: false
        this._targetGroups = new VpclatticeListenerDefaultActionForwardTargetGroupsList(this, "target_groups", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._targetGroups?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetGroups = this._targetGroups?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._targetGroups.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._targetGroups.internalValue = value.targetGroups;
        }
    }
    get targetGroups() {
        return this._targetGroups;
    }
    putTargetGroups(value) {
        this._targetGroups.internalValue = value;
    }
    resetTargetGroups() {
        this._targetGroups.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetGroupsInput() {
        return this._targetGroups.internalValue;
    }
}
exports.VpclatticeListenerDefaultActionForwardOutputReference = VpclatticeListenerDefaultActionForwardOutputReference;
_d = JSII_RTTI_SYMBOL_1;
VpclatticeListenerDefaultActionForwardOutputReference[_d] = { fqn: "@cdktf/provider-aws.vpclatticeListener.VpclatticeListenerDefaultActionForwardOutputReference", version: "19.15.0" };
class VpclatticeListenerDefaultActionForwardList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new VpclatticeListenerDefaultActionForwardOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.VpclatticeListenerDefaultActionForwardList = VpclatticeListenerDefaultActionForwardList;
_e = JSII_RTTI_SYMBOL_1;
VpclatticeListenerDefaultActionForwardList[_e] = { fqn: "@cdktf/provider-aws.vpclatticeListener.VpclatticeListenerDefaultActionForwardList", version: "19.15.0" };
function vpclatticeListenerDefaultActionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        fixed_response: vpclatticeListenerDefaultActionFixedResponseToTerraform(struct.fixedResponse),
        forward: cdktf.listMapper(vpclatticeListenerDefaultActionForwardToTerraform, true)(struct.forward),
    };
}
exports.vpclatticeListenerDefaultActionToTerraform = vpclatticeListenerDefaultActionToTerraform;
function vpclatticeListenerDefaultActionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        fixed_response: {
            value: vpclatticeListenerDefaultActionFixedResponseToHclTerraform(struct.fixedResponse),
            isBlock: true,
            type: "list",
            storageClassType: "VpclatticeListenerDefaultActionFixedResponseList",
        },
        forward: {
            value: cdktf.listMapperHcl(vpclatticeListenerDefaultActionForwardToHclTerraform, true)(struct.forward),
            isBlock: true,
            type: "list",
            storageClassType: "VpclatticeListenerDefaultActionForwardList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.vpclatticeListenerDefaultActionToHclTerraform = vpclatticeListenerDefaultActionToHclTerraform;
class VpclatticeListenerDefaultActionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // fixed_response - computed: false, optional: true, required: false
        this._fixedResponse = new VpclatticeListenerDefaultActionFixedResponseOutputReference(this, "fixed_response");
        // forward - computed: false, optional: true, required: false
        this._forward = new VpclatticeListenerDefaultActionForwardList(this, "forward", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._fixedResponse?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.fixedResponse = this._fixedResponse?.internalValue;
        }
        if (this._forward?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.forward = this._forward?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._fixedResponse.internalValue = undefined;
            this._forward.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._fixedResponse.internalValue = value.fixedResponse;
            this._forward.internalValue = value.forward;
        }
    }
    get fixedResponse() {
        return this._fixedResponse;
    }
    putFixedResponse(value) {
        this._fixedResponse.internalValue = value;
    }
    resetFixedResponse() {
        this._fixedResponse.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fixedResponseInput() {
        return this._fixedResponse.internalValue;
    }
    get forward() {
        return this._forward;
    }
    putForward(value) {
        this._forward.internalValue = value;
    }
    resetForward() {
        this._forward.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get forwardInput() {
        return this._forward.internalValue;
    }
}
exports.VpclatticeListenerDefaultActionOutputReference = VpclatticeListenerDefaultActionOutputReference;
_f = JSII_RTTI_SYMBOL_1;
VpclatticeListenerDefaultActionOutputReference[_f] = { fqn: "@cdktf/provider-aws.vpclatticeListener.VpclatticeListenerDefaultActionOutputReference", version: "19.15.0" };
function vpclatticeListenerTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.vpclatticeListenerTimeoutsToTerraform = vpclatticeListenerTimeoutsToTerraform;
function vpclatticeListenerTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.vpclatticeListenerTimeoutsToHclTerraform = vpclatticeListenerTimeoutsToHclTerraform;
class VpclatticeListenerTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.VpclatticeListenerTimeoutsOutputReference = VpclatticeListenerTimeoutsOutputReference;
_g = JSII_RTTI_SYMBOL_1;
VpclatticeListenerTimeoutsOutputReference[_g] = { fqn: "@cdktf/provider-aws.vpclatticeListener.VpclatticeListenerTimeoutsOutputReference", version: "19.15.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/vpclattice_listener aws_vpclattice_listener}
*/
class VpclatticeListener extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a VpclatticeListener resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the VpclatticeListener to import
    * @param importFromId The id of the existing VpclatticeListener that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/vpclattice_listener#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the VpclatticeListener to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_vpclattice_listener", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/vpclattice_listener aws_vpclattice_listener} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options VpclatticeListenerConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_vpclattice_listener',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // default_action - computed: false, optional: false, required: true
        this._defaultAction = new VpclatticeListenerDefaultActionOutputReference(this, "default_action");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new VpclatticeListenerTimeoutsOutputReference(this, "timeouts");
        this._id = config.id;
        this._name = config.name;
        this._port = config.port;
        this._protocol = config.protocol;
        this._serviceArn = config.serviceArn;
        this._serviceIdentifier = config.serviceIdentifier;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._defaultAction.internalValue = config.defaultAction;
        this._timeouts.internalValue = config.timeouts;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // created_at - computed: true, optional: false, required: false
    get createdAt() {
        return this.getStringAttribute('created_at');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // last_updated_at - computed: true, optional: false, required: false
    get lastUpdatedAt() {
        return this.getStringAttribute('last_updated_at');
    }
    // listener_id - computed: true, optional: false, required: false
    get listenerId() {
        return this.getStringAttribute('listener_id');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    resetPort() {
        this._port = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
    get protocol() {
        return this.getStringAttribute('protocol');
    }
    set protocol(value) {
        this._protocol = value;
    }
    // Temporarily expose input value. Use with caution.
    get protocolInput() {
        return this._protocol;
    }
    get serviceArn() {
        return this.getStringAttribute('service_arn');
    }
    set serviceArn(value) {
        this._serviceArn = value;
    }
    resetServiceArn() {
        this._serviceArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceArnInput() {
        return this._serviceArn;
    }
    get serviceIdentifier() {
        return this.getStringAttribute('service_identifier');
    }
    set serviceIdentifier(value) {
        this._serviceIdentifier = value;
    }
    resetServiceIdentifier() {
        this._serviceIdentifier = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceIdentifierInput() {
        return this._serviceIdentifier;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get defaultAction() {
        return this._defaultAction;
    }
    putDefaultAction(value) {
        this._defaultAction.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get defaultActionInput() {
        return this._defaultAction.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            port: cdktf.numberToTerraform(this._port),
            protocol: cdktf.stringToTerraform(this._protocol),
            service_arn: cdktf.stringToTerraform(this._serviceArn),
            service_identifier: cdktf.stringToTerraform(this._serviceIdentifier),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            default_action: vpclatticeListenerDefaultActionToTerraform(this._defaultAction.internalValue),
            timeouts: vpclatticeListenerTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            port: {
                value: cdktf.numberToHclTerraform(this._port),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            protocol: {
                value: cdktf.stringToHclTerraform(this._protocol),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            service_arn: {
                value: cdktf.stringToHclTerraform(this._serviceArn),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            service_identifier: {
                value: cdktf.stringToHclTerraform(this._serviceIdentifier),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            tags: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tags),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            tags_all: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tagsAll),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            default_action: {
                value: vpclatticeListenerDefaultActionToHclTerraform(this._defaultAction.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "VpclatticeListenerDefaultActionList",
            },
            timeouts: {
                value: vpclatticeListenerTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "VpclatticeListenerTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.VpclatticeListener = VpclatticeListener;
_h = JSII_RTTI_SYMBOL_1;
VpclatticeListener[_h] = { fqn: "@cdktf/provider-aws.vpclatticeListener.VpclatticeListener", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
VpclatticeListener.tfResourceType = "aws_vpclattice_listener";
//# sourceMappingURL=data:application/json;base64,