"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationTimeoutsOutputReference = exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationTimeoutsToHclTerraform = exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationTimeoutsToTerraform = exports.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationOutputReference = exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationToHclTerraform = exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationToTerraform = exports.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesList = exports.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesOutputReference = exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesToHclTerraform = exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesToTerraform = exports.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesSentimentConfigurationOutputReference = exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesSentimentConfigurationToHclTerraform = exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesSentimentConfigurationToTerraform = exports.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesKeywordMatchConfigurationOutputReference = exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesKeywordMatchConfigurationToHclTerraform = exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesKeywordMatchConfigurationToTerraform = exports.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesIssueDetectionConfigurationOutputReference = exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesIssueDetectionConfigurationToHclTerraform = exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesIssueDetectionConfigurationToTerraform = exports.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsList = exports.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsOutputReference = exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsToHclTerraform = exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsToTerraform = exports.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsVoiceAnalyticsProcessorConfigurationOutputReference = exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsVoiceAnalyticsProcessorConfigurationToHclTerraform = exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsVoiceAnalyticsProcessorConfigurationToTerraform = exports.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsSqsQueueSinkConfigurationOutputReference = exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsSqsQueueSinkConfigurationToHclTerraform = exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsSqsQueueSinkConfigurationToTerraform = exports.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsSnsTopicSinkConfigurationOutputReference = exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsSnsTopicSinkConfigurationToHclTerraform = exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsSnsTopicSinkConfigurationToTerraform = exports.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsS3RecordingSinkConfigurationOutputReference = exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsS3RecordingSinkConfigurationToHclTerraform = exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsS3RecordingSinkConfigurationToTerraform = exports.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsLambdaFunctionSinkConfigurationOutputReference = exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsLambdaFunctionSinkConfigurationToHclTerraform = exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsLambdaFunctionSinkConfigurationToTerraform = exports.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsKinesisDataStreamSinkConfigurationOutputReference = exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsKinesisDataStreamSinkConfigurationToHclTerraform = exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsKinesisDataStreamSinkConfigurationToTerraform = exports.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeProcessorConfigurationOutputReference = exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeProcessorConfigurationToHclTerraform = exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeProcessorConfigurationToTerraform = exports.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeCallAnalyticsProcessorConfigurationOutputReference = exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeCallAnalyticsProcessorConfigurationToHclTerraform = exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeCallAnalyticsProcessorConfigurationToTerraform = exports.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsOutputReference = exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsToHclTerraform = exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsToTerraform = void 0;
exports.ChimesdkmediapipelinesMediaInsightsPipelineConfiguration = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        content_redaction_output: cdktf.stringToTerraform(struct.contentRedactionOutput),
        data_access_role_arn: cdktf.stringToTerraform(struct.dataAccessRoleArn),
        output_encryption_kms_key_id: cdktf.stringToTerraform(struct.outputEncryptionKmsKeyId),
        output_location: cdktf.stringToTerraform(struct.outputLocation),
    };
}
exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsToTerraform = chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsToTerraform;
function chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        content_redaction_output: {
            value: cdktf.stringToHclTerraform(struct.contentRedactionOutput),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        data_access_role_arn: {
            value: cdktf.stringToHclTerraform(struct.dataAccessRoleArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        output_encryption_kms_key_id: {
            value: cdktf.stringToHclTerraform(struct.outputEncryptionKmsKeyId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        output_location: {
            value: cdktf.stringToHclTerraform(struct.outputLocation),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsToHclTerraform = chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsToHclTerraform;
class ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._contentRedactionOutput !== undefined) {
            hasAnyValues = true;
            internalValueResult.contentRedactionOutput = this._contentRedactionOutput;
        }
        if (this._dataAccessRoleArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataAccessRoleArn = this._dataAccessRoleArn;
        }
        if (this._outputEncryptionKmsKeyId !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputEncryptionKmsKeyId = this._outputEncryptionKmsKeyId;
        }
        if (this._outputLocation !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputLocation = this._outputLocation;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._contentRedactionOutput = undefined;
            this._dataAccessRoleArn = undefined;
            this._outputEncryptionKmsKeyId = undefined;
            this._outputLocation = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._contentRedactionOutput = value.contentRedactionOutput;
            this._dataAccessRoleArn = value.dataAccessRoleArn;
            this._outputEncryptionKmsKeyId = value.outputEncryptionKmsKeyId;
            this._outputLocation = value.outputLocation;
        }
    }
    get contentRedactionOutput() {
        return this.getStringAttribute('content_redaction_output');
    }
    set contentRedactionOutput(value) {
        this._contentRedactionOutput = value;
    }
    resetContentRedactionOutput() {
        this._contentRedactionOutput = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get contentRedactionOutputInput() {
        return this._contentRedactionOutput;
    }
    get dataAccessRoleArn() {
        return this.getStringAttribute('data_access_role_arn');
    }
    set dataAccessRoleArn(value) {
        this._dataAccessRoleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get dataAccessRoleArnInput() {
        return this._dataAccessRoleArn;
    }
    get outputEncryptionKmsKeyId() {
        return this.getStringAttribute('output_encryption_kms_key_id');
    }
    set outputEncryptionKmsKeyId(value) {
        this._outputEncryptionKmsKeyId = value;
    }
    resetOutputEncryptionKmsKeyId() {
        this._outputEncryptionKmsKeyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get outputEncryptionKmsKeyIdInput() {
        return this._outputEncryptionKmsKeyId;
    }
    get outputLocation() {
        return this.getStringAttribute('output_location');
    }
    set outputLocation(value) {
        this._outputLocation = value;
    }
    // Temporarily expose input value. Use with caution.
    get outputLocationInput() {
        return this._outputLocation;
    }
}
exports.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsOutputReference = ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsOutputReference[_a] = { fqn: "@cdktf/provider-aws.chimesdkmediapipelinesMediaInsightsPipelineConfiguration.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsOutputReference", version: "19.15.0" };
function chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeCallAnalyticsProcessorConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        call_analytics_stream_categories: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.callAnalyticsStreamCategories),
        content_identification_type: cdktf.stringToTerraform(struct.contentIdentificationType),
        content_redaction_type: cdktf.stringToTerraform(struct.contentRedactionType),
        enable_partial_results_stabilization: cdktf.booleanToTerraform(struct.enablePartialResultsStabilization),
        filter_partial_results: cdktf.booleanToTerraform(struct.filterPartialResults),
        language_code: cdktf.stringToTerraform(struct.languageCode),
        language_model_name: cdktf.stringToTerraform(struct.languageModelName),
        partial_results_stability: cdktf.stringToTerraform(struct.partialResultsStability),
        pii_entity_types: cdktf.stringToTerraform(struct.piiEntityTypes),
        vocabulary_filter_method: cdktf.stringToTerraform(struct.vocabularyFilterMethod),
        vocabulary_filter_name: cdktf.stringToTerraform(struct.vocabularyFilterName),
        vocabulary_name: cdktf.stringToTerraform(struct.vocabularyName),
        post_call_analytics_settings: chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsToTerraform(struct.postCallAnalyticsSettings),
    };
}
exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeCallAnalyticsProcessorConfigurationToTerraform = chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeCallAnalyticsProcessorConfigurationToTerraform;
function chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeCallAnalyticsProcessorConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        call_analytics_stream_categories: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.callAnalyticsStreamCategories),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        content_identification_type: {
            value: cdktf.stringToHclTerraform(struct.contentIdentificationType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        content_redaction_type: {
            value: cdktf.stringToHclTerraform(struct.contentRedactionType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        enable_partial_results_stabilization: {
            value: cdktf.booleanToHclTerraform(struct.enablePartialResultsStabilization),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        filter_partial_results: {
            value: cdktf.booleanToHclTerraform(struct.filterPartialResults),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        language_code: {
            value: cdktf.stringToHclTerraform(struct.languageCode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        language_model_name: {
            value: cdktf.stringToHclTerraform(struct.languageModelName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        partial_results_stability: {
            value: cdktf.stringToHclTerraform(struct.partialResultsStability),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        pii_entity_types: {
            value: cdktf.stringToHclTerraform(struct.piiEntityTypes),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        vocabulary_filter_method: {
            value: cdktf.stringToHclTerraform(struct.vocabularyFilterMethod),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        vocabulary_filter_name: {
            value: cdktf.stringToHclTerraform(struct.vocabularyFilterName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        vocabulary_name: {
            value: cdktf.stringToHclTerraform(struct.vocabularyName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        post_call_analytics_settings: {
            value: chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsToHclTerraform(struct.postCallAnalyticsSettings),
            isBlock: true,
            type: "list",
            storageClassType: "ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeCallAnalyticsProcessorConfigurationToHclTerraform = chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeCallAnalyticsProcessorConfigurationToHclTerraform;
class ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeCallAnalyticsProcessorConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // post_call_analytics_settings - computed: false, optional: true, required: false
        this._postCallAnalyticsSettings = new ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeCallAnalyticsProcessorConfigurationPostCallAnalyticsSettingsOutputReference(this, "post_call_analytics_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._callAnalyticsStreamCategories !== undefined) {
            hasAnyValues = true;
            internalValueResult.callAnalyticsStreamCategories = this._callAnalyticsStreamCategories;
        }
        if (this._contentIdentificationType !== undefined) {
            hasAnyValues = true;
            internalValueResult.contentIdentificationType = this._contentIdentificationType;
        }
        if (this._contentRedactionType !== undefined) {
            hasAnyValues = true;
            internalValueResult.contentRedactionType = this._contentRedactionType;
        }
        if (this._enablePartialResultsStabilization !== undefined) {
            hasAnyValues = true;
            internalValueResult.enablePartialResultsStabilization = this._enablePartialResultsStabilization;
        }
        if (this._filterPartialResults !== undefined) {
            hasAnyValues = true;
            internalValueResult.filterPartialResults = this._filterPartialResults;
        }
        if (this._languageCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.languageCode = this._languageCode;
        }
        if (this._languageModelName !== undefined) {
            hasAnyValues = true;
            internalValueResult.languageModelName = this._languageModelName;
        }
        if (this._partialResultsStability !== undefined) {
            hasAnyValues = true;
            internalValueResult.partialResultsStability = this._partialResultsStability;
        }
        if (this._piiEntityTypes !== undefined) {
            hasAnyValues = true;
            internalValueResult.piiEntityTypes = this._piiEntityTypes;
        }
        if (this._vocabularyFilterMethod !== undefined) {
            hasAnyValues = true;
            internalValueResult.vocabularyFilterMethod = this._vocabularyFilterMethod;
        }
        if (this._vocabularyFilterName !== undefined) {
            hasAnyValues = true;
            internalValueResult.vocabularyFilterName = this._vocabularyFilterName;
        }
        if (this._vocabularyName !== undefined) {
            hasAnyValues = true;
            internalValueResult.vocabularyName = this._vocabularyName;
        }
        if (this._postCallAnalyticsSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.postCallAnalyticsSettings = this._postCallAnalyticsSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._callAnalyticsStreamCategories = undefined;
            this._contentIdentificationType = undefined;
            this._contentRedactionType = undefined;
            this._enablePartialResultsStabilization = undefined;
            this._filterPartialResults = undefined;
            this._languageCode = undefined;
            this._languageModelName = undefined;
            this._partialResultsStability = undefined;
            this._piiEntityTypes = undefined;
            this._vocabularyFilterMethod = undefined;
            this._vocabularyFilterName = undefined;
            this._vocabularyName = undefined;
            this._postCallAnalyticsSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._callAnalyticsStreamCategories = value.callAnalyticsStreamCategories;
            this._contentIdentificationType = value.contentIdentificationType;
            this._contentRedactionType = value.contentRedactionType;
            this._enablePartialResultsStabilization = value.enablePartialResultsStabilization;
            this._filterPartialResults = value.filterPartialResults;
            this._languageCode = value.languageCode;
            this._languageModelName = value.languageModelName;
            this._partialResultsStability = value.partialResultsStability;
            this._piiEntityTypes = value.piiEntityTypes;
            this._vocabularyFilterMethod = value.vocabularyFilterMethod;
            this._vocabularyFilterName = value.vocabularyFilterName;
            this._vocabularyName = value.vocabularyName;
            this._postCallAnalyticsSettings.internalValue = value.postCallAnalyticsSettings;
        }
    }
    get callAnalyticsStreamCategories() {
        return this.getListAttribute('call_analytics_stream_categories');
    }
    set callAnalyticsStreamCategories(value) {
        this._callAnalyticsStreamCategories = value;
    }
    resetCallAnalyticsStreamCategories() {
        this._callAnalyticsStreamCategories = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get callAnalyticsStreamCategoriesInput() {
        return this._callAnalyticsStreamCategories;
    }
    get contentIdentificationType() {
        return this.getStringAttribute('content_identification_type');
    }
    set contentIdentificationType(value) {
        this._contentIdentificationType = value;
    }
    resetContentIdentificationType() {
        this._contentIdentificationType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get contentIdentificationTypeInput() {
        return this._contentIdentificationType;
    }
    get contentRedactionType() {
        return this.getStringAttribute('content_redaction_type');
    }
    set contentRedactionType(value) {
        this._contentRedactionType = value;
    }
    resetContentRedactionType() {
        this._contentRedactionType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get contentRedactionTypeInput() {
        return this._contentRedactionType;
    }
    get enablePartialResultsStabilization() {
        return this.getBooleanAttribute('enable_partial_results_stabilization');
    }
    set enablePartialResultsStabilization(value) {
        this._enablePartialResultsStabilization = value;
    }
    resetEnablePartialResultsStabilization() {
        this._enablePartialResultsStabilization = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enablePartialResultsStabilizationInput() {
        return this._enablePartialResultsStabilization;
    }
    get filterPartialResults() {
        return this.getBooleanAttribute('filter_partial_results');
    }
    set filterPartialResults(value) {
        this._filterPartialResults = value;
    }
    resetFilterPartialResults() {
        this._filterPartialResults = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get filterPartialResultsInput() {
        return this._filterPartialResults;
    }
    get languageCode() {
        return this.getStringAttribute('language_code');
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    // Temporarily expose input value. Use with caution.
    get languageCodeInput() {
        return this._languageCode;
    }
    get languageModelName() {
        return this.getStringAttribute('language_model_name');
    }
    set languageModelName(value) {
        this._languageModelName = value;
    }
    resetLanguageModelName() {
        this._languageModelName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get languageModelNameInput() {
        return this._languageModelName;
    }
    get partialResultsStability() {
        return this.getStringAttribute('partial_results_stability');
    }
    set partialResultsStability(value) {
        this._partialResultsStability = value;
    }
    resetPartialResultsStability() {
        this._partialResultsStability = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get partialResultsStabilityInput() {
        return this._partialResultsStability;
    }
    get piiEntityTypes() {
        return this.getStringAttribute('pii_entity_types');
    }
    set piiEntityTypes(value) {
        this._piiEntityTypes = value;
    }
    resetPiiEntityTypes() {
        this._piiEntityTypes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get piiEntityTypesInput() {
        return this._piiEntityTypes;
    }
    get vocabularyFilterMethod() {
        return this.getStringAttribute('vocabulary_filter_method');
    }
    set vocabularyFilterMethod(value) {
        this._vocabularyFilterMethod = value;
    }
    resetVocabularyFilterMethod() {
        this._vocabularyFilterMethod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vocabularyFilterMethodInput() {
        return this._vocabularyFilterMethod;
    }
    get vocabularyFilterName() {
        return this.getStringAttribute('vocabulary_filter_name');
    }
    set vocabularyFilterName(value) {
        this._vocabularyFilterName = value;
    }
    resetVocabularyFilterName() {
        this._vocabularyFilterName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vocabularyFilterNameInput() {
        return this._vocabularyFilterName;
    }
    get vocabularyName() {
        return this.getStringAttribute('vocabulary_name');
    }
    set vocabularyName(value) {
        this._vocabularyName = value;
    }
    resetVocabularyName() {
        this._vocabularyName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vocabularyNameInput() {
        return this._vocabularyName;
    }
    get postCallAnalyticsSettings() {
        return this._postCallAnalyticsSettings;
    }
    putPostCallAnalyticsSettings(value) {
        this._postCallAnalyticsSettings.internalValue = value;
    }
    resetPostCallAnalyticsSettings() {
        this._postCallAnalyticsSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get postCallAnalyticsSettingsInput() {
        return this._postCallAnalyticsSettings.internalValue;
    }
}
exports.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeCallAnalyticsProcessorConfigurationOutputReference = ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeCallAnalyticsProcessorConfigurationOutputReference;
_b = JSII_RTTI_SYMBOL_1;
ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeCallAnalyticsProcessorConfigurationOutputReference[_b] = { fqn: "@cdktf/provider-aws.chimesdkmediapipelinesMediaInsightsPipelineConfiguration.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeCallAnalyticsProcessorConfigurationOutputReference", version: "19.15.0" };
function chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeProcessorConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        content_identification_type: cdktf.stringToTerraform(struct.contentIdentificationType),
        content_redaction_type: cdktf.stringToTerraform(struct.contentRedactionType),
        enable_partial_results_stabilization: cdktf.booleanToTerraform(struct.enablePartialResultsStabilization),
        filter_partial_results: cdktf.booleanToTerraform(struct.filterPartialResults),
        language_code: cdktf.stringToTerraform(struct.languageCode),
        language_model_name: cdktf.stringToTerraform(struct.languageModelName),
        partial_results_stability: cdktf.stringToTerraform(struct.partialResultsStability),
        pii_entity_types: cdktf.stringToTerraform(struct.piiEntityTypes),
        show_speaker_label: cdktf.booleanToTerraform(struct.showSpeakerLabel),
        vocabulary_filter_method: cdktf.stringToTerraform(struct.vocabularyFilterMethod),
        vocabulary_filter_name: cdktf.stringToTerraform(struct.vocabularyFilterName),
        vocabulary_name: cdktf.stringToTerraform(struct.vocabularyName),
    };
}
exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeProcessorConfigurationToTerraform = chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeProcessorConfigurationToTerraform;
function chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeProcessorConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        content_identification_type: {
            value: cdktf.stringToHclTerraform(struct.contentIdentificationType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        content_redaction_type: {
            value: cdktf.stringToHclTerraform(struct.contentRedactionType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        enable_partial_results_stabilization: {
            value: cdktf.booleanToHclTerraform(struct.enablePartialResultsStabilization),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        filter_partial_results: {
            value: cdktf.booleanToHclTerraform(struct.filterPartialResults),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        language_code: {
            value: cdktf.stringToHclTerraform(struct.languageCode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        language_model_name: {
            value: cdktf.stringToHclTerraform(struct.languageModelName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        partial_results_stability: {
            value: cdktf.stringToHclTerraform(struct.partialResultsStability),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        pii_entity_types: {
            value: cdktf.stringToHclTerraform(struct.piiEntityTypes),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        show_speaker_label: {
            value: cdktf.booleanToHclTerraform(struct.showSpeakerLabel),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        vocabulary_filter_method: {
            value: cdktf.stringToHclTerraform(struct.vocabularyFilterMethod),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        vocabulary_filter_name: {
            value: cdktf.stringToHclTerraform(struct.vocabularyFilterName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        vocabulary_name: {
            value: cdktf.stringToHclTerraform(struct.vocabularyName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeProcessorConfigurationToHclTerraform = chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeProcessorConfigurationToHclTerraform;
class ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeProcessorConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._contentIdentificationType !== undefined) {
            hasAnyValues = true;
            internalValueResult.contentIdentificationType = this._contentIdentificationType;
        }
        if (this._contentRedactionType !== undefined) {
            hasAnyValues = true;
            internalValueResult.contentRedactionType = this._contentRedactionType;
        }
        if (this._enablePartialResultsStabilization !== undefined) {
            hasAnyValues = true;
            internalValueResult.enablePartialResultsStabilization = this._enablePartialResultsStabilization;
        }
        if (this._filterPartialResults !== undefined) {
            hasAnyValues = true;
            internalValueResult.filterPartialResults = this._filterPartialResults;
        }
        if (this._languageCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.languageCode = this._languageCode;
        }
        if (this._languageModelName !== undefined) {
            hasAnyValues = true;
            internalValueResult.languageModelName = this._languageModelName;
        }
        if (this._partialResultsStability !== undefined) {
            hasAnyValues = true;
            internalValueResult.partialResultsStability = this._partialResultsStability;
        }
        if (this._piiEntityTypes !== undefined) {
            hasAnyValues = true;
            internalValueResult.piiEntityTypes = this._piiEntityTypes;
        }
        if (this._showSpeakerLabel !== undefined) {
            hasAnyValues = true;
            internalValueResult.showSpeakerLabel = this._showSpeakerLabel;
        }
        if (this._vocabularyFilterMethod !== undefined) {
            hasAnyValues = true;
            internalValueResult.vocabularyFilterMethod = this._vocabularyFilterMethod;
        }
        if (this._vocabularyFilterName !== undefined) {
            hasAnyValues = true;
            internalValueResult.vocabularyFilterName = this._vocabularyFilterName;
        }
        if (this._vocabularyName !== undefined) {
            hasAnyValues = true;
            internalValueResult.vocabularyName = this._vocabularyName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._contentIdentificationType = undefined;
            this._contentRedactionType = undefined;
            this._enablePartialResultsStabilization = undefined;
            this._filterPartialResults = undefined;
            this._languageCode = undefined;
            this._languageModelName = undefined;
            this._partialResultsStability = undefined;
            this._piiEntityTypes = undefined;
            this._showSpeakerLabel = undefined;
            this._vocabularyFilterMethod = undefined;
            this._vocabularyFilterName = undefined;
            this._vocabularyName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._contentIdentificationType = value.contentIdentificationType;
            this._contentRedactionType = value.contentRedactionType;
            this._enablePartialResultsStabilization = value.enablePartialResultsStabilization;
            this._filterPartialResults = value.filterPartialResults;
            this._languageCode = value.languageCode;
            this._languageModelName = value.languageModelName;
            this._partialResultsStability = value.partialResultsStability;
            this._piiEntityTypes = value.piiEntityTypes;
            this._showSpeakerLabel = value.showSpeakerLabel;
            this._vocabularyFilterMethod = value.vocabularyFilterMethod;
            this._vocabularyFilterName = value.vocabularyFilterName;
            this._vocabularyName = value.vocabularyName;
        }
    }
    get contentIdentificationType() {
        return this.getStringAttribute('content_identification_type');
    }
    set contentIdentificationType(value) {
        this._contentIdentificationType = value;
    }
    resetContentIdentificationType() {
        this._contentIdentificationType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get contentIdentificationTypeInput() {
        return this._contentIdentificationType;
    }
    get contentRedactionType() {
        return this.getStringAttribute('content_redaction_type');
    }
    set contentRedactionType(value) {
        this._contentRedactionType = value;
    }
    resetContentRedactionType() {
        this._contentRedactionType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get contentRedactionTypeInput() {
        return this._contentRedactionType;
    }
    get enablePartialResultsStabilization() {
        return this.getBooleanAttribute('enable_partial_results_stabilization');
    }
    set enablePartialResultsStabilization(value) {
        this._enablePartialResultsStabilization = value;
    }
    resetEnablePartialResultsStabilization() {
        this._enablePartialResultsStabilization = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enablePartialResultsStabilizationInput() {
        return this._enablePartialResultsStabilization;
    }
    get filterPartialResults() {
        return this.getBooleanAttribute('filter_partial_results');
    }
    set filterPartialResults(value) {
        this._filterPartialResults = value;
    }
    resetFilterPartialResults() {
        this._filterPartialResults = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get filterPartialResultsInput() {
        return this._filterPartialResults;
    }
    get languageCode() {
        return this.getStringAttribute('language_code');
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    // Temporarily expose input value. Use with caution.
    get languageCodeInput() {
        return this._languageCode;
    }
    get languageModelName() {
        return this.getStringAttribute('language_model_name');
    }
    set languageModelName(value) {
        this._languageModelName = value;
    }
    resetLanguageModelName() {
        this._languageModelName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get languageModelNameInput() {
        return this._languageModelName;
    }
    get partialResultsStability() {
        return this.getStringAttribute('partial_results_stability');
    }
    set partialResultsStability(value) {
        this._partialResultsStability = value;
    }
    resetPartialResultsStability() {
        this._partialResultsStability = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get partialResultsStabilityInput() {
        return this._partialResultsStability;
    }
    get piiEntityTypes() {
        return this.getStringAttribute('pii_entity_types');
    }
    set piiEntityTypes(value) {
        this._piiEntityTypes = value;
    }
    resetPiiEntityTypes() {
        this._piiEntityTypes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get piiEntityTypesInput() {
        return this._piiEntityTypes;
    }
    get showSpeakerLabel() {
        return this.getBooleanAttribute('show_speaker_label');
    }
    set showSpeakerLabel(value) {
        this._showSpeakerLabel = value;
    }
    resetShowSpeakerLabel() {
        this._showSpeakerLabel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get showSpeakerLabelInput() {
        return this._showSpeakerLabel;
    }
    get vocabularyFilterMethod() {
        return this.getStringAttribute('vocabulary_filter_method');
    }
    set vocabularyFilterMethod(value) {
        this._vocabularyFilterMethod = value;
    }
    resetVocabularyFilterMethod() {
        this._vocabularyFilterMethod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vocabularyFilterMethodInput() {
        return this._vocabularyFilterMethod;
    }
    get vocabularyFilterName() {
        return this.getStringAttribute('vocabulary_filter_name');
    }
    set vocabularyFilterName(value) {
        this._vocabularyFilterName = value;
    }
    resetVocabularyFilterName() {
        this._vocabularyFilterName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vocabularyFilterNameInput() {
        return this._vocabularyFilterName;
    }
    get vocabularyName() {
        return this.getStringAttribute('vocabulary_name');
    }
    set vocabularyName(value) {
        this._vocabularyName = value;
    }
    resetVocabularyName() {
        this._vocabularyName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vocabularyNameInput() {
        return this._vocabularyName;
    }
}
exports.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeProcessorConfigurationOutputReference = ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeProcessorConfigurationOutputReference;
_c = JSII_RTTI_SYMBOL_1;
ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeProcessorConfigurationOutputReference[_c] = { fqn: "@cdktf/provider-aws.chimesdkmediapipelinesMediaInsightsPipelineConfiguration.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeProcessorConfigurationOutputReference", version: "19.15.0" };
function chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsKinesisDataStreamSinkConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        insights_target: cdktf.stringToTerraform(struct.insightsTarget),
    };
}
exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsKinesisDataStreamSinkConfigurationToTerraform = chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsKinesisDataStreamSinkConfigurationToTerraform;
function chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsKinesisDataStreamSinkConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        insights_target: {
            value: cdktf.stringToHclTerraform(struct.insightsTarget),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsKinesisDataStreamSinkConfigurationToHclTerraform = chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsKinesisDataStreamSinkConfigurationToHclTerraform;
class ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsKinesisDataStreamSinkConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._insightsTarget !== undefined) {
            hasAnyValues = true;
            internalValueResult.insightsTarget = this._insightsTarget;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._insightsTarget = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._insightsTarget = value.insightsTarget;
        }
    }
    get insightsTarget() {
        return this.getStringAttribute('insights_target');
    }
    set insightsTarget(value) {
        this._insightsTarget = value;
    }
    // Temporarily expose input value. Use with caution.
    get insightsTargetInput() {
        return this._insightsTarget;
    }
}
exports.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsKinesisDataStreamSinkConfigurationOutputReference = ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsKinesisDataStreamSinkConfigurationOutputReference;
_d = JSII_RTTI_SYMBOL_1;
ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsKinesisDataStreamSinkConfigurationOutputReference[_d] = { fqn: "@cdktf/provider-aws.chimesdkmediapipelinesMediaInsightsPipelineConfiguration.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsKinesisDataStreamSinkConfigurationOutputReference", version: "19.15.0" };
function chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsLambdaFunctionSinkConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        insights_target: cdktf.stringToTerraform(struct.insightsTarget),
    };
}
exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsLambdaFunctionSinkConfigurationToTerraform = chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsLambdaFunctionSinkConfigurationToTerraform;
function chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsLambdaFunctionSinkConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        insights_target: {
            value: cdktf.stringToHclTerraform(struct.insightsTarget),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsLambdaFunctionSinkConfigurationToHclTerraform = chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsLambdaFunctionSinkConfigurationToHclTerraform;
class ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsLambdaFunctionSinkConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._insightsTarget !== undefined) {
            hasAnyValues = true;
            internalValueResult.insightsTarget = this._insightsTarget;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._insightsTarget = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._insightsTarget = value.insightsTarget;
        }
    }
    get insightsTarget() {
        return this.getStringAttribute('insights_target');
    }
    set insightsTarget(value) {
        this._insightsTarget = value;
    }
    // Temporarily expose input value. Use with caution.
    get insightsTargetInput() {
        return this._insightsTarget;
    }
}
exports.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsLambdaFunctionSinkConfigurationOutputReference = ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsLambdaFunctionSinkConfigurationOutputReference;
_e = JSII_RTTI_SYMBOL_1;
ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsLambdaFunctionSinkConfigurationOutputReference[_e] = { fqn: "@cdktf/provider-aws.chimesdkmediapipelinesMediaInsightsPipelineConfiguration.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsLambdaFunctionSinkConfigurationOutputReference", version: "19.15.0" };
function chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsS3RecordingSinkConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        destination: cdktf.stringToTerraform(struct.destination),
    };
}
exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsS3RecordingSinkConfigurationToTerraform = chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsS3RecordingSinkConfigurationToTerraform;
function chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsS3RecordingSinkConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        destination: {
            value: cdktf.stringToHclTerraform(struct.destination),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsS3RecordingSinkConfigurationToHclTerraform = chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsS3RecordingSinkConfigurationToHclTerraform;
class ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsS3RecordingSinkConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._destination !== undefined) {
            hasAnyValues = true;
            internalValueResult.destination = this._destination;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._destination = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._destination = value.destination;
        }
    }
    get destination() {
        return this.getStringAttribute('destination');
    }
    set destination(value) {
        this._destination = value;
    }
    resetDestination() {
        this._destination = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get destinationInput() {
        return this._destination;
    }
}
exports.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsS3RecordingSinkConfigurationOutputReference = ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsS3RecordingSinkConfigurationOutputReference;
_f = JSII_RTTI_SYMBOL_1;
ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsS3RecordingSinkConfigurationOutputReference[_f] = { fqn: "@cdktf/provider-aws.chimesdkmediapipelinesMediaInsightsPipelineConfiguration.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsS3RecordingSinkConfigurationOutputReference", version: "19.15.0" };
function chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsSnsTopicSinkConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        insights_target: cdktf.stringToTerraform(struct.insightsTarget),
    };
}
exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsSnsTopicSinkConfigurationToTerraform = chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsSnsTopicSinkConfigurationToTerraform;
function chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsSnsTopicSinkConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        insights_target: {
            value: cdktf.stringToHclTerraform(struct.insightsTarget),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsSnsTopicSinkConfigurationToHclTerraform = chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsSnsTopicSinkConfigurationToHclTerraform;
class ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsSnsTopicSinkConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._insightsTarget !== undefined) {
            hasAnyValues = true;
            internalValueResult.insightsTarget = this._insightsTarget;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._insightsTarget = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._insightsTarget = value.insightsTarget;
        }
    }
    get insightsTarget() {
        return this.getStringAttribute('insights_target');
    }
    set insightsTarget(value) {
        this._insightsTarget = value;
    }
    // Temporarily expose input value. Use with caution.
    get insightsTargetInput() {
        return this._insightsTarget;
    }
}
exports.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsSnsTopicSinkConfigurationOutputReference = ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsSnsTopicSinkConfigurationOutputReference;
_g = JSII_RTTI_SYMBOL_1;
ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsSnsTopicSinkConfigurationOutputReference[_g] = { fqn: "@cdktf/provider-aws.chimesdkmediapipelinesMediaInsightsPipelineConfiguration.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsSnsTopicSinkConfigurationOutputReference", version: "19.15.0" };
function chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsSqsQueueSinkConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        insights_target: cdktf.stringToTerraform(struct.insightsTarget),
    };
}
exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsSqsQueueSinkConfigurationToTerraform = chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsSqsQueueSinkConfigurationToTerraform;
function chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsSqsQueueSinkConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        insights_target: {
            value: cdktf.stringToHclTerraform(struct.insightsTarget),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsSqsQueueSinkConfigurationToHclTerraform = chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsSqsQueueSinkConfigurationToHclTerraform;
class ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsSqsQueueSinkConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._insightsTarget !== undefined) {
            hasAnyValues = true;
            internalValueResult.insightsTarget = this._insightsTarget;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._insightsTarget = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._insightsTarget = value.insightsTarget;
        }
    }
    get insightsTarget() {
        return this.getStringAttribute('insights_target');
    }
    set insightsTarget(value) {
        this._insightsTarget = value;
    }
    // Temporarily expose input value. Use with caution.
    get insightsTargetInput() {
        return this._insightsTarget;
    }
}
exports.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsSqsQueueSinkConfigurationOutputReference = ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsSqsQueueSinkConfigurationOutputReference;
_h = JSII_RTTI_SYMBOL_1;
ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsSqsQueueSinkConfigurationOutputReference[_h] = { fqn: "@cdktf/provider-aws.chimesdkmediapipelinesMediaInsightsPipelineConfiguration.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsSqsQueueSinkConfigurationOutputReference", version: "19.15.0" };
function chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsVoiceAnalyticsProcessorConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        speaker_search_status: cdktf.stringToTerraform(struct.speakerSearchStatus),
        voice_tone_analysis_status: cdktf.stringToTerraform(struct.voiceToneAnalysisStatus),
    };
}
exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsVoiceAnalyticsProcessorConfigurationToTerraform = chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsVoiceAnalyticsProcessorConfigurationToTerraform;
function chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsVoiceAnalyticsProcessorConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        speaker_search_status: {
            value: cdktf.stringToHclTerraform(struct.speakerSearchStatus),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        voice_tone_analysis_status: {
            value: cdktf.stringToHclTerraform(struct.voiceToneAnalysisStatus),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsVoiceAnalyticsProcessorConfigurationToHclTerraform = chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsVoiceAnalyticsProcessorConfigurationToHclTerraform;
class ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsVoiceAnalyticsProcessorConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._speakerSearchStatus !== undefined) {
            hasAnyValues = true;
            internalValueResult.speakerSearchStatus = this._speakerSearchStatus;
        }
        if (this._voiceToneAnalysisStatus !== undefined) {
            hasAnyValues = true;
            internalValueResult.voiceToneAnalysisStatus = this._voiceToneAnalysisStatus;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._speakerSearchStatus = undefined;
            this._voiceToneAnalysisStatus = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._speakerSearchStatus = value.speakerSearchStatus;
            this._voiceToneAnalysisStatus = value.voiceToneAnalysisStatus;
        }
    }
    get speakerSearchStatus() {
        return this.getStringAttribute('speaker_search_status');
    }
    set speakerSearchStatus(value) {
        this._speakerSearchStatus = value;
    }
    // Temporarily expose input value. Use with caution.
    get speakerSearchStatusInput() {
        return this._speakerSearchStatus;
    }
    get voiceToneAnalysisStatus() {
        return this.getStringAttribute('voice_tone_analysis_status');
    }
    set voiceToneAnalysisStatus(value) {
        this._voiceToneAnalysisStatus = value;
    }
    // Temporarily expose input value. Use with caution.
    get voiceToneAnalysisStatusInput() {
        return this._voiceToneAnalysisStatus;
    }
}
exports.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsVoiceAnalyticsProcessorConfigurationOutputReference = ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsVoiceAnalyticsProcessorConfigurationOutputReference;
_j = JSII_RTTI_SYMBOL_1;
ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsVoiceAnalyticsProcessorConfigurationOutputReference[_j] = { fqn: "@cdktf/provider-aws.chimesdkmediapipelinesMediaInsightsPipelineConfiguration.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsVoiceAnalyticsProcessorConfigurationOutputReference", version: "19.15.0" };
function chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        type: cdktf.stringToTerraform(struct.type),
        amazon_transcribe_call_analytics_processor_configuration: chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeCallAnalyticsProcessorConfigurationToTerraform(struct.amazonTranscribeCallAnalyticsProcessorConfiguration),
        amazon_transcribe_processor_configuration: chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeProcessorConfigurationToTerraform(struct.amazonTranscribeProcessorConfiguration),
        kinesis_data_stream_sink_configuration: chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsKinesisDataStreamSinkConfigurationToTerraform(struct.kinesisDataStreamSinkConfiguration),
        lambda_function_sink_configuration: chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsLambdaFunctionSinkConfigurationToTerraform(struct.lambdaFunctionSinkConfiguration),
        s3_recording_sink_configuration: chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsS3RecordingSinkConfigurationToTerraform(struct.s3RecordingSinkConfiguration),
        sns_topic_sink_configuration: chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsSnsTopicSinkConfigurationToTerraform(struct.snsTopicSinkConfiguration),
        sqs_queue_sink_configuration: chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsSqsQueueSinkConfigurationToTerraform(struct.sqsQueueSinkConfiguration),
        voice_analytics_processor_configuration: chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsVoiceAnalyticsProcessorConfigurationToTerraform(struct.voiceAnalyticsProcessorConfiguration),
    };
}
exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsToTerraform = chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsToTerraform;
function chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        type: {
            value: cdktf.stringToHclTerraform(struct.type),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        amazon_transcribe_call_analytics_processor_configuration: {
            value: chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeCallAnalyticsProcessorConfigurationToHclTerraform(struct.amazonTranscribeCallAnalyticsProcessorConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeCallAnalyticsProcessorConfigurationList",
        },
        amazon_transcribe_processor_configuration: {
            value: chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeProcessorConfigurationToHclTerraform(struct.amazonTranscribeProcessorConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeProcessorConfigurationList",
        },
        kinesis_data_stream_sink_configuration: {
            value: chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsKinesisDataStreamSinkConfigurationToHclTerraform(struct.kinesisDataStreamSinkConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsKinesisDataStreamSinkConfigurationList",
        },
        lambda_function_sink_configuration: {
            value: chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsLambdaFunctionSinkConfigurationToHclTerraform(struct.lambdaFunctionSinkConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsLambdaFunctionSinkConfigurationList",
        },
        s3_recording_sink_configuration: {
            value: chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsS3RecordingSinkConfigurationToHclTerraform(struct.s3RecordingSinkConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsS3RecordingSinkConfigurationList",
        },
        sns_topic_sink_configuration: {
            value: chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsSnsTopicSinkConfigurationToHclTerraform(struct.snsTopicSinkConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsSnsTopicSinkConfigurationList",
        },
        sqs_queue_sink_configuration: {
            value: chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsSqsQueueSinkConfigurationToHclTerraform(struct.sqsQueueSinkConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsSqsQueueSinkConfigurationList",
        },
        voice_analytics_processor_configuration: {
            value: chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsVoiceAnalyticsProcessorConfigurationToHclTerraform(struct.voiceAnalyticsProcessorConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsVoiceAnalyticsProcessorConfigurationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsToHclTerraform = chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsToHclTerraform;
class ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // amazon_transcribe_call_analytics_processor_configuration - computed: false, optional: true, required: false
        this._amazonTranscribeCallAnalyticsProcessorConfiguration = new ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeCallAnalyticsProcessorConfigurationOutputReference(this, "amazon_transcribe_call_analytics_processor_configuration");
        // amazon_transcribe_processor_configuration - computed: false, optional: true, required: false
        this._amazonTranscribeProcessorConfiguration = new ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsAmazonTranscribeProcessorConfigurationOutputReference(this, "amazon_transcribe_processor_configuration");
        // kinesis_data_stream_sink_configuration - computed: false, optional: true, required: false
        this._kinesisDataStreamSinkConfiguration = new ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsKinesisDataStreamSinkConfigurationOutputReference(this, "kinesis_data_stream_sink_configuration");
        // lambda_function_sink_configuration - computed: false, optional: true, required: false
        this._lambdaFunctionSinkConfiguration = new ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsLambdaFunctionSinkConfigurationOutputReference(this, "lambda_function_sink_configuration");
        // s3_recording_sink_configuration - computed: false, optional: true, required: false
        this._s3RecordingSinkConfiguration = new ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsS3RecordingSinkConfigurationOutputReference(this, "s3_recording_sink_configuration");
        // sns_topic_sink_configuration - computed: false, optional: true, required: false
        this._snsTopicSinkConfiguration = new ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsSnsTopicSinkConfigurationOutputReference(this, "sns_topic_sink_configuration");
        // sqs_queue_sink_configuration - computed: false, optional: true, required: false
        this._sqsQueueSinkConfiguration = new ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsSqsQueueSinkConfigurationOutputReference(this, "sqs_queue_sink_configuration");
        // voice_analytics_processor_configuration - computed: false, optional: true, required: false
        this._voiceAnalyticsProcessorConfiguration = new ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsVoiceAnalyticsProcessorConfigurationOutputReference(this, "voice_analytics_processor_configuration");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        if (this._amazonTranscribeCallAnalyticsProcessorConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.amazonTranscribeCallAnalyticsProcessorConfiguration = this._amazonTranscribeCallAnalyticsProcessorConfiguration?.internalValue;
        }
        if (this._amazonTranscribeProcessorConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.amazonTranscribeProcessorConfiguration = this._amazonTranscribeProcessorConfiguration?.internalValue;
        }
        if (this._kinesisDataStreamSinkConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.kinesisDataStreamSinkConfiguration = this._kinesisDataStreamSinkConfiguration?.internalValue;
        }
        if (this._lambdaFunctionSinkConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.lambdaFunctionSinkConfiguration = this._lambdaFunctionSinkConfiguration?.internalValue;
        }
        if (this._s3RecordingSinkConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3RecordingSinkConfiguration = this._s3RecordingSinkConfiguration?.internalValue;
        }
        if (this._snsTopicSinkConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.snsTopicSinkConfiguration = this._snsTopicSinkConfiguration?.internalValue;
        }
        if (this._sqsQueueSinkConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sqsQueueSinkConfiguration = this._sqsQueueSinkConfiguration?.internalValue;
        }
        if (this._voiceAnalyticsProcessorConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.voiceAnalyticsProcessorConfiguration = this._voiceAnalyticsProcessorConfiguration?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._type = undefined;
            this._amazonTranscribeCallAnalyticsProcessorConfiguration.internalValue = undefined;
            this._amazonTranscribeProcessorConfiguration.internalValue = undefined;
            this._kinesisDataStreamSinkConfiguration.internalValue = undefined;
            this._lambdaFunctionSinkConfiguration.internalValue = undefined;
            this._s3RecordingSinkConfiguration.internalValue = undefined;
            this._snsTopicSinkConfiguration.internalValue = undefined;
            this._sqsQueueSinkConfiguration.internalValue = undefined;
            this._voiceAnalyticsProcessorConfiguration.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._type = value.type;
            this._amazonTranscribeCallAnalyticsProcessorConfiguration.internalValue = value.amazonTranscribeCallAnalyticsProcessorConfiguration;
            this._amazonTranscribeProcessorConfiguration.internalValue = value.amazonTranscribeProcessorConfiguration;
            this._kinesisDataStreamSinkConfiguration.internalValue = value.kinesisDataStreamSinkConfiguration;
            this._lambdaFunctionSinkConfiguration.internalValue = value.lambdaFunctionSinkConfiguration;
            this._s3RecordingSinkConfiguration.internalValue = value.s3RecordingSinkConfiguration;
            this._snsTopicSinkConfiguration.internalValue = value.snsTopicSinkConfiguration;
            this._sqsQueueSinkConfiguration.internalValue = value.sqsQueueSinkConfiguration;
            this._voiceAnalyticsProcessorConfiguration.internalValue = value.voiceAnalyticsProcessorConfiguration;
        }
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get amazonTranscribeCallAnalyticsProcessorConfiguration() {
        return this._amazonTranscribeCallAnalyticsProcessorConfiguration;
    }
    putAmazonTranscribeCallAnalyticsProcessorConfiguration(value) {
        this._amazonTranscribeCallAnalyticsProcessorConfiguration.internalValue = value;
    }
    resetAmazonTranscribeCallAnalyticsProcessorConfiguration() {
        this._amazonTranscribeCallAnalyticsProcessorConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get amazonTranscribeCallAnalyticsProcessorConfigurationInput() {
        return this._amazonTranscribeCallAnalyticsProcessorConfiguration.internalValue;
    }
    get amazonTranscribeProcessorConfiguration() {
        return this._amazonTranscribeProcessorConfiguration;
    }
    putAmazonTranscribeProcessorConfiguration(value) {
        this._amazonTranscribeProcessorConfiguration.internalValue = value;
    }
    resetAmazonTranscribeProcessorConfiguration() {
        this._amazonTranscribeProcessorConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get amazonTranscribeProcessorConfigurationInput() {
        return this._amazonTranscribeProcessorConfiguration.internalValue;
    }
    get kinesisDataStreamSinkConfiguration() {
        return this._kinesisDataStreamSinkConfiguration;
    }
    putKinesisDataStreamSinkConfiguration(value) {
        this._kinesisDataStreamSinkConfiguration.internalValue = value;
    }
    resetKinesisDataStreamSinkConfiguration() {
        this._kinesisDataStreamSinkConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kinesisDataStreamSinkConfigurationInput() {
        return this._kinesisDataStreamSinkConfiguration.internalValue;
    }
    get lambdaFunctionSinkConfiguration() {
        return this._lambdaFunctionSinkConfiguration;
    }
    putLambdaFunctionSinkConfiguration(value) {
        this._lambdaFunctionSinkConfiguration.internalValue = value;
    }
    resetLambdaFunctionSinkConfiguration() {
        this._lambdaFunctionSinkConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lambdaFunctionSinkConfigurationInput() {
        return this._lambdaFunctionSinkConfiguration.internalValue;
    }
    get s3RecordingSinkConfiguration() {
        return this._s3RecordingSinkConfiguration;
    }
    putS3RecordingSinkConfiguration(value) {
        this._s3RecordingSinkConfiguration.internalValue = value;
    }
    resetS3RecordingSinkConfiguration() {
        this._s3RecordingSinkConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3RecordingSinkConfigurationInput() {
        return this._s3RecordingSinkConfiguration.internalValue;
    }
    get snsTopicSinkConfiguration() {
        return this._snsTopicSinkConfiguration;
    }
    putSnsTopicSinkConfiguration(value) {
        this._snsTopicSinkConfiguration.internalValue = value;
    }
    resetSnsTopicSinkConfiguration() {
        this._snsTopicSinkConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get snsTopicSinkConfigurationInput() {
        return this._snsTopicSinkConfiguration.internalValue;
    }
    get sqsQueueSinkConfiguration() {
        return this._sqsQueueSinkConfiguration;
    }
    putSqsQueueSinkConfiguration(value) {
        this._sqsQueueSinkConfiguration.internalValue = value;
    }
    resetSqsQueueSinkConfiguration() {
        this._sqsQueueSinkConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sqsQueueSinkConfigurationInput() {
        return this._sqsQueueSinkConfiguration.internalValue;
    }
    get voiceAnalyticsProcessorConfiguration() {
        return this._voiceAnalyticsProcessorConfiguration;
    }
    putVoiceAnalyticsProcessorConfiguration(value) {
        this._voiceAnalyticsProcessorConfiguration.internalValue = value;
    }
    resetVoiceAnalyticsProcessorConfiguration() {
        this._voiceAnalyticsProcessorConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get voiceAnalyticsProcessorConfigurationInput() {
        return this._voiceAnalyticsProcessorConfiguration.internalValue;
    }
}
exports.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsOutputReference = ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsOutputReference;
_k = JSII_RTTI_SYMBOL_1;
ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsOutputReference[_k] = { fqn: "@cdktf/provider-aws.chimesdkmediapipelinesMediaInsightsPipelineConfiguration.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsOutputReference", version: "19.15.0" };
class ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsList = ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsList;
_l = JSII_RTTI_SYMBOL_1;
ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsList[_l] = { fqn: "@cdktf/provider-aws.chimesdkmediapipelinesMediaInsightsPipelineConfiguration.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsList", version: "19.15.0" };
function chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesIssueDetectionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        rule_name: cdktf.stringToTerraform(struct.ruleName),
    };
}
exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesIssueDetectionConfigurationToTerraform = chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesIssueDetectionConfigurationToTerraform;
function chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesIssueDetectionConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        rule_name: {
            value: cdktf.stringToHclTerraform(struct.ruleName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesIssueDetectionConfigurationToHclTerraform = chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesIssueDetectionConfigurationToHclTerraform;
class ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesIssueDetectionConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._ruleName !== undefined) {
            hasAnyValues = true;
            internalValueResult.ruleName = this._ruleName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._ruleName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._ruleName = value.ruleName;
        }
    }
    get ruleName() {
        return this.getStringAttribute('rule_name');
    }
    set ruleName(value) {
        this._ruleName = value;
    }
    // Temporarily expose input value. Use with caution.
    get ruleNameInput() {
        return this._ruleName;
    }
}
exports.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesIssueDetectionConfigurationOutputReference = ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesIssueDetectionConfigurationOutputReference;
_m = JSII_RTTI_SYMBOL_1;
ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesIssueDetectionConfigurationOutputReference[_m] = { fqn: "@cdktf/provider-aws.chimesdkmediapipelinesMediaInsightsPipelineConfiguration.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesIssueDetectionConfigurationOutputReference", version: "19.15.0" };
function chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesKeywordMatchConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        keywords: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.keywords),
        negate: cdktf.booleanToTerraform(struct.negate),
        rule_name: cdktf.stringToTerraform(struct.ruleName),
    };
}
exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesKeywordMatchConfigurationToTerraform = chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesKeywordMatchConfigurationToTerraform;
function chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesKeywordMatchConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        keywords: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.keywords),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        negate: {
            value: cdktf.booleanToHclTerraform(struct.negate),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        rule_name: {
            value: cdktf.stringToHclTerraform(struct.ruleName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesKeywordMatchConfigurationToHclTerraform = chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesKeywordMatchConfigurationToHclTerraform;
class ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesKeywordMatchConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._keywords !== undefined) {
            hasAnyValues = true;
            internalValueResult.keywords = this._keywords;
        }
        if (this._negate !== undefined) {
            hasAnyValues = true;
            internalValueResult.negate = this._negate;
        }
        if (this._ruleName !== undefined) {
            hasAnyValues = true;
            internalValueResult.ruleName = this._ruleName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._keywords = undefined;
            this._negate = undefined;
            this._ruleName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._keywords = value.keywords;
            this._negate = value.negate;
            this._ruleName = value.ruleName;
        }
    }
    get keywords() {
        return this.getListAttribute('keywords');
    }
    set keywords(value) {
        this._keywords = value;
    }
    // Temporarily expose input value. Use with caution.
    get keywordsInput() {
        return this._keywords;
    }
    get negate() {
        return this.getBooleanAttribute('negate');
    }
    set negate(value) {
        this._negate = value;
    }
    resetNegate() {
        this._negate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get negateInput() {
        return this._negate;
    }
    get ruleName() {
        return this.getStringAttribute('rule_name');
    }
    set ruleName(value) {
        this._ruleName = value;
    }
    // Temporarily expose input value. Use with caution.
    get ruleNameInput() {
        return this._ruleName;
    }
}
exports.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesKeywordMatchConfigurationOutputReference = ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesKeywordMatchConfigurationOutputReference;
_o = JSII_RTTI_SYMBOL_1;
ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesKeywordMatchConfigurationOutputReference[_o] = { fqn: "@cdktf/provider-aws.chimesdkmediapipelinesMediaInsightsPipelineConfiguration.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesKeywordMatchConfigurationOutputReference", version: "19.15.0" };
function chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesSentimentConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        rule_name: cdktf.stringToTerraform(struct.ruleName),
        sentiment_type: cdktf.stringToTerraform(struct.sentimentType),
        time_period: cdktf.numberToTerraform(struct.timePeriod),
    };
}
exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesSentimentConfigurationToTerraform = chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesSentimentConfigurationToTerraform;
function chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesSentimentConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        rule_name: {
            value: cdktf.stringToHclTerraform(struct.ruleName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sentiment_type: {
            value: cdktf.stringToHclTerraform(struct.sentimentType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        time_period: {
            value: cdktf.numberToHclTerraform(struct.timePeriod),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesSentimentConfigurationToHclTerraform = chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesSentimentConfigurationToHclTerraform;
class ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesSentimentConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._ruleName !== undefined) {
            hasAnyValues = true;
            internalValueResult.ruleName = this._ruleName;
        }
        if (this._sentimentType !== undefined) {
            hasAnyValues = true;
            internalValueResult.sentimentType = this._sentimentType;
        }
        if (this._timePeriod !== undefined) {
            hasAnyValues = true;
            internalValueResult.timePeriod = this._timePeriod;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._ruleName = undefined;
            this._sentimentType = undefined;
            this._timePeriod = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._ruleName = value.ruleName;
            this._sentimentType = value.sentimentType;
            this._timePeriod = value.timePeriod;
        }
    }
    get ruleName() {
        return this.getStringAttribute('rule_name');
    }
    set ruleName(value) {
        this._ruleName = value;
    }
    // Temporarily expose input value. Use with caution.
    get ruleNameInput() {
        return this._ruleName;
    }
    get sentimentType() {
        return this.getStringAttribute('sentiment_type');
    }
    set sentimentType(value) {
        this._sentimentType = value;
    }
    // Temporarily expose input value. Use with caution.
    get sentimentTypeInput() {
        return this._sentimentType;
    }
    get timePeriod() {
        return this.getNumberAttribute('time_period');
    }
    set timePeriod(value) {
        this._timePeriod = value;
    }
    // Temporarily expose input value. Use with caution.
    get timePeriodInput() {
        return this._timePeriod;
    }
}
exports.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesSentimentConfigurationOutputReference = ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesSentimentConfigurationOutputReference;
_p = JSII_RTTI_SYMBOL_1;
ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesSentimentConfigurationOutputReference[_p] = { fqn: "@cdktf/provider-aws.chimesdkmediapipelinesMediaInsightsPipelineConfiguration.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesSentimentConfigurationOutputReference", version: "19.15.0" };
function chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        type: cdktf.stringToTerraform(struct.type),
        issue_detection_configuration: chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesIssueDetectionConfigurationToTerraform(struct.issueDetectionConfiguration),
        keyword_match_configuration: chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesKeywordMatchConfigurationToTerraform(struct.keywordMatchConfiguration),
        sentiment_configuration: chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesSentimentConfigurationToTerraform(struct.sentimentConfiguration),
    };
}
exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesToTerraform = chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesToTerraform;
function chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        type: {
            value: cdktf.stringToHclTerraform(struct.type),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        issue_detection_configuration: {
            value: chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesIssueDetectionConfigurationToHclTerraform(struct.issueDetectionConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesIssueDetectionConfigurationList",
        },
        keyword_match_configuration: {
            value: chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesKeywordMatchConfigurationToHclTerraform(struct.keywordMatchConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesKeywordMatchConfigurationList",
        },
        sentiment_configuration: {
            value: chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesSentimentConfigurationToHclTerraform(struct.sentimentConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesSentimentConfigurationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesToHclTerraform = chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesToHclTerraform;
class ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // issue_detection_configuration - computed: false, optional: true, required: false
        this._issueDetectionConfiguration = new ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesIssueDetectionConfigurationOutputReference(this, "issue_detection_configuration");
        // keyword_match_configuration - computed: false, optional: true, required: false
        this._keywordMatchConfiguration = new ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesKeywordMatchConfigurationOutputReference(this, "keyword_match_configuration");
        // sentiment_configuration - computed: false, optional: true, required: false
        this._sentimentConfiguration = new ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesSentimentConfigurationOutputReference(this, "sentiment_configuration");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        if (this._issueDetectionConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.issueDetectionConfiguration = this._issueDetectionConfiguration?.internalValue;
        }
        if (this._keywordMatchConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.keywordMatchConfiguration = this._keywordMatchConfiguration?.internalValue;
        }
        if (this._sentimentConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sentimentConfiguration = this._sentimentConfiguration?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._type = undefined;
            this._issueDetectionConfiguration.internalValue = undefined;
            this._keywordMatchConfiguration.internalValue = undefined;
            this._sentimentConfiguration.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._type = value.type;
            this._issueDetectionConfiguration.internalValue = value.issueDetectionConfiguration;
            this._keywordMatchConfiguration.internalValue = value.keywordMatchConfiguration;
            this._sentimentConfiguration.internalValue = value.sentimentConfiguration;
        }
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get issueDetectionConfiguration() {
        return this._issueDetectionConfiguration;
    }
    putIssueDetectionConfiguration(value) {
        this._issueDetectionConfiguration.internalValue = value;
    }
    resetIssueDetectionConfiguration() {
        this._issueDetectionConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get issueDetectionConfigurationInput() {
        return this._issueDetectionConfiguration.internalValue;
    }
    get keywordMatchConfiguration() {
        return this._keywordMatchConfiguration;
    }
    putKeywordMatchConfiguration(value) {
        this._keywordMatchConfiguration.internalValue = value;
    }
    resetKeywordMatchConfiguration() {
        this._keywordMatchConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keywordMatchConfigurationInput() {
        return this._keywordMatchConfiguration.internalValue;
    }
    get sentimentConfiguration() {
        return this._sentimentConfiguration;
    }
    putSentimentConfiguration(value) {
        this._sentimentConfiguration.internalValue = value;
    }
    resetSentimentConfiguration() {
        this._sentimentConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sentimentConfigurationInput() {
        return this._sentimentConfiguration.internalValue;
    }
}
exports.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesOutputReference = ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesOutputReference;
_q = JSII_RTTI_SYMBOL_1;
ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesOutputReference[_q] = { fqn: "@cdktf/provider-aws.chimesdkmediapipelinesMediaInsightsPipelineConfiguration.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesOutputReference", version: "19.15.0" };
class ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesList = ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesList;
_r = JSII_RTTI_SYMBOL_1;
ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesList[_r] = { fqn: "@cdktf/provider-aws.chimesdkmediapipelinesMediaInsightsPipelineConfiguration.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesList", version: "19.15.0" };
function chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        disabled: cdktf.booleanToTerraform(struct.disabled),
        rules: cdktf.listMapper(chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesToTerraform, true)(struct.rules),
    };
}
exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationToTerraform = chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationToTerraform;
function chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        disabled: {
            value: cdktf.booleanToHclTerraform(struct.disabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        rules: {
            value: cdktf.listMapperHcl(chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesToHclTerraform, true)(struct.rules),
            isBlock: true,
            type: "list",
            storageClassType: "ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationToHclTerraform = chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationToHclTerraform;
class ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // rules - computed: false, optional: false, required: true
        this._rules = new ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationRulesList(this, "rules", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._disabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.disabled = this._disabled;
        }
        if (this._rules?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.rules = this._rules?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._disabled = undefined;
            this._rules.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._disabled = value.disabled;
            this._rules.internalValue = value.rules;
        }
    }
    get disabled() {
        return this.getBooleanAttribute('disabled');
    }
    set disabled(value) {
        this._disabled = value;
    }
    resetDisabled() {
        this._disabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disabledInput() {
        return this._disabled;
    }
    get rules() {
        return this._rules;
    }
    putRules(value) {
        this._rules.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get rulesInput() {
        return this._rules.internalValue;
    }
}
exports.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationOutputReference = ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationOutputReference;
_s = JSII_RTTI_SYMBOL_1;
ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationOutputReference[_s] = { fqn: "@cdktf/provider-aws.chimesdkmediapipelinesMediaInsightsPipelineConfiguration.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationOutputReference", version: "19.15.0" };
function chimesdkmediapipelinesMediaInsightsPipelineConfigurationTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationTimeoutsToTerraform = chimesdkmediapipelinesMediaInsightsPipelineConfigurationTimeoutsToTerraform;
function chimesdkmediapipelinesMediaInsightsPipelineConfigurationTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.chimesdkmediapipelinesMediaInsightsPipelineConfigurationTimeoutsToHclTerraform = chimesdkmediapipelinesMediaInsightsPipelineConfigurationTimeoutsToHclTerraform;
class ChimesdkmediapipelinesMediaInsightsPipelineConfigurationTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationTimeoutsOutputReference = ChimesdkmediapipelinesMediaInsightsPipelineConfigurationTimeoutsOutputReference;
_t = JSII_RTTI_SYMBOL_1;
ChimesdkmediapipelinesMediaInsightsPipelineConfigurationTimeoutsOutputReference[_t] = { fqn: "@cdktf/provider-aws.chimesdkmediapipelinesMediaInsightsPipelineConfiguration.ChimesdkmediapipelinesMediaInsightsPipelineConfigurationTimeoutsOutputReference", version: "19.15.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/chimesdkmediapipelines_media_insights_pipeline_configuration aws_chimesdkmediapipelines_media_insights_pipeline_configuration}
*/
class ChimesdkmediapipelinesMediaInsightsPipelineConfiguration extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a ChimesdkmediapipelinesMediaInsightsPipelineConfiguration resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the ChimesdkmediapipelinesMediaInsightsPipelineConfiguration to import
    * @param importFromId The id of the existing ChimesdkmediapipelinesMediaInsightsPipelineConfiguration that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/chimesdkmediapipelines_media_insights_pipeline_configuration#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the ChimesdkmediapipelinesMediaInsightsPipelineConfiguration to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_chimesdkmediapipelines_media_insights_pipeline_configuration", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/chimesdkmediapipelines_media_insights_pipeline_configuration aws_chimesdkmediapipelines_media_insights_pipeline_configuration} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ChimesdkmediapipelinesMediaInsightsPipelineConfigurationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_chimesdkmediapipelines_media_insights_pipeline_configuration',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // elements - computed: false, optional: false, required: true
        this._elements = new ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsList(this, "elements", false);
        // real_time_alert_configuration - computed: false, optional: true, required: false
        this._realTimeAlertConfiguration = new ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationOutputReference(this, "real_time_alert_configuration");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new ChimesdkmediapipelinesMediaInsightsPipelineConfigurationTimeoutsOutputReference(this, "timeouts");
        this._name = config.name;
        this._resourceAccessRoleArn = config.resourceAccessRoleArn;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._elements.internalValue = config.elements;
        this._realTimeAlertConfiguration.internalValue = config.realTimeAlertConfiguration;
        this._timeouts.internalValue = config.timeouts;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get resourceAccessRoleArn() {
        return this.getStringAttribute('resource_access_role_arn');
    }
    set resourceAccessRoleArn(value) {
        this._resourceAccessRoleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get resourceAccessRoleArnInput() {
        return this._resourceAccessRoleArn;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get elements() {
        return this._elements;
    }
    putElements(value) {
        this._elements.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get elementsInput() {
        return this._elements.internalValue;
    }
    get realTimeAlertConfiguration() {
        return this._realTimeAlertConfiguration;
    }
    putRealTimeAlertConfiguration(value) {
        this._realTimeAlertConfiguration.internalValue = value;
    }
    resetRealTimeAlertConfiguration() {
        this._realTimeAlertConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get realTimeAlertConfigurationInput() {
        return this._realTimeAlertConfiguration.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            name: cdktf.stringToTerraform(this._name),
            resource_access_role_arn: cdktf.stringToTerraform(this._resourceAccessRoleArn),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            elements: cdktf.listMapper(chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsToTerraform, true)(this._elements.internalValue),
            real_time_alert_configuration: chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationToTerraform(this._realTimeAlertConfiguration.internalValue),
            timeouts: chimesdkmediapipelinesMediaInsightsPipelineConfigurationTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            resource_access_role_arn: {
                value: cdktf.stringToHclTerraform(this._resourceAccessRoleArn),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            tags: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tags),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            tags_all: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tagsAll),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            elements: {
                value: cdktf.listMapperHcl(chimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsToHclTerraform, true)(this._elements.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ChimesdkmediapipelinesMediaInsightsPipelineConfigurationElementsList",
            },
            real_time_alert_configuration: {
                value: chimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationToHclTerraform(this._realTimeAlertConfiguration.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ChimesdkmediapipelinesMediaInsightsPipelineConfigurationRealTimeAlertConfigurationList",
            },
            timeouts: {
                value: chimesdkmediapipelinesMediaInsightsPipelineConfigurationTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "ChimesdkmediapipelinesMediaInsightsPipelineConfigurationTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.ChimesdkmediapipelinesMediaInsightsPipelineConfiguration = ChimesdkmediapipelinesMediaInsightsPipelineConfiguration;
_u = JSII_RTTI_SYMBOL_1;
ChimesdkmediapipelinesMediaInsightsPipelineConfiguration[_u] = { fqn: "@cdktf/provider-aws.chimesdkmediapipelinesMediaInsightsPipelineConfiguration.ChimesdkmediapipelinesMediaInsightsPipelineConfiguration", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
ChimesdkmediapipelinesMediaInsightsPipelineConfiguration.tfResourceType = "aws_chimesdkmediapipelines_media_insights_pipeline_configuration";
//# sourceMappingURL=data:application/json;base64,