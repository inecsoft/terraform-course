"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64;
Object.defineProperty(exports, "__esModule", { value: true });
exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOutputReference = exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerToHclTerraform = exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerToTerraform = exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeOutputReference = exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeToHclTerraform = exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeToTerraform = exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeOutputReference = exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeToHclTerraform = exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeToTerraform = exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationOutputReference = exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationToHclTerraform = exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationToTerraform = exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOutputReference = exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerToHclTerraform = exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerToTerraform = exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeOutputReference = exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeToHclTerraform = exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeToTerraform = exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeOutputReference = exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeToHclTerraform = exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeToTerraform = exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsOutputReference = exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsToHclTerraform = exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsToTerraform = exports.KinesisFirehoseDeliveryStreamElasticsearchConfigurationOutputReference = exports.kinesisFirehoseDeliveryStreamElasticsearchConfigurationToHclTerraform = exports.kinesisFirehoseDeliveryStreamElasticsearchConfigurationToTerraform = exports.KinesisFirehoseDeliveryStreamElasticsearchConfigurationVpcConfigOutputReference = exports.kinesisFirehoseDeliveryStreamElasticsearchConfigurationVpcConfigToHclTerraform = exports.kinesisFirehoseDeliveryStreamElasticsearchConfigurationVpcConfigToTerraform = exports.KinesisFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationOutputReference = exports.kinesisFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationToHclTerraform = exports.kinesisFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationToTerraform = exports.KinesisFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference = exports.kinesisFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsToHclTerraform = exports.kinesisFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform = exports.KinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationOutputReference = exports.kinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationToHclTerraform = exports.kinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationToTerraform = exports.KinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsList = exports.KinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsOutputReference = exports.kinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsToHclTerraform = exports.kinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsToTerraform = exports.KinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsParametersList = exports.KinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsParametersOutputReference = exports.kinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsParametersToHclTerraform = exports.kinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsParametersToTerraform = exports.KinesisFirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsOutputReference = exports.kinesisFirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsToHclTerraform = exports.kinesisFirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsToTerraform = void 0;
exports.KinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributesList = exports.KinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributesOutputReference = exports.kinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributesToHclTerraform = exports.kinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributesToTerraform = exports.KinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationOutputReference = exports.kinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationToHclTerraform = exports.kinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationToTerraform = exports.KinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsList = exports.KinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsOutputReference = exports.kinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsToHclTerraform = exports.kinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsToTerraform = exports.KinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsParametersList = exports.KinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsParametersOutputReference = exports.kinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsParametersToHclTerraform = exports.kinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsParametersToTerraform = exports.KinesisFirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsOutputReference = exports.kinesisFirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsToHclTerraform = exports.kinesisFirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsToTerraform = exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationOutputReference = exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationToHclTerraform = exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationToTerraform = exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationOutputReference = exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationToHclTerraform = exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationToTerraform = exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutputReference = exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsToHclTerraform = exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsToTerraform = exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationOutputReference = exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationToHclTerraform = exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationToTerraform = exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsList = exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsOutputReference = exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsToHclTerraform = exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsToTerraform = exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsParametersList = exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsParametersOutputReference = exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsParametersToHclTerraform = exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsParametersToTerraform = exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationOutputReference = exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationToHclTerraform = exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationToTerraform = exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputReference = exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationToHclTerraform = exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationToTerraform = exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationOutputReference = exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationToHclTerraform = exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationToTerraform = exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationOutputReference = exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationToHclTerraform = exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationToTerraform = void 0;
exports.KinesisFirehoseDeliveryStreamOpensearchConfigurationOutputReference = exports.kinesisFirehoseDeliveryStreamOpensearchConfigurationToHclTerraform = exports.kinesisFirehoseDeliveryStreamOpensearchConfigurationToTerraform = exports.KinesisFirehoseDeliveryStreamOpensearchConfigurationVpcConfigOutputReference = exports.kinesisFirehoseDeliveryStreamOpensearchConfigurationVpcConfigToHclTerraform = exports.kinesisFirehoseDeliveryStreamOpensearchConfigurationVpcConfigToTerraform = exports.KinesisFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationOutputReference = exports.kinesisFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationToHclTerraform = exports.kinesisFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationToTerraform = exports.KinesisFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference = exports.kinesisFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsToHclTerraform = exports.kinesisFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform = exports.KinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationOutputReference = exports.kinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationToHclTerraform = exports.kinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationToTerraform = exports.KinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsList = exports.KinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsOutputReference = exports.kinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsToHclTerraform = exports.kinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsToTerraform = exports.KinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsParametersList = exports.KinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsParametersOutputReference = exports.kinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsParametersToHclTerraform = exports.kinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsParametersToTerraform = exports.KinesisFirehoseDeliveryStreamOpensearchConfigurationDocumentIdOptionsOutputReference = exports.kinesisFirehoseDeliveryStreamOpensearchConfigurationDocumentIdOptionsToHclTerraform = exports.kinesisFirehoseDeliveryStreamOpensearchConfigurationDocumentIdOptionsToTerraform = exports.KinesisFirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsOutputReference = exports.kinesisFirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsToHclTerraform = exports.kinesisFirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsToTerraform = exports.KinesisFirehoseDeliveryStreamMskSourceConfigurationOutputReference = exports.kinesisFirehoseDeliveryStreamMskSourceConfigurationToHclTerraform = exports.kinesisFirehoseDeliveryStreamMskSourceConfigurationToTerraform = exports.KinesisFirehoseDeliveryStreamMskSourceConfigurationAuthenticationConfigurationOutputReference = exports.kinesisFirehoseDeliveryStreamMskSourceConfigurationAuthenticationConfigurationToHclTerraform = exports.kinesisFirehoseDeliveryStreamMskSourceConfigurationAuthenticationConfigurationToTerraform = exports.KinesisFirehoseDeliveryStreamKinesisSourceConfigurationOutputReference = exports.kinesisFirehoseDeliveryStreamKinesisSourceConfigurationToHclTerraform = exports.kinesisFirehoseDeliveryStreamKinesisSourceConfigurationToTerraform = exports.KinesisFirehoseDeliveryStreamHttpEndpointConfigurationOutputReference = exports.kinesisFirehoseDeliveryStreamHttpEndpointConfigurationToHclTerraform = exports.kinesisFirehoseDeliveryStreamHttpEndpointConfigurationToTerraform = exports.KinesisFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationOutputReference = exports.kinesisFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationToHclTerraform = exports.kinesisFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationToTerraform = exports.KinesisFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference = exports.kinesisFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsToHclTerraform = exports.kinesisFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform = exports.KinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationOutputReference = exports.kinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationToHclTerraform = exports.kinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationToTerraform = void 0;
exports.kinesisFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationToTerraform = exports.KinesisFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference = exports.kinesisFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsToHclTerraform = exports.kinesisFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform = exports.KinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationOutputReference = exports.kinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationToHclTerraform = exports.kinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationToTerraform = exports.KinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutputReference = exports.kinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsToHclTerraform = exports.kinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsToTerraform = exports.KinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationOutputReference = exports.kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationToHclTerraform = exports.kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationToTerraform = exports.KinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsList = exports.KinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsOutputReference = exports.kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsToHclTerraform = exports.kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsToTerraform = exports.KinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsParametersList = exports.KinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsParametersOutputReference = exports.kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsParametersToHclTerraform = exports.kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsParametersToTerraform = exports.KinesisFirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsOutputReference = exports.kinesisFirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsToHclTerraform = exports.kinesisFirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsToTerraform = exports.KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationOutputReference = exports.kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationToHclTerraform = exports.kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationToTerraform = exports.KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationVpcConfigOutputReference = exports.kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationVpcConfigToHclTerraform = exports.kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationVpcConfigToTerraform = exports.KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationS3ConfigurationOutputReference = exports.kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationS3ConfigurationToHclTerraform = exports.kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationS3ConfigurationToTerraform = exports.KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference = exports.kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptionsToHclTerraform = exports.kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform = exports.KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationOutputReference = exports.kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationToHclTerraform = exports.kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationToTerraform = exports.KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsList = exports.KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsOutputReference = exports.kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsToHclTerraform = exports.kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsToTerraform = exports.KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsParametersList = exports.KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsParametersOutputReference = exports.kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsParametersToHclTerraform = exports.kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsParametersToTerraform = exports.KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationCloudwatchLoggingOptionsOutputReference = exports.kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationCloudwatchLoggingOptionsToHclTerraform = exports.kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationCloudwatchLoggingOptionsToTerraform = void 0;
exports.KinesisFirehoseDeliveryStream = exports.KinesisFirehoseDeliveryStreamTimeoutsOutputReference = exports.kinesisFirehoseDeliveryStreamTimeoutsToHclTerraform = exports.kinesisFirehoseDeliveryStreamTimeoutsToTerraform = exports.KinesisFirehoseDeliveryStreamSplunkConfigurationOutputReference = exports.kinesisFirehoseDeliveryStreamSplunkConfigurationToHclTerraform = exports.kinesisFirehoseDeliveryStreamSplunkConfigurationToTerraform = exports.KinesisFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationOutputReference = exports.kinesisFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationToHclTerraform = exports.kinesisFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationToTerraform = exports.KinesisFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference = exports.kinesisFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsToHclTerraform = exports.kinesisFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform = exports.KinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationOutputReference = exports.kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationToHclTerraform = exports.kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationToTerraform = exports.KinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsList = exports.KinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsOutputReference = exports.kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsToHclTerraform = exports.kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsToTerraform = exports.KinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsParametersList = exports.KinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsParametersOutputReference = exports.kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsParametersToHclTerraform = exports.kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsParametersToTerraform = exports.KinesisFirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsOutputReference = exports.kinesisFirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsToHclTerraform = exports.kinesisFirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsToTerraform = exports.KinesisFirehoseDeliveryStreamServerSideEncryptionOutputReference = exports.kinesisFirehoseDeliveryStreamServerSideEncryptionToHclTerraform = exports.kinesisFirehoseDeliveryStreamServerSideEncryptionToTerraform = exports.KinesisFirehoseDeliveryStreamRedshiftConfigurationOutputReference = exports.kinesisFirehoseDeliveryStreamRedshiftConfigurationToHclTerraform = exports.kinesisFirehoseDeliveryStreamRedshiftConfigurationToTerraform = exports.KinesisFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationOutputReference = exports.kinesisFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationToHclTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function kinesisFirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_stream_name: cdktf.stringToTerraform(struct.logStreamName),
    };
}
exports.kinesisFirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsToTerraform = kinesisFirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsToTerraform;
function kinesisFirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        log_group_name: {
            value: cdktf.stringToHclTerraform(struct.logGroupName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        log_stream_name: {
            value: cdktf.stringToHclTerraform(struct.logStreamName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsToHclTerraform = kinesisFirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsToHclTerraform;
class KinesisFirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._logGroupName !== undefined) {
            hasAnyValues = true;
            internalValueResult.logGroupName = this._logGroupName;
        }
        if (this._logStreamName !== undefined) {
            hasAnyValues = true;
            internalValueResult.logStreamName = this._logStreamName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._logGroupName = undefined;
            this._logStreamName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._logGroupName = value.logGroupName;
            this._logStreamName = value.logStreamName;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get logGroupName() {
        return this.getStringAttribute('log_group_name');
    }
    set logGroupName(value) {
        this._logGroupName = value;
    }
    resetLogGroupName() {
        this._logGroupName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logGroupNameInput() {
        return this._logGroupName;
    }
    get logStreamName() {
        return this.getStringAttribute('log_stream_name');
    }
    set logStreamName(value) {
        this._logStreamName = value;
    }
    resetLogStreamName() {
        this._logStreamName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logStreamNameInput() {
        return this._logStreamName;
    }
}
exports.KinesisFirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsOutputReference = KinesisFirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsOutputReference[_a] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        parameter_name: cdktf.stringToTerraform(struct.parameterName),
        parameter_value: cdktf.stringToTerraform(struct.parameterValue),
    };
}
exports.kinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsParametersToTerraform = kinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsParametersToTerraform;
function kinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsParametersToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        parameter_name: {
            value: cdktf.stringToHclTerraform(struct.parameterName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        parameter_value: {
            value: cdktf.stringToHclTerraform(struct.parameterValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsParametersToHclTerraform = kinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsParametersToHclTerraform;
class KinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsParametersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._parameterName !== undefined) {
            hasAnyValues = true;
            internalValueResult.parameterName = this._parameterName;
        }
        if (this._parameterValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.parameterValue = this._parameterValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._parameterName = undefined;
            this._parameterValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._parameterName = value.parameterName;
            this._parameterValue = value.parameterValue;
        }
    }
    get parameterName() {
        return this.getStringAttribute('parameter_name');
    }
    set parameterName(value) {
        this._parameterName = value;
    }
    // Temporarily expose input value. Use with caution.
    get parameterNameInput() {
        return this._parameterName;
    }
    get parameterValue() {
        return this.getStringAttribute('parameter_value');
    }
    set parameterValue(value) {
        this._parameterValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get parameterValueInput() {
        return this._parameterValue;
    }
}
exports.KinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsParametersOutputReference = KinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsParametersOutputReference;
_b = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsParametersOutputReference[_b] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsParametersOutputReference", version: "19.15.0" };
class KinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsParametersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new KinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsParametersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.KinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsParametersList = KinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsParametersList;
_c = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsParametersList[_c] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsParametersList", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        type: cdktf.stringToTerraform(struct.type),
        parameters: cdktf.listMapper(kinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsParametersToTerraform, true)(struct.parameters),
    };
}
exports.kinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsToTerraform = kinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsToTerraform;
function kinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        type: {
            value: cdktf.stringToHclTerraform(struct.type),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        parameters: {
            value: cdktf.listMapperHcl(kinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsParametersToHclTerraform, true)(struct.parameters),
            isBlock: true,
            type: "set",
            storageClassType: "KinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsParametersList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsToHclTerraform = kinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsToHclTerraform;
class KinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // parameters - computed: false, optional: true, required: false
        this._parameters = new KinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsParametersList(this, "parameters", true);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        if (this._parameters?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.parameters = this._parameters?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._type = undefined;
            this._parameters.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._type = value.type;
            this._parameters.internalValue = value.parameters;
        }
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get parameters() {
        return this._parameters;
    }
    putParameters(value) {
        this._parameters.internalValue = value;
    }
    resetParameters() {
        this._parameters.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parametersInput() {
        return this._parameters.internalValue;
    }
}
exports.KinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsOutputReference = KinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsOutputReference;
_d = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsOutputReference[_d] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsOutputReference", version: "19.15.0" };
class KinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new KinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.KinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsList = KinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsList;
_e = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsList[_e] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsList", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        processors: cdktf.listMapper(kinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsToTerraform, true)(struct.processors),
    };
}
exports.kinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationToTerraform = kinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationToTerraform;
function kinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        processors: {
            value: cdktf.listMapperHcl(kinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsToHclTerraform, true)(struct.processors),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationToHclTerraform = kinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationToHclTerraform;
class KinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // processors - computed: false, optional: true, required: false
        this._processors = new KinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorsList(this, "processors", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._processors?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.processors = this._processors?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._processors.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._processors.internalValue = value.processors;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get processors() {
        return this._processors;
    }
    putProcessors(value) {
        this._processors.internalValue = value;
    }
    resetProcessors() {
        this._processors.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get processorsInput() {
        return this._processors.internalValue;
    }
}
exports.KinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationOutputReference = KinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationOutputReference;
_f = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationOutputReference[_f] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_stream_name: cdktf.stringToTerraform(struct.logStreamName),
    };
}
exports.kinesisFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform = kinesisFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform;
function kinesisFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        log_group_name: {
            value: cdktf.stringToHclTerraform(struct.logGroupName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        log_stream_name: {
            value: cdktf.stringToHclTerraform(struct.logStreamName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsToHclTerraform = kinesisFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsToHclTerraform;
class KinesisFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._logGroupName !== undefined) {
            hasAnyValues = true;
            internalValueResult.logGroupName = this._logGroupName;
        }
        if (this._logStreamName !== undefined) {
            hasAnyValues = true;
            internalValueResult.logStreamName = this._logStreamName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._logGroupName = undefined;
            this._logStreamName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._logGroupName = value.logGroupName;
            this._logStreamName = value.logStreamName;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get logGroupName() {
        return this.getStringAttribute('log_group_name');
    }
    set logGroupName(value) {
        this._logGroupName = value;
    }
    resetLogGroupName() {
        this._logGroupName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logGroupNameInput() {
        return this._logGroupName;
    }
    get logStreamName() {
        return this.getStringAttribute('log_stream_name');
    }
    set logStreamName(value) {
        this._logStreamName = value;
    }
    resetLogStreamName() {
        this._logStreamName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logStreamNameInput() {
        return this._logStreamName;
    }
}
exports.KinesisFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference = KinesisFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference;
_g = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference[_g] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_arn: cdktf.stringToTerraform(struct.bucketArn),
        buffering_interval: cdktf.numberToTerraform(struct.bufferingInterval),
        buffering_size: cdktf.numberToTerraform(struct.bufferingSize),
        compression_format: cdktf.stringToTerraform(struct.compressionFormat),
        error_output_prefix: cdktf.stringToTerraform(struct.errorOutputPrefix),
        kms_key_arn: cdktf.stringToTerraform(struct.kmsKeyArn),
        prefix: cdktf.stringToTerraform(struct.prefix),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        cloudwatch_logging_options: kinesisFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform(struct.cloudwatchLoggingOptions),
    };
}
exports.kinesisFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationToTerraform = kinesisFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationToTerraform;
function kinesisFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bucket_arn: {
            value: cdktf.stringToHclTerraform(struct.bucketArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        buffering_interval: {
            value: cdktf.numberToHclTerraform(struct.bufferingInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        buffering_size: {
            value: cdktf.numberToHclTerraform(struct.bufferingSize),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        compression_format: {
            value: cdktf.stringToHclTerraform(struct.compressionFormat),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        error_output_prefix: {
            value: cdktf.stringToHclTerraform(struct.errorOutputPrefix),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        kms_key_arn: {
            value: cdktf.stringToHclTerraform(struct.kmsKeyArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        prefix: {
            value: cdktf.stringToHclTerraform(struct.prefix),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        role_arn: {
            value: cdktf.stringToHclTerraform(struct.roleArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cloudwatch_logging_options: {
            value: kinesisFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsToHclTerraform(struct.cloudwatchLoggingOptions),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationToHclTerraform = kinesisFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationToHclTerraform;
class KinesisFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cloudwatch_logging_options - computed: false, optional: true, required: false
        this._cloudwatchLoggingOptions = new KinesisFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference(this, "cloudwatch_logging_options");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketArn = this._bucketArn;
        }
        if (this._bufferingInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufferingInterval = this._bufferingInterval;
        }
        if (this._bufferingSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufferingSize = this._bufferingSize;
        }
        if (this._compressionFormat !== undefined) {
            hasAnyValues = true;
            internalValueResult.compressionFormat = this._compressionFormat;
        }
        if (this._errorOutputPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.errorOutputPrefix = this._errorOutputPrefix;
        }
        if (this._kmsKeyArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyArn = this._kmsKeyArn;
        }
        if (this._prefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefix = this._prefix;
        }
        if (this._roleArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.roleArn = this._roleArn;
        }
        if (this._cloudwatchLoggingOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudwatchLoggingOptions = this._cloudwatchLoggingOptions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketArn = undefined;
            this._bufferingInterval = undefined;
            this._bufferingSize = undefined;
            this._compressionFormat = undefined;
            this._errorOutputPrefix = undefined;
            this._kmsKeyArn = undefined;
            this._prefix = undefined;
            this._roleArn = undefined;
            this._cloudwatchLoggingOptions.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketArn = value.bucketArn;
            this._bufferingInterval = value.bufferingInterval;
            this._bufferingSize = value.bufferingSize;
            this._compressionFormat = value.compressionFormat;
            this._errorOutputPrefix = value.errorOutputPrefix;
            this._kmsKeyArn = value.kmsKeyArn;
            this._prefix = value.prefix;
            this._roleArn = value.roleArn;
            this._cloudwatchLoggingOptions.internalValue = value.cloudwatchLoggingOptions;
        }
    }
    get bucketArn() {
        return this.getStringAttribute('bucket_arn');
    }
    set bucketArn(value) {
        this._bucketArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketArnInput() {
        return this._bucketArn;
    }
    get bufferingInterval() {
        return this.getNumberAttribute('buffering_interval');
    }
    set bufferingInterval(value) {
        this._bufferingInterval = value;
    }
    resetBufferingInterval() {
        this._bufferingInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufferingIntervalInput() {
        return this._bufferingInterval;
    }
    get bufferingSize() {
        return this.getNumberAttribute('buffering_size');
    }
    set bufferingSize(value) {
        this._bufferingSize = value;
    }
    resetBufferingSize() {
        this._bufferingSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufferingSizeInput() {
        return this._bufferingSize;
    }
    get compressionFormat() {
        return this.getStringAttribute('compression_format');
    }
    set compressionFormat(value) {
        this._compressionFormat = value;
    }
    resetCompressionFormat() {
        this._compressionFormat = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get compressionFormatInput() {
        return this._compressionFormat;
    }
    get errorOutputPrefix() {
        return this.getStringAttribute('error_output_prefix');
    }
    set errorOutputPrefix(value) {
        this._errorOutputPrefix = value;
    }
    resetErrorOutputPrefix() {
        this._errorOutputPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get errorOutputPrefixInput() {
        return this._errorOutputPrefix;
    }
    get kmsKeyArn() {
        return this.getStringAttribute('kms_key_arn');
    }
    set kmsKeyArn(value) {
        this._kmsKeyArn = value;
    }
    resetKmsKeyArn() {
        this._kmsKeyArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyArnInput() {
        return this._kmsKeyArn;
    }
    get prefix() {
        return this.getStringAttribute('prefix');
    }
    set prefix(value) {
        this._prefix = value;
    }
    resetPrefix() {
        this._prefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prefixInput() {
        return this._prefix;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get cloudwatchLoggingOptions() {
        return this._cloudwatchLoggingOptions;
    }
    putCloudwatchLoggingOptions(value) {
        this._cloudwatchLoggingOptions.internalValue = value;
    }
    resetCloudwatchLoggingOptions() {
        this._cloudwatchLoggingOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudwatchLoggingOptionsInput() {
        return this._cloudwatchLoggingOptions.internalValue;
    }
}
exports.KinesisFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationOutputReference = KinesisFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationOutputReference;
_h = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationOutputReference[_h] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamElasticsearchConfigurationVpcConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        security_group_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.securityGroupIds),
        subnet_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.subnetIds),
    };
}
exports.kinesisFirehoseDeliveryStreamElasticsearchConfigurationVpcConfigToTerraform = kinesisFirehoseDeliveryStreamElasticsearchConfigurationVpcConfigToTerraform;
function kinesisFirehoseDeliveryStreamElasticsearchConfigurationVpcConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        role_arn: {
            value: cdktf.stringToHclTerraform(struct.roleArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        security_group_ids: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.securityGroupIds),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        subnet_ids: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.subnetIds),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamElasticsearchConfigurationVpcConfigToHclTerraform = kinesisFirehoseDeliveryStreamElasticsearchConfigurationVpcConfigToHclTerraform;
class KinesisFirehoseDeliveryStreamElasticsearchConfigurationVpcConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._roleArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.roleArn = this._roleArn;
        }
        if (this._securityGroupIds !== undefined) {
            hasAnyValues = true;
            internalValueResult.securityGroupIds = this._securityGroupIds;
        }
        if (this._subnetIds !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnetIds = this._subnetIds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._roleArn = undefined;
            this._securityGroupIds = undefined;
            this._subnetIds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._roleArn = value.roleArn;
            this._securityGroupIds = value.securityGroupIds;
            this._subnetIds = value.subnetIds;
        }
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get securityGroupIds() {
        return cdktf.Fn.tolist(this.getListAttribute('security_group_ids'));
    }
    set securityGroupIds(value) {
        this._securityGroupIds = value;
    }
    // Temporarily expose input value. Use with caution.
    get securityGroupIdsInput() {
        return this._securityGroupIds;
    }
    get subnetIds() {
        return cdktf.Fn.tolist(this.getListAttribute('subnet_ids'));
    }
    set subnetIds(value) {
        this._subnetIds = value;
    }
    // Temporarily expose input value. Use with caution.
    get subnetIdsInput() {
        return this._subnetIds;
    }
    // vpc_id - computed: true, optional: false, required: false
    get vpcId() {
        return this.getStringAttribute('vpc_id');
    }
}
exports.KinesisFirehoseDeliveryStreamElasticsearchConfigurationVpcConfigOutputReference = KinesisFirehoseDeliveryStreamElasticsearchConfigurationVpcConfigOutputReference;
_j = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamElasticsearchConfigurationVpcConfigOutputReference[_j] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamElasticsearchConfigurationVpcConfigOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamElasticsearchConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        buffering_interval: cdktf.numberToTerraform(struct.bufferingInterval),
        buffering_size: cdktf.numberToTerraform(struct.bufferingSize),
        cluster_endpoint: cdktf.stringToTerraform(struct.clusterEndpoint),
        domain_arn: cdktf.stringToTerraform(struct.domainArn),
        index_name: cdktf.stringToTerraform(struct.indexName),
        index_rotation_period: cdktf.stringToTerraform(struct.indexRotationPeriod),
        retry_duration: cdktf.numberToTerraform(struct.retryDuration),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        s3_backup_mode: cdktf.stringToTerraform(struct.s3BackupMode),
        type_name: cdktf.stringToTerraform(struct.typeName),
        cloudwatch_logging_options: kinesisFirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsToTerraform(struct.cloudwatchLoggingOptions),
        processing_configuration: kinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationToTerraform(struct.processingConfiguration),
        s3_configuration: kinesisFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationToTerraform(struct.s3Configuration),
        vpc_config: kinesisFirehoseDeliveryStreamElasticsearchConfigurationVpcConfigToTerraform(struct.vpcConfig),
    };
}
exports.kinesisFirehoseDeliveryStreamElasticsearchConfigurationToTerraform = kinesisFirehoseDeliveryStreamElasticsearchConfigurationToTerraform;
function kinesisFirehoseDeliveryStreamElasticsearchConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        buffering_interval: {
            value: cdktf.numberToHclTerraform(struct.bufferingInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        buffering_size: {
            value: cdktf.numberToHclTerraform(struct.bufferingSize),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        cluster_endpoint: {
            value: cdktf.stringToHclTerraform(struct.clusterEndpoint),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        domain_arn: {
            value: cdktf.stringToHclTerraform(struct.domainArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        index_name: {
            value: cdktf.stringToHclTerraform(struct.indexName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        index_rotation_period: {
            value: cdktf.stringToHclTerraform(struct.indexRotationPeriod),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        retry_duration: {
            value: cdktf.numberToHclTerraform(struct.retryDuration),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        role_arn: {
            value: cdktf.stringToHclTerraform(struct.roleArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        s3_backup_mode: {
            value: cdktf.stringToHclTerraform(struct.s3BackupMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        type_name: {
            value: cdktf.stringToHclTerraform(struct.typeName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cloudwatch_logging_options: {
            value: kinesisFirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsToHclTerraform(struct.cloudwatchLoggingOptions),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsList",
        },
        processing_configuration: {
            value: kinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationToHclTerraform(struct.processingConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationList",
        },
        s3_configuration: {
            value: kinesisFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationToHclTerraform(struct.s3Configuration),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationList",
        },
        vpc_config: {
            value: kinesisFirehoseDeliveryStreamElasticsearchConfigurationVpcConfigToHclTerraform(struct.vpcConfig),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamElasticsearchConfigurationVpcConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamElasticsearchConfigurationToHclTerraform = kinesisFirehoseDeliveryStreamElasticsearchConfigurationToHclTerraform;
class KinesisFirehoseDeliveryStreamElasticsearchConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cloudwatch_logging_options - computed: false, optional: true, required: false
        this._cloudwatchLoggingOptions = new KinesisFirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptionsOutputReference(this, "cloudwatch_logging_options");
        // processing_configuration - computed: false, optional: true, required: false
        this._processingConfiguration = new KinesisFirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationOutputReference(this, "processing_configuration");
        // s3_configuration - computed: false, optional: false, required: true
        this._s3Configuration = new KinesisFirehoseDeliveryStreamElasticsearchConfigurationS3ConfigurationOutputReference(this, "s3_configuration");
        // vpc_config - computed: false, optional: true, required: false
        this._vpcConfig = new KinesisFirehoseDeliveryStreamElasticsearchConfigurationVpcConfigOutputReference(this, "vpc_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bufferingInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufferingInterval = this._bufferingInterval;
        }
        if (this._bufferingSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufferingSize = this._bufferingSize;
        }
        if (this._clusterEndpoint !== undefined) {
            hasAnyValues = true;
            internalValueResult.clusterEndpoint = this._clusterEndpoint;
        }
        if (this._domainArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.domainArn = this._domainArn;
        }
        if (this._indexName !== undefined) {
            hasAnyValues = true;
            internalValueResult.indexName = this._indexName;
        }
        if (this._indexRotationPeriod !== undefined) {
            hasAnyValues = true;
            internalValueResult.indexRotationPeriod = this._indexRotationPeriod;
        }
        if (this._retryDuration !== undefined) {
            hasAnyValues = true;
            internalValueResult.retryDuration = this._retryDuration;
        }
        if (this._roleArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.roleArn = this._roleArn;
        }
        if (this._s3BackupMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3BackupMode = this._s3BackupMode;
        }
        if (this._typeName !== undefined) {
            hasAnyValues = true;
            internalValueResult.typeName = this._typeName;
        }
        if (this._cloudwatchLoggingOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudwatchLoggingOptions = this._cloudwatchLoggingOptions?.internalValue;
        }
        if (this._processingConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.processingConfiguration = this._processingConfiguration?.internalValue;
        }
        if (this._s3Configuration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3Configuration = this._s3Configuration?.internalValue;
        }
        if (this._vpcConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.vpcConfig = this._vpcConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bufferingInterval = undefined;
            this._bufferingSize = undefined;
            this._clusterEndpoint = undefined;
            this._domainArn = undefined;
            this._indexName = undefined;
            this._indexRotationPeriod = undefined;
            this._retryDuration = undefined;
            this._roleArn = undefined;
            this._s3BackupMode = undefined;
            this._typeName = undefined;
            this._cloudwatchLoggingOptions.internalValue = undefined;
            this._processingConfiguration.internalValue = undefined;
            this._s3Configuration.internalValue = undefined;
            this._vpcConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bufferingInterval = value.bufferingInterval;
            this._bufferingSize = value.bufferingSize;
            this._clusterEndpoint = value.clusterEndpoint;
            this._domainArn = value.domainArn;
            this._indexName = value.indexName;
            this._indexRotationPeriod = value.indexRotationPeriod;
            this._retryDuration = value.retryDuration;
            this._roleArn = value.roleArn;
            this._s3BackupMode = value.s3BackupMode;
            this._typeName = value.typeName;
            this._cloudwatchLoggingOptions.internalValue = value.cloudwatchLoggingOptions;
            this._processingConfiguration.internalValue = value.processingConfiguration;
            this._s3Configuration.internalValue = value.s3Configuration;
            this._vpcConfig.internalValue = value.vpcConfig;
        }
    }
    get bufferingInterval() {
        return this.getNumberAttribute('buffering_interval');
    }
    set bufferingInterval(value) {
        this._bufferingInterval = value;
    }
    resetBufferingInterval() {
        this._bufferingInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufferingIntervalInput() {
        return this._bufferingInterval;
    }
    get bufferingSize() {
        return this.getNumberAttribute('buffering_size');
    }
    set bufferingSize(value) {
        this._bufferingSize = value;
    }
    resetBufferingSize() {
        this._bufferingSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufferingSizeInput() {
        return this._bufferingSize;
    }
    get clusterEndpoint() {
        return this.getStringAttribute('cluster_endpoint');
    }
    set clusterEndpoint(value) {
        this._clusterEndpoint = value;
    }
    resetClusterEndpoint() {
        this._clusterEndpoint = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clusterEndpointInput() {
        return this._clusterEndpoint;
    }
    get domainArn() {
        return this.getStringAttribute('domain_arn');
    }
    set domainArn(value) {
        this._domainArn = value;
    }
    resetDomainArn() {
        this._domainArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get domainArnInput() {
        return this._domainArn;
    }
    get indexName() {
        return this.getStringAttribute('index_name');
    }
    set indexName(value) {
        this._indexName = value;
    }
    // Temporarily expose input value. Use with caution.
    get indexNameInput() {
        return this._indexName;
    }
    get indexRotationPeriod() {
        return this.getStringAttribute('index_rotation_period');
    }
    set indexRotationPeriod(value) {
        this._indexRotationPeriod = value;
    }
    resetIndexRotationPeriod() {
        this._indexRotationPeriod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get indexRotationPeriodInput() {
        return this._indexRotationPeriod;
    }
    get retryDuration() {
        return this.getNumberAttribute('retry_duration');
    }
    set retryDuration(value) {
        this._retryDuration = value;
    }
    resetRetryDuration() {
        this._retryDuration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retryDurationInput() {
        return this._retryDuration;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get s3BackupMode() {
        return this.getStringAttribute('s3_backup_mode');
    }
    set s3BackupMode(value) {
        this._s3BackupMode = value;
    }
    resetS3BackupMode() {
        this._s3BackupMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3BackupModeInput() {
        return this._s3BackupMode;
    }
    get typeName() {
        return this.getStringAttribute('type_name');
    }
    set typeName(value) {
        this._typeName = value;
    }
    resetTypeName() {
        this._typeName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typeNameInput() {
        return this._typeName;
    }
    get cloudwatchLoggingOptions() {
        return this._cloudwatchLoggingOptions;
    }
    putCloudwatchLoggingOptions(value) {
        this._cloudwatchLoggingOptions.internalValue = value;
    }
    resetCloudwatchLoggingOptions() {
        this._cloudwatchLoggingOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudwatchLoggingOptionsInput() {
        return this._cloudwatchLoggingOptions.internalValue;
    }
    get processingConfiguration() {
        return this._processingConfiguration;
    }
    putProcessingConfiguration(value) {
        this._processingConfiguration.internalValue = value;
    }
    resetProcessingConfiguration() {
        this._processingConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get processingConfigurationInput() {
        return this._processingConfiguration.internalValue;
    }
    get s3Configuration() {
        return this._s3Configuration;
    }
    putS3Configuration(value) {
        this._s3Configuration.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get s3ConfigurationInput() {
        return this._s3Configuration.internalValue;
    }
    get vpcConfig() {
        return this._vpcConfig;
    }
    putVpcConfig(value) {
        this._vpcConfig.internalValue = value;
    }
    resetVpcConfig() {
        this._vpcConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vpcConfigInput() {
        return this._vpcConfig.internalValue;
    }
}
exports.KinesisFirehoseDeliveryStreamElasticsearchConfigurationOutputReference = KinesisFirehoseDeliveryStreamElasticsearchConfigurationOutputReference;
_k = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamElasticsearchConfigurationOutputReference[_k] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamElasticsearchConfigurationOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_stream_name: cdktf.stringToTerraform(struct.logStreamName),
    };
}
exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsToTerraform = kinesisFirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsToTerraform;
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        log_group_name: {
            value: cdktf.stringToHclTerraform(struct.logGroupName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        log_stream_name: {
            value: cdktf.stringToHclTerraform(struct.logStreamName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsToHclTerraform = kinesisFirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsToHclTerraform;
class KinesisFirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._logGroupName !== undefined) {
            hasAnyValues = true;
            internalValueResult.logGroupName = this._logGroupName;
        }
        if (this._logStreamName !== undefined) {
            hasAnyValues = true;
            internalValueResult.logStreamName = this._logStreamName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._logGroupName = undefined;
            this._logStreamName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._logGroupName = value.logGroupName;
            this._logStreamName = value.logStreamName;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get logGroupName() {
        return this.getStringAttribute('log_group_name');
    }
    set logGroupName(value) {
        this._logGroupName = value;
    }
    resetLogGroupName() {
        this._logGroupName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logGroupNameInput() {
        return this._logGroupName;
    }
    get logStreamName() {
        return this.getStringAttribute('log_stream_name');
    }
    set logStreamName(value) {
        this._logStreamName = value;
    }
    resetLogStreamName() {
        this._logStreamName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logStreamNameInput() {
        return this._logStreamName;
    }
}
exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsOutputReference = KinesisFirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsOutputReference;
_l = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsOutputReference[_l] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        timestamp_formats: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.timestampFormats),
    };
}
exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeToTerraform = kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeToTerraform;
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        timestamp_formats: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.timestampFormats),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeToHclTerraform = kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeToHclTerraform;
class KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._timestampFormats !== undefined) {
            hasAnyValues = true;
            internalValueResult.timestampFormats = this._timestampFormats;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._timestampFormats = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._timestampFormats = value.timestampFormats;
        }
    }
    get timestampFormats() {
        return this.getListAttribute('timestamp_formats');
    }
    set timestampFormats(value) {
        this._timestampFormats = value;
    }
    resetTimestampFormats() {
        this._timestampFormats = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timestampFormatsInput() {
        return this._timestampFormats;
    }
}
exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeOutputReference = KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeOutputReference;
_m = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeOutputReference[_m] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        case_insensitive: cdktf.booleanToTerraform(struct.caseInsensitive),
        column_to_json_key_mappings: cdktf.hashMapper(cdktf.stringToTerraform)(struct.columnToJsonKeyMappings),
        convert_dots_in_json_keys_to_underscores: cdktf.booleanToTerraform(struct.convertDotsInJsonKeysToUnderscores),
    };
}
exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeToTerraform = kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeToTerraform;
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        case_insensitive: {
            value: cdktf.booleanToHclTerraform(struct.caseInsensitive),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        column_to_json_key_mappings: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.columnToJsonKeyMappings),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        convert_dots_in_json_keys_to_underscores: {
            value: cdktf.booleanToHclTerraform(struct.convertDotsInJsonKeysToUnderscores),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeToHclTerraform = kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeToHclTerraform;
class KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._caseInsensitive !== undefined) {
            hasAnyValues = true;
            internalValueResult.caseInsensitive = this._caseInsensitive;
        }
        if (this._columnToJsonKeyMappings !== undefined) {
            hasAnyValues = true;
            internalValueResult.columnToJsonKeyMappings = this._columnToJsonKeyMappings;
        }
        if (this._convertDotsInJsonKeysToUnderscores !== undefined) {
            hasAnyValues = true;
            internalValueResult.convertDotsInJsonKeysToUnderscores = this._convertDotsInJsonKeysToUnderscores;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._caseInsensitive = undefined;
            this._columnToJsonKeyMappings = undefined;
            this._convertDotsInJsonKeysToUnderscores = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._caseInsensitive = value.caseInsensitive;
            this._columnToJsonKeyMappings = value.columnToJsonKeyMappings;
            this._convertDotsInJsonKeysToUnderscores = value.convertDotsInJsonKeysToUnderscores;
        }
    }
    get caseInsensitive() {
        return this.getBooleanAttribute('case_insensitive');
    }
    set caseInsensitive(value) {
        this._caseInsensitive = value;
    }
    resetCaseInsensitive() {
        this._caseInsensitive = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get caseInsensitiveInput() {
        return this._caseInsensitive;
    }
    get columnToJsonKeyMappings() {
        return this.getStringMapAttribute('column_to_json_key_mappings');
    }
    set columnToJsonKeyMappings(value) {
        this._columnToJsonKeyMappings = value;
    }
    resetColumnToJsonKeyMappings() {
        this._columnToJsonKeyMappings = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get columnToJsonKeyMappingsInput() {
        return this._columnToJsonKeyMappings;
    }
    get convertDotsInJsonKeysToUnderscores() {
        return this.getBooleanAttribute('convert_dots_in_json_keys_to_underscores');
    }
    set convertDotsInJsonKeysToUnderscores(value) {
        this._convertDotsInJsonKeysToUnderscores = value;
    }
    resetConvertDotsInJsonKeysToUnderscores() {
        this._convertDotsInJsonKeysToUnderscores = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get convertDotsInJsonKeysToUnderscoresInput() {
        return this._convertDotsInJsonKeysToUnderscores;
    }
}
exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeOutputReference = KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeOutputReference;
_o = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeOutputReference[_o] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        hive_json_ser_de: kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeToTerraform(struct.hiveJsonSerDe),
        open_x_json_ser_de: kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeToTerraform(struct.openXJsonSerDe),
    };
}
exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerToTerraform = kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerToTerraform;
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        hive_json_ser_de: {
            value: kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeToHclTerraform(struct.hiveJsonSerDe),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeList",
        },
        open_x_json_ser_de: {
            value: kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeToHclTerraform(struct.openXJsonSerDe),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerToHclTerraform = kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerToHclTerraform;
class KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // hive_json_ser_de - computed: false, optional: true, required: false
        this._hiveJsonSerDe = new KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDeOutputReference(this, "hive_json_ser_de");
        // open_x_json_ser_de - computed: false, optional: true, required: false
        this._openXJsonSerDe = new KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDeOutputReference(this, "open_x_json_ser_de");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hiveJsonSerDe?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.hiveJsonSerDe = this._hiveJsonSerDe?.internalValue;
        }
        if (this._openXJsonSerDe?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.openXJsonSerDe = this._openXJsonSerDe?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hiveJsonSerDe.internalValue = undefined;
            this._openXJsonSerDe.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hiveJsonSerDe.internalValue = value.hiveJsonSerDe;
            this._openXJsonSerDe.internalValue = value.openXJsonSerDe;
        }
    }
    get hiveJsonSerDe() {
        return this._hiveJsonSerDe;
    }
    putHiveJsonSerDe(value) {
        this._hiveJsonSerDe.internalValue = value;
    }
    resetHiveJsonSerDe() {
        this._hiveJsonSerDe.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hiveJsonSerDeInput() {
        return this._hiveJsonSerDe.internalValue;
    }
    get openXJsonSerDe() {
        return this._openXJsonSerDe;
    }
    putOpenXJsonSerDe(value) {
        this._openXJsonSerDe.internalValue = value;
    }
    resetOpenXJsonSerDe() {
        this._openXJsonSerDe.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get openXJsonSerDeInput() {
        return this._openXJsonSerDe.internalValue;
    }
}
exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOutputReference = KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOutputReference;
_p = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOutputReference[_p] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        deserializer: kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerToTerraform(struct.deserializer),
    };
}
exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationToTerraform = kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationToTerraform;
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        deserializer: {
            value: kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerToHclTerraform(struct.deserializer),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationToHclTerraform = kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationToHclTerraform;
class KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // deserializer - computed: false, optional: false, required: true
        this._deserializer = new KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOutputReference(this, "deserializer");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._deserializer?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.deserializer = this._deserializer?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._deserializer.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._deserializer.internalValue = value.deserializer;
        }
    }
    get deserializer() {
        return this._deserializer;
    }
    putDeserializer(value) {
        this._deserializer.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get deserializerInput() {
        return this._deserializer.internalValue;
    }
}
exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationOutputReference = KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationOutputReference;
_q = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationOutputReference[_q] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        block_size_bytes: cdktf.numberToTerraform(struct.blockSizeBytes),
        bloom_filter_columns: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.bloomFilterColumns),
        bloom_filter_false_positive_probability: cdktf.numberToTerraform(struct.bloomFilterFalsePositiveProbability),
        compression: cdktf.stringToTerraform(struct.compression),
        dictionary_key_threshold: cdktf.numberToTerraform(struct.dictionaryKeyThreshold),
        enable_padding: cdktf.booleanToTerraform(struct.enablePadding),
        format_version: cdktf.stringToTerraform(struct.formatVersion),
        padding_tolerance: cdktf.numberToTerraform(struct.paddingTolerance),
        row_index_stride: cdktf.numberToTerraform(struct.rowIndexStride),
        stripe_size_bytes: cdktf.numberToTerraform(struct.stripeSizeBytes),
    };
}
exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeToTerraform = kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeToTerraform;
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        block_size_bytes: {
            value: cdktf.numberToHclTerraform(struct.blockSizeBytes),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        bloom_filter_columns: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.bloomFilterColumns),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        bloom_filter_false_positive_probability: {
            value: cdktf.numberToHclTerraform(struct.bloomFilterFalsePositiveProbability),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        compression: {
            value: cdktf.stringToHclTerraform(struct.compression),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        dictionary_key_threshold: {
            value: cdktf.numberToHclTerraform(struct.dictionaryKeyThreshold),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        enable_padding: {
            value: cdktf.booleanToHclTerraform(struct.enablePadding),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        format_version: {
            value: cdktf.stringToHclTerraform(struct.formatVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        padding_tolerance: {
            value: cdktf.numberToHclTerraform(struct.paddingTolerance),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        row_index_stride: {
            value: cdktf.numberToHclTerraform(struct.rowIndexStride),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        stripe_size_bytes: {
            value: cdktf.numberToHclTerraform(struct.stripeSizeBytes),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeToHclTerraform = kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeToHclTerraform;
class KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._blockSizeBytes !== undefined) {
            hasAnyValues = true;
            internalValueResult.blockSizeBytes = this._blockSizeBytes;
        }
        if (this._bloomFilterColumns !== undefined) {
            hasAnyValues = true;
            internalValueResult.bloomFilterColumns = this._bloomFilterColumns;
        }
        if (this._bloomFilterFalsePositiveProbability !== undefined) {
            hasAnyValues = true;
            internalValueResult.bloomFilterFalsePositiveProbability = this._bloomFilterFalsePositiveProbability;
        }
        if (this._compression !== undefined) {
            hasAnyValues = true;
            internalValueResult.compression = this._compression;
        }
        if (this._dictionaryKeyThreshold !== undefined) {
            hasAnyValues = true;
            internalValueResult.dictionaryKeyThreshold = this._dictionaryKeyThreshold;
        }
        if (this._enablePadding !== undefined) {
            hasAnyValues = true;
            internalValueResult.enablePadding = this._enablePadding;
        }
        if (this._formatVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.formatVersion = this._formatVersion;
        }
        if (this._paddingTolerance !== undefined) {
            hasAnyValues = true;
            internalValueResult.paddingTolerance = this._paddingTolerance;
        }
        if (this._rowIndexStride !== undefined) {
            hasAnyValues = true;
            internalValueResult.rowIndexStride = this._rowIndexStride;
        }
        if (this._stripeSizeBytes !== undefined) {
            hasAnyValues = true;
            internalValueResult.stripeSizeBytes = this._stripeSizeBytes;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._blockSizeBytes = undefined;
            this._bloomFilterColumns = undefined;
            this._bloomFilterFalsePositiveProbability = undefined;
            this._compression = undefined;
            this._dictionaryKeyThreshold = undefined;
            this._enablePadding = undefined;
            this._formatVersion = undefined;
            this._paddingTolerance = undefined;
            this._rowIndexStride = undefined;
            this._stripeSizeBytes = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._blockSizeBytes = value.blockSizeBytes;
            this._bloomFilterColumns = value.bloomFilterColumns;
            this._bloomFilterFalsePositiveProbability = value.bloomFilterFalsePositiveProbability;
            this._compression = value.compression;
            this._dictionaryKeyThreshold = value.dictionaryKeyThreshold;
            this._enablePadding = value.enablePadding;
            this._formatVersion = value.formatVersion;
            this._paddingTolerance = value.paddingTolerance;
            this._rowIndexStride = value.rowIndexStride;
            this._stripeSizeBytes = value.stripeSizeBytes;
        }
    }
    get blockSizeBytes() {
        return this.getNumberAttribute('block_size_bytes');
    }
    set blockSizeBytes(value) {
        this._blockSizeBytes = value;
    }
    resetBlockSizeBytes() {
        this._blockSizeBytes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get blockSizeBytesInput() {
        return this._blockSizeBytes;
    }
    get bloomFilterColumns() {
        return this.getListAttribute('bloom_filter_columns');
    }
    set bloomFilterColumns(value) {
        this._bloomFilterColumns = value;
    }
    resetBloomFilterColumns() {
        this._bloomFilterColumns = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bloomFilterColumnsInput() {
        return this._bloomFilterColumns;
    }
    get bloomFilterFalsePositiveProbability() {
        return this.getNumberAttribute('bloom_filter_false_positive_probability');
    }
    set bloomFilterFalsePositiveProbability(value) {
        this._bloomFilterFalsePositiveProbability = value;
    }
    resetBloomFilterFalsePositiveProbability() {
        this._bloomFilterFalsePositiveProbability = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bloomFilterFalsePositiveProbabilityInput() {
        return this._bloomFilterFalsePositiveProbability;
    }
    get compression() {
        return this.getStringAttribute('compression');
    }
    set compression(value) {
        this._compression = value;
    }
    resetCompression() {
        this._compression = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get compressionInput() {
        return this._compression;
    }
    get dictionaryKeyThreshold() {
        return this.getNumberAttribute('dictionary_key_threshold');
    }
    set dictionaryKeyThreshold(value) {
        this._dictionaryKeyThreshold = value;
    }
    resetDictionaryKeyThreshold() {
        this._dictionaryKeyThreshold = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dictionaryKeyThresholdInput() {
        return this._dictionaryKeyThreshold;
    }
    get enablePadding() {
        return this.getBooleanAttribute('enable_padding');
    }
    set enablePadding(value) {
        this._enablePadding = value;
    }
    resetEnablePadding() {
        this._enablePadding = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enablePaddingInput() {
        return this._enablePadding;
    }
    get formatVersion() {
        return this.getStringAttribute('format_version');
    }
    set formatVersion(value) {
        this._formatVersion = value;
    }
    resetFormatVersion() {
        this._formatVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get formatVersionInput() {
        return this._formatVersion;
    }
    get paddingTolerance() {
        return this.getNumberAttribute('padding_tolerance');
    }
    set paddingTolerance(value) {
        this._paddingTolerance = value;
    }
    resetPaddingTolerance() {
        this._paddingTolerance = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get paddingToleranceInput() {
        return this._paddingTolerance;
    }
    get rowIndexStride() {
        return this.getNumberAttribute('row_index_stride');
    }
    set rowIndexStride(value) {
        this._rowIndexStride = value;
    }
    resetRowIndexStride() {
        this._rowIndexStride = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rowIndexStrideInput() {
        return this._rowIndexStride;
    }
    get stripeSizeBytes() {
        return this.getNumberAttribute('stripe_size_bytes');
    }
    set stripeSizeBytes(value) {
        this._stripeSizeBytes = value;
    }
    resetStripeSizeBytes() {
        this._stripeSizeBytes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stripeSizeBytesInput() {
        return this._stripeSizeBytes;
    }
}
exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeOutputReference = KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeOutputReference;
_r = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeOutputReference[_r] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        block_size_bytes: cdktf.numberToTerraform(struct.blockSizeBytes),
        compression: cdktf.stringToTerraform(struct.compression),
        enable_dictionary_compression: cdktf.booleanToTerraform(struct.enableDictionaryCompression),
        max_padding_bytes: cdktf.numberToTerraform(struct.maxPaddingBytes),
        page_size_bytes: cdktf.numberToTerraform(struct.pageSizeBytes),
        writer_version: cdktf.stringToTerraform(struct.writerVersion),
    };
}
exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeToTerraform = kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeToTerraform;
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        block_size_bytes: {
            value: cdktf.numberToHclTerraform(struct.blockSizeBytes),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        compression: {
            value: cdktf.stringToHclTerraform(struct.compression),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        enable_dictionary_compression: {
            value: cdktf.booleanToHclTerraform(struct.enableDictionaryCompression),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        max_padding_bytes: {
            value: cdktf.numberToHclTerraform(struct.maxPaddingBytes),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        page_size_bytes: {
            value: cdktf.numberToHclTerraform(struct.pageSizeBytes),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        writer_version: {
            value: cdktf.stringToHclTerraform(struct.writerVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeToHclTerraform = kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeToHclTerraform;
class KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._blockSizeBytes !== undefined) {
            hasAnyValues = true;
            internalValueResult.blockSizeBytes = this._blockSizeBytes;
        }
        if (this._compression !== undefined) {
            hasAnyValues = true;
            internalValueResult.compression = this._compression;
        }
        if (this._enableDictionaryCompression !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableDictionaryCompression = this._enableDictionaryCompression;
        }
        if (this._maxPaddingBytes !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxPaddingBytes = this._maxPaddingBytes;
        }
        if (this._pageSizeBytes !== undefined) {
            hasAnyValues = true;
            internalValueResult.pageSizeBytes = this._pageSizeBytes;
        }
        if (this._writerVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.writerVersion = this._writerVersion;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._blockSizeBytes = undefined;
            this._compression = undefined;
            this._enableDictionaryCompression = undefined;
            this._maxPaddingBytes = undefined;
            this._pageSizeBytes = undefined;
            this._writerVersion = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._blockSizeBytes = value.blockSizeBytes;
            this._compression = value.compression;
            this._enableDictionaryCompression = value.enableDictionaryCompression;
            this._maxPaddingBytes = value.maxPaddingBytes;
            this._pageSizeBytes = value.pageSizeBytes;
            this._writerVersion = value.writerVersion;
        }
    }
    get blockSizeBytes() {
        return this.getNumberAttribute('block_size_bytes');
    }
    set blockSizeBytes(value) {
        this._blockSizeBytes = value;
    }
    resetBlockSizeBytes() {
        this._blockSizeBytes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get blockSizeBytesInput() {
        return this._blockSizeBytes;
    }
    get compression() {
        return this.getStringAttribute('compression');
    }
    set compression(value) {
        this._compression = value;
    }
    resetCompression() {
        this._compression = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get compressionInput() {
        return this._compression;
    }
    get enableDictionaryCompression() {
        return this.getBooleanAttribute('enable_dictionary_compression');
    }
    set enableDictionaryCompression(value) {
        this._enableDictionaryCompression = value;
    }
    resetEnableDictionaryCompression() {
        this._enableDictionaryCompression = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableDictionaryCompressionInput() {
        return this._enableDictionaryCompression;
    }
    get maxPaddingBytes() {
        return this.getNumberAttribute('max_padding_bytes');
    }
    set maxPaddingBytes(value) {
        this._maxPaddingBytes = value;
    }
    resetMaxPaddingBytes() {
        this._maxPaddingBytes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxPaddingBytesInput() {
        return this._maxPaddingBytes;
    }
    get pageSizeBytes() {
        return this.getNumberAttribute('page_size_bytes');
    }
    set pageSizeBytes(value) {
        this._pageSizeBytes = value;
    }
    resetPageSizeBytes() {
        this._pageSizeBytes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pageSizeBytesInput() {
        return this._pageSizeBytes;
    }
    get writerVersion() {
        return this.getStringAttribute('writer_version');
    }
    set writerVersion(value) {
        this._writerVersion = value;
    }
    resetWriterVersion() {
        this._writerVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get writerVersionInput() {
        return this._writerVersion;
    }
}
exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeOutputReference = KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeOutputReference;
_s = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeOutputReference[_s] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        orc_ser_de: kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeToTerraform(struct.orcSerDe),
        parquet_ser_de: kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeToTerraform(struct.parquetSerDe),
    };
}
exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerToTerraform = kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerToTerraform;
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        orc_ser_de: {
            value: kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeToHclTerraform(struct.orcSerDe),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeList",
        },
        parquet_ser_de: {
            value: kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeToHclTerraform(struct.parquetSerDe),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerToHclTerraform = kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerToHclTerraform;
class KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // orc_ser_de - computed: false, optional: true, required: false
        this._orcSerDe = new KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDeOutputReference(this, "orc_ser_de");
        // parquet_ser_de - computed: false, optional: true, required: false
        this._parquetSerDe = new KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDeOutputReference(this, "parquet_ser_de");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._orcSerDe?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.orcSerDe = this._orcSerDe?.internalValue;
        }
        if (this._parquetSerDe?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.parquetSerDe = this._parquetSerDe?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._orcSerDe.internalValue = undefined;
            this._parquetSerDe.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._orcSerDe.internalValue = value.orcSerDe;
            this._parquetSerDe.internalValue = value.parquetSerDe;
        }
    }
    get orcSerDe() {
        return this._orcSerDe;
    }
    putOrcSerDe(value) {
        this._orcSerDe.internalValue = value;
    }
    resetOrcSerDe() {
        this._orcSerDe.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get orcSerDeInput() {
        return this._orcSerDe.internalValue;
    }
    get parquetSerDe() {
        return this._parquetSerDe;
    }
    putParquetSerDe(value) {
        this._parquetSerDe.internalValue = value;
    }
    resetParquetSerDe() {
        this._parquetSerDe.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parquetSerDeInput() {
        return this._parquetSerDe.internalValue;
    }
}
exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOutputReference = KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOutputReference;
_t = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOutputReference[_t] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        serializer: kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerToTerraform(struct.serializer),
    };
}
exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationToTerraform = kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationToTerraform;
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        serializer: {
            value: kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerToHclTerraform(struct.serializer),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationToHclTerraform = kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationToHclTerraform;
class KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // serializer - computed: false, optional: false, required: true
        this._serializer = new KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOutputReference(this, "serializer");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._serializer?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.serializer = this._serializer?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._serializer.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._serializer.internalValue = value.serializer;
        }
    }
    get serializer() {
        return this._serializer;
    }
    putSerializer(value) {
        this._serializer.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get serializerInput() {
        return this._serializer.internalValue;
    }
}
exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationOutputReference = KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationOutputReference;
_u = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationOutputReference[_u] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        catalog_id: cdktf.stringToTerraform(struct.catalogId),
        database_name: cdktf.stringToTerraform(struct.databaseName),
        region: cdktf.stringToTerraform(struct.region),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        table_name: cdktf.stringToTerraform(struct.tableName),
        version_id: cdktf.stringToTerraform(struct.versionId),
    };
}
exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationToTerraform = kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationToTerraform;
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        catalog_id: {
            value: cdktf.stringToHclTerraform(struct.catalogId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        database_name: {
            value: cdktf.stringToHclTerraform(struct.databaseName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        region: {
            value: cdktf.stringToHclTerraform(struct.region),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        role_arn: {
            value: cdktf.stringToHclTerraform(struct.roleArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        table_name: {
            value: cdktf.stringToHclTerraform(struct.tableName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        version_id: {
            value: cdktf.stringToHclTerraform(struct.versionId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationToHclTerraform = kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationToHclTerraform;
class KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._catalogId !== undefined) {
            hasAnyValues = true;
            internalValueResult.catalogId = this._catalogId;
        }
        if (this._databaseName !== undefined) {
            hasAnyValues = true;
            internalValueResult.databaseName = this._databaseName;
        }
        if (this._region !== undefined) {
            hasAnyValues = true;
            internalValueResult.region = this._region;
        }
        if (this._roleArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.roleArn = this._roleArn;
        }
        if (this._tableName !== undefined) {
            hasAnyValues = true;
            internalValueResult.tableName = this._tableName;
        }
        if (this._versionId !== undefined) {
            hasAnyValues = true;
            internalValueResult.versionId = this._versionId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._catalogId = undefined;
            this._databaseName = undefined;
            this._region = undefined;
            this._roleArn = undefined;
            this._tableName = undefined;
            this._versionId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._catalogId = value.catalogId;
            this._databaseName = value.databaseName;
            this._region = value.region;
            this._roleArn = value.roleArn;
            this._tableName = value.tableName;
            this._versionId = value.versionId;
        }
    }
    get catalogId() {
        return this.getStringAttribute('catalog_id');
    }
    set catalogId(value) {
        this._catalogId = value;
    }
    resetCatalogId() {
        this._catalogId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get catalogIdInput() {
        return this._catalogId;
    }
    get databaseName() {
        return this.getStringAttribute('database_name');
    }
    set databaseName(value) {
        this._databaseName = value;
    }
    // Temporarily expose input value. Use with caution.
    get databaseNameInput() {
        return this._databaseName;
    }
    get region() {
        return this.getStringAttribute('region');
    }
    set region(value) {
        this._region = value;
    }
    resetRegion() {
        this._region = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regionInput() {
        return this._region;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get tableName() {
        return this.getStringAttribute('table_name');
    }
    set tableName(value) {
        this._tableName = value;
    }
    // Temporarily expose input value. Use with caution.
    get tableNameInput() {
        return this._tableName;
    }
    get versionId() {
        return this.getStringAttribute('version_id');
    }
    set versionId(value) {
        this._versionId = value;
    }
    resetVersionId() {
        this._versionId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionIdInput() {
        return this._versionId;
    }
}
exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationOutputReference = KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationOutputReference;
_v = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationOutputReference[_v] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        input_format_configuration: kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationToTerraform(struct.inputFormatConfiguration),
        output_format_configuration: kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationToTerraform(struct.outputFormatConfiguration),
        schema_configuration: kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationToTerraform(struct.schemaConfiguration),
    };
}
exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationToTerraform = kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationToTerraform;
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        input_format_configuration: {
            value: kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationToHclTerraform(struct.inputFormatConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationList",
        },
        output_format_configuration: {
            value: kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationToHclTerraform(struct.outputFormatConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationList",
        },
        schema_configuration: {
            value: kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationToHclTerraform(struct.schemaConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationToHclTerraform = kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationToHclTerraform;
class KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // input_format_configuration - computed: false, optional: false, required: true
        this._inputFormatConfiguration = new KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationOutputReference(this, "input_format_configuration");
        // output_format_configuration - computed: false, optional: false, required: true
        this._outputFormatConfiguration = new KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationOutputReference(this, "output_format_configuration");
        // schema_configuration - computed: false, optional: false, required: true
        this._schemaConfiguration = new KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationOutputReference(this, "schema_configuration");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._inputFormatConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.inputFormatConfiguration = this._inputFormatConfiguration?.internalValue;
        }
        if (this._outputFormatConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputFormatConfiguration = this._outputFormatConfiguration?.internalValue;
        }
        if (this._schemaConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.schemaConfiguration = this._schemaConfiguration?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._inputFormatConfiguration.internalValue = undefined;
            this._outputFormatConfiguration.internalValue = undefined;
            this._schemaConfiguration.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._inputFormatConfiguration.internalValue = value.inputFormatConfiguration;
            this._outputFormatConfiguration.internalValue = value.outputFormatConfiguration;
            this._schemaConfiguration.internalValue = value.schemaConfiguration;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get inputFormatConfiguration() {
        return this._inputFormatConfiguration;
    }
    putInputFormatConfiguration(value) {
        this._inputFormatConfiguration.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get inputFormatConfigurationInput() {
        return this._inputFormatConfiguration.internalValue;
    }
    get outputFormatConfiguration() {
        return this._outputFormatConfiguration;
    }
    putOutputFormatConfiguration(value) {
        this._outputFormatConfiguration.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get outputFormatConfigurationInput() {
        return this._outputFormatConfiguration.internalValue;
    }
    get schemaConfiguration() {
        return this._schemaConfiguration;
    }
    putSchemaConfiguration(value) {
        this._schemaConfiguration.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get schemaConfigurationInput() {
        return this._schemaConfiguration.internalValue;
    }
}
exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputReference = KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputReference;
_w = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputReference[_w] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        retry_duration: cdktf.numberToTerraform(struct.retryDuration),
    };
}
exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationToTerraform = kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationToTerraform;
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        retry_duration: {
            value: cdktf.numberToHclTerraform(struct.retryDuration),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationToHclTerraform = kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationToHclTerraform;
class KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._retryDuration !== undefined) {
            hasAnyValues = true;
            internalValueResult.retryDuration = this._retryDuration;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._retryDuration = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._retryDuration = value.retryDuration;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get retryDuration() {
        return this.getNumberAttribute('retry_duration');
    }
    set retryDuration(value) {
        this._retryDuration = value;
    }
    resetRetryDuration() {
        this._retryDuration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retryDurationInput() {
        return this._retryDuration;
    }
}
exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationOutputReference = KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationOutputReference;
_x = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationOutputReference[_x] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        parameter_name: cdktf.stringToTerraform(struct.parameterName),
        parameter_value: cdktf.stringToTerraform(struct.parameterValue),
    };
}
exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsParametersToTerraform = kinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsParametersToTerraform;
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsParametersToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        parameter_name: {
            value: cdktf.stringToHclTerraform(struct.parameterName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        parameter_value: {
            value: cdktf.stringToHclTerraform(struct.parameterValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsParametersToHclTerraform = kinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsParametersToHclTerraform;
class KinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsParametersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._parameterName !== undefined) {
            hasAnyValues = true;
            internalValueResult.parameterName = this._parameterName;
        }
        if (this._parameterValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.parameterValue = this._parameterValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._parameterName = undefined;
            this._parameterValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._parameterName = value.parameterName;
            this._parameterValue = value.parameterValue;
        }
    }
    get parameterName() {
        return this.getStringAttribute('parameter_name');
    }
    set parameterName(value) {
        this._parameterName = value;
    }
    // Temporarily expose input value. Use with caution.
    get parameterNameInput() {
        return this._parameterName;
    }
    get parameterValue() {
        return this.getStringAttribute('parameter_value');
    }
    set parameterValue(value) {
        this._parameterValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get parameterValueInput() {
        return this._parameterValue;
    }
}
exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsParametersOutputReference = KinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsParametersOutputReference;
_y = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsParametersOutputReference[_y] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsParametersOutputReference", version: "19.15.0" };
class KinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsParametersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new KinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsParametersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsParametersList = KinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsParametersList;
_z = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsParametersList[_z] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsParametersList", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        type: cdktf.stringToTerraform(struct.type),
        parameters: cdktf.listMapper(kinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsParametersToTerraform, true)(struct.parameters),
    };
}
exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsToTerraform = kinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsToTerraform;
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        type: {
            value: cdktf.stringToHclTerraform(struct.type),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        parameters: {
            value: cdktf.listMapperHcl(kinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsParametersToHclTerraform, true)(struct.parameters),
            isBlock: true,
            type: "set",
            storageClassType: "KinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsParametersList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsToHclTerraform = kinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsToHclTerraform;
class KinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // parameters - computed: false, optional: true, required: false
        this._parameters = new KinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsParametersList(this, "parameters", true);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        if (this._parameters?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.parameters = this._parameters?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._type = undefined;
            this._parameters.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._type = value.type;
            this._parameters.internalValue = value.parameters;
        }
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get parameters() {
        return this._parameters;
    }
    putParameters(value) {
        this._parameters.internalValue = value;
    }
    resetParameters() {
        this._parameters.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parametersInput() {
        return this._parameters.internalValue;
    }
}
exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsOutputReference = KinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsOutputReference[_0] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsOutputReference", version: "19.15.0" };
class KinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new KinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsList = KinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsList;
_1 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsList[_1] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsList", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        processors: cdktf.listMapper(kinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsToTerraform, true)(struct.processors),
    };
}
exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationToTerraform = kinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationToTerraform;
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        processors: {
            value: cdktf.listMapperHcl(kinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsToHclTerraform, true)(struct.processors),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationToHclTerraform = kinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationToHclTerraform;
class KinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // processors - computed: false, optional: true, required: false
        this._processors = new KinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorsList(this, "processors", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._processors?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.processors = this._processors?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._processors.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._processors.internalValue = value.processors;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get processors() {
        return this._processors;
    }
    putProcessors(value) {
        this._processors.internalValue = value;
    }
    resetProcessors() {
        this._processors.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get processorsInput() {
        return this._processors.internalValue;
    }
}
exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationOutputReference = KinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationOutputReference[_2] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_stream_name: cdktf.stringToTerraform(struct.logStreamName),
    };
}
exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsToTerraform = kinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsToTerraform;
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        log_group_name: {
            value: cdktf.stringToHclTerraform(struct.logGroupName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        log_stream_name: {
            value: cdktf.stringToHclTerraform(struct.logStreamName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsToHclTerraform = kinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsToHclTerraform;
class KinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._logGroupName !== undefined) {
            hasAnyValues = true;
            internalValueResult.logGroupName = this._logGroupName;
        }
        if (this._logStreamName !== undefined) {
            hasAnyValues = true;
            internalValueResult.logStreamName = this._logStreamName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._logGroupName = undefined;
            this._logStreamName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._logGroupName = value.logGroupName;
            this._logStreamName = value.logStreamName;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get logGroupName() {
        return this.getStringAttribute('log_group_name');
    }
    set logGroupName(value) {
        this._logGroupName = value;
    }
    resetLogGroupName() {
        this._logGroupName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logGroupNameInput() {
        return this._logGroupName;
    }
    get logStreamName() {
        return this.getStringAttribute('log_stream_name');
    }
    set logStreamName(value) {
        this._logStreamName = value;
    }
    resetLogStreamName() {
        this._logStreamName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logStreamNameInput() {
        return this._logStreamName;
    }
}
exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutputReference = KinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutputReference;
_3 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutputReference[_3] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_arn: cdktf.stringToTerraform(struct.bucketArn),
        buffering_interval: cdktf.numberToTerraform(struct.bufferingInterval),
        buffering_size: cdktf.numberToTerraform(struct.bufferingSize),
        compression_format: cdktf.stringToTerraform(struct.compressionFormat),
        error_output_prefix: cdktf.stringToTerraform(struct.errorOutputPrefix),
        kms_key_arn: cdktf.stringToTerraform(struct.kmsKeyArn),
        prefix: cdktf.stringToTerraform(struct.prefix),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        cloudwatch_logging_options: kinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsToTerraform(struct.cloudwatchLoggingOptions),
    };
}
exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationToTerraform = kinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationToTerraform;
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bucket_arn: {
            value: cdktf.stringToHclTerraform(struct.bucketArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        buffering_interval: {
            value: cdktf.numberToHclTerraform(struct.bufferingInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        buffering_size: {
            value: cdktf.numberToHclTerraform(struct.bufferingSize),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        compression_format: {
            value: cdktf.stringToHclTerraform(struct.compressionFormat),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        error_output_prefix: {
            value: cdktf.stringToHclTerraform(struct.errorOutputPrefix),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        kms_key_arn: {
            value: cdktf.stringToHclTerraform(struct.kmsKeyArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        prefix: {
            value: cdktf.stringToHclTerraform(struct.prefix),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        role_arn: {
            value: cdktf.stringToHclTerraform(struct.roleArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cloudwatch_logging_options: {
            value: kinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsToHclTerraform(struct.cloudwatchLoggingOptions),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationToHclTerraform = kinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationToHclTerraform;
class KinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cloudwatch_logging_options - computed: false, optional: true, required: false
        this._cloudwatchLoggingOptions = new KinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutputReference(this, "cloudwatch_logging_options");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketArn = this._bucketArn;
        }
        if (this._bufferingInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufferingInterval = this._bufferingInterval;
        }
        if (this._bufferingSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufferingSize = this._bufferingSize;
        }
        if (this._compressionFormat !== undefined) {
            hasAnyValues = true;
            internalValueResult.compressionFormat = this._compressionFormat;
        }
        if (this._errorOutputPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.errorOutputPrefix = this._errorOutputPrefix;
        }
        if (this._kmsKeyArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyArn = this._kmsKeyArn;
        }
        if (this._prefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefix = this._prefix;
        }
        if (this._roleArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.roleArn = this._roleArn;
        }
        if (this._cloudwatchLoggingOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudwatchLoggingOptions = this._cloudwatchLoggingOptions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketArn = undefined;
            this._bufferingInterval = undefined;
            this._bufferingSize = undefined;
            this._compressionFormat = undefined;
            this._errorOutputPrefix = undefined;
            this._kmsKeyArn = undefined;
            this._prefix = undefined;
            this._roleArn = undefined;
            this._cloudwatchLoggingOptions.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketArn = value.bucketArn;
            this._bufferingInterval = value.bufferingInterval;
            this._bufferingSize = value.bufferingSize;
            this._compressionFormat = value.compressionFormat;
            this._errorOutputPrefix = value.errorOutputPrefix;
            this._kmsKeyArn = value.kmsKeyArn;
            this._prefix = value.prefix;
            this._roleArn = value.roleArn;
            this._cloudwatchLoggingOptions.internalValue = value.cloudwatchLoggingOptions;
        }
    }
    get bucketArn() {
        return this.getStringAttribute('bucket_arn');
    }
    set bucketArn(value) {
        this._bucketArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketArnInput() {
        return this._bucketArn;
    }
    get bufferingInterval() {
        return this.getNumberAttribute('buffering_interval');
    }
    set bufferingInterval(value) {
        this._bufferingInterval = value;
    }
    resetBufferingInterval() {
        this._bufferingInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufferingIntervalInput() {
        return this._bufferingInterval;
    }
    get bufferingSize() {
        return this.getNumberAttribute('buffering_size');
    }
    set bufferingSize(value) {
        this._bufferingSize = value;
    }
    resetBufferingSize() {
        this._bufferingSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufferingSizeInput() {
        return this._bufferingSize;
    }
    get compressionFormat() {
        return this.getStringAttribute('compression_format');
    }
    set compressionFormat(value) {
        this._compressionFormat = value;
    }
    resetCompressionFormat() {
        this._compressionFormat = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get compressionFormatInput() {
        return this._compressionFormat;
    }
    get errorOutputPrefix() {
        return this.getStringAttribute('error_output_prefix');
    }
    set errorOutputPrefix(value) {
        this._errorOutputPrefix = value;
    }
    resetErrorOutputPrefix() {
        this._errorOutputPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get errorOutputPrefixInput() {
        return this._errorOutputPrefix;
    }
    get kmsKeyArn() {
        return this.getStringAttribute('kms_key_arn');
    }
    set kmsKeyArn(value) {
        this._kmsKeyArn = value;
    }
    resetKmsKeyArn() {
        this._kmsKeyArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyArnInput() {
        return this._kmsKeyArn;
    }
    get prefix() {
        return this.getStringAttribute('prefix');
    }
    set prefix(value) {
        this._prefix = value;
    }
    resetPrefix() {
        this._prefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prefixInput() {
        return this._prefix;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get cloudwatchLoggingOptions() {
        return this._cloudwatchLoggingOptions;
    }
    putCloudwatchLoggingOptions(value) {
        this._cloudwatchLoggingOptions.internalValue = value;
    }
    resetCloudwatchLoggingOptions() {
        this._cloudwatchLoggingOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudwatchLoggingOptionsInput() {
        return this._cloudwatchLoggingOptions.internalValue;
    }
}
exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationOutputReference = KinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationOutputReference[_4] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_arn: cdktf.stringToTerraform(struct.bucketArn),
        buffering_interval: cdktf.numberToTerraform(struct.bufferingInterval),
        buffering_size: cdktf.numberToTerraform(struct.bufferingSize),
        compression_format: cdktf.stringToTerraform(struct.compressionFormat),
        custom_time_zone: cdktf.stringToTerraform(struct.customTimeZone),
        error_output_prefix: cdktf.stringToTerraform(struct.errorOutputPrefix),
        file_extension: cdktf.stringToTerraform(struct.fileExtension),
        kms_key_arn: cdktf.stringToTerraform(struct.kmsKeyArn),
        prefix: cdktf.stringToTerraform(struct.prefix),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        s3_backup_mode: cdktf.stringToTerraform(struct.s3BackupMode),
        cloudwatch_logging_options: kinesisFirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsToTerraform(struct.cloudwatchLoggingOptions),
        data_format_conversion_configuration: kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationToTerraform(struct.dataFormatConversionConfiguration),
        dynamic_partitioning_configuration: kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationToTerraform(struct.dynamicPartitioningConfiguration),
        processing_configuration: kinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationToTerraform(struct.processingConfiguration),
        s3_backup_configuration: kinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationToTerraform(struct.s3BackupConfiguration),
    };
}
exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationToTerraform = kinesisFirehoseDeliveryStreamExtendedS3ConfigurationToTerraform;
function kinesisFirehoseDeliveryStreamExtendedS3ConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bucket_arn: {
            value: cdktf.stringToHclTerraform(struct.bucketArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        buffering_interval: {
            value: cdktf.numberToHclTerraform(struct.bufferingInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        buffering_size: {
            value: cdktf.numberToHclTerraform(struct.bufferingSize),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        compression_format: {
            value: cdktf.stringToHclTerraform(struct.compressionFormat),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        custom_time_zone: {
            value: cdktf.stringToHclTerraform(struct.customTimeZone),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        error_output_prefix: {
            value: cdktf.stringToHclTerraform(struct.errorOutputPrefix),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        file_extension: {
            value: cdktf.stringToHclTerraform(struct.fileExtension),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        kms_key_arn: {
            value: cdktf.stringToHclTerraform(struct.kmsKeyArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        prefix: {
            value: cdktf.stringToHclTerraform(struct.prefix),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        role_arn: {
            value: cdktf.stringToHclTerraform(struct.roleArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        s3_backup_mode: {
            value: cdktf.stringToHclTerraform(struct.s3BackupMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cloudwatch_logging_options: {
            value: kinesisFirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsToHclTerraform(struct.cloudwatchLoggingOptions),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsList",
        },
        data_format_conversion_configuration: {
            value: kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationToHclTerraform(struct.dataFormatConversionConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationList",
        },
        dynamic_partitioning_configuration: {
            value: kinesisFirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationToHclTerraform(struct.dynamicPartitioningConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationList",
        },
        processing_configuration: {
            value: kinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationToHclTerraform(struct.processingConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationList",
        },
        s3_backup_configuration: {
            value: kinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationToHclTerraform(struct.s3BackupConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamExtendedS3ConfigurationToHclTerraform = kinesisFirehoseDeliveryStreamExtendedS3ConfigurationToHclTerraform;
class KinesisFirehoseDeliveryStreamExtendedS3ConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cloudwatch_logging_options - computed: false, optional: true, required: false
        this._cloudwatchLoggingOptions = new KinesisFirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptionsOutputReference(this, "cloudwatch_logging_options");
        // data_format_conversion_configuration - computed: false, optional: true, required: false
        this._dataFormatConversionConfiguration = new KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputReference(this, "data_format_conversion_configuration");
        // dynamic_partitioning_configuration - computed: false, optional: true, required: false
        this._dynamicPartitioningConfiguration = new KinesisFirehoseDeliveryStreamExtendedS3ConfigurationDynamicPartitioningConfigurationOutputReference(this, "dynamic_partitioning_configuration");
        // processing_configuration - computed: false, optional: true, required: false
        this._processingConfiguration = new KinesisFirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationOutputReference(this, "processing_configuration");
        // s3_backup_configuration - computed: false, optional: true, required: false
        this._s3BackupConfiguration = new KinesisFirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationOutputReference(this, "s3_backup_configuration");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketArn = this._bucketArn;
        }
        if (this._bufferingInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufferingInterval = this._bufferingInterval;
        }
        if (this._bufferingSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufferingSize = this._bufferingSize;
        }
        if (this._compressionFormat !== undefined) {
            hasAnyValues = true;
            internalValueResult.compressionFormat = this._compressionFormat;
        }
        if (this._customTimeZone !== undefined) {
            hasAnyValues = true;
            internalValueResult.customTimeZone = this._customTimeZone;
        }
        if (this._errorOutputPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.errorOutputPrefix = this._errorOutputPrefix;
        }
        if (this._fileExtension !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileExtension = this._fileExtension;
        }
        if (this._kmsKeyArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyArn = this._kmsKeyArn;
        }
        if (this._prefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefix = this._prefix;
        }
        if (this._roleArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.roleArn = this._roleArn;
        }
        if (this._s3BackupMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3BackupMode = this._s3BackupMode;
        }
        if (this._cloudwatchLoggingOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudwatchLoggingOptions = this._cloudwatchLoggingOptions?.internalValue;
        }
        if (this._dataFormatConversionConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataFormatConversionConfiguration = this._dataFormatConversionConfiguration?.internalValue;
        }
        if (this._dynamicPartitioningConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dynamicPartitioningConfiguration = this._dynamicPartitioningConfiguration?.internalValue;
        }
        if (this._processingConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.processingConfiguration = this._processingConfiguration?.internalValue;
        }
        if (this._s3BackupConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3BackupConfiguration = this._s3BackupConfiguration?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketArn = undefined;
            this._bufferingInterval = undefined;
            this._bufferingSize = undefined;
            this._compressionFormat = undefined;
            this._customTimeZone = undefined;
            this._errorOutputPrefix = undefined;
            this._fileExtension = undefined;
            this._kmsKeyArn = undefined;
            this._prefix = undefined;
            this._roleArn = undefined;
            this._s3BackupMode = undefined;
            this._cloudwatchLoggingOptions.internalValue = undefined;
            this._dataFormatConversionConfiguration.internalValue = undefined;
            this._dynamicPartitioningConfiguration.internalValue = undefined;
            this._processingConfiguration.internalValue = undefined;
            this._s3BackupConfiguration.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketArn = value.bucketArn;
            this._bufferingInterval = value.bufferingInterval;
            this._bufferingSize = value.bufferingSize;
            this._compressionFormat = value.compressionFormat;
            this._customTimeZone = value.customTimeZone;
            this._errorOutputPrefix = value.errorOutputPrefix;
            this._fileExtension = value.fileExtension;
            this._kmsKeyArn = value.kmsKeyArn;
            this._prefix = value.prefix;
            this._roleArn = value.roleArn;
            this._s3BackupMode = value.s3BackupMode;
            this._cloudwatchLoggingOptions.internalValue = value.cloudwatchLoggingOptions;
            this._dataFormatConversionConfiguration.internalValue = value.dataFormatConversionConfiguration;
            this._dynamicPartitioningConfiguration.internalValue = value.dynamicPartitioningConfiguration;
            this._processingConfiguration.internalValue = value.processingConfiguration;
            this._s3BackupConfiguration.internalValue = value.s3BackupConfiguration;
        }
    }
    get bucketArn() {
        return this.getStringAttribute('bucket_arn');
    }
    set bucketArn(value) {
        this._bucketArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketArnInput() {
        return this._bucketArn;
    }
    get bufferingInterval() {
        return this.getNumberAttribute('buffering_interval');
    }
    set bufferingInterval(value) {
        this._bufferingInterval = value;
    }
    resetBufferingInterval() {
        this._bufferingInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufferingIntervalInput() {
        return this._bufferingInterval;
    }
    get bufferingSize() {
        return this.getNumberAttribute('buffering_size');
    }
    set bufferingSize(value) {
        this._bufferingSize = value;
    }
    resetBufferingSize() {
        this._bufferingSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufferingSizeInput() {
        return this._bufferingSize;
    }
    get compressionFormat() {
        return this.getStringAttribute('compression_format');
    }
    set compressionFormat(value) {
        this._compressionFormat = value;
    }
    resetCompressionFormat() {
        this._compressionFormat = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get compressionFormatInput() {
        return this._compressionFormat;
    }
    get customTimeZone() {
        return this.getStringAttribute('custom_time_zone');
    }
    set customTimeZone(value) {
        this._customTimeZone = value;
    }
    resetCustomTimeZone() {
        this._customTimeZone = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customTimeZoneInput() {
        return this._customTimeZone;
    }
    get errorOutputPrefix() {
        return this.getStringAttribute('error_output_prefix');
    }
    set errorOutputPrefix(value) {
        this._errorOutputPrefix = value;
    }
    resetErrorOutputPrefix() {
        this._errorOutputPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get errorOutputPrefixInput() {
        return this._errorOutputPrefix;
    }
    get fileExtension() {
        return this.getStringAttribute('file_extension');
    }
    set fileExtension(value) {
        this._fileExtension = value;
    }
    resetFileExtension() {
        this._fileExtension = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileExtensionInput() {
        return this._fileExtension;
    }
    get kmsKeyArn() {
        return this.getStringAttribute('kms_key_arn');
    }
    set kmsKeyArn(value) {
        this._kmsKeyArn = value;
    }
    resetKmsKeyArn() {
        this._kmsKeyArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyArnInput() {
        return this._kmsKeyArn;
    }
    get prefix() {
        return this.getStringAttribute('prefix');
    }
    set prefix(value) {
        this._prefix = value;
    }
    resetPrefix() {
        this._prefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prefixInput() {
        return this._prefix;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get s3BackupMode() {
        return this.getStringAttribute('s3_backup_mode');
    }
    set s3BackupMode(value) {
        this._s3BackupMode = value;
    }
    resetS3BackupMode() {
        this._s3BackupMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3BackupModeInput() {
        return this._s3BackupMode;
    }
    get cloudwatchLoggingOptions() {
        return this._cloudwatchLoggingOptions;
    }
    putCloudwatchLoggingOptions(value) {
        this._cloudwatchLoggingOptions.internalValue = value;
    }
    resetCloudwatchLoggingOptions() {
        this._cloudwatchLoggingOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudwatchLoggingOptionsInput() {
        return this._cloudwatchLoggingOptions.internalValue;
    }
    get dataFormatConversionConfiguration() {
        return this._dataFormatConversionConfiguration;
    }
    putDataFormatConversionConfiguration(value) {
        this._dataFormatConversionConfiguration.internalValue = value;
    }
    resetDataFormatConversionConfiguration() {
        this._dataFormatConversionConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataFormatConversionConfigurationInput() {
        return this._dataFormatConversionConfiguration.internalValue;
    }
    get dynamicPartitioningConfiguration() {
        return this._dynamicPartitioningConfiguration;
    }
    putDynamicPartitioningConfiguration(value) {
        this._dynamicPartitioningConfiguration.internalValue = value;
    }
    resetDynamicPartitioningConfiguration() {
        this._dynamicPartitioningConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dynamicPartitioningConfigurationInput() {
        return this._dynamicPartitioningConfiguration.internalValue;
    }
    get processingConfiguration() {
        return this._processingConfiguration;
    }
    putProcessingConfiguration(value) {
        this._processingConfiguration.internalValue = value;
    }
    resetProcessingConfiguration() {
        this._processingConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get processingConfigurationInput() {
        return this._processingConfiguration.internalValue;
    }
    get s3BackupConfiguration() {
        return this._s3BackupConfiguration;
    }
    putS3BackupConfiguration(value) {
        this._s3BackupConfiguration.internalValue = value;
    }
    resetS3BackupConfiguration() {
        this._s3BackupConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3BackupConfigurationInput() {
        return this._s3BackupConfiguration.internalValue;
    }
}
exports.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationOutputReference = KinesisFirehoseDeliveryStreamExtendedS3ConfigurationOutputReference;
_5 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamExtendedS3ConfigurationOutputReference[_5] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamExtendedS3ConfigurationOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_stream_name: cdktf.stringToTerraform(struct.logStreamName),
    };
}
exports.kinesisFirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsToTerraform = kinesisFirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsToTerraform;
function kinesisFirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        log_group_name: {
            value: cdktf.stringToHclTerraform(struct.logGroupName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        log_stream_name: {
            value: cdktf.stringToHclTerraform(struct.logStreamName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsToHclTerraform = kinesisFirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsToHclTerraform;
class KinesisFirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._logGroupName !== undefined) {
            hasAnyValues = true;
            internalValueResult.logGroupName = this._logGroupName;
        }
        if (this._logStreamName !== undefined) {
            hasAnyValues = true;
            internalValueResult.logStreamName = this._logStreamName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._logGroupName = undefined;
            this._logStreamName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._logGroupName = value.logGroupName;
            this._logStreamName = value.logStreamName;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get logGroupName() {
        return this.getStringAttribute('log_group_name');
    }
    set logGroupName(value) {
        this._logGroupName = value;
    }
    resetLogGroupName() {
        this._logGroupName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logGroupNameInput() {
        return this._logGroupName;
    }
    get logStreamName() {
        return this.getStringAttribute('log_stream_name');
    }
    set logStreamName(value) {
        this._logStreamName = value;
    }
    resetLogStreamName() {
        this._logStreamName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logStreamNameInput() {
        return this._logStreamName;
    }
}
exports.KinesisFirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsOutputReference = KinesisFirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsOutputReference;
_6 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsOutputReference[_6] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        parameter_name: cdktf.stringToTerraform(struct.parameterName),
        parameter_value: cdktf.stringToTerraform(struct.parameterValue),
    };
}
exports.kinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsParametersToTerraform = kinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsParametersToTerraform;
function kinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsParametersToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        parameter_name: {
            value: cdktf.stringToHclTerraform(struct.parameterName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        parameter_value: {
            value: cdktf.stringToHclTerraform(struct.parameterValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsParametersToHclTerraform = kinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsParametersToHclTerraform;
class KinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsParametersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._parameterName !== undefined) {
            hasAnyValues = true;
            internalValueResult.parameterName = this._parameterName;
        }
        if (this._parameterValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.parameterValue = this._parameterValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._parameterName = undefined;
            this._parameterValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._parameterName = value.parameterName;
            this._parameterValue = value.parameterValue;
        }
    }
    get parameterName() {
        return this.getStringAttribute('parameter_name');
    }
    set parameterName(value) {
        this._parameterName = value;
    }
    // Temporarily expose input value. Use with caution.
    get parameterNameInput() {
        return this._parameterName;
    }
    get parameterValue() {
        return this.getStringAttribute('parameter_value');
    }
    set parameterValue(value) {
        this._parameterValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get parameterValueInput() {
        return this._parameterValue;
    }
}
exports.KinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsParametersOutputReference = KinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsParametersOutputReference;
_7 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsParametersOutputReference[_7] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsParametersOutputReference", version: "19.15.0" };
class KinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsParametersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new KinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsParametersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.KinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsParametersList = KinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsParametersList;
_8 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsParametersList[_8] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsParametersList", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        type: cdktf.stringToTerraform(struct.type),
        parameters: cdktf.listMapper(kinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsParametersToTerraform, true)(struct.parameters),
    };
}
exports.kinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsToTerraform = kinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsToTerraform;
function kinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        type: {
            value: cdktf.stringToHclTerraform(struct.type),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        parameters: {
            value: cdktf.listMapperHcl(kinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsParametersToHclTerraform, true)(struct.parameters),
            isBlock: true,
            type: "set",
            storageClassType: "KinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsParametersList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsToHclTerraform = kinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsToHclTerraform;
class KinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // parameters - computed: false, optional: true, required: false
        this._parameters = new KinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsParametersList(this, "parameters", true);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        if (this._parameters?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.parameters = this._parameters?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._type = undefined;
            this._parameters.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._type = value.type;
            this._parameters.internalValue = value.parameters;
        }
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get parameters() {
        return this._parameters;
    }
    putParameters(value) {
        this._parameters.internalValue = value;
    }
    resetParameters() {
        this._parameters.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parametersInput() {
        return this._parameters.internalValue;
    }
}
exports.KinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsOutputReference = KinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsOutputReference;
_9 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsOutputReference[_9] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsOutputReference", version: "19.15.0" };
class KinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new KinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.KinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsList = KinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsList;
_10 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsList[_10] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsList", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        processors: cdktf.listMapper(kinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsToTerraform, true)(struct.processors),
    };
}
exports.kinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationToTerraform = kinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationToTerraform;
function kinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        processors: {
            value: cdktf.listMapperHcl(kinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsToHclTerraform, true)(struct.processors),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationToHclTerraform = kinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationToHclTerraform;
class KinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // processors - computed: false, optional: true, required: false
        this._processors = new KinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorsList(this, "processors", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._processors?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.processors = this._processors?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._processors.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._processors.internalValue = value.processors;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get processors() {
        return this._processors;
    }
    putProcessors(value) {
        this._processors.internalValue = value;
    }
    resetProcessors() {
        this._processors.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get processorsInput() {
        return this._processors.internalValue;
    }
}
exports.KinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationOutputReference = KinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationOutputReference;
_11 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationOutputReference[_11] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.kinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributesToTerraform = kinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributesToTerraform;
function kinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributesToHclTerraform = kinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributesToHclTerraform;
class KinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._value = value.value;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.KinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributesOutputReference = KinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributesOutputReference;
_12 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributesOutputReference[_12] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributesOutputReference", version: "19.15.0" };
class KinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new KinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.KinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributesList = KinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributesList;
_13 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributesList[_13] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributesList", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        content_encoding: cdktf.stringToTerraform(struct.contentEncoding),
        common_attributes: cdktf.listMapper(kinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributesToTerraform, true)(struct.commonAttributes),
    };
}
exports.kinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationToTerraform = kinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationToTerraform;
function kinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        content_encoding: {
            value: cdktf.stringToHclTerraform(struct.contentEncoding),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        common_attributes: {
            value: cdktf.listMapperHcl(kinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributesToHclTerraform, true)(struct.commonAttributes),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationToHclTerraform = kinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationToHclTerraform;
class KinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // common_attributes - computed: false, optional: true, required: false
        this._commonAttributes = new KinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttributesList(this, "common_attributes", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._contentEncoding !== undefined) {
            hasAnyValues = true;
            internalValueResult.contentEncoding = this._contentEncoding;
        }
        if (this._commonAttributes?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.commonAttributes = this._commonAttributes?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._contentEncoding = undefined;
            this._commonAttributes.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._contentEncoding = value.contentEncoding;
            this._commonAttributes.internalValue = value.commonAttributes;
        }
    }
    get contentEncoding() {
        return this.getStringAttribute('content_encoding');
    }
    set contentEncoding(value) {
        this._contentEncoding = value;
    }
    resetContentEncoding() {
        this._contentEncoding = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get contentEncodingInput() {
        return this._contentEncoding;
    }
    get commonAttributes() {
        return this._commonAttributes;
    }
    putCommonAttributes(value) {
        this._commonAttributes.internalValue = value;
    }
    resetCommonAttributes() {
        this._commonAttributes.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get commonAttributesInput() {
        return this._commonAttributes.internalValue;
    }
}
exports.KinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationOutputReference = KinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationOutputReference;
_14 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationOutputReference[_14] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_stream_name: cdktf.stringToTerraform(struct.logStreamName),
    };
}
exports.kinesisFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform = kinesisFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform;
function kinesisFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        log_group_name: {
            value: cdktf.stringToHclTerraform(struct.logGroupName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        log_stream_name: {
            value: cdktf.stringToHclTerraform(struct.logStreamName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsToHclTerraform = kinesisFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsToHclTerraform;
class KinesisFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._logGroupName !== undefined) {
            hasAnyValues = true;
            internalValueResult.logGroupName = this._logGroupName;
        }
        if (this._logStreamName !== undefined) {
            hasAnyValues = true;
            internalValueResult.logStreamName = this._logStreamName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._logGroupName = undefined;
            this._logStreamName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._logGroupName = value.logGroupName;
            this._logStreamName = value.logStreamName;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get logGroupName() {
        return this.getStringAttribute('log_group_name');
    }
    set logGroupName(value) {
        this._logGroupName = value;
    }
    resetLogGroupName() {
        this._logGroupName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logGroupNameInput() {
        return this._logGroupName;
    }
    get logStreamName() {
        return this.getStringAttribute('log_stream_name');
    }
    set logStreamName(value) {
        this._logStreamName = value;
    }
    resetLogStreamName() {
        this._logStreamName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logStreamNameInput() {
        return this._logStreamName;
    }
}
exports.KinesisFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference = KinesisFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference;
_15 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference[_15] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_arn: cdktf.stringToTerraform(struct.bucketArn),
        buffering_interval: cdktf.numberToTerraform(struct.bufferingInterval),
        buffering_size: cdktf.numberToTerraform(struct.bufferingSize),
        compression_format: cdktf.stringToTerraform(struct.compressionFormat),
        error_output_prefix: cdktf.stringToTerraform(struct.errorOutputPrefix),
        kms_key_arn: cdktf.stringToTerraform(struct.kmsKeyArn),
        prefix: cdktf.stringToTerraform(struct.prefix),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        cloudwatch_logging_options: kinesisFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform(struct.cloudwatchLoggingOptions),
    };
}
exports.kinesisFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationToTerraform = kinesisFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationToTerraform;
function kinesisFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bucket_arn: {
            value: cdktf.stringToHclTerraform(struct.bucketArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        buffering_interval: {
            value: cdktf.numberToHclTerraform(struct.bufferingInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        buffering_size: {
            value: cdktf.numberToHclTerraform(struct.bufferingSize),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        compression_format: {
            value: cdktf.stringToHclTerraform(struct.compressionFormat),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        error_output_prefix: {
            value: cdktf.stringToHclTerraform(struct.errorOutputPrefix),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        kms_key_arn: {
            value: cdktf.stringToHclTerraform(struct.kmsKeyArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        prefix: {
            value: cdktf.stringToHclTerraform(struct.prefix),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        role_arn: {
            value: cdktf.stringToHclTerraform(struct.roleArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cloudwatch_logging_options: {
            value: kinesisFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsToHclTerraform(struct.cloudwatchLoggingOptions),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationToHclTerraform = kinesisFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationToHclTerraform;
class KinesisFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cloudwatch_logging_options - computed: false, optional: true, required: false
        this._cloudwatchLoggingOptions = new KinesisFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference(this, "cloudwatch_logging_options");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketArn = this._bucketArn;
        }
        if (this._bufferingInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufferingInterval = this._bufferingInterval;
        }
        if (this._bufferingSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufferingSize = this._bufferingSize;
        }
        if (this._compressionFormat !== undefined) {
            hasAnyValues = true;
            internalValueResult.compressionFormat = this._compressionFormat;
        }
        if (this._errorOutputPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.errorOutputPrefix = this._errorOutputPrefix;
        }
        if (this._kmsKeyArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyArn = this._kmsKeyArn;
        }
        if (this._prefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefix = this._prefix;
        }
        if (this._roleArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.roleArn = this._roleArn;
        }
        if (this._cloudwatchLoggingOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudwatchLoggingOptions = this._cloudwatchLoggingOptions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketArn = undefined;
            this._bufferingInterval = undefined;
            this._bufferingSize = undefined;
            this._compressionFormat = undefined;
            this._errorOutputPrefix = undefined;
            this._kmsKeyArn = undefined;
            this._prefix = undefined;
            this._roleArn = undefined;
            this._cloudwatchLoggingOptions.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketArn = value.bucketArn;
            this._bufferingInterval = value.bufferingInterval;
            this._bufferingSize = value.bufferingSize;
            this._compressionFormat = value.compressionFormat;
            this._errorOutputPrefix = value.errorOutputPrefix;
            this._kmsKeyArn = value.kmsKeyArn;
            this._prefix = value.prefix;
            this._roleArn = value.roleArn;
            this._cloudwatchLoggingOptions.internalValue = value.cloudwatchLoggingOptions;
        }
    }
    get bucketArn() {
        return this.getStringAttribute('bucket_arn');
    }
    set bucketArn(value) {
        this._bucketArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketArnInput() {
        return this._bucketArn;
    }
    get bufferingInterval() {
        return this.getNumberAttribute('buffering_interval');
    }
    set bufferingInterval(value) {
        this._bufferingInterval = value;
    }
    resetBufferingInterval() {
        this._bufferingInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufferingIntervalInput() {
        return this._bufferingInterval;
    }
    get bufferingSize() {
        return this.getNumberAttribute('buffering_size');
    }
    set bufferingSize(value) {
        this._bufferingSize = value;
    }
    resetBufferingSize() {
        this._bufferingSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufferingSizeInput() {
        return this._bufferingSize;
    }
    get compressionFormat() {
        return this.getStringAttribute('compression_format');
    }
    set compressionFormat(value) {
        this._compressionFormat = value;
    }
    resetCompressionFormat() {
        this._compressionFormat = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get compressionFormatInput() {
        return this._compressionFormat;
    }
    get errorOutputPrefix() {
        return this.getStringAttribute('error_output_prefix');
    }
    set errorOutputPrefix(value) {
        this._errorOutputPrefix = value;
    }
    resetErrorOutputPrefix() {
        this._errorOutputPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get errorOutputPrefixInput() {
        return this._errorOutputPrefix;
    }
    get kmsKeyArn() {
        return this.getStringAttribute('kms_key_arn');
    }
    set kmsKeyArn(value) {
        this._kmsKeyArn = value;
    }
    resetKmsKeyArn() {
        this._kmsKeyArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyArnInput() {
        return this._kmsKeyArn;
    }
    get prefix() {
        return this.getStringAttribute('prefix');
    }
    set prefix(value) {
        this._prefix = value;
    }
    resetPrefix() {
        this._prefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prefixInput() {
        return this._prefix;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get cloudwatchLoggingOptions() {
        return this._cloudwatchLoggingOptions;
    }
    putCloudwatchLoggingOptions(value) {
        this._cloudwatchLoggingOptions.internalValue = value;
    }
    resetCloudwatchLoggingOptions() {
        this._cloudwatchLoggingOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudwatchLoggingOptionsInput() {
        return this._cloudwatchLoggingOptions.internalValue;
    }
}
exports.KinesisFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationOutputReference = KinesisFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationOutputReference;
_16 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationOutputReference[_16] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamHttpEndpointConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        access_key: cdktf.stringToTerraform(struct.accessKey),
        buffering_interval: cdktf.numberToTerraform(struct.bufferingInterval),
        buffering_size: cdktf.numberToTerraform(struct.bufferingSize),
        name: cdktf.stringToTerraform(struct.name),
        retry_duration: cdktf.numberToTerraform(struct.retryDuration),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        s3_backup_mode: cdktf.stringToTerraform(struct.s3BackupMode),
        url: cdktf.stringToTerraform(struct.url),
        cloudwatch_logging_options: kinesisFirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsToTerraform(struct.cloudwatchLoggingOptions),
        processing_configuration: kinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationToTerraform(struct.processingConfiguration),
        request_configuration: kinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationToTerraform(struct.requestConfiguration),
        s3_configuration: kinesisFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationToTerraform(struct.s3Configuration),
    };
}
exports.kinesisFirehoseDeliveryStreamHttpEndpointConfigurationToTerraform = kinesisFirehoseDeliveryStreamHttpEndpointConfigurationToTerraform;
function kinesisFirehoseDeliveryStreamHttpEndpointConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        access_key: {
            value: cdktf.stringToHclTerraform(struct.accessKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        buffering_interval: {
            value: cdktf.numberToHclTerraform(struct.bufferingInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        buffering_size: {
            value: cdktf.numberToHclTerraform(struct.bufferingSize),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        retry_duration: {
            value: cdktf.numberToHclTerraform(struct.retryDuration),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        role_arn: {
            value: cdktf.stringToHclTerraform(struct.roleArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        s3_backup_mode: {
            value: cdktf.stringToHclTerraform(struct.s3BackupMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        url: {
            value: cdktf.stringToHclTerraform(struct.url),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cloudwatch_logging_options: {
            value: kinesisFirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsToHclTerraform(struct.cloudwatchLoggingOptions),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsList",
        },
        processing_configuration: {
            value: kinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationToHclTerraform(struct.processingConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationList",
        },
        request_configuration: {
            value: kinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationToHclTerraform(struct.requestConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationList",
        },
        s3_configuration: {
            value: kinesisFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationToHclTerraform(struct.s3Configuration),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamHttpEndpointConfigurationToHclTerraform = kinesisFirehoseDeliveryStreamHttpEndpointConfigurationToHclTerraform;
class KinesisFirehoseDeliveryStreamHttpEndpointConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cloudwatch_logging_options - computed: false, optional: true, required: false
        this._cloudwatchLoggingOptions = new KinesisFirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptionsOutputReference(this, "cloudwatch_logging_options");
        // processing_configuration - computed: false, optional: true, required: false
        this._processingConfiguration = new KinesisFirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationOutputReference(this, "processing_configuration");
        // request_configuration - computed: false, optional: true, required: false
        this._requestConfiguration = new KinesisFirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationOutputReference(this, "request_configuration");
        // s3_configuration - computed: false, optional: false, required: true
        this._s3Configuration = new KinesisFirehoseDeliveryStreamHttpEndpointConfigurationS3ConfigurationOutputReference(this, "s3_configuration");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._accessKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.accessKey = this._accessKey;
        }
        if (this._bufferingInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufferingInterval = this._bufferingInterval;
        }
        if (this._bufferingSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufferingSize = this._bufferingSize;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._retryDuration !== undefined) {
            hasAnyValues = true;
            internalValueResult.retryDuration = this._retryDuration;
        }
        if (this._roleArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.roleArn = this._roleArn;
        }
        if (this._s3BackupMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3BackupMode = this._s3BackupMode;
        }
        if (this._url !== undefined) {
            hasAnyValues = true;
            internalValueResult.url = this._url;
        }
        if (this._cloudwatchLoggingOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudwatchLoggingOptions = this._cloudwatchLoggingOptions?.internalValue;
        }
        if (this._processingConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.processingConfiguration = this._processingConfiguration?.internalValue;
        }
        if (this._requestConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestConfiguration = this._requestConfiguration?.internalValue;
        }
        if (this._s3Configuration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3Configuration = this._s3Configuration?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._accessKey = undefined;
            this._bufferingInterval = undefined;
            this._bufferingSize = undefined;
            this._name = undefined;
            this._retryDuration = undefined;
            this._roleArn = undefined;
            this._s3BackupMode = undefined;
            this._url = undefined;
            this._cloudwatchLoggingOptions.internalValue = undefined;
            this._processingConfiguration.internalValue = undefined;
            this._requestConfiguration.internalValue = undefined;
            this._s3Configuration.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._accessKey = value.accessKey;
            this._bufferingInterval = value.bufferingInterval;
            this._bufferingSize = value.bufferingSize;
            this._name = value.name;
            this._retryDuration = value.retryDuration;
            this._roleArn = value.roleArn;
            this._s3BackupMode = value.s3BackupMode;
            this._url = value.url;
            this._cloudwatchLoggingOptions.internalValue = value.cloudwatchLoggingOptions;
            this._processingConfiguration.internalValue = value.processingConfiguration;
            this._requestConfiguration.internalValue = value.requestConfiguration;
            this._s3Configuration.internalValue = value.s3Configuration;
        }
    }
    get accessKey() {
        return this.getStringAttribute('access_key');
    }
    set accessKey(value) {
        this._accessKey = value;
    }
    resetAccessKey() {
        this._accessKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessKeyInput() {
        return this._accessKey;
    }
    get bufferingInterval() {
        return this.getNumberAttribute('buffering_interval');
    }
    set bufferingInterval(value) {
        this._bufferingInterval = value;
    }
    resetBufferingInterval() {
        this._bufferingInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufferingIntervalInput() {
        return this._bufferingInterval;
    }
    get bufferingSize() {
        return this.getNumberAttribute('buffering_size');
    }
    set bufferingSize(value) {
        this._bufferingSize = value;
    }
    resetBufferingSize() {
        this._bufferingSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufferingSizeInput() {
        return this._bufferingSize;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get retryDuration() {
        return this.getNumberAttribute('retry_duration');
    }
    set retryDuration(value) {
        this._retryDuration = value;
    }
    resetRetryDuration() {
        this._retryDuration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retryDurationInput() {
        return this._retryDuration;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    resetRoleArn() {
        this._roleArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get s3BackupMode() {
        return this.getStringAttribute('s3_backup_mode');
    }
    set s3BackupMode(value) {
        this._s3BackupMode = value;
    }
    resetS3BackupMode() {
        this._s3BackupMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3BackupModeInput() {
        return this._s3BackupMode;
    }
    get url() {
        return this.getStringAttribute('url');
    }
    set url(value) {
        this._url = value;
    }
    // Temporarily expose input value. Use with caution.
    get urlInput() {
        return this._url;
    }
    get cloudwatchLoggingOptions() {
        return this._cloudwatchLoggingOptions;
    }
    putCloudwatchLoggingOptions(value) {
        this._cloudwatchLoggingOptions.internalValue = value;
    }
    resetCloudwatchLoggingOptions() {
        this._cloudwatchLoggingOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudwatchLoggingOptionsInput() {
        return this._cloudwatchLoggingOptions.internalValue;
    }
    get processingConfiguration() {
        return this._processingConfiguration;
    }
    putProcessingConfiguration(value) {
        this._processingConfiguration.internalValue = value;
    }
    resetProcessingConfiguration() {
        this._processingConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get processingConfigurationInput() {
        return this._processingConfiguration.internalValue;
    }
    get requestConfiguration() {
        return this._requestConfiguration;
    }
    putRequestConfiguration(value) {
        this._requestConfiguration.internalValue = value;
    }
    resetRequestConfiguration() {
        this._requestConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestConfigurationInput() {
        return this._requestConfiguration.internalValue;
    }
    get s3Configuration() {
        return this._s3Configuration;
    }
    putS3Configuration(value) {
        this._s3Configuration.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get s3ConfigurationInput() {
        return this._s3Configuration.internalValue;
    }
}
exports.KinesisFirehoseDeliveryStreamHttpEndpointConfigurationOutputReference = KinesisFirehoseDeliveryStreamHttpEndpointConfigurationOutputReference;
_17 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamHttpEndpointConfigurationOutputReference[_17] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamHttpEndpointConfigurationOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamKinesisSourceConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kinesis_stream_arn: cdktf.stringToTerraform(struct.kinesisStreamArn),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
    };
}
exports.kinesisFirehoseDeliveryStreamKinesisSourceConfigurationToTerraform = kinesisFirehoseDeliveryStreamKinesisSourceConfigurationToTerraform;
function kinesisFirehoseDeliveryStreamKinesisSourceConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        kinesis_stream_arn: {
            value: cdktf.stringToHclTerraform(struct.kinesisStreamArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        role_arn: {
            value: cdktf.stringToHclTerraform(struct.roleArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamKinesisSourceConfigurationToHclTerraform = kinesisFirehoseDeliveryStreamKinesisSourceConfigurationToHclTerraform;
class KinesisFirehoseDeliveryStreamKinesisSourceConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kinesisStreamArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.kinesisStreamArn = this._kinesisStreamArn;
        }
        if (this._roleArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.roleArn = this._roleArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kinesisStreamArn = undefined;
            this._roleArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kinesisStreamArn = value.kinesisStreamArn;
            this._roleArn = value.roleArn;
        }
    }
    get kinesisStreamArn() {
        return this.getStringAttribute('kinesis_stream_arn');
    }
    set kinesisStreamArn(value) {
        this._kinesisStreamArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get kinesisStreamArnInput() {
        return this._kinesisStreamArn;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
}
exports.KinesisFirehoseDeliveryStreamKinesisSourceConfigurationOutputReference = KinesisFirehoseDeliveryStreamKinesisSourceConfigurationOutputReference;
_18 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamKinesisSourceConfigurationOutputReference[_18] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamKinesisSourceConfigurationOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamMskSourceConfigurationAuthenticationConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        connectivity: cdktf.stringToTerraform(struct.connectivity),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
    };
}
exports.kinesisFirehoseDeliveryStreamMskSourceConfigurationAuthenticationConfigurationToTerraform = kinesisFirehoseDeliveryStreamMskSourceConfigurationAuthenticationConfigurationToTerraform;
function kinesisFirehoseDeliveryStreamMskSourceConfigurationAuthenticationConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        connectivity: {
            value: cdktf.stringToHclTerraform(struct.connectivity),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        role_arn: {
            value: cdktf.stringToHclTerraform(struct.roleArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamMskSourceConfigurationAuthenticationConfigurationToHclTerraform = kinesisFirehoseDeliveryStreamMskSourceConfigurationAuthenticationConfigurationToHclTerraform;
class KinesisFirehoseDeliveryStreamMskSourceConfigurationAuthenticationConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._connectivity !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectivity = this._connectivity;
        }
        if (this._roleArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.roleArn = this._roleArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._connectivity = undefined;
            this._roleArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._connectivity = value.connectivity;
            this._roleArn = value.roleArn;
        }
    }
    get connectivity() {
        return this.getStringAttribute('connectivity');
    }
    set connectivity(value) {
        this._connectivity = value;
    }
    // Temporarily expose input value. Use with caution.
    get connectivityInput() {
        return this._connectivity;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
}
exports.KinesisFirehoseDeliveryStreamMskSourceConfigurationAuthenticationConfigurationOutputReference = KinesisFirehoseDeliveryStreamMskSourceConfigurationAuthenticationConfigurationOutputReference;
_19 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamMskSourceConfigurationAuthenticationConfigurationOutputReference[_19] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamMskSourceConfigurationAuthenticationConfigurationOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamMskSourceConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        msk_cluster_arn: cdktf.stringToTerraform(struct.mskClusterArn),
        topic_name: cdktf.stringToTerraform(struct.topicName),
        authentication_configuration: kinesisFirehoseDeliveryStreamMskSourceConfigurationAuthenticationConfigurationToTerraform(struct.authenticationConfiguration),
    };
}
exports.kinesisFirehoseDeliveryStreamMskSourceConfigurationToTerraform = kinesisFirehoseDeliveryStreamMskSourceConfigurationToTerraform;
function kinesisFirehoseDeliveryStreamMskSourceConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        msk_cluster_arn: {
            value: cdktf.stringToHclTerraform(struct.mskClusterArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        topic_name: {
            value: cdktf.stringToHclTerraform(struct.topicName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        authentication_configuration: {
            value: kinesisFirehoseDeliveryStreamMskSourceConfigurationAuthenticationConfigurationToHclTerraform(struct.authenticationConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamMskSourceConfigurationAuthenticationConfigurationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamMskSourceConfigurationToHclTerraform = kinesisFirehoseDeliveryStreamMskSourceConfigurationToHclTerraform;
class KinesisFirehoseDeliveryStreamMskSourceConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // authentication_configuration - computed: false, optional: false, required: true
        this._authenticationConfiguration = new KinesisFirehoseDeliveryStreamMskSourceConfigurationAuthenticationConfigurationOutputReference(this, "authentication_configuration");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._mskClusterArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.mskClusterArn = this._mskClusterArn;
        }
        if (this._topicName !== undefined) {
            hasAnyValues = true;
            internalValueResult.topicName = this._topicName;
        }
        if (this._authenticationConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.authenticationConfiguration = this._authenticationConfiguration?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._mskClusterArn = undefined;
            this._topicName = undefined;
            this._authenticationConfiguration.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._mskClusterArn = value.mskClusterArn;
            this._topicName = value.topicName;
            this._authenticationConfiguration.internalValue = value.authenticationConfiguration;
        }
    }
    get mskClusterArn() {
        return this.getStringAttribute('msk_cluster_arn');
    }
    set mskClusterArn(value) {
        this._mskClusterArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get mskClusterArnInput() {
        return this._mskClusterArn;
    }
    get topicName() {
        return this.getStringAttribute('topic_name');
    }
    set topicName(value) {
        this._topicName = value;
    }
    // Temporarily expose input value. Use with caution.
    get topicNameInput() {
        return this._topicName;
    }
    get authenticationConfiguration() {
        return this._authenticationConfiguration;
    }
    putAuthenticationConfiguration(value) {
        this._authenticationConfiguration.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get authenticationConfigurationInput() {
        return this._authenticationConfiguration.internalValue;
    }
}
exports.KinesisFirehoseDeliveryStreamMskSourceConfigurationOutputReference = KinesisFirehoseDeliveryStreamMskSourceConfigurationOutputReference;
_20 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamMskSourceConfigurationOutputReference[_20] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamMskSourceConfigurationOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_stream_name: cdktf.stringToTerraform(struct.logStreamName),
    };
}
exports.kinesisFirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsToTerraform = kinesisFirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsToTerraform;
function kinesisFirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        log_group_name: {
            value: cdktf.stringToHclTerraform(struct.logGroupName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        log_stream_name: {
            value: cdktf.stringToHclTerraform(struct.logStreamName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsToHclTerraform = kinesisFirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsToHclTerraform;
class KinesisFirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._logGroupName !== undefined) {
            hasAnyValues = true;
            internalValueResult.logGroupName = this._logGroupName;
        }
        if (this._logStreamName !== undefined) {
            hasAnyValues = true;
            internalValueResult.logStreamName = this._logStreamName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._logGroupName = undefined;
            this._logStreamName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._logGroupName = value.logGroupName;
            this._logStreamName = value.logStreamName;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get logGroupName() {
        return this.getStringAttribute('log_group_name');
    }
    set logGroupName(value) {
        this._logGroupName = value;
    }
    resetLogGroupName() {
        this._logGroupName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logGroupNameInput() {
        return this._logGroupName;
    }
    get logStreamName() {
        return this.getStringAttribute('log_stream_name');
    }
    set logStreamName(value) {
        this._logStreamName = value;
    }
    resetLogStreamName() {
        this._logStreamName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logStreamNameInput() {
        return this._logStreamName;
    }
}
exports.KinesisFirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsOutputReference = KinesisFirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsOutputReference;
_21 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsOutputReference[_21] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamOpensearchConfigurationDocumentIdOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        default_document_id_format: cdktf.stringToTerraform(struct.defaultDocumentIdFormat),
    };
}
exports.kinesisFirehoseDeliveryStreamOpensearchConfigurationDocumentIdOptionsToTerraform = kinesisFirehoseDeliveryStreamOpensearchConfigurationDocumentIdOptionsToTerraform;
function kinesisFirehoseDeliveryStreamOpensearchConfigurationDocumentIdOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        default_document_id_format: {
            value: cdktf.stringToHclTerraform(struct.defaultDocumentIdFormat),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamOpensearchConfigurationDocumentIdOptionsToHclTerraform = kinesisFirehoseDeliveryStreamOpensearchConfigurationDocumentIdOptionsToHclTerraform;
class KinesisFirehoseDeliveryStreamOpensearchConfigurationDocumentIdOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._defaultDocumentIdFormat !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultDocumentIdFormat = this._defaultDocumentIdFormat;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._defaultDocumentIdFormat = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._defaultDocumentIdFormat = value.defaultDocumentIdFormat;
        }
    }
    get defaultDocumentIdFormat() {
        return this.getStringAttribute('default_document_id_format');
    }
    set defaultDocumentIdFormat(value) {
        this._defaultDocumentIdFormat = value;
    }
    // Temporarily expose input value. Use with caution.
    get defaultDocumentIdFormatInput() {
        return this._defaultDocumentIdFormat;
    }
}
exports.KinesisFirehoseDeliveryStreamOpensearchConfigurationDocumentIdOptionsOutputReference = KinesisFirehoseDeliveryStreamOpensearchConfigurationDocumentIdOptionsOutputReference;
_22 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamOpensearchConfigurationDocumentIdOptionsOutputReference[_22] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamOpensearchConfigurationDocumentIdOptionsOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        parameter_name: cdktf.stringToTerraform(struct.parameterName),
        parameter_value: cdktf.stringToTerraform(struct.parameterValue),
    };
}
exports.kinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsParametersToTerraform = kinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsParametersToTerraform;
function kinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsParametersToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        parameter_name: {
            value: cdktf.stringToHclTerraform(struct.parameterName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        parameter_value: {
            value: cdktf.stringToHclTerraform(struct.parameterValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsParametersToHclTerraform = kinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsParametersToHclTerraform;
class KinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsParametersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._parameterName !== undefined) {
            hasAnyValues = true;
            internalValueResult.parameterName = this._parameterName;
        }
        if (this._parameterValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.parameterValue = this._parameterValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._parameterName = undefined;
            this._parameterValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._parameterName = value.parameterName;
            this._parameterValue = value.parameterValue;
        }
    }
    get parameterName() {
        return this.getStringAttribute('parameter_name');
    }
    set parameterName(value) {
        this._parameterName = value;
    }
    // Temporarily expose input value. Use with caution.
    get parameterNameInput() {
        return this._parameterName;
    }
    get parameterValue() {
        return this.getStringAttribute('parameter_value');
    }
    set parameterValue(value) {
        this._parameterValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get parameterValueInput() {
        return this._parameterValue;
    }
}
exports.KinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsParametersOutputReference = KinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsParametersOutputReference;
_23 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsParametersOutputReference[_23] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsParametersOutputReference", version: "19.15.0" };
class KinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsParametersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new KinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsParametersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.KinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsParametersList = KinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsParametersList;
_24 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsParametersList[_24] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsParametersList", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        type: cdktf.stringToTerraform(struct.type),
        parameters: cdktf.listMapper(kinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsParametersToTerraform, true)(struct.parameters),
    };
}
exports.kinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsToTerraform = kinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsToTerraform;
function kinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        type: {
            value: cdktf.stringToHclTerraform(struct.type),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        parameters: {
            value: cdktf.listMapperHcl(kinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsParametersToHclTerraform, true)(struct.parameters),
            isBlock: true,
            type: "set",
            storageClassType: "KinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsParametersList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsToHclTerraform = kinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsToHclTerraform;
class KinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // parameters - computed: false, optional: true, required: false
        this._parameters = new KinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsParametersList(this, "parameters", true);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        if (this._parameters?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.parameters = this._parameters?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._type = undefined;
            this._parameters.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._type = value.type;
            this._parameters.internalValue = value.parameters;
        }
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get parameters() {
        return this._parameters;
    }
    putParameters(value) {
        this._parameters.internalValue = value;
    }
    resetParameters() {
        this._parameters.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parametersInput() {
        return this._parameters.internalValue;
    }
}
exports.KinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsOutputReference = KinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsOutputReference;
_25 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsOutputReference[_25] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsOutputReference", version: "19.15.0" };
class KinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new KinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.KinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsList = KinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsList;
_26 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsList[_26] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsList", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        processors: cdktf.listMapper(kinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsToTerraform, true)(struct.processors),
    };
}
exports.kinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationToTerraform = kinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationToTerraform;
function kinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        processors: {
            value: cdktf.listMapperHcl(kinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsToHclTerraform, true)(struct.processors),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationToHclTerraform = kinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationToHclTerraform;
class KinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // processors - computed: false, optional: true, required: false
        this._processors = new KinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationProcessorsList(this, "processors", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._processors?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.processors = this._processors?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._processors.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._processors.internalValue = value.processors;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get processors() {
        return this._processors;
    }
    putProcessors(value) {
        this._processors.internalValue = value;
    }
    resetProcessors() {
        this._processors.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get processorsInput() {
        return this._processors.internalValue;
    }
}
exports.KinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationOutputReference = KinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationOutputReference;
_27 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationOutputReference[_27] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_stream_name: cdktf.stringToTerraform(struct.logStreamName),
    };
}
exports.kinesisFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform = kinesisFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform;
function kinesisFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        log_group_name: {
            value: cdktf.stringToHclTerraform(struct.logGroupName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        log_stream_name: {
            value: cdktf.stringToHclTerraform(struct.logStreamName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsToHclTerraform = kinesisFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsToHclTerraform;
class KinesisFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._logGroupName !== undefined) {
            hasAnyValues = true;
            internalValueResult.logGroupName = this._logGroupName;
        }
        if (this._logStreamName !== undefined) {
            hasAnyValues = true;
            internalValueResult.logStreamName = this._logStreamName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._logGroupName = undefined;
            this._logStreamName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._logGroupName = value.logGroupName;
            this._logStreamName = value.logStreamName;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get logGroupName() {
        return this.getStringAttribute('log_group_name');
    }
    set logGroupName(value) {
        this._logGroupName = value;
    }
    resetLogGroupName() {
        this._logGroupName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logGroupNameInput() {
        return this._logGroupName;
    }
    get logStreamName() {
        return this.getStringAttribute('log_stream_name');
    }
    set logStreamName(value) {
        this._logStreamName = value;
    }
    resetLogStreamName() {
        this._logStreamName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logStreamNameInput() {
        return this._logStreamName;
    }
}
exports.KinesisFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference = KinesisFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference;
_28 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference[_28] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_arn: cdktf.stringToTerraform(struct.bucketArn),
        buffering_interval: cdktf.numberToTerraform(struct.bufferingInterval),
        buffering_size: cdktf.numberToTerraform(struct.bufferingSize),
        compression_format: cdktf.stringToTerraform(struct.compressionFormat),
        error_output_prefix: cdktf.stringToTerraform(struct.errorOutputPrefix),
        kms_key_arn: cdktf.stringToTerraform(struct.kmsKeyArn),
        prefix: cdktf.stringToTerraform(struct.prefix),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        cloudwatch_logging_options: kinesisFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform(struct.cloudwatchLoggingOptions),
    };
}
exports.kinesisFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationToTerraform = kinesisFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationToTerraform;
function kinesisFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bucket_arn: {
            value: cdktf.stringToHclTerraform(struct.bucketArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        buffering_interval: {
            value: cdktf.numberToHclTerraform(struct.bufferingInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        buffering_size: {
            value: cdktf.numberToHclTerraform(struct.bufferingSize),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        compression_format: {
            value: cdktf.stringToHclTerraform(struct.compressionFormat),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        error_output_prefix: {
            value: cdktf.stringToHclTerraform(struct.errorOutputPrefix),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        kms_key_arn: {
            value: cdktf.stringToHclTerraform(struct.kmsKeyArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        prefix: {
            value: cdktf.stringToHclTerraform(struct.prefix),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        role_arn: {
            value: cdktf.stringToHclTerraform(struct.roleArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cloudwatch_logging_options: {
            value: kinesisFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsToHclTerraform(struct.cloudwatchLoggingOptions),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationToHclTerraform = kinesisFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationToHclTerraform;
class KinesisFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cloudwatch_logging_options - computed: false, optional: true, required: false
        this._cloudwatchLoggingOptions = new KinesisFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference(this, "cloudwatch_logging_options");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketArn = this._bucketArn;
        }
        if (this._bufferingInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufferingInterval = this._bufferingInterval;
        }
        if (this._bufferingSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufferingSize = this._bufferingSize;
        }
        if (this._compressionFormat !== undefined) {
            hasAnyValues = true;
            internalValueResult.compressionFormat = this._compressionFormat;
        }
        if (this._errorOutputPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.errorOutputPrefix = this._errorOutputPrefix;
        }
        if (this._kmsKeyArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyArn = this._kmsKeyArn;
        }
        if (this._prefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefix = this._prefix;
        }
        if (this._roleArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.roleArn = this._roleArn;
        }
        if (this._cloudwatchLoggingOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudwatchLoggingOptions = this._cloudwatchLoggingOptions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketArn = undefined;
            this._bufferingInterval = undefined;
            this._bufferingSize = undefined;
            this._compressionFormat = undefined;
            this._errorOutputPrefix = undefined;
            this._kmsKeyArn = undefined;
            this._prefix = undefined;
            this._roleArn = undefined;
            this._cloudwatchLoggingOptions.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketArn = value.bucketArn;
            this._bufferingInterval = value.bufferingInterval;
            this._bufferingSize = value.bufferingSize;
            this._compressionFormat = value.compressionFormat;
            this._errorOutputPrefix = value.errorOutputPrefix;
            this._kmsKeyArn = value.kmsKeyArn;
            this._prefix = value.prefix;
            this._roleArn = value.roleArn;
            this._cloudwatchLoggingOptions.internalValue = value.cloudwatchLoggingOptions;
        }
    }
    get bucketArn() {
        return this.getStringAttribute('bucket_arn');
    }
    set bucketArn(value) {
        this._bucketArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketArnInput() {
        return this._bucketArn;
    }
    get bufferingInterval() {
        return this.getNumberAttribute('buffering_interval');
    }
    set bufferingInterval(value) {
        this._bufferingInterval = value;
    }
    resetBufferingInterval() {
        this._bufferingInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufferingIntervalInput() {
        return this._bufferingInterval;
    }
    get bufferingSize() {
        return this.getNumberAttribute('buffering_size');
    }
    set bufferingSize(value) {
        this._bufferingSize = value;
    }
    resetBufferingSize() {
        this._bufferingSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufferingSizeInput() {
        return this._bufferingSize;
    }
    get compressionFormat() {
        return this.getStringAttribute('compression_format');
    }
    set compressionFormat(value) {
        this._compressionFormat = value;
    }
    resetCompressionFormat() {
        this._compressionFormat = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get compressionFormatInput() {
        return this._compressionFormat;
    }
    get errorOutputPrefix() {
        return this.getStringAttribute('error_output_prefix');
    }
    set errorOutputPrefix(value) {
        this._errorOutputPrefix = value;
    }
    resetErrorOutputPrefix() {
        this._errorOutputPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get errorOutputPrefixInput() {
        return this._errorOutputPrefix;
    }
    get kmsKeyArn() {
        return this.getStringAttribute('kms_key_arn');
    }
    set kmsKeyArn(value) {
        this._kmsKeyArn = value;
    }
    resetKmsKeyArn() {
        this._kmsKeyArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyArnInput() {
        return this._kmsKeyArn;
    }
    get prefix() {
        return this.getStringAttribute('prefix');
    }
    set prefix(value) {
        this._prefix = value;
    }
    resetPrefix() {
        this._prefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prefixInput() {
        return this._prefix;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get cloudwatchLoggingOptions() {
        return this._cloudwatchLoggingOptions;
    }
    putCloudwatchLoggingOptions(value) {
        this._cloudwatchLoggingOptions.internalValue = value;
    }
    resetCloudwatchLoggingOptions() {
        this._cloudwatchLoggingOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudwatchLoggingOptionsInput() {
        return this._cloudwatchLoggingOptions.internalValue;
    }
}
exports.KinesisFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationOutputReference = KinesisFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationOutputReference;
_29 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationOutputReference[_29] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamOpensearchConfigurationVpcConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        security_group_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.securityGroupIds),
        subnet_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.subnetIds),
    };
}
exports.kinesisFirehoseDeliveryStreamOpensearchConfigurationVpcConfigToTerraform = kinesisFirehoseDeliveryStreamOpensearchConfigurationVpcConfigToTerraform;
function kinesisFirehoseDeliveryStreamOpensearchConfigurationVpcConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        role_arn: {
            value: cdktf.stringToHclTerraform(struct.roleArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        security_group_ids: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.securityGroupIds),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        subnet_ids: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.subnetIds),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamOpensearchConfigurationVpcConfigToHclTerraform = kinesisFirehoseDeliveryStreamOpensearchConfigurationVpcConfigToHclTerraform;
class KinesisFirehoseDeliveryStreamOpensearchConfigurationVpcConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._roleArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.roleArn = this._roleArn;
        }
        if (this._securityGroupIds !== undefined) {
            hasAnyValues = true;
            internalValueResult.securityGroupIds = this._securityGroupIds;
        }
        if (this._subnetIds !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnetIds = this._subnetIds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._roleArn = undefined;
            this._securityGroupIds = undefined;
            this._subnetIds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._roleArn = value.roleArn;
            this._securityGroupIds = value.securityGroupIds;
            this._subnetIds = value.subnetIds;
        }
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get securityGroupIds() {
        return cdktf.Fn.tolist(this.getListAttribute('security_group_ids'));
    }
    set securityGroupIds(value) {
        this._securityGroupIds = value;
    }
    // Temporarily expose input value. Use with caution.
    get securityGroupIdsInput() {
        return this._securityGroupIds;
    }
    get subnetIds() {
        return cdktf.Fn.tolist(this.getListAttribute('subnet_ids'));
    }
    set subnetIds(value) {
        this._subnetIds = value;
    }
    // Temporarily expose input value. Use with caution.
    get subnetIdsInput() {
        return this._subnetIds;
    }
    // vpc_id - computed: true, optional: false, required: false
    get vpcId() {
        return this.getStringAttribute('vpc_id');
    }
}
exports.KinesisFirehoseDeliveryStreamOpensearchConfigurationVpcConfigOutputReference = KinesisFirehoseDeliveryStreamOpensearchConfigurationVpcConfigOutputReference;
_30 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamOpensearchConfigurationVpcConfigOutputReference[_30] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamOpensearchConfigurationVpcConfigOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamOpensearchConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        buffering_interval: cdktf.numberToTerraform(struct.bufferingInterval),
        buffering_size: cdktf.numberToTerraform(struct.bufferingSize),
        cluster_endpoint: cdktf.stringToTerraform(struct.clusterEndpoint),
        domain_arn: cdktf.stringToTerraform(struct.domainArn),
        index_name: cdktf.stringToTerraform(struct.indexName),
        index_rotation_period: cdktf.stringToTerraform(struct.indexRotationPeriod),
        retry_duration: cdktf.numberToTerraform(struct.retryDuration),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        s3_backup_mode: cdktf.stringToTerraform(struct.s3BackupMode),
        type_name: cdktf.stringToTerraform(struct.typeName),
        cloudwatch_logging_options: kinesisFirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsToTerraform(struct.cloudwatchLoggingOptions),
        document_id_options: kinesisFirehoseDeliveryStreamOpensearchConfigurationDocumentIdOptionsToTerraform(struct.documentIdOptions),
        processing_configuration: kinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationToTerraform(struct.processingConfiguration),
        s3_configuration: kinesisFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationToTerraform(struct.s3Configuration),
        vpc_config: kinesisFirehoseDeliveryStreamOpensearchConfigurationVpcConfigToTerraform(struct.vpcConfig),
    };
}
exports.kinesisFirehoseDeliveryStreamOpensearchConfigurationToTerraform = kinesisFirehoseDeliveryStreamOpensearchConfigurationToTerraform;
function kinesisFirehoseDeliveryStreamOpensearchConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        buffering_interval: {
            value: cdktf.numberToHclTerraform(struct.bufferingInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        buffering_size: {
            value: cdktf.numberToHclTerraform(struct.bufferingSize),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        cluster_endpoint: {
            value: cdktf.stringToHclTerraform(struct.clusterEndpoint),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        domain_arn: {
            value: cdktf.stringToHclTerraform(struct.domainArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        index_name: {
            value: cdktf.stringToHclTerraform(struct.indexName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        index_rotation_period: {
            value: cdktf.stringToHclTerraform(struct.indexRotationPeriod),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        retry_duration: {
            value: cdktf.numberToHclTerraform(struct.retryDuration),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        role_arn: {
            value: cdktf.stringToHclTerraform(struct.roleArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        s3_backup_mode: {
            value: cdktf.stringToHclTerraform(struct.s3BackupMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        type_name: {
            value: cdktf.stringToHclTerraform(struct.typeName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cloudwatch_logging_options: {
            value: kinesisFirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsToHclTerraform(struct.cloudwatchLoggingOptions),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsList",
        },
        document_id_options: {
            value: kinesisFirehoseDeliveryStreamOpensearchConfigurationDocumentIdOptionsToHclTerraform(struct.documentIdOptions),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamOpensearchConfigurationDocumentIdOptionsList",
        },
        processing_configuration: {
            value: kinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationToHclTerraform(struct.processingConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationList",
        },
        s3_configuration: {
            value: kinesisFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationToHclTerraform(struct.s3Configuration),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationList",
        },
        vpc_config: {
            value: kinesisFirehoseDeliveryStreamOpensearchConfigurationVpcConfigToHclTerraform(struct.vpcConfig),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamOpensearchConfigurationVpcConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamOpensearchConfigurationToHclTerraform = kinesisFirehoseDeliveryStreamOpensearchConfigurationToHclTerraform;
class KinesisFirehoseDeliveryStreamOpensearchConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cloudwatch_logging_options - computed: false, optional: true, required: false
        this._cloudwatchLoggingOptions = new KinesisFirehoseDeliveryStreamOpensearchConfigurationCloudwatchLoggingOptionsOutputReference(this, "cloudwatch_logging_options");
        // document_id_options - computed: false, optional: true, required: false
        this._documentIdOptions = new KinesisFirehoseDeliveryStreamOpensearchConfigurationDocumentIdOptionsOutputReference(this, "document_id_options");
        // processing_configuration - computed: false, optional: true, required: false
        this._processingConfiguration = new KinesisFirehoseDeliveryStreamOpensearchConfigurationProcessingConfigurationOutputReference(this, "processing_configuration");
        // s3_configuration - computed: false, optional: false, required: true
        this._s3Configuration = new KinesisFirehoseDeliveryStreamOpensearchConfigurationS3ConfigurationOutputReference(this, "s3_configuration");
        // vpc_config - computed: false, optional: true, required: false
        this._vpcConfig = new KinesisFirehoseDeliveryStreamOpensearchConfigurationVpcConfigOutputReference(this, "vpc_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bufferingInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufferingInterval = this._bufferingInterval;
        }
        if (this._bufferingSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufferingSize = this._bufferingSize;
        }
        if (this._clusterEndpoint !== undefined) {
            hasAnyValues = true;
            internalValueResult.clusterEndpoint = this._clusterEndpoint;
        }
        if (this._domainArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.domainArn = this._domainArn;
        }
        if (this._indexName !== undefined) {
            hasAnyValues = true;
            internalValueResult.indexName = this._indexName;
        }
        if (this._indexRotationPeriod !== undefined) {
            hasAnyValues = true;
            internalValueResult.indexRotationPeriod = this._indexRotationPeriod;
        }
        if (this._retryDuration !== undefined) {
            hasAnyValues = true;
            internalValueResult.retryDuration = this._retryDuration;
        }
        if (this._roleArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.roleArn = this._roleArn;
        }
        if (this._s3BackupMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3BackupMode = this._s3BackupMode;
        }
        if (this._typeName !== undefined) {
            hasAnyValues = true;
            internalValueResult.typeName = this._typeName;
        }
        if (this._cloudwatchLoggingOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudwatchLoggingOptions = this._cloudwatchLoggingOptions?.internalValue;
        }
        if (this._documentIdOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.documentIdOptions = this._documentIdOptions?.internalValue;
        }
        if (this._processingConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.processingConfiguration = this._processingConfiguration?.internalValue;
        }
        if (this._s3Configuration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3Configuration = this._s3Configuration?.internalValue;
        }
        if (this._vpcConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.vpcConfig = this._vpcConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bufferingInterval = undefined;
            this._bufferingSize = undefined;
            this._clusterEndpoint = undefined;
            this._domainArn = undefined;
            this._indexName = undefined;
            this._indexRotationPeriod = undefined;
            this._retryDuration = undefined;
            this._roleArn = undefined;
            this._s3BackupMode = undefined;
            this._typeName = undefined;
            this._cloudwatchLoggingOptions.internalValue = undefined;
            this._documentIdOptions.internalValue = undefined;
            this._processingConfiguration.internalValue = undefined;
            this._s3Configuration.internalValue = undefined;
            this._vpcConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bufferingInterval = value.bufferingInterval;
            this._bufferingSize = value.bufferingSize;
            this._clusterEndpoint = value.clusterEndpoint;
            this._domainArn = value.domainArn;
            this._indexName = value.indexName;
            this._indexRotationPeriod = value.indexRotationPeriod;
            this._retryDuration = value.retryDuration;
            this._roleArn = value.roleArn;
            this._s3BackupMode = value.s3BackupMode;
            this._typeName = value.typeName;
            this._cloudwatchLoggingOptions.internalValue = value.cloudwatchLoggingOptions;
            this._documentIdOptions.internalValue = value.documentIdOptions;
            this._processingConfiguration.internalValue = value.processingConfiguration;
            this._s3Configuration.internalValue = value.s3Configuration;
            this._vpcConfig.internalValue = value.vpcConfig;
        }
    }
    get bufferingInterval() {
        return this.getNumberAttribute('buffering_interval');
    }
    set bufferingInterval(value) {
        this._bufferingInterval = value;
    }
    resetBufferingInterval() {
        this._bufferingInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufferingIntervalInput() {
        return this._bufferingInterval;
    }
    get bufferingSize() {
        return this.getNumberAttribute('buffering_size');
    }
    set bufferingSize(value) {
        this._bufferingSize = value;
    }
    resetBufferingSize() {
        this._bufferingSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufferingSizeInput() {
        return this._bufferingSize;
    }
    get clusterEndpoint() {
        return this.getStringAttribute('cluster_endpoint');
    }
    set clusterEndpoint(value) {
        this._clusterEndpoint = value;
    }
    resetClusterEndpoint() {
        this._clusterEndpoint = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clusterEndpointInput() {
        return this._clusterEndpoint;
    }
    get domainArn() {
        return this.getStringAttribute('domain_arn');
    }
    set domainArn(value) {
        this._domainArn = value;
    }
    resetDomainArn() {
        this._domainArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get domainArnInput() {
        return this._domainArn;
    }
    get indexName() {
        return this.getStringAttribute('index_name');
    }
    set indexName(value) {
        this._indexName = value;
    }
    // Temporarily expose input value. Use with caution.
    get indexNameInput() {
        return this._indexName;
    }
    get indexRotationPeriod() {
        return this.getStringAttribute('index_rotation_period');
    }
    set indexRotationPeriod(value) {
        this._indexRotationPeriod = value;
    }
    resetIndexRotationPeriod() {
        this._indexRotationPeriod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get indexRotationPeriodInput() {
        return this._indexRotationPeriod;
    }
    get retryDuration() {
        return this.getNumberAttribute('retry_duration');
    }
    set retryDuration(value) {
        this._retryDuration = value;
    }
    resetRetryDuration() {
        this._retryDuration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retryDurationInput() {
        return this._retryDuration;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get s3BackupMode() {
        return this.getStringAttribute('s3_backup_mode');
    }
    set s3BackupMode(value) {
        this._s3BackupMode = value;
    }
    resetS3BackupMode() {
        this._s3BackupMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3BackupModeInput() {
        return this._s3BackupMode;
    }
    get typeName() {
        return this.getStringAttribute('type_name');
    }
    set typeName(value) {
        this._typeName = value;
    }
    resetTypeName() {
        this._typeName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typeNameInput() {
        return this._typeName;
    }
    get cloudwatchLoggingOptions() {
        return this._cloudwatchLoggingOptions;
    }
    putCloudwatchLoggingOptions(value) {
        this._cloudwatchLoggingOptions.internalValue = value;
    }
    resetCloudwatchLoggingOptions() {
        this._cloudwatchLoggingOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudwatchLoggingOptionsInput() {
        return this._cloudwatchLoggingOptions.internalValue;
    }
    get documentIdOptions() {
        return this._documentIdOptions;
    }
    putDocumentIdOptions(value) {
        this._documentIdOptions.internalValue = value;
    }
    resetDocumentIdOptions() {
        this._documentIdOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get documentIdOptionsInput() {
        return this._documentIdOptions.internalValue;
    }
    get processingConfiguration() {
        return this._processingConfiguration;
    }
    putProcessingConfiguration(value) {
        this._processingConfiguration.internalValue = value;
    }
    resetProcessingConfiguration() {
        this._processingConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get processingConfigurationInput() {
        return this._processingConfiguration.internalValue;
    }
    get s3Configuration() {
        return this._s3Configuration;
    }
    putS3Configuration(value) {
        this._s3Configuration.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get s3ConfigurationInput() {
        return this._s3Configuration.internalValue;
    }
    get vpcConfig() {
        return this._vpcConfig;
    }
    putVpcConfig(value) {
        this._vpcConfig.internalValue = value;
    }
    resetVpcConfig() {
        this._vpcConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vpcConfigInput() {
        return this._vpcConfig.internalValue;
    }
}
exports.KinesisFirehoseDeliveryStreamOpensearchConfigurationOutputReference = KinesisFirehoseDeliveryStreamOpensearchConfigurationOutputReference;
_31 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamOpensearchConfigurationOutputReference[_31] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamOpensearchConfigurationOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationCloudwatchLoggingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_stream_name: cdktf.stringToTerraform(struct.logStreamName),
    };
}
exports.kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationCloudwatchLoggingOptionsToTerraform = kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationCloudwatchLoggingOptionsToTerraform;
function kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationCloudwatchLoggingOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        log_group_name: {
            value: cdktf.stringToHclTerraform(struct.logGroupName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        log_stream_name: {
            value: cdktf.stringToHclTerraform(struct.logStreamName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationCloudwatchLoggingOptionsToHclTerraform = kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationCloudwatchLoggingOptionsToHclTerraform;
class KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationCloudwatchLoggingOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._logGroupName !== undefined) {
            hasAnyValues = true;
            internalValueResult.logGroupName = this._logGroupName;
        }
        if (this._logStreamName !== undefined) {
            hasAnyValues = true;
            internalValueResult.logStreamName = this._logStreamName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._logGroupName = undefined;
            this._logStreamName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._logGroupName = value.logGroupName;
            this._logStreamName = value.logStreamName;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get logGroupName() {
        return this.getStringAttribute('log_group_name');
    }
    set logGroupName(value) {
        this._logGroupName = value;
    }
    resetLogGroupName() {
        this._logGroupName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logGroupNameInput() {
        return this._logGroupName;
    }
    get logStreamName() {
        return this.getStringAttribute('log_stream_name');
    }
    set logStreamName(value) {
        this._logStreamName = value;
    }
    resetLogStreamName() {
        this._logStreamName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logStreamNameInput() {
        return this._logStreamName;
    }
}
exports.KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationCloudwatchLoggingOptionsOutputReference = KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationCloudwatchLoggingOptionsOutputReference;
_32 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationCloudwatchLoggingOptionsOutputReference[_32] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationCloudwatchLoggingOptionsOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        parameter_name: cdktf.stringToTerraform(struct.parameterName),
        parameter_value: cdktf.stringToTerraform(struct.parameterValue),
    };
}
exports.kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsParametersToTerraform = kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsParametersToTerraform;
function kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsParametersToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        parameter_name: {
            value: cdktf.stringToHclTerraform(struct.parameterName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        parameter_value: {
            value: cdktf.stringToHclTerraform(struct.parameterValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsParametersToHclTerraform = kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsParametersToHclTerraform;
class KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsParametersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._parameterName !== undefined) {
            hasAnyValues = true;
            internalValueResult.parameterName = this._parameterName;
        }
        if (this._parameterValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.parameterValue = this._parameterValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._parameterName = undefined;
            this._parameterValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._parameterName = value.parameterName;
            this._parameterValue = value.parameterValue;
        }
    }
    get parameterName() {
        return this.getStringAttribute('parameter_name');
    }
    set parameterName(value) {
        this._parameterName = value;
    }
    // Temporarily expose input value. Use with caution.
    get parameterNameInput() {
        return this._parameterName;
    }
    get parameterValue() {
        return this.getStringAttribute('parameter_value');
    }
    set parameterValue(value) {
        this._parameterValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get parameterValueInput() {
        return this._parameterValue;
    }
}
exports.KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsParametersOutputReference = KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsParametersOutputReference;
_33 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsParametersOutputReference[_33] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsParametersOutputReference", version: "19.15.0" };
class KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsParametersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsParametersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsParametersList = KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsParametersList;
_34 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsParametersList[_34] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsParametersList", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        type: cdktf.stringToTerraform(struct.type),
        parameters: cdktf.listMapper(kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsParametersToTerraform, true)(struct.parameters),
    };
}
exports.kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsToTerraform = kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsToTerraform;
function kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        type: {
            value: cdktf.stringToHclTerraform(struct.type),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        parameters: {
            value: cdktf.listMapperHcl(kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsParametersToHclTerraform, true)(struct.parameters),
            isBlock: true,
            type: "set",
            storageClassType: "KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsParametersList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsToHclTerraform = kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsToHclTerraform;
class KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // parameters - computed: false, optional: true, required: false
        this._parameters = new KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsParametersList(this, "parameters", true);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        if (this._parameters?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.parameters = this._parameters?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._type = undefined;
            this._parameters.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._type = value.type;
            this._parameters.internalValue = value.parameters;
        }
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get parameters() {
        return this._parameters;
    }
    putParameters(value) {
        this._parameters.internalValue = value;
    }
    resetParameters() {
        this._parameters.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parametersInput() {
        return this._parameters.internalValue;
    }
}
exports.KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsOutputReference = KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsOutputReference;
_35 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsOutputReference[_35] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsOutputReference", version: "19.15.0" };
class KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsList = KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsList;
_36 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsList[_36] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsList", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        processors: cdktf.listMapper(kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsToTerraform, true)(struct.processors),
    };
}
exports.kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationToTerraform = kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationToTerraform;
function kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        processors: {
            value: cdktf.listMapperHcl(kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsToHclTerraform, true)(struct.processors),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationToHclTerraform = kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationToHclTerraform;
class KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // processors - computed: false, optional: true, required: false
        this._processors = new KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationProcessorsList(this, "processors", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._processors?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.processors = this._processors?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._processors.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._processors.internalValue = value.processors;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get processors() {
        return this._processors;
    }
    putProcessors(value) {
        this._processors.internalValue = value;
    }
    resetProcessors() {
        this._processors.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get processorsInput() {
        return this._processors.internalValue;
    }
}
exports.KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationOutputReference = KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationOutputReference;
_37 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationOutputReference[_37] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_stream_name: cdktf.stringToTerraform(struct.logStreamName),
    };
}
exports.kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform = kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform;
function kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        log_group_name: {
            value: cdktf.stringToHclTerraform(struct.logGroupName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        log_stream_name: {
            value: cdktf.stringToHclTerraform(struct.logStreamName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptionsToHclTerraform = kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptionsToHclTerraform;
class KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._logGroupName !== undefined) {
            hasAnyValues = true;
            internalValueResult.logGroupName = this._logGroupName;
        }
        if (this._logStreamName !== undefined) {
            hasAnyValues = true;
            internalValueResult.logStreamName = this._logStreamName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._logGroupName = undefined;
            this._logStreamName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._logGroupName = value.logGroupName;
            this._logStreamName = value.logStreamName;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get logGroupName() {
        return this.getStringAttribute('log_group_name');
    }
    set logGroupName(value) {
        this._logGroupName = value;
    }
    resetLogGroupName() {
        this._logGroupName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logGroupNameInput() {
        return this._logGroupName;
    }
    get logStreamName() {
        return this.getStringAttribute('log_stream_name');
    }
    set logStreamName(value) {
        this._logStreamName = value;
    }
    resetLogStreamName() {
        this._logStreamName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logStreamNameInput() {
        return this._logStreamName;
    }
}
exports.KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference = KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference;
_38 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference[_38] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationS3ConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_arn: cdktf.stringToTerraform(struct.bucketArn),
        buffering_interval: cdktf.numberToTerraform(struct.bufferingInterval),
        buffering_size: cdktf.numberToTerraform(struct.bufferingSize),
        compression_format: cdktf.stringToTerraform(struct.compressionFormat),
        error_output_prefix: cdktf.stringToTerraform(struct.errorOutputPrefix),
        kms_key_arn: cdktf.stringToTerraform(struct.kmsKeyArn),
        prefix: cdktf.stringToTerraform(struct.prefix),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        cloudwatch_logging_options: kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform(struct.cloudwatchLoggingOptions),
    };
}
exports.kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationS3ConfigurationToTerraform = kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationS3ConfigurationToTerraform;
function kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationS3ConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bucket_arn: {
            value: cdktf.stringToHclTerraform(struct.bucketArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        buffering_interval: {
            value: cdktf.numberToHclTerraform(struct.bufferingInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        buffering_size: {
            value: cdktf.numberToHclTerraform(struct.bufferingSize),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        compression_format: {
            value: cdktf.stringToHclTerraform(struct.compressionFormat),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        error_output_prefix: {
            value: cdktf.stringToHclTerraform(struct.errorOutputPrefix),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        kms_key_arn: {
            value: cdktf.stringToHclTerraform(struct.kmsKeyArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        prefix: {
            value: cdktf.stringToHclTerraform(struct.prefix),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        role_arn: {
            value: cdktf.stringToHclTerraform(struct.roleArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cloudwatch_logging_options: {
            value: kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptionsToHclTerraform(struct.cloudwatchLoggingOptions),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptionsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationS3ConfigurationToHclTerraform = kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationS3ConfigurationToHclTerraform;
class KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationS3ConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cloudwatch_logging_options - computed: false, optional: true, required: false
        this._cloudwatchLoggingOptions = new KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference(this, "cloudwatch_logging_options");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketArn = this._bucketArn;
        }
        if (this._bufferingInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufferingInterval = this._bufferingInterval;
        }
        if (this._bufferingSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufferingSize = this._bufferingSize;
        }
        if (this._compressionFormat !== undefined) {
            hasAnyValues = true;
            internalValueResult.compressionFormat = this._compressionFormat;
        }
        if (this._errorOutputPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.errorOutputPrefix = this._errorOutputPrefix;
        }
        if (this._kmsKeyArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyArn = this._kmsKeyArn;
        }
        if (this._prefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefix = this._prefix;
        }
        if (this._roleArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.roleArn = this._roleArn;
        }
        if (this._cloudwatchLoggingOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudwatchLoggingOptions = this._cloudwatchLoggingOptions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketArn = undefined;
            this._bufferingInterval = undefined;
            this._bufferingSize = undefined;
            this._compressionFormat = undefined;
            this._errorOutputPrefix = undefined;
            this._kmsKeyArn = undefined;
            this._prefix = undefined;
            this._roleArn = undefined;
            this._cloudwatchLoggingOptions.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketArn = value.bucketArn;
            this._bufferingInterval = value.bufferingInterval;
            this._bufferingSize = value.bufferingSize;
            this._compressionFormat = value.compressionFormat;
            this._errorOutputPrefix = value.errorOutputPrefix;
            this._kmsKeyArn = value.kmsKeyArn;
            this._prefix = value.prefix;
            this._roleArn = value.roleArn;
            this._cloudwatchLoggingOptions.internalValue = value.cloudwatchLoggingOptions;
        }
    }
    get bucketArn() {
        return this.getStringAttribute('bucket_arn');
    }
    set bucketArn(value) {
        this._bucketArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketArnInput() {
        return this._bucketArn;
    }
    get bufferingInterval() {
        return this.getNumberAttribute('buffering_interval');
    }
    set bufferingInterval(value) {
        this._bufferingInterval = value;
    }
    resetBufferingInterval() {
        this._bufferingInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufferingIntervalInput() {
        return this._bufferingInterval;
    }
    get bufferingSize() {
        return this.getNumberAttribute('buffering_size');
    }
    set bufferingSize(value) {
        this._bufferingSize = value;
    }
    resetBufferingSize() {
        this._bufferingSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufferingSizeInput() {
        return this._bufferingSize;
    }
    get compressionFormat() {
        return this.getStringAttribute('compression_format');
    }
    set compressionFormat(value) {
        this._compressionFormat = value;
    }
    resetCompressionFormat() {
        this._compressionFormat = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get compressionFormatInput() {
        return this._compressionFormat;
    }
    get errorOutputPrefix() {
        return this.getStringAttribute('error_output_prefix');
    }
    set errorOutputPrefix(value) {
        this._errorOutputPrefix = value;
    }
    resetErrorOutputPrefix() {
        this._errorOutputPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get errorOutputPrefixInput() {
        return this._errorOutputPrefix;
    }
    get kmsKeyArn() {
        return this.getStringAttribute('kms_key_arn');
    }
    set kmsKeyArn(value) {
        this._kmsKeyArn = value;
    }
    resetKmsKeyArn() {
        this._kmsKeyArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyArnInput() {
        return this._kmsKeyArn;
    }
    get prefix() {
        return this.getStringAttribute('prefix');
    }
    set prefix(value) {
        this._prefix = value;
    }
    resetPrefix() {
        this._prefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prefixInput() {
        return this._prefix;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get cloudwatchLoggingOptions() {
        return this._cloudwatchLoggingOptions;
    }
    putCloudwatchLoggingOptions(value) {
        this._cloudwatchLoggingOptions.internalValue = value;
    }
    resetCloudwatchLoggingOptions() {
        this._cloudwatchLoggingOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudwatchLoggingOptionsInput() {
        return this._cloudwatchLoggingOptions.internalValue;
    }
}
exports.KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationS3ConfigurationOutputReference = KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationS3ConfigurationOutputReference;
_39 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationS3ConfigurationOutputReference[_39] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationS3ConfigurationOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationVpcConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        security_group_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.securityGroupIds),
        subnet_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.subnetIds),
    };
}
exports.kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationVpcConfigToTerraform = kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationVpcConfigToTerraform;
function kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationVpcConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        role_arn: {
            value: cdktf.stringToHclTerraform(struct.roleArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        security_group_ids: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.securityGroupIds),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        subnet_ids: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.subnetIds),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationVpcConfigToHclTerraform = kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationVpcConfigToHclTerraform;
class KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationVpcConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._roleArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.roleArn = this._roleArn;
        }
        if (this._securityGroupIds !== undefined) {
            hasAnyValues = true;
            internalValueResult.securityGroupIds = this._securityGroupIds;
        }
        if (this._subnetIds !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnetIds = this._subnetIds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._roleArn = undefined;
            this._securityGroupIds = undefined;
            this._subnetIds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._roleArn = value.roleArn;
            this._securityGroupIds = value.securityGroupIds;
            this._subnetIds = value.subnetIds;
        }
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get securityGroupIds() {
        return cdktf.Fn.tolist(this.getListAttribute('security_group_ids'));
    }
    set securityGroupIds(value) {
        this._securityGroupIds = value;
    }
    // Temporarily expose input value. Use with caution.
    get securityGroupIdsInput() {
        return this._securityGroupIds;
    }
    get subnetIds() {
        return cdktf.Fn.tolist(this.getListAttribute('subnet_ids'));
    }
    set subnetIds(value) {
        this._subnetIds = value;
    }
    // Temporarily expose input value. Use with caution.
    get subnetIdsInput() {
        return this._subnetIds;
    }
    // vpc_id - computed: true, optional: false, required: false
    get vpcId() {
        return this.getStringAttribute('vpc_id');
    }
}
exports.KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationVpcConfigOutputReference = KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationVpcConfigOutputReference;
_40 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationVpcConfigOutputReference[_40] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationVpcConfigOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        buffering_interval: cdktf.numberToTerraform(struct.bufferingInterval),
        buffering_size: cdktf.numberToTerraform(struct.bufferingSize),
        collection_endpoint: cdktf.stringToTerraform(struct.collectionEndpoint),
        index_name: cdktf.stringToTerraform(struct.indexName),
        retry_duration: cdktf.numberToTerraform(struct.retryDuration),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        s3_backup_mode: cdktf.stringToTerraform(struct.s3BackupMode),
        cloudwatch_logging_options: kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationCloudwatchLoggingOptionsToTerraform(struct.cloudwatchLoggingOptions),
        processing_configuration: kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationToTerraform(struct.processingConfiguration),
        s3_configuration: kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationS3ConfigurationToTerraform(struct.s3Configuration),
        vpc_config: kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationVpcConfigToTerraform(struct.vpcConfig),
    };
}
exports.kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationToTerraform = kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationToTerraform;
function kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        buffering_interval: {
            value: cdktf.numberToHclTerraform(struct.bufferingInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        buffering_size: {
            value: cdktf.numberToHclTerraform(struct.bufferingSize),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        collection_endpoint: {
            value: cdktf.stringToHclTerraform(struct.collectionEndpoint),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        index_name: {
            value: cdktf.stringToHclTerraform(struct.indexName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        retry_duration: {
            value: cdktf.numberToHclTerraform(struct.retryDuration),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        role_arn: {
            value: cdktf.stringToHclTerraform(struct.roleArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        s3_backup_mode: {
            value: cdktf.stringToHclTerraform(struct.s3BackupMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cloudwatch_logging_options: {
            value: kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationCloudwatchLoggingOptionsToHclTerraform(struct.cloudwatchLoggingOptions),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationCloudwatchLoggingOptionsList",
        },
        processing_configuration: {
            value: kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationToHclTerraform(struct.processingConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationList",
        },
        s3_configuration: {
            value: kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationS3ConfigurationToHclTerraform(struct.s3Configuration),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationS3ConfigurationList",
        },
        vpc_config: {
            value: kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationVpcConfigToHclTerraform(struct.vpcConfig),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationVpcConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationToHclTerraform = kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationToHclTerraform;
class KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cloudwatch_logging_options - computed: false, optional: true, required: false
        this._cloudwatchLoggingOptions = new KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationCloudwatchLoggingOptionsOutputReference(this, "cloudwatch_logging_options");
        // processing_configuration - computed: false, optional: true, required: false
        this._processingConfiguration = new KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationProcessingConfigurationOutputReference(this, "processing_configuration");
        // s3_configuration - computed: false, optional: false, required: true
        this._s3Configuration = new KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationS3ConfigurationOutputReference(this, "s3_configuration");
        // vpc_config - computed: false, optional: true, required: false
        this._vpcConfig = new KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationVpcConfigOutputReference(this, "vpc_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bufferingInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufferingInterval = this._bufferingInterval;
        }
        if (this._bufferingSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufferingSize = this._bufferingSize;
        }
        if (this._collectionEndpoint !== undefined) {
            hasAnyValues = true;
            internalValueResult.collectionEndpoint = this._collectionEndpoint;
        }
        if (this._indexName !== undefined) {
            hasAnyValues = true;
            internalValueResult.indexName = this._indexName;
        }
        if (this._retryDuration !== undefined) {
            hasAnyValues = true;
            internalValueResult.retryDuration = this._retryDuration;
        }
        if (this._roleArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.roleArn = this._roleArn;
        }
        if (this._s3BackupMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3BackupMode = this._s3BackupMode;
        }
        if (this._cloudwatchLoggingOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudwatchLoggingOptions = this._cloudwatchLoggingOptions?.internalValue;
        }
        if (this._processingConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.processingConfiguration = this._processingConfiguration?.internalValue;
        }
        if (this._s3Configuration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3Configuration = this._s3Configuration?.internalValue;
        }
        if (this._vpcConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.vpcConfig = this._vpcConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bufferingInterval = undefined;
            this._bufferingSize = undefined;
            this._collectionEndpoint = undefined;
            this._indexName = undefined;
            this._retryDuration = undefined;
            this._roleArn = undefined;
            this._s3BackupMode = undefined;
            this._cloudwatchLoggingOptions.internalValue = undefined;
            this._processingConfiguration.internalValue = undefined;
            this._s3Configuration.internalValue = undefined;
            this._vpcConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bufferingInterval = value.bufferingInterval;
            this._bufferingSize = value.bufferingSize;
            this._collectionEndpoint = value.collectionEndpoint;
            this._indexName = value.indexName;
            this._retryDuration = value.retryDuration;
            this._roleArn = value.roleArn;
            this._s3BackupMode = value.s3BackupMode;
            this._cloudwatchLoggingOptions.internalValue = value.cloudwatchLoggingOptions;
            this._processingConfiguration.internalValue = value.processingConfiguration;
            this._s3Configuration.internalValue = value.s3Configuration;
            this._vpcConfig.internalValue = value.vpcConfig;
        }
    }
    get bufferingInterval() {
        return this.getNumberAttribute('buffering_interval');
    }
    set bufferingInterval(value) {
        this._bufferingInterval = value;
    }
    resetBufferingInterval() {
        this._bufferingInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufferingIntervalInput() {
        return this._bufferingInterval;
    }
    get bufferingSize() {
        return this.getNumberAttribute('buffering_size');
    }
    set bufferingSize(value) {
        this._bufferingSize = value;
    }
    resetBufferingSize() {
        this._bufferingSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufferingSizeInput() {
        return this._bufferingSize;
    }
    get collectionEndpoint() {
        return this.getStringAttribute('collection_endpoint');
    }
    set collectionEndpoint(value) {
        this._collectionEndpoint = value;
    }
    // Temporarily expose input value. Use with caution.
    get collectionEndpointInput() {
        return this._collectionEndpoint;
    }
    get indexName() {
        return this.getStringAttribute('index_name');
    }
    set indexName(value) {
        this._indexName = value;
    }
    // Temporarily expose input value. Use with caution.
    get indexNameInput() {
        return this._indexName;
    }
    get retryDuration() {
        return this.getNumberAttribute('retry_duration');
    }
    set retryDuration(value) {
        this._retryDuration = value;
    }
    resetRetryDuration() {
        this._retryDuration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retryDurationInput() {
        return this._retryDuration;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get s3BackupMode() {
        return this.getStringAttribute('s3_backup_mode');
    }
    set s3BackupMode(value) {
        this._s3BackupMode = value;
    }
    resetS3BackupMode() {
        this._s3BackupMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3BackupModeInput() {
        return this._s3BackupMode;
    }
    get cloudwatchLoggingOptions() {
        return this._cloudwatchLoggingOptions;
    }
    putCloudwatchLoggingOptions(value) {
        this._cloudwatchLoggingOptions.internalValue = value;
    }
    resetCloudwatchLoggingOptions() {
        this._cloudwatchLoggingOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudwatchLoggingOptionsInput() {
        return this._cloudwatchLoggingOptions.internalValue;
    }
    get processingConfiguration() {
        return this._processingConfiguration;
    }
    putProcessingConfiguration(value) {
        this._processingConfiguration.internalValue = value;
    }
    resetProcessingConfiguration() {
        this._processingConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get processingConfigurationInput() {
        return this._processingConfiguration.internalValue;
    }
    get s3Configuration() {
        return this._s3Configuration;
    }
    putS3Configuration(value) {
        this._s3Configuration.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get s3ConfigurationInput() {
        return this._s3Configuration.internalValue;
    }
    get vpcConfig() {
        return this._vpcConfig;
    }
    putVpcConfig(value) {
        this._vpcConfig.internalValue = value;
    }
    resetVpcConfig() {
        this._vpcConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vpcConfigInput() {
        return this._vpcConfig.internalValue;
    }
}
exports.KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationOutputReference = KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationOutputReference;
_41 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationOutputReference[_41] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_stream_name: cdktf.stringToTerraform(struct.logStreamName),
    };
}
exports.kinesisFirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsToTerraform = kinesisFirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsToTerraform;
function kinesisFirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        log_group_name: {
            value: cdktf.stringToHclTerraform(struct.logGroupName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        log_stream_name: {
            value: cdktf.stringToHclTerraform(struct.logStreamName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsToHclTerraform = kinesisFirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsToHclTerraform;
class KinesisFirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._logGroupName !== undefined) {
            hasAnyValues = true;
            internalValueResult.logGroupName = this._logGroupName;
        }
        if (this._logStreamName !== undefined) {
            hasAnyValues = true;
            internalValueResult.logStreamName = this._logStreamName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._logGroupName = undefined;
            this._logStreamName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._logGroupName = value.logGroupName;
            this._logStreamName = value.logStreamName;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get logGroupName() {
        return this.getStringAttribute('log_group_name');
    }
    set logGroupName(value) {
        this._logGroupName = value;
    }
    resetLogGroupName() {
        this._logGroupName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logGroupNameInput() {
        return this._logGroupName;
    }
    get logStreamName() {
        return this.getStringAttribute('log_stream_name');
    }
    set logStreamName(value) {
        this._logStreamName = value;
    }
    resetLogStreamName() {
        this._logStreamName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logStreamNameInput() {
        return this._logStreamName;
    }
}
exports.KinesisFirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsOutputReference = KinesisFirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsOutputReference;
_42 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsOutputReference[_42] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        parameter_name: cdktf.stringToTerraform(struct.parameterName),
        parameter_value: cdktf.stringToTerraform(struct.parameterValue),
    };
}
exports.kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsParametersToTerraform = kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsParametersToTerraform;
function kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsParametersToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        parameter_name: {
            value: cdktf.stringToHclTerraform(struct.parameterName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        parameter_value: {
            value: cdktf.stringToHclTerraform(struct.parameterValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsParametersToHclTerraform = kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsParametersToHclTerraform;
class KinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsParametersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._parameterName !== undefined) {
            hasAnyValues = true;
            internalValueResult.parameterName = this._parameterName;
        }
        if (this._parameterValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.parameterValue = this._parameterValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._parameterName = undefined;
            this._parameterValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._parameterName = value.parameterName;
            this._parameterValue = value.parameterValue;
        }
    }
    get parameterName() {
        return this.getStringAttribute('parameter_name');
    }
    set parameterName(value) {
        this._parameterName = value;
    }
    // Temporarily expose input value. Use with caution.
    get parameterNameInput() {
        return this._parameterName;
    }
    get parameterValue() {
        return this.getStringAttribute('parameter_value');
    }
    set parameterValue(value) {
        this._parameterValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get parameterValueInput() {
        return this._parameterValue;
    }
}
exports.KinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsParametersOutputReference = KinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsParametersOutputReference;
_43 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsParametersOutputReference[_43] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsParametersOutputReference", version: "19.15.0" };
class KinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsParametersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new KinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsParametersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.KinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsParametersList = KinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsParametersList;
_44 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsParametersList[_44] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsParametersList", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        type: cdktf.stringToTerraform(struct.type),
        parameters: cdktf.listMapper(kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsParametersToTerraform, true)(struct.parameters),
    };
}
exports.kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsToTerraform = kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsToTerraform;
function kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        type: {
            value: cdktf.stringToHclTerraform(struct.type),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        parameters: {
            value: cdktf.listMapperHcl(kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsParametersToHclTerraform, true)(struct.parameters),
            isBlock: true,
            type: "set",
            storageClassType: "KinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsParametersList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsToHclTerraform = kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsToHclTerraform;
class KinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // parameters - computed: false, optional: true, required: false
        this._parameters = new KinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsParametersList(this, "parameters", true);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        if (this._parameters?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.parameters = this._parameters?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._type = undefined;
            this._parameters.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._type = value.type;
            this._parameters.internalValue = value.parameters;
        }
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get parameters() {
        return this._parameters;
    }
    putParameters(value) {
        this._parameters.internalValue = value;
    }
    resetParameters() {
        this._parameters.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parametersInput() {
        return this._parameters.internalValue;
    }
}
exports.KinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsOutputReference = KinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsOutputReference;
_45 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsOutputReference[_45] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsOutputReference", version: "19.15.0" };
class KinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new KinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.KinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsList = KinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsList;
_46 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsList[_46] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsList", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        processors: cdktf.listMapper(kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsToTerraform, true)(struct.processors),
    };
}
exports.kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationToTerraform = kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationToTerraform;
function kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        processors: {
            value: cdktf.listMapperHcl(kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsToHclTerraform, true)(struct.processors),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationToHclTerraform = kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationToHclTerraform;
class KinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // processors - computed: false, optional: true, required: false
        this._processors = new KinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorsList(this, "processors", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._processors?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.processors = this._processors?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._processors.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._processors.internalValue = value.processors;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get processors() {
        return this._processors;
    }
    putProcessors(value) {
        this._processors.internalValue = value;
    }
    resetProcessors() {
        this._processors.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get processorsInput() {
        return this._processors.internalValue;
    }
}
exports.KinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationOutputReference = KinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationOutputReference;
_47 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationOutputReference[_47] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_stream_name: cdktf.stringToTerraform(struct.logStreamName),
    };
}
exports.kinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsToTerraform = kinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsToTerraform;
function kinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        log_group_name: {
            value: cdktf.stringToHclTerraform(struct.logGroupName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        log_stream_name: {
            value: cdktf.stringToHclTerraform(struct.logStreamName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsToHclTerraform = kinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsToHclTerraform;
class KinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._logGroupName !== undefined) {
            hasAnyValues = true;
            internalValueResult.logGroupName = this._logGroupName;
        }
        if (this._logStreamName !== undefined) {
            hasAnyValues = true;
            internalValueResult.logStreamName = this._logStreamName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._logGroupName = undefined;
            this._logStreamName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._logGroupName = value.logGroupName;
            this._logStreamName = value.logStreamName;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get logGroupName() {
        return this.getStringAttribute('log_group_name');
    }
    set logGroupName(value) {
        this._logGroupName = value;
    }
    resetLogGroupName() {
        this._logGroupName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logGroupNameInput() {
        return this._logGroupName;
    }
    get logStreamName() {
        return this.getStringAttribute('log_stream_name');
    }
    set logStreamName(value) {
        this._logStreamName = value;
    }
    resetLogStreamName() {
        this._logStreamName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logStreamNameInput() {
        return this._logStreamName;
    }
}
exports.KinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutputReference = KinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutputReference;
_48 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutputReference[_48] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_arn: cdktf.stringToTerraform(struct.bucketArn),
        buffering_interval: cdktf.numberToTerraform(struct.bufferingInterval),
        buffering_size: cdktf.numberToTerraform(struct.bufferingSize),
        compression_format: cdktf.stringToTerraform(struct.compressionFormat),
        error_output_prefix: cdktf.stringToTerraform(struct.errorOutputPrefix),
        kms_key_arn: cdktf.stringToTerraform(struct.kmsKeyArn),
        prefix: cdktf.stringToTerraform(struct.prefix),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        cloudwatch_logging_options: kinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsToTerraform(struct.cloudwatchLoggingOptions),
    };
}
exports.kinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationToTerraform = kinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationToTerraform;
function kinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bucket_arn: {
            value: cdktf.stringToHclTerraform(struct.bucketArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        buffering_interval: {
            value: cdktf.numberToHclTerraform(struct.bufferingInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        buffering_size: {
            value: cdktf.numberToHclTerraform(struct.bufferingSize),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        compression_format: {
            value: cdktf.stringToHclTerraform(struct.compressionFormat),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        error_output_prefix: {
            value: cdktf.stringToHclTerraform(struct.errorOutputPrefix),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        kms_key_arn: {
            value: cdktf.stringToHclTerraform(struct.kmsKeyArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        prefix: {
            value: cdktf.stringToHclTerraform(struct.prefix),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        role_arn: {
            value: cdktf.stringToHclTerraform(struct.roleArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cloudwatch_logging_options: {
            value: kinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsToHclTerraform(struct.cloudwatchLoggingOptions),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationToHclTerraform = kinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationToHclTerraform;
class KinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cloudwatch_logging_options - computed: false, optional: true, required: false
        this._cloudwatchLoggingOptions = new KinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsOutputReference(this, "cloudwatch_logging_options");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketArn = this._bucketArn;
        }
        if (this._bufferingInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufferingInterval = this._bufferingInterval;
        }
        if (this._bufferingSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufferingSize = this._bufferingSize;
        }
        if (this._compressionFormat !== undefined) {
            hasAnyValues = true;
            internalValueResult.compressionFormat = this._compressionFormat;
        }
        if (this._errorOutputPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.errorOutputPrefix = this._errorOutputPrefix;
        }
        if (this._kmsKeyArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyArn = this._kmsKeyArn;
        }
        if (this._prefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefix = this._prefix;
        }
        if (this._roleArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.roleArn = this._roleArn;
        }
        if (this._cloudwatchLoggingOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudwatchLoggingOptions = this._cloudwatchLoggingOptions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketArn = undefined;
            this._bufferingInterval = undefined;
            this._bufferingSize = undefined;
            this._compressionFormat = undefined;
            this._errorOutputPrefix = undefined;
            this._kmsKeyArn = undefined;
            this._prefix = undefined;
            this._roleArn = undefined;
            this._cloudwatchLoggingOptions.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketArn = value.bucketArn;
            this._bufferingInterval = value.bufferingInterval;
            this._bufferingSize = value.bufferingSize;
            this._compressionFormat = value.compressionFormat;
            this._errorOutputPrefix = value.errorOutputPrefix;
            this._kmsKeyArn = value.kmsKeyArn;
            this._prefix = value.prefix;
            this._roleArn = value.roleArn;
            this._cloudwatchLoggingOptions.internalValue = value.cloudwatchLoggingOptions;
        }
    }
    get bucketArn() {
        return this.getStringAttribute('bucket_arn');
    }
    set bucketArn(value) {
        this._bucketArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketArnInput() {
        return this._bucketArn;
    }
    get bufferingInterval() {
        return this.getNumberAttribute('buffering_interval');
    }
    set bufferingInterval(value) {
        this._bufferingInterval = value;
    }
    resetBufferingInterval() {
        this._bufferingInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufferingIntervalInput() {
        return this._bufferingInterval;
    }
    get bufferingSize() {
        return this.getNumberAttribute('buffering_size');
    }
    set bufferingSize(value) {
        this._bufferingSize = value;
    }
    resetBufferingSize() {
        this._bufferingSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufferingSizeInput() {
        return this._bufferingSize;
    }
    get compressionFormat() {
        return this.getStringAttribute('compression_format');
    }
    set compressionFormat(value) {
        this._compressionFormat = value;
    }
    resetCompressionFormat() {
        this._compressionFormat = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get compressionFormatInput() {
        return this._compressionFormat;
    }
    get errorOutputPrefix() {
        return this.getStringAttribute('error_output_prefix');
    }
    set errorOutputPrefix(value) {
        this._errorOutputPrefix = value;
    }
    resetErrorOutputPrefix() {
        this._errorOutputPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get errorOutputPrefixInput() {
        return this._errorOutputPrefix;
    }
    get kmsKeyArn() {
        return this.getStringAttribute('kms_key_arn');
    }
    set kmsKeyArn(value) {
        this._kmsKeyArn = value;
    }
    resetKmsKeyArn() {
        this._kmsKeyArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyArnInput() {
        return this._kmsKeyArn;
    }
    get prefix() {
        return this.getStringAttribute('prefix');
    }
    set prefix(value) {
        this._prefix = value;
    }
    resetPrefix() {
        this._prefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prefixInput() {
        return this._prefix;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get cloudwatchLoggingOptions() {
        return this._cloudwatchLoggingOptions;
    }
    putCloudwatchLoggingOptions(value) {
        this._cloudwatchLoggingOptions.internalValue = value;
    }
    resetCloudwatchLoggingOptions() {
        this._cloudwatchLoggingOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudwatchLoggingOptionsInput() {
        return this._cloudwatchLoggingOptions.internalValue;
    }
}
exports.KinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationOutputReference = KinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationOutputReference;
_49 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationOutputReference[_49] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_stream_name: cdktf.stringToTerraform(struct.logStreamName),
    };
}
exports.kinesisFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform = kinesisFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform;
function kinesisFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        log_group_name: {
            value: cdktf.stringToHclTerraform(struct.logGroupName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        log_stream_name: {
            value: cdktf.stringToHclTerraform(struct.logStreamName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsToHclTerraform = kinesisFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsToHclTerraform;
class KinesisFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._logGroupName !== undefined) {
            hasAnyValues = true;
            internalValueResult.logGroupName = this._logGroupName;
        }
        if (this._logStreamName !== undefined) {
            hasAnyValues = true;
            internalValueResult.logStreamName = this._logStreamName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._logGroupName = undefined;
            this._logStreamName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._logGroupName = value.logGroupName;
            this._logStreamName = value.logStreamName;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get logGroupName() {
        return this.getStringAttribute('log_group_name');
    }
    set logGroupName(value) {
        this._logGroupName = value;
    }
    resetLogGroupName() {
        this._logGroupName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logGroupNameInput() {
        return this._logGroupName;
    }
    get logStreamName() {
        return this.getStringAttribute('log_stream_name');
    }
    set logStreamName(value) {
        this._logStreamName = value;
    }
    resetLogStreamName() {
        this._logStreamName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logStreamNameInput() {
        return this._logStreamName;
    }
}
exports.KinesisFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference = KinesisFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference;
_50 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference[_50] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_arn: cdktf.stringToTerraform(struct.bucketArn),
        buffering_interval: cdktf.numberToTerraform(struct.bufferingInterval),
        buffering_size: cdktf.numberToTerraform(struct.bufferingSize),
        compression_format: cdktf.stringToTerraform(struct.compressionFormat),
        error_output_prefix: cdktf.stringToTerraform(struct.errorOutputPrefix),
        kms_key_arn: cdktf.stringToTerraform(struct.kmsKeyArn),
        prefix: cdktf.stringToTerraform(struct.prefix),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        cloudwatch_logging_options: kinesisFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform(struct.cloudwatchLoggingOptions),
    };
}
exports.kinesisFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationToTerraform = kinesisFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationToTerraform;
function kinesisFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bucket_arn: {
            value: cdktf.stringToHclTerraform(struct.bucketArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        buffering_interval: {
            value: cdktf.numberToHclTerraform(struct.bufferingInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        buffering_size: {
            value: cdktf.numberToHclTerraform(struct.bufferingSize),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        compression_format: {
            value: cdktf.stringToHclTerraform(struct.compressionFormat),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        error_output_prefix: {
            value: cdktf.stringToHclTerraform(struct.errorOutputPrefix),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        kms_key_arn: {
            value: cdktf.stringToHclTerraform(struct.kmsKeyArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        prefix: {
            value: cdktf.stringToHclTerraform(struct.prefix),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        role_arn: {
            value: cdktf.stringToHclTerraform(struct.roleArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cloudwatch_logging_options: {
            value: kinesisFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsToHclTerraform(struct.cloudwatchLoggingOptions),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationToHclTerraform = kinesisFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationToHclTerraform;
class KinesisFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cloudwatch_logging_options - computed: false, optional: true, required: false
        this._cloudwatchLoggingOptions = new KinesisFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference(this, "cloudwatch_logging_options");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketArn = this._bucketArn;
        }
        if (this._bufferingInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufferingInterval = this._bufferingInterval;
        }
        if (this._bufferingSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufferingSize = this._bufferingSize;
        }
        if (this._compressionFormat !== undefined) {
            hasAnyValues = true;
            internalValueResult.compressionFormat = this._compressionFormat;
        }
        if (this._errorOutputPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.errorOutputPrefix = this._errorOutputPrefix;
        }
        if (this._kmsKeyArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyArn = this._kmsKeyArn;
        }
        if (this._prefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefix = this._prefix;
        }
        if (this._roleArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.roleArn = this._roleArn;
        }
        if (this._cloudwatchLoggingOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudwatchLoggingOptions = this._cloudwatchLoggingOptions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketArn = undefined;
            this._bufferingInterval = undefined;
            this._bufferingSize = undefined;
            this._compressionFormat = undefined;
            this._errorOutputPrefix = undefined;
            this._kmsKeyArn = undefined;
            this._prefix = undefined;
            this._roleArn = undefined;
            this._cloudwatchLoggingOptions.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketArn = value.bucketArn;
            this._bufferingInterval = value.bufferingInterval;
            this._bufferingSize = value.bufferingSize;
            this._compressionFormat = value.compressionFormat;
            this._errorOutputPrefix = value.errorOutputPrefix;
            this._kmsKeyArn = value.kmsKeyArn;
            this._prefix = value.prefix;
            this._roleArn = value.roleArn;
            this._cloudwatchLoggingOptions.internalValue = value.cloudwatchLoggingOptions;
        }
    }
    get bucketArn() {
        return this.getStringAttribute('bucket_arn');
    }
    set bucketArn(value) {
        this._bucketArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketArnInput() {
        return this._bucketArn;
    }
    get bufferingInterval() {
        return this.getNumberAttribute('buffering_interval');
    }
    set bufferingInterval(value) {
        this._bufferingInterval = value;
    }
    resetBufferingInterval() {
        this._bufferingInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufferingIntervalInput() {
        return this._bufferingInterval;
    }
    get bufferingSize() {
        return this.getNumberAttribute('buffering_size');
    }
    set bufferingSize(value) {
        this._bufferingSize = value;
    }
    resetBufferingSize() {
        this._bufferingSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufferingSizeInput() {
        return this._bufferingSize;
    }
    get compressionFormat() {
        return this.getStringAttribute('compression_format');
    }
    set compressionFormat(value) {
        this._compressionFormat = value;
    }
    resetCompressionFormat() {
        this._compressionFormat = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get compressionFormatInput() {
        return this._compressionFormat;
    }
    get errorOutputPrefix() {
        return this.getStringAttribute('error_output_prefix');
    }
    set errorOutputPrefix(value) {
        this._errorOutputPrefix = value;
    }
    resetErrorOutputPrefix() {
        this._errorOutputPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get errorOutputPrefixInput() {
        return this._errorOutputPrefix;
    }
    get kmsKeyArn() {
        return this.getStringAttribute('kms_key_arn');
    }
    set kmsKeyArn(value) {
        this._kmsKeyArn = value;
    }
    resetKmsKeyArn() {
        this._kmsKeyArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyArnInput() {
        return this._kmsKeyArn;
    }
    get prefix() {
        return this.getStringAttribute('prefix');
    }
    set prefix(value) {
        this._prefix = value;
    }
    resetPrefix() {
        this._prefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prefixInput() {
        return this._prefix;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get cloudwatchLoggingOptions() {
        return this._cloudwatchLoggingOptions;
    }
    putCloudwatchLoggingOptions(value) {
        this._cloudwatchLoggingOptions.internalValue = value;
    }
    resetCloudwatchLoggingOptions() {
        this._cloudwatchLoggingOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudwatchLoggingOptionsInput() {
        return this._cloudwatchLoggingOptions.internalValue;
    }
}
exports.KinesisFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationOutputReference = KinesisFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationOutputReference;
_51 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationOutputReference[_51] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamRedshiftConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cluster_jdbcurl: cdktf.stringToTerraform(struct.clusterJdbcurl),
        copy_options: cdktf.stringToTerraform(struct.copyOptions),
        data_table_columns: cdktf.stringToTerraform(struct.dataTableColumns),
        data_table_name: cdktf.stringToTerraform(struct.dataTableName),
        password: cdktf.stringToTerraform(struct.password),
        retry_duration: cdktf.numberToTerraform(struct.retryDuration),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        s3_backup_mode: cdktf.stringToTerraform(struct.s3BackupMode),
        username: cdktf.stringToTerraform(struct.username),
        cloudwatch_logging_options: kinesisFirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsToTerraform(struct.cloudwatchLoggingOptions),
        processing_configuration: kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationToTerraform(struct.processingConfiguration),
        s3_backup_configuration: kinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationToTerraform(struct.s3BackupConfiguration),
        s3_configuration: kinesisFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationToTerraform(struct.s3Configuration),
    };
}
exports.kinesisFirehoseDeliveryStreamRedshiftConfigurationToTerraform = kinesisFirehoseDeliveryStreamRedshiftConfigurationToTerraform;
function kinesisFirehoseDeliveryStreamRedshiftConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cluster_jdbcurl: {
            value: cdktf.stringToHclTerraform(struct.clusterJdbcurl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        copy_options: {
            value: cdktf.stringToHclTerraform(struct.copyOptions),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        data_table_columns: {
            value: cdktf.stringToHclTerraform(struct.dataTableColumns),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        data_table_name: {
            value: cdktf.stringToHclTerraform(struct.dataTableName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        password: {
            value: cdktf.stringToHclTerraform(struct.password),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        retry_duration: {
            value: cdktf.numberToHclTerraform(struct.retryDuration),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        role_arn: {
            value: cdktf.stringToHclTerraform(struct.roleArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        s3_backup_mode: {
            value: cdktf.stringToHclTerraform(struct.s3BackupMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        username: {
            value: cdktf.stringToHclTerraform(struct.username),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cloudwatch_logging_options: {
            value: kinesisFirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsToHclTerraform(struct.cloudwatchLoggingOptions),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsList",
        },
        processing_configuration: {
            value: kinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationToHclTerraform(struct.processingConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationList",
        },
        s3_backup_configuration: {
            value: kinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationToHclTerraform(struct.s3BackupConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationList",
        },
        s3_configuration: {
            value: kinesisFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationToHclTerraform(struct.s3Configuration),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamRedshiftConfigurationToHclTerraform = kinesisFirehoseDeliveryStreamRedshiftConfigurationToHclTerraform;
class KinesisFirehoseDeliveryStreamRedshiftConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cloudwatch_logging_options - computed: false, optional: true, required: false
        this._cloudwatchLoggingOptions = new KinesisFirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsOutputReference(this, "cloudwatch_logging_options");
        // processing_configuration - computed: false, optional: true, required: false
        this._processingConfiguration = new KinesisFirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationOutputReference(this, "processing_configuration");
        // s3_backup_configuration - computed: false, optional: true, required: false
        this._s3BackupConfiguration = new KinesisFirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationOutputReference(this, "s3_backup_configuration");
        // s3_configuration - computed: false, optional: false, required: true
        this._s3Configuration = new KinesisFirehoseDeliveryStreamRedshiftConfigurationS3ConfigurationOutputReference(this, "s3_configuration");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clusterJdbcurl !== undefined) {
            hasAnyValues = true;
            internalValueResult.clusterJdbcurl = this._clusterJdbcurl;
        }
        if (this._copyOptions !== undefined) {
            hasAnyValues = true;
            internalValueResult.copyOptions = this._copyOptions;
        }
        if (this._dataTableColumns !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataTableColumns = this._dataTableColumns;
        }
        if (this._dataTableName !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataTableName = this._dataTableName;
        }
        if (this._password !== undefined) {
            hasAnyValues = true;
            internalValueResult.password = this._password;
        }
        if (this._retryDuration !== undefined) {
            hasAnyValues = true;
            internalValueResult.retryDuration = this._retryDuration;
        }
        if (this._roleArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.roleArn = this._roleArn;
        }
        if (this._s3BackupMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3BackupMode = this._s3BackupMode;
        }
        if (this._username !== undefined) {
            hasAnyValues = true;
            internalValueResult.username = this._username;
        }
        if (this._cloudwatchLoggingOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudwatchLoggingOptions = this._cloudwatchLoggingOptions?.internalValue;
        }
        if (this._processingConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.processingConfiguration = this._processingConfiguration?.internalValue;
        }
        if (this._s3BackupConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3BackupConfiguration = this._s3BackupConfiguration?.internalValue;
        }
        if (this._s3Configuration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3Configuration = this._s3Configuration?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._clusterJdbcurl = undefined;
            this._copyOptions = undefined;
            this._dataTableColumns = undefined;
            this._dataTableName = undefined;
            this._password = undefined;
            this._retryDuration = undefined;
            this._roleArn = undefined;
            this._s3BackupMode = undefined;
            this._username = undefined;
            this._cloudwatchLoggingOptions.internalValue = undefined;
            this._processingConfiguration.internalValue = undefined;
            this._s3BackupConfiguration.internalValue = undefined;
            this._s3Configuration.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._clusterJdbcurl = value.clusterJdbcurl;
            this._copyOptions = value.copyOptions;
            this._dataTableColumns = value.dataTableColumns;
            this._dataTableName = value.dataTableName;
            this._password = value.password;
            this._retryDuration = value.retryDuration;
            this._roleArn = value.roleArn;
            this._s3BackupMode = value.s3BackupMode;
            this._username = value.username;
            this._cloudwatchLoggingOptions.internalValue = value.cloudwatchLoggingOptions;
            this._processingConfiguration.internalValue = value.processingConfiguration;
            this._s3BackupConfiguration.internalValue = value.s3BackupConfiguration;
            this._s3Configuration.internalValue = value.s3Configuration;
        }
    }
    get clusterJdbcurl() {
        return this.getStringAttribute('cluster_jdbcurl');
    }
    set clusterJdbcurl(value) {
        this._clusterJdbcurl = value;
    }
    // Temporarily expose input value. Use with caution.
    get clusterJdbcurlInput() {
        return this._clusterJdbcurl;
    }
    get copyOptions() {
        return this.getStringAttribute('copy_options');
    }
    set copyOptions(value) {
        this._copyOptions = value;
    }
    resetCopyOptions() {
        this._copyOptions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get copyOptionsInput() {
        return this._copyOptions;
    }
    get dataTableColumns() {
        return this.getStringAttribute('data_table_columns');
    }
    set dataTableColumns(value) {
        this._dataTableColumns = value;
    }
    resetDataTableColumns() {
        this._dataTableColumns = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataTableColumnsInput() {
        return this._dataTableColumns;
    }
    get dataTableName() {
        return this.getStringAttribute('data_table_name');
    }
    set dataTableName(value) {
        this._dataTableName = value;
    }
    // Temporarily expose input value. Use with caution.
    get dataTableNameInput() {
        return this._dataTableName;
    }
    get password() {
        return this.getStringAttribute('password');
    }
    set password(value) {
        this._password = value;
    }
    // Temporarily expose input value. Use with caution.
    get passwordInput() {
        return this._password;
    }
    get retryDuration() {
        return this.getNumberAttribute('retry_duration');
    }
    set retryDuration(value) {
        this._retryDuration = value;
    }
    resetRetryDuration() {
        this._retryDuration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retryDurationInput() {
        return this._retryDuration;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get s3BackupMode() {
        return this.getStringAttribute('s3_backup_mode');
    }
    set s3BackupMode(value) {
        this._s3BackupMode = value;
    }
    resetS3BackupMode() {
        this._s3BackupMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3BackupModeInput() {
        return this._s3BackupMode;
    }
    get username() {
        return this.getStringAttribute('username');
    }
    set username(value) {
        this._username = value;
    }
    // Temporarily expose input value. Use with caution.
    get usernameInput() {
        return this._username;
    }
    get cloudwatchLoggingOptions() {
        return this._cloudwatchLoggingOptions;
    }
    putCloudwatchLoggingOptions(value) {
        this._cloudwatchLoggingOptions.internalValue = value;
    }
    resetCloudwatchLoggingOptions() {
        this._cloudwatchLoggingOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudwatchLoggingOptionsInput() {
        return this._cloudwatchLoggingOptions.internalValue;
    }
    get processingConfiguration() {
        return this._processingConfiguration;
    }
    putProcessingConfiguration(value) {
        this._processingConfiguration.internalValue = value;
    }
    resetProcessingConfiguration() {
        this._processingConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get processingConfigurationInput() {
        return this._processingConfiguration.internalValue;
    }
    get s3BackupConfiguration() {
        return this._s3BackupConfiguration;
    }
    putS3BackupConfiguration(value) {
        this._s3BackupConfiguration.internalValue = value;
    }
    resetS3BackupConfiguration() {
        this._s3BackupConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3BackupConfigurationInput() {
        return this._s3BackupConfiguration.internalValue;
    }
    get s3Configuration() {
        return this._s3Configuration;
    }
    putS3Configuration(value) {
        this._s3Configuration.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get s3ConfigurationInput() {
        return this._s3Configuration.internalValue;
    }
}
exports.KinesisFirehoseDeliveryStreamRedshiftConfigurationOutputReference = KinesisFirehoseDeliveryStreamRedshiftConfigurationOutputReference;
_52 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamRedshiftConfigurationOutputReference[_52] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamRedshiftConfigurationOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamServerSideEncryptionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        key_arn: cdktf.stringToTerraform(struct.keyArn),
        key_type: cdktf.stringToTerraform(struct.keyType),
    };
}
exports.kinesisFirehoseDeliveryStreamServerSideEncryptionToTerraform = kinesisFirehoseDeliveryStreamServerSideEncryptionToTerraform;
function kinesisFirehoseDeliveryStreamServerSideEncryptionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        key_arn: {
            value: cdktf.stringToHclTerraform(struct.keyArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        key_type: {
            value: cdktf.stringToHclTerraform(struct.keyType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamServerSideEncryptionToHclTerraform = kinesisFirehoseDeliveryStreamServerSideEncryptionToHclTerraform;
class KinesisFirehoseDeliveryStreamServerSideEncryptionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._keyArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.keyArn = this._keyArn;
        }
        if (this._keyType !== undefined) {
            hasAnyValues = true;
            internalValueResult.keyType = this._keyType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._keyArn = undefined;
            this._keyType = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._keyArn = value.keyArn;
            this._keyType = value.keyType;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get keyArn() {
        return this.getStringAttribute('key_arn');
    }
    set keyArn(value) {
        this._keyArn = value;
    }
    resetKeyArn() {
        this._keyArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyArnInput() {
        return this._keyArn;
    }
    get keyType() {
        return this.getStringAttribute('key_type');
    }
    set keyType(value) {
        this._keyType = value;
    }
    resetKeyType() {
        this._keyType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyTypeInput() {
        return this._keyType;
    }
}
exports.KinesisFirehoseDeliveryStreamServerSideEncryptionOutputReference = KinesisFirehoseDeliveryStreamServerSideEncryptionOutputReference;
_53 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamServerSideEncryptionOutputReference[_53] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamServerSideEncryptionOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_stream_name: cdktf.stringToTerraform(struct.logStreamName),
    };
}
exports.kinesisFirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsToTerraform = kinesisFirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsToTerraform;
function kinesisFirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        log_group_name: {
            value: cdktf.stringToHclTerraform(struct.logGroupName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        log_stream_name: {
            value: cdktf.stringToHclTerraform(struct.logStreamName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsToHclTerraform = kinesisFirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsToHclTerraform;
class KinesisFirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._logGroupName !== undefined) {
            hasAnyValues = true;
            internalValueResult.logGroupName = this._logGroupName;
        }
        if (this._logStreamName !== undefined) {
            hasAnyValues = true;
            internalValueResult.logStreamName = this._logStreamName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._logGroupName = undefined;
            this._logStreamName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._logGroupName = value.logGroupName;
            this._logStreamName = value.logStreamName;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get logGroupName() {
        return this.getStringAttribute('log_group_name');
    }
    set logGroupName(value) {
        this._logGroupName = value;
    }
    resetLogGroupName() {
        this._logGroupName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logGroupNameInput() {
        return this._logGroupName;
    }
    get logStreamName() {
        return this.getStringAttribute('log_stream_name');
    }
    set logStreamName(value) {
        this._logStreamName = value;
    }
    resetLogStreamName() {
        this._logStreamName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logStreamNameInput() {
        return this._logStreamName;
    }
}
exports.KinesisFirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsOutputReference = KinesisFirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsOutputReference;
_54 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsOutputReference[_54] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        parameter_name: cdktf.stringToTerraform(struct.parameterName),
        parameter_value: cdktf.stringToTerraform(struct.parameterValue),
    };
}
exports.kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsParametersToTerraform = kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsParametersToTerraform;
function kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsParametersToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        parameter_name: {
            value: cdktf.stringToHclTerraform(struct.parameterName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        parameter_value: {
            value: cdktf.stringToHclTerraform(struct.parameterValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsParametersToHclTerraform = kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsParametersToHclTerraform;
class KinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsParametersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._parameterName !== undefined) {
            hasAnyValues = true;
            internalValueResult.parameterName = this._parameterName;
        }
        if (this._parameterValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.parameterValue = this._parameterValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._parameterName = undefined;
            this._parameterValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._parameterName = value.parameterName;
            this._parameterValue = value.parameterValue;
        }
    }
    get parameterName() {
        return this.getStringAttribute('parameter_name');
    }
    set parameterName(value) {
        this._parameterName = value;
    }
    // Temporarily expose input value. Use with caution.
    get parameterNameInput() {
        return this._parameterName;
    }
    get parameterValue() {
        return this.getStringAttribute('parameter_value');
    }
    set parameterValue(value) {
        this._parameterValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get parameterValueInput() {
        return this._parameterValue;
    }
}
exports.KinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsParametersOutputReference = KinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsParametersOutputReference;
_55 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsParametersOutputReference[_55] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsParametersOutputReference", version: "19.15.0" };
class KinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsParametersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new KinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsParametersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.KinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsParametersList = KinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsParametersList;
_56 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsParametersList[_56] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsParametersList", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        type: cdktf.stringToTerraform(struct.type),
        parameters: cdktf.listMapper(kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsParametersToTerraform, true)(struct.parameters),
    };
}
exports.kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsToTerraform = kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsToTerraform;
function kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        type: {
            value: cdktf.stringToHclTerraform(struct.type),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        parameters: {
            value: cdktf.listMapperHcl(kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsParametersToHclTerraform, true)(struct.parameters),
            isBlock: true,
            type: "set",
            storageClassType: "KinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsParametersList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsToHclTerraform = kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsToHclTerraform;
class KinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // parameters - computed: false, optional: true, required: false
        this._parameters = new KinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsParametersList(this, "parameters", true);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        if (this._parameters?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.parameters = this._parameters?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._type = undefined;
            this._parameters.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._type = value.type;
            this._parameters.internalValue = value.parameters;
        }
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get parameters() {
        return this._parameters;
    }
    putParameters(value) {
        this._parameters.internalValue = value;
    }
    resetParameters() {
        this._parameters.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parametersInput() {
        return this._parameters.internalValue;
    }
}
exports.KinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsOutputReference = KinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsOutputReference;
_57 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsOutputReference[_57] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsOutputReference", version: "19.15.0" };
class KinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new KinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.KinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsList = KinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsList;
_58 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsList[_58] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsList", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        processors: cdktf.listMapper(kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsToTerraform, true)(struct.processors),
    };
}
exports.kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationToTerraform = kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationToTerraform;
function kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        processors: {
            value: cdktf.listMapperHcl(kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsToHclTerraform, true)(struct.processors),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationToHclTerraform = kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationToHclTerraform;
class KinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // processors - computed: false, optional: true, required: false
        this._processors = new KinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorsList(this, "processors", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._processors?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.processors = this._processors?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._processors.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._processors.internalValue = value.processors;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get processors() {
        return this._processors;
    }
    putProcessors(value) {
        this._processors.internalValue = value;
    }
    resetProcessors() {
        this._processors.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get processorsInput() {
        return this._processors.internalValue;
    }
}
exports.KinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationOutputReference = KinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationOutputReference;
_59 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationOutputReference[_59] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_stream_name: cdktf.stringToTerraform(struct.logStreamName),
    };
}
exports.kinesisFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform = kinesisFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform;
function kinesisFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        log_group_name: {
            value: cdktf.stringToHclTerraform(struct.logGroupName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        log_stream_name: {
            value: cdktf.stringToHclTerraform(struct.logStreamName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsToHclTerraform = kinesisFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsToHclTerraform;
class KinesisFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._logGroupName !== undefined) {
            hasAnyValues = true;
            internalValueResult.logGroupName = this._logGroupName;
        }
        if (this._logStreamName !== undefined) {
            hasAnyValues = true;
            internalValueResult.logStreamName = this._logStreamName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._logGroupName = undefined;
            this._logStreamName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._logGroupName = value.logGroupName;
            this._logStreamName = value.logStreamName;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get logGroupName() {
        return this.getStringAttribute('log_group_name');
    }
    set logGroupName(value) {
        this._logGroupName = value;
    }
    resetLogGroupName() {
        this._logGroupName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logGroupNameInput() {
        return this._logGroupName;
    }
    get logStreamName() {
        return this.getStringAttribute('log_stream_name');
    }
    set logStreamName(value) {
        this._logStreamName = value;
    }
    resetLogStreamName() {
        this._logStreamName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logStreamNameInput() {
        return this._logStreamName;
    }
}
exports.KinesisFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference = KinesisFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference;
_60 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference[_60] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_arn: cdktf.stringToTerraform(struct.bucketArn),
        buffering_interval: cdktf.numberToTerraform(struct.bufferingInterval),
        buffering_size: cdktf.numberToTerraform(struct.bufferingSize),
        compression_format: cdktf.stringToTerraform(struct.compressionFormat),
        error_output_prefix: cdktf.stringToTerraform(struct.errorOutputPrefix),
        kms_key_arn: cdktf.stringToTerraform(struct.kmsKeyArn),
        prefix: cdktf.stringToTerraform(struct.prefix),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        cloudwatch_logging_options: kinesisFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsToTerraform(struct.cloudwatchLoggingOptions),
    };
}
exports.kinesisFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationToTerraform = kinesisFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationToTerraform;
function kinesisFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bucket_arn: {
            value: cdktf.stringToHclTerraform(struct.bucketArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        buffering_interval: {
            value: cdktf.numberToHclTerraform(struct.bufferingInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        buffering_size: {
            value: cdktf.numberToHclTerraform(struct.bufferingSize),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        compression_format: {
            value: cdktf.stringToHclTerraform(struct.compressionFormat),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        error_output_prefix: {
            value: cdktf.stringToHclTerraform(struct.errorOutputPrefix),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        kms_key_arn: {
            value: cdktf.stringToHclTerraform(struct.kmsKeyArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        prefix: {
            value: cdktf.stringToHclTerraform(struct.prefix),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        role_arn: {
            value: cdktf.stringToHclTerraform(struct.roleArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cloudwatch_logging_options: {
            value: kinesisFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsToHclTerraform(struct.cloudwatchLoggingOptions),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationToHclTerraform = kinesisFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationToHclTerraform;
class KinesisFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cloudwatch_logging_options - computed: false, optional: true, required: false
        this._cloudwatchLoggingOptions = new KinesisFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsOutputReference(this, "cloudwatch_logging_options");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketArn = this._bucketArn;
        }
        if (this._bufferingInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufferingInterval = this._bufferingInterval;
        }
        if (this._bufferingSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufferingSize = this._bufferingSize;
        }
        if (this._compressionFormat !== undefined) {
            hasAnyValues = true;
            internalValueResult.compressionFormat = this._compressionFormat;
        }
        if (this._errorOutputPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.errorOutputPrefix = this._errorOutputPrefix;
        }
        if (this._kmsKeyArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyArn = this._kmsKeyArn;
        }
        if (this._prefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefix = this._prefix;
        }
        if (this._roleArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.roleArn = this._roleArn;
        }
        if (this._cloudwatchLoggingOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudwatchLoggingOptions = this._cloudwatchLoggingOptions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketArn = undefined;
            this._bufferingInterval = undefined;
            this._bufferingSize = undefined;
            this._compressionFormat = undefined;
            this._errorOutputPrefix = undefined;
            this._kmsKeyArn = undefined;
            this._prefix = undefined;
            this._roleArn = undefined;
            this._cloudwatchLoggingOptions.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketArn = value.bucketArn;
            this._bufferingInterval = value.bufferingInterval;
            this._bufferingSize = value.bufferingSize;
            this._compressionFormat = value.compressionFormat;
            this._errorOutputPrefix = value.errorOutputPrefix;
            this._kmsKeyArn = value.kmsKeyArn;
            this._prefix = value.prefix;
            this._roleArn = value.roleArn;
            this._cloudwatchLoggingOptions.internalValue = value.cloudwatchLoggingOptions;
        }
    }
    get bucketArn() {
        return this.getStringAttribute('bucket_arn');
    }
    set bucketArn(value) {
        this._bucketArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketArnInput() {
        return this._bucketArn;
    }
    get bufferingInterval() {
        return this.getNumberAttribute('buffering_interval');
    }
    set bufferingInterval(value) {
        this._bufferingInterval = value;
    }
    resetBufferingInterval() {
        this._bufferingInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufferingIntervalInput() {
        return this._bufferingInterval;
    }
    get bufferingSize() {
        return this.getNumberAttribute('buffering_size');
    }
    set bufferingSize(value) {
        this._bufferingSize = value;
    }
    resetBufferingSize() {
        this._bufferingSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufferingSizeInput() {
        return this._bufferingSize;
    }
    get compressionFormat() {
        return this.getStringAttribute('compression_format');
    }
    set compressionFormat(value) {
        this._compressionFormat = value;
    }
    resetCompressionFormat() {
        this._compressionFormat = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get compressionFormatInput() {
        return this._compressionFormat;
    }
    get errorOutputPrefix() {
        return this.getStringAttribute('error_output_prefix');
    }
    set errorOutputPrefix(value) {
        this._errorOutputPrefix = value;
    }
    resetErrorOutputPrefix() {
        this._errorOutputPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get errorOutputPrefixInput() {
        return this._errorOutputPrefix;
    }
    get kmsKeyArn() {
        return this.getStringAttribute('kms_key_arn');
    }
    set kmsKeyArn(value) {
        this._kmsKeyArn = value;
    }
    resetKmsKeyArn() {
        this._kmsKeyArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyArnInput() {
        return this._kmsKeyArn;
    }
    get prefix() {
        return this.getStringAttribute('prefix');
    }
    set prefix(value) {
        this._prefix = value;
    }
    resetPrefix() {
        this._prefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prefixInput() {
        return this._prefix;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get cloudwatchLoggingOptions() {
        return this._cloudwatchLoggingOptions;
    }
    putCloudwatchLoggingOptions(value) {
        this._cloudwatchLoggingOptions.internalValue = value;
    }
    resetCloudwatchLoggingOptions() {
        this._cloudwatchLoggingOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudwatchLoggingOptionsInput() {
        return this._cloudwatchLoggingOptions.internalValue;
    }
}
exports.KinesisFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationOutputReference = KinesisFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationOutputReference;
_61 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationOutputReference[_61] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamSplunkConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        buffering_interval: cdktf.numberToTerraform(struct.bufferingInterval),
        buffering_size: cdktf.numberToTerraform(struct.bufferingSize),
        hec_acknowledgment_timeout: cdktf.numberToTerraform(struct.hecAcknowledgmentTimeout),
        hec_endpoint: cdktf.stringToTerraform(struct.hecEndpoint),
        hec_endpoint_type: cdktf.stringToTerraform(struct.hecEndpointType),
        hec_token: cdktf.stringToTerraform(struct.hecToken),
        retry_duration: cdktf.numberToTerraform(struct.retryDuration),
        s3_backup_mode: cdktf.stringToTerraform(struct.s3BackupMode),
        cloudwatch_logging_options: kinesisFirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsToTerraform(struct.cloudwatchLoggingOptions),
        processing_configuration: kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationToTerraform(struct.processingConfiguration),
        s3_configuration: kinesisFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationToTerraform(struct.s3Configuration),
    };
}
exports.kinesisFirehoseDeliveryStreamSplunkConfigurationToTerraform = kinesisFirehoseDeliveryStreamSplunkConfigurationToTerraform;
function kinesisFirehoseDeliveryStreamSplunkConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        buffering_interval: {
            value: cdktf.numberToHclTerraform(struct.bufferingInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        buffering_size: {
            value: cdktf.numberToHclTerraform(struct.bufferingSize),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        hec_acknowledgment_timeout: {
            value: cdktf.numberToHclTerraform(struct.hecAcknowledgmentTimeout),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        hec_endpoint: {
            value: cdktf.stringToHclTerraform(struct.hecEndpoint),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        hec_endpoint_type: {
            value: cdktf.stringToHclTerraform(struct.hecEndpointType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        hec_token: {
            value: cdktf.stringToHclTerraform(struct.hecToken),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        retry_duration: {
            value: cdktf.numberToHclTerraform(struct.retryDuration),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        s3_backup_mode: {
            value: cdktf.stringToHclTerraform(struct.s3BackupMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cloudwatch_logging_options: {
            value: kinesisFirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsToHclTerraform(struct.cloudwatchLoggingOptions),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsList",
        },
        processing_configuration: {
            value: kinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationToHclTerraform(struct.processingConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationList",
        },
        s3_configuration: {
            value: kinesisFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationToHclTerraform(struct.s3Configuration),
            isBlock: true,
            type: "list",
            storageClassType: "KinesisFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamSplunkConfigurationToHclTerraform = kinesisFirehoseDeliveryStreamSplunkConfigurationToHclTerraform;
class KinesisFirehoseDeliveryStreamSplunkConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cloudwatch_logging_options - computed: false, optional: true, required: false
        this._cloudwatchLoggingOptions = new KinesisFirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptionsOutputReference(this, "cloudwatch_logging_options");
        // processing_configuration - computed: false, optional: true, required: false
        this._processingConfiguration = new KinesisFirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationOutputReference(this, "processing_configuration");
        // s3_configuration - computed: false, optional: false, required: true
        this._s3Configuration = new KinesisFirehoseDeliveryStreamSplunkConfigurationS3ConfigurationOutputReference(this, "s3_configuration");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bufferingInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufferingInterval = this._bufferingInterval;
        }
        if (this._bufferingSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufferingSize = this._bufferingSize;
        }
        if (this._hecAcknowledgmentTimeout !== undefined) {
            hasAnyValues = true;
            internalValueResult.hecAcknowledgmentTimeout = this._hecAcknowledgmentTimeout;
        }
        if (this._hecEndpoint !== undefined) {
            hasAnyValues = true;
            internalValueResult.hecEndpoint = this._hecEndpoint;
        }
        if (this._hecEndpointType !== undefined) {
            hasAnyValues = true;
            internalValueResult.hecEndpointType = this._hecEndpointType;
        }
        if (this._hecToken !== undefined) {
            hasAnyValues = true;
            internalValueResult.hecToken = this._hecToken;
        }
        if (this._retryDuration !== undefined) {
            hasAnyValues = true;
            internalValueResult.retryDuration = this._retryDuration;
        }
        if (this._s3BackupMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3BackupMode = this._s3BackupMode;
        }
        if (this._cloudwatchLoggingOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudwatchLoggingOptions = this._cloudwatchLoggingOptions?.internalValue;
        }
        if (this._processingConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.processingConfiguration = this._processingConfiguration?.internalValue;
        }
        if (this._s3Configuration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3Configuration = this._s3Configuration?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bufferingInterval = undefined;
            this._bufferingSize = undefined;
            this._hecAcknowledgmentTimeout = undefined;
            this._hecEndpoint = undefined;
            this._hecEndpointType = undefined;
            this._hecToken = undefined;
            this._retryDuration = undefined;
            this._s3BackupMode = undefined;
            this._cloudwatchLoggingOptions.internalValue = undefined;
            this._processingConfiguration.internalValue = undefined;
            this._s3Configuration.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bufferingInterval = value.bufferingInterval;
            this._bufferingSize = value.bufferingSize;
            this._hecAcknowledgmentTimeout = value.hecAcknowledgmentTimeout;
            this._hecEndpoint = value.hecEndpoint;
            this._hecEndpointType = value.hecEndpointType;
            this._hecToken = value.hecToken;
            this._retryDuration = value.retryDuration;
            this._s3BackupMode = value.s3BackupMode;
            this._cloudwatchLoggingOptions.internalValue = value.cloudwatchLoggingOptions;
            this._processingConfiguration.internalValue = value.processingConfiguration;
            this._s3Configuration.internalValue = value.s3Configuration;
        }
    }
    get bufferingInterval() {
        return this.getNumberAttribute('buffering_interval');
    }
    set bufferingInterval(value) {
        this._bufferingInterval = value;
    }
    resetBufferingInterval() {
        this._bufferingInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufferingIntervalInput() {
        return this._bufferingInterval;
    }
    get bufferingSize() {
        return this.getNumberAttribute('buffering_size');
    }
    set bufferingSize(value) {
        this._bufferingSize = value;
    }
    resetBufferingSize() {
        this._bufferingSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufferingSizeInput() {
        return this._bufferingSize;
    }
    get hecAcknowledgmentTimeout() {
        return this.getNumberAttribute('hec_acknowledgment_timeout');
    }
    set hecAcknowledgmentTimeout(value) {
        this._hecAcknowledgmentTimeout = value;
    }
    resetHecAcknowledgmentTimeout() {
        this._hecAcknowledgmentTimeout = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hecAcknowledgmentTimeoutInput() {
        return this._hecAcknowledgmentTimeout;
    }
    get hecEndpoint() {
        return this.getStringAttribute('hec_endpoint');
    }
    set hecEndpoint(value) {
        this._hecEndpoint = value;
    }
    // Temporarily expose input value. Use with caution.
    get hecEndpointInput() {
        return this._hecEndpoint;
    }
    get hecEndpointType() {
        return this.getStringAttribute('hec_endpoint_type');
    }
    set hecEndpointType(value) {
        this._hecEndpointType = value;
    }
    resetHecEndpointType() {
        this._hecEndpointType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hecEndpointTypeInput() {
        return this._hecEndpointType;
    }
    get hecToken() {
        return this.getStringAttribute('hec_token');
    }
    set hecToken(value) {
        this._hecToken = value;
    }
    // Temporarily expose input value. Use with caution.
    get hecTokenInput() {
        return this._hecToken;
    }
    get retryDuration() {
        return this.getNumberAttribute('retry_duration');
    }
    set retryDuration(value) {
        this._retryDuration = value;
    }
    resetRetryDuration() {
        this._retryDuration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retryDurationInput() {
        return this._retryDuration;
    }
    get s3BackupMode() {
        return this.getStringAttribute('s3_backup_mode');
    }
    set s3BackupMode(value) {
        this._s3BackupMode = value;
    }
    resetS3BackupMode() {
        this._s3BackupMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3BackupModeInput() {
        return this._s3BackupMode;
    }
    get cloudwatchLoggingOptions() {
        return this._cloudwatchLoggingOptions;
    }
    putCloudwatchLoggingOptions(value) {
        this._cloudwatchLoggingOptions.internalValue = value;
    }
    resetCloudwatchLoggingOptions() {
        this._cloudwatchLoggingOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudwatchLoggingOptionsInput() {
        return this._cloudwatchLoggingOptions.internalValue;
    }
    get processingConfiguration() {
        return this._processingConfiguration;
    }
    putProcessingConfiguration(value) {
        this._processingConfiguration.internalValue = value;
    }
    resetProcessingConfiguration() {
        this._processingConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get processingConfigurationInput() {
        return this._processingConfiguration.internalValue;
    }
    get s3Configuration() {
        return this._s3Configuration;
    }
    putS3Configuration(value) {
        this._s3Configuration.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get s3ConfigurationInput() {
        return this._s3Configuration.internalValue;
    }
}
exports.KinesisFirehoseDeliveryStreamSplunkConfigurationOutputReference = KinesisFirehoseDeliveryStreamSplunkConfigurationOutputReference;
_62 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamSplunkConfigurationOutputReference[_62] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamSplunkConfigurationOutputReference", version: "19.15.0" };
function kinesisFirehoseDeliveryStreamTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.kinesisFirehoseDeliveryStreamTimeoutsToTerraform = kinesisFirehoseDeliveryStreamTimeoutsToTerraform;
function kinesisFirehoseDeliveryStreamTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kinesisFirehoseDeliveryStreamTimeoutsToHclTerraform = kinesisFirehoseDeliveryStreamTimeoutsToHclTerraform;
class KinesisFirehoseDeliveryStreamTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.KinesisFirehoseDeliveryStreamTimeoutsOutputReference = KinesisFirehoseDeliveryStreamTimeoutsOutputReference;
_63 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStreamTimeoutsOutputReference[_63] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStreamTimeoutsOutputReference", version: "19.15.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/kinesis_firehose_delivery_stream aws_kinesis_firehose_delivery_stream}
*/
class KinesisFirehoseDeliveryStream extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a KinesisFirehoseDeliveryStream resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the KinesisFirehoseDeliveryStream to import
    * @param importFromId The id of the existing KinesisFirehoseDeliveryStream that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/kinesis_firehose_delivery_stream#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the KinesisFirehoseDeliveryStream to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_kinesis_firehose_delivery_stream", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/kinesis_firehose_delivery_stream aws_kinesis_firehose_delivery_stream} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options KinesisFirehoseDeliveryStreamConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_kinesis_firehose_delivery_stream',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // elasticsearch_configuration - computed: false, optional: true, required: false
        this._elasticsearchConfiguration = new KinesisFirehoseDeliveryStreamElasticsearchConfigurationOutputReference(this, "elasticsearch_configuration");
        // extended_s3_configuration - computed: false, optional: true, required: false
        this._extendedS3Configuration = new KinesisFirehoseDeliveryStreamExtendedS3ConfigurationOutputReference(this, "extended_s3_configuration");
        // http_endpoint_configuration - computed: false, optional: true, required: false
        this._httpEndpointConfiguration = new KinesisFirehoseDeliveryStreamHttpEndpointConfigurationOutputReference(this, "http_endpoint_configuration");
        // kinesis_source_configuration - computed: false, optional: true, required: false
        this._kinesisSourceConfiguration = new KinesisFirehoseDeliveryStreamKinesisSourceConfigurationOutputReference(this, "kinesis_source_configuration");
        // msk_source_configuration - computed: false, optional: true, required: false
        this._mskSourceConfiguration = new KinesisFirehoseDeliveryStreamMskSourceConfigurationOutputReference(this, "msk_source_configuration");
        // opensearch_configuration - computed: false, optional: true, required: false
        this._opensearchConfiguration = new KinesisFirehoseDeliveryStreamOpensearchConfigurationOutputReference(this, "opensearch_configuration");
        // opensearchserverless_configuration - computed: false, optional: true, required: false
        this._opensearchserverlessConfiguration = new KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationOutputReference(this, "opensearchserverless_configuration");
        // redshift_configuration - computed: false, optional: true, required: false
        this._redshiftConfiguration = new KinesisFirehoseDeliveryStreamRedshiftConfigurationOutputReference(this, "redshift_configuration");
        // server_side_encryption - computed: false, optional: true, required: false
        this._serverSideEncryption = new KinesisFirehoseDeliveryStreamServerSideEncryptionOutputReference(this, "server_side_encryption");
        // splunk_configuration - computed: false, optional: true, required: false
        this._splunkConfiguration = new KinesisFirehoseDeliveryStreamSplunkConfigurationOutputReference(this, "splunk_configuration");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new KinesisFirehoseDeliveryStreamTimeoutsOutputReference(this, "timeouts");
        this._arn = config.arn;
        this._destination = config.destination;
        this._destinationId = config.destinationId;
        this._id = config.id;
        this._name = config.name;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._versionId = config.versionId;
        this._elasticsearchConfiguration.internalValue = config.elasticsearchConfiguration;
        this._extendedS3Configuration.internalValue = config.extendedS3Configuration;
        this._httpEndpointConfiguration.internalValue = config.httpEndpointConfiguration;
        this._kinesisSourceConfiguration.internalValue = config.kinesisSourceConfiguration;
        this._mskSourceConfiguration.internalValue = config.mskSourceConfiguration;
        this._opensearchConfiguration.internalValue = config.opensearchConfiguration;
        this._opensearchserverlessConfiguration.internalValue = config.opensearchserverlessConfiguration;
        this._redshiftConfiguration.internalValue = config.redshiftConfiguration;
        this._serverSideEncryption.internalValue = config.serverSideEncryption;
        this._splunkConfiguration.internalValue = config.splunkConfiguration;
        this._timeouts.internalValue = config.timeouts;
    }
    get arn() {
        return this.getStringAttribute('arn');
    }
    set arn(value) {
        this._arn = value;
    }
    resetArn() {
        this._arn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get arnInput() {
        return this._arn;
    }
    get destination() {
        return this.getStringAttribute('destination');
    }
    set destination(value) {
        this._destination = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationInput() {
        return this._destination;
    }
    get destinationId() {
        return this.getStringAttribute('destination_id');
    }
    set destinationId(value) {
        this._destinationId = value;
    }
    resetDestinationId() {
        this._destinationId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get destinationIdInput() {
        return this._destinationId;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get versionId() {
        return this.getStringAttribute('version_id');
    }
    set versionId(value) {
        this._versionId = value;
    }
    resetVersionId() {
        this._versionId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionIdInput() {
        return this._versionId;
    }
    get elasticsearchConfiguration() {
        return this._elasticsearchConfiguration;
    }
    putElasticsearchConfiguration(value) {
        this._elasticsearchConfiguration.internalValue = value;
    }
    resetElasticsearchConfiguration() {
        this._elasticsearchConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get elasticsearchConfigurationInput() {
        return this._elasticsearchConfiguration.internalValue;
    }
    get extendedS3Configuration() {
        return this._extendedS3Configuration;
    }
    putExtendedS3Configuration(value) {
        this._extendedS3Configuration.internalValue = value;
    }
    resetExtendedS3Configuration() {
        this._extendedS3Configuration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get extendedS3ConfigurationInput() {
        return this._extendedS3Configuration.internalValue;
    }
    get httpEndpointConfiguration() {
        return this._httpEndpointConfiguration;
    }
    putHttpEndpointConfiguration(value) {
        this._httpEndpointConfiguration.internalValue = value;
    }
    resetHttpEndpointConfiguration() {
        this._httpEndpointConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpEndpointConfigurationInput() {
        return this._httpEndpointConfiguration.internalValue;
    }
    get kinesisSourceConfiguration() {
        return this._kinesisSourceConfiguration;
    }
    putKinesisSourceConfiguration(value) {
        this._kinesisSourceConfiguration.internalValue = value;
    }
    resetKinesisSourceConfiguration() {
        this._kinesisSourceConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kinesisSourceConfigurationInput() {
        return this._kinesisSourceConfiguration.internalValue;
    }
    get mskSourceConfiguration() {
        return this._mskSourceConfiguration;
    }
    putMskSourceConfiguration(value) {
        this._mskSourceConfiguration.internalValue = value;
    }
    resetMskSourceConfiguration() {
        this._mskSourceConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mskSourceConfigurationInput() {
        return this._mskSourceConfiguration.internalValue;
    }
    get opensearchConfiguration() {
        return this._opensearchConfiguration;
    }
    putOpensearchConfiguration(value) {
        this._opensearchConfiguration.internalValue = value;
    }
    resetOpensearchConfiguration() {
        this._opensearchConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get opensearchConfigurationInput() {
        return this._opensearchConfiguration.internalValue;
    }
    get opensearchserverlessConfiguration() {
        return this._opensearchserverlessConfiguration;
    }
    putOpensearchserverlessConfiguration(value) {
        this._opensearchserverlessConfiguration.internalValue = value;
    }
    resetOpensearchserverlessConfiguration() {
        this._opensearchserverlessConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get opensearchserverlessConfigurationInput() {
        return this._opensearchserverlessConfiguration.internalValue;
    }
    get redshiftConfiguration() {
        return this._redshiftConfiguration;
    }
    putRedshiftConfiguration(value) {
        this._redshiftConfiguration.internalValue = value;
    }
    resetRedshiftConfiguration() {
        this._redshiftConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redshiftConfigurationInput() {
        return this._redshiftConfiguration.internalValue;
    }
    get serverSideEncryption() {
        return this._serverSideEncryption;
    }
    putServerSideEncryption(value) {
        this._serverSideEncryption.internalValue = value;
    }
    resetServerSideEncryption() {
        this._serverSideEncryption.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serverSideEncryptionInput() {
        return this._serverSideEncryption.internalValue;
    }
    get splunkConfiguration() {
        return this._splunkConfiguration;
    }
    putSplunkConfiguration(value) {
        this._splunkConfiguration.internalValue = value;
    }
    resetSplunkConfiguration() {
        this._splunkConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get splunkConfigurationInput() {
        return this._splunkConfiguration.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            arn: cdktf.stringToTerraform(this._arn),
            destination: cdktf.stringToTerraform(this._destination),
            destination_id: cdktf.stringToTerraform(this._destinationId),
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            version_id: cdktf.stringToTerraform(this._versionId),
            elasticsearch_configuration: kinesisFirehoseDeliveryStreamElasticsearchConfigurationToTerraform(this._elasticsearchConfiguration.internalValue),
            extended_s3_configuration: kinesisFirehoseDeliveryStreamExtendedS3ConfigurationToTerraform(this._extendedS3Configuration.internalValue),
            http_endpoint_configuration: kinesisFirehoseDeliveryStreamHttpEndpointConfigurationToTerraform(this._httpEndpointConfiguration.internalValue),
            kinesis_source_configuration: kinesisFirehoseDeliveryStreamKinesisSourceConfigurationToTerraform(this._kinesisSourceConfiguration.internalValue),
            msk_source_configuration: kinesisFirehoseDeliveryStreamMskSourceConfigurationToTerraform(this._mskSourceConfiguration.internalValue),
            opensearch_configuration: kinesisFirehoseDeliveryStreamOpensearchConfigurationToTerraform(this._opensearchConfiguration.internalValue),
            opensearchserverless_configuration: kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationToTerraform(this._opensearchserverlessConfiguration.internalValue),
            redshift_configuration: kinesisFirehoseDeliveryStreamRedshiftConfigurationToTerraform(this._redshiftConfiguration.internalValue),
            server_side_encryption: kinesisFirehoseDeliveryStreamServerSideEncryptionToTerraform(this._serverSideEncryption.internalValue),
            splunk_configuration: kinesisFirehoseDeliveryStreamSplunkConfigurationToTerraform(this._splunkConfiguration.internalValue),
            timeouts: kinesisFirehoseDeliveryStreamTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            arn: {
                value: cdktf.stringToHclTerraform(this._arn),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            destination: {
                value: cdktf.stringToHclTerraform(this._destination),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            destination_id: {
                value: cdktf.stringToHclTerraform(this._destinationId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            tags: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tags),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            tags_all: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tagsAll),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            version_id: {
                value: cdktf.stringToHclTerraform(this._versionId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            elasticsearch_configuration: {
                value: kinesisFirehoseDeliveryStreamElasticsearchConfigurationToHclTerraform(this._elasticsearchConfiguration.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "KinesisFirehoseDeliveryStreamElasticsearchConfigurationList",
            },
            extended_s3_configuration: {
                value: kinesisFirehoseDeliveryStreamExtendedS3ConfigurationToHclTerraform(this._extendedS3Configuration.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "KinesisFirehoseDeliveryStreamExtendedS3ConfigurationList",
            },
            http_endpoint_configuration: {
                value: kinesisFirehoseDeliveryStreamHttpEndpointConfigurationToHclTerraform(this._httpEndpointConfiguration.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "KinesisFirehoseDeliveryStreamHttpEndpointConfigurationList",
            },
            kinesis_source_configuration: {
                value: kinesisFirehoseDeliveryStreamKinesisSourceConfigurationToHclTerraform(this._kinesisSourceConfiguration.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "KinesisFirehoseDeliveryStreamKinesisSourceConfigurationList",
            },
            msk_source_configuration: {
                value: kinesisFirehoseDeliveryStreamMskSourceConfigurationToHclTerraform(this._mskSourceConfiguration.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "KinesisFirehoseDeliveryStreamMskSourceConfigurationList",
            },
            opensearch_configuration: {
                value: kinesisFirehoseDeliveryStreamOpensearchConfigurationToHclTerraform(this._opensearchConfiguration.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "KinesisFirehoseDeliveryStreamOpensearchConfigurationList",
            },
            opensearchserverless_configuration: {
                value: kinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationToHclTerraform(this._opensearchserverlessConfiguration.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "KinesisFirehoseDeliveryStreamOpensearchserverlessConfigurationList",
            },
            redshift_configuration: {
                value: kinesisFirehoseDeliveryStreamRedshiftConfigurationToHclTerraform(this._redshiftConfiguration.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "KinesisFirehoseDeliveryStreamRedshiftConfigurationList",
            },
            server_side_encryption: {
                value: kinesisFirehoseDeliveryStreamServerSideEncryptionToHclTerraform(this._serverSideEncryption.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "KinesisFirehoseDeliveryStreamServerSideEncryptionList",
            },
            splunk_configuration: {
                value: kinesisFirehoseDeliveryStreamSplunkConfigurationToHclTerraform(this._splunkConfiguration.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "KinesisFirehoseDeliveryStreamSplunkConfigurationList",
            },
            timeouts: {
                value: kinesisFirehoseDeliveryStreamTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "KinesisFirehoseDeliveryStreamTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.KinesisFirehoseDeliveryStream = KinesisFirehoseDeliveryStream;
_64 = JSII_RTTI_SYMBOL_1;
KinesisFirehoseDeliveryStream[_64] = { fqn: "@cdktf/provider-aws.kinesisFirehoseDeliveryStream.KinesisFirehoseDeliveryStream", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
KinesisFirehoseDeliveryStream.tfResourceType = "aws_kinesis_firehose_delivery_stream";
//# sourceMappingURL=data:application/json;base64,