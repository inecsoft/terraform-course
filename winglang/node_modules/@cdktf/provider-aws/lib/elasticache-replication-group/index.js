"use strict";
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ElasticacheReplicationGroup = exports.ElasticacheReplicationGroupTimeoutsOutputReference = exports.elasticacheReplicationGroupTimeoutsToHclTerraform = exports.elasticacheReplicationGroupTimeoutsToTerraform = exports.ElasticacheReplicationGroupLogDeliveryConfigurationList = exports.ElasticacheReplicationGroupLogDeliveryConfigurationOutputReference = exports.elasticacheReplicationGroupLogDeliveryConfigurationToHclTerraform = exports.elasticacheReplicationGroupLogDeliveryConfigurationToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function elasticacheReplicationGroupLogDeliveryConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        destination: cdktf.stringToTerraform(struct.destination),
        destination_type: cdktf.stringToTerraform(struct.destinationType),
        log_format: cdktf.stringToTerraform(struct.logFormat),
        log_type: cdktf.stringToTerraform(struct.logType),
    };
}
exports.elasticacheReplicationGroupLogDeliveryConfigurationToTerraform = elasticacheReplicationGroupLogDeliveryConfigurationToTerraform;
function elasticacheReplicationGroupLogDeliveryConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        destination: {
            value: cdktf.stringToHclTerraform(struct.destination),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        destination_type: {
            value: cdktf.stringToHclTerraform(struct.destinationType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        log_format: {
            value: cdktf.stringToHclTerraform(struct.logFormat),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        log_type: {
            value: cdktf.stringToHclTerraform(struct.logType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.elasticacheReplicationGroupLogDeliveryConfigurationToHclTerraform = elasticacheReplicationGroupLogDeliveryConfigurationToHclTerraform;
class ElasticacheReplicationGroupLogDeliveryConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._destination !== undefined) {
            hasAnyValues = true;
            internalValueResult.destination = this._destination;
        }
        if (this._destinationType !== undefined) {
            hasAnyValues = true;
            internalValueResult.destinationType = this._destinationType;
        }
        if (this._logFormat !== undefined) {
            hasAnyValues = true;
            internalValueResult.logFormat = this._logFormat;
        }
        if (this._logType !== undefined) {
            hasAnyValues = true;
            internalValueResult.logType = this._logType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._destination = undefined;
            this._destinationType = undefined;
            this._logFormat = undefined;
            this._logType = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._destination = value.destination;
            this._destinationType = value.destinationType;
            this._logFormat = value.logFormat;
            this._logType = value.logType;
        }
    }
    get destination() {
        return this.getStringAttribute('destination');
    }
    set destination(value) {
        this._destination = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationInput() {
        return this._destination;
    }
    get destinationType() {
        return this.getStringAttribute('destination_type');
    }
    set destinationType(value) {
        this._destinationType = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationTypeInput() {
        return this._destinationType;
    }
    get logFormat() {
        return this.getStringAttribute('log_format');
    }
    set logFormat(value) {
        this._logFormat = value;
    }
    // Temporarily expose input value. Use with caution.
    get logFormatInput() {
        return this._logFormat;
    }
    get logType() {
        return this.getStringAttribute('log_type');
    }
    set logType(value) {
        this._logType = value;
    }
    // Temporarily expose input value. Use with caution.
    get logTypeInput() {
        return this._logType;
    }
}
exports.ElasticacheReplicationGroupLogDeliveryConfigurationOutputReference = ElasticacheReplicationGroupLogDeliveryConfigurationOutputReference;
_a = JSII_RTTI_SYMBOL_1;
ElasticacheReplicationGroupLogDeliveryConfigurationOutputReference[_a] = { fqn: "@cdktf/provider-aws.elasticacheReplicationGroup.ElasticacheReplicationGroupLogDeliveryConfigurationOutputReference", version: "19.15.0" };
class ElasticacheReplicationGroupLogDeliveryConfigurationList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ElasticacheReplicationGroupLogDeliveryConfigurationOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ElasticacheReplicationGroupLogDeliveryConfigurationList = ElasticacheReplicationGroupLogDeliveryConfigurationList;
_b = JSII_RTTI_SYMBOL_1;
ElasticacheReplicationGroupLogDeliveryConfigurationList[_b] = { fqn: "@cdktf/provider-aws.elasticacheReplicationGroup.ElasticacheReplicationGroupLogDeliveryConfigurationList", version: "19.15.0" };
function elasticacheReplicationGroupTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.elasticacheReplicationGroupTimeoutsToTerraform = elasticacheReplicationGroupTimeoutsToTerraform;
function elasticacheReplicationGroupTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.elasticacheReplicationGroupTimeoutsToHclTerraform = elasticacheReplicationGroupTimeoutsToHclTerraform;
class ElasticacheReplicationGroupTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.ElasticacheReplicationGroupTimeoutsOutputReference = ElasticacheReplicationGroupTimeoutsOutputReference;
_c = JSII_RTTI_SYMBOL_1;
ElasticacheReplicationGroupTimeoutsOutputReference[_c] = { fqn: "@cdktf/provider-aws.elasticacheReplicationGroup.ElasticacheReplicationGroupTimeoutsOutputReference", version: "19.15.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/elasticache_replication_group aws_elasticache_replication_group}
*/
class ElasticacheReplicationGroup extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a ElasticacheReplicationGroup resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the ElasticacheReplicationGroup to import
    * @param importFromId The id of the existing ElasticacheReplicationGroup that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/elasticache_replication_group#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the ElasticacheReplicationGroup to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_elasticache_replication_group", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/elasticache_replication_group aws_elasticache_replication_group} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ElasticacheReplicationGroupConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_elasticache_replication_group',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // log_delivery_configuration - computed: false, optional: true, required: false
        this._logDeliveryConfiguration = new ElasticacheReplicationGroupLogDeliveryConfigurationList(this, "log_delivery_configuration", true);
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new ElasticacheReplicationGroupTimeoutsOutputReference(this, "timeouts");
        this._applyImmediately = config.applyImmediately;
        this._atRestEncryptionEnabled = config.atRestEncryptionEnabled;
        this._authToken = config.authToken;
        this._authTokenUpdateStrategy = config.authTokenUpdateStrategy;
        this._autoMinorVersionUpgrade = config.autoMinorVersionUpgrade;
        this._automaticFailoverEnabled = config.automaticFailoverEnabled;
        this._dataTieringEnabled = config.dataTieringEnabled;
        this._description = config.description;
        this._engine = config.engine;
        this._engineVersion = config.engineVersion;
        this._finalSnapshotIdentifier = config.finalSnapshotIdentifier;
        this._globalReplicationGroupId = config.globalReplicationGroupId;
        this._id = config.id;
        this._ipDiscovery = config.ipDiscovery;
        this._kmsKeyId = config.kmsKeyId;
        this._maintenanceWindow = config.maintenanceWindow;
        this._multiAzEnabled = config.multiAzEnabled;
        this._networkType = config.networkType;
        this._nodeType = config.nodeType;
        this._notificationTopicArn = config.notificationTopicArn;
        this._numCacheClusters = config.numCacheClusters;
        this._numNodeGroups = config.numNodeGroups;
        this._parameterGroupName = config.parameterGroupName;
        this._port = config.port;
        this._preferredCacheClusterAzs = config.preferredCacheClusterAzs;
        this._replicasPerNodeGroup = config.replicasPerNodeGroup;
        this._replicationGroupId = config.replicationGroupId;
        this._securityGroupIds = config.securityGroupIds;
        this._securityGroupNames = config.securityGroupNames;
        this._snapshotArns = config.snapshotArns;
        this._snapshotName = config.snapshotName;
        this._snapshotRetentionLimit = config.snapshotRetentionLimit;
        this._snapshotWindow = config.snapshotWindow;
        this._subnetGroupName = config.subnetGroupName;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._transitEncryptionEnabled = config.transitEncryptionEnabled;
        this._userGroupIds = config.userGroupIds;
        this._logDeliveryConfiguration.internalValue = config.logDeliveryConfiguration;
        this._timeouts.internalValue = config.timeouts;
    }
    get applyImmediately() {
        return this.getBooleanAttribute('apply_immediately');
    }
    set applyImmediately(value) {
        this._applyImmediately = value;
    }
    resetApplyImmediately() {
        this._applyImmediately = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get applyImmediatelyInput() {
        return this._applyImmediately;
    }
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get atRestEncryptionEnabled() {
        return this.getBooleanAttribute('at_rest_encryption_enabled');
    }
    set atRestEncryptionEnabled(value) {
        this._atRestEncryptionEnabled = value;
    }
    resetAtRestEncryptionEnabled() {
        this._atRestEncryptionEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get atRestEncryptionEnabledInput() {
        return this._atRestEncryptionEnabled;
    }
    get authToken() {
        return this.getStringAttribute('auth_token');
    }
    set authToken(value) {
        this._authToken = value;
    }
    resetAuthToken() {
        this._authToken = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authTokenInput() {
        return this._authToken;
    }
    get authTokenUpdateStrategy() {
        return this.getStringAttribute('auth_token_update_strategy');
    }
    set authTokenUpdateStrategy(value) {
        this._authTokenUpdateStrategy = value;
    }
    resetAuthTokenUpdateStrategy() {
        this._authTokenUpdateStrategy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authTokenUpdateStrategyInput() {
        return this._authTokenUpdateStrategy;
    }
    get autoMinorVersionUpgrade() {
        return this.getStringAttribute('auto_minor_version_upgrade');
    }
    set autoMinorVersionUpgrade(value) {
        this._autoMinorVersionUpgrade = value;
    }
    resetAutoMinorVersionUpgrade() {
        this._autoMinorVersionUpgrade = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoMinorVersionUpgradeInput() {
        return this._autoMinorVersionUpgrade;
    }
    get automaticFailoverEnabled() {
        return this.getBooleanAttribute('automatic_failover_enabled');
    }
    set automaticFailoverEnabled(value) {
        this._automaticFailoverEnabled = value;
    }
    resetAutomaticFailoverEnabled() {
        this._automaticFailoverEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get automaticFailoverEnabledInput() {
        return this._automaticFailoverEnabled;
    }
    // cluster_enabled - computed: true, optional: false, required: false
    get clusterEnabled() {
        return this.getBooleanAttribute('cluster_enabled');
    }
    // configuration_endpoint_address - computed: true, optional: false, required: false
    get configurationEndpointAddress() {
        return this.getStringAttribute('configuration_endpoint_address');
    }
    get dataTieringEnabled() {
        return this.getBooleanAttribute('data_tiering_enabled');
    }
    set dataTieringEnabled(value) {
        this._dataTieringEnabled = value;
    }
    resetDataTieringEnabled() {
        this._dataTieringEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataTieringEnabledInput() {
        return this._dataTieringEnabled;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get engine() {
        return this.getStringAttribute('engine');
    }
    set engine(value) {
        this._engine = value;
    }
    resetEngine() {
        this._engine = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get engineInput() {
        return this._engine;
    }
    get engineVersion() {
        return this.getStringAttribute('engine_version');
    }
    set engineVersion(value) {
        this._engineVersion = value;
    }
    resetEngineVersion() {
        this._engineVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get engineVersionInput() {
        return this._engineVersion;
    }
    // engine_version_actual - computed: true, optional: false, required: false
    get engineVersionActual() {
        return this.getStringAttribute('engine_version_actual');
    }
    get finalSnapshotIdentifier() {
        return this.getStringAttribute('final_snapshot_identifier');
    }
    set finalSnapshotIdentifier(value) {
        this._finalSnapshotIdentifier = value;
    }
    resetFinalSnapshotIdentifier() {
        this._finalSnapshotIdentifier = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get finalSnapshotIdentifierInput() {
        return this._finalSnapshotIdentifier;
    }
    get globalReplicationGroupId() {
        return this.getStringAttribute('global_replication_group_id');
    }
    set globalReplicationGroupId(value) {
        this._globalReplicationGroupId = value;
    }
    resetGlobalReplicationGroupId() {
        this._globalReplicationGroupId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get globalReplicationGroupIdInput() {
        return this._globalReplicationGroupId;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get ipDiscovery() {
        return this.getStringAttribute('ip_discovery');
    }
    set ipDiscovery(value) {
        this._ipDiscovery = value;
    }
    resetIpDiscovery() {
        this._ipDiscovery = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipDiscoveryInput() {
        return this._ipDiscovery;
    }
    get kmsKeyId() {
        return this.getStringAttribute('kms_key_id');
    }
    set kmsKeyId(value) {
        this._kmsKeyId = value;
    }
    resetKmsKeyId() {
        this._kmsKeyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyIdInput() {
        return this._kmsKeyId;
    }
    get maintenanceWindow() {
        return this.getStringAttribute('maintenance_window');
    }
    set maintenanceWindow(value) {
        this._maintenanceWindow = value;
    }
    resetMaintenanceWindow() {
        this._maintenanceWindow = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maintenanceWindowInput() {
        return this._maintenanceWindow;
    }
    // member_clusters - computed: true, optional: false, required: false
    get memberClusters() {
        return cdktf.Fn.tolist(this.getListAttribute('member_clusters'));
    }
    get multiAzEnabled() {
        return this.getBooleanAttribute('multi_az_enabled');
    }
    set multiAzEnabled(value) {
        this._multiAzEnabled = value;
    }
    resetMultiAzEnabled() {
        this._multiAzEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get multiAzEnabledInput() {
        return this._multiAzEnabled;
    }
    get networkType() {
        return this.getStringAttribute('network_type');
    }
    set networkType(value) {
        this._networkType = value;
    }
    resetNetworkType() {
        this._networkType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkTypeInput() {
        return this._networkType;
    }
    get nodeType() {
        return this.getStringAttribute('node_type');
    }
    set nodeType(value) {
        this._nodeType = value;
    }
    resetNodeType() {
        this._nodeType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodeTypeInput() {
        return this._nodeType;
    }
    get notificationTopicArn() {
        return this.getStringAttribute('notification_topic_arn');
    }
    set notificationTopicArn(value) {
        this._notificationTopicArn = value;
    }
    resetNotificationTopicArn() {
        this._notificationTopicArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get notificationTopicArnInput() {
        return this._notificationTopicArn;
    }
    get numCacheClusters() {
        return this.getNumberAttribute('num_cache_clusters');
    }
    set numCacheClusters(value) {
        this._numCacheClusters = value;
    }
    resetNumCacheClusters() {
        this._numCacheClusters = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numCacheClustersInput() {
        return this._numCacheClusters;
    }
    get numNodeGroups() {
        return this.getNumberAttribute('num_node_groups');
    }
    set numNodeGroups(value) {
        this._numNodeGroups = value;
    }
    resetNumNodeGroups() {
        this._numNodeGroups = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numNodeGroupsInput() {
        return this._numNodeGroups;
    }
    get parameterGroupName() {
        return this.getStringAttribute('parameter_group_name');
    }
    set parameterGroupName(value) {
        this._parameterGroupName = value;
    }
    resetParameterGroupName() {
        this._parameterGroupName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parameterGroupNameInput() {
        return this._parameterGroupName;
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    resetPort() {
        this._port = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
    get preferredCacheClusterAzs() {
        return this.getListAttribute('preferred_cache_cluster_azs');
    }
    set preferredCacheClusterAzs(value) {
        this._preferredCacheClusterAzs = value;
    }
    resetPreferredCacheClusterAzs() {
        this._preferredCacheClusterAzs = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get preferredCacheClusterAzsInput() {
        return this._preferredCacheClusterAzs;
    }
    // primary_endpoint_address - computed: true, optional: false, required: false
    get primaryEndpointAddress() {
        return this.getStringAttribute('primary_endpoint_address');
    }
    // reader_endpoint_address - computed: true, optional: false, required: false
    get readerEndpointAddress() {
        return this.getStringAttribute('reader_endpoint_address');
    }
    get replicasPerNodeGroup() {
        return this.getNumberAttribute('replicas_per_node_group');
    }
    set replicasPerNodeGroup(value) {
        this._replicasPerNodeGroup = value;
    }
    resetReplicasPerNodeGroup() {
        this._replicasPerNodeGroup = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replicasPerNodeGroupInput() {
        return this._replicasPerNodeGroup;
    }
    get replicationGroupId() {
        return this.getStringAttribute('replication_group_id');
    }
    set replicationGroupId(value) {
        this._replicationGroupId = value;
    }
    // Temporarily expose input value. Use with caution.
    get replicationGroupIdInput() {
        return this._replicationGroupId;
    }
    get securityGroupIds() {
        return cdktf.Fn.tolist(this.getListAttribute('security_group_ids'));
    }
    set securityGroupIds(value) {
        this._securityGroupIds = value;
    }
    resetSecurityGroupIds() {
        this._securityGroupIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityGroupIdsInput() {
        return this._securityGroupIds;
    }
    get securityGroupNames() {
        return cdktf.Fn.tolist(this.getListAttribute('security_group_names'));
    }
    set securityGroupNames(value) {
        this._securityGroupNames = value;
    }
    resetSecurityGroupNames() {
        this._securityGroupNames = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityGroupNamesInput() {
        return this._securityGroupNames;
    }
    get snapshotArns() {
        return cdktf.Fn.tolist(this.getListAttribute('snapshot_arns'));
    }
    set snapshotArns(value) {
        this._snapshotArns = value;
    }
    resetSnapshotArns() {
        this._snapshotArns = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get snapshotArnsInput() {
        return this._snapshotArns;
    }
    get snapshotName() {
        return this.getStringAttribute('snapshot_name');
    }
    set snapshotName(value) {
        this._snapshotName = value;
    }
    resetSnapshotName() {
        this._snapshotName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get snapshotNameInput() {
        return this._snapshotName;
    }
    get snapshotRetentionLimit() {
        return this.getNumberAttribute('snapshot_retention_limit');
    }
    set snapshotRetentionLimit(value) {
        this._snapshotRetentionLimit = value;
    }
    resetSnapshotRetentionLimit() {
        this._snapshotRetentionLimit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get snapshotRetentionLimitInput() {
        return this._snapshotRetentionLimit;
    }
    get snapshotWindow() {
        return this.getStringAttribute('snapshot_window');
    }
    set snapshotWindow(value) {
        this._snapshotWindow = value;
    }
    resetSnapshotWindow() {
        this._snapshotWindow = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get snapshotWindowInput() {
        return this._snapshotWindow;
    }
    get subnetGroupName() {
        return this.getStringAttribute('subnet_group_name');
    }
    set subnetGroupName(value) {
        this._subnetGroupName = value;
    }
    resetSubnetGroupName() {
        this._subnetGroupName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subnetGroupNameInput() {
        return this._subnetGroupName;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get transitEncryptionEnabled() {
        return this.getBooleanAttribute('transit_encryption_enabled');
    }
    set transitEncryptionEnabled(value) {
        this._transitEncryptionEnabled = value;
    }
    resetTransitEncryptionEnabled() {
        this._transitEncryptionEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get transitEncryptionEnabledInput() {
        return this._transitEncryptionEnabled;
    }
    get userGroupIds() {
        return cdktf.Fn.tolist(this.getListAttribute('user_group_ids'));
    }
    set userGroupIds(value) {
        this._userGroupIds = value;
    }
    resetUserGroupIds() {
        this._userGroupIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userGroupIdsInput() {
        return this._userGroupIds;
    }
    get logDeliveryConfiguration() {
        return this._logDeliveryConfiguration;
    }
    putLogDeliveryConfiguration(value) {
        this._logDeliveryConfiguration.internalValue = value;
    }
    resetLogDeliveryConfiguration() {
        this._logDeliveryConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logDeliveryConfigurationInput() {
        return this._logDeliveryConfiguration.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            apply_immediately: cdktf.booleanToTerraform(this._applyImmediately),
            at_rest_encryption_enabled: cdktf.booleanToTerraform(this._atRestEncryptionEnabled),
            auth_token: cdktf.stringToTerraform(this._authToken),
            auth_token_update_strategy: cdktf.stringToTerraform(this._authTokenUpdateStrategy),
            auto_minor_version_upgrade: cdktf.stringToTerraform(this._autoMinorVersionUpgrade),
            automatic_failover_enabled: cdktf.booleanToTerraform(this._automaticFailoverEnabled),
            data_tiering_enabled: cdktf.booleanToTerraform(this._dataTieringEnabled),
            description: cdktf.stringToTerraform(this._description),
            engine: cdktf.stringToTerraform(this._engine),
            engine_version: cdktf.stringToTerraform(this._engineVersion),
            final_snapshot_identifier: cdktf.stringToTerraform(this._finalSnapshotIdentifier),
            global_replication_group_id: cdktf.stringToTerraform(this._globalReplicationGroupId),
            id: cdktf.stringToTerraform(this._id),
            ip_discovery: cdktf.stringToTerraform(this._ipDiscovery),
            kms_key_id: cdktf.stringToTerraform(this._kmsKeyId),
            maintenance_window: cdktf.stringToTerraform(this._maintenanceWindow),
            multi_az_enabled: cdktf.booleanToTerraform(this._multiAzEnabled),
            network_type: cdktf.stringToTerraform(this._networkType),
            node_type: cdktf.stringToTerraform(this._nodeType),
            notification_topic_arn: cdktf.stringToTerraform(this._notificationTopicArn),
            num_cache_clusters: cdktf.numberToTerraform(this._numCacheClusters),
            num_node_groups: cdktf.numberToTerraform(this._numNodeGroups),
            parameter_group_name: cdktf.stringToTerraform(this._parameterGroupName),
            port: cdktf.numberToTerraform(this._port),
            preferred_cache_cluster_azs: cdktf.listMapper(cdktf.stringToTerraform, false)(this._preferredCacheClusterAzs),
            replicas_per_node_group: cdktf.numberToTerraform(this._replicasPerNodeGroup),
            replication_group_id: cdktf.stringToTerraform(this._replicationGroupId),
            security_group_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(this._securityGroupIds),
            security_group_names: cdktf.listMapper(cdktf.stringToTerraform, false)(this._securityGroupNames),
            snapshot_arns: cdktf.listMapper(cdktf.stringToTerraform, false)(this._snapshotArns),
            snapshot_name: cdktf.stringToTerraform(this._snapshotName),
            snapshot_retention_limit: cdktf.numberToTerraform(this._snapshotRetentionLimit),
            snapshot_window: cdktf.stringToTerraform(this._snapshotWindow),
            subnet_group_name: cdktf.stringToTerraform(this._subnetGroupName),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            transit_encryption_enabled: cdktf.booleanToTerraform(this._transitEncryptionEnabled),
            user_group_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(this._userGroupIds),
            log_delivery_configuration: cdktf.listMapper(elasticacheReplicationGroupLogDeliveryConfigurationToTerraform, true)(this._logDeliveryConfiguration.internalValue),
            timeouts: elasticacheReplicationGroupTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            apply_immediately: {
                value: cdktf.booleanToHclTerraform(this._applyImmediately),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            at_rest_encryption_enabled: {
                value: cdktf.booleanToHclTerraform(this._atRestEncryptionEnabled),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            auth_token: {
                value: cdktf.stringToHclTerraform(this._authToken),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            auth_token_update_strategy: {
                value: cdktf.stringToHclTerraform(this._authTokenUpdateStrategy),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            auto_minor_version_upgrade: {
                value: cdktf.stringToHclTerraform(this._autoMinorVersionUpgrade),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            automatic_failover_enabled: {
                value: cdktf.booleanToHclTerraform(this._automaticFailoverEnabled),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            data_tiering_enabled: {
                value: cdktf.booleanToHclTerraform(this._dataTieringEnabled),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            description: {
                value: cdktf.stringToHclTerraform(this._description),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            engine: {
                value: cdktf.stringToHclTerraform(this._engine),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            engine_version: {
                value: cdktf.stringToHclTerraform(this._engineVersion),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            final_snapshot_identifier: {
                value: cdktf.stringToHclTerraform(this._finalSnapshotIdentifier),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            global_replication_group_id: {
                value: cdktf.stringToHclTerraform(this._globalReplicationGroupId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            ip_discovery: {
                value: cdktf.stringToHclTerraform(this._ipDiscovery),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            kms_key_id: {
                value: cdktf.stringToHclTerraform(this._kmsKeyId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            maintenance_window: {
                value: cdktf.stringToHclTerraform(this._maintenanceWindow),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            multi_az_enabled: {
                value: cdktf.booleanToHclTerraform(this._multiAzEnabled),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            network_type: {
                value: cdktf.stringToHclTerraform(this._networkType),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            node_type: {
                value: cdktf.stringToHclTerraform(this._nodeType),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            notification_topic_arn: {
                value: cdktf.stringToHclTerraform(this._notificationTopicArn),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            num_cache_clusters: {
                value: cdktf.numberToHclTerraform(this._numCacheClusters),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            num_node_groups: {
                value: cdktf.numberToHclTerraform(this._numNodeGroups),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            parameter_group_name: {
                value: cdktf.stringToHclTerraform(this._parameterGroupName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            port: {
                value: cdktf.numberToHclTerraform(this._port),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            preferred_cache_cluster_azs: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._preferredCacheClusterAzs),
                isBlock: false,
                type: "list",
                storageClassType: "stringList",
            },
            replicas_per_node_group: {
                value: cdktf.numberToHclTerraform(this._replicasPerNodeGroup),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            replication_group_id: {
                value: cdktf.stringToHclTerraform(this._replicationGroupId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            security_group_ids: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._securityGroupIds),
                isBlock: false,
                type: "set",
                storageClassType: "stringList",
            },
            security_group_names: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._securityGroupNames),
                isBlock: false,
                type: "set",
                storageClassType: "stringList",
            },
            snapshot_arns: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._snapshotArns),
                isBlock: false,
                type: "set",
                storageClassType: "stringList",
            },
            snapshot_name: {
                value: cdktf.stringToHclTerraform(this._snapshotName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            snapshot_retention_limit: {
                value: cdktf.numberToHclTerraform(this._snapshotRetentionLimit),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            snapshot_window: {
                value: cdktf.stringToHclTerraform(this._snapshotWindow),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            subnet_group_name: {
                value: cdktf.stringToHclTerraform(this._subnetGroupName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            tags: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tags),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            tags_all: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tagsAll),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            transit_encryption_enabled: {
                value: cdktf.booleanToHclTerraform(this._transitEncryptionEnabled),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            user_group_ids: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._userGroupIds),
                isBlock: false,
                type: "set",
                storageClassType: "stringList",
            },
            log_delivery_configuration: {
                value: cdktf.listMapperHcl(elasticacheReplicationGroupLogDeliveryConfigurationToHclTerraform, true)(this._logDeliveryConfiguration.internalValue),
                isBlock: true,
                type: "set",
                storageClassType: "ElasticacheReplicationGroupLogDeliveryConfigurationList",
            },
            timeouts: {
                value: elasticacheReplicationGroupTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "ElasticacheReplicationGroupTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.ElasticacheReplicationGroup = ElasticacheReplicationGroup;
_d = JSII_RTTI_SYMBOL_1;
ElasticacheReplicationGroup[_d] = { fqn: "@cdktf/provider-aws.elasticacheReplicationGroup.ElasticacheReplicationGroup", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
ElasticacheReplicationGroup.tfResourceType = "aws_elasticache_replication_group";
//# sourceMappingURL=data:application/json;base64,