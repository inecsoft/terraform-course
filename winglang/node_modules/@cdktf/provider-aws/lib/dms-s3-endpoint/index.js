"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DmsS3Endpoint = exports.DmsS3EndpointTimeoutsOutputReference = exports.dmsS3EndpointTimeoutsToHclTerraform = exports.dmsS3EndpointTimeoutsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function dmsS3EndpointTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
    };
}
exports.dmsS3EndpointTimeoutsToTerraform = dmsS3EndpointTimeoutsToTerraform;
function dmsS3EndpointTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dmsS3EndpointTimeoutsToHclTerraform = dmsS3EndpointTimeoutsToHclTerraform;
class DmsS3EndpointTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
}
exports.DmsS3EndpointTimeoutsOutputReference = DmsS3EndpointTimeoutsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
DmsS3EndpointTimeoutsOutputReference[_a] = { fqn: "@cdktf/provider-aws.dmsS3Endpoint.DmsS3EndpointTimeoutsOutputReference", version: "19.15.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/dms_s3_endpoint aws_dms_s3_endpoint}
*/
class DmsS3Endpoint extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a DmsS3Endpoint resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the DmsS3Endpoint to import
    * @param importFromId The id of the existing DmsS3Endpoint that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/dms_s3_endpoint#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the DmsS3Endpoint to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_dms_s3_endpoint", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/dms_s3_endpoint aws_dms_s3_endpoint} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DmsS3EndpointConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_dms_s3_endpoint',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new DmsS3EndpointTimeoutsOutputReference(this, "timeouts");
        this._addColumnName = config.addColumnName;
        this._addTrailingPaddingCharacter = config.addTrailingPaddingCharacter;
        this._bucketFolder = config.bucketFolder;
        this._bucketName = config.bucketName;
        this._cannedAclForObjects = config.cannedAclForObjects;
        this._cdcInsertsAndUpdates = config.cdcInsertsAndUpdates;
        this._cdcInsertsOnly = config.cdcInsertsOnly;
        this._cdcMaxBatchInterval = config.cdcMaxBatchInterval;
        this._cdcMinFileSize = config.cdcMinFileSize;
        this._cdcPath = config.cdcPath;
        this._certificateArn = config.certificateArn;
        this._compressionType = config.compressionType;
        this._csvDelimiter = config.csvDelimiter;
        this._csvNoSupValue = config.csvNoSupValue;
        this._csvNullValue = config.csvNullValue;
        this._csvRowDelimiter = config.csvRowDelimiter;
        this._dataFormat = config.dataFormat;
        this._dataPageSize = config.dataPageSize;
        this._datePartitionDelimiter = config.datePartitionDelimiter;
        this._datePartitionEnabled = config.datePartitionEnabled;
        this._datePartitionSequence = config.datePartitionSequence;
        this._datePartitionTimezone = config.datePartitionTimezone;
        this._detachTargetOnLobLookupFailureParquet = config.detachTargetOnLobLookupFailureParquet;
        this._dictPageSizeLimit = config.dictPageSizeLimit;
        this._enableStatistics = config.enableStatistics;
        this._encodingType = config.encodingType;
        this._encryptionMode = config.encryptionMode;
        this._endpointId = config.endpointId;
        this._endpointType = config.endpointType;
        this._expectedBucketOwner = config.expectedBucketOwner;
        this._externalTableDefinition = config.externalTableDefinition;
        this._glueCatalogGeneration = config.glueCatalogGeneration;
        this._id = config.id;
        this._ignoreHeaderRows = config.ignoreHeaderRows;
        this._includeOpForFullLoad = config.includeOpForFullLoad;
        this._kmsKeyArn = config.kmsKeyArn;
        this._maxFileSize = config.maxFileSize;
        this._parquetTimestampInMillisecond = config.parquetTimestampInMillisecond;
        this._parquetVersion = config.parquetVersion;
        this._preserveTransactions = config.preserveTransactions;
        this._rfc4180 = config.rfc4180;
        this._rowGroupLength = config.rowGroupLength;
        this._serverSideEncryptionKmsKeyId = config.serverSideEncryptionKmsKeyId;
        this._serviceAccessRoleArn = config.serviceAccessRoleArn;
        this._sslMode = config.sslMode;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._timestampColumnName = config.timestampColumnName;
        this._useCsvNoSupValue = config.useCsvNoSupValue;
        this._useTaskStartTimeForFullLoadTimestamp = config.useTaskStartTimeForFullLoadTimestamp;
        this._timeouts.internalValue = config.timeouts;
    }
    get addColumnName() {
        return this.getBooleanAttribute('add_column_name');
    }
    set addColumnName(value) {
        this._addColumnName = value;
    }
    resetAddColumnName() {
        this._addColumnName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get addColumnNameInput() {
        return this._addColumnName;
    }
    get addTrailingPaddingCharacter() {
        return this.getBooleanAttribute('add_trailing_padding_character');
    }
    set addTrailingPaddingCharacter(value) {
        this._addTrailingPaddingCharacter = value;
    }
    resetAddTrailingPaddingCharacter() {
        this._addTrailingPaddingCharacter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get addTrailingPaddingCharacterInput() {
        return this._addTrailingPaddingCharacter;
    }
    get bucketFolder() {
        return this.getStringAttribute('bucket_folder');
    }
    set bucketFolder(value) {
        this._bucketFolder = value;
    }
    resetBucketFolder() {
        this._bucketFolder = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketFolderInput() {
        return this._bucketFolder;
    }
    get bucketName() {
        return this.getStringAttribute('bucket_name');
    }
    set bucketName(value) {
        this._bucketName = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketNameInput() {
        return this._bucketName;
    }
    get cannedAclForObjects() {
        return this.getStringAttribute('canned_acl_for_objects');
    }
    set cannedAclForObjects(value) {
        this._cannedAclForObjects = value;
    }
    resetCannedAclForObjects() {
        this._cannedAclForObjects = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cannedAclForObjectsInput() {
        return this._cannedAclForObjects;
    }
    get cdcInsertsAndUpdates() {
        return this.getBooleanAttribute('cdc_inserts_and_updates');
    }
    set cdcInsertsAndUpdates(value) {
        this._cdcInsertsAndUpdates = value;
    }
    resetCdcInsertsAndUpdates() {
        this._cdcInsertsAndUpdates = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cdcInsertsAndUpdatesInput() {
        return this._cdcInsertsAndUpdates;
    }
    get cdcInsertsOnly() {
        return this.getBooleanAttribute('cdc_inserts_only');
    }
    set cdcInsertsOnly(value) {
        this._cdcInsertsOnly = value;
    }
    resetCdcInsertsOnly() {
        this._cdcInsertsOnly = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cdcInsertsOnlyInput() {
        return this._cdcInsertsOnly;
    }
    get cdcMaxBatchInterval() {
        return this.getNumberAttribute('cdc_max_batch_interval');
    }
    set cdcMaxBatchInterval(value) {
        this._cdcMaxBatchInterval = value;
    }
    resetCdcMaxBatchInterval() {
        this._cdcMaxBatchInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cdcMaxBatchIntervalInput() {
        return this._cdcMaxBatchInterval;
    }
    get cdcMinFileSize() {
        return this.getNumberAttribute('cdc_min_file_size');
    }
    set cdcMinFileSize(value) {
        this._cdcMinFileSize = value;
    }
    resetCdcMinFileSize() {
        this._cdcMinFileSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cdcMinFileSizeInput() {
        return this._cdcMinFileSize;
    }
    get cdcPath() {
        return this.getStringAttribute('cdc_path');
    }
    set cdcPath(value) {
        this._cdcPath = value;
    }
    resetCdcPath() {
        this._cdcPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cdcPathInput() {
        return this._cdcPath;
    }
    get certificateArn() {
        return this.getStringAttribute('certificate_arn');
    }
    set certificateArn(value) {
        this._certificateArn = value;
    }
    resetCertificateArn() {
        this._certificateArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get certificateArnInput() {
        return this._certificateArn;
    }
    get compressionType() {
        return this.getStringAttribute('compression_type');
    }
    set compressionType(value) {
        this._compressionType = value;
    }
    resetCompressionType() {
        this._compressionType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get compressionTypeInput() {
        return this._compressionType;
    }
    get csvDelimiter() {
        return this.getStringAttribute('csv_delimiter');
    }
    set csvDelimiter(value) {
        this._csvDelimiter = value;
    }
    resetCsvDelimiter() {
        this._csvDelimiter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get csvDelimiterInput() {
        return this._csvDelimiter;
    }
    get csvNoSupValue() {
        return this.getStringAttribute('csv_no_sup_value');
    }
    set csvNoSupValue(value) {
        this._csvNoSupValue = value;
    }
    resetCsvNoSupValue() {
        this._csvNoSupValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get csvNoSupValueInput() {
        return this._csvNoSupValue;
    }
    get csvNullValue() {
        return this.getStringAttribute('csv_null_value');
    }
    set csvNullValue(value) {
        this._csvNullValue = value;
    }
    resetCsvNullValue() {
        this._csvNullValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get csvNullValueInput() {
        return this._csvNullValue;
    }
    get csvRowDelimiter() {
        return this.getStringAttribute('csv_row_delimiter');
    }
    set csvRowDelimiter(value) {
        this._csvRowDelimiter = value;
    }
    resetCsvRowDelimiter() {
        this._csvRowDelimiter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get csvRowDelimiterInput() {
        return this._csvRowDelimiter;
    }
    get dataFormat() {
        return this.getStringAttribute('data_format');
    }
    set dataFormat(value) {
        this._dataFormat = value;
    }
    resetDataFormat() {
        this._dataFormat = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataFormatInput() {
        return this._dataFormat;
    }
    get dataPageSize() {
        return this.getNumberAttribute('data_page_size');
    }
    set dataPageSize(value) {
        this._dataPageSize = value;
    }
    resetDataPageSize() {
        this._dataPageSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataPageSizeInput() {
        return this._dataPageSize;
    }
    get datePartitionDelimiter() {
        return this.getStringAttribute('date_partition_delimiter');
    }
    set datePartitionDelimiter(value) {
        this._datePartitionDelimiter = value;
    }
    resetDatePartitionDelimiter() {
        this._datePartitionDelimiter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get datePartitionDelimiterInput() {
        return this._datePartitionDelimiter;
    }
    get datePartitionEnabled() {
        return this.getBooleanAttribute('date_partition_enabled');
    }
    set datePartitionEnabled(value) {
        this._datePartitionEnabled = value;
    }
    resetDatePartitionEnabled() {
        this._datePartitionEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get datePartitionEnabledInput() {
        return this._datePartitionEnabled;
    }
    get datePartitionSequence() {
        return this.getStringAttribute('date_partition_sequence');
    }
    set datePartitionSequence(value) {
        this._datePartitionSequence = value;
    }
    resetDatePartitionSequence() {
        this._datePartitionSequence = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get datePartitionSequenceInput() {
        return this._datePartitionSequence;
    }
    get datePartitionTimezone() {
        return this.getStringAttribute('date_partition_timezone');
    }
    set datePartitionTimezone(value) {
        this._datePartitionTimezone = value;
    }
    resetDatePartitionTimezone() {
        this._datePartitionTimezone = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get datePartitionTimezoneInput() {
        return this._datePartitionTimezone;
    }
    get detachTargetOnLobLookupFailureParquet() {
        return this.getBooleanAttribute('detach_target_on_lob_lookup_failure_parquet');
    }
    set detachTargetOnLobLookupFailureParquet(value) {
        this._detachTargetOnLobLookupFailureParquet = value;
    }
    resetDetachTargetOnLobLookupFailureParquet() {
        this._detachTargetOnLobLookupFailureParquet = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get detachTargetOnLobLookupFailureParquetInput() {
        return this._detachTargetOnLobLookupFailureParquet;
    }
    get dictPageSizeLimit() {
        return this.getNumberAttribute('dict_page_size_limit');
    }
    set dictPageSizeLimit(value) {
        this._dictPageSizeLimit = value;
    }
    resetDictPageSizeLimit() {
        this._dictPageSizeLimit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dictPageSizeLimitInput() {
        return this._dictPageSizeLimit;
    }
    get enableStatistics() {
        return this.getBooleanAttribute('enable_statistics');
    }
    set enableStatistics(value) {
        this._enableStatistics = value;
    }
    resetEnableStatistics() {
        this._enableStatistics = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableStatisticsInput() {
        return this._enableStatistics;
    }
    get encodingType() {
        return this.getStringAttribute('encoding_type');
    }
    set encodingType(value) {
        this._encodingType = value;
    }
    resetEncodingType() {
        this._encodingType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encodingTypeInput() {
        return this._encodingType;
    }
    get encryptionMode() {
        return this.getStringAttribute('encryption_mode');
    }
    set encryptionMode(value) {
        this._encryptionMode = value;
    }
    resetEncryptionMode() {
        this._encryptionMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionModeInput() {
        return this._encryptionMode;
    }
    // endpoint_arn - computed: true, optional: false, required: false
    get endpointArn() {
        return this.getStringAttribute('endpoint_arn');
    }
    get endpointId() {
        return this.getStringAttribute('endpoint_id');
    }
    set endpointId(value) {
        this._endpointId = value;
    }
    // Temporarily expose input value. Use with caution.
    get endpointIdInput() {
        return this._endpointId;
    }
    get endpointType() {
        return this.getStringAttribute('endpoint_type');
    }
    set endpointType(value) {
        this._endpointType = value;
    }
    // Temporarily expose input value. Use with caution.
    get endpointTypeInput() {
        return this._endpointType;
    }
    // engine_display_name - computed: true, optional: false, required: false
    get engineDisplayName() {
        return this.getStringAttribute('engine_display_name');
    }
    get expectedBucketOwner() {
        return this.getStringAttribute('expected_bucket_owner');
    }
    set expectedBucketOwner(value) {
        this._expectedBucketOwner = value;
    }
    resetExpectedBucketOwner() {
        this._expectedBucketOwner = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get expectedBucketOwnerInput() {
        return this._expectedBucketOwner;
    }
    // external_id - computed: true, optional: false, required: false
    get externalId() {
        return this.getStringAttribute('external_id');
    }
    get externalTableDefinition() {
        return this.getStringAttribute('external_table_definition');
    }
    set externalTableDefinition(value) {
        this._externalTableDefinition = value;
    }
    resetExternalTableDefinition() {
        this._externalTableDefinition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get externalTableDefinitionInput() {
        return this._externalTableDefinition;
    }
    get glueCatalogGeneration() {
        return this.getBooleanAttribute('glue_catalog_generation');
    }
    set glueCatalogGeneration(value) {
        this._glueCatalogGeneration = value;
    }
    resetGlueCatalogGeneration() {
        this._glueCatalogGeneration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get glueCatalogGenerationInput() {
        return this._glueCatalogGeneration;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get ignoreHeaderRows() {
        return this.getNumberAttribute('ignore_header_rows');
    }
    set ignoreHeaderRows(value) {
        this._ignoreHeaderRows = value;
    }
    resetIgnoreHeaderRows() {
        this._ignoreHeaderRows = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ignoreHeaderRowsInput() {
        return this._ignoreHeaderRows;
    }
    get includeOpForFullLoad() {
        return this.getBooleanAttribute('include_op_for_full_load');
    }
    set includeOpForFullLoad(value) {
        this._includeOpForFullLoad = value;
    }
    resetIncludeOpForFullLoad() {
        this._includeOpForFullLoad = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeOpForFullLoadInput() {
        return this._includeOpForFullLoad;
    }
    get kmsKeyArn() {
        return this.getStringAttribute('kms_key_arn');
    }
    set kmsKeyArn(value) {
        this._kmsKeyArn = value;
    }
    resetKmsKeyArn() {
        this._kmsKeyArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyArnInput() {
        return this._kmsKeyArn;
    }
    get maxFileSize() {
        return this.getNumberAttribute('max_file_size');
    }
    set maxFileSize(value) {
        this._maxFileSize = value;
    }
    resetMaxFileSize() {
        this._maxFileSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxFileSizeInput() {
        return this._maxFileSize;
    }
    get parquetTimestampInMillisecond() {
        return this.getBooleanAttribute('parquet_timestamp_in_millisecond');
    }
    set parquetTimestampInMillisecond(value) {
        this._parquetTimestampInMillisecond = value;
    }
    resetParquetTimestampInMillisecond() {
        this._parquetTimestampInMillisecond = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parquetTimestampInMillisecondInput() {
        return this._parquetTimestampInMillisecond;
    }
    get parquetVersion() {
        return this.getStringAttribute('parquet_version');
    }
    set parquetVersion(value) {
        this._parquetVersion = value;
    }
    resetParquetVersion() {
        this._parquetVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parquetVersionInput() {
        return this._parquetVersion;
    }
    get preserveTransactions() {
        return this.getBooleanAttribute('preserve_transactions');
    }
    set preserveTransactions(value) {
        this._preserveTransactions = value;
    }
    resetPreserveTransactions() {
        this._preserveTransactions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get preserveTransactionsInput() {
        return this._preserveTransactions;
    }
    get rfc4180() {
        return this.getBooleanAttribute('rfc_4180');
    }
    set rfc4180(value) {
        this._rfc4180 = value;
    }
    resetRfc4180() {
        this._rfc4180 = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rfc4180Input() {
        return this._rfc4180;
    }
    get rowGroupLength() {
        return this.getNumberAttribute('row_group_length');
    }
    set rowGroupLength(value) {
        this._rowGroupLength = value;
    }
    resetRowGroupLength() {
        this._rowGroupLength = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rowGroupLengthInput() {
        return this._rowGroupLength;
    }
    get serverSideEncryptionKmsKeyId() {
        return this.getStringAttribute('server_side_encryption_kms_key_id');
    }
    set serverSideEncryptionKmsKeyId(value) {
        this._serverSideEncryptionKmsKeyId = value;
    }
    resetServerSideEncryptionKmsKeyId() {
        this._serverSideEncryptionKmsKeyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serverSideEncryptionKmsKeyIdInput() {
        return this._serverSideEncryptionKmsKeyId;
    }
    get serviceAccessRoleArn() {
        return this.getStringAttribute('service_access_role_arn');
    }
    set serviceAccessRoleArn(value) {
        this._serviceAccessRoleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get serviceAccessRoleArnInput() {
        return this._serviceAccessRoleArn;
    }
    get sslMode() {
        return this.getStringAttribute('ssl_mode');
    }
    set sslMode(value) {
        this._sslMode = value;
    }
    resetSslMode() {
        this._sslMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sslModeInput() {
        return this._sslMode;
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.getStringAttribute('status');
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get timestampColumnName() {
        return this.getStringAttribute('timestamp_column_name');
    }
    set timestampColumnName(value) {
        this._timestampColumnName = value;
    }
    resetTimestampColumnName() {
        this._timestampColumnName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timestampColumnNameInput() {
        return this._timestampColumnName;
    }
    get useCsvNoSupValue() {
        return this.getBooleanAttribute('use_csv_no_sup_value');
    }
    set useCsvNoSupValue(value) {
        this._useCsvNoSupValue = value;
    }
    resetUseCsvNoSupValue() {
        this._useCsvNoSupValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get useCsvNoSupValueInput() {
        return this._useCsvNoSupValue;
    }
    get useTaskStartTimeForFullLoadTimestamp() {
        return this.getBooleanAttribute('use_task_start_time_for_full_load_timestamp');
    }
    set useTaskStartTimeForFullLoadTimestamp(value) {
        this._useTaskStartTimeForFullLoadTimestamp = value;
    }
    resetUseTaskStartTimeForFullLoadTimestamp() {
        this._useTaskStartTimeForFullLoadTimestamp = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get useTaskStartTimeForFullLoadTimestampInput() {
        return this._useTaskStartTimeForFullLoadTimestamp;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            add_column_name: cdktf.booleanToTerraform(this._addColumnName),
            add_trailing_padding_character: cdktf.booleanToTerraform(this._addTrailingPaddingCharacter),
            bucket_folder: cdktf.stringToTerraform(this._bucketFolder),
            bucket_name: cdktf.stringToTerraform(this._bucketName),
            canned_acl_for_objects: cdktf.stringToTerraform(this._cannedAclForObjects),
            cdc_inserts_and_updates: cdktf.booleanToTerraform(this._cdcInsertsAndUpdates),
            cdc_inserts_only: cdktf.booleanToTerraform(this._cdcInsertsOnly),
            cdc_max_batch_interval: cdktf.numberToTerraform(this._cdcMaxBatchInterval),
            cdc_min_file_size: cdktf.numberToTerraform(this._cdcMinFileSize),
            cdc_path: cdktf.stringToTerraform(this._cdcPath),
            certificate_arn: cdktf.stringToTerraform(this._certificateArn),
            compression_type: cdktf.stringToTerraform(this._compressionType),
            csv_delimiter: cdktf.stringToTerraform(this._csvDelimiter),
            csv_no_sup_value: cdktf.stringToTerraform(this._csvNoSupValue),
            csv_null_value: cdktf.stringToTerraform(this._csvNullValue),
            csv_row_delimiter: cdktf.stringToTerraform(this._csvRowDelimiter),
            data_format: cdktf.stringToTerraform(this._dataFormat),
            data_page_size: cdktf.numberToTerraform(this._dataPageSize),
            date_partition_delimiter: cdktf.stringToTerraform(this._datePartitionDelimiter),
            date_partition_enabled: cdktf.booleanToTerraform(this._datePartitionEnabled),
            date_partition_sequence: cdktf.stringToTerraform(this._datePartitionSequence),
            date_partition_timezone: cdktf.stringToTerraform(this._datePartitionTimezone),
            detach_target_on_lob_lookup_failure_parquet: cdktf.booleanToTerraform(this._detachTargetOnLobLookupFailureParquet),
            dict_page_size_limit: cdktf.numberToTerraform(this._dictPageSizeLimit),
            enable_statistics: cdktf.booleanToTerraform(this._enableStatistics),
            encoding_type: cdktf.stringToTerraform(this._encodingType),
            encryption_mode: cdktf.stringToTerraform(this._encryptionMode),
            endpoint_id: cdktf.stringToTerraform(this._endpointId),
            endpoint_type: cdktf.stringToTerraform(this._endpointType),
            expected_bucket_owner: cdktf.stringToTerraform(this._expectedBucketOwner),
            external_table_definition: cdktf.stringToTerraform(this._externalTableDefinition),
            glue_catalog_generation: cdktf.booleanToTerraform(this._glueCatalogGeneration),
            id: cdktf.stringToTerraform(this._id),
            ignore_header_rows: cdktf.numberToTerraform(this._ignoreHeaderRows),
            include_op_for_full_load: cdktf.booleanToTerraform(this._includeOpForFullLoad),
            kms_key_arn: cdktf.stringToTerraform(this._kmsKeyArn),
            max_file_size: cdktf.numberToTerraform(this._maxFileSize),
            parquet_timestamp_in_millisecond: cdktf.booleanToTerraform(this._parquetTimestampInMillisecond),
            parquet_version: cdktf.stringToTerraform(this._parquetVersion),
            preserve_transactions: cdktf.booleanToTerraform(this._preserveTransactions),
            rfc_4180: cdktf.booleanToTerraform(this._rfc4180),
            row_group_length: cdktf.numberToTerraform(this._rowGroupLength),
            server_side_encryption_kms_key_id: cdktf.stringToTerraform(this._serverSideEncryptionKmsKeyId),
            service_access_role_arn: cdktf.stringToTerraform(this._serviceAccessRoleArn),
            ssl_mode: cdktf.stringToTerraform(this._sslMode),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            timestamp_column_name: cdktf.stringToTerraform(this._timestampColumnName),
            use_csv_no_sup_value: cdktf.booleanToTerraform(this._useCsvNoSupValue),
            use_task_start_time_for_full_load_timestamp: cdktf.booleanToTerraform(this._useTaskStartTimeForFullLoadTimestamp),
            timeouts: dmsS3EndpointTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            add_column_name: {
                value: cdktf.booleanToHclTerraform(this._addColumnName),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            add_trailing_padding_character: {
                value: cdktf.booleanToHclTerraform(this._addTrailingPaddingCharacter),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            bucket_folder: {
                value: cdktf.stringToHclTerraform(this._bucketFolder),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            bucket_name: {
                value: cdktf.stringToHclTerraform(this._bucketName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            canned_acl_for_objects: {
                value: cdktf.stringToHclTerraform(this._cannedAclForObjects),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            cdc_inserts_and_updates: {
                value: cdktf.booleanToHclTerraform(this._cdcInsertsAndUpdates),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            cdc_inserts_only: {
                value: cdktf.booleanToHclTerraform(this._cdcInsertsOnly),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            cdc_max_batch_interval: {
                value: cdktf.numberToHclTerraform(this._cdcMaxBatchInterval),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            cdc_min_file_size: {
                value: cdktf.numberToHclTerraform(this._cdcMinFileSize),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            cdc_path: {
                value: cdktf.stringToHclTerraform(this._cdcPath),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            certificate_arn: {
                value: cdktf.stringToHclTerraform(this._certificateArn),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            compression_type: {
                value: cdktf.stringToHclTerraform(this._compressionType),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            csv_delimiter: {
                value: cdktf.stringToHclTerraform(this._csvDelimiter),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            csv_no_sup_value: {
                value: cdktf.stringToHclTerraform(this._csvNoSupValue),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            csv_null_value: {
                value: cdktf.stringToHclTerraform(this._csvNullValue),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            csv_row_delimiter: {
                value: cdktf.stringToHclTerraform(this._csvRowDelimiter),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            data_format: {
                value: cdktf.stringToHclTerraform(this._dataFormat),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            data_page_size: {
                value: cdktf.numberToHclTerraform(this._dataPageSize),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            date_partition_delimiter: {
                value: cdktf.stringToHclTerraform(this._datePartitionDelimiter),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            date_partition_enabled: {
                value: cdktf.booleanToHclTerraform(this._datePartitionEnabled),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            date_partition_sequence: {
                value: cdktf.stringToHclTerraform(this._datePartitionSequence),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            date_partition_timezone: {
                value: cdktf.stringToHclTerraform(this._datePartitionTimezone),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            detach_target_on_lob_lookup_failure_parquet: {
                value: cdktf.booleanToHclTerraform(this._detachTargetOnLobLookupFailureParquet),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            dict_page_size_limit: {
                value: cdktf.numberToHclTerraform(this._dictPageSizeLimit),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            enable_statistics: {
                value: cdktf.booleanToHclTerraform(this._enableStatistics),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            encoding_type: {
                value: cdktf.stringToHclTerraform(this._encodingType),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            encryption_mode: {
                value: cdktf.stringToHclTerraform(this._encryptionMode),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            endpoint_id: {
                value: cdktf.stringToHclTerraform(this._endpointId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            endpoint_type: {
                value: cdktf.stringToHclTerraform(this._endpointType),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            expected_bucket_owner: {
                value: cdktf.stringToHclTerraform(this._expectedBucketOwner),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            external_table_definition: {
                value: cdktf.stringToHclTerraform(this._externalTableDefinition),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            glue_catalog_generation: {
                value: cdktf.booleanToHclTerraform(this._glueCatalogGeneration),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            ignore_header_rows: {
                value: cdktf.numberToHclTerraform(this._ignoreHeaderRows),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            include_op_for_full_load: {
                value: cdktf.booleanToHclTerraform(this._includeOpForFullLoad),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            kms_key_arn: {
                value: cdktf.stringToHclTerraform(this._kmsKeyArn),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            max_file_size: {
                value: cdktf.numberToHclTerraform(this._maxFileSize),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            parquet_timestamp_in_millisecond: {
                value: cdktf.booleanToHclTerraform(this._parquetTimestampInMillisecond),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            parquet_version: {
                value: cdktf.stringToHclTerraform(this._parquetVersion),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            preserve_transactions: {
                value: cdktf.booleanToHclTerraform(this._preserveTransactions),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            rfc_4180: {
                value: cdktf.booleanToHclTerraform(this._rfc4180),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            row_group_length: {
                value: cdktf.numberToHclTerraform(this._rowGroupLength),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            server_side_encryption_kms_key_id: {
                value: cdktf.stringToHclTerraform(this._serverSideEncryptionKmsKeyId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            service_access_role_arn: {
                value: cdktf.stringToHclTerraform(this._serviceAccessRoleArn),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            ssl_mode: {
                value: cdktf.stringToHclTerraform(this._sslMode),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            tags: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tags),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            tags_all: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tagsAll),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            timestamp_column_name: {
                value: cdktf.stringToHclTerraform(this._timestampColumnName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            use_csv_no_sup_value: {
                value: cdktf.booleanToHclTerraform(this._useCsvNoSupValue),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            use_task_start_time_for_full_load_timestamp: {
                value: cdktf.booleanToHclTerraform(this._useTaskStartTimeForFullLoadTimestamp),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            timeouts: {
                value: dmsS3EndpointTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "DmsS3EndpointTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.DmsS3Endpoint = DmsS3Endpoint;
_b = JSII_RTTI_SYMBOL_1;
DmsS3Endpoint[_b] = { fqn: "@cdktf/provider-aws.dmsS3Endpoint.DmsS3Endpoint", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
DmsS3Endpoint.tfResourceType = "aws_dms_s3_endpoint";
//# sourceMappingURL=data:application/json;base64,