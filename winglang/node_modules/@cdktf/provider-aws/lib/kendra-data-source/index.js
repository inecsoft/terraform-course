"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
Object.defineProperty(exports, "__esModule", { value: true });
exports.KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsList = exports.KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsOutputReference = exports.kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsToHclTerraform = exports.kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsToTerraform = exports.KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsTargetOutputReference = exports.kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsTargetToHclTerraform = exports.kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsTargetToTerraform = exports.KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsTargetTargetDocumentAttributeValueOutputReference = exports.kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsTargetTargetDocumentAttributeValueToHclTerraform = exports.kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsTargetTargetDocumentAttributeValueToTerraform = exports.KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsConditionOutputReference = exports.kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsConditionToHclTerraform = exports.kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsConditionToTerraform = exports.KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsConditionConditionOnValueOutputReference = exports.kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsConditionConditionOnValueToHclTerraform = exports.kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsConditionConditionOnValueToTerraform = exports.KendraDataSourceConfigurationOutputReference = exports.kendraDataSourceConfigurationToHclTerraform = exports.kendraDataSourceConfigurationToTerraform = exports.KendraDataSourceConfigurationWebCrawlerConfigurationOutputReference = exports.kendraDataSourceConfigurationWebCrawlerConfigurationToHclTerraform = exports.kendraDataSourceConfigurationWebCrawlerConfigurationToTerraform = exports.KendraDataSourceConfigurationWebCrawlerConfigurationUrlsOutputReference = exports.kendraDataSourceConfigurationWebCrawlerConfigurationUrlsToHclTerraform = exports.kendraDataSourceConfigurationWebCrawlerConfigurationUrlsToTerraform = exports.KendraDataSourceConfigurationWebCrawlerConfigurationUrlsSiteMapsConfigurationOutputReference = exports.kendraDataSourceConfigurationWebCrawlerConfigurationUrlsSiteMapsConfigurationToHclTerraform = exports.kendraDataSourceConfigurationWebCrawlerConfigurationUrlsSiteMapsConfigurationToTerraform = exports.KendraDataSourceConfigurationWebCrawlerConfigurationUrlsSeedUrlConfigurationOutputReference = exports.kendraDataSourceConfigurationWebCrawlerConfigurationUrlsSeedUrlConfigurationToHclTerraform = exports.kendraDataSourceConfigurationWebCrawlerConfigurationUrlsSeedUrlConfigurationToTerraform = exports.KendraDataSourceConfigurationWebCrawlerConfigurationProxyConfigurationOutputReference = exports.kendraDataSourceConfigurationWebCrawlerConfigurationProxyConfigurationToHclTerraform = exports.kendraDataSourceConfigurationWebCrawlerConfigurationProxyConfigurationToTerraform = exports.KendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationOutputReference = exports.kendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationToHclTerraform = exports.kendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationToTerraform = exports.KendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationBasicAuthenticationList = exports.KendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationBasicAuthenticationOutputReference = exports.kendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationBasicAuthenticationToHclTerraform = exports.kendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationBasicAuthenticationToTerraform = exports.KendraDataSourceConfigurationS3ConfigurationOutputReference = exports.kendraDataSourceConfigurationS3ConfigurationToHclTerraform = exports.kendraDataSourceConfigurationS3ConfigurationToTerraform = exports.KendraDataSourceConfigurationS3ConfigurationDocumentsMetadataConfigurationOutputReference = exports.kendraDataSourceConfigurationS3ConfigurationDocumentsMetadataConfigurationToHclTerraform = exports.kendraDataSourceConfigurationS3ConfigurationDocumentsMetadataConfigurationToTerraform = exports.KendraDataSourceConfigurationS3ConfigurationAccessControlListConfigurationOutputReference = exports.kendraDataSourceConfigurationS3ConfigurationAccessControlListConfigurationToHclTerraform = exports.kendraDataSourceConfigurationS3ConfigurationAccessControlListConfigurationToTerraform = void 0;
exports.KendraDataSource = exports.KendraDataSourceTimeoutsOutputReference = exports.kendraDataSourceTimeoutsToHclTerraform = exports.kendraDataSourceTimeoutsToTerraform = exports.KendraDataSourceCustomDocumentEnrichmentConfigurationOutputReference = exports.kendraDataSourceCustomDocumentEnrichmentConfigurationToHclTerraform = exports.kendraDataSourceCustomDocumentEnrichmentConfigurationToTerraform = exports.KendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationOutputReference = exports.kendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationToHclTerraform = exports.kendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationToTerraform = exports.KendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationInvocationConditionOutputReference = exports.kendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationInvocationConditionToHclTerraform = exports.kendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationInvocationConditionToTerraform = exports.KendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationInvocationConditionConditionOnValueOutputReference = exports.kendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationInvocationConditionConditionOnValueToHclTerraform = exports.kendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationInvocationConditionConditionOnValueToTerraform = exports.KendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationOutputReference = exports.kendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationToHclTerraform = exports.kendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationToTerraform = exports.KendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationInvocationConditionOutputReference = exports.kendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationInvocationConditionToHclTerraform = exports.kendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationInvocationConditionToTerraform = exports.KendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationInvocationConditionConditionOnValueOutputReference = exports.kendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationInvocationConditionConditionOnValueToHclTerraform = exports.kendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationInvocationConditionConditionOnValueToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function kendraDataSourceConfigurationS3ConfigurationAccessControlListConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key_path: cdktf.stringToTerraform(struct.keyPath),
    };
}
exports.kendraDataSourceConfigurationS3ConfigurationAccessControlListConfigurationToTerraform = kendraDataSourceConfigurationS3ConfigurationAccessControlListConfigurationToTerraform;
function kendraDataSourceConfigurationS3ConfigurationAccessControlListConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        key_path: {
            value: cdktf.stringToHclTerraform(struct.keyPath),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kendraDataSourceConfigurationS3ConfigurationAccessControlListConfigurationToHclTerraform = kendraDataSourceConfigurationS3ConfigurationAccessControlListConfigurationToHclTerraform;
class KendraDataSourceConfigurationS3ConfigurationAccessControlListConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._keyPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.keyPath = this._keyPath;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._keyPath = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._keyPath = value.keyPath;
        }
    }
    get keyPath() {
        return this.getStringAttribute('key_path');
    }
    set keyPath(value) {
        this._keyPath = value;
    }
    resetKeyPath() {
        this._keyPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyPathInput() {
        return this._keyPath;
    }
}
exports.KendraDataSourceConfigurationS3ConfigurationAccessControlListConfigurationOutputReference = KendraDataSourceConfigurationS3ConfigurationAccessControlListConfigurationOutputReference;
_a = JSII_RTTI_SYMBOL_1;
KendraDataSourceConfigurationS3ConfigurationAccessControlListConfigurationOutputReference[_a] = { fqn: "@cdktf/provider-aws.kendraDataSource.KendraDataSourceConfigurationS3ConfigurationAccessControlListConfigurationOutputReference", version: "19.15.0" };
function kendraDataSourceConfigurationS3ConfigurationDocumentsMetadataConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        s3_prefix: cdktf.stringToTerraform(struct.s3Prefix),
    };
}
exports.kendraDataSourceConfigurationS3ConfigurationDocumentsMetadataConfigurationToTerraform = kendraDataSourceConfigurationS3ConfigurationDocumentsMetadataConfigurationToTerraform;
function kendraDataSourceConfigurationS3ConfigurationDocumentsMetadataConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        s3_prefix: {
            value: cdktf.stringToHclTerraform(struct.s3Prefix),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kendraDataSourceConfigurationS3ConfigurationDocumentsMetadataConfigurationToHclTerraform = kendraDataSourceConfigurationS3ConfigurationDocumentsMetadataConfigurationToHclTerraform;
class KendraDataSourceConfigurationS3ConfigurationDocumentsMetadataConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._s3Prefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3Prefix = this._s3Prefix;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._s3Prefix = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._s3Prefix = value.s3Prefix;
        }
    }
    get s3Prefix() {
        return this.getStringAttribute('s3_prefix');
    }
    set s3Prefix(value) {
        this._s3Prefix = value;
    }
    resetS3Prefix() {
        this._s3Prefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3PrefixInput() {
        return this._s3Prefix;
    }
}
exports.KendraDataSourceConfigurationS3ConfigurationDocumentsMetadataConfigurationOutputReference = KendraDataSourceConfigurationS3ConfigurationDocumentsMetadataConfigurationOutputReference;
_b = JSII_RTTI_SYMBOL_1;
KendraDataSourceConfigurationS3ConfigurationDocumentsMetadataConfigurationOutputReference[_b] = { fqn: "@cdktf/provider-aws.kendraDataSource.KendraDataSourceConfigurationS3ConfigurationDocumentsMetadataConfigurationOutputReference", version: "19.15.0" };
function kendraDataSourceConfigurationS3ConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        exclusion_patterns: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.exclusionPatterns),
        inclusion_patterns: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.inclusionPatterns),
        inclusion_prefixes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.inclusionPrefixes),
        access_control_list_configuration: kendraDataSourceConfigurationS3ConfigurationAccessControlListConfigurationToTerraform(struct.accessControlListConfiguration),
        documents_metadata_configuration: kendraDataSourceConfigurationS3ConfigurationDocumentsMetadataConfigurationToTerraform(struct.documentsMetadataConfiguration),
    };
}
exports.kendraDataSourceConfigurationS3ConfigurationToTerraform = kendraDataSourceConfigurationS3ConfigurationToTerraform;
function kendraDataSourceConfigurationS3ConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bucket_name: {
            value: cdktf.stringToHclTerraform(struct.bucketName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        exclusion_patterns: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.exclusionPatterns),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        inclusion_patterns: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.inclusionPatterns),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        inclusion_prefixes: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.inclusionPrefixes),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        access_control_list_configuration: {
            value: kendraDataSourceConfigurationS3ConfigurationAccessControlListConfigurationToHclTerraform(struct.accessControlListConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "KendraDataSourceConfigurationS3ConfigurationAccessControlListConfigurationList",
        },
        documents_metadata_configuration: {
            value: kendraDataSourceConfigurationS3ConfigurationDocumentsMetadataConfigurationToHclTerraform(struct.documentsMetadataConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "KendraDataSourceConfigurationS3ConfigurationDocumentsMetadataConfigurationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kendraDataSourceConfigurationS3ConfigurationToHclTerraform = kendraDataSourceConfigurationS3ConfigurationToHclTerraform;
class KendraDataSourceConfigurationS3ConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // access_control_list_configuration - computed: false, optional: true, required: false
        this._accessControlListConfiguration = new KendraDataSourceConfigurationS3ConfigurationAccessControlListConfigurationOutputReference(this, "access_control_list_configuration");
        // documents_metadata_configuration - computed: false, optional: true, required: false
        this._documentsMetadataConfiguration = new KendraDataSourceConfigurationS3ConfigurationDocumentsMetadataConfigurationOutputReference(this, "documents_metadata_configuration");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketName !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketName = this._bucketName;
        }
        if (this._exclusionPatterns !== undefined) {
            hasAnyValues = true;
            internalValueResult.exclusionPatterns = this._exclusionPatterns;
        }
        if (this._inclusionPatterns !== undefined) {
            hasAnyValues = true;
            internalValueResult.inclusionPatterns = this._inclusionPatterns;
        }
        if (this._inclusionPrefixes !== undefined) {
            hasAnyValues = true;
            internalValueResult.inclusionPrefixes = this._inclusionPrefixes;
        }
        if (this._accessControlListConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.accessControlListConfiguration = this._accessControlListConfiguration?.internalValue;
        }
        if (this._documentsMetadataConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.documentsMetadataConfiguration = this._documentsMetadataConfiguration?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketName = undefined;
            this._exclusionPatterns = undefined;
            this._inclusionPatterns = undefined;
            this._inclusionPrefixes = undefined;
            this._accessControlListConfiguration.internalValue = undefined;
            this._documentsMetadataConfiguration.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketName = value.bucketName;
            this._exclusionPatterns = value.exclusionPatterns;
            this._inclusionPatterns = value.inclusionPatterns;
            this._inclusionPrefixes = value.inclusionPrefixes;
            this._accessControlListConfiguration.internalValue = value.accessControlListConfiguration;
            this._documentsMetadataConfiguration.internalValue = value.documentsMetadataConfiguration;
        }
    }
    get bucketName() {
        return this.getStringAttribute('bucket_name');
    }
    set bucketName(value) {
        this._bucketName = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketNameInput() {
        return this._bucketName;
    }
    get exclusionPatterns() {
        return cdktf.Fn.tolist(this.getListAttribute('exclusion_patterns'));
    }
    set exclusionPatterns(value) {
        this._exclusionPatterns = value;
    }
    resetExclusionPatterns() {
        this._exclusionPatterns = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exclusionPatternsInput() {
        return this._exclusionPatterns;
    }
    get inclusionPatterns() {
        return cdktf.Fn.tolist(this.getListAttribute('inclusion_patterns'));
    }
    set inclusionPatterns(value) {
        this._inclusionPatterns = value;
    }
    resetInclusionPatterns() {
        this._inclusionPatterns = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inclusionPatternsInput() {
        return this._inclusionPatterns;
    }
    get inclusionPrefixes() {
        return cdktf.Fn.tolist(this.getListAttribute('inclusion_prefixes'));
    }
    set inclusionPrefixes(value) {
        this._inclusionPrefixes = value;
    }
    resetInclusionPrefixes() {
        this._inclusionPrefixes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inclusionPrefixesInput() {
        return this._inclusionPrefixes;
    }
    get accessControlListConfiguration() {
        return this._accessControlListConfiguration;
    }
    putAccessControlListConfiguration(value) {
        this._accessControlListConfiguration.internalValue = value;
    }
    resetAccessControlListConfiguration() {
        this._accessControlListConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessControlListConfigurationInput() {
        return this._accessControlListConfiguration.internalValue;
    }
    get documentsMetadataConfiguration() {
        return this._documentsMetadataConfiguration;
    }
    putDocumentsMetadataConfiguration(value) {
        this._documentsMetadataConfiguration.internalValue = value;
    }
    resetDocumentsMetadataConfiguration() {
        this._documentsMetadataConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get documentsMetadataConfigurationInput() {
        return this._documentsMetadataConfiguration.internalValue;
    }
}
exports.KendraDataSourceConfigurationS3ConfigurationOutputReference = KendraDataSourceConfigurationS3ConfigurationOutputReference;
_c = JSII_RTTI_SYMBOL_1;
KendraDataSourceConfigurationS3ConfigurationOutputReference[_c] = { fqn: "@cdktf/provider-aws.kendraDataSource.KendraDataSourceConfigurationS3ConfigurationOutputReference", version: "19.15.0" };
function kendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationBasicAuthenticationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        credentials: cdktf.stringToTerraform(struct.credentials),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.kendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationBasicAuthenticationToTerraform = kendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationBasicAuthenticationToTerraform;
function kendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationBasicAuthenticationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        credentials: {
            value: cdktf.stringToHclTerraform(struct.credentials),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        host: {
            value: cdktf.stringToHclTerraform(struct.host),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        port: {
            value: cdktf.numberToHclTerraform(struct.port),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationBasicAuthenticationToHclTerraform = kendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationBasicAuthenticationToHclTerraform;
class KendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationBasicAuthenticationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._credentials !== undefined) {
            hasAnyValues = true;
            internalValueResult.credentials = this._credentials;
        }
        if (this._host !== undefined) {
            hasAnyValues = true;
            internalValueResult.host = this._host;
        }
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._credentials = undefined;
            this._host = undefined;
            this._port = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._credentials = value.credentials;
            this._host = value.host;
            this._port = value.port;
        }
    }
    get credentials() {
        return this.getStringAttribute('credentials');
    }
    set credentials(value) {
        this._credentials = value;
    }
    // Temporarily expose input value. Use with caution.
    get credentialsInput() {
        return this._credentials;
    }
    get host() {
        return this.getStringAttribute('host');
    }
    set host(value) {
        this._host = value;
    }
    // Temporarily expose input value. Use with caution.
    get hostInput() {
        return this._host;
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
}
exports.KendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationBasicAuthenticationOutputReference = KendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationBasicAuthenticationOutputReference;
_d = JSII_RTTI_SYMBOL_1;
KendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationBasicAuthenticationOutputReference[_d] = { fqn: "@cdktf/provider-aws.kendraDataSource.KendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationBasicAuthenticationOutputReference", version: "19.15.0" };
class KendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationBasicAuthenticationList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new KendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationBasicAuthenticationOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.KendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationBasicAuthenticationList = KendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationBasicAuthenticationList;
_e = JSII_RTTI_SYMBOL_1;
KendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationBasicAuthenticationList[_e] = { fqn: "@cdktf/provider-aws.kendraDataSource.KendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationBasicAuthenticationList", version: "19.15.0" };
function kendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        basic_authentication: cdktf.listMapper(kendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationBasicAuthenticationToTerraform, true)(struct.basicAuthentication),
    };
}
exports.kendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationToTerraform = kendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationToTerraform;
function kendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        basic_authentication: {
            value: cdktf.listMapperHcl(kendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationBasicAuthenticationToHclTerraform, true)(struct.basicAuthentication),
            isBlock: true,
            type: "set",
            storageClassType: "KendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationBasicAuthenticationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationToHclTerraform = kendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationToHclTerraform;
class KendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // basic_authentication - computed: false, optional: true, required: false
        this._basicAuthentication = new KendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationBasicAuthenticationList(this, "basic_authentication", true);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._basicAuthentication?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.basicAuthentication = this._basicAuthentication?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._basicAuthentication.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._basicAuthentication.internalValue = value.basicAuthentication;
        }
    }
    get basicAuthentication() {
        return this._basicAuthentication;
    }
    putBasicAuthentication(value) {
        this._basicAuthentication.internalValue = value;
    }
    resetBasicAuthentication() {
        this._basicAuthentication.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get basicAuthenticationInput() {
        return this._basicAuthentication.internalValue;
    }
}
exports.KendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationOutputReference = KendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationOutputReference;
_f = JSII_RTTI_SYMBOL_1;
KendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationOutputReference[_f] = { fqn: "@cdktf/provider-aws.kendraDataSource.KendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationOutputReference", version: "19.15.0" };
function kendraDataSourceConfigurationWebCrawlerConfigurationProxyConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        credentials: cdktf.stringToTerraform(struct.credentials),
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.kendraDataSourceConfigurationWebCrawlerConfigurationProxyConfigurationToTerraform = kendraDataSourceConfigurationWebCrawlerConfigurationProxyConfigurationToTerraform;
function kendraDataSourceConfigurationWebCrawlerConfigurationProxyConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        credentials: {
            value: cdktf.stringToHclTerraform(struct.credentials),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        host: {
            value: cdktf.stringToHclTerraform(struct.host),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        port: {
            value: cdktf.numberToHclTerraform(struct.port),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kendraDataSourceConfigurationWebCrawlerConfigurationProxyConfigurationToHclTerraform = kendraDataSourceConfigurationWebCrawlerConfigurationProxyConfigurationToHclTerraform;
class KendraDataSourceConfigurationWebCrawlerConfigurationProxyConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._credentials !== undefined) {
            hasAnyValues = true;
            internalValueResult.credentials = this._credentials;
        }
        if (this._host !== undefined) {
            hasAnyValues = true;
            internalValueResult.host = this._host;
        }
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._credentials = undefined;
            this._host = undefined;
            this._port = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._credentials = value.credentials;
            this._host = value.host;
            this._port = value.port;
        }
    }
    get credentials() {
        return this.getStringAttribute('credentials');
    }
    set credentials(value) {
        this._credentials = value;
    }
    resetCredentials() {
        this._credentials = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get credentialsInput() {
        return this._credentials;
    }
    get host() {
        return this.getStringAttribute('host');
    }
    set host(value) {
        this._host = value;
    }
    // Temporarily expose input value. Use with caution.
    get hostInput() {
        return this._host;
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
}
exports.KendraDataSourceConfigurationWebCrawlerConfigurationProxyConfigurationOutputReference = KendraDataSourceConfigurationWebCrawlerConfigurationProxyConfigurationOutputReference;
_g = JSII_RTTI_SYMBOL_1;
KendraDataSourceConfigurationWebCrawlerConfigurationProxyConfigurationOutputReference[_g] = { fqn: "@cdktf/provider-aws.kendraDataSource.KendraDataSourceConfigurationWebCrawlerConfigurationProxyConfigurationOutputReference", version: "19.15.0" };
function kendraDataSourceConfigurationWebCrawlerConfigurationUrlsSeedUrlConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        seed_urls: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.seedUrls),
        web_crawler_mode: cdktf.stringToTerraform(struct.webCrawlerMode),
    };
}
exports.kendraDataSourceConfigurationWebCrawlerConfigurationUrlsSeedUrlConfigurationToTerraform = kendraDataSourceConfigurationWebCrawlerConfigurationUrlsSeedUrlConfigurationToTerraform;
function kendraDataSourceConfigurationWebCrawlerConfigurationUrlsSeedUrlConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        seed_urls: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.seedUrls),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        web_crawler_mode: {
            value: cdktf.stringToHclTerraform(struct.webCrawlerMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kendraDataSourceConfigurationWebCrawlerConfigurationUrlsSeedUrlConfigurationToHclTerraform = kendraDataSourceConfigurationWebCrawlerConfigurationUrlsSeedUrlConfigurationToHclTerraform;
class KendraDataSourceConfigurationWebCrawlerConfigurationUrlsSeedUrlConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._seedUrls !== undefined) {
            hasAnyValues = true;
            internalValueResult.seedUrls = this._seedUrls;
        }
        if (this._webCrawlerMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.webCrawlerMode = this._webCrawlerMode;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._seedUrls = undefined;
            this._webCrawlerMode = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._seedUrls = value.seedUrls;
            this._webCrawlerMode = value.webCrawlerMode;
        }
    }
    get seedUrls() {
        return cdktf.Fn.tolist(this.getListAttribute('seed_urls'));
    }
    set seedUrls(value) {
        this._seedUrls = value;
    }
    // Temporarily expose input value. Use with caution.
    get seedUrlsInput() {
        return this._seedUrls;
    }
    get webCrawlerMode() {
        return this.getStringAttribute('web_crawler_mode');
    }
    set webCrawlerMode(value) {
        this._webCrawlerMode = value;
    }
    resetWebCrawlerMode() {
        this._webCrawlerMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get webCrawlerModeInput() {
        return this._webCrawlerMode;
    }
}
exports.KendraDataSourceConfigurationWebCrawlerConfigurationUrlsSeedUrlConfigurationOutputReference = KendraDataSourceConfigurationWebCrawlerConfigurationUrlsSeedUrlConfigurationOutputReference;
_h = JSII_RTTI_SYMBOL_1;
KendraDataSourceConfigurationWebCrawlerConfigurationUrlsSeedUrlConfigurationOutputReference[_h] = { fqn: "@cdktf/provider-aws.kendraDataSource.KendraDataSourceConfigurationWebCrawlerConfigurationUrlsSeedUrlConfigurationOutputReference", version: "19.15.0" };
function kendraDataSourceConfigurationWebCrawlerConfigurationUrlsSiteMapsConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        site_maps: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.siteMaps),
    };
}
exports.kendraDataSourceConfigurationWebCrawlerConfigurationUrlsSiteMapsConfigurationToTerraform = kendraDataSourceConfigurationWebCrawlerConfigurationUrlsSiteMapsConfigurationToTerraform;
function kendraDataSourceConfigurationWebCrawlerConfigurationUrlsSiteMapsConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        site_maps: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.siteMaps),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kendraDataSourceConfigurationWebCrawlerConfigurationUrlsSiteMapsConfigurationToHclTerraform = kendraDataSourceConfigurationWebCrawlerConfigurationUrlsSiteMapsConfigurationToHclTerraform;
class KendraDataSourceConfigurationWebCrawlerConfigurationUrlsSiteMapsConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._siteMaps !== undefined) {
            hasAnyValues = true;
            internalValueResult.siteMaps = this._siteMaps;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._siteMaps = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._siteMaps = value.siteMaps;
        }
    }
    get siteMaps() {
        return cdktf.Fn.tolist(this.getListAttribute('site_maps'));
    }
    set siteMaps(value) {
        this._siteMaps = value;
    }
    // Temporarily expose input value. Use with caution.
    get siteMapsInput() {
        return this._siteMaps;
    }
}
exports.KendraDataSourceConfigurationWebCrawlerConfigurationUrlsSiteMapsConfigurationOutputReference = KendraDataSourceConfigurationWebCrawlerConfigurationUrlsSiteMapsConfigurationOutputReference;
_j = JSII_RTTI_SYMBOL_1;
KendraDataSourceConfigurationWebCrawlerConfigurationUrlsSiteMapsConfigurationOutputReference[_j] = { fqn: "@cdktf/provider-aws.kendraDataSource.KendraDataSourceConfigurationWebCrawlerConfigurationUrlsSiteMapsConfigurationOutputReference", version: "19.15.0" };
function kendraDataSourceConfigurationWebCrawlerConfigurationUrlsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        seed_url_configuration: kendraDataSourceConfigurationWebCrawlerConfigurationUrlsSeedUrlConfigurationToTerraform(struct.seedUrlConfiguration),
        site_maps_configuration: kendraDataSourceConfigurationWebCrawlerConfigurationUrlsSiteMapsConfigurationToTerraform(struct.siteMapsConfiguration),
    };
}
exports.kendraDataSourceConfigurationWebCrawlerConfigurationUrlsToTerraform = kendraDataSourceConfigurationWebCrawlerConfigurationUrlsToTerraform;
function kendraDataSourceConfigurationWebCrawlerConfigurationUrlsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        seed_url_configuration: {
            value: kendraDataSourceConfigurationWebCrawlerConfigurationUrlsSeedUrlConfigurationToHclTerraform(struct.seedUrlConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "KendraDataSourceConfigurationWebCrawlerConfigurationUrlsSeedUrlConfigurationList",
        },
        site_maps_configuration: {
            value: kendraDataSourceConfigurationWebCrawlerConfigurationUrlsSiteMapsConfigurationToHclTerraform(struct.siteMapsConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "KendraDataSourceConfigurationWebCrawlerConfigurationUrlsSiteMapsConfigurationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kendraDataSourceConfigurationWebCrawlerConfigurationUrlsToHclTerraform = kendraDataSourceConfigurationWebCrawlerConfigurationUrlsToHclTerraform;
class KendraDataSourceConfigurationWebCrawlerConfigurationUrlsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // seed_url_configuration - computed: false, optional: true, required: false
        this._seedUrlConfiguration = new KendraDataSourceConfigurationWebCrawlerConfigurationUrlsSeedUrlConfigurationOutputReference(this, "seed_url_configuration");
        // site_maps_configuration - computed: false, optional: true, required: false
        this._siteMapsConfiguration = new KendraDataSourceConfigurationWebCrawlerConfigurationUrlsSiteMapsConfigurationOutputReference(this, "site_maps_configuration");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._seedUrlConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.seedUrlConfiguration = this._seedUrlConfiguration?.internalValue;
        }
        if (this._siteMapsConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.siteMapsConfiguration = this._siteMapsConfiguration?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._seedUrlConfiguration.internalValue = undefined;
            this._siteMapsConfiguration.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._seedUrlConfiguration.internalValue = value.seedUrlConfiguration;
            this._siteMapsConfiguration.internalValue = value.siteMapsConfiguration;
        }
    }
    get seedUrlConfiguration() {
        return this._seedUrlConfiguration;
    }
    putSeedUrlConfiguration(value) {
        this._seedUrlConfiguration.internalValue = value;
    }
    resetSeedUrlConfiguration() {
        this._seedUrlConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get seedUrlConfigurationInput() {
        return this._seedUrlConfiguration.internalValue;
    }
    get siteMapsConfiguration() {
        return this._siteMapsConfiguration;
    }
    putSiteMapsConfiguration(value) {
        this._siteMapsConfiguration.internalValue = value;
    }
    resetSiteMapsConfiguration() {
        this._siteMapsConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get siteMapsConfigurationInput() {
        return this._siteMapsConfiguration.internalValue;
    }
}
exports.KendraDataSourceConfigurationWebCrawlerConfigurationUrlsOutputReference = KendraDataSourceConfigurationWebCrawlerConfigurationUrlsOutputReference;
_k = JSII_RTTI_SYMBOL_1;
KendraDataSourceConfigurationWebCrawlerConfigurationUrlsOutputReference[_k] = { fqn: "@cdktf/provider-aws.kendraDataSource.KendraDataSourceConfigurationWebCrawlerConfigurationUrlsOutputReference", version: "19.15.0" };
function kendraDataSourceConfigurationWebCrawlerConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        crawl_depth: cdktf.numberToTerraform(struct.crawlDepth),
        max_content_size_per_page_in_mega_bytes: cdktf.numberToTerraform(struct.maxContentSizePerPageInMegaBytes),
        max_links_per_page: cdktf.numberToTerraform(struct.maxLinksPerPage),
        max_urls_per_minute_crawl_rate: cdktf.numberToTerraform(struct.maxUrlsPerMinuteCrawlRate),
        url_exclusion_patterns: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.urlExclusionPatterns),
        url_inclusion_patterns: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.urlInclusionPatterns),
        authentication_configuration: kendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationToTerraform(struct.authenticationConfiguration),
        proxy_configuration: kendraDataSourceConfigurationWebCrawlerConfigurationProxyConfigurationToTerraform(struct.proxyConfiguration),
        urls: kendraDataSourceConfigurationWebCrawlerConfigurationUrlsToTerraform(struct.urls),
    };
}
exports.kendraDataSourceConfigurationWebCrawlerConfigurationToTerraform = kendraDataSourceConfigurationWebCrawlerConfigurationToTerraform;
function kendraDataSourceConfigurationWebCrawlerConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        crawl_depth: {
            value: cdktf.numberToHclTerraform(struct.crawlDepth),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        max_content_size_per_page_in_mega_bytes: {
            value: cdktf.numberToHclTerraform(struct.maxContentSizePerPageInMegaBytes),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        max_links_per_page: {
            value: cdktf.numberToHclTerraform(struct.maxLinksPerPage),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        max_urls_per_minute_crawl_rate: {
            value: cdktf.numberToHclTerraform(struct.maxUrlsPerMinuteCrawlRate),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        url_exclusion_patterns: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.urlExclusionPatterns),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        url_inclusion_patterns: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.urlInclusionPatterns),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        authentication_configuration: {
            value: kendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationToHclTerraform(struct.authenticationConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "KendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationList",
        },
        proxy_configuration: {
            value: kendraDataSourceConfigurationWebCrawlerConfigurationProxyConfigurationToHclTerraform(struct.proxyConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "KendraDataSourceConfigurationWebCrawlerConfigurationProxyConfigurationList",
        },
        urls: {
            value: kendraDataSourceConfigurationWebCrawlerConfigurationUrlsToHclTerraform(struct.urls),
            isBlock: true,
            type: "list",
            storageClassType: "KendraDataSourceConfigurationWebCrawlerConfigurationUrlsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kendraDataSourceConfigurationWebCrawlerConfigurationToHclTerraform = kendraDataSourceConfigurationWebCrawlerConfigurationToHclTerraform;
class KendraDataSourceConfigurationWebCrawlerConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // authentication_configuration - computed: false, optional: true, required: false
        this._authenticationConfiguration = new KendraDataSourceConfigurationWebCrawlerConfigurationAuthenticationConfigurationOutputReference(this, "authentication_configuration");
        // proxy_configuration - computed: false, optional: true, required: false
        this._proxyConfiguration = new KendraDataSourceConfigurationWebCrawlerConfigurationProxyConfigurationOutputReference(this, "proxy_configuration");
        // urls - computed: false, optional: false, required: true
        this._urls = new KendraDataSourceConfigurationWebCrawlerConfigurationUrlsOutputReference(this, "urls");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._crawlDepth !== undefined) {
            hasAnyValues = true;
            internalValueResult.crawlDepth = this._crawlDepth;
        }
        if (this._maxContentSizePerPageInMegaBytes !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxContentSizePerPageInMegaBytes = this._maxContentSizePerPageInMegaBytes;
        }
        if (this._maxLinksPerPage !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxLinksPerPage = this._maxLinksPerPage;
        }
        if (this._maxUrlsPerMinuteCrawlRate !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxUrlsPerMinuteCrawlRate = this._maxUrlsPerMinuteCrawlRate;
        }
        if (this._urlExclusionPatterns !== undefined) {
            hasAnyValues = true;
            internalValueResult.urlExclusionPatterns = this._urlExclusionPatterns;
        }
        if (this._urlInclusionPatterns !== undefined) {
            hasAnyValues = true;
            internalValueResult.urlInclusionPatterns = this._urlInclusionPatterns;
        }
        if (this._authenticationConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.authenticationConfiguration = this._authenticationConfiguration?.internalValue;
        }
        if (this._proxyConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.proxyConfiguration = this._proxyConfiguration?.internalValue;
        }
        if (this._urls?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.urls = this._urls?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._crawlDepth = undefined;
            this._maxContentSizePerPageInMegaBytes = undefined;
            this._maxLinksPerPage = undefined;
            this._maxUrlsPerMinuteCrawlRate = undefined;
            this._urlExclusionPatterns = undefined;
            this._urlInclusionPatterns = undefined;
            this._authenticationConfiguration.internalValue = undefined;
            this._proxyConfiguration.internalValue = undefined;
            this._urls.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._crawlDepth = value.crawlDepth;
            this._maxContentSizePerPageInMegaBytes = value.maxContentSizePerPageInMegaBytes;
            this._maxLinksPerPage = value.maxLinksPerPage;
            this._maxUrlsPerMinuteCrawlRate = value.maxUrlsPerMinuteCrawlRate;
            this._urlExclusionPatterns = value.urlExclusionPatterns;
            this._urlInclusionPatterns = value.urlInclusionPatterns;
            this._authenticationConfiguration.internalValue = value.authenticationConfiguration;
            this._proxyConfiguration.internalValue = value.proxyConfiguration;
            this._urls.internalValue = value.urls;
        }
    }
    get crawlDepth() {
        return this.getNumberAttribute('crawl_depth');
    }
    set crawlDepth(value) {
        this._crawlDepth = value;
    }
    resetCrawlDepth() {
        this._crawlDepth = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get crawlDepthInput() {
        return this._crawlDepth;
    }
    get maxContentSizePerPageInMegaBytes() {
        return this.getNumberAttribute('max_content_size_per_page_in_mega_bytes');
    }
    set maxContentSizePerPageInMegaBytes(value) {
        this._maxContentSizePerPageInMegaBytes = value;
    }
    resetMaxContentSizePerPageInMegaBytes() {
        this._maxContentSizePerPageInMegaBytes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxContentSizePerPageInMegaBytesInput() {
        return this._maxContentSizePerPageInMegaBytes;
    }
    get maxLinksPerPage() {
        return this.getNumberAttribute('max_links_per_page');
    }
    set maxLinksPerPage(value) {
        this._maxLinksPerPage = value;
    }
    resetMaxLinksPerPage() {
        this._maxLinksPerPage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxLinksPerPageInput() {
        return this._maxLinksPerPage;
    }
    get maxUrlsPerMinuteCrawlRate() {
        return this.getNumberAttribute('max_urls_per_minute_crawl_rate');
    }
    set maxUrlsPerMinuteCrawlRate(value) {
        this._maxUrlsPerMinuteCrawlRate = value;
    }
    resetMaxUrlsPerMinuteCrawlRate() {
        this._maxUrlsPerMinuteCrawlRate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxUrlsPerMinuteCrawlRateInput() {
        return this._maxUrlsPerMinuteCrawlRate;
    }
    get urlExclusionPatterns() {
        return cdktf.Fn.tolist(this.getListAttribute('url_exclusion_patterns'));
    }
    set urlExclusionPatterns(value) {
        this._urlExclusionPatterns = value;
    }
    resetUrlExclusionPatterns() {
        this._urlExclusionPatterns = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get urlExclusionPatternsInput() {
        return this._urlExclusionPatterns;
    }
    get urlInclusionPatterns() {
        return cdktf.Fn.tolist(this.getListAttribute('url_inclusion_patterns'));
    }
    set urlInclusionPatterns(value) {
        this._urlInclusionPatterns = value;
    }
    resetUrlInclusionPatterns() {
        this._urlInclusionPatterns = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get urlInclusionPatternsInput() {
        return this._urlInclusionPatterns;
    }
    get authenticationConfiguration() {
        return this._authenticationConfiguration;
    }
    putAuthenticationConfiguration(value) {
        this._authenticationConfiguration.internalValue = value;
    }
    resetAuthenticationConfiguration() {
        this._authenticationConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authenticationConfigurationInput() {
        return this._authenticationConfiguration.internalValue;
    }
    get proxyConfiguration() {
        return this._proxyConfiguration;
    }
    putProxyConfiguration(value) {
        this._proxyConfiguration.internalValue = value;
    }
    resetProxyConfiguration() {
        this._proxyConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get proxyConfigurationInput() {
        return this._proxyConfiguration.internalValue;
    }
    get urls() {
        return this._urls;
    }
    putUrls(value) {
        this._urls.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get urlsInput() {
        return this._urls.internalValue;
    }
}
exports.KendraDataSourceConfigurationWebCrawlerConfigurationOutputReference = KendraDataSourceConfigurationWebCrawlerConfigurationOutputReference;
_l = JSII_RTTI_SYMBOL_1;
KendraDataSourceConfigurationWebCrawlerConfigurationOutputReference[_l] = { fqn: "@cdktf/provider-aws.kendraDataSource.KendraDataSourceConfigurationWebCrawlerConfigurationOutputReference", version: "19.15.0" };
function kendraDataSourceConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        s3_configuration: kendraDataSourceConfigurationS3ConfigurationToTerraform(struct.s3Configuration),
        web_crawler_configuration: kendraDataSourceConfigurationWebCrawlerConfigurationToTerraform(struct.webCrawlerConfiguration),
    };
}
exports.kendraDataSourceConfigurationToTerraform = kendraDataSourceConfigurationToTerraform;
function kendraDataSourceConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        s3_configuration: {
            value: kendraDataSourceConfigurationS3ConfigurationToHclTerraform(struct.s3Configuration),
            isBlock: true,
            type: "list",
            storageClassType: "KendraDataSourceConfigurationS3ConfigurationList",
        },
        web_crawler_configuration: {
            value: kendraDataSourceConfigurationWebCrawlerConfigurationToHclTerraform(struct.webCrawlerConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "KendraDataSourceConfigurationWebCrawlerConfigurationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kendraDataSourceConfigurationToHclTerraform = kendraDataSourceConfigurationToHclTerraform;
class KendraDataSourceConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // s3_configuration - computed: false, optional: true, required: false
        this._s3Configuration = new KendraDataSourceConfigurationS3ConfigurationOutputReference(this, "s3_configuration");
        // web_crawler_configuration - computed: false, optional: true, required: false
        this._webCrawlerConfiguration = new KendraDataSourceConfigurationWebCrawlerConfigurationOutputReference(this, "web_crawler_configuration");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._s3Configuration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3Configuration = this._s3Configuration?.internalValue;
        }
        if (this._webCrawlerConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.webCrawlerConfiguration = this._webCrawlerConfiguration?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._s3Configuration.internalValue = undefined;
            this._webCrawlerConfiguration.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._s3Configuration.internalValue = value.s3Configuration;
            this._webCrawlerConfiguration.internalValue = value.webCrawlerConfiguration;
        }
    }
    get s3Configuration() {
        return this._s3Configuration;
    }
    putS3Configuration(value) {
        this._s3Configuration.internalValue = value;
    }
    resetS3Configuration() {
        this._s3Configuration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3ConfigurationInput() {
        return this._s3Configuration.internalValue;
    }
    get webCrawlerConfiguration() {
        return this._webCrawlerConfiguration;
    }
    putWebCrawlerConfiguration(value) {
        this._webCrawlerConfiguration.internalValue = value;
    }
    resetWebCrawlerConfiguration() {
        this._webCrawlerConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get webCrawlerConfigurationInput() {
        return this._webCrawlerConfiguration.internalValue;
    }
}
exports.KendraDataSourceConfigurationOutputReference = KendraDataSourceConfigurationOutputReference;
_m = JSII_RTTI_SYMBOL_1;
KendraDataSourceConfigurationOutputReference[_m] = { fqn: "@cdktf/provider-aws.kendraDataSource.KendraDataSourceConfigurationOutputReference", version: "19.15.0" };
function kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsConditionConditionOnValueToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        date_value: cdktf.stringToTerraform(struct.dateValue),
        long_value: cdktf.numberToTerraform(struct.longValue),
        string_list_value: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.stringListValue),
        string_value: cdktf.stringToTerraform(struct.stringValue),
    };
}
exports.kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsConditionConditionOnValueToTerraform = kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsConditionConditionOnValueToTerraform;
function kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsConditionConditionOnValueToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        date_value: {
            value: cdktf.stringToHclTerraform(struct.dateValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        long_value: {
            value: cdktf.numberToHclTerraform(struct.longValue),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        string_list_value: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.stringListValue),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        string_value: {
            value: cdktf.stringToHclTerraform(struct.stringValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsConditionConditionOnValueToHclTerraform = kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsConditionConditionOnValueToHclTerraform;
class KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsConditionConditionOnValueOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dateValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dateValue = this._dateValue;
        }
        if (this._longValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.longValue = this._longValue;
        }
        if (this._stringListValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.stringListValue = this._stringListValue;
        }
        if (this._stringValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.stringValue = this._stringValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dateValue = undefined;
            this._longValue = undefined;
            this._stringListValue = undefined;
            this._stringValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dateValue = value.dateValue;
            this._longValue = value.longValue;
            this._stringListValue = value.stringListValue;
            this._stringValue = value.stringValue;
        }
    }
    get dateValue() {
        return this.getStringAttribute('date_value');
    }
    set dateValue(value) {
        this._dateValue = value;
    }
    resetDateValue() {
        this._dateValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dateValueInput() {
        return this._dateValue;
    }
    get longValue() {
        return this.getNumberAttribute('long_value');
    }
    set longValue(value) {
        this._longValue = value;
    }
    resetLongValue() {
        this._longValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get longValueInput() {
        return this._longValue;
    }
    get stringListValue() {
        return cdktf.Fn.tolist(this.getListAttribute('string_list_value'));
    }
    set stringListValue(value) {
        this._stringListValue = value;
    }
    resetStringListValue() {
        this._stringListValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stringListValueInput() {
        return this._stringListValue;
    }
    get stringValue() {
        return this.getStringAttribute('string_value');
    }
    set stringValue(value) {
        this._stringValue = value;
    }
    resetStringValue() {
        this._stringValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stringValueInput() {
        return this._stringValue;
    }
}
exports.KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsConditionConditionOnValueOutputReference = KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsConditionConditionOnValueOutputReference;
_o = JSII_RTTI_SYMBOL_1;
KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsConditionConditionOnValueOutputReference[_o] = { fqn: "@cdktf/provider-aws.kendraDataSource.KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsConditionConditionOnValueOutputReference", version: "19.15.0" };
function kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsConditionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        condition_document_attribute_key: cdktf.stringToTerraform(struct.conditionDocumentAttributeKey),
        operator: cdktf.stringToTerraform(struct.operator),
        condition_on_value: kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsConditionConditionOnValueToTerraform(struct.conditionOnValue),
    };
}
exports.kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsConditionToTerraform = kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsConditionToTerraform;
function kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsConditionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        condition_document_attribute_key: {
            value: cdktf.stringToHclTerraform(struct.conditionDocumentAttributeKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        operator: {
            value: cdktf.stringToHclTerraform(struct.operator),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        condition_on_value: {
            value: kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsConditionConditionOnValueToHclTerraform(struct.conditionOnValue),
            isBlock: true,
            type: "list",
            storageClassType: "KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsConditionConditionOnValueList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsConditionToHclTerraform = kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsConditionToHclTerraform;
class KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsConditionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // condition_on_value - computed: false, optional: true, required: false
        this._conditionOnValue = new KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsConditionConditionOnValueOutputReference(this, "condition_on_value");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._conditionDocumentAttributeKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.conditionDocumentAttributeKey = this._conditionDocumentAttributeKey;
        }
        if (this._operator !== undefined) {
            hasAnyValues = true;
            internalValueResult.operator = this._operator;
        }
        if (this._conditionOnValue?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.conditionOnValue = this._conditionOnValue?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._conditionDocumentAttributeKey = undefined;
            this._operator = undefined;
            this._conditionOnValue.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._conditionDocumentAttributeKey = value.conditionDocumentAttributeKey;
            this._operator = value.operator;
            this._conditionOnValue.internalValue = value.conditionOnValue;
        }
    }
    get conditionDocumentAttributeKey() {
        return this.getStringAttribute('condition_document_attribute_key');
    }
    set conditionDocumentAttributeKey(value) {
        this._conditionDocumentAttributeKey = value;
    }
    // Temporarily expose input value. Use with caution.
    get conditionDocumentAttributeKeyInput() {
        return this._conditionDocumentAttributeKey;
    }
    get operator() {
        return this.getStringAttribute('operator');
    }
    set operator(value) {
        this._operator = value;
    }
    // Temporarily expose input value. Use with caution.
    get operatorInput() {
        return this._operator;
    }
    get conditionOnValue() {
        return this._conditionOnValue;
    }
    putConditionOnValue(value) {
        this._conditionOnValue.internalValue = value;
    }
    resetConditionOnValue() {
        this._conditionOnValue.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conditionOnValueInput() {
        return this._conditionOnValue.internalValue;
    }
}
exports.KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsConditionOutputReference = KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsConditionOutputReference;
_p = JSII_RTTI_SYMBOL_1;
KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsConditionOutputReference[_p] = { fqn: "@cdktf/provider-aws.kendraDataSource.KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsConditionOutputReference", version: "19.15.0" };
function kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsTargetTargetDocumentAttributeValueToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        date_value: cdktf.stringToTerraform(struct.dateValue),
        long_value: cdktf.numberToTerraform(struct.longValue),
        string_list_value: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.stringListValue),
        string_value: cdktf.stringToTerraform(struct.stringValue),
    };
}
exports.kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsTargetTargetDocumentAttributeValueToTerraform = kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsTargetTargetDocumentAttributeValueToTerraform;
function kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsTargetTargetDocumentAttributeValueToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        date_value: {
            value: cdktf.stringToHclTerraform(struct.dateValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        long_value: {
            value: cdktf.numberToHclTerraform(struct.longValue),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        string_list_value: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.stringListValue),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        string_value: {
            value: cdktf.stringToHclTerraform(struct.stringValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsTargetTargetDocumentAttributeValueToHclTerraform = kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsTargetTargetDocumentAttributeValueToHclTerraform;
class KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsTargetTargetDocumentAttributeValueOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dateValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dateValue = this._dateValue;
        }
        if (this._longValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.longValue = this._longValue;
        }
        if (this._stringListValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.stringListValue = this._stringListValue;
        }
        if (this._stringValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.stringValue = this._stringValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dateValue = undefined;
            this._longValue = undefined;
            this._stringListValue = undefined;
            this._stringValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dateValue = value.dateValue;
            this._longValue = value.longValue;
            this._stringListValue = value.stringListValue;
            this._stringValue = value.stringValue;
        }
    }
    get dateValue() {
        return this.getStringAttribute('date_value');
    }
    set dateValue(value) {
        this._dateValue = value;
    }
    resetDateValue() {
        this._dateValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dateValueInput() {
        return this._dateValue;
    }
    get longValue() {
        return this.getNumberAttribute('long_value');
    }
    set longValue(value) {
        this._longValue = value;
    }
    resetLongValue() {
        this._longValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get longValueInput() {
        return this._longValue;
    }
    get stringListValue() {
        return cdktf.Fn.tolist(this.getListAttribute('string_list_value'));
    }
    set stringListValue(value) {
        this._stringListValue = value;
    }
    resetStringListValue() {
        this._stringListValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stringListValueInput() {
        return this._stringListValue;
    }
    get stringValue() {
        return this.getStringAttribute('string_value');
    }
    set stringValue(value) {
        this._stringValue = value;
    }
    resetStringValue() {
        this._stringValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stringValueInput() {
        return this._stringValue;
    }
}
exports.KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsTargetTargetDocumentAttributeValueOutputReference = KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsTargetTargetDocumentAttributeValueOutputReference;
_q = JSII_RTTI_SYMBOL_1;
KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsTargetTargetDocumentAttributeValueOutputReference[_q] = { fqn: "@cdktf/provider-aws.kendraDataSource.KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsTargetTargetDocumentAttributeValueOutputReference", version: "19.15.0" };
function kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsTargetToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        target_document_attribute_key: cdktf.stringToTerraform(struct.targetDocumentAttributeKey),
        target_document_attribute_value_deletion: cdktf.booleanToTerraform(struct.targetDocumentAttributeValueDeletion),
        target_document_attribute_value: kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsTargetTargetDocumentAttributeValueToTerraform(struct.targetDocumentAttributeValue),
    };
}
exports.kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsTargetToTerraform = kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsTargetToTerraform;
function kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsTargetToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        target_document_attribute_key: {
            value: cdktf.stringToHclTerraform(struct.targetDocumentAttributeKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        target_document_attribute_value_deletion: {
            value: cdktf.booleanToHclTerraform(struct.targetDocumentAttributeValueDeletion),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        target_document_attribute_value: {
            value: kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsTargetTargetDocumentAttributeValueToHclTerraform(struct.targetDocumentAttributeValue),
            isBlock: true,
            type: "list",
            storageClassType: "KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsTargetTargetDocumentAttributeValueList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsTargetToHclTerraform = kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsTargetToHclTerraform;
class KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsTargetOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // target_document_attribute_value - computed: false, optional: true, required: false
        this._targetDocumentAttributeValue = new KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsTargetTargetDocumentAttributeValueOutputReference(this, "target_document_attribute_value");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._targetDocumentAttributeKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetDocumentAttributeKey = this._targetDocumentAttributeKey;
        }
        if (this._targetDocumentAttributeValueDeletion !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetDocumentAttributeValueDeletion = this._targetDocumentAttributeValueDeletion;
        }
        if (this._targetDocumentAttributeValue?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetDocumentAttributeValue = this._targetDocumentAttributeValue?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._targetDocumentAttributeKey = undefined;
            this._targetDocumentAttributeValueDeletion = undefined;
            this._targetDocumentAttributeValue.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._targetDocumentAttributeKey = value.targetDocumentAttributeKey;
            this._targetDocumentAttributeValueDeletion = value.targetDocumentAttributeValueDeletion;
            this._targetDocumentAttributeValue.internalValue = value.targetDocumentAttributeValue;
        }
    }
    get targetDocumentAttributeKey() {
        return this.getStringAttribute('target_document_attribute_key');
    }
    set targetDocumentAttributeKey(value) {
        this._targetDocumentAttributeKey = value;
    }
    resetTargetDocumentAttributeKey() {
        this._targetDocumentAttributeKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetDocumentAttributeKeyInput() {
        return this._targetDocumentAttributeKey;
    }
    get targetDocumentAttributeValueDeletion() {
        return this.getBooleanAttribute('target_document_attribute_value_deletion');
    }
    set targetDocumentAttributeValueDeletion(value) {
        this._targetDocumentAttributeValueDeletion = value;
    }
    resetTargetDocumentAttributeValueDeletion() {
        this._targetDocumentAttributeValueDeletion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetDocumentAttributeValueDeletionInput() {
        return this._targetDocumentAttributeValueDeletion;
    }
    get targetDocumentAttributeValue() {
        return this._targetDocumentAttributeValue;
    }
    putTargetDocumentAttributeValue(value) {
        this._targetDocumentAttributeValue.internalValue = value;
    }
    resetTargetDocumentAttributeValue() {
        this._targetDocumentAttributeValue.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetDocumentAttributeValueInput() {
        return this._targetDocumentAttributeValue.internalValue;
    }
}
exports.KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsTargetOutputReference = KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsTargetOutputReference;
_r = JSII_RTTI_SYMBOL_1;
KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsTargetOutputReference[_r] = { fqn: "@cdktf/provider-aws.kendraDataSource.KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsTargetOutputReference", version: "19.15.0" };
function kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        document_content_deletion: cdktf.booleanToTerraform(struct.documentContentDeletion),
        condition: kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsConditionToTerraform(struct.condition),
        target: kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsTargetToTerraform(struct.target),
    };
}
exports.kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsToTerraform = kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsToTerraform;
function kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        document_content_deletion: {
            value: cdktf.booleanToHclTerraform(struct.documentContentDeletion),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        condition: {
            value: kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsConditionToHclTerraform(struct.condition),
            isBlock: true,
            type: "list",
            storageClassType: "KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsConditionList",
        },
        target: {
            value: kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsTargetToHclTerraform(struct.target),
            isBlock: true,
            type: "list",
            storageClassType: "KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsTargetList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsToHclTerraform = kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsToHclTerraform;
class KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // condition - computed: false, optional: true, required: false
        this._condition = new KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsConditionOutputReference(this, "condition");
        // target - computed: false, optional: true, required: false
        this._target = new KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsTargetOutputReference(this, "target");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._documentContentDeletion !== undefined) {
            hasAnyValues = true;
            internalValueResult.documentContentDeletion = this._documentContentDeletion;
        }
        if (this._condition?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.condition = this._condition?.internalValue;
        }
        if (this._target?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.target = this._target?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._documentContentDeletion = undefined;
            this._condition.internalValue = undefined;
            this._target.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._documentContentDeletion = value.documentContentDeletion;
            this._condition.internalValue = value.condition;
            this._target.internalValue = value.target;
        }
    }
    get documentContentDeletion() {
        return this.getBooleanAttribute('document_content_deletion');
    }
    set documentContentDeletion(value) {
        this._documentContentDeletion = value;
    }
    resetDocumentContentDeletion() {
        this._documentContentDeletion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get documentContentDeletionInput() {
        return this._documentContentDeletion;
    }
    get condition() {
        return this._condition;
    }
    putCondition(value) {
        this._condition.internalValue = value;
    }
    resetCondition() {
        this._condition.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conditionInput() {
        return this._condition.internalValue;
    }
    get target() {
        return this._target;
    }
    putTarget(value) {
        this._target.internalValue = value;
    }
    resetTarget() {
        this._target.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetInput() {
        return this._target.internalValue;
    }
}
exports.KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsOutputReference = KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsOutputReference;
_s = JSII_RTTI_SYMBOL_1;
KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsOutputReference[_s] = { fqn: "@cdktf/provider-aws.kendraDataSource.KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsOutputReference", version: "19.15.0" };
class KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsList = KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsList;
_t = JSII_RTTI_SYMBOL_1;
KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsList[_t] = { fqn: "@cdktf/provider-aws.kendraDataSource.KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsList", version: "19.15.0" };
function kendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationInvocationConditionConditionOnValueToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        date_value: cdktf.stringToTerraform(struct.dateValue),
        long_value: cdktf.numberToTerraform(struct.longValue),
        string_list_value: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.stringListValue),
        string_value: cdktf.stringToTerraform(struct.stringValue),
    };
}
exports.kendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationInvocationConditionConditionOnValueToTerraform = kendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationInvocationConditionConditionOnValueToTerraform;
function kendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationInvocationConditionConditionOnValueToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        date_value: {
            value: cdktf.stringToHclTerraform(struct.dateValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        long_value: {
            value: cdktf.numberToHclTerraform(struct.longValue),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        string_list_value: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.stringListValue),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        string_value: {
            value: cdktf.stringToHclTerraform(struct.stringValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationInvocationConditionConditionOnValueToHclTerraform = kendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationInvocationConditionConditionOnValueToHclTerraform;
class KendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationInvocationConditionConditionOnValueOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dateValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dateValue = this._dateValue;
        }
        if (this._longValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.longValue = this._longValue;
        }
        if (this._stringListValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.stringListValue = this._stringListValue;
        }
        if (this._stringValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.stringValue = this._stringValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dateValue = undefined;
            this._longValue = undefined;
            this._stringListValue = undefined;
            this._stringValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dateValue = value.dateValue;
            this._longValue = value.longValue;
            this._stringListValue = value.stringListValue;
            this._stringValue = value.stringValue;
        }
    }
    get dateValue() {
        return this.getStringAttribute('date_value');
    }
    set dateValue(value) {
        this._dateValue = value;
    }
    resetDateValue() {
        this._dateValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dateValueInput() {
        return this._dateValue;
    }
    get longValue() {
        return this.getNumberAttribute('long_value');
    }
    set longValue(value) {
        this._longValue = value;
    }
    resetLongValue() {
        this._longValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get longValueInput() {
        return this._longValue;
    }
    get stringListValue() {
        return cdktf.Fn.tolist(this.getListAttribute('string_list_value'));
    }
    set stringListValue(value) {
        this._stringListValue = value;
    }
    resetStringListValue() {
        this._stringListValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stringListValueInput() {
        return this._stringListValue;
    }
    get stringValue() {
        return this.getStringAttribute('string_value');
    }
    set stringValue(value) {
        this._stringValue = value;
    }
    resetStringValue() {
        this._stringValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stringValueInput() {
        return this._stringValue;
    }
}
exports.KendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationInvocationConditionConditionOnValueOutputReference = KendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationInvocationConditionConditionOnValueOutputReference;
_u = JSII_RTTI_SYMBOL_1;
KendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationInvocationConditionConditionOnValueOutputReference[_u] = { fqn: "@cdktf/provider-aws.kendraDataSource.KendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationInvocationConditionConditionOnValueOutputReference", version: "19.15.0" };
function kendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationInvocationConditionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        condition_document_attribute_key: cdktf.stringToTerraform(struct.conditionDocumentAttributeKey),
        operator: cdktf.stringToTerraform(struct.operator),
        condition_on_value: kendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationInvocationConditionConditionOnValueToTerraform(struct.conditionOnValue),
    };
}
exports.kendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationInvocationConditionToTerraform = kendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationInvocationConditionToTerraform;
function kendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationInvocationConditionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        condition_document_attribute_key: {
            value: cdktf.stringToHclTerraform(struct.conditionDocumentAttributeKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        operator: {
            value: cdktf.stringToHclTerraform(struct.operator),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        condition_on_value: {
            value: kendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationInvocationConditionConditionOnValueToHclTerraform(struct.conditionOnValue),
            isBlock: true,
            type: "list",
            storageClassType: "KendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationInvocationConditionConditionOnValueList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationInvocationConditionToHclTerraform = kendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationInvocationConditionToHclTerraform;
class KendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationInvocationConditionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // condition_on_value - computed: false, optional: true, required: false
        this._conditionOnValue = new KendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationInvocationConditionConditionOnValueOutputReference(this, "condition_on_value");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._conditionDocumentAttributeKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.conditionDocumentAttributeKey = this._conditionDocumentAttributeKey;
        }
        if (this._operator !== undefined) {
            hasAnyValues = true;
            internalValueResult.operator = this._operator;
        }
        if (this._conditionOnValue?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.conditionOnValue = this._conditionOnValue?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._conditionDocumentAttributeKey = undefined;
            this._operator = undefined;
            this._conditionOnValue.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._conditionDocumentAttributeKey = value.conditionDocumentAttributeKey;
            this._operator = value.operator;
            this._conditionOnValue.internalValue = value.conditionOnValue;
        }
    }
    get conditionDocumentAttributeKey() {
        return this.getStringAttribute('condition_document_attribute_key');
    }
    set conditionDocumentAttributeKey(value) {
        this._conditionDocumentAttributeKey = value;
    }
    // Temporarily expose input value. Use with caution.
    get conditionDocumentAttributeKeyInput() {
        return this._conditionDocumentAttributeKey;
    }
    get operator() {
        return this.getStringAttribute('operator');
    }
    set operator(value) {
        this._operator = value;
    }
    // Temporarily expose input value. Use with caution.
    get operatorInput() {
        return this._operator;
    }
    get conditionOnValue() {
        return this._conditionOnValue;
    }
    putConditionOnValue(value) {
        this._conditionOnValue.internalValue = value;
    }
    resetConditionOnValue() {
        this._conditionOnValue.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conditionOnValueInput() {
        return this._conditionOnValue.internalValue;
    }
}
exports.KendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationInvocationConditionOutputReference = KendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationInvocationConditionOutputReference;
_v = JSII_RTTI_SYMBOL_1;
KendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationInvocationConditionOutputReference[_v] = { fqn: "@cdktf/provider-aws.kendraDataSource.KendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationInvocationConditionOutputReference", version: "19.15.0" };
function kendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        lambda_arn: cdktf.stringToTerraform(struct.lambdaArn),
        s3_bucket: cdktf.stringToTerraform(struct.s3Bucket),
        invocation_condition: kendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationInvocationConditionToTerraform(struct.invocationCondition),
    };
}
exports.kendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationToTerraform = kendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationToTerraform;
function kendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        lambda_arn: {
            value: cdktf.stringToHclTerraform(struct.lambdaArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        s3_bucket: {
            value: cdktf.stringToHclTerraform(struct.s3Bucket),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        invocation_condition: {
            value: kendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationInvocationConditionToHclTerraform(struct.invocationCondition),
            isBlock: true,
            type: "list",
            storageClassType: "KendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationInvocationConditionList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationToHclTerraform = kendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationToHclTerraform;
class KendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // invocation_condition - computed: false, optional: true, required: false
        this._invocationCondition = new KendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationInvocationConditionOutputReference(this, "invocation_condition");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._lambdaArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.lambdaArn = this._lambdaArn;
        }
        if (this._s3Bucket !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3Bucket = this._s3Bucket;
        }
        if (this._invocationCondition?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.invocationCondition = this._invocationCondition?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._lambdaArn = undefined;
            this._s3Bucket = undefined;
            this._invocationCondition.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._lambdaArn = value.lambdaArn;
            this._s3Bucket = value.s3Bucket;
            this._invocationCondition.internalValue = value.invocationCondition;
        }
    }
    get lambdaArn() {
        return this.getStringAttribute('lambda_arn');
    }
    set lambdaArn(value) {
        this._lambdaArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get lambdaArnInput() {
        return this._lambdaArn;
    }
    get s3Bucket() {
        return this.getStringAttribute('s3_bucket');
    }
    set s3Bucket(value) {
        this._s3Bucket = value;
    }
    // Temporarily expose input value. Use with caution.
    get s3BucketInput() {
        return this._s3Bucket;
    }
    get invocationCondition() {
        return this._invocationCondition;
    }
    putInvocationCondition(value) {
        this._invocationCondition.internalValue = value;
    }
    resetInvocationCondition() {
        this._invocationCondition.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get invocationConditionInput() {
        return this._invocationCondition.internalValue;
    }
}
exports.KendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationOutputReference = KendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationOutputReference;
_w = JSII_RTTI_SYMBOL_1;
KendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationOutputReference[_w] = { fqn: "@cdktf/provider-aws.kendraDataSource.KendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationOutputReference", version: "19.15.0" };
function kendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationInvocationConditionConditionOnValueToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        date_value: cdktf.stringToTerraform(struct.dateValue),
        long_value: cdktf.numberToTerraform(struct.longValue),
        string_list_value: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.stringListValue),
        string_value: cdktf.stringToTerraform(struct.stringValue),
    };
}
exports.kendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationInvocationConditionConditionOnValueToTerraform = kendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationInvocationConditionConditionOnValueToTerraform;
function kendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationInvocationConditionConditionOnValueToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        date_value: {
            value: cdktf.stringToHclTerraform(struct.dateValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        long_value: {
            value: cdktf.numberToHclTerraform(struct.longValue),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        string_list_value: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.stringListValue),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        string_value: {
            value: cdktf.stringToHclTerraform(struct.stringValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationInvocationConditionConditionOnValueToHclTerraform = kendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationInvocationConditionConditionOnValueToHclTerraform;
class KendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationInvocationConditionConditionOnValueOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dateValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dateValue = this._dateValue;
        }
        if (this._longValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.longValue = this._longValue;
        }
        if (this._stringListValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.stringListValue = this._stringListValue;
        }
        if (this._stringValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.stringValue = this._stringValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dateValue = undefined;
            this._longValue = undefined;
            this._stringListValue = undefined;
            this._stringValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dateValue = value.dateValue;
            this._longValue = value.longValue;
            this._stringListValue = value.stringListValue;
            this._stringValue = value.stringValue;
        }
    }
    get dateValue() {
        return this.getStringAttribute('date_value');
    }
    set dateValue(value) {
        this._dateValue = value;
    }
    resetDateValue() {
        this._dateValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dateValueInput() {
        return this._dateValue;
    }
    get longValue() {
        return this.getNumberAttribute('long_value');
    }
    set longValue(value) {
        this._longValue = value;
    }
    resetLongValue() {
        this._longValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get longValueInput() {
        return this._longValue;
    }
    get stringListValue() {
        return cdktf.Fn.tolist(this.getListAttribute('string_list_value'));
    }
    set stringListValue(value) {
        this._stringListValue = value;
    }
    resetStringListValue() {
        this._stringListValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stringListValueInput() {
        return this._stringListValue;
    }
    get stringValue() {
        return this.getStringAttribute('string_value');
    }
    set stringValue(value) {
        this._stringValue = value;
    }
    resetStringValue() {
        this._stringValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stringValueInput() {
        return this._stringValue;
    }
}
exports.KendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationInvocationConditionConditionOnValueOutputReference = KendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationInvocationConditionConditionOnValueOutputReference;
_x = JSII_RTTI_SYMBOL_1;
KendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationInvocationConditionConditionOnValueOutputReference[_x] = { fqn: "@cdktf/provider-aws.kendraDataSource.KendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationInvocationConditionConditionOnValueOutputReference", version: "19.15.0" };
function kendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationInvocationConditionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        condition_document_attribute_key: cdktf.stringToTerraform(struct.conditionDocumentAttributeKey),
        operator: cdktf.stringToTerraform(struct.operator),
        condition_on_value: kendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationInvocationConditionConditionOnValueToTerraform(struct.conditionOnValue),
    };
}
exports.kendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationInvocationConditionToTerraform = kendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationInvocationConditionToTerraform;
function kendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationInvocationConditionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        condition_document_attribute_key: {
            value: cdktf.stringToHclTerraform(struct.conditionDocumentAttributeKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        operator: {
            value: cdktf.stringToHclTerraform(struct.operator),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        condition_on_value: {
            value: kendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationInvocationConditionConditionOnValueToHclTerraform(struct.conditionOnValue),
            isBlock: true,
            type: "list",
            storageClassType: "KendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationInvocationConditionConditionOnValueList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationInvocationConditionToHclTerraform = kendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationInvocationConditionToHclTerraform;
class KendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationInvocationConditionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // condition_on_value - computed: false, optional: true, required: false
        this._conditionOnValue = new KendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationInvocationConditionConditionOnValueOutputReference(this, "condition_on_value");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._conditionDocumentAttributeKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.conditionDocumentAttributeKey = this._conditionDocumentAttributeKey;
        }
        if (this._operator !== undefined) {
            hasAnyValues = true;
            internalValueResult.operator = this._operator;
        }
        if (this._conditionOnValue?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.conditionOnValue = this._conditionOnValue?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._conditionDocumentAttributeKey = undefined;
            this._operator = undefined;
            this._conditionOnValue.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._conditionDocumentAttributeKey = value.conditionDocumentAttributeKey;
            this._operator = value.operator;
            this._conditionOnValue.internalValue = value.conditionOnValue;
        }
    }
    get conditionDocumentAttributeKey() {
        return this.getStringAttribute('condition_document_attribute_key');
    }
    set conditionDocumentAttributeKey(value) {
        this._conditionDocumentAttributeKey = value;
    }
    // Temporarily expose input value. Use with caution.
    get conditionDocumentAttributeKeyInput() {
        return this._conditionDocumentAttributeKey;
    }
    get operator() {
        return this.getStringAttribute('operator');
    }
    set operator(value) {
        this._operator = value;
    }
    // Temporarily expose input value. Use with caution.
    get operatorInput() {
        return this._operator;
    }
    get conditionOnValue() {
        return this._conditionOnValue;
    }
    putConditionOnValue(value) {
        this._conditionOnValue.internalValue = value;
    }
    resetConditionOnValue() {
        this._conditionOnValue.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conditionOnValueInput() {
        return this._conditionOnValue.internalValue;
    }
}
exports.KendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationInvocationConditionOutputReference = KendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationInvocationConditionOutputReference;
_y = JSII_RTTI_SYMBOL_1;
KendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationInvocationConditionOutputReference[_y] = { fqn: "@cdktf/provider-aws.kendraDataSource.KendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationInvocationConditionOutputReference", version: "19.15.0" };
function kendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        lambda_arn: cdktf.stringToTerraform(struct.lambdaArn),
        s3_bucket: cdktf.stringToTerraform(struct.s3Bucket),
        invocation_condition: kendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationInvocationConditionToTerraform(struct.invocationCondition),
    };
}
exports.kendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationToTerraform = kendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationToTerraform;
function kendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        lambda_arn: {
            value: cdktf.stringToHclTerraform(struct.lambdaArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        s3_bucket: {
            value: cdktf.stringToHclTerraform(struct.s3Bucket),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        invocation_condition: {
            value: kendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationInvocationConditionToHclTerraform(struct.invocationCondition),
            isBlock: true,
            type: "list",
            storageClassType: "KendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationInvocationConditionList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationToHclTerraform = kendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationToHclTerraform;
class KendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // invocation_condition - computed: false, optional: true, required: false
        this._invocationCondition = new KendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationInvocationConditionOutputReference(this, "invocation_condition");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._lambdaArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.lambdaArn = this._lambdaArn;
        }
        if (this._s3Bucket !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3Bucket = this._s3Bucket;
        }
        if (this._invocationCondition?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.invocationCondition = this._invocationCondition?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._lambdaArn = undefined;
            this._s3Bucket = undefined;
            this._invocationCondition.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._lambdaArn = value.lambdaArn;
            this._s3Bucket = value.s3Bucket;
            this._invocationCondition.internalValue = value.invocationCondition;
        }
    }
    get lambdaArn() {
        return this.getStringAttribute('lambda_arn');
    }
    set lambdaArn(value) {
        this._lambdaArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get lambdaArnInput() {
        return this._lambdaArn;
    }
    get s3Bucket() {
        return this.getStringAttribute('s3_bucket');
    }
    set s3Bucket(value) {
        this._s3Bucket = value;
    }
    // Temporarily expose input value. Use with caution.
    get s3BucketInput() {
        return this._s3Bucket;
    }
    get invocationCondition() {
        return this._invocationCondition;
    }
    putInvocationCondition(value) {
        this._invocationCondition.internalValue = value;
    }
    resetInvocationCondition() {
        this._invocationCondition.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get invocationConditionInput() {
        return this._invocationCondition.internalValue;
    }
}
exports.KendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationOutputReference = KendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationOutputReference;
_z = JSII_RTTI_SYMBOL_1;
KendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationOutputReference[_z] = { fqn: "@cdktf/provider-aws.kendraDataSource.KendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationOutputReference", version: "19.15.0" };
function kendraDataSourceCustomDocumentEnrichmentConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        inline_configurations: cdktf.listMapper(kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsToTerraform, true)(struct.inlineConfigurations),
        post_extraction_hook_configuration: kendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationToTerraform(struct.postExtractionHookConfiguration),
        pre_extraction_hook_configuration: kendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationToTerraform(struct.preExtractionHookConfiguration),
    };
}
exports.kendraDataSourceCustomDocumentEnrichmentConfigurationToTerraform = kendraDataSourceCustomDocumentEnrichmentConfigurationToTerraform;
function kendraDataSourceCustomDocumentEnrichmentConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        role_arn: {
            value: cdktf.stringToHclTerraform(struct.roleArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        inline_configurations: {
            value: cdktf.listMapperHcl(kendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsToHclTerraform, true)(struct.inlineConfigurations),
            isBlock: true,
            type: "set",
            storageClassType: "KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsList",
        },
        post_extraction_hook_configuration: {
            value: kendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationToHclTerraform(struct.postExtractionHookConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "KendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationList",
        },
        pre_extraction_hook_configuration: {
            value: kendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationToHclTerraform(struct.preExtractionHookConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "KendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kendraDataSourceCustomDocumentEnrichmentConfigurationToHclTerraform = kendraDataSourceCustomDocumentEnrichmentConfigurationToHclTerraform;
class KendraDataSourceCustomDocumentEnrichmentConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // inline_configurations - computed: false, optional: true, required: false
        this._inlineConfigurations = new KendraDataSourceCustomDocumentEnrichmentConfigurationInlineConfigurationsList(this, "inline_configurations", true);
        // post_extraction_hook_configuration - computed: false, optional: true, required: false
        this._postExtractionHookConfiguration = new KendraDataSourceCustomDocumentEnrichmentConfigurationPostExtractionHookConfigurationOutputReference(this, "post_extraction_hook_configuration");
        // pre_extraction_hook_configuration - computed: false, optional: true, required: false
        this._preExtractionHookConfiguration = new KendraDataSourceCustomDocumentEnrichmentConfigurationPreExtractionHookConfigurationOutputReference(this, "pre_extraction_hook_configuration");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._roleArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.roleArn = this._roleArn;
        }
        if (this._inlineConfigurations?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.inlineConfigurations = this._inlineConfigurations?.internalValue;
        }
        if (this._postExtractionHookConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.postExtractionHookConfiguration = this._postExtractionHookConfiguration?.internalValue;
        }
        if (this._preExtractionHookConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.preExtractionHookConfiguration = this._preExtractionHookConfiguration?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._roleArn = undefined;
            this._inlineConfigurations.internalValue = undefined;
            this._postExtractionHookConfiguration.internalValue = undefined;
            this._preExtractionHookConfiguration.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._roleArn = value.roleArn;
            this._inlineConfigurations.internalValue = value.inlineConfigurations;
            this._postExtractionHookConfiguration.internalValue = value.postExtractionHookConfiguration;
            this._preExtractionHookConfiguration.internalValue = value.preExtractionHookConfiguration;
        }
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    resetRoleArn() {
        this._roleArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get inlineConfigurations() {
        return this._inlineConfigurations;
    }
    putInlineConfigurations(value) {
        this._inlineConfigurations.internalValue = value;
    }
    resetInlineConfigurations() {
        this._inlineConfigurations.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inlineConfigurationsInput() {
        return this._inlineConfigurations.internalValue;
    }
    get postExtractionHookConfiguration() {
        return this._postExtractionHookConfiguration;
    }
    putPostExtractionHookConfiguration(value) {
        this._postExtractionHookConfiguration.internalValue = value;
    }
    resetPostExtractionHookConfiguration() {
        this._postExtractionHookConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get postExtractionHookConfigurationInput() {
        return this._postExtractionHookConfiguration.internalValue;
    }
    get preExtractionHookConfiguration() {
        return this._preExtractionHookConfiguration;
    }
    putPreExtractionHookConfiguration(value) {
        this._preExtractionHookConfiguration.internalValue = value;
    }
    resetPreExtractionHookConfiguration() {
        this._preExtractionHookConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get preExtractionHookConfigurationInput() {
        return this._preExtractionHookConfiguration.internalValue;
    }
}
exports.KendraDataSourceCustomDocumentEnrichmentConfigurationOutputReference = KendraDataSourceCustomDocumentEnrichmentConfigurationOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
KendraDataSourceCustomDocumentEnrichmentConfigurationOutputReference[_0] = { fqn: "@cdktf/provider-aws.kendraDataSource.KendraDataSourceCustomDocumentEnrichmentConfigurationOutputReference", version: "19.15.0" };
function kendraDataSourceTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.kendraDataSourceTimeoutsToTerraform = kendraDataSourceTimeoutsToTerraform;
function kendraDataSourceTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.kendraDataSourceTimeoutsToHclTerraform = kendraDataSourceTimeoutsToHclTerraform;
class KendraDataSourceTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.KendraDataSourceTimeoutsOutputReference = KendraDataSourceTimeoutsOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
KendraDataSourceTimeoutsOutputReference[_1] = { fqn: "@cdktf/provider-aws.kendraDataSource.KendraDataSourceTimeoutsOutputReference", version: "19.15.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/kendra_data_source aws_kendra_data_source}
*/
class KendraDataSource extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a KendraDataSource resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the KendraDataSource to import
    * @param importFromId The id of the existing KendraDataSource that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/kendra_data_source#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the KendraDataSource to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_kendra_data_source", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/kendra_data_source aws_kendra_data_source} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options KendraDataSourceConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_kendra_data_source',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // configuration - computed: false, optional: true, required: false
        this._configuration = new KendraDataSourceConfigurationOutputReference(this, "configuration");
        // custom_document_enrichment_configuration - computed: false, optional: true, required: false
        this._customDocumentEnrichmentConfiguration = new KendraDataSourceCustomDocumentEnrichmentConfigurationOutputReference(this, "custom_document_enrichment_configuration");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new KendraDataSourceTimeoutsOutputReference(this, "timeouts");
        this._description = config.description;
        this._id = config.id;
        this._indexId = config.indexId;
        this._languageCode = config.languageCode;
        this._name = config.name;
        this._roleArn = config.roleArn;
        this._schedule = config.schedule;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._type = config.type;
        this._configuration.internalValue = config.configuration;
        this._customDocumentEnrichmentConfiguration.internalValue = config.customDocumentEnrichmentConfiguration;
        this._timeouts.internalValue = config.timeouts;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // created_at - computed: true, optional: false, required: false
    get createdAt() {
        return this.getStringAttribute('created_at');
    }
    // data_source_id - computed: true, optional: false, required: false
    get dataSourceId() {
        return this.getStringAttribute('data_source_id');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    // error_message - computed: true, optional: false, required: false
    get errorMessage() {
        return this.getStringAttribute('error_message');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get indexId() {
        return this.getStringAttribute('index_id');
    }
    set indexId(value) {
        this._indexId = value;
    }
    // Temporarily expose input value. Use with caution.
    get indexIdInput() {
        return this._indexId;
    }
    get languageCode() {
        return this.getStringAttribute('language_code');
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    resetLanguageCode() {
        this._languageCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get languageCodeInput() {
        return this._languageCode;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    resetRoleArn() {
        this._roleArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get schedule() {
        return this.getStringAttribute('schedule');
    }
    set schedule(value) {
        this._schedule = value;
    }
    resetSchedule() {
        this._schedule = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scheduleInput() {
        return this._schedule;
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.getStringAttribute('status');
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    // updated_at - computed: true, optional: false, required: false
    get updatedAt() {
        return this.getStringAttribute('updated_at');
    }
    get configuration() {
        return this._configuration;
    }
    putConfiguration(value) {
        this._configuration.internalValue = value;
    }
    resetConfiguration() {
        this._configuration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get configurationInput() {
        return this._configuration.internalValue;
    }
    get customDocumentEnrichmentConfiguration() {
        return this._customDocumentEnrichmentConfiguration;
    }
    putCustomDocumentEnrichmentConfiguration(value) {
        this._customDocumentEnrichmentConfiguration.internalValue = value;
    }
    resetCustomDocumentEnrichmentConfiguration() {
        this._customDocumentEnrichmentConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customDocumentEnrichmentConfigurationInput() {
        return this._customDocumentEnrichmentConfiguration.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            id: cdktf.stringToTerraform(this._id),
            index_id: cdktf.stringToTerraform(this._indexId),
            language_code: cdktf.stringToTerraform(this._languageCode),
            name: cdktf.stringToTerraform(this._name),
            role_arn: cdktf.stringToTerraform(this._roleArn),
            schedule: cdktf.stringToTerraform(this._schedule),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            type: cdktf.stringToTerraform(this._type),
            configuration: kendraDataSourceConfigurationToTerraform(this._configuration.internalValue),
            custom_document_enrichment_configuration: kendraDataSourceCustomDocumentEnrichmentConfigurationToTerraform(this._customDocumentEnrichmentConfiguration.internalValue),
            timeouts: kendraDataSourceTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            description: {
                value: cdktf.stringToHclTerraform(this._description),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            index_id: {
                value: cdktf.stringToHclTerraform(this._indexId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            language_code: {
                value: cdktf.stringToHclTerraform(this._languageCode),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            role_arn: {
                value: cdktf.stringToHclTerraform(this._roleArn),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            schedule: {
                value: cdktf.stringToHclTerraform(this._schedule),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            tags: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tags),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            tags_all: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tagsAll),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            type: {
                value: cdktf.stringToHclTerraform(this._type),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            configuration: {
                value: kendraDataSourceConfigurationToHclTerraform(this._configuration.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "KendraDataSourceConfigurationList",
            },
            custom_document_enrichment_configuration: {
                value: kendraDataSourceCustomDocumentEnrichmentConfigurationToHclTerraform(this._customDocumentEnrichmentConfiguration.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "KendraDataSourceCustomDocumentEnrichmentConfigurationList",
            },
            timeouts: {
                value: kendraDataSourceTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "KendraDataSourceTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.KendraDataSource = KendraDataSource;
_2 = JSII_RTTI_SYMBOL_1;
KendraDataSource[_2] = { fqn: "@cdktf/provider-aws.kendraDataSource.KendraDataSource", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
KendraDataSource.tfResourceType = "aws_kendra_data_source";
//# sourceMappingURL=data:application/json;base64,