"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Lexv2ModelsIntent = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */
// generated from terraform resource schema
const index_structs_1 = require("./index-structs");
__exportStar(require("./index-structs"), exports);
const cdktf = require("cdktf");
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/lexv2models_intent aws_lexv2models_intent}
*/
class Lexv2ModelsIntent extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a Lexv2ModelsIntent resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the Lexv2ModelsIntent to import
    * @param importFromId The id of the existing Lexv2ModelsIntent that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/lexv2models_intent#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the Lexv2ModelsIntent to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_lexv2models_intent", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/lexv2models_intent aws_lexv2models_intent} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options Lexv2ModelsIntentConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_lexv2models_intent',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // closing_setting - computed: false, optional: true, required: false
        this._closingSetting = new index_structs_1.Lexv2ModelsIntentClosingSettingList(this, "closing_setting", false);
        // confirmation_setting - computed: false, optional: true, required: false
        this._confirmationSetting = new index_structs_1.Lexv2ModelsIntentConfirmationSettingList(this, "confirmation_setting", false);
        // dialog_code_hook - computed: false, optional: true, required: false
        this._dialogCodeHook = new index_structs_1.Lexv2ModelsIntentDialogCodeHookList(this, "dialog_code_hook", false);
        // fulfillment_code_hook - computed: false, optional: true, required: false
        this._fulfillmentCodeHook = new index_structs_1.Lexv2ModelsIntentFulfillmentCodeHookList(this, "fulfillment_code_hook", false);
        // initial_response_setting - computed: false, optional: true, required: false
        this._initialResponseSetting = new index_structs_1.Lexv2ModelsIntentInitialResponseSettingList(this, "initial_response_setting", false);
        // input_context - computed: false, optional: true, required: false
        this._inputContext = new index_structs_1.Lexv2ModelsIntentInputContextList(this, "input_context", false);
        // kendra_configuration - computed: false, optional: true, required: false
        this._kendraConfiguration = new index_structs_1.Lexv2ModelsIntentKendraConfigurationList(this, "kendra_configuration", false);
        // output_context - computed: false, optional: true, required: false
        this._outputContext = new index_structs_1.Lexv2ModelsIntentOutputContextList(this, "output_context", false);
        // sample_utterance - computed: false, optional: true, required: false
        this._sampleUtterance = new index_structs_1.Lexv2ModelsIntentSampleUtteranceList(this, "sample_utterance", false);
        // slot_priority - computed: false, optional: true, required: false
        this._slotPriority = new index_structs_1.Lexv2ModelsIntentSlotPriorityList(this, "slot_priority", false);
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new index_structs_1.Lexv2ModelsIntentTimeoutsOutputReference(this, "timeouts");
        this._botId = config.botId;
        this._botVersion = config.botVersion;
        this._description = config.description;
        this._localeId = config.localeId;
        this._name = config.name;
        this._parentIntentSignature = config.parentIntentSignature;
        this._closingSetting.internalValue = config.closingSetting;
        this._confirmationSetting.internalValue = config.confirmationSetting;
        this._dialogCodeHook.internalValue = config.dialogCodeHook;
        this._fulfillmentCodeHook.internalValue = config.fulfillmentCodeHook;
        this._initialResponseSetting.internalValue = config.initialResponseSetting;
        this._inputContext.internalValue = config.inputContext;
        this._kendraConfiguration.internalValue = config.kendraConfiguration;
        this._outputContext.internalValue = config.outputContext;
        this._sampleUtterance.internalValue = config.sampleUtterance;
        this._slotPriority.internalValue = config.slotPriority;
        this._timeouts.internalValue = config.timeouts;
    }
    get botId() {
        return this.getStringAttribute('bot_id');
    }
    set botId(value) {
        this._botId = value;
    }
    // Temporarily expose input value. Use with caution.
    get botIdInput() {
        return this._botId;
    }
    get botVersion() {
        return this.getStringAttribute('bot_version');
    }
    set botVersion(value) {
        this._botVersion = value;
    }
    // Temporarily expose input value. Use with caution.
    get botVersionInput() {
        return this._botVersion;
    }
    // creation_date_time - computed: true, optional: false, required: false
    get creationDateTime() {
        return this.getStringAttribute('creation_date_time');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // intent_id - computed: true, optional: false, required: false
    get intentId() {
        return this.getStringAttribute('intent_id');
    }
    // last_updated_date_time - computed: true, optional: false, required: false
    get lastUpdatedDateTime() {
        return this.getStringAttribute('last_updated_date_time');
    }
    get localeId() {
        return this.getStringAttribute('locale_id');
    }
    set localeId(value) {
        this._localeId = value;
    }
    // Temporarily expose input value. Use with caution.
    get localeIdInput() {
        return this._localeId;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get parentIntentSignature() {
        return this.getStringAttribute('parent_intent_signature');
    }
    set parentIntentSignature(value) {
        this._parentIntentSignature = value;
    }
    resetParentIntentSignature() {
        this._parentIntentSignature = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parentIntentSignatureInput() {
        return this._parentIntentSignature;
    }
    get closingSetting() {
        return this._closingSetting;
    }
    putClosingSetting(value) {
        this._closingSetting.internalValue = value;
    }
    resetClosingSetting() {
        this._closingSetting.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get closingSettingInput() {
        return this._closingSetting.internalValue;
    }
    get confirmationSetting() {
        return this._confirmationSetting;
    }
    putConfirmationSetting(value) {
        this._confirmationSetting.internalValue = value;
    }
    resetConfirmationSetting() {
        this._confirmationSetting.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get confirmationSettingInput() {
        return this._confirmationSetting.internalValue;
    }
    get dialogCodeHook() {
        return this._dialogCodeHook;
    }
    putDialogCodeHook(value) {
        this._dialogCodeHook.internalValue = value;
    }
    resetDialogCodeHook() {
        this._dialogCodeHook.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dialogCodeHookInput() {
        return this._dialogCodeHook.internalValue;
    }
    get fulfillmentCodeHook() {
        return this._fulfillmentCodeHook;
    }
    putFulfillmentCodeHook(value) {
        this._fulfillmentCodeHook.internalValue = value;
    }
    resetFulfillmentCodeHook() {
        this._fulfillmentCodeHook.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fulfillmentCodeHookInput() {
        return this._fulfillmentCodeHook.internalValue;
    }
    get initialResponseSetting() {
        return this._initialResponseSetting;
    }
    putInitialResponseSetting(value) {
        this._initialResponseSetting.internalValue = value;
    }
    resetInitialResponseSetting() {
        this._initialResponseSetting.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get initialResponseSettingInput() {
        return this._initialResponseSetting.internalValue;
    }
    get inputContext() {
        return this._inputContext;
    }
    putInputContext(value) {
        this._inputContext.internalValue = value;
    }
    resetInputContext() {
        this._inputContext.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inputContextInput() {
        return this._inputContext.internalValue;
    }
    get kendraConfiguration() {
        return this._kendraConfiguration;
    }
    putKendraConfiguration(value) {
        this._kendraConfiguration.internalValue = value;
    }
    resetKendraConfiguration() {
        this._kendraConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kendraConfigurationInput() {
        return this._kendraConfiguration.internalValue;
    }
    get outputContext() {
        return this._outputContext;
    }
    putOutputContext(value) {
        this._outputContext.internalValue = value;
    }
    resetOutputContext() {
        this._outputContext.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get outputContextInput() {
        return this._outputContext.internalValue;
    }
    get sampleUtterance() {
        return this._sampleUtterance;
    }
    putSampleUtterance(value) {
        this._sampleUtterance.internalValue = value;
    }
    resetSampleUtterance() {
        this._sampleUtterance.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sampleUtteranceInput() {
        return this._sampleUtterance.internalValue;
    }
    get slotPriority() {
        return this._slotPriority;
    }
    putSlotPriority(value) {
        this._slotPriority.internalValue = value;
    }
    resetSlotPriority() {
        this._slotPriority.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get slotPriorityInput() {
        return this._slotPriority.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            bot_id: cdktf.stringToTerraform(this._botId),
            bot_version: cdktf.stringToTerraform(this._botVersion),
            description: cdktf.stringToTerraform(this._description),
            locale_id: cdktf.stringToTerraform(this._localeId),
            name: cdktf.stringToTerraform(this._name),
            parent_intent_signature: cdktf.stringToTerraform(this._parentIntentSignature),
            closing_setting: cdktf.listMapper(index_structs_1.lexv2ModelsIntentClosingSettingToTerraform, true)(this._closingSetting.internalValue),
            confirmation_setting: cdktf.listMapper(index_structs_1.lexv2ModelsIntentConfirmationSettingToTerraform, true)(this._confirmationSetting.internalValue),
            dialog_code_hook: cdktf.listMapper(index_structs_1.lexv2ModelsIntentDialogCodeHookToTerraform, true)(this._dialogCodeHook.internalValue),
            fulfillment_code_hook: cdktf.listMapper(index_structs_1.lexv2ModelsIntentFulfillmentCodeHookToTerraform, true)(this._fulfillmentCodeHook.internalValue),
            initial_response_setting: cdktf.listMapper(index_structs_1.lexv2ModelsIntentInitialResponseSettingToTerraform, true)(this._initialResponseSetting.internalValue),
            input_context: cdktf.listMapper(index_structs_1.lexv2ModelsIntentInputContextToTerraform, true)(this._inputContext.internalValue),
            kendra_configuration: cdktf.listMapper(index_structs_1.lexv2ModelsIntentKendraConfigurationToTerraform, true)(this._kendraConfiguration.internalValue),
            output_context: cdktf.listMapper(index_structs_1.lexv2ModelsIntentOutputContextToTerraform, true)(this._outputContext.internalValue),
            sample_utterance: cdktf.listMapper(index_structs_1.lexv2ModelsIntentSampleUtteranceToTerraform, true)(this._sampleUtterance.internalValue),
            slot_priority: cdktf.listMapper(index_structs_1.lexv2ModelsIntentSlotPriorityToTerraform, true)(this._slotPriority.internalValue),
            timeouts: (0, index_structs_1.lexv2ModelsIntentTimeoutsToTerraform)(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            bot_id: {
                value: cdktf.stringToHclTerraform(this._botId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            bot_version: {
                value: cdktf.stringToHclTerraform(this._botVersion),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            description: {
                value: cdktf.stringToHclTerraform(this._description),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            locale_id: {
                value: cdktf.stringToHclTerraform(this._localeId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            parent_intent_signature: {
                value: cdktf.stringToHclTerraform(this._parentIntentSignature),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            closing_setting: {
                value: cdktf.listMapperHcl(index_structs_1.lexv2ModelsIntentClosingSettingToHclTerraform, true)(this._closingSetting.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "Lexv2ModelsIntentClosingSettingList",
            },
            confirmation_setting: {
                value: cdktf.listMapperHcl(index_structs_1.lexv2ModelsIntentConfirmationSettingToHclTerraform, true)(this._confirmationSetting.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "Lexv2ModelsIntentConfirmationSettingList",
            },
            dialog_code_hook: {
                value: cdktf.listMapperHcl(index_structs_1.lexv2ModelsIntentDialogCodeHookToHclTerraform, true)(this._dialogCodeHook.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "Lexv2ModelsIntentDialogCodeHookList",
            },
            fulfillment_code_hook: {
                value: cdktf.listMapperHcl(index_structs_1.lexv2ModelsIntentFulfillmentCodeHookToHclTerraform, true)(this._fulfillmentCodeHook.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookList",
            },
            initial_response_setting: {
                value: cdktf.listMapperHcl(index_structs_1.lexv2ModelsIntentInitialResponseSettingToHclTerraform, true)(this._initialResponseSetting.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "Lexv2ModelsIntentInitialResponseSettingList",
            },
            input_context: {
                value: cdktf.listMapperHcl(index_structs_1.lexv2ModelsIntentInputContextToHclTerraform, true)(this._inputContext.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "Lexv2ModelsIntentInputContextList",
            },
            kendra_configuration: {
                value: cdktf.listMapperHcl(index_structs_1.lexv2ModelsIntentKendraConfigurationToHclTerraform, true)(this._kendraConfiguration.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "Lexv2ModelsIntentKendraConfigurationList",
            },
            output_context: {
                value: cdktf.listMapperHcl(index_structs_1.lexv2ModelsIntentOutputContextToHclTerraform, true)(this._outputContext.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "Lexv2ModelsIntentOutputContextList",
            },
            sample_utterance: {
                value: cdktf.listMapperHcl(index_structs_1.lexv2ModelsIntentSampleUtteranceToHclTerraform, true)(this._sampleUtterance.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "Lexv2ModelsIntentSampleUtteranceList",
            },
            slot_priority: {
                value: cdktf.listMapperHcl(index_structs_1.lexv2ModelsIntentSlotPriorityToHclTerraform, true)(this._slotPriority.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "Lexv2ModelsIntentSlotPriorityList",
            },
            timeouts: {
                value: (0, index_structs_1.lexv2ModelsIntentTimeoutsToHclTerraform)(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "Lexv2ModelsIntentTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.Lexv2ModelsIntent = Lexv2ModelsIntent;
_a = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntent[_a] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntent", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
Lexv2ModelsIntent.tfResourceType = "aws_lexv2models_intent";
//# sourceMappingURL=data:application/json;base64,