"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92, _93, _94, _95, _96, _97, _98, _99, _100, _101, _102, _103, _104, _105, _106, _107, _108, _109, _110, _111, _112, _113, _114, _115, _116, _117, _118, _119, _120, _121, _122, _123, _124, _125, _126, _127, _128, _129, _130, _131, _132, _133, _134, _135, _136, _137, _138, _139, _140, _141, _142, _143, _144, _145, _146, _147, _148, _149, _150, _151, _152, _153, _154, _155, _156, _157, _158, _159, _160, _161, _162, _163, _164, _165, _166, _167, _168, _169, _170, _171, _172, _173, _174, _175;
Object.defineProperty(exports, "__esModule", { value: true });
exports.lexv2ModelsIntentConfirmationSettingFailureNextStepDialogActionToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingFailureNextStepDialogActionToTerraform = exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalList = exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalOutputReference = exports.lexv2ModelsIntentConfirmationSettingFailureConditionalToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingFailureConditionalToTerraform = exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchList = exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchOutputReference = exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchToTerraform = exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseList = exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseOutputReference = exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseToTerraform = exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupList = exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupOutputReference = exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupToTerraform = exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationList = exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationOutputReference = exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationToTerraform = exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageList = exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageOutputReference = exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageToTerraform = exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageList = exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageOutputReference = exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageToTerraform = exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardList = exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardOutputReference = exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardToTerraform = exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonList = exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonOutputReference = exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonToTerraform = exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadList = exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadOutputReference = exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadToTerraform = exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageList = exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageOutputReference = exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageToTerraform = exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageList = exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageOutputReference = exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageToTerraform = void 0;
exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButtonList = exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButtonOutputReference = exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButtonToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButtonToTerraform = exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayloadList = exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayloadOutputReference = exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayloadToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayloadToTerraform = exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageList = exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageOutputReference = exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageToTerraform = exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessageList = exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessageOutputReference = exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessageToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessageToTerraform = exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessageList = exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessageOutputReference = exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessageToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessageToTerraform = exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardList = exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardOutputReference = exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardToTerraform = exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButtonList = exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButtonOutputReference = exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButtonToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButtonToTerraform = exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayloadList = exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayloadOutputReference = exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayloadToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayloadToTerraform = exports.Lexv2ModelsIntentConfirmationSettingFailureNextStepList = exports.Lexv2ModelsIntentConfirmationSettingFailureNextStepOutputReference = exports.lexv2ModelsIntentConfirmationSettingFailureNextStepToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingFailureNextStepToTerraform = exports.Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentList = exports.Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentOutputReference = exports.lexv2ModelsIntentConfirmationSettingFailureNextStepIntentToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingFailureNextStepIntentToTerraform = exports.Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotList = exports.Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotOutputReference = exports.lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotToTerraform = exports.Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotValueList = exports.Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotValueOutputReference = exports.lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotValueToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotValueToTerraform = exports.Lexv2ModelsIntentConfirmationSettingFailureNextStepDialogActionList = exports.Lexv2ModelsIntentConfirmationSettingFailureNextStepDialogActionOutputReference = void 0;
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayloadToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayloadToTerraform = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageList = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageOutputReference = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageToTerraform = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessageList = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessageOutputReference = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessageToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessageToTerraform = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessageList = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessageOutputReference = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessageToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessageToTerraform = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardList = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardOutputReference = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardToTerraform = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonList = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonOutputReference = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonToTerraform = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayloadList = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayloadOutputReference = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayloadToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayloadToTerraform = exports.Lexv2ModelsIntentConfirmationSettingFailureResponseList = exports.Lexv2ModelsIntentConfirmationSettingFailureResponseOutputReference = exports.lexv2ModelsIntentConfirmationSettingFailureResponseToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingFailureResponseToTerraform = exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupList = exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupOutputReference = exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupToTerraform = exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationList = exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationOutputReference = exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationToTerraform = exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessageList = exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessageOutputReference = exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessageToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessageToTerraform = exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessageList = exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessageOutputReference = exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessageToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessageToTerraform = exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardList = exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardOutputReference = exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardToTerraform = void 0;
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationList = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationOutputReference = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationToTerraform = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationList = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationOutputReference = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationToTerraform = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationList = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationOutputReference = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationToTerraform = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationList = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationOutputReference = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationToTerraform = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationList = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationOutputReference = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationToTerraform = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesList = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesOutputReference = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesToTerraform = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupList = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupOutputReference = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupToTerraform = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationList = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationOutputReference = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationToTerraform = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessageList = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessageOutputReference = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessageToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessageToTerraform = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessageList = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessageOutputReference = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessageToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessageToTerraform = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardList = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardOutputReference = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardToTerraform = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonList = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonOutputReference = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonToTerraform = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayloadList = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayloadOutputReference = void 0;
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessageToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessageToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardList = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButtonList = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButtonOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButtonToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButtonToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayloadList = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayloadOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayloadToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayloadToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageList = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessageList = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessageOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessageToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessageToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessageList = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessageOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessageToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessageToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardList = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButtonList = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButtonOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButtonToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButtonToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayloadList = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayloadOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayloadToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayloadToTerraform = exports.Lexv2ModelsIntentDialogCodeHookList = exports.Lexv2ModelsIntentDialogCodeHookOutputReference = exports.lexv2ModelsIntentDialogCodeHookToHclTerraform = exports.lexv2ModelsIntentDialogCodeHookToTerraform = exports.Lexv2ModelsIntentConfirmationSettingList = exports.Lexv2ModelsIntentConfirmationSettingOutputReference = exports.lexv2ModelsIntentConfirmationSettingToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingToTerraform = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationList = exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationOutputReference = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationToHclTerraform = exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationToTerraform = void 0;
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButtonList = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButtonOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButtonToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButtonToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayloadList = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayloadOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayloadToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayloadToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageList = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessageList = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessageOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessageToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessageToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessageList = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessageOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessageToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessageToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardList = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButtonList = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButtonOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButtonToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButtonToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayloadList = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayloadOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayloadToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayloadToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseList = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupList = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationList = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessageList = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessageOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessageToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessageToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessageList = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessageOutputReference = void 0;
exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentList = exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotList = exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueList = exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogActionList = exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogActionOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogActionToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogActionToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchConditionList = exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchConditionOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchConditionToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchConditionToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationList = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseList = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupList = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationList = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessageList = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessageOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessageToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessageToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessageList = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessageOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessageToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessageToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardList = exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardToTerraform = void 0;
exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationList = exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageList = exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageList = exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardList = exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonList = exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadList = exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageList = exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageList = exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageList = exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardList = exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonList = exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadList = exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadOutputReference = exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadToHclTerraform = exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadToTerraform = exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepList = exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepOutputReference = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */
const cdktf = require("cdktf");
const structs1200_1 = require("./structs1200");
const structs800_1 = require("./structs800");
function lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageToTerraform = lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageToTerraform;
function lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageToHclTerraform = lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._value = value.value;
        }
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageOutputReference = Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageOutputReference;
_a = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageOutputReference[_a] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageList = Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageList;
_b = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageList[_b] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        custom_payload: cdktf.listMapper(structs1200_1.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadToTerraform, true)(struct.customPayload),
        image_response_card: cdktf.listMapper(structs1200_1.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardToTerraform, true)(struct.imageResponseCard),
        plain_text_message: cdktf.listMapper(structs1200_1.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageToTerraform, true)(struct.plainTextMessage),
        ssml_message: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageToTerraform, true)(struct.ssmlMessage),
    };
}
exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageToTerraform = lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageToTerraform;
function lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        custom_payload: {
            value: cdktf.listMapperHcl(structs1200_1.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadToHclTerraform, true)(struct.customPayload),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadList",
        },
        image_response_card: {
            value: cdktf.listMapperHcl(structs1200_1.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardToHclTerraform, true)(struct.imageResponseCard),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardList",
        },
        plain_text_message: {
            value: cdktf.listMapperHcl(structs1200_1.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageToHclTerraform, true)(struct.plainTextMessage),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageList",
        },
        ssml_message: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageToHclTerraform, true)(struct.ssmlMessage),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageToHclTerraform = lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // custom_payload - computed: false, optional: true, required: false
        this._customPayload = new structs1200_1.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadList(this, "custom_payload", false);
        // image_response_card - computed: false, optional: true, required: false
        this._imageResponseCard = new structs1200_1.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardList(this, "image_response_card", false);
        // plain_text_message - computed: false, optional: true, required: false
        this._plainTextMessage = new structs1200_1.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageList(this, "plain_text_message", false);
        // ssml_message - computed: false, optional: true, required: false
        this._ssmlMessage = new Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageList(this, "ssml_message", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._customPayload?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customPayload = this._customPayload?.internalValue;
        }
        if (this._imageResponseCard?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageResponseCard = this._imageResponseCard?.internalValue;
        }
        if (this._plainTextMessage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.plainTextMessage = this._plainTextMessage?.internalValue;
        }
        if (this._ssmlMessage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ssmlMessage = this._ssmlMessage?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._customPayload.internalValue = undefined;
            this._imageResponseCard.internalValue = undefined;
            this._plainTextMessage.internalValue = undefined;
            this._ssmlMessage.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._customPayload.internalValue = value.customPayload;
            this._imageResponseCard.internalValue = value.imageResponseCard;
            this._plainTextMessage.internalValue = value.plainTextMessage;
            this._ssmlMessage.internalValue = value.ssmlMessage;
        }
    }
    get customPayload() {
        return this._customPayload;
    }
    putCustomPayload(value) {
        this._customPayload.internalValue = value;
    }
    resetCustomPayload() {
        this._customPayload.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customPayloadInput() {
        return this._customPayload.internalValue;
    }
    get imageResponseCard() {
        return this._imageResponseCard;
    }
    putImageResponseCard(value) {
        this._imageResponseCard.internalValue = value;
    }
    resetImageResponseCard() {
        this._imageResponseCard.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageResponseCardInput() {
        return this._imageResponseCard.internalValue;
    }
    get plainTextMessage() {
        return this._plainTextMessage;
    }
    putPlainTextMessage(value) {
        this._plainTextMessage.internalValue = value;
    }
    resetPlainTextMessage() {
        this._plainTextMessage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get plainTextMessageInput() {
        return this._plainTextMessage.internalValue;
    }
    get ssmlMessage() {
        return this._ssmlMessage;
    }
    putSsmlMessage(value) {
        this._ssmlMessage.internalValue = value;
    }
    resetSsmlMessage() {
        this._ssmlMessage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ssmlMessageInput() {
        return this._ssmlMessage.internalValue;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageOutputReference = Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageOutputReference;
_c = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageOutputReference[_c] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageList = Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageList;
_d = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageList[_d] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadToTerraform = lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadToTerraform;
function lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadToHclTerraform = lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._value = value.value;
        }
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadOutputReference = Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadOutputReference;
_e = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadOutputReference[_e] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadList = Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadList;
_f = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadList[_f] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        text: cdktf.stringToTerraform(struct.text),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonToTerraform = lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonToTerraform;
function lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        text: {
            value: cdktf.stringToHclTerraform(struct.text),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonToHclTerraform = lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._text !== undefined) {
            hasAnyValues = true;
            internalValueResult.text = this._text;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._text = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._text = value.text;
            this._value = value.value;
        }
    }
    get text() {
        return this.getStringAttribute('text');
    }
    set text(value) {
        this._text = value;
    }
    // Temporarily expose input value. Use with caution.
    get textInput() {
        return this._text;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonOutputReference = Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonOutputReference;
_g = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonOutputReference[_g] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonList = Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonList;
_h = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonList[_h] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        image_url: cdktf.stringToTerraform(struct.imageUrl),
        subtitle: cdktf.stringToTerraform(struct.subtitle),
        title: cdktf.stringToTerraform(struct.title),
        button: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonToTerraform, true)(struct.button),
    };
}
exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardToTerraform = lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardToTerraform;
function lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        image_url: {
            value: cdktf.stringToHclTerraform(struct.imageUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        subtitle: {
            value: cdktf.stringToHclTerraform(struct.subtitle),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        title: {
            value: cdktf.stringToHclTerraform(struct.title),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        button: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonToHclTerraform, true)(struct.button),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardToHclTerraform = lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // button - computed: false, optional: true, required: false
        this._button = new Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonList(this, "button", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._imageUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageUrl = this._imageUrl;
        }
        if (this._subtitle !== undefined) {
            hasAnyValues = true;
            internalValueResult.subtitle = this._subtitle;
        }
        if (this._title !== undefined) {
            hasAnyValues = true;
            internalValueResult.title = this._title;
        }
        if (this._button?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.button = this._button?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._imageUrl = undefined;
            this._subtitle = undefined;
            this._title = undefined;
            this._button.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._imageUrl = value.imageUrl;
            this._subtitle = value.subtitle;
            this._title = value.title;
            this._button.internalValue = value.button;
        }
    }
    get imageUrl() {
        return this.getStringAttribute('image_url');
    }
    set imageUrl(value) {
        this._imageUrl = value;
    }
    resetImageUrl() {
        this._imageUrl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageUrlInput() {
        return this._imageUrl;
    }
    get subtitle() {
        return this.getStringAttribute('subtitle');
    }
    set subtitle(value) {
        this._subtitle = value;
    }
    resetSubtitle() {
        this._subtitle = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subtitleInput() {
        return this._subtitle;
    }
    get title() {
        return this.getStringAttribute('title');
    }
    set title(value) {
        this._title = value;
    }
    // Temporarily expose input value. Use with caution.
    get titleInput() {
        return this._title;
    }
    get button() {
        return this._button;
    }
    putButton(value) {
        this._button.internalValue = value;
    }
    resetButton() {
        this._button.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get buttonInput() {
        return this._button.internalValue;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardOutputReference = Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardOutputReference;
_j = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardOutputReference[_j] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardList = Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardList;
_k = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardList[_k] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageToTerraform = lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageToTerraform;
function lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageToHclTerraform = lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._value = value.value;
        }
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageOutputReference = Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageOutputReference;
_l = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageOutputReference[_l] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageList = Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageList;
_m = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageList[_m] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageToTerraform = lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageToTerraform;
function lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageToHclTerraform = lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._value = value.value;
        }
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageOutputReference = Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageOutputReference;
_o = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageOutputReference[_o] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageList = Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageList;
_p = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageList[_p] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        custom_payload: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadToTerraform, true)(struct.customPayload),
        image_response_card: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardToTerraform, true)(struct.imageResponseCard),
        plain_text_message: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageToTerraform, true)(struct.plainTextMessage),
        ssml_message: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageToTerraform, true)(struct.ssmlMessage),
    };
}
exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationToTerraform = lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationToTerraform;
function lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        custom_payload: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadToHclTerraform, true)(struct.customPayload),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadList",
        },
        image_response_card: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardToHclTerraform, true)(struct.imageResponseCard),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardList",
        },
        plain_text_message: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageToHclTerraform, true)(struct.plainTextMessage),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageList",
        },
        ssml_message: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageToHclTerraform, true)(struct.ssmlMessage),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationToHclTerraform = lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // custom_payload - computed: false, optional: true, required: false
        this._customPayload = new Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadList(this, "custom_payload", false);
        // image_response_card - computed: false, optional: true, required: false
        this._imageResponseCard = new Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardList(this, "image_response_card", false);
        // plain_text_message - computed: false, optional: true, required: false
        this._plainTextMessage = new Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageList(this, "plain_text_message", false);
        // ssml_message - computed: false, optional: true, required: false
        this._ssmlMessage = new Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageList(this, "ssml_message", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._customPayload?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customPayload = this._customPayload?.internalValue;
        }
        if (this._imageResponseCard?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageResponseCard = this._imageResponseCard?.internalValue;
        }
        if (this._plainTextMessage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.plainTextMessage = this._plainTextMessage?.internalValue;
        }
        if (this._ssmlMessage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ssmlMessage = this._ssmlMessage?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._customPayload.internalValue = undefined;
            this._imageResponseCard.internalValue = undefined;
            this._plainTextMessage.internalValue = undefined;
            this._ssmlMessage.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._customPayload.internalValue = value.customPayload;
            this._imageResponseCard.internalValue = value.imageResponseCard;
            this._plainTextMessage.internalValue = value.plainTextMessage;
            this._ssmlMessage.internalValue = value.ssmlMessage;
        }
    }
    get customPayload() {
        return this._customPayload;
    }
    putCustomPayload(value) {
        this._customPayload.internalValue = value;
    }
    resetCustomPayload() {
        this._customPayload.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customPayloadInput() {
        return this._customPayload.internalValue;
    }
    get imageResponseCard() {
        return this._imageResponseCard;
    }
    putImageResponseCard(value) {
        this._imageResponseCard.internalValue = value;
    }
    resetImageResponseCard() {
        this._imageResponseCard.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageResponseCardInput() {
        return this._imageResponseCard.internalValue;
    }
    get plainTextMessage() {
        return this._plainTextMessage;
    }
    putPlainTextMessage(value) {
        this._plainTextMessage.internalValue = value;
    }
    resetPlainTextMessage() {
        this._plainTextMessage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get plainTextMessageInput() {
        return this._plainTextMessage.internalValue;
    }
    get ssmlMessage() {
        return this._ssmlMessage;
    }
    putSsmlMessage(value) {
        this._ssmlMessage.internalValue = value;
    }
    resetSsmlMessage() {
        this._ssmlMessage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ssmlMessageInput() {
        return this._ssmlMessage.internalValue;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationOutputReference = Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationOutputReference;
_q = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationOutputReference[_q] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationList = Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationList;
_r = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationList[_r] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        message: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageToTerraform, true)(struct.message),
        variation: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationToTerraform, true)(struct.variation),
    };
}
exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupToTerraform = lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupToTerraform;
function lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        message: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageToHclTerraform, true)(struct.message),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageList",
        },
        variation: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationToHclTerraform, true)(struct.variation),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupToHclTerraform = lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // message - computed: false, optional: true, required: false
        this._message = new Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageList(this, "message", false);
        // variation - computed: false, optional: true, required: false
        this._variation = new Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationList(this, "variation", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._message?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.message = this._message?.internalValue;
        }
        if (this._variation?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.variation = this._variation?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._message.internalValue = undefined;
            this._variation.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._message.internalValue = value.message;
            this._variation.internalValue = value.variation;
        }
    }
    get message() {
        return this._message;
    }
    putMessage(value) {
        this._message.internalValue = value;
    }
    resetMessage() {
        this._message.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get messageInput() {
        return this._message.internalValue;
    }
    get variation() {
        return this._variation;
    }
    putVariation(value) {
        this._variation.internalValue = value;
    }
    resetVariation() {
        this._variation.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get variationInput() {
        return this._variation.internalValue;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupOutputReference = Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupOutputReference;
_s = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupOutputReference[_s] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupList = Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupList;
_t = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupList[_t] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_interrupt: cdktf.booleanToTerraform(struct.allowInterrupt),
        message_group: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupToTerraform, true)(struct.messageGroup),
    };
}
exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseToTerraform = lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseToTerraform;
function lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allow_interrupt: {
            value: cdktf.booleanToHclTerraform(struct.allowInterrupt),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        message_group: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupToHclTerraform, true)(struct.messageGroup),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseToHclTerraform = lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // message_group - computed: false, optional: true, required: false
        this._messageGroup = new Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupList(this, "message_group", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowInterrupt !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowInterrupt = this._allowInterrupt;
        }
        if (this._messageGroup?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.messageGroup = this._messageGroup?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._allowInterrupt = undefined;
            this._messageGroup.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._allowInterrupt = value.allowInterrupt;
            this._messageGroup.internalValue = value.messageGroup;
        }
    }
    get allowInterrupt() {
        return this.getBooleanAttribute('allow_interrupt');
    }
    set allowInterrupt(value) {
        this._allowInterrupt = value;
    }
    resetAllowInterrupt() {
        this._allowInterrupt = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowInterruptInput() {
        return this._allowInterrupt;
    }
    get messageGroup() {
        return this._messageGroup;
    }
    putMessageGroup(value) {
        this._messageGroup.internalValue = value;
    }
    resetMessageGroup() {
        this._messageGroup.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get messageGroupInput() {
        return this._messageGroup.internalValue;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseOutputReference = Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseOutputReference;
_u = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseOutputReference[_u] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseList = Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseList;
_v = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseList[_v] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        next_step: cdktf.listMapper(structs1200_1.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepToTerraform, true)(struct.nextStep),
        response: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseToTerraform, true)(struct.response),
    };
}
exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchToTerraform = lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchToTerraform;
function lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        next_step: {
            value: cdktf.listMapperHcl(structs1200_1.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepToHclTerraform, true)(struct.nextStep),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepList",
        },
        response: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseToHclTerraform, true)(struct.response),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchToHclTerraform = lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // next_step - computed: false, optional: true, required: false
        this._nextStep = new structs1200_1.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepList(this, "next_step", false);
        // response - computed: false, optional: true, required: false
        this._response = new Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseList(this, "response", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nextStep?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.nextStep = this._nextStep?.internalValue;
        }
        if (this._response?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.response = this._response?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._nextStep.internalValue = undefined;
            this._response.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._nextStep.internalValue = value.nextStep;
            this._response.internalValue = value.response;
        }
    }
    get nextStep() {
        return this._nextStep;
    }
    putNextStep(value) {
        this._nextStep.internalValue = value;
    }
    resetNextStep() {
        this._nextStep.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nextStepInput() {
        return this._nextStep.internalValue;
    }
    get response() {
        return this._response;
    }
    putResponse(value) {
        this._response.internalValue = value;
    }
    resetResponse() {
        this._response.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get responseInput() {
        return this._response.internalValue;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchOutputReference = Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchOutputReference;
_w = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchOutputReference[_w] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchList = Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchList;
_x = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchList[_x] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingFailureConditionalToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        active: cdktf.booleanToTerraform(struct.active),
        conditional_branch: cdktf.listMapper(structs1200_1.lexv2ModelsIntentConfirmationSettingFailureConditionalConditionalBranchToTerraform, true)(struct.conditionalBranch),
        default_branch: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchToTerraform, true)(struct.defaultBranch),
    };
}
exports.lexv2ModelsIntentConfirmationSettingFailureConditionalToTerraform = lexv2ModelsIntentConfirmationSettingFailureConditionalToTerraform;
function lexv2ModelsIntentConfirmationSettingFailureConditionalToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        active: {
            value: cdktf.booleanToHclTerraform(struct.active),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        conditional_branch: {
            value: cdktf.listMapperHcl(structs1200_1.lexv2ModelsIntentConfirmationSettingFailureConditionalConditionalBranchToHclTerraform, true)(struct.conditionalBranch),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingFailureConditionalConditionalBranchList",
        },
        default_branch: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchToHclTerraform, true)(struct.defaultBranch),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingFailureConditionalToHclTerraform = lexv2ModelsIntentConfirmationSettingFailureConditionalToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingFailureConditionalOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // conditional_branch - computed: false, optional: true, required: false
        this._conditionalBranch = new structs1200_1.Lexv2ModelsIntentConfirmationSettingFailureConditionalConditionalBranchList(this, "conditional_branch", false);
        // default_branch - computed: false, optional: true, required: false
        this._defaultBranch = new Lexv2ModelsIntentConfirmationSettingFailureConditionalDefaultBranchList(this, "default_branch", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._active !== undefined) {
            hasAnyValues = true;
            internalValueResult.active = this._active;
        }
        if (this._conditionalBranch?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.conditionalBranch = this._conditionalBranch?.internalValue;
        }
        if (this._defaultBranch?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultBranch = this._defaultBranch?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._active = undefined;
            this._conditionalBranch.internalValue = undefined;
            this._defaultBranch.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._active = value.active;
            this._conditionalBranch.internalValue = value.conditionalBranch;
            this._defaultBranch.internalValue = value.defaultBranch;
        }
    }
    get active() {
        return this.getBooleanAttribute('active');
    }
    set active(value) {
        this._active = value;
    }
    // Temporarily expose input value. Use with caution.
    get activeInput() {
        return this._active;
    }
    get conditionalBranch() {
        return this._conditionalBranch;
    }
    putConditionalBranch(value) {
        this._conditionalBranch.internalValue = value;
    }
    resetConditionalBranch() {
        this._conditionalBranch.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conditionalBranchInput() {
        return this._conditionalBranch.internalValue;
    }
    get defaultBranch() {
        return this._defaultBranch;
    }
    putDefaultBranch(value) {
        this._defaultBranch.internalValue = value;
    }
    resetDefaultBranch() {
        this._defaultBranch.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultBranchInput() {
        return this._defaultBranch.internalValue;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalOutputReference = Lexv2ModelsIntentConfirmationSettingFailureConditionalOutputReference;
_y = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureConditionalOutputReference[_y] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureConditionalOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingFailureConditionalList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingFailureConditionalOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureConditionalList = Lexv2ModelsIntentConfirmationSettingFailureConditionalList;
_z = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureConditionalList[_z] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureConditionalList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingFailureNextStepDialogActionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        slot_to_elicit: cdktf.stringToTerraform(struct.slotToElicit),
        suppress_next_message: cdktf.booleanToTerraform(struct.suppressNextMessage),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.lexv2ModelsIntentConfirmationSettingFailureNextStepDialogActionToTerraform = lexv2ModelsIntentConfirmationSettingFailureNextStepDialogActionToTerraform;
function lexv2ModelsIntentConfirmationSettingFailureNextStepDialogActionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        slot_to_elicit: {
            value: cdktf.stringToHclTerraform(struct.slotToElicit),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        suppress_next_message: {
            value: cdktf.booleanToHclTerraform(struct.suppressNextMessage),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        type: {
            value: cdktf.stringToHclTerraform(struct.type),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingFailureNextStepDialogActionToHclTerraform = lexv2ModelsIntentConfirmationSettingFailureNextStepDialogActionToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingFailureNextStepDialogActionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._slotToElicit !== undefined) {
            hasAnyValues = true;
            internalValueResult.slotToElicit = this._slotToElicit;
        }
        if (this._suppressNextMessage !== undefined) {
            hasAnyValues = true;
            internalValueResult.suppressNextMessage = this._suppressNextMessage;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._slotToElicit = undefined;
            this._suppressNextMessage = undefined;
            this._type = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._slotToElicit = value.slotToElicit;
            this._suppressNextMessage = value.suppressNextMessage;
            this._type = value.type;
        }
    }
    get slotToElicit() {
        return this.getStringAttribute('slot_to_elicit');
    }
    set slotToElicit(value) {
        this._slotToElicit = value;
    }
    resetSlotToElicit() {
        this._slotToElicit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get slotToElicitInput() {
        return this._slotToElicit;
    }
    get suppressNextMessage() {
        return this.getBooleanAttribute('suppress_next_message');
    }
    set suppressNextMessage(value) {
        this._suppressNextMessage = value;
    }
    resetSuppressNextMessage() {
        this._suppressNextMessage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get suppressNextMessageInput() {
        return this._suppressNextMessage;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureNextStepDialogActionOutputReference = Lexv2ModelsIntentConfirmationSettingFailureNextStepDialogActionOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureNextStepDialogActionOutputReference[_0] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureNextStepDialogActionOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingFailureNextStepDialogActionList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingFailureNextStepDialogActionOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureNextStepDialogActionList = Lexv2ModelsIntentConfirmationSettingFailureNextStepDialogActionList;
_1 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureNextStepDialogActionList[_1] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureNextStepDialogActionList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotValueToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        interpreted_value: cdktf.stringToTerraform(struct.interpretedValue),
    };
}
exports.lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotValueToTerraform = lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotValueToTerraform;
function lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotValueToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        interpreted_value: {
            value: cdktf.stringToHclTerraform(struct.interpretedValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotValueToHclTerraform = lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotValueToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotValueOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._interpretedValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.interpretedValue = this._interpretedValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._interpretedValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._interpretedValue = value.interpretedValue;
        }
    }
    get interpretedValue() {
        return this.getStringAttribute('interpreted_value');
    }
    set interpretedValue(value) {
        this._interpretedValue = value;
    }
    resetInterpretedValue() {
        this._interpretedValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get interpretedValueInput() {
        return this._interpretedValue;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotValueOutputReference = Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotValueOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotValueOutputReference[_2] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotValueOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotValueList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotValueOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotValueList = Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotValueList;
_3 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotValueList[_3] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotValueList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        map_block_key: cdktf.stringToTerraform(struct.mapBlockKey),
        shape: cdktf.stringToTerraform(struct.shape),
        value: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotValueToTerraform, true)(struct.value),
    };
}
exports.lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotToTerraform = lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotToTerraform;
function lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        map_block_key: {
            value: cdktf.stringToHclTerraform(struct.mapBlockKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        shape: {
            value: cdktf.stringToHclTerraform(struct.shape),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        value: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotValueToHclTerraform, true)(struct.value),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotValueList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotToHclTerraform = lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // value - computed: false, optional: true, required: false
        this._value = new Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotValueList(this, "value", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._mapBlockKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.mapBlockKey = this._mapBlockKey;
        }
        if (this._shape !== undefined) {
            hasAnyValues = true;
            internalValueResult.shape = this._shape;
        }
        if (this._value?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._mapBlockKey = undefined;
            this._shape = undefined;
            this._value.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._mapBlockKey = value.mapBlockKey;
            this._shape = value.shape;
            this._value.internalValue = value.value;
        }
    }
    get mapBlockKey() {
        return this.getStringAttribute('map_block_key');
    }
    set mapBlockKey(value) {
        this._mapBlockKey = value;
    }
    // Temporarily expose input value. Use with caution.
    get mapBlockKeyInput() {
        return this._mapBlockKey;
    }
    get shape() {
        return this.getStringAttribute('shape');
    }
    set shape(value) {
        this._shape = value;
    }
    resetShape() {
        this._shape = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get shapeInput() {
        return this._shape;
    }
    get value() {
        return this._value;
    }
    putValue(value) {
        this._value.internalValue = value;
    }
    resetValue() {
        this._value.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value.internalValue;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotOutputReference = Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotOutputReference[_4] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotList = Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotList;
_5 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotList[_5] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingFailureNextStepIntentToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        slot: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotToTerraform, true)(struct.slot),
    };
}
exports.lexv2ModelsIntentConfirmationSettingFailureNextStepIntentToTerraform = lexv2ModelsIntentConfirmationSettingFailureNextStepIntentToTerraform;
function lexv2ModelsIntentConfirmationSettingFailureNextStepIntentToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        slot: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotToHclTerraform, true)(struct.slot),
            isBlock: true,
            type: "set",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingFailureNextStepIntentToHclTerraform = lexv2ModelsIntentConfirmationSettingFailureNextStepIntentToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // slot - computed: false, optional: true, required: false
        this._slot = new Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentSlotList(this, "slot", true);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._slot?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.slot = this._slot?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._slot.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._slot.internalValue = value.slot;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get slot() {
        return this._slot;
    }
    putSlot(value) {
        this._slot.internalValue = value;
    }
    resetSlot() {
        this._slot.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get slotInput() {
        return this._slot.internalValue;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentOutputReference = Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentOutputReference;
_6 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentOutputReference[_6] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentList = Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentList;
_7 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentList[_7] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingFailureNextStepToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        session_attributes: cdktf.hashMapper(cdktf.stringToTerraform)(struct.sessionAttributes),
        dialog_action: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingFailureNextStepDialogActionToTerraform, true)(struct.dialogAction),
        intent: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingFailureNextStepIntentToTerraform, true)(struct.intent),
    };
}
exports.lexv2ModelsIntentConfirmationSettingFailureNextStepToTerraform = lexv2ModelsIntentConfirmationSettingFailureNextStepToTerraform;
function lexv2ModelsIntentConfirmationSettingFailureNextStepToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        session_attributes: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.sessionAttributes),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        dialog_action: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingFailureNextStepDialogActionToHclTerraform, true)(struct.dialogAction),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingFailureNextStepDialogActionList",
        },
        intent: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingFailureNextStepIntentToHclTerraform, true)(struct.intent),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingFailureNextStepToHclTerraform = lexv2ModelsIntentConfirmationSettingFailureNextStepToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingFailureNextStepOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // dialog_action - computed: false, optional: true, required: false
        this._dialogAction = new Lexv2ModelsIntentConfirmationSettingFailureNextStepDialogActionList(this, "dialog_action", false);
        // intent - computed: false, optional: true, required: false
        this._intent = new Lexv2ModelsIntentConfirmationSettingFailureNextStepIntentList(this, "intent", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._sessionAttributes !== undefined) {
            hasAnyValues = true;
            internalValueResult.sessionAttributes = this._sessionAttributes;
        }
        if (this._dialogAction?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dialogAction = this._dialogAction?.internalValue;
        }
        if (this._intent?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.intent = this._intent?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._sessionAttributes = undefined;
            this._dialogAction.internalValue = undefined;
            this._intent.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._sessionAttributes = value.sessionAttributes;
            this._dialogAction.internalValue = value.dialogAction;
            this._intent.internalValue = value.intent;
        }
    }
    get sessionAttributes() {
        return this.getStringMapAttribute('session_attributes');
    }
    set sessionAttributes(value) {
        this._sessionAttributes = value;
    }
    resetSessionAttributes() {
        this._sessionAttributes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sessionAttributesInput() {
        return this._sessionAttributes;
    }
    get dialogAction() {
        return this._dialogAction;
    }
    putDialogAction(value) {
        this._dialogAction.internalValue = value;
    }
    resetDialogAction() {
        this._dialogAction.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dialogActionInput() {
        return this._dialogAction.internalValue;
    }
    get intent() {
        return this._intent;
    }
    putIntent(value) {
        this._intent.internalValue = value;
    }
    resetIntent() {
        this._intent.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get intentInput() {
        return this._intent.internalValue;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureNextStepOutputReference = Lexv2ModelsIntentConfirmationSettingFailureNextStepOutputReference;
_8 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureNextStepOutputReference[_8] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureNextStepOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingFailureNextStepList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingFailureNextStepOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureNextStepList = Lexv2ModelsIntentConfirmationSettingFailureNextStepList;
_9 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureNextStepList[_9] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureNextStepList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayloadToTerraform = lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayloadToTerraform;
function lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayloadToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayloadToHclTerraform = lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayloadToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayloadOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._value = value.value;
        }
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayloadOutputReference = Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayloadOutputReference;
_10 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayloadOutputReference[_10] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayloadOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayloadList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayloadOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayloadList = Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayloadList;
_11 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayloadList[_11] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayloadList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButtonToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        text: cdktf.stringToTerraform(struct.text),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButtonToTerraform = lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButtonToTerraform;
function lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButtonToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        text: {
            value: cdktf.stringToHclTerraform(struct.text),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButtonToHclTerraform = lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButtonToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButtonOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._text !== undefined) {
            hasAnyValues = true;
            internalValueResult.text = this._text;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._text = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._text = value.text;
            this._value = value.value;
        }
    }
    get text() {
        return this.getStringAttribute('text');
    }
    set text(value) {
        this._text = value;
    }
    // Temporarily expose input value. Use with caution.
    get textInput() {
        return this._text;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButtonOutputReference = Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButtonOutputReference;
_12 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButtonOutputReference[_12] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButtonOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButtonList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButtonOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButtonList = Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButtonList;
_13 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButtonList[_13] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButtonList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        image_url: cdktf.stringToTerraform(struct.imageUrl),
        subtitle: cdktf.stringToTerraform(struct.subtitle),
        title: cdktf.stringToTerraform(struct.title),
        button: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButtonToTerraform, true)(struct.button),
    };
}
exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardToTerraform = lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardToTerraform;
function lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        image_url: {
            value: cdktf.stringToHclTerraform(struct.imageUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        subtitle: {
            value: cdktf.stringToHclTerraform(struct.subtitle),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        title: {
            value: cdktf.stringToHclTerraform(struct.title),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        button: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButtonToHclTerraform, true)(struct.button),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButtonList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardToHclTerraform = lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // button - computed: false, optional: true, required: false
        this._button = new Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButtonList(this, "button", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._imageUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageUrl = this._imageUrl;
        }
        if (this._subtitle !== undefined) {
            hasAnyValues = true;
            internalValueResult.subtitle = this._subtitle;
        }
        if (this._title !== undefined) {
            hasAnyValues = true;
            internalValueResult.title = this._title;
        }
        if (this._button?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.button = this._button?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._imageUrl = undefined;
            this._subtitle = undefined;
            this._title = undefined;
            this._button.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._imageUrl = value.imageUrl;
            this._subtitle = value.subtitle;
            this._title = value.title;
            this._button.internalValue = value.button;
        }
    }
    get imageUrl() {
        return this.getStringAttribute('image_url');
    }
    set imageUrl(value) {
        this._imageUrl = value;
    }
    resetImageUrl() {
        this._imageUrl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageUrlInput() {
        return this._imageUrl;
    }
    get subtitle() {
        return this.getStringAttribute('subtitle');
    }
    set subtitle(value) {
        this._subtitle = value;
    }
    resetSubtitle() {
        this._subtitle = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subtitleInput() {
        return this._subtitle;
    }
    get title() {
        return this.getStringAttribute('title');
    }
    set title(value) {
        this._title = value;
    }
    // Temporarily expose input value. Use with caution.
    get titleInput() {
        return this._title;
    }
    get button() {
        return this._button;
    }
    putButton(value) {
        this._button.internalValue = value;
    }
    resetButton() {
        this._button.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get buttonInput() {
        return this._button.internalValue;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardOutputReference = Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardOutputReference;
_14 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardOutputReference[_14] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardList = Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardList;
_15 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardList[_15] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessageToTerraform = lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessageToTerraform;
function lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessageToHclTerraform = lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessageToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._value = value.value;
        }
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessageOutputReference = Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessageOutputReference;
_16 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessageOutputReference[_16] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessageOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessageList = Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessageList;
_17 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessageList[_17] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessageList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessageToTerraform = lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessageToTerraform;
function lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessageToHclTerraform = lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessageToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._value = value.value;
        }
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessageOutputReference = Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessageOutputReference;
_18 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessageOutputReference[_18] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessageOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessageList = Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessageList;
_19 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessageList[_19] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessageList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        custom_payload: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayloadToTerraform, true)(struct.customPayload),
        image_response_card: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardToTerraform, true)(struct.imageResponseCard),
        plain_text_message: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessageToTerraform, true)(struct.plainTextMessage),
        ssml_message: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessageToTerraform, true)(struct.ssmlMessage),
    };
}
exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageToTerraform = lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageToTerraform;
function lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        custom_payload: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayloadToHclTerraform, true)(struct.customPayload),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayloadList",
        },
        image_response_card: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardToHclTerraform, true)(struct.imageResponseCard),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardList",
        },
        plain_text_message: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessageToHclTerraform, true)(struct.plainTextMessage),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessageList",
        },
        ssml_message: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessageToHclTerraform, true)(struct.ssmlMessage),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessageList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageToHclTerraform = lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // custom_payload - computed: false, optional: true, required: false
        this._customPayload = new Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayloadList(this, "custom_payload", false);
        // image_response_card - computed: false, optional: true, required: false
        this._imageResponseCard = new Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardList(this, "image_response_card", false);
        // plain_text_message - computed: false, optional: true, required: false
        this._plainTextMessage = new Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessageList(this, "plain_text_message", false);
        // ssml_message - computed: false, optional: true, required: false
        this._ssmlMessage = new Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessageList(this, "ssml_message", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._customPayload?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customPayload = this._customPayload?.internalValue;
        }
        if (this._imageResponseCard?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageResponseCard = this._imageResponseCard?.internalValue;
        }
        if (this._plainTextMessage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.plainTextMessage = this._plainTextMessage?.internalValue;
        }
        if (this._ssmlMessage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ssmlMessage = this._ssmlMessage?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._customPayload.internalValue = undefined;
            this._imageResponseCard.internalValue = undefined;
            this._plainTextMessage.internalValue = undefined;
            this._ssmlMessage.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._customPayload.internalValue = value.customPayload;
            this._imageResponseCard.internalValue = value.imageResponseCard;
            this._plainTextMessage.internalValue = value.plainTextMessage;
            this._ssmlMessage.internalValue = value.ssmlMessage;
        }
    }
    get customPayload() {
        return this._customPayload;
    }
    putCustomPayload(value) {
        this._customPayload.internalValue = value;
    }
    resetCustomPayload() {
        this._customPayload.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customPayloadInput() {
        return this._customPayload.internalValue;
    }
    get imageResponseCard() {
        return this._imageResponseCard;
    }
    putImageResponseCard(value) {
        this._imageResponseCard.internalValue = value;
    }
    resetImageResponseCard() {
        this._imageResponseCard.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageResponseCardInput() {
        return this._imageResponseCard.internalValue;
    }
    get plainTextMessage() {
        return this._plainTextMessage;
    }
    putPlainTextMessage(value) {
        this._plainTextMessage.internalValue = value;
    }
    resetPlainTextMessage() {
        this._plainTextMessage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get plainTextMessageInput() {
        return this._plainTextMessage.internalValue;
    }
    get ssmlMessage() {
        return this._ssmlMessage;
    }
    putSsmlMessage(value) {
        this._ssmlMessage.internalValue = value;
    }
    resetSsmlMessage() {
        this._ssmlMessage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ssmlMessageInput() {
        return this._ssmlMessage.internalValue;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageOutputReference = Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageOutputReference;
_20 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageOutputReference[_20] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageList = Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageList;
_21 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageList[_21] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayloadToTerraform = lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayloadToTerraform;
function lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayloadToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayloadToHclTerraform = lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayloadToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayloadOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._value = value.value;
        }
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayloadOutputReference = Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayloadOutputReference;
_22 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayloadOutputReference[_22] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayloadOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayloadList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayloadOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayloadList = Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayloadList;
_23 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayloadList[_23] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayloadList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButtonToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        text: cdktf.stringToTerraform(struct.text),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButtonToTerraform = lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButtonToTerraform;
function lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButtonToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        text: {
            value: cdktf.stringToHclTerraform(struct.text),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButtonToHclTerraform = lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButtonToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButtonOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._text !== undefined) {
            hasAnyValues = true;
            internalValueResult.text = this._text;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._text = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._text = value.text;
            this._value = value.value;
        }
    }
    get text() {
        return this.getStringAttribute('text');
    }
    set text(value) {
        this._text = value;
    }
    // Temporarily expose input value. Use with caution.
    get textInput() {
        return this._text;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButtonOutputReference = Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButtonOutputReference;
_24 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButtonOutputReference[_24] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButtonOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButtonList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButtonOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButtonList = Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButtonList;
_25 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButtonList[_25] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButtonList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        image_url: cdktf.stringToTerraform(struct.imageUrl),
        subtitle: cdktf.stringToTerraform(struct.subtitle),
        title: cdktf.stringToTerraform(struct.title),
        button: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButtonToTerraform, true)(struct.button),
    };
}
exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardToTerraform = lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardToTerraform;
function lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        image_url: {
            value: cdktf.stringToHclTerraform(struct.imageUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        subtitle: {
            value: cdktf.stringToHclTerraform(struct.subtitle),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        title: {
            value: cdktf.stringToHclTerraform(struct.title),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        button: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButtonToHclTerraform, true)(struct.button),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButtonList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardToHclTerraform = lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // button - computed: false, optional: true, required: false
        this._button = new Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButtonList(this, "button", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._imageUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageUrl = this._imageUrl;
        }
        if (this._subtitle !== undefined) {
            hasAnyValues = true;
            internalValueResult.subtitle = this._subtitle;
        }
        if (this._title !== undefined) {
            hasAnyValues = true;
            internalValueResult.title = this._title;
        }
        if (this._button?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.button = this._button?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._imageUrl = undefined;
            this._subtitle = undefined;
            this._title = undefined;
            this._button.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._imageUrl = value.imageUrl;
            this._subtitle = value.subtitle;
            this._title = value.title;
            this._button.internalValue = value.button;
        }
    }
    get imageUrl() {
        return this.getStringAttribute('image_url');
    }
    set imageUrl(value) {
        this._imageUrl = value;
    }
    resetImageUrl() {
        this._imageUrl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageUrlInput() {
        return this._imageUrl;
    }
    get subtitle() {
        return this.getStringAttribute('subtitle');
    }
    set subtitle(value) {
        this._subtitle = value;
    }
    resetSubtitle() {
        this._subtitle = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subtitleInput() {
        return this._subtitle;
    }
    get title() {
        return this.getStringAttribute('title');
    }
    set title(value) {
        this._title = value;
    }
    // Temporarily expose input value. Use with caution.
    get titleInput() {
        return this._title;
    }
    get button() {
        return this._button;
    }
    putButton(value) {
        this._button.internalValue = value;
    }
    resetButton() {
        this._button.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get buttonInput() {
        return this._button.internalValue;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardOutputReference = Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardOutputReference;
_26 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardOutputReference[_26] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardList = Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardList;
_27 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardList[_27] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessageToTerraform = lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessageToTerraform;
function lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessageToHclTerraform = lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessageToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._value = value.value;
        }
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessageOutputReference = Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessageOutputReference;
_28 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessageOutputReference[_28] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessageOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessageList = Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessageList;
_29 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessageList[_29] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessageList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessageToTerraform = lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessageToTerraform;
function lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessageToHclTerraform = lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessageToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._value = value.value;
        }
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessageOutputReference = Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessageOutputReference;
_30 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessageOutputReference[_30] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessageOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessageList = Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessageList;
_31 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessageList[_31] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessageList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        custom_payload: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayloadToTerraform, true)(struct.customPayload),
        image_response_card: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardToTerraform, true)(struct.imageResponseCard),
        plain_text_message: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessageToTerraform, true)(struct.plainTextMessage),
        ssml_message: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessageToTerraform, true)(struct.ssmlMessage),
    };
}
exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationToTerraform = lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationToTerraform;
function lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        custom_payload: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayloadToHclTerraform, true)(struct.customPayload),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayloadList",
        },
        image_response_card: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardToHclTerraform, true)(struct.imageResponseCard),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardList",
        },
        plain_text_message: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessageToHclTerraform, true)(struct.plainTextMessage),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessageList",
        },
        ssml_message: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessageToHclTerraform, true)(struct.ssmlMessage),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessageList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationToHclTerraform = lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // custom_payload - computed: false, optional: true, required: false
        this._customPayload = new Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayloadList(this, "custom_payload", false);
        // image_response_card - computed: false, optional: true, required: false
        this._imageResponseCard = new Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardList(this, "image_response_card", false);
        // plain_text_message - computed: false, optional: true, required: false
        this._plainTextMessage = new Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessageList(this, "plain_text_message", false);
        // ssml_message - computed: false, optional: true, required: false
        this._ssmlMessage = new Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessageList(this, "ssml_message", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._customPayload?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customPayload = this._customPayload?.internalValue;
        }
        if (this._imageResponseCard?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageResponseCard = this._imageResponseCard?.internalValue;
        }
        if (this._plainTextMessage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.plainTextMessage = this._plainTextMessage?.internalValue;
        }
        if (this._ssmlMessage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ssmlMessage = this._ssmlMessage?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._customPayload.internalValue = undefined;
            this._imageResponseCard.internalValue = undefined;
            this._plainTextMessage.internalValue = undefined;
            this._ssmlMessage.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._customPayload.internalValue = value.customPayload;
            this._imageResponseCard.internalValue = value.imageResponseCard;
            this._plainTextMessage.internalValue = value.plainTextMessage;
            this._ssmlMessage.internalValue = value.ssmlMessage;
        }
    }
    get customPayload() {
        return this._customPayload;
    }
    putCustomPayload(value) {
        this._customPayload.internalValue = value;
    }
    resetCustomPayload() {
        this._customPayload.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customPayloadInput() {
        return this._customPayload.internalValue;
    }
    get imageResponseCard() {
        return this._imageResponseCard;
    }
    putImageResponseCard(value) {
        this._imageResponseCard.internalValue = value;
    }
    resetImageResponseCard() {
        this._imageResponseCard.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageResponseCardInput() {
        return this._imageResponseCard.internalValue;
    }
    get plainTextMessage() {
        return this._plainTextMessage;
    }
    putPlainTextMessage(value) {
        this._plainTextMessage.internalValue = value;
    }
    resetPlainTextMessage() {
        this._plainTextMessage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get plainTextMessageInput() {
        return this._plainTextMessage.internalValue;
    }
    get ssmlMessage() {
        return this._ssmlMessage;
    }
    putSsmlMessage(value) {
        this._ssmlMessage.internalValue = value;
    }
    resetSsmlMessage() {
        this._ssmlMessage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ssmlMessageInput() {
        return this._ssmlMessage.internalValue;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationOutputReference = Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationOutputReference;
_32 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationOutputReference[_32] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationList = Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationList;
_33 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationList[_33] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        message: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageToTerraform, true)(struct.message),
        variation: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationToTerraform, true)(struct.variation),
    };
}
exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupToTerraform = lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupToTerraform;
function lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        message: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageToHclTerraform, true)(struct.message),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageList",
        },
        variation: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationToHclTerraform, true)(struct.variation),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupToHclTerraform = lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // message - computed: false, optional: true, required: false
        this._message = new Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupMessageList(this, "message", false);
        // variation - computed: false, optional: true, required: false
        this._variation = new Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupVariationList(this, "variation", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._message?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.message = this._message?.internalValue;
        }
        if (this._variation?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.variation = this._variation?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._message.internalValue = undefined;
            this._variation.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._message.internalValue = value.message;
            this._variation.internalValue = value.variation;
        }
    }
    get message() {
        return this._message;
    }
    putMessage(value) {
        this._message.internalValue = value;
    }
    resetMessage() {
        this._message.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get messageInput() {
        return this._message.internalValue;
    }
    get variation() {
        return this._variation;
    }
    putVariation(value) {
        this._variation.internalValue = value;
    }
    resetVariation() {
        this._variation.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get variationInput() {
        return this._variation.internalValue;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupOutputReference = Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupOutputReference;
_34 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupOutputReference[_34] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupList = Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupList;
_35 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupList[_35] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingFailureResponseToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_interrupt: cdktf.booleanToTerraform(struct.allowInterrupt),
        message_group: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupToTerraform, true)(struct.messageGroup),
    };
}
exports.lexv2ModelsIntentConfirmationSettingFailureResponseToTerraform = lexv2ModelsIntentConfirmationSettingFailureResponseToTerraform;
function lexv2ModelsIntentConfirmationSettingFailureResponseToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allow_interrupt: {
            value: cdktf.booleanToHclTerraform(struct.allowInterrupt),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        message_group: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupToHclTerraform, true)(struct.messageGroup),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingFailureResponseToHclTerraform = lexv2ModelsIntentConfirmationSettingFailureResponseToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingFailureResponseOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // message_group - computed: false, optional: true, required: false
        this._messageGroup = new Lexv2ModelsIntentConfirmationSettingFailureResponseMessageGroupList(this, "message_group", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowInterrupt !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowInterrupt = this._allowInterrupt;
        }
        if (this._messageGroup?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.messageGroup = this._messageGroup?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._allowInterrupt = undefined;
            this._messageGroup.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._allowInterrupt = value.allowInterrupt;
            this._messageGroup.internalValue = value.messageGroup;
        }
    }
    get allowInterrupt() {
        return this.getBooleanAttribute('allow_interrupt');
    }
    set allowInterrupt(value) {
        this._allowInterrupt = value;
    }
    resetAllowInterrupt() {
        this._allowInterrupt = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowInterruptInput() {
        return this._allowInterrupt;
    }
    get messageGroup() {
        return this._messageGroup;
    }
    putMessageGroup(value) {
        this._messageGroup.internalValue = value;
    }
    resetMessageGroup() {
        this._messageGroup.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get messageGroupInput() {
        return this._messageGroup.internalValue;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureResponseOutputReference = Lexv2ModelsIntentConfirmationSettingFailureResponseOutputReference;
_36 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureResponseOutputReference[_36] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureResponseOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingFailureResponseList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingFailureResponseOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingFailureResponseList = Lexv2ModelsIntentConfirmationSettingFailureResponseList;
_37 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingFailureResponseList[_37] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingFailureResponseList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayloadToTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayloadToTerraform;
function lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayloadToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayloadToHclTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayloadToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayloadOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._value = value.value;
        }
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayloadOutputReference = Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayloadOutputReference;
_38 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayloadOutputReference[_38] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayloadOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayloadList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayloadOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayloadList = Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayloadList;
_39 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayloadList[_39] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayloadList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        text: cdktf.stringToTerraform(struct.text),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonToTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonToTerraform;
function lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        text: {
            value: cdktf.stringToHclTerraform(struct.text),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonToHclTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._text !== undefined) {
            hasAnyValues = true;
            internalValueResult.text = this._text;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._text = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._text = value.text;
            this._value = value.value;
        }
    }
    get text() {
        return this.getStringAttribute('text');
    }
    set text(value) {
        this._text = value;
    }
    // Temporarily expose input value. Use with caution.
    get textInput() {
        return this._text;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonOutputReference = Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonOutputReference;
_40 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonOutputReference[_40] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonList = Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonList;
_41 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonList[_41] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        image_url: cdktf.stringToTerraform(struct.imageUrl),
        subtitle: cdktf.stringToTerraform(struct.subtitle),
        title: cdktf.stringToTerraform(struct.title),
        button: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonToTerraform, true)(struct.button),
    };
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardToTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardToTerraform;
function lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        image_url: {
            value: cdktf.stringToHclTerraform(struct.imageUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        subtitle: {
            value: cdktf.stringToHclTerraform(struct.subtitle),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        title: {
            value: cdktf.stringToHclTerraform(struct.title),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        button: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonToHclTerraform, true)(struct.button),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardToHclTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // button - computed: false, optional: true, required: false
        this._button = new Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonList(this, "button", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._imageUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageUrl = this._imageUrl;
        }
        if (this._subtitle !== undefined) {
            hasAnyValues = true;
            internalValueResult.subtitle = this._subtitle;
        }
        if (this._title !== undefined) {
            hasAnyValues = true;
            internalValueResult.title = this._title;
        }
        if (this._button?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.button = this._button?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._imageUrl = undefined;
            this._subtitle = undefined;
            this._title = undefined;
            this._button.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._imageUrl = value.imageUrl;
            this._subtitle = value.subtitle;
            this._title = value.title;
            this._button.internalValue = value.button;
        }
    }
    get imageUrl() {
        return this.getStringAttribute('image_url');
    }
    set imageUrl(value) {
        this._imageUrl = value;
    }
    resetImageUrl() {
        this._imageUrl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageUrlInput() {
        return this._imageUrl;
    }
    get subtitle() {
        return this.getStringAttribute('subtitle');
    }
    set subtitle(value) {
        this._subtitle = value;
    }
    resetSubtitle() {
        this._subtitle = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subtitleInput() {
        return this._subtitle;
    }
    get title() {
        return this.getStringAttribute('title');
    }
    set title(value) {
        this._title = value;
    }
    // Temporarily expose input value. Use with caution.
    get titleInput() {
        return this._title;
    }
    get button() {
        return this._button;
    }
    putButton(value) {
        this._button.internalValue = value;
    }
    resetButton() {
        this._button.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get buttonInput() {
        return this._button.internalValue;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardOutputReference = Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardOutputReference;
_42 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardOutputReference[_42] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardList = Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardList;
_43 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardList[_43] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessageToTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessageToTerraform;
function lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessageToHclTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessageToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._value = value.value;
        }
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessageOutputReference = Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessageOutputReference;
_44 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessageOutputReference[_44] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessageOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessageList = Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessageList;
_45 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessageList[_45] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessageList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessageToTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessageToTerraform;
function lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessageToHclTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessageToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._value = value.value;
        }
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessageOutputReference = Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessageOutputReference;
_46 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessageOutputReference[_46] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessageOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessageList = Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessageList;
_47 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessageList[_47] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessageList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        custom_payload: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayloadToTerraform, true)(struct.customPayload),
        image_response_card: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardToTerraform, true)(struct.imageResponseCard),
        plain_text_message: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessageToTerraform, true)(struct.plainTextMessage),
        ssml_message: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessageToTerraform, true)(struct.ssmlMessage),
    };
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageToTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageToTerraform;
function lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        custom_payload: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayloadToHclTerraform, true)(struct.customPayload),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayloadList",
        },
        image_response_card: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardToHclTerraform, true)(struct.imageResponseCard),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardList",
        },
        plain_text_message: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessageToHclTerraform, true)(struct.plainTextMessage),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessageList",
        },
        ssml_message: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessageToHclTerraform, true)(struct.ssmlMessage),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessageList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageToHclTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // custom_payload - computed: false, optional: true, required: false
        this._customPayload = new Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayloadList(this, "custom_payload", false);
        // image_response_card - computed: false, optional: true, required: false
        this._imageResponseCard = new Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardList(this, "image_response_card", false);
        // plain_text_message - computed: false, optional: true, required: false
        this._plainTextMessage = new Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessageList(this, "plain_text_message", false);
        // ssml_message - computed: false, optional: true, required: false
        this._ssmlMessage = new Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessageList(this, "ssml_message", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._customPayload?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customPayload = this._customPayload?.internalValue;
        }
        if (this._imageResponseCard?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageResponseCard = this._imageResponseCard?.internalValue;
        }
        if (this._plainTextMessage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.plainTextMessage = this._plainTextMessage?.internalValue;
        }
        if (this._ssmlMessage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ssmlMessage = this._ssmlMessage?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._customPayload.internalValue = undefined;
            this._imageResponseCard.internalValue = undefined;
            this._plainTextMessage.internalValue = undefined;
            this._ssmlMessage.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._customPayload.internalValue = value.customPayload;
            this._imageResponseCard.internalValue = value.imageResponseCard;
            this._plainTextMessage.internalValue = value.plainTextMessage;
            this._ssmlMessage.internalValue = value.ssmlMessage;
        }
    }
    get customPayload() {
        return this._customPayload;
    }
    putCustomPayload(value) {
        this._customPayload.internalValue = value;
    }
    resetCustomPayload() {
        this._customPayload.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customPayloadInput() {
        return this._customPayload.internalValue;
    }
    get imageResponseCard() {
        return this._imageResponseCard;
    }
    putImageResponseCard(value) {
        this._imageResponseCard.internalValue = value;
    }
    resetImageResponseCard() {
        this._imageResponseCard.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageResponseCardInput() {
        return this._imageResponseCard.internalValue;
    }
    get plainTextMessage() {
        return this._plainTextMessage;
    }
    putPlainTextMessage(value) {
        this._plainTextMessage.internalValue = value;
    }
    resetPlainTextMessage() {
        this._plainTextMessage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get plainTextMessageInput() {
        return this._plainTextMessage.internalValue;
    }
    get ssmlMessage() {
        return this._ssmlMessage;
    }
    putSsmlMessage(value) {
        this._ssmlMessage.internalValue = value;
    }
    resetSsmlMessage() {
        this._ssmlMessage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ssmlMessageInput() {
        return this._ssmlMessage.internalValue;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageOutputReference = Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageOutputReference;
_48 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageOutputReference[_48] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageList = Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageList;
_49 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageList[_49] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayloadToTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayloadToTerraform;
function lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayloadToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayloadToHclTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayloadToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayloadOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._value = value.value;
        }
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayloadOutputReference = Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayloadOutputReference;
_50 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayloadOutputReference[_50] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayloadOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayloadList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayloadOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayloadList = Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayloadList;
_51 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayloadList[_51] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayloadList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        text: cdktf.stringToTerraform(struct.text),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonToTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonToTerraform;
function lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        text: {
            value: cdktf.stringToHclTerraform(struct.text),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonToHclTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._text !== undefined) {
            hasAnyValues = true;
            internalValueResult.text = this._text;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._text = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._text = value.text;
            this._value = value.value;
        }
    }
    get text() {
        return this.getStringAttribute('text');
    }
    set text(value) {
        this._text = value;
    }
    // Temporarily expose input value. Use with caution.
    get textInput() {
        return this._text;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonOutputReference = Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonOutputReference;
_52 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonOutputReference[_52] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonList = Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonList;
_53 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonList[_53] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        image_url: cdktf.stringToTerraform(struct.imageUrl),
        subtitle: cdktf.stringToTerraform(struct.subtitle),
        title: cdktf.stringToTerraform(struct.title),
        button: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonToTerraform, true)(struct.button),
    };
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardToTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardToTerraform;
function lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        image_url: {
            value: cdktf.stringToHclTerraform(struct.imageUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        subtitle: {
            value: cdktf.stringToHclTerraform(struct.subtitle),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        title: {
            value: cdktf.stringToHclTerraform(struct.title),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        button: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonToHclTerraform, true)(struct.button),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardToHclTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // button - computed: false, optional: true, required: false
        this._button = new Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonList(this, "button", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._imageUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageUrl = this._imageUrl;
        }
        if (this._subtitle !== undefined) {
            hasAnyValues = true;
            internalValueResult.subtitle = this._subtitle;
        }
        if (this._title !== undefined) {
            hasAnyValues = true;
            internalValueResult.title = this._title;
        }
        if (this._button?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.button = this._button?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._imageUrl = undefined;
            this._subtitle = undefined;
            this._title = undefined;
            this._button.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._imageUrl = value.imageUrl;
            this._subtitle = value.subtitle;
            this._title = value.title;
            this._button.internalValue = value.button;
        }
    }
    get imageUrl() {
        return this.getStringAttribute('image_url');
    }
    set imageUrl(value) {
        this._imageUrl = value;
    }
    resetImageUrl() {
        this._imageUrl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageUrlInput() {
        return this._imageUrl;
    }
    get subtitle() {
        return this.getStringAttribute('subtitle');
    }
    set subtitle(value) {
        this._subtitle = value;
    }
    resetSubtitle() {
        this._subtitle = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subtitleInput() {
        return this._subtitle;
    }
    get title() {
        return this.getStringAttribute('title');
    }
    set title(value) {
        this._title = value;
    }
    // Temporarily expose input value. Use with caution.
    get titleInput() {
        return this._title;
    }
    get button() {
        return this._button;
    }
    putButton(value) {
        this._button.internalValue = value;
    }
    resetButton() {
        this._button.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get buttonInput() {
        return this._button.internalValue;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardOutputReference = Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardOutputReference;
_54 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardOutputReference[_54] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardList = Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardList;
_55 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardList[_55] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessageToTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessageToTerraform;
function lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessageToHclTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessageToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._value = value.value;
        }
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessageOutputReference = Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessageOutputReference;
_56 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessageOutputReference[_56] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessageOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessageList = Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessageList;
_57 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessageList[_57] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessageList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessageToTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessageToTerraform;
function lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessageToHclTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessageToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._value = value.value;
        }
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessageOutputReference = Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessageOutputReference;
_58 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessageOutputReference[_58] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessageOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessageList = Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessageList;
_59 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessageList[_59] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessageList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        custom_payload: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayloadToTerraform, true)(struct.customPayload),
        image_response_card: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardToTerraform, true)(struct.imageResponseCard),
        plain_text_message: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessageToTerraform, true)(struct.plainTextMessage),
        ssml_message: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessageToTerraform, true)(struct.ssmlMessage),
    };
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationToTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationToTerraform;
function lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        custom_payload: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayloadToHclTerraform, true)(struct.customPayload),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayloadList",
        },
        image_response_card: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardToHclTerraform, true)(struct.imageResponseCard),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardList",
        },
        plain_text_message: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessageToHclTerraform, true)(struct.plainTextMessage),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessageList",
        },
        ssml_message: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessageToHclTerraform, true)(struct.ssmlMessage),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessageList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationToHclTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // custom_payload - computed: false, optional: true, required: false
        this._customPayload = new Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayloadList(this, "custom_payload", false);
        // image_response_card - computed: false, optional: true, required: false
        this._imageResponseCard = new Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardList(this, "image_response_card", false);
        // plain_text_message - computed: false, optional: true, required: false
        this._plainTextMessage = new Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessageList(this, "plain_text_message", false);
        // ssml_message - computed: false, optional: true, required: false
        this._ssmlMessage = new Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessageList(this, "ssml_message", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._customPayload?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customPayload = this._customPayload?.internalValue;
        }
        if (this._imageResponseCard?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageResponseCard = this._imageResponseCard?.internalValue;
        }
        if (this._plainTextMessage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.plainTextMessage = this._plainTextMessage?.internalValue;
        }
        if (this._ssmlMessage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ssmlMessage = this._ssmlMessage?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._customPayload.internalValue = undefined;
            this._imageResponseCard.internalValue = undefined;
            this._plainTextMessage.internalValue = undefined;
            this._ssmlMessage.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._customPayload.internalValue = value.customPayload;
            this._imageResponseCard.internalValue = value.imageResponseCard;
            this._plainTextMessage.internalValue = value.plainTextMessage;
            this._ssmlMessage.internalValue = value.ssmlMessage;
        }
    }
    get customPayload() {
        return this._customPayload;
    }
    putCustomPayload(value) {
        this._customPayload.internalValue = value;
    }
    resetCustomPayload() {
        this._customPayload.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customPayloadInput() {
        return this._customPayload.internalValue;
    }
    get imageResponseCard() {
        return this._imageResponseCard;
    }
    putImageResponseCard(value) {
        this._imageResponseCard.internalValue = value;
    }
    resetImageResponseCard() {
        this._imageResponseCard.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageResponseCardInput() {
        return this._imageResponseCard.internalValue;
    }
    get plainTextMessage() {
        return this._plainTextMessage;
    }
    putPlainTextMessage(value) {
        this._plainTextMessage.internalValue = value;
    }
    resetPlainTextMessage() {
        this._plainTextMessage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get plainTextMessageInput() {
        return this._plainTextMessage.internalValue;
    }
    get ssmlMessage() {
        return this._ssmlMessage;
    }
    putSsmlMessage(value) {
        this._ssmlMessage.internalValue = value;
    }
    resetSsmlMessage() {
        this._ssmlMessage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ssmlMessageInput() {
        return this._ssmlMessage.internalValue;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationOutputReference = Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationOutputReference;
_60 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationOutputReference[_60] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationList = Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationList;
_61 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationList[_61] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        message: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageToTerraform, true)(struct.message),
        variation: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationToTerraform, true)(struct.variation),
    };
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupToTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupToTerraform;
function lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        message: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageToHclTerraform, true)(struct.message),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageList",
        },
        variation: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationToHclTerraform, true)(struct.variation),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupToHclTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // message - computed: false, optional: true, required: false
        this._message = new Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageList(this, "message", false);
        // variation - computed: false, optional: true, required: false
        this._variation = new Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationList(this, "variation", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._message?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.message = this._message?.internalValue;
        }
        if (this._variation?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.variation = this._variation?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._message.internalValue = undefined;
            this._variation.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._message.internalValue = value.message;
            this._variation.internalValue = value.variation;
        }
    }
    get message() {
        return this._message;
    }
    putMessage(value) {
        this._message.internalValue = value;
    }
    resetMessage() {
        this._message.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get messageInput() {
        return this._message.internalValue;
    }
    get variation() {
        return this._variation;
    }
    putVariation(value) {
        this._variation.internalValue = value;
    }
    resetVariation() {
        this._variation.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get variationInput() {
        return this._variation.internalValue;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupOutputReference = Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupOutputReference;
_62 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupOutputReference[_62] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupList = Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupList;
_63 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupList[_63] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_audio_input: cdktf.booleanToTerraform(struct.allowAudioInput),
        allow_dtmf_input: cdktf.booleanToTerraform(struct.allowDtmfInput),
    };
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesToTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesToTerraform;
function lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allow_audio_input: {
            value: cdktf.booleanToHclTerraform(struct.allowAudioInput),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        allow_dtmf_input: {
            value: cdktf.booleanToHclTerraform(struct.allowDtmfInput),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesToHclTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowAudioInput !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowAudioInput = this._allowAudioInput;
        }
        if (this._allowDtmfInput !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowDtmfInput = this._allowDtmfInput;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._allowAudioInput = undefined;
            this._allowDtmfInput = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._allowAudioInput = value.allowAudioInput;
            this._allowDtmfInput = value.allowDtmfInput;
        }
    }
    get allowAudioInput() {
        return this.getBooleanAttribute('allow_audio_input');
    }
    set allowAudioInput(value) {
        this._allowAudioInput = value;
    }
    // Temporarily expose input value. Use with caution.
    get allowAudioInputInput() {
        return this._allowAudioInput;
    }
    get allowDtmfInput() {
        return this.getBooleanAttribute('allow_dtmf_input');
    }
    set allowDtmfInput(value) {
        this._allowDtmfInput = value;
    }
    // Temporarily expose input value. Use with caution.
    get allowDtmfInputInput() {
        return this._allowDtmfInput;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesOutputReference = Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesOutputReference;
_64 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesOutputReference[_64] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesList = Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesList;
_65 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesList[_65] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        end_timeout_ms: cdktf.numberToTerraform(struct.endTimeoutMs),
        max_length_ms: cdktf.numberToTerraform(struct.maxLengthMs),
    };
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationToTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationToTerraform;
function lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        end_timeout_ms: {
            value: cdktf.numberToHclTerraform(struct.endTimeoutMs),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        max_length_ms: {
            value: cdktf.numberToHclTerraform(struct.maxLengthMs),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationToHclTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._endTimeoutMs !== undefined) {
            hasAnyValues = true;
            internalValueResult.endTimeoutMs = this._endTimeoutMs;
        }
        if (this._maxLengthMs !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxLengthMs = this._maxLengthMs;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._endTimeoutMs = undefined;
            this._maxLengthMs = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._endTimeoutMs = value.endTimeoutMs;
            this._maxLengthMs = value.maxLengthMs;
        }
    }
    get endTimeoutMs() {
        return this.getNumberAttribute('end_timeout_ms');
    }
    set endTimeoutMs(value) {
        this._endTimeoutMs = value;
    }
    // Temporarily expose input value. Use with caution.
    get endTimeoutMsInput() {
        return this._endTimeoutMs;
    }
    get maxLengthMs() {
        return this.getNumberAttribute('max_length_ms');
    }
    set maxLengthMs(value) {
        this._maxLengthMs = value;
    }
    // Temporarily expose input value. Use with caution.
    get maxLengthMsInput() {
        return this._maxLengthMs;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationOutputReference = Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationOutputReference;
_66 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationOutputReference[_66] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationList = Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationList;
_67 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationList[_67] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        deletion_character: cdktf.stringToTerraform(struct.deletionCharacter),
        end_character: cdktf.stringToTerraform(struct.endCharacter),
        end_timeout_ms: cdktf.numberToTerraform(struct.endTimeoutMs),
        max_length: cdktf.numberToTerraform(struct.maxLength),
    };
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationToTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationToTerraform;
function lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        deletion_character: {
            value: cdktf.stringToHclTerraform(struct.deletionCharacter),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        end_character: {
            value: cdktf.stringToHclTerraform(struct.endCharacter),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        end_timeout_ms: {
            value: cdktf.numberToHclTerraform(struct.endTimeoutMs),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        max_length: {
            value: cdktf.numberToHclTerraform(struct.maxLength),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationToHclTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._deletionCharacter !== undefined) {
            hasAnyValues = true;
            internalValueResult.deletionCharacter = this._deletionCharacter;
        }
        if (this._endCharacter !== undefined) {
            hasAnyValues = true;
            internalValueResult.endCharacter = this._endCharacter;
        }
        if (this._endTimeoutMs !== undefined) {
            hasAnyValues = true;
            internalValueResult.endTimeoutMs = this._endTimeoutMs;
        }
        if (this._maxLength !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxLength = this._maxLength;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._deletionCharacter = undefined;
            this._endCharacter = undefined;
            this._endTimeoutMs = undefined;
            this._maxLength = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._deletionCharacter = value.deletionCharacter;
            this._endCharacter = value.endCharacter;
            this._endTimeoutMs = value.endTimeoutMs;
            this._maxLength = value.maxLength;
        }
    }
    get deletionCharacter() {
        return this.getStringAttribute('deletion_character');
    }
    set deletionCharacter(value) {
        this._deletionCharacter = value;
    }
    // Temporarily expose input value. Use with caution.
    get deletionCharacterInput() {
        return this._deletionCharacter;
    }
    get endCharacter() {
        return this.getStringAttribute('end_character');
    }
    set endCharacter(value) {
        this._endCharacter = value;
    }
    // Temporarily expose input value. Use with caution.
    get endCharacterInput() {
        return this._endCharacter;
    }
    get endTimeoutMs() {
        return this.getNumberAttribute('end_timeout_ms');
    }
    set endTimeoutMs(value) {
        this._endTimeoutMs = value;
    }
    // Temporarily expose input value. Use with caution.
    get endTimeoutMsInput() {
        return this._endTimeoutMs;
    }
    get maxLength() {
        return this.getNumberAttribute('max_length');
    }
    set maxLength(value) {
        this._maxLength = value;
    }
    // Temporarily expose input value. Use with caution.
    get maxLengthInput() {
        return this._maxLength;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationOutputReference = Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationOutputReference;
_68 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationOutputReference[_68] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationList = Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationList;
_69 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationList[_69] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        start_timeout_ms: cdktf.numberToTerraform(struct.startTimeoutMs),
        audio_specification: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationToTerraform, true)(struct.audioSpecification),
        dtmf_specification: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationToTerraform, true)(struct.dtmfSpecification),
    };
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationToTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationToTerraform;
function lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        start_timeout_ms: {
            value: cdktf.numberToHclTerraform(struct.startTimeoutMs),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        audio_specification: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationToHclTerraform, true)(struct.audioSpecification),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationList",
        },
        dtmf_specification: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationToHclTerraform, true)(struct.dtmfSpecification),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationToHclTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // audio_specification - computed: false, optional: true, required: false
        this._audioSpecification = new Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationList(this, "audio_specification", false);
        // dtmf_specification - computed: false, optional: true, required: false
        this._dtmfSpecification = new Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationList(this, "dtmf_specification", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._startTimeoutMs !== undefined) {
            hasAnyValues = true;
            internalValueResult.startTimeoutMs = this._startTimeoutMs;
        }
        if (this._audioSpecification?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioSpecification = this._audioSpecification?.internalValue;
        }
        if (this._dtmfSpecification?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dtmfSpecification = this._dtmfSpecification?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._startTimeoutMs = undefined;
            this._audioSpecification.internalValue = undefined;
            this._dtmfSpecification.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._startTimeoutMs = value.startTimeoutMs;
            this._audioSpecification.internalValue = value.audioSpecification;
            this._dtmfSpecification.internalValue = value.dtmfSpecification;
        }
    }
    get startTimeoutMs() {
        return this.getNumberAttribute('start_timeout_ms');
    }
    set startTimeoutMs(value) {
        this._startTimeoutMs = value;
    }
    // Temporarily expose input value. Use with caution.
    get startTimeoutMsInput() {
        return this._startTimeoutMs;
    }
    get audioSpecification() {
        return this._audioSpecification;
    }
    putAudioSpecification(value) {
        this._audioSpecification.internalValue = value;
    }
    resetAudioSpecification() {
        this._audioSpecification.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioSpecificationInput() {
        return this._audioSpecification.internalValue;
    }
    get dtmfSpecification() {
        return this._dtmfSpecification;
    }
    putDtmfSpecification(value) {
        this._dtmfSpecification.internalValue = value;
    }
    resetDtmfSpecification() {
        this._dtmfSpecification.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dtmfSpecificationInput() {
        return this._dtmfSpecification.internalValue;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationOutputReference = Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationOutputReference;
_70 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationOutputReference[_70] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationList = Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationList;
_71 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationList[_71] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        start_timeout_ms: cdktf.numberToTerraform(struct.startTimeoutMs),
    };
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationToTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationToTerraform;
function lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        start_timeout_ms: {
            value: cdktf.numberToHclTerraform(struct.startTimeoutMs),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationToHclTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._startTimeoutMs !== undefined) {
            hasAnyValues = true;
            internalValueResult.startTimeoutMs = this._startTimeoutMs;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._startTimeoutMs = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._startTimeoutMs = value.startTimeoutMs;
        }
    }
    get startTimeoutMs() {
        return this.getNumberAttribute('start_timeout_ms');
    }
    set startTimeoutMs(value) {
        this._startTimeoutMs = value;
    }
    // Temporarily expose input value. Use with caution.
    get startTimeoutMsInput() {
        return this._startTimeoutMs;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationOutputReference = Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationOutputReference;
_72 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationOutputReference[_72] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationList = Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationList;
_73 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationList[_73] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_interrupt: cdktf.booleanToTerraform(struct.allowInterrupt),
        map_block_key: cdktf.stringToTerraform(struct.mapBlockKey),
        allowed_input_types: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesToTerraform, true)(struct.allowedInputTypes),
        audio_and_dtmf_input_specification: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationToTerraform, true)(struct.audioAndDtmfInputSpecification),
        text_input_specification: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationToTerraform, true)(struct.textInputSpecification),
    };
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationToTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationToTerraform;
function lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allow_interrupt: {
            value: cdktf.booleanToHclTerraform(struct.allowInterrupt),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        map_block_key: {
            value: cdktf.stringToHclTerraform(struct.mapBlockKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        allowed_input_types: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesToHclTerraform, true)(struct.allowedInputTypes),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesList",
        },
        audio_and_dtmf_input_specification: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationToHclTerraform, true)(struct.audioAndDtmfInputSpecification),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationList",
        },
        text_input_specification: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationToHclTerraform, true)(struct.textInputSpecification),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationToHclTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // allowed_input_types - computed: false, optional: true, required: false
        this._allowedInputTypes = new Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesList(this, "allowed_input_types", false);
        // audio_and_dtmf_input_specification - computed: false, optional: true, required: false
        this._audioAndDtmfInputSpecification = new Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationList(this, "audio_and_dtmf_input_specification", false);
        // text_input_specification - computed: false, optional: true, required: false
        this._textInputSpecification = new Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationList(this, "text_input_specification", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowInterrupt !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowInterrupt = this._allowInterrupt;
        }
        if (this._mapBlockKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.mapBlockKey = this._mapBlockKey;
        }
        if (this._allowedInputTypes?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedInputTypes = this._allowedInputTypes?.internalValue;
        }
        if (this._audioAndDtmfInputSpecification?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioAndDtmfInputSpecification = this._audioAndDtmfInputSpecification?.internalValue;
        }
        if (this._textInputSpecification?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.textInputSpecification = this._textInputSpecification?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._allowInterrupt = undefined;
            this._mapBlockKey = undefined;
            this._allowedInputTypes.internalValue = undefined;
            this._audioAndDtmfInputSpecification.internalValue = undefined;
            this._textInputSpecification.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._allowInterrupt = value.allowInterrupt;
            this._mapBlockKey = value.mapBlockKey;
            this._allowedInputTypes.internalValue = value.allowedInputTypes;
            this._audioAndDtmfInputSpecification.internalValue = value.audioAndDtmfInputSpecification;
            this._textInputSpecification.internalValue = value.textInputSpecification;
        }
    }
    get allowInterrupt() {
        return this.getBooleanAttribute('allow_interrupt');
    }
    set allowInterrupt(value) {
        this._allowInterrupt = value;
    }
    resetAllowInterrupt() {
        this._allowInterrupt = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowInterruptInput() {
        return this._allowInterrupt;
    }
    get mapBlockKey() {
        return this.getStringAttribute('map_block_key');
    }
    set mapBlockKey(value) {
        this._mapBlockKey = value;
    }
    // Temporarily expose input value. Use with caution.
    get mapBlockKeyInput() {
        return this._mapBlockKey;
    }
    get allowedInputTypes() {
        return this._allowedInputTypes;
    }
    putAllowedInputTypes(value) {
        this._allowedInputTypes.internalValue = value;
    }
    resetAllowedInputTypes() {
        this._allowedInputTypes.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedInputTypesInput() {
        return this._allowedInputTypes.internalValue;
    }
    get audioAndDtmfInputSpecification() {
        return this._audioAndDtmfInputSpecification;
    }
    putAudioAndDtmfInputSpecification(value) {
        this._audioAndDtmfInputSpecification.internalValue = value;
    }
    resetAudioAndDtmfInputSpecification() {
        this._audioAndDtmfInputSpecification.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioAndDtmfInputSpecificationInput() {
        return this._audioAndDtmfInputSpecification.internalValue;
    }
    get textInputSpecification() {
        return this._textInputSpecification;
    }
    putTextInputSpecification(value) {
        this._textInputSpecification.internalValue = value;
    }
    resetTextInputSpecification() {
        this._textInputSpecification.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get textInputSpecificationInput() {
        return this._textInputSpecification.internalValue;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationOutputReference = Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationOutputReference;
_74 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationOutputReference[_74] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationList = Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationList;
_75 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationList[_75] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingPromptSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_interrupt: cdktf.booleanToTerraform(struct.allowInterrupt),
        max_retries: cdktf.numberToTerraform(struct.maxRetries),
        message_selection_strategy: cdktf.stringToTerraform(struct.messageSelectionStrategy),
        message_group: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupToTerraform, true)(struct.messageGroup),
        prompt_attempts_specification: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationToTerraform, true)(struct.promptAttemptsSpecification),
    };
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationToTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationToTerraform;
function lexv2ModelsIntentConfirmationSettingPromptSpecificationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allow_interrupt: {
            value: cdktf.booleanToHclTerraform(struct.allowInterrupt),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        max_retries: {
            value: cdktf.numberToHclTerraform(struct.maxRetries),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        message_selection_strategy: {
            value: cdktf.stringToHclTerraform(struct.messageSelectionStrategy),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        message_group: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupToHclTerraform, true)(struct.messageGroup),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupList",
        },
        prompt_attempts_specification: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationToHclTerraform, true)(struct.promptAttemptsSpecification),
            isBlock: true,
            type: "set",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingPromptSpecificationToHclTerraform = lexv2ModelsIntentConfirmationSettingPromptSpecificationToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // message_group - computed: false, optional: true, required: false
        this._messageGroup = new Lexv2ModelsIntentConfirmationSettingPromptSpecificationMessageGroupList(this, "message_group", false);
        // prompt_attempts_specification - computed: false, optional: true, required: false
        this._promptAttemptsSpecification = new Lexv2ModelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationList(this, "prompt_attempts_specification", true);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowInterrupt !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowInterrupt = this._allowInterrupt;
        }
        if (this._maxRetries !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxRetries = this._maxRetries;
        }
        if (this._messageSelectionStrategy !== undefined) {
            hasAnyValues = true;
            internalValueResult.messageSelectionStrategy = this._messageSelectionStrategy;
        }
        if (this._messageGroup?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.messageGroup = this._messageGroup?.internalValue;
        }
        if (this._promptAttemptsSpecification?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.promptAttemptsSpecification = this._promptAttemptsSpecification?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._allowInterrupt = undefined;
            this._maxRetries = undefined;
            this._messageSelectionStrategy = undefined;
            this._messageGroup.internalValue = undefined;
            this._promptAttemptsSpecification.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._allowInterrupt = value.allowInterrupt;
            this._maxRetries = value.maxRetries;
            this._messageSelectionStrategy = value.messageSelectionStrategy;
            this._messageGroup.internalValue = value.messageGroup;
            this._promptAttemptsSpecification.internalValue = value.promptAttemptsSpecification;
        }
    }
    get allowInterrupt() {
        return this.getBooleanAttribute('allow_interrupt');
    }
    set allowInterrupt(value) {
        this._allowInterrupt = value;
    }
    resetAllowInterrupt() {
        this._allowInterrupt = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowInterruptInput() {
        return this._allowInterrupt;
    }
    get maxRetries() {
        return this.getNumberAttribute('max_retries');
    }
    set maxRetries(value) {
        this._maxRetries = value;
    }
    // Temporarily expose input value. Use with caution.
    get maxRetriesInput() {
        return this._maxRetries;
    }
    get messageSelectionStrategy() {
        return this.getStringAttribute('message_selection_strategy');
    }
    set messageSelectionStrategy(value) {
        this._messageSelectionStrategy = value;
    }
    resetMessageSelectionStrategy() {
        this._messageSelectionStrategy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get messageSelectionStrategyInput() {
        return this._messageSelectionStrategy;
    }
    get messageGroup() {
        return this._messageGroup;
    }
    putMessageGroup(value) {
        this._messageGroup.internalValue = value;
    }
    resetMessageGroup() {
        this._messageGroup.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get messageGroupInput() {
        return this._messageGroup.internalValue;
    }
    get promptAttemptsSpecification() {
        return this._promptAttemptsSpecification;
    }
    putPromptAttemptsSpecification(value) {
        this._promptAttemptsSpecification.internalValue = value;
    }
    resetPromptAttemptsSpecification() {
        this._promptAttemptsSpecification.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get promptAttemptsSpecificationInput() {
        return this._promptAttemptsSpecification.internalValue;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationOutputReference = Lexv2ModelsIntentConfirmationSettingPromptSpecificationOutputReference;
_76 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationOutputReference[_76] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingPromptSpecificationList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingPromptSpecificationOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingPromptSpecificationList = Lexv2ModelsIntentConfirmationSettingPromptSpecificationList;
_77 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingPromptSpecificationList[_77] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingPromptSpecificationList", version: "19.15.0" };
function lexv2ModelsIntentConfirmationSettingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        active: cdktf.booleanToTerraform(struct.active),
        code_hook: cdktf.listMapper(structs800_1.lexv2ModelsIntentConfirmationSettingCodeHookToTerraform, true)(struct.codeHook),
        confirmation_conditional: cdktf.listMapper(structs800_1.lexv2ModelsIntentConfirmationSettingConfirmationConditionalToTerraform, true)(struct.confirmationConditional),
        confirmation_next_step: cdktf.listMapper(structs800_1.lexv2ModelsIntentConfirmationSettingConfirmationNextStepToTerraform, true)(struct.confirmationNextStep),
        confirmation_response: cdktf.listMapper(structs1200_1.lexv2ModelsIntentConfirmationSettingConfirmationResponseToTerraform, true)(struct.confirmationResponse),
        declination_conditional: cdktf.listMapper(structs1200_1.lexv2ModelsIntentConfirmationSettingDeclinationConditionalToTerraform, true)(struct.declinationConditional),
        declination_next_step: cdktf.listMapper(structs1200_1.lexv2ModelsIntentConfirmationSettingDeclinationNextStepToTerraform, true)(struct.declinationNextStep),
        declination_response: cdktf.listMapper(structs1200_1.lexv2ModelsIntentConfirmationSettingDeclinationResponseToTerraform, true)(struct.declinationResponse),
        elicitation_code_hook: cdktf.listMapper(structs1200_1.lexv2ModelsIntentConfirmationSettingElicitationCodeHookToTerraform, true)(struct.elicitationCodeHook),
        failure_conditional: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingFailureConditionalToTerraform, true)(struct.failureConditional),
        failure_next_step: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingFailureNextStepToTerraform, true)(struct.failureNextStep),
        failure_response: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingFailureResponseToTerraform, true)(struct.failureResponse),
        prompt_specification: cdktf.listMapper(lexv2ModelsIntentConfirmationSettingPromptSpecificationToTerraform, true)(struct.promptSpecification),
    };
}
exports.lexv2ModelsIntentConfirmationSettingToTerraform = lexv2ModelsIntentConfirmationSettingToTerraform;
function lexv2ModelsIntentConfirmationSettingToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        active: {
            value: cdktf.booleanToHclTerraform(struct.active),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        code_hook: {
            value: cdktf.listMapperHcl(structs800_1.lexv2ModelsIntentConfirmationSettingCodeHookToHclTerraform, true)(struct.codeHook),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingCodeHookList",
        },
        confirmation_conditional: {
            value: cdktf.listMapperHcl(structs800_1.lexv2ModelsIntentConfirmationSettingConfirmationConditionalToHclTerraform, true)(struct.confirmationConditional),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingConfirmationConditionalList",
        },
        confirmation_next_step: {
            value: cdktf.listMapperHcl(structs800_1.lexv2ModelsIntentConfirmationSettingConfirmationNextStepToHclTerraform, true)(struct.confirmationNextStep),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingConfirmationNextStepList",
        },
        confirmation_response: {
            value: cdktf.listMapperHcl(structs1200_1.lexv2ModelsIntentConfirmationSettingConfirmationResponseToHclTerraform, true)(struct.confirmationResponse),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingConfirmationResponseList",
        },
        declination_conditional: {
            value: cdktf.listMapperHcl(structs1200_1.lexv2ModelsIntentConfirmationSettingDeclinationConditionalToHclTerraform, true)(struct.declinationConditional),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingDeclinationConditionalList",
        },
        declination_next_step: {
            value: cdktf.listMapperHcl(structs1200_1.lexv2ModelsIntentConfirmationSettingDeclinationNextStepToHclTerraform, true)(struct.declinationNextStep),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingDeclinationNextStepList",
        },
        declination_response: {
            value: cdktf.listMapperHcl(structs1200_1.lexv2ModelsIntentConfirmationSettingDeclinationResponseToHclTerraform, true)(struct.declinationResponse),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingDeclinationResponseList",
        },
        elicitation_code_hook: {
            value: cdktf.listMapperHcl(structs1200_1.lexv2ModelsIntentConfirmationSettingElicitationCodeHookToHclTerraform, true)(struct.elicitationCodeHook),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingElicitationCodeHookList",
        },
        failure_conditional: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingFailureConditionalToHclTerraform, true)(struct.failureConditional),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingFailureConditionalList",
        },
        failure_next_step: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingFailureNextStepToHclTerraform, true)(struct.failureNextStep),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingFailureNextStepList",
        },
        failure_response: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingFailureResponseToHclTerraform, true)(struct.failureResponse),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingFailureResponseList",
        },
        prompt_specification: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentConfirmationSettingPromptSpecificationToHclTerraform, true)(struct.promptSpecification),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentConfirmationSettingPromptSpecificationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentConfirmationSettingToHclTerraform = lexv2ModelsIntentConfirmationSettingToHclTerraform;
class Lexv2ModelsIntentConfirmationSettingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // code_hook - computed: false, optional: true, required: false
        this._codeHook = new structs800_1.Lexv2ModelsIntentConfirmationSettingCodeHookList(this, "code_hook", false);
        // confirmation_conditional - computed: false, optional: true, required: false
        this._confirmationConditional = new structs800_1.Lexv2ModelsIntentConfirmationSettingConfirmationConditionalList(this, "confirmation_conditional", false);
        // confirmation_next_step - computed: false, optional: true, required: false
        this._confirmationNextStep = new structs800_1.Lexv2ModelsIntentConfirmationSettingConfirmationNextStepList(this, "confirmation_next_step", false);
        // confirmation_response - computed: false, optional: true, required: false
        this._confirmationResponse = new structs1200_1.Lexv2ModelsIntentConfirmationSettingConfirmationResponseList(this, "confirmation_response", false);
        // declination_conditional - computed: false, optional: true, required: false
        this._declinationConditional = new structs1200_1.Lexv2ModelsIntentConfirmationSettingDeclinationConditionalList(this, "declination_conditional", false);
        // declination_next_step - computed: false, optional: true, required: false
        this._declinationNextStep = new structs1200_1.Lexv2ModelsIntentConfirmationSettingDeclinationNextStepList(this, "declination_next_step", false);
        // declination_response - computed: false, optional: true, required: false
        this._declinationResponse = new structs1200_1.Lexv2ModelsIntentConfirmationSettingDeclinationResponseList(this, "declination_response", false);
        // elicitation_code_hook - computed: false, optional: true, required: false
        this._elicitationCodeHook = new structs1200_1.Lexv2ModelsIntentConfirmationSettingElicitationCodeHookList(this, "elicitation_code_hook", false);
        // failure_conditional - computed: false, optional: true, required: false
        this._failureConditional = new Lexv2ModelsIntentConfirmationSettingFailureConditionalList(this, "failure_conditional", false);
        // failure_next_step - computed: false, optional: true, required: false
        this._failureNextStep = new Lexv2ModelsIntentConfirmationSettingFailureNextStepList(this, "failure_next_step", false);
        // failure_response - computed: false, optional: true, required: false
        this._failureResponse = new Lexv2ModelsIntentConfirmationSettingFailureResponseList(this, "failure_response", false);
        // prompt_specification - computed: false, optional: true, required: false
        this._promptSpecification = new Lexv2ModelsIntentConfirmationSettingPromptSpecificationList(this, "prompt_specification", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._active !== undefined) {
            hasAnyValues = true;
            internalValueResult.active = this._active;
        }
        if (this._codeHook?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.codeHook = this._codeHook?.internalValue;
        }
        if (this._confirmationConditional?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.confirmationConditional = this._confirmationConditional?.internalValue;
        }
        if (this._confirmationNextStep?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.confirmationNextStep = this._confirmationNextStep?.internalValue;
        }
        if (this._confirmationResponse?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.confirmationResponse = this._confirmationResponse?.internalValue;
        }
        if (this._declinationConditional?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.declinationConditional = this._declinationConditional?.internalValue;
        }
        if (this._declinationNextStep?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.declinationNextStep = this._declinationNextStep?.internalValue;
        }
        if (this._declinationResponse?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.declinationResponse = this._declinationResponse?.internalValue;
        }
        if (this._elicitationCodeHook?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.elicitationCodeHook = this._elicitationCodeHook?.internalValue;
        }
        if (this._failureConditional?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.failureConditional = this._failureConditional?.internalValue;
        }
        if (this._failureNextStep?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.failureNextStep = this._failureNextStep?.internalValue;
        }
        if (this._failureResponse?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.failureResponse = this._failureResponse?.internalValue;
        }
        if (this._promptSpecification?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.promptSpecification = this._promptSpecification?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._active = undefined;
            this._codeHook.internalValue = undefined;
            this._confirmationConditional.internalValue = undefined;
            this._confirmationNextStep.internalValue = undefined;
            this._confirmationResponse.internalValue = undefined;
            this._declinationConditional.internalValue = undefined;
            this._declinationNextStep.internalValue = undefined;
            this._declinationResponse.internalValue = undefined;
            this._elicitationCodeHook.internalValue = undefined;
            this._failureConditional.internalValue = undefined;
            this._failureNextStep.internalValue = undefined;
            this._failureResponse.internalValue = undefined;
            this._promptSpecification.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._active = value.active;
            this._codeHook.internalValue = value.codeHook;
            this._confirmationConditional.internalValue = value.confirmationConditional;
            this._confirmationNextStep.internalValue = value.confirmationNextStep;
            this._confirmationResponse.internalValue = value.confirmationResponse;
            this._declinationConditional.internalValue = value.declinationConditional;
            this._declinationNextStep.internalValue = value.declinationNextStep;
            this._declinationResponse.internalValue = value.declinationResponse;
            this._elicitationCodeHook.internalValue = value.elicitationCodeHook;
            this._failureConditional.internalValue = value.failureConditional;
            this._failureNextStep.internalValue = value.failureNextStep;
            this._failureResponse.internalValue = value.failureResponse;
            this._promptSpecification.internalValue = value.promptSpecification;
        }
    }
    get active() {
        return this.getBooleanAttribute('active');
    }
    set active(value) {
        this._active = value;
    }
    resetActive() {
        this._active = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get activeInput() {
        return this._active;
    }
    get codeHook() {
        return this._codeHook;
    }
    putCodeHook(value) {
        this._codeHook.internalValue = value;
    }
    resetCodeHook() {
        this._codeHook.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get codeHookInput() {
        return this._codeHook.internalValue;
    }
    get confirmationConditional() {
        return this._confirmationConditional;
    }
    putConfirmationConditional(value) {
        this._confirmationConditional.internalValue = value;
    }
    resetConfirmationConditional() {
        this._confirmationConditional.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get confirmationConditionalInput() {
        return this._confirmationConditional.internalValue;
    }
    get confirmationNextStep() {
        return this._confirmationNextStep;
    }
    putConfirmationNextStep(value) {
        this._confirmationNextStep.internalValue = value;
    }
    resetConfirmationNextStep() {
        this._confirmationNextStep.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get confirmationNextStepInput() {
        return this._confirmationNextStep.internalValue;
    }
    get confirmationResponse() {
        return this._confirmationResponse;
    }
    putConfirmationResponse(value) {
        this._confirmationResponse.internalValue = value;
    }
    resetConfirmationResponse() {
        this._confirmationResponse.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get confirmationResponseInput() {
        return this._confirmationResponse.internalValue;
    }
    get declinationConditional() {
        return this._declinationConditional;
    }
    putDeclinationConditional(value) {
        this._declinationConditional.internalValue = value;
    }
    resetDeclinationConditional() {
        this._declinationConditional.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get declinationConditionalInput() {
        return this._declinationConditional.internalValue;
    }
    get declinationNextStep() {
        return this._declinationNextStep;
    }
    putDeclinationNextStep(value) {
        this._declinationNextStep.internalValue = value;
    }
    resetDeclinationNextStep() {
        this._declinationNextStep.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get declinationNextStepInput() {
        return this._declinationNextStep.internalValue;
    }
    get declinationResponse() {
        return this._declinationResponse;
    }
    putDeclinationResponse(value) {
        this._declinationResponse.internalValue = value;
    }
    resetDeclinationResponse() {
        this._declinationResponse.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get declinationResponseInput() {
        return this._declinationResponse.internalValue;
    }
    get elicitationCodeHook() {
        return this._elicitationCodeHook;
    }
    putElicitationCodeHook(value) {
        this._elicitationCodeHook.internalValue = value;
    }
    resetElicitationCodeHook() {
        this._elicitationCodeHook.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get elicitationCodeHookInput() {
        return this._elicitationCodeHook.internalValue;
    }
    get failureConditional() {
        return this._failureConditional;
    }
    putFailureConditional(value) {
        this._failureConditional.internalValue = value;
    }
    resetFailureConditional() {
        this._failureConditional.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get failureConditionalInput() {
        return this._failureConditional.internalValue;
    }
    get failureNextStep() {
        return this._failureNextStep;
    }
    putFailureNextStep(value) {
        this._failureNextStep.internalValue = value;
    }
    resetFailureNextStep() {
        this._failureNextStep.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get failureNextStepInput() {
        return this._failureNextStep.internalValue;
    }
    get failureResponse() {
        return this._failureResponse;
    }
    putFailureResponse(value) {
        this._failureResponse.internalValue = value;
    }
    resetFailureResponse() {
        this._failureResponse.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get failureResponseInput() {
        return this._failureResponse.internalValue;
    }
    get promptSpecification() {
        return this._promptSpecification;
    }
    putPromptSpecification(value) {
        this._promptSpecification.internalValue = value;
    }
    resetPromptSpecification() {
        this._promptSpecification.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get promptSpecificationInput() {
        return this._promptSpecification.internalValue;
    }
}
exports.Lexv2ModelsIntentConfirmationSettingOutputReference = Lexv2ModelsIntentConfirmationSettingOutputReference;
_78 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingOutputReference[_78] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentConfirmationSettingList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentConfirmationSettingOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentConfirmationSettingList = Lexv2ModelsIntentConfirmationSettingList;
_79 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentConfirmationSettingList[_79] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentConfirmationSettingList", version: "19.15.0" };
function lexv2ModelsIntentDialogCodeHookToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.lexv2ModelsIntentDialogCodeHookToTerraform = lexv2ModelsIntentDialogCodeHookToTerraform;
function lexv2ModelsIntentDialogCodeHookToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentDialogCodeHookToHclTerraform = lexv2ModelsIntentDialogCodeHookToHclTerraform;
class Lexv2ModelsIntentDialogCodeHookOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._enabled = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._enabled = value.enabled;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.Lexv2ModelsIntentDialogCodeHookOutputReference = Lexv2ModelsIntentDialogCodeHookOutputReference;
_80 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentDialogCodeHookOutputReference[_80] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentDialogCodeHookOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentDialogCodeHookList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentDialogCodeHookOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentDialogCodeHookList = Lexv2ModelsIntentDialogCodeHookList;
_81 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentDialogCodeHookList[_81] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentDialogCodeHookList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayloadToTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayloadToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayloadToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayloadToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayloadToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayloadOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._value = value.value;
        }
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayloadOutputReference = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayloadOutputReference;
_82 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayloadOutputReference[_82] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayloadOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayloadList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayloadOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayloadList = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayloadList;
_83 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayloadList[_83] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayloadList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButtonToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        text: cdktf.stringToTerraform(struct.text),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButtonToTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButtonToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButtonToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        text: {
            value: cdktf.stringToHclTerraform(struct.text),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButtonToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButtonToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButtonOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._text !== undefined) {
            hasAnyValues = true;
            internalValueResult.text = this._text;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._text = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._text = value.text;
            this._value = value.value;
        }
    }
    get text() {
        return this.getStringAttribute('text');
    }
    set text(value) {
        this._text = value;
    }
    // Temporarily expose input value. Use with caution.
    get textInput() {
        return this._text;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButtonOutputReference = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButtonOutputReference;
_84 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButtonOutputReference[_84] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButtonOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButtonList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButtonOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButtonList = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButtonList;
_85 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButtonList[_85] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButtonList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        image_url: cdktf.stringToTerraform(struct.imageUrl),
        subtitle: cdktf.stringToTerraform(struct.subtitle),
        title: cdktf.stringToTerraform(struct.title),
        button: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButtonToTerraform, true)(struct.button),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardToTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        image_url: {
            value: cdktf.stringToHclTerraform(struct.imageUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        subtitle: {
            value: cdktf.stringToHclTerraform(struct.subtitle),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        title: {
            value: cdktf.stringToHclTerraform(struct.title),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        button: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButtonToHclTerraform, true)(struct.button),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButtonList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // button - computed: false, optional: true, required: false
        this._button = new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButtonList(this, "button", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._imageUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageUrl = this._imageUrl;
        }
        if (this._subtitle !== undefined) {
            hasAnyValues = true;
            internalValueResult.subtitle = this._subtitle;
        }
        if (this._title !== undefined) {
            hasAnyValues = true;
            internalValueResult.title = this._title;
        }
        if (this._button?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.button = this._button?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._imageUrl = undefined;
            this._subtitle = undefined;
            this._title = undefined;
            this._button.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._imageUrl = value.imageUrl;
            this._subtitle = value.subtitle;
            this._title = value.title;
            this._button.internalValue = value.button;
        }
    }
    get imageUrl() {
        return this.getStringAttribute('image_url');
    }
    set imageUrl(value) {
        this._imageUrl = value;
    }
    resetImageUrl() {
        this._imageUrl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageUrlInput() {
        return this._imageUrl;
    }
    get subtitle() {
        return this.getStringAttribute('subtitle');
    }
    set subtitle(value) {
        this._subtitle = value;
    }
    resetSubtitle() {
        this._subtitle = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subtitleInput() {
        return this._subtitle;
    }
    get title() {
        return this.getStringAttribute('title');
    }
    set title(value) {
        this._title = value;
    }
    // Temporarily expose input value. Use with caution.
    get titleInput() {
        return this._title;
    }
    get button() {
        return this._button;
    }
    putButton(value) {
        this._button.internalValue = value;
    }
    resetButton() {
        this._button.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get buttonInput() {
        return this._button.internalValue;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardOutputReference = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardOutputReference;
_86 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardOutputReference[_86] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardList = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardList;
_87 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardList[_87] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessageToTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessageToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessageToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessageToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._value = value.value;
        }
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessageOutputReference = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessageOutputReference;
_88 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessageOutputReference[_88] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessageOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessageList = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessageList;
_89 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessageList[_89] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessageList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessageToTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessageToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessageToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessageToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._value = value.value;
        }
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessageOutputReference = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessageOutputReference;
_90 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessageOutputReference[_90] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessageOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessageList = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessageList;
_91 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessageList[_91] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessageList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        custom_payload: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayloadToTerraform, true)(struct.customPayload),
        image_response_card: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardToTerraform, true)(struct.imageResponseCard),
        plain_text_message: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessageToTerraform, true)(struct.plainTextMessage),
        ssml_message: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessageToTerraform, true)(struct.ssmlMessage),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageToTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        custom_payload: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayloadToHclTerraform, true)(struct.customPayload),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayloadList",
        },
        image_response_card: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardToHclTerraform, true)(struct.imageResponseCard),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardList",
        },
        plain_text_message: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessageToHclTerraform, true)(struct.plainTextMessage),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessageList",
        },
        ssml_message: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessageToHclTerraform, true)(struct.ssmlMessage),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessageList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // custom_payload - computed: false, optional: true, required: false
        this._customPayload = new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayloadList(this, "custom_payload", false);
        // image_response_card - computed: false, optional: true, required: false
        this._imageResponseCard = new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardList(this, "image_response_card", false);
        // plain_text_message - computed: false, optional: true, required: false
        this._plainTextMessage = new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessageList(this, "plain_text_message", false);
        // ssml_message - computed: false, optional: true, required: false
        this._ssmlMessage = new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessageList(this, "ssml_message", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._customPayload?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customPayload = this._customPayload?.internalValue;
        }
        if (this._imageResponseCard?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageResponseCard = this._imageResponseCard?.internalValue;
        }
        if (this._plainTextMessage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.plainTextMessage = this._plainTextMessage?.internalValue;
        }
        if (this._ssmlMessage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ssmlMessage = this._ssmlMessage?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._customPayload.internalValue = undefined;
            this._imageResponseCard.internalValue = undefined;
            this._plainTextMessage.internalValue = undefined;
            this._ssmlMessage.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._customPayload.internalValue = value.customPayload;
            this._imageResponseCard.internalValue = value.imageResponseCard;
            this._plainTextMessage.internalValue = value.plainTextMessage;
            this._ssmlMessage.internalValue = value.ssmlMessage;
        }
    }
    get customPayload() {
        return this._customPayload;
    }
    putCustomPayload(value) {
        this._customPayload.internalValue = value;
    }
    resetCustomPayload() {
        this._customPayload.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customPayloadInput() {
        return this._customPayload.internalValue;
    }
    get imageResponseCard() {
        return this._imageResponseCard;
    }
    putImageResponseCard(value) {
        this._imageResponseCard.internalValue = value;
    }
    resetImageResponseCard() {
        this._imageResponseCard.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageResponseCardInput() {
        return this._imageResponseCard.internalValue;
    }
    get plainTextMessage() {
        return this._plainTextMessage;
    }
    putPlainTextMessage(value) {
        this._plainTextMessage.internalValue = value;
    }
    resetPlainTextMessage() {
        this._plainTextMessage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get plainTextMessageInput() {
        return this._plainTextMessage.internalValue;
    }
    get ssmlMessage() {
        return this._ssmlMessage;
    }
    putSsmlMessage(value) {
        this._ssmlMessage.internalValue = value;
    }
    resetSsmlMessage() {
        this._ssmlMessage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ssmlMessageInput() {
        return this._ssmlMessage.internalValue;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageOutputReference = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageOutputReference;
_92 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageOutputReference[_92] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageList = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageList;
_93 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageList[_93] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayloadToTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayloadToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayloadToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayloadToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayloadToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayloadOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._value = value.value;
        }
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayloadOutputReference = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayloadOutputReference;
_94 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayloadOutputReference[_94] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayloadOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayloadList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayloadOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayloadList = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayloadList;
_95 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayloadList[_95] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayloadList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButtonToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        text: cdktf.stringToTerraform(struct.text),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButtonToTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButtonToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButtonToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        text: {
            value: cdktf.stringToHclTerraform(struct.text),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButtonToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButtonToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButtonOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._text !== undefined) {
            hasAnyValues = true;
            internalValueResult.text = this._text;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._text = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._text = value.text;
            this._value = value.value;
        }
    }
    get text() {
        return this.getStringAttribute('text');
    }
    set text(value) {
        this._text = value;
    }
    // Temporarily expose input value. Use with caution.
    get textInput() {
        return this._text;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButtonOutputReference = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButtonOutputReference;
_96 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButtonOutputReference[_96] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButtonOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButtonList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButtonOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButtonList = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButtonList;
_97 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButtonList[_97] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButtonList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        image_url: cdktf.stringToTerraform(struct.imageUrl),
        subtitle: cdktf.stringToTerraform(struct.subtitle),
        title: cdktf.stringToTerraform(struct.title),
        button: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButtonToTerraform, true)(struct.button),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardToTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        image_url: {
            value: cdktf.stringToHclTerraform(struct.imageUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        subtitle: {
            value: cdktf.stringToHclTerraform(struct.subtitle),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        title: {
            value: cdktf.stringToHclTerraform(struct.title),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        button: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButtonToHclTerraform, true)(struct.button),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButtonList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // button - computed: false, optional: true, required: false
        this._button = new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButtonList(this, "button", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._imageUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageUrl = this._imageUrl;
        }
        if (this._subtitle !== undefined) {
            hasAnyValues = true;
            internalValueResult.subtitle = this._subtitle;
        }
        if (this._title !== undefined) {
            hasAnyValues = true;
            internalValueResult.title = this._title;
        }
        if (this._button?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.button = this._button?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._imageUrl = undefined;
            this._subtitle = undefined;
            this._title = undefined;
            this._button.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._imageUrl = value.imageUrl;
            this._subtitle = value.subtitle;
            this._title = value.title;
            this._button.internalValue = value.button;
        }
    }
    get imageUrl() {
        return this.getStringAttribute('image_url');
    }
    set imageUrl(value) {
        this._imageUrl = value;
    }
    resetImageUrl() {
        this._imageUrl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageUrlInput() {
        return this._imageUrl;
    }
    get subtitle() {
        return this.getStringAttribute('subtitle');
    }
    set subtitle(value) {
        this._subtitle = value;
    }
    resetSubtitle() {
        this._subtitle = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subtitleInput() {
        return this._subtitle;
    }
    get title() {
        return this.getStringAttribute('title');
    }
    set title(value) {
        this._title = value;
    }
    // Temporarily expose input value. Use with caution.
    get titleInput() {
        return this._title;
    }
    get button() {
        return this._button;
    }
    putButton(value) {
        this._button.internalValue = value;
    }
    resetButton() {
        this._button.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get buttonInput() {
        return this._button.internalValue;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardOutputReference = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardOutputReference;
_98 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardOutputReference[_98] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardList = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardList;
_99 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardList[_99] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessageToTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessageToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessageToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessageToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._value = value.value;
        }
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessageOutputReference = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessageOutputReference;
_100 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessageOutputReference[_100] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessageOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessageList = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessageList;
_101 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessageList[_101] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessageList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessageToTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessageToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessageToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessageToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._value = value.value;
        }
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessageOutputReference = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessageOutputReference;
_102 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessageOutputReference[_102] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessageOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessageList = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessageList;
_103 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessageList[_103] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessageList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        custom_payload: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayloadToTerraform, true)(struct.customPayload),
        image_response_card: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardToTerraform, true)(struct.imageResponseCard),
        plain_text_message: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessageToTerraform, true)(struct.plainTextMessage),
        ssml_message: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessageToTerraform, true)(struct.ssmlMessage),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationToTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        custom_payload: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayloadToHclTerraform, true)(struct.customPayload),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayloadList",
        },
        image_response_card: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardToHclTerraform, true)(struct.imageResponseCard),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardList",
        },
        plain_text_message: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessageToHclTerraform, true)(struct.plainTextMessage),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessageList",
        },
        ssml_message: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessageToHclTerraform, true)(struct.ssmlMessage),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessageList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // custom_payload - computed: false, optional: true, required: false
        this._customPayload = new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayloadList(this, "custom_payload", false);
        // image_response_card - computed: false, optional: true, required: false
        this._imageResponseCard = new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardList(this, "image_response_card", false);
        // plain_text_message - computed: false, optional: true, required: false
        this._plainTextMessage = new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessageList(this, "plain_text_message", false);
        // ssml_message - computed: false, optional: true, required: false
        this._ssmlMessage = new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessageList(this, "ssml_message", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._customPayload?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customPayload = this._customPayload?.internalValue;
        }
        if (this._imageResponseCard?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageResponseCard = this._imageResponseCard?.internalValue;
        }
        if (this._plainTextMessage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.plainTextMessage = this._plainTextMessage?.internalValue;
        }
        if (this._ssmlMessage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ssmlMessage = this._ssmlMessage?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._customPayload.internalValue = undefined;
            this._imageResponseCard.internalValue = undefined;
            this._plainTextMessage.internalValue = undefined;
            this._ssmlMessage.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._customPayload.internalValue = value.customPayload;
            this._imageResponseCard.internalValue = value.imageResponseCard;
            this._plainTextMessage.internalValue = value.plainTextMessage;
            this._ssmlMessage.internalValue = value.ssmlMessage;
        }
    }
    get customPayload() {
        return this._customPayload;
    }
    putCustomPayload(value) {
        this._customPayload.internalValue = value;
    }
    resetCustomPayload() {
        this._customPayload.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customPayloadInput() {
        return this._customPayload.internalValue;
    }
    get imageResponseCard() {
        return this._imageResponseCard;
    }
    putImageResponseCard(value) {
        this._imageResponseCard.internalValue = value;
    }
    resetImageResponseCard() {
        this._imageResponseCard.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageResponseCardInput() {
        return this._imageResponseCard.internalValue;
    }
    get plainTextMessage() {
        return this._plainTextMessage;
    }
    putPlainTextMessage(value) {
        this._plainTextMessage.internalValue = value;
    }
    resetPlainTextMessage() {
        this._plainTextMessage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get plainTextMessageInput() {
        return this._plainTextMessage.internalValue;
    }
    get ssmlMessage() {
        return this._ssmlMessage;
    }
    putSsmlMessage(value) {
        this._ssmlMessage.internalValue = value;
    }
    resetSsmlMessage() {
        this._ssmlMessage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ssmlMessageInput() {
        return this._ssmlMessage.internalValue;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationOutputReference = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationOutputReference;
_104 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationOutputReference[_104] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationList = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationList;
_105 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationList[_105] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        message: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageToTerraform, true)(struct.message),
        variation: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationToTerraform, true)(struct.variation),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupToTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        message: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageToHclTerraform, true)(struct.message),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageList",
        },
        variation: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationToHclTerraform, true)(struct.variation),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // message - computed: false, optional: true, required: false
        this._message = new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageList(this, "message", false);
        // variation - computed: false, optional: true, required: false
        this._variation = new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationList(this, "variation", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._message?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.message = this._message?.internalValue;
        }
        if (this._variation?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.variation = this._variation?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._message.internalValue = undefined;
            this._variation.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._message.internalValue = value.message;
            this._variation.internalValue = value.variation;
        }
    }
    get message() {
        return this._message;
    }
    putMessage(value) {
        this._message.internalValue = value;
    }
    resetMessage() {
        this._message.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get messageInput() {
        return this._message.internalValue;
    }
    get variation() {
        return this._variation;
    }
    putVariation(value) {
        this._variation.internalValue = value;
    }
    resetVariation() {
        this._variation.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get variationInput() {
        return this._variation.internalValue;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupOutputReference = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupOutputReference;
_106 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupOutputReference[_106] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupList = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupList;
_107 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupList[_107] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_interrupt: cdktf.booleanToTerraform(struct.allowInterrupt),
        delay_in_seconds: cdktf.numberToTerraform(struct.delayInSeconds),
        message_group: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupToTerraform, true)(struct.messageGroup),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseToTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allow_interrupt: {
            value: cdktf.booleanToHclTerraform(struct.allowInterrupt),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        delay_in_seconds: {
            value: cdktf.numberToHclTerraform(struct.delayInSeconds),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        message_group: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupToHclTerraform, true)(struct.messageGroup),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // message_group - computed: false, optional: true, required: false
        this._messageGroup = new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupList(this, "message_group", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowInterrupt !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowInterrupt = this._allowInterrupt;
        }
        if (this._delayInSeconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.delayInSeconds = this._delayInSeconds;
        }
        if (this._messageGroup?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.messageGroup = this._messageGroup?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._allowInterrupt = undefined;
            this._delayInSeconds = undefined;
            this._messageGroup.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._allowInterrupt = value.allowInterrupt;
            this._delayInSeconds = value.delayInSeconds;
            this._messageGroup.internalValue = value.messageGroup;
        }
    }
    get allowInterrupt() {
        return this.getBooleanAttribute('allow_interrupt');
    }
    set allowInterrupt(value) {
        this._allowInterrupt = value;
    }
    resetAllowInterrupt() {
        this._allowInterrupt = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowInterruptInput() {
        return this._allowInterrupt;
    }
    get delayInSeconds() {
        return this.getNumberAttribute('delay_in_seconds');
    }
    set delayInSeconds(value) {
        this._delayInSeconds = value;
    }
    resetDelayInSeconds() {
        this._delayInSeconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get delayInSecondsInput() {
        return this._delayInSeconds;
    }
    get messageGroup() {
        return this._messageGroup;
    }
    putMessageGroup(value) {
        this._messageGroup.internalValue = value;
    }
    resetMessageGroup() {
        this._messageGroup.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get messageGroupInput() {
        return this._messageGroup.internalValue;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseOutputReference = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseOutputReference;
_108 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseOutputReference[_108] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseList = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseList;
_109 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseList[_109] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayloadToTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayloadToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayloadToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayloadToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayloadToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayloadOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._value = value.value;
        }
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayloadOutputReference = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayloadOutputReference;
_110 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayloadOutputReference[_110] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayloadOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayloadList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayloadOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayloadList = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayloadList;
_111 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayloadList[_111] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayloadList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButtonToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        text: cdktf.stringToTerraform(struct.text),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButtonToTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButtonToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButtonToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        text: {
            value: cdktf.stringToHclTerraform(struct.text),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButtonToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButtonToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButtonOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._text !== undefined) {
            hasAnyValues = true;
            internalValueResult.text = this._text;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._text = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._text = value.text;
            this._value = value.value;
        }
    }
    get text() {
        return this.getStringAttribute('text');
    }
    set text(value) {
        this._text = value;
    }
    // Temporarily expose input value. Use with caution.
    get textInput() {
        return this._text;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButtonOutputReference = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButtonOutputReference;
_112 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButtonOutputReference[_112] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButtonOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButtonList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButtonOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButtonList = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButtonList;
_113 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButtonList[_113] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButtonList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        image_url: cdktf.stringToTerraform(struct.imageUrl),
        subtitle: cdktf.stringToTerraform(struct.subtitle),
        title: cdktf.stringToTerraform(struct.title),
        button: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButtonToTerraform, true)(struct.button),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardToTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        image_url: {
            value: cdktf.stringToHclTerraform(struct.imageUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        subtitle: {
            value: cdktf.stringToHclTerraform(struct.subtitle),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        title: {
            value: cdktf.stringToHclTerraform(struct.title),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        button: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButtonToHclTerraform, true)(struct.button),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButtonList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // button - computed: false, optional: true, required: false
        this._button = new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButtonList(this, "button", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._imageUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageUrl = this._imageUrl;
        }
        if (this._subtitle !== undefined) {
            hasAnyValues = true;
            internalValueResult.subtitle = this._subtitle;
        }
        if (this._title !== undefined) {
            hasAnyValues = true;
            internalValueResult.title = this._title;
        }
        if (this._button?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.button = this._button?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._imageUrl = undefined;
            this._subtitle = undefined;
            this._title = undefined;
            this._button.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._imageUrl = value.imageUrl;
            this._subtitle = value.subtitle;
            this._title = value.title;
            this._button.internalValue = value.button;
        }
    }
    get imageUrl() {
        return this.getStringAttribute('image_url');
    }
    set imageUrl(value) {
        this._imageUrl = value;
    }
    resetImageUrl() {
        this._imageUrl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageUrlInput() {
        return this._imageUrl;
    }
    get subtitle() {
        return this.getStringAttribute('subtitle');
    }
    set subtitle(value) {
        this._subtitle = value;
    }
    resetSubtitle() {
        this._subtitle = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subtitleInput() {
        return this._subtitle;
    }
    get title() {
        return this.getStringAttribute('title');
    }
    set title(value) {
        this._title = value;
    }
    // Temporarily expose input value. Use with caution.
    get titleInput() {
        return this._title;
    }
    get button() {
        return this._button;
    }
    putButton(value) {
        this._button.internalValue = value;
    }
    resetButton() {
        this._button.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get buttonInput() {
        return this._button.internalValue;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardOutputReference = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardOutputReference;
_114 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardOutputReference[_114] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardList = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardList;
_115 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardList[_115] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessageToTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessageToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessageToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessageToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._value = value.value;
        }
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessageOutputReference = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessageOutputReference;
_116 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessageOutputReference[_116] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessageOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessageList = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessageList;
_117 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessageList[_117] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessageList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessageToTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessageToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessageToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessageToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._value = value.value;
        }
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessageOutputReference = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessageOutputReference;
_118 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessageOutputReference[_118] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessageOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessageList = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessageList;
_119 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessageList[_119] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessageList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        custom_payload: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayloadToTerraform, true)(struct.customPayload),
        image_response_card: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardToTerraform, true)(struct.imageResponseCard),
        plain_text_message: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessageToTerraform, true)(struct.plainTextMessage),
        ssml_message: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessageToTerraform, true)(struct.ssmlMessage),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageToTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        custom_payload: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayloadToHclTerraform, true)(struct.customPayload),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayloadList",
        },
        image_response_card: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardToHclTerraform, true)(struct.imageResponseCard),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardList",
        },
        plain_text_message: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessageToHclTerraform, true)(struct.plainTextMessage),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessageList",
        },
        ssml_message: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessageToHclTerraform, true)(struct.ssmlMessage),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessageList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // custom_payload - computed: false, optional: true, required: false
        this._customPayload = new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayloadList(this, "custom_payload", false);
        // image_response_card - computed: false, optional: true, required: false
        this._imageResponseCard = new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardList(this, "image_response_card", false);
        // plain_text_message - computed: false, optional: true, required: false
        this._plainTextMessage = new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessageList(this, "plain_text_message", false);
        // ssml_message - computed: false, optional: true, required: false
        this._ssmlMessage = new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessageList(this, "ssml_message", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._customPayload?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customPayload = this._customPayload?.internalValue;
        }
        if (this._imageResponseCard?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageResponseCard = this._imageResponseCard?.internalValue;
        }
        if (this._plainTextMessage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.plainTextMessage = this._plainTextMessage?.internalValue;
        }
        if (this._ssmlMessage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ssmlMessage = this._ssmlMessage?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._customPayload.internalValue = undefined;
            this._imageResponseCard.internalValue = undefined;
            this._plainTextMessage.internalValue = undefined;
            this._ssmlMessage.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._customPayload.internalValue = value.customPayload;
            this._imageResponseCard.internalValue = value.imageResponseCard;
            this._plainTextMessage.internalValue = value.plainTextMessage;
            this._ssmlMessage.internalValue = value.ssmlMessage;
        }
    }
    get customPayload() {
        return this._customPayload;
    }
    putCustomPayload(value) {
        this._customPayload.internalValue = value;
    }
    resetCustomPayload() {
        this._customPayload.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customPayloadInput() {
        return this._customPayload.internalValue;
    }
    get imageResponseCard() {
        return this._imageResponseCard;
    }
    putImageResponseCard(value) {
        this._imageResponseCard.internalValue = value;
    }
    resetImageResponseCard() {
        this._imageResponseCard.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageResponseCardInput() {
        return this._imageResponseCard.internalValue;
    }
    get plainTextMessage() {
        return this._plainTextMessage;
    }
    putPlainTextMessage(value) {
        this._plainTextMessage.internalValue = value;
    }
    resetPlainTextMessage() {
        this._plainTextMessage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get plainTextMessageInput() {
        return this._plainTextMessage.internalValue;
    }
    get ssmlMessage() {
        return this._ssmlMessage;
    }
    putSsmlMessage(value) {
        this._ssmlMessage.internalValue = value;
    }
    resetSsmlMessage() {
        this._ssmlMessage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ssmlMessageInput() {
        return this._ssmlMessage.internalValue;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageOutputReference = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageOutputReference;
_120 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageOutputReference[_120] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageList = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageList;
_121 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageList[_121] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayloadToTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayloadToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayloadToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayloadToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayloadToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayloadOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._value = value.value;
        }
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayloadOutputReference = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayloadOutputReference;
_122 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayloadOutputReference[_122] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayloadOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayloadList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayloadOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayloadList = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayloadList;
_123 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayloadList[_123] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayloadList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButtonToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        text: cdktf.stringToTerraform(struct.text),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButtonToTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButtonToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButtonToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        text: {
            value: cdktf.stringToHclTerraform(struct.text),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButtonToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButtonToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButtonOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._text !== undefined) {
            hasAnyValues = true;
            internalValueResult.text = this._text;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._text = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._text = value.text;
            this._value = value.value;
        }
    }
    get text() {
        return this.getStringAttribute('text');
    }
    set text(value) {
        this._text = value;
    }
    // Temporarily expose input value. Use with caution.
    get textInput() {
        return this._text;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButtonOutputReference = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButtonOutputReference;
_124 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButtonOutputReference[_124] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButtonOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButtonList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButtonOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButtonList = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButtonList;
_125 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButtonList[_125] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButtonList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        image_url: cdktf.stringToTerraform(struct.imageUrl),
        subtitle: cdktf.stringToTerraform(struct.subtitle),
        title: cdktf.stringToTerraform(struct.title),
        button: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButtonToTerraform, true)(struct.button),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardToTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        image_url: {
            value: cdktf.stringToHclTerraform(struct.imageUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        subtitle: {
            value: cdktf.stringToHclTerraform(struct.subtitle),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        title: {
            value: cdktf.stringToHclTerraform(struct.title),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        button: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButtonToHclTerraform, true)(struct.button),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButtonList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // button - computed: false, optional: true, required: false
        this._button = new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButtonList(this, "button", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._imageUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageUrl = this._imageUrl;
        }
        if (this._subtitle !== undefined) {
            hasAnyValues = true;
            internalValueResult.subtitle = this._subtitle;
        }
        if (this._title !== undefined) {
            hasAnyValues = true;
            internalValueResult.title = this._title;
        }
        if (this._button?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.button = this._button?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._imageUrl = undefined;
            this._subtitle = undefined;
            this._title = undefined;
            this._button.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._imageUrl = value.imageUrl;
            this._subtitle = value.subtitle;
            this._title = value.title;
            this._button.internalValue = value.button;
        }
    }
    get imageUrl() {
        return this.getStringAttribute('image_url');
    }
    set imageUrl(value) {
        this._imageUrl = value;
    }
    resetImageUrl() {
        this._imageUrl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageUrlInput() {
        return this._imageUrl;
    }
    get subtitle() {
        return this.getStringAttribute('subtitle');
    }
    set subtitle(value) {
        this._subtitle = value;
    }
    resetSubtitle() {
        this._subtitle = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subtitleInput() {
        return this._subtitle;
    }
    get title() {
        return this.getStringAttribute('title');
    }
    set title(value) {
        this._title = value;
    }
    // Temporarily expose input value. Use with caution.
    get titleInput() {
        return this._title;
    }
    get button() {
        return this._button;
    }
    putButton(value) {
        this._button.internalValue = value;
    }
    resetButton() {
        this._button.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get buttonInput() {
        return this._button.internalValue;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardOutputReference = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardOutputReference;
_126 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardOutputReference[_126] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardList = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardList;
_127 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardList[_127] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessageToTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessageToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessageToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessageToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._value = value.value;
        }
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessageOutputReference = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessageOutputReference;
_128 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessageOutputReference[_128] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessageOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessageList = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessageList;
_129 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessageList[_129] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessageList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessageToTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessageToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessageToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessageToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._value = value.value;
        }
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessageOutputReference = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessageOutputReference;
_130 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessageOutputReference[_130] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessageOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessageList = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessageList;
_131 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessageList[_131] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessageList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        custom_payload: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayloadToTerraform, true)(struct.customPayload),
        image_response_card: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardToTerraform, true)(struct.imageResponseCard),
        plain_text_message: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessageToTerraform, true)(struct.plainTextMessage),
        ssml_message: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessageToTerraform, true)(struct.ssmlMessage),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationToTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        custom_payload: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayloadToHclTerraform, true)(struct.customPayload),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayloadList",
        },
        image_response_card: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardToHclTerraform, true)(struct.imageResponseCard),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardList",
        },
        plain_text_message: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessageToHclTerraform, true)(struct.plainTextMessage),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessageList",
        },
        ssml_message: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessageToHclTerraform, true)(struct.ssmlMessage),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessageList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // custom_payload - computed: false, optional: true, required: false
        this._customPayload = new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayloadList(this, "custom_payload", false);
        // image_response_card - computed: false, optional: true, required: false
        this._imageResponseCard = new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardList(this, "image_response_card", false);
        // plain_text_message - computed: false, optional: true, required: false
        this._plainTextMessage = new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessageList(this, "plain_text_message", false);
        // ssml_message - computed: false, optional: true, required: false
        this._ssmlMessage = new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessageList(this, "ssml_message", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._customPayload?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customPayload = this._customPayload?.internalValue;
        }
        if (this._imageResponseCard?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageResponseCard = this._imageResponseCard?.internalValue;
        }
        if (this._plainTextMessage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.plainTextMessage = this._plainTextMessage?.internalValue;
        }
        if (this._ssmlMessage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ssmlMessage = this._ssmlMessage?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._customPayload.internalValue = undefined;
            this._imageResponseCard.internalValue = undefined;
            this._plainTextMessage.internalValue = undefined;
            this._ssmlMessage.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._customPayload.internalValue = value.customPayload;
            this._imageResponseCard.internalValue = value.imageResponseCard;
            this._plainTextMessage.internalValue = value.plainTextMessage;
            this._ssmlMessage.internalValue = value.ssmlMessage;
        }
    }
    get customPayload() {
        return this._customPayload;
    }
    putCustomPayload(value) {
        this._customPayload.internalValue = value;
    }
    resetCustomPayload() {
        this._customPayload.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customPayloadInput() {
        return this._customPayload.internalValue;
    }
    get imageResponseCard() {
        return this._imageResponseCard;
    }
    putImageResponseCard(value) {
        this._imageResponseCard.internalValue = value;
    }
    resetImageResponseCard() {
        this._imageResponseCard.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageResponseCardInput() {
        return this._imageResponseCard.internalValue;
    }
    get plainTextMessage() {
        return this._plainTextMessage;
    }
    putPlainTextMessage(value) {
        this._plainTextMessage.internalValue = value;
    }
    resetPlainTextMessage() {
        this._plainTextMessage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get plainTextMessageInput() {
        return this._plainTextMessage.internalValue;
    }
    get ssmlMessage() {
        return this._ssmlMessage;
    }
    putSsmlMessage(value) {
        this._ssmlMessage.internalValue = value;
    }
    resetSsmlMessage() {
        this._ssmlMessage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ssmlMessageInput() {
        return this._ssmlMessage.internalValue;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationOutputReference = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationOutputReference;
_132 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationOutputReference[_132] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationList = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationList;
_133 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationList[_133] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        message: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageToTerraform, true)(struct.message),
        variation: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationToTerraform, true)(struct.variation),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupToTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        message: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageToHclTerraform, true)(struct.message),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageList",
        },
        variation: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationToHclTerraform, true)(struct.variation),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // message - computed: false, optional: true, required: false
        this._message = new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageList(this, "message", false);
        // variation - computed: false, optional: true, required: false
        this._variation = new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationList(this, "variation", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._message?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.message = this._message?.internalValue;
        }
        if (this._variation?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.variation = this._variation?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._message.internalValue = undefined;
            this._variation.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._message.internalValue = value.message;
            this._variation.internalValue = value.variation;
        }
    }
    get message() {
        return this._message;
    }
    putMessage(value) {
        this._message.internalValue = value;
    }
    resetMessage() {
        this._message.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get messageInput() {
        return this._message.internalValue;
    }
    get variation() {
        return this._variation;
    }
    putVariation(value) {
        this._variation.internalValue = value;
    }
    resetVariation() {
        this._variation.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get variationInput() {
        return this._variation.internalValue;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupOutputReference = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupOutputReference;
_134 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupOutputReference[_134] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupList = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupList;
_135 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupList[_135] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_interrupt: cdktf.booleanToTerraform(struct.allowInterrupt),
        frequency_in_seconds: cdktf.numberToTerraform(struct.frequencyInSeconds),
        message_group: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupToTerraform, true)(struct.messageGroup),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseToTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allow_interrupt: {
            value: cdktf.booleanToHclTerraform(struct.allowInterrupt),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        frequency_in_seconds: {
            value: cdktf.numberToHclTerraform(struct.frequencyInSeconds),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        message_group: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupToHclTerraform, true)(struct.messageGroup),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // message_group - computed: false, optional: true, required: false
        this._messageGroup = new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupList(this, "message_group", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowInterrupt !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowInterrupt = this._allowInterrupt;
        }
        if (this._frequencyInSeconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.frequencyInSeconds = this._frequencyInSeconds;
        }
        if (this._messageGroup?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.messageGroup = this._messageGroup?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._allowInterrupt = undefined;
            this._frequencyInSeconds = undefined;
            this._messageGroup.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._allowInterrupt = value.allowInterrupt;
            this._frequencyInSeconds = value.frequencyInSeconds;
            this._messageGroup.internalValue = value.messageGroup;
        }
    }
    get allowInterrupt() {
        return this.getBooleanAttribute('allow_interrupt');
    }
    set allowInterrupt(value) {
        this._allowInterrupt = value;
    }
    resetAllowInterrupt() {
        this._allowInterrupt = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowInterruptInput() {
        return this._allowInterrupt;
    }
    get frequencyInSeconds() {
        return this.getNumberAttribute('frequency_in_seconds');
    }
    set frequencyInSeconds(value) {
        this._frequencyInSeconds = value;
    }
    // Temporarily expose input value. Use with caution.
    get frequencyInSecondsInput() {
        return this._frequencyInSeconds;
    }
    get messageGroup() {
        return this._messageGroup;
    }
    putMessageGroup(value) {
        this._messageGroup.internalValue = value;
    }
    resetMessageGroup() {
        this._messageGroup.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get messageGroupInput() {
        return this._messageGroup.internalValue;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseOutputReference = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseOutputReference;
_136 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseOutputReference[_136] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseList = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseList;
_137 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseList[_137] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        active: cdktf.booleanToTerraform(struct.active),
        timeout_in_seconds: cdktf.numberToTerraform(struct.timeoutInSeconds),
        start_response: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseToTerraform, true)(struct.startResponse),
        update_response: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseToTerraform, true)(struct.updateResponse),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationToTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        active: {
            value: cdktf.booleanToHclTerraform(struct.active),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        timeout_in_seconds: {
            value: cdktf.numberToHclTerraform(struct.timeoutInSeconds),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        start_response: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseToHclTerraform, true)(struct.startResponse),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseList",
        },
        update_response: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseToHclTerraform, true)(struct.updateResponse),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // start_response - computed: false, optional: true, required: false
        this._startResponse = new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseList(this, "start_response", false);
        // update_response - computed: false, optional: true, required: false
        this._updateResponse = new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseList(this, "update_response", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._active !== undefined) {
            hasAnyValues = true;
            internalValueResult.active = this._active;
        }
        if (this._timeoutInSeconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeoutInSeconds = this._timeoutInSeconds;
        }
        if (this._startResponse?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.startResponse = this._startResponse?.internalValue;
        }
        if (this._updateResponse?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.updateResponse = this._updateResponse?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._active = undefined;
            this._timeoutInSeconds = undefined;
            this._startResponse.internalValue = undefined;
            this._updateResponse.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._active = value.active;
            this._timeoutInSeconds = value.timeoutInSeconds;
            this._startResponse.internalValue = value.startResponse;
            this._updateResponse.internalValue = value.updateResponse;
        }
    }
    get active() {
        return this.getBooleanAttribute('active');
    }
    set active(value) {
        this._active = value;
    }
    // Temporarily expose input value. Use with caution.
    get activeInput() {
        return this._active;
    }
    get timeoutInSeconds() {
        return this.getNumberAttribute('timeout_in_seconds');
    }
    set timeoutInSeconds(value) {
        this._timeoutInSeconds = value;
    }
    resetTimeoutInSeconds() {
        this._timeoutInSeconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutInSecondsInput() {
        return this._timeoutInSeconds;
    }
    get startResponse() {
        return this._startResponse;
    }
    putStartResponse(value) {
        this._startResponse.internalValue = value;
    }
    resetStartResponse() {
        this._startResponse.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get startResponseInput() {
        return this._startResponse.internalValue;
    }
    get updateResponse() {
        return this._updateResponse;
    }
    putUpdateResponse(value) {
        this._updateResponse.internalValue = value;
    }
    resetUpdateResponse() {
        this._updateResponse.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateResponseInput() {
        return this._updateResponse.internalValue;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationOutputReference = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationOutputReference;
_138 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationOutputReference[_138] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationList = Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationList;
_139 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationList[_139] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchConditionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        expression_string: cdktf.stringToTerraform(struct.expressionString),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchConditionToTerraform = lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchConditionToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchConditionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        expression_string: {
            value: cdktf.stringToHclTerraform(struct.expressionString),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchConditionToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchConditionToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchConditionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._expressionString !== undefined) {
            hasAnyValues = true;
            internalValueResult.expressionString = this._expressionString;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._expressionString = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._expressionString = value.expressionString;
        }
    }
    get expressionString() {
        return this.getStringAttribute('expression_string');
    }
    set expressionString(value) {
        this._expressionString = value;
    }
    // Temporarily expose input value. Use with caution.
    get expressionStringInput() {
        return this._expressionString;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchConditionOutputReference = Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchConditionOutputReference;
_140 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchConditionOutputReference[_140] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchConditionOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchConditionList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchConditionOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchConditionList = Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchConditionList;
_141 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchConditionList[_141] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchConditionList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogActionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        slot_to_elicit: cdktf.stringToTerraform(struct.slotToElicit),
        suppress_next_message: cdktf.booleanToTerraform(struct.suppressNextMessage),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogActionToTerraform = lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogActionToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogActionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        slot_to_elicit: {
            value: cdktf.stringToHclTerraform(struct.slotToElicit),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        suppress_next_message: {
            value: cdktf.booleanToHclTerraform(struct.suppressNextMessage),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        type: {
            value: cdktf.stringToHclTerraform(struct.type),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogActionToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogActionToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogActionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._slotToElicit !== undefined) {
            hasAnyValues = true;
            internalValueResult.slotToElicit = this._slotToElicit;
        }
        if (this._suppressNextMessage !== undefined) {
            hasAnyValues = true;
            internalValueResult.suppressNextMessage = this._suppressNextMessage;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._slotToElicit = undefined;
            this._suppressNextMessage = undefined;
            this._type = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._slotToElicit = value.slotToElicit;
            this._suppressNextMessage = value.suppressNextMessage;
            this._type = value.type;
        }
    }
    get slotToElicit() {
        return this.getStringAttribute('slot_to_elicit');
    }
    set slotToElicit(value) {
        this._slotToElicit = value;
    }
    resetSlotToElicit() {
        this._slotToElicit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get slotToElicitInput() {
        return this._slotToElicit;
    }
    get suppressNextMessage() {
        return this.getBooleanAttribute('suppress_next_message');
    }
    set suppressNextMessage(value) {
        this._suppressNextMessage = value;
    }
    resetSuppressNextMessage() {
        this._suppressNextMessage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get suppressNextMessageInput() {
        return this._suppressNextMessage;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogActionOutputReference = Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogActionOutputReference;
_142 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogActionOutputReference[_142] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogActionOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogActionList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogActionOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogActionList = Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogActionList;
_143 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogActionList[_143] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogActionList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        interpreted_value: cdktf.stringToTerraform(struct.interpretedValue),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueToTerraform = lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        interpreted_value: {
            value: cdktf.stringToHclTerraform(struct.interpretedValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._interpretedValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.interpretedValue = this._interpretedValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._interpretedValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._interpretedValue = value.interpretedValue;
        }
    }
    get interpretedValue() {
        return this.getStringAttribute('interpreted_value');
    }
    set interpretedValue(value) {
        this._interpretedValue = value;
    }
    resetInterpretedValue() {
        this._interpretedValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get interpretedValueInput() {
        return this._interpretedValue;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueOutputReference = Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueOutputReference;
_144 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueOutputReference[_144] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueList = Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueList;
_145 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueList[_145] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        map_block_key: cdktf.stringToTerraform(struct.mapBlockKey),
        shape: cdktf.stringToTerraform(struct.shape),
        value: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueToTerraform, true)(struct.value),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotToTerraform = lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        map_block_key: {
            value: cdktf.stringToHclTerraform(struct.mapBlockKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        shape: {
            value: cdktf.stringToHclTerraform(struct.shape),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        value: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueToHclTerraform, true)(struct.value),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // value - computed: false, optional: true, required: false
        this._value = new Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueList(this, "value", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._mapBlockKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.mapBlockKey = this._mapBlockKey;
        }
        if (this._shape !== undefined) {
            hasAnyValues = true;
            internalValueResult.shape = this._shape;
        }
        if (this._value?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._mapBlockKey = undefined;
            this._shape = undefined;
            this._value.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._mapBlockKey = value.mapBlockKey;
            this._shape = value.shape;
            this._value.internalValue = value.value;
        }
    }
    get mapBlockKey() {
        return this.getStringAttribute('map_block_key');
    }
    set mapBlockKey(value) {
        this._mapBlockKey = value;
    }
    // Temporarily expose input value. Use with caution.
    get mapBlockKeyInput() {
        return this._mapBlockKey;
    }
    get shape() {
        return this.getStringAttribute('shape');
    }
    set shape(value) {
        this._shape = value;
    }
    resetShape() {
        this._shape = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get shapeInput() {
        return this._shape;
    }
    get value() {
        return this._value;
    }
    putValue(value) {
        this._value.internalValue = value;
    }
    resetValue() {
        this._value.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value.internalValue;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotOutputReference = Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotOutputReference;
_146 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotOutputReference[_146] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotList = Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotList;
_147 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotList[_147] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        slot: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotToTerraform, true)(struct.slot),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentToTerraform = lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        slot: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotToHclTerraform, true)(struct.slot),
            isBlock: true,
            type: "set",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // slot - computed: false, optional: true, required: false
        this._slot = new Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotList(this, "slot", true);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._slot?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.slot = this._slot?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._slot.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._slot.internalValue = value.slot;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get slot() {
        return this._slot;
    }
    putSlot(value) {
        this._slot.internalValue = value;
    }
    resetSlot() {
        this._slot.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get slotInput() {
        return this._slot.internalValue;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentOutputReference = Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentOutputReference;
_148 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentOutputReference[_148] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentList = Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentList;
_149 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentList[_149] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        session_attributes: cdktf.hashMapper(cdktf.stringToTerraform)(struct.sessionAttributes),
        dialog_action: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogActionToTerraform, true)(struct.dialogAction),
        intent: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentToTerraform, true)(struct.intent),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepToTerraform = lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        session_attributes: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.sessionAttributes),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        dialog_action: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogActionToHclTerraform, true)(struct.dialogAction),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogActionList",
        },
        intent: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentToHclTerraform, true)(struct.intent),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // dialog_action - computed: false, optional: true, required: false
        this._dialogAction = new Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogActionList(this, "dialog_action", false);
        // intent - computed: false, optional: true, required: false
        this._intent = new Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentList(this, "intent", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._sessionAttributes !== undefined) {
            hasAnyValues = true;
            internalValueResult.sessionAttributes = this._sessionAttributes;
        }
        if (this._dialogAction?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dialogAction = this._dialogAction?.internalValue;
        }
        if (this._intent?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.intent = this._intent?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._sessionAttributes = undefined;
            this._dialogAction.internalValue = undefined;
            this._intent.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._sessionAttributes = value.sessionAttributes;
            this._dialogAction.internalValue = value.dialogAction;
            this._intent.internalValue = value.intent;
        }
    }
    get sessionAttributes() {
        return this.getStringMapAttribute('session_attributes');
    }
    set sessionAttributes(value) {
        this._sessionAttributes = value;
    }
    resetSessionAttributes() {
        this._sessionAttributes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sessionAttributesInput() {
        return this._sessionAttributes;
    }
    get dialogAction() {
        return this._dialogAction;
    }
    putDialogAction(value) {
        this._dialogAction.internalValue = value;
    }
    resetDialogAction() {
        this._dialogAction.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dialogActionInput() {
        return this._dialogAction.internalValue;
    }
    get intent() {
        return this._intent;
    }
    putIntent(value) {
        this._intent.internalValue = value;
    }
    resetIntent() {
        this._intent.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get intentInput() {
        return this._intent.internalValue;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepOutputReference = Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepOutputReference;
_150 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepOutputReference[_150] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepList = Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepList;
_151 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepList[_151] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadToTerraform = lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._value = value.value;
        }
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadOutputReference = Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadOutputReference;
_152 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadOutputReference[_152] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadList = Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadList;
_153 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadList[_153] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        text: cdktf.stringToTerraform(struct.text),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonToTerraform = lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        text: {
            value: cdktf.stringToHclTerraform(struct.text),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._text !== undefined) {
            hasAnyValues = true;
            internalValueResult.text = this._text;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._text = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._text = value.text;
            this._value = value.value;
        }
    }
    get text() {
        return this.getStringAttribute('text');
    }
    set text(value) {
        this._text = value;
    }
    // Temporarily expose input value. Use with caution.
    get textInput() {
        return this._text;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonOutputReference = Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonOutputReference;
_154 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonOutputReference[_154] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonList = Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonList;
_155 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonList[_155] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        image_url: cdktf.stringToTerraform(struct.imageUrl),
        subtitle: cdktf.stringToTerraform(struct.subtitle),
        title: cdktf.stringToTerraform(struct.title),
        button: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonToTerraform, true)(struct.button),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardToTerraform = lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        image_url: {
            value: cdktf.stringToHclTerraform(struct.imageUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        subtitle: {
            value: cdktf.stringToHclTerraform(struct.subtitle),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        title: {
            value: cdktf.stringToHclTerraform(struct.title),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        button: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonToHclTerraform, true)(struct.button),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // button - computed: false, optional: true, required: false
        this._button = new Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonList(this, "button", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._imageUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageUrl = this._imageUrl;
        }
        if (this._subtitle !== undefined) {
            hasAnyValues = true;
            internalValueResult.subtitle = this._subtitle;
        }
        if (this._title !== undefined) {
            hasAnyValues = true;
            internalValueResult.title = this._title;
        }
        if (this._button?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.button = this._button?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._imageUrl = undefined;
            this._subtitle = undefined;
            this._title = undefined;
            this._button.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._imageUrl = value.imageUrl;
            this._subtitle = value.subtitle;
            this._title = value.title;
            this._button.internalValue = value.button;
        }
    }
    get imageUrl() {
        return this.getStringAttribute('image_url');
    }
    set imageUrl(value) {
        this._imageUrl = value;
    }
    resetImageUrl() {
        this._imageUrl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageUrlInput() {
        return this._imageUrl;
    }
    get subtitle() {
        return this.getStringAttribute('subtitle');
    }
    set subtitle(value) {
        this._subtitle = value;
    }
    resetSubtitle() {
        this._subtitle = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subtitleInput() {
        return this._subtitle;
    }
    get title() {
        return this.getStringAttribute('title');
    }
    set title(value) {
        this._title = value;
    }
    // Temporarily expose input value. Use with caution.
    get titleInput() {
        return this._title;
    }
    get button() {
        return this._button;
    }
    putButton(value) {
        this._button.internalValue = value;
    }
    resetButton() {
        this._button.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get buttonInput() {
        return this._button.internalValue;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardOutputReference = Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardOutputReference;
_156 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardOutputReference[_156] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardList = Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardList;
_157 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardList[_157] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageToTerraform = lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._value = value.value;
        }
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageOutputReference = Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageOutputReference;
_158 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageOutputReference[_158] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageList = Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageList;
_159 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageList[_159] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageToTerraform = lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._value = value.value;
        }
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageOutputReference = Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageOutputReference;
_160 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageOutputReference[_160] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageList = Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageList;
_161 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageList[_161] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        custom_payload: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadToTerraform, true)(struct.customPayload),
        image_response_card: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardToTerraform, true)(struct.imageResponseCard),
        plain_text_message: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageToTerraform, true)(struct.plainTextMessage),
        ssml_message: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageToTerraform, true)(struct.ssmlMessage),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageToTerraform = lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        custom_payload: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadToHclTerraform, true)(struct.customPayload),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadList",
        },
        image_response_card: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardToHclTerraform, true)(struct.imageResponseCard),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardList",
        },
        plain_text_message: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageToHclTerraform, true)(struct.plainTextMessage),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageList",
        },
        ssml_message: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageToHclTerraform, true)(struct.ssmlMessage),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // custom_payload - computed: false, optional: true, required: false
        this._customPayload = new Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadList(this, "custom_payload", false);
        // image_response_card - computed: false, optional: true, required: false
        this._imageResponseCard = new Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardList(this, "image_response_card", false);
        // plain_text_message - computed: false, optional: true, required: false
        this._plainTextMessage = new Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageList(this, "plain_text_message", false);
        // ssml_message - computed: false, optional: true, required: false
        this._ssmlMessage = new Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageList(this, "ssml_message", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._customPayload?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customPayload = this._customPayload?.internalValue;
        }
        if (this._imageResponseCard?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageResponseCard = this._imageResponseCard?.internalValue;
        }
        if (this._plainTextMessage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.plainTextMessage = this._plainTextMessage?.internalValue;
        }
        if (this._ssmlMessage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ssmlMessage = this._ssmlMessage?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._customPayload.internalValue = undefined;
            this._imageResponseCard.internalValue = undefined;
            this._plainTextMessage.internalValue = undefined;
            this._ssmlMessage.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._customPayload.internalValue = value.customPayload;
            this._imageResponseCard.internalValue = value.imageResponseCard;
            this._plainTextMessage.internalValue = value.plainTextMessage;
            this._ssmlMessage.internalValue = value.ssmlMessage;
        }
    }
    get customPayload() {
        return this._customPayload;
    }
    putCustomPayload(value) {
        this._customPayload.internalValue = value;
    }
    resetCustomPayload() {
        this._customPayload.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customPayloadInput() {
        return this._customPayload.internalValue;
    }
    get imageResponseCard() {
        return this._imageResponseCard;
    }
    putImageResponseCard(value) {
        this._imageResponseCard.internalValue = value;
    }
    resetImageResponseCard() {
        this._imageResponseCard.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageResponseCardInput() {
        return this._imageResponseCard.internalValue;
    }
    get plainTextMessage() {
        return this._plainTextMessage;
    }
    putPlainTextMessage(value) {
        this._plainTextMessage.internalValue = value;
    }
    resetPlainTextMessage() {
        this._plainTextMessage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get plainTextMessageInput() {
        return this._plainTextMessage.internalValue;
    }
    get ssmlMessage() {
        return this._ssmlMessage;
    }
    putSsmlMessage(value) {
        this._ssmlMessage.internalValue = value;
    }
    resetSsmlMessage() {
        this._ssmlMessage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ssmlMessageInput() {
        return this._ssmlMessage.internalValue;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageOutputReference = Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageOutputReference;
_162 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageOutputReference[_162] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageList = Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageList;
_163 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageList[_163] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadToTerraform = lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._value = value.value;
        }
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadOutputReference = Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadOutputReference;
_164 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadOutputReference[_164] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadList = Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadList;
_165 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadList[_165] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        text: cdktf.stringToTerraform(struct.text),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonToTerraform = lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        text: {
            value: cdktf.stringToHclTerraform(struct.text),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._text !== undefined) {
            hasAnyValues = true;
            internalValueResult.text = this._text;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._text = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._text = value.text;
            this._value = value.value;
        }
    }
    get text() {
        return this.getStringAttribute('text');
    }
    set text(value) {
        this._text = value;
    }
    // Temporarily expose input value. Use with caution.
    get textInput() {
        return this._text;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonOutputReference = Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonOutputReference;
_166 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonOutputReference[_166] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonList = Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonList;
_167 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonList[_167] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        image_url: cdktf.stringToTerraform(struct.imageUrl),
        subtitle: cdktf.stringToTerraform(struct.subtitle),
        title: cdktf.stringToTerraform(struct.title),
        button: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonToTerraform, true)(struct.button),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardToTerraform = lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        image_url: {
            value: cdktf.stringToHclTerraform(struct.imageUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        subtitle: {
            value: cdktf.stringToHclTerraform(struct.subtitle),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        title: {
            value: cdktf.stringToHclTerraform(struct.title),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        button: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonToHclTerraform, true)(struct.button),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // button - computed: false, optional: true, required: false
        this._button = new Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonList(this, "button", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._imageUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageUrl = this._imageUrl;
        }
        if (this._subtitle !== undefined) {
            hasAnyValues = true;
            internalValueResult.subtitle = this._subtitle;
        }
        if (this._title !== undefined) {
            hasAnyValues = true;
            internalValueResult.title = this._title;
        }
        if (this._button?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.button = this._button?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._imageUrl = undefined;
            this._subtitle = undefined;
            this._title = undefined;
            this._button.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._imageUrl = value.imageUrl;
            this._subtitle = value.subtitle;
            this._title = value.title;
            this._button.internalValue = value.button;
        }
    }
    get imageUrl() {
        return this.getStringAttribute('image_url');
    }
    set imageUrl(value) {
        this._imageUrl = value;
    }
    resetImageUrl() {
        this._imageUrl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageUrlInput() {
        return this._imageUrl;
    }
    get subtitle() {
        return this.getStringAttribute('subtitle');
    }
    set subtitle(value) {
        this._subtitle = value;
    }
    resetSubtitle() {
        this._subtitle = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subtitleInput() {
        return this._subtitle;
    }
    get title() {
        return this.getStringAttribute('title');
    }
    set title(value) {
        this._title = value;
    }
    // Temporarily expose input value. Use with caution.
    get titleInput() {
        return this._title;
    }
    get button() {
        return this._button;
    }
    putButton(value) {
        this._button.internalValue = value;
    }
    resetButton() {
        this._button.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get buttonInput() {
        return this._button.internalValue;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardOutputReference = Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardOutputReference;
_168 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardOutputReference[_168] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardList = Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardList;
_169 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardList[_169] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageToTerraform = lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._value = value.value;
        }
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageOutputReference = Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageOutputReference;
_170 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageOutputReference[_170] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageList = Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageList;
_171 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageList[_171] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageToTerraform = lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._value = value.value;
        }
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageOutputReference = Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageOutputReference;
_172 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageOutputReference[_172] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageList = Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageList;
_173 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageList[_173] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageList", version: "19.15.0" };
function lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        custom_payload: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadToTerraform, true)(struct.customPayload),
        image_response_card: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardToTerraform, true)(struct.imageResponseCard),
        plain_text_message: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageToTerraform, true)(struct.plainTextMessage),
        ssml_message: cdktf.listMapper(lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageToTerraform, true)(struct.ssmlMessage),
    };
}
exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationToTerraform = lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationToTerraform;
function lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        custom_payload: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadToHclTerraform, true)(struct.customPayload),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadList",
        },
        image_response_card: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardToHclTerraform, true)(struct.imageResponseCard),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardList",
        },
        plain_text_message: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageToHclTerraform, true)(struct.plainTextMessage),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageList",
        },
        ssml_message: {
            value: cdktf.listMapperHcl(lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageToHclTerraform, true)(struct.ssmlMessage),
            isBlock: true,
            type: "list",
            storageClassType: "Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationToHclTerraform = lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationToHclTerraform;
class Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // custom_payload - computed: false, optional: true, required: false
        this._customPayload = new Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadList(this, "custom_payload", false);
        // image_response_card - computed: false, optional: true, required: false
        this._imageResponseCard = new Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardList(this, "image_response_card", false);
        // plain_text_message - computed: false, optional: true, required: false
        this._plainTextMessage = new Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageList(this, "plain_text_message", false);
        // ssml_message - computed: false, optional: true, required: false
        this._ssmlMessage = new Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageList(this, "ssml_message", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._customPayload?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customPayload = this._customPayload?.internalValue;
        }
        if (this._imageResponseCard?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageResponseCard = this._imageResponseCard?.internalValue;
        }
        if (this._plainTextMessage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.plainTextMessage = this._plainTextMessage?.internalValue;
        }
        if (this._ssmlMessage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ssmlMessage = this._ssmlMessage?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._customPayload.internalValue = undefined;
            this._imageResponseCard.internalValue = undefined;
            this._plainTextMessage.internalValue = undefined;
            this._ssmlMessage.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._customPayload.internalValue = value.customPayload;
            this._imageResponseCard.internalValue = value.imageResponseCard;
            this._plainTextMessage.internalValue = value.plainTextMessage;
            this._ssmlMessage.internalValue = value.ssmlMessage;
        }
    }
    get customPayload() {
        return this._customPayload;
    }
    putCustomPayload(value) {
        this._customPayload.internalValue = value;
    }
    resetCustomPayload() {
        this._customPayload.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customPayloadInput() {
        return this._customPayload.internalValue;
    }
    get imageResponseCard() {
        return this._imageResponseCard;
    }
    putImageResponseCard(value) {
        this._imageResponseCard.internalValue = value;
    }
    resetImageResponseCard() {
        this._imageResponseCard.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageResponseCardInput() {
        return this._imageResponseCard.internalValue;
    }
    get plainTextMessage() {
        return this._plainTextMessage;
    }
    putPlainTextMessage(value) {
        this._plainTextMessage.internalValue = value;
    }
    resetPlainTextMessage() {
        this._plainTextMessage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get plainTextMessageInput() {
        return this._plainTextMessage.internalValue;
    }
    get ssmlMessage() {
        return this._ssmlMessage;
    }
    putSsmlMessage(value) {
        this._ssmlMessage.internalValue = value;
    }
    resetSsmlMessage() {
        this._ssmlMessage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ssmlMessageInput() {
        return this._ssmlMessage.internalValue;
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationOutputReference = Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationOutputReference;
_174 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationOutputReference[_174] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationOutputReference", version: "19.15.0" };
class Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationList = Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationList;
_175 = JSII_RTTI_SYMBOL_1;
Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationList[_175] = { fqn: "@cdktf/provider-aws.lexv2ModelsIntent.Lexv2ModelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationList", version: "19.15.0" };
//# sourceMappingURL=data:application/json;base64,