"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedshiftLogging = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/redshift_logging aws_redshift_logging}
*/
class RedshiftLogging extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a RedshiftLogging resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the RedshiftLogging to import
    * @param importFromId The id of the existing RedshiftLogging that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/redshift_logging#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the RedshiftLogging to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_redshift_logging", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/redshift_logging aws_redshift_logging} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options RedshiftLoggingConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_redshift_logging',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        this._bucketName = config.bucketName;
        this._clusterIdentifier = config.clusterIdentifier;
        this._logDestinationType = config.logDestinationType;
        this._logExports = config.logExports;
        this._s3KeyPrefix = config.s3KeyPrefix;
    }
    get bucketName() {
        return this.getStringAttribute('bucket_name');
    }
    set bucketName(value) {
        this._bucketName = value;
    }
    resetBucketName() {
        this._bucketName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketNameInput() {
        return this._bucketName;
    }
    get clusterIdentifier() {
        return this.getStringAttribute('cluster_identifier');
    }
    set clusterIdentifier(value) {
        this._clusterIdentifier = value;
    }
    // Temporarily expose input value. Use with caution.
    get clusterIdentifierInput() {
        return this._clusterIdentifier;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get logDestinationType() {
        return this.getStringAttribute('log_destination_type');
    }
    set logDestinationType(value) {
        this._logDestinationType = value;
    }
    resetLogDestinationType() {
        this._logDestinationType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logDestinationTypeInput() {
        return this._logDestinationType;
    }
    get logExports() {
        return cdktf.Fn.tolist(this.getListAttribute('log_exports'));
    }
    set logExports(value) {
        this._logExports = value;
    }
    resetLogExports() {
        this._logExports = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logExportsInput() {
        return this._logExports;
    }
    get s3KeyPrefix() {
        return this.getStringAttribute('s3_key_prefix');
    }
    set s3KeyPrefix(value) {
        this._s3KeyPrefix = value;
    }
    resetS3KeyPrefix() {
        this._s3KeyPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3KeyPrefixInput() {
        return this._s3KeyPrefix;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            bucket_name: cdktf.stringToTerraform(this._bucketName),
            cluster_identifier: cdktf.stringToTerraform(this._clusterIdentifier),
            log_destination_type: cdktf.stringToTerraform(this._logDestinationType),
            log_exports: cdktf.listMapper(cdktf.stringToTerraform, false)(this._logExports),
            s3_key_prefix: cdktf.stringToTerraform(this._s3KeyPrefix),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            bucket_name: {
                value: cdktf.stringToHclTerraform(this._bucketName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            cluster_identifier: {
                value: cdktf.stringToHclTerraform(this._clusterIdentifier),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            log_destination_type: {
                value: cdktf.stringToHclTerraform(this._logDestinationType),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            log_exports: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._logExports),
                isBlock: false,
                type: "set",
                storageClassType: "stringList",
            },
            s3_key_prefix: {
                value: cdktf.stringToHclTerraform(this._s3KeyPrefix),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.RedshiftLogging = RedshiftLogging;
_a = JSII_RTTI_SYMBOL_1;
RedshiftLogging[_a] = { fqn: "@cdktf/provider-aws.redshiftLogging.RedshiftLogging", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
RedshiftLogging.tfResourceType = "aws_redshift_logging";
//# sourceMappingURL=data:application/json;base64,