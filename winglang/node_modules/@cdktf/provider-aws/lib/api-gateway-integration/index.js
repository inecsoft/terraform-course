"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiGatewayIntegration = exports.ApiGatewayIntegrationTlsConfigOutputReference = exports.apiGatewayIntegrationTlsConfigToHclTerraform = exports.apiGatewayIntegrationTlsConfigToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function apiGatewayIntegrationTlsConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        insecure_skip_verification: cdktf.booleanToTerraform(struct.insecureSkipVerification),
    };
}
exports.apiGatewayIntegrationTlsConfigToTerraform = apiGatewayIntegrationTlsConfigToTerraform;
function apiGatewayIntegrationTlsConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        insecure_skip_verification: {
            value: cdktf.booleanToHclTerraform(struct.insecureSkipVerification),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.apiGatewayIntegrationTlsConfigToHclTerraform = apiGatewayIntegrationTlsConfigToHclTerraform;
class ApiGatewayIntegrationTlsConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._insecureSkipVerification !== undefined) {
            hasAnyValues = true;
            internalValueResult.insecureSkipVerification = this._insecureSkipVerification;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._insecureSkipVerification = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._insecureSkipVerification = value.insecureSkipVerification;
        }
    }
    get insecureSkipVerification() {
        return this.getBooleanAttribute('insecure_skip_verification');
    }
    set insecureSkipVerification(value) {
        this._insecureSkipVerification = value;
    }
    resetInsecureSkipVerification() {
        this._insecureSkipVerification = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get insecureSkipVerificationInput() {
        return this._insecureSkipVerification;
    }
}
exports.ApiGatewayIntegrationTlsConfigOutputReference = ApiGatewayIntegrationTlsConfigOutputReference;
_a = JSII_RTTI_SYMBOL_1;
ApiGatewayIntegrationTlsConfigOutputReference[_a] = { fqn: "@cdktf/provider-aws.apiGatewayIntegration.ApiGatewayIntegrationTlsConfigOutputReference", version: "19.15.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/api_gateway_integration aws_api_gateway_integration}
*/
class ApiGatewayIntegration extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a ApiGatewayIntegration resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the ApiGatewayIntegration to import
    * @param importFromId The id of the existing ApiGatewayIntegration that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/api_gateway_integration#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the ApiGatewayIntegration to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_api_gateway_integration", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/api_gateway_integration aws_api_gateway_integration} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ApiGatewayIntegrationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_api_gateway_integration',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // tls_config - computed: false, optional: true, required: false
        this._tlsConfig = new ApiGatewayIntegrationTlsConfigOutputReference(this, "tls_config");
        this._cacheKeyParameters = config.cacheKeyParameters;
        this._cacheNamespace = config.cacheNamespace;
        this._connectionId = config.connectionId;
        this._connectionType = config.connectionType;
        this._contentHandling = config.contentHandling;
        this._credentials = config.credentials;
        this._httpMethod = config.httpMethod;
        this._id = config.id;
        this._integrationHttpMethod = config.integrationHttpMethod;
        this._passthroughBehavior = config.passthroughBehavior;
        this._requestParameters = config.requestParameters;
        this._requestTemplates = config.requestTemplates;
        this._resourceId = config.resourceId;
        this._restApiId = config.restApiId;
        this._timeoutMilliseconds = config.timeoutMilliseconds;
        this._type = config.type;
        this._uri = config.uri;
        this._tlsConfig.internalValue = config.tlsConfig;
    }
    get cacheKeyParameters() {
        return cdktf.Fn.tolist(this.getListAttribute('cache_key_parameters'));
    }
    set cacheKeyParameters(value) {
        this._cacheKeyParameters = value;
    }
    resetCacheKeyParameters() {
        this._cacheKeyParameters = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cacheKeyParametersInput() {
        return this._cacheKeyParameters;
    }
    get cacheNamespace() {
        return this.getStringAttribute('cache_namespace');
    }
    set cacheNamespace(value) {
        this._cacheNamespace = value;
    }
    resetCacheNamespace() {
        this._cacheNamespace = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cacheNamespaceInput() {
        return this._cacheNamespace;
    }
    get connectionId() {
        return this.getStringAttribute('connection_id');
    }
    set connectionId(value) {
        this._connectionId = value;
    }
    resetConnectionId() {
        this._connectionId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionIdInput() {
        return this._connectionId;
    }
    get connectionType() {
        return this.getStringAttribute('connection_type');
    }
    set connectionType(value) {
        this._connectionType = value;
    }
    resetConnectionType() {
        this._connectionType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionTypeInput() {
        return this._connectionType;
    }
    get contentHandling() {
        return this.getStringAttribute('content_handling');
    }
    set contentHandling(value) {
        this._contentHandling = value;
    }
    resetContentHandling() {
        this._contentHandling = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get contentHandlingInput() {
        return this._contentHandling;
    }
    get credentials() {
        return this.getStringAttribute('credentials');
    }
    set credentials(value) {
        this._credentials = value;
    }
    resetCredentials() {
        this._credentials = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get credentialsInput() {
        return this._credentials;
    }
    get httpMethod() {
        return this.getStringAttribute('http_method');
    }
    set httpMethod(value) {
        this._httpMethod = value;
    }
    // Temporarily expose input value. Use with caution.
    get httpMethodInput() {
        return this._httpMethod;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get integrationHttpMethod() {
        return this.getStringAttribute('integration_http_method');
    }
    set integrationHttpMethod(value) {
        this._integrationHttpMethod = value;
    }
    resetIntegrationHttpMethod() {
        this._integrationHttpMethod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get integrationHttpMethodInput() {
        return this._integrationHttpMethod;
    }
    get passthroughBehavior() {
        return this.getStringAttribute('passthrough_behavior');
    }
    set passthroughBehavior(value) {
        this._passthroughBehavior = value;
    }
    resetPassthroughBehavior() {
        this._passthroughBehavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passthroughBehaviorInput() {
        return this._passthroughBehavior;
    }
    get requestParameters() {
        return this.getStringMapAttribute('request_parameters');
    }
    set requestParameters(value) {
        this._requestParameters = value;
    }
    resetRequestParameters() {
        this._requestParameters = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestParametersInput() {
        return this._requestParameters;
    }
    get requestTemplates() {
        return this.getStringMapAttribute('request_templates');
    }
    set requestTemplates(value) {
        this._requestTemplates = value;
    }
    resetRequestTemplates() {
        this._requestTemplates = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestTemplatesInput() {
        return this._requestTemplates;
    }
    get resourceId() {
        return this.getStringAttribute('resource_id');
    }
    set resourceId(value) {
        this._resourceId = value;
    }
    // Temporarily expose input value. Use with caution.
    get resourceIdInput() {
        return this._resourceId;
    }
    get restApiId() {
        return this.getStringAttribute('rest_api_id');
    }
    set restApiId(value) {
        this._restApiId = value;
    }
    // Temporarily expose input value. Use with caution.
    get restApiIdInput() {
        return this._restApiId;
    }
    get timeoutMilliseconds() {
        return this.getNumberAttribute('timeout_milliseconds');
    }
    set timeoutMilliseconds(value) {
        this._timeoutMilliseconds = value;
    }
    resetTimeoutMilliseconds() {
        this._timeoutMilliseconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutMillisecondsInput() {
        return this._timeoutMilliseconds;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get uri() {
        return this.getStringAttribute('uri');
    }
    set uri(value) {
        this._uri = value;
    }
    resetUri() {
        this._uri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get uriInput() {
        return this._uri;
    }
    get tlsConfig() {
        return this._tlsConfig;
    }
    putTlsConfig(value) {
        this._tlsConfig.internalValue = value;
    }
    resetTlsConfig() {
        this._tlsConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tlsConfigInput() {
        return this._tlsConfig.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            cache_key_parameters: cdktf.listMapper(cdktf.stringToTerraform, false)(this._cacheKeyParameters),
            cache_namespace: cdktf.stringToTerraform(this._cacheNamespace),
            connection_id: cdktf.stringToTerraform(this._connectionId),
            connection_type: cdktf.stringToTerraform(this._connectionType),
            content_handling: cdktf.stringToTerraform(this._contentHandling),
            credentials: cdktf.stringToTerraform(this._credentials),
            http_method: cdktf.stringToTerraform(this._httpMethod),
            id: cdktf.stringToTerraform(this._id),
            integration_http_method: cdktf.stringToTerraform(this._integrationHttpMethod),
            passthrough_behavior: cdktf.stringToTerraform(this._passthroughBehavior),
            request_parameters: cdktf.hashMapper(cdktf.stringToTerraform)(this._requestParameters),
            request_templates: cdktf.hashMapper(cdktf.stringToTerraform)(this._requestTemplates),
            resource_id: cdktf.stringToTerraform(this._resourceId),
            rest_api_id: cdktf.stringToTerraform(this._restApiId),
            timeout_milliseconds: cdktf.numberToTerraform(this._timeoutMilliseconds),
            type: cdktf.stringToTerraform(this._type),
            uri: cdktf.stringToTerraform(this._uri),
            tls_config: apiGatewayIntegrationTlsConfigToTerraform(this._tlsConfig.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            cache_key_parameters: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._cacheKeyParameters),
                isBlock: false,
                type: "set",
                storageClassType: "stringList",
            },
            cache_namespace: {
                value: cdktf.stringToHclTerraform(this._cacheNamespace),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            connection_id: {
                value: cdktf.stringToHclTerraform(this._connectionId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            connection_type: {
                value: cdktf.stringToHclTerraform(this._connectionType),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            content_handling: {
                value: cdktf.stringToHclTerraform(this._contentHandling),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            credentials: {
                value: cdktf.stringToHclTerraform(this._credentials),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            http_method: {
                value: cdktf.stringToHclTerraform(this._httpMethod),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            integration_http_method: {
                value: cdktf.stringToHclTerraform(this._integrationHttpMethod),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            passthrough_behavior: {
                value: cdktf.stringToHclTerraform(this._passthroughBehavior),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            request_parameters: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._requestParameters),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            request_templates: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._requestTemplates),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            resource_id: {
                value: cdktf.stringToHclTerraform(this._resourceId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            rest_api_id: {
                value: cdktf.stringToHclTerraform(this._restApiId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            timeout_milliseconds: {
                value: cdktf.numberToHclTerraform(this._timeoutMilliseconds),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            type: {
                value: cdktf.stringToHclTerraform(this._type),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            uri: {
                value: cdktf.stringToHclTerraform(this._uri),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            tls_config: {
                value: apiGatewayIntegrationTlsConfigToHclTerraform(this._tlsConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ApiGatewayIntegrationTlsConfigList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.ApiGatewayIntegration = ApiGatewayIntegration;
_b = JSII_RTTI_SYMBOL_1;
ApiGatewayIntegration[_b] = { fqn: "@cdktf/provider-aws.apiGatewayIntegration.ApiGatewayIntegration", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
ApiGatewayIntegration.tfResourceType = "aws_api_gateway_integration";
//# sourceMappingURL=data:application/json;base64,