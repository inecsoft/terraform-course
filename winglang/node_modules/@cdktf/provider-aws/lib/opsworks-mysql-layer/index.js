"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpsworksMysqlLayer = exports.OpsworksMysqlLayerLoadBasedAutoScalingOutputReference = exports.opsworksMysqlLayerLoadBasedAutoScalingToHclTerraform = exports.opsworksMysqlLayerLoadBasedAutoScalingToTerraform = exports.OpsworksMysqlLayerLoadBasedAutoScalingUpscalingOutputReference = exports.opsworksMysqlLayerLoadBasedAutoScalingUpscalingToHclTerraform = exports.opsworksMysqlLayerLoadBasedAutoScalingUpscalingToTerraform = exports.OpsworksMysqlLayerLoadBasedAutoScalingDownscalingOutputReference = exports.opsworksMysqlLayerLoadBasedAutoScalingDownscalingToHclTerraform = exports.opsworksMysqlLayerLoadBasedAutoScalingDownscalingToTerraform = exports.OpsworksMysqlLayerEbsVolumeList = exports.OpsworksMysqlLayerEbsVolumeOutputReference = exports.opsworksMysqlLayerEbsVolumeToHclTerraform = exports.opsworksMysqlLayerEbsVolumeToTerraform = exports.OpsworksMysqlLayerCloudwatchConfigurationOutputReference = exports.opsworksMysqlLayerCloudwatchConfigurationToHclTerraform = exports.opsworksMysqlLayerCloudwatchConfigurationToTerraform = exports.OpsworksMysqlLayerCloudwatchConfigurationLogStreamsList = exports.OpsworksMysqlLayerCloudwatchConfigurationLogStreamsOutputReference = exports.opsworksMysqlLayerCloudwatchConfigurationLogStreamsToHclTerraform = exports.opsworksMysqlLayerCloudwatchConfigurationLogStreamsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function opsworksMysqlLayerCloudwatchConfigurationLogStreamsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        batch_count: cdktf.numberToTerraform(struct.batchCount),
        batch_size: cdktf.numberToTerraform(struct.batchSize),
        buffer_duration: cdktf.numberToTerraform(struct.bufferDuration),
        datetime_format: cdktf.stringToTerraform(struct.datetimeFormat),
        encoding: cdktf.stringToTerraform(struct.encoding),
        file: cdktf.stringToTerraform(struct.file),
        file_fingerprint_lines: cdktf.stringToTerraform(struct.fileFingerprintLines),
        initial_position: cdktf.stringToTerraform(struct.initialPosition),
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        multiline_start_pattern: cdktf.stringToTerraform(struct.multilineStartPattern),
        time_zone: cdktf.stringToTerraform(struct.timeZone),
    };
}
exports.opsworksMysqlLayerCloudwatchConfigurationLogStreamsToTerraform = opsworksMysqlLayerCloudwatchConfigurationLogStreamsToTerraform;
function opsworksMysqlLayerCloudwatchConfigurationLogStreamsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        batch_count: {
            value: cdktf.numberToHclTerraform(struct.batchCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        batch_size: {
            value: cdktf.numberToHclTerraform(struct.batchSize),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        buffer_duration: {
            value: cdktf.numberToHclTerraform(struct.bufferDuration),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        datetime_format: {
            value: cdktf.stringToHclTerraform(struct.datetimeFormat),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        encoding: {
            value: cdktf.stringToHclTerraform(struct.encoding),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        file: {
            value: cdktf.stringToHclTerraform(struct.file),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        file_fingerprint_lines: {
            value: cdktf.stringToHclTerraform(struct.fileFingerprintLines),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        initial_position: {
            value: cdktf.stringToHclTerraform(struct.initialPosition),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        log_group_name: {
            value: cdktf.stringToHclTerraform(struct.logGroupName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        multiline_start_pattern: {
            value: cdktf.stringToHclTerraform(struct.multilineStartPattern),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        time_zone: {
            value: cdktf.stringToHclTerraform(struct.timeZone),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.opsworksMysqlLayerCloudwatchConfigurationLogStreamsToHclTerraform = opsworksMysqlLayerCloudwatchConfigurationLogStreamsToHclTerraform;
class OpsworksMysqlLayerCloudwatchConfigurationLogStreamsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._batchCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.batchCount = this._batchCount;
        }
        if (this._batchSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.batchSize = this._batchSize;
        }
        if (this._bufferDuration !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufferDuration = this._bufferDuration;
        }
        if (this._datetimeFormat !== undefined) {
            hasAnyValues = true;
            internalValueResult.datetimeFormat = this._datetimeFormat;
        }
        if (this._encoding !== undefined) {
            hasAnyValues = true;
            internalValueResult.encoding = this._encoding;
        }
        if (this._file !== undefined) {
            hasAnyValues = true;
            internalValueResult.file = this._file;
        }
        if (this._fileFingerprintLines !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileFingerprintLines = this._fileFingerprintLines;
        }
        if (this._initialPosition !== undefined) {
            hasAnyValues = true;
            internalValueResult.initialPosition = this._initialPosition;
        }
        if (this._logGroupName !== undefined) {
            hasAnyValues = true;
            internalValueResult.logGroupName = this._logGroupName;
        }
        if (this._multilineStartPattern !== undefined) {
            hasAnyValues = true;
            internalValueResult.multilineStartPattern = this._multilineStartPattern;
        }
        if (this._timeZone !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeZone = this._timeZone;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._batchCount = undefined;
            this._batchSize = undefined;
            this._bufferDuration = undefined;
            this._datetimeFormat = undefined;
            this._encoding = undefined;
            this._file = undefined;
            this._fileFingerprintLines = undefined;
            this._initialPosition = undefined;
            this._logGroupName = undefined;
            this._multilineStartPattern = undefined;
            this._timeZone = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._batchCount = value.batchCount;
            this._batchSize = value.batchSize;
            this._bufferDuration = value.bufferDuration;
            this._datetimeFormat = value.datetimeFormat;
            this._encoding = value.encoding;
            this._file = value.file;
            this._fileFingerprintLines = value.fileFingerprintLines;
            this._initialPosition = value.initialPosition;
            this._logGroupName = value.logGroupName;
            this._multilineStartPattern = value.multilineStartPattern;
            this._timeZone = value.timeZone;
        }
    }
    get batchCount() {
        return this.getNumberAttribute('batch_count');
    }
    set batchCount(value) {
        this._batchCount = value;
    }
    resetBatchCount() {
        this._batchCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get batchCountInput() {
        return this._batchCount;
    }
    get batchSize() {
        return this.getNumberAttribute('batch_size');
    }
    set batchSize(value) {
        this._batchSize = value;
    }
    resetBatchSize() {
        this._batchSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get batchSizeInput() {
        return this._batchSize;
    }
    get bufferDuration() {
        return this.getNumberAttribute('buffer_duration');
    }
    set bufferDuration(value) {
        this._bufferDuration = value;
    }
    resetBufferDuration() {
        this._bufferDuration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufferDurationInput() {
        return this._bufferDuration;
    }
    get datetimeFormat() {
        return this.getStringAttribute('datetime_format');
    }
    set datetimeFormat(value) {
        this._datetimeFormat = value;
    }
    resetDatetimeFormat() {
        this._datetimeFormat = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get datetimeFormatInput() {
        return this._datetimeFormat;
    }
    get encoding() {
        return this.getStringAttribute('encoding');
    }
    set encoding(value) {
        this._encoding = value;
    }
    resetEncoding() {
        this._encoding = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encodingInput() {
        return this._encoding;
    }
    get file() {
        return this.getStringAttribute('file');
    }
    set file(value) {
        this._file = value;
    }
    // Temporarily expose input value. Use with caution.
    get fileInput() {
        return this._file;
    }
    get fileFingerprintLines() {
        return this.getStringAttribute('file_fingerprint_lines');
    }
    set fileFingerprintLines(value) {
        this._fileFingerprintLines = value;
    }
    resetFileFingerprintLines() {
        this._fileFingerprintLines = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileFingerprintLinesInput() {
        return this._fileFingerprintLines;
    }
    get initialPosition() {
        return this.getStringAttribute('initial_position');
    }
    set initialPosition(value) {
        this._initialPosition = value;
    }
    resetInitialPosition() {
        this._initialPosition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get initialPositionInput() {
        return this._initialPosition;
    }
    get logGroupName() {
        return this.getStringAttribute('log_group_name');
    }
    set logGroupName(value) {
        this._logGroupName = value;
    }
    // Temporarily expose input value. Use with caution.
    get logGroupNameInput() {
        return this._logGroupName;
    }
    get multilineStartPattern() {
        return this.getStringAttribute('multiline_start_pattern');
    }
    set multilineStartPattern(value) {
        this._multilineStartPattern = value;
    }
    resetMultilineStartPattern() {
        this._multilineStartPattern = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get multilineStartPatternInput() {
        return this._multilineStartPattern;
    }
    get timeZone() {
        return this.getStringAttribute('time_zone');
    }
    set timeZone(value) {
        this._timeZone = value;
    }
    resetTimeZone() {
        this._timeZone = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeZoneInput() {
        return this._timeZone;
    }
}
exports.OpsworksMysqlLayerCloudwatchConfigurationLogStreamsOutputReference = OpsworksMysqlLayerCloudwatchConfigurationLogStreamsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
OpsworksMysqlLayerCloudwatchConfigurationLogStreamsOutputReference[_a] = { fqn: "@cdktf/provider-aws.opsworksMysqlLayer.OpsworksMysqlLayerCloudwatchConfigurationLogStreamsOutputReference", version: "19.15.0" };
class OpsworksMysqlLayerCloudwatchConfigurationLogStreamsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new OpsworksMysqlLayerCloudwatchConfigurationLogStreamsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.OpsworksMysqlLayerCloudwatchConfigurationLogStreamsList = OpsworksMysqlLayerCloudwatchConfigurationLogStreamsList;
_b = JSII_RTTI_SYMBOL_1;
OpsworksMysqlLayerCloudwatchConfigurationLogStreamsList[_b] = { fqn: "@cdktf/provider-aws.opsworksMysqlLayer.OpsworksMysqlLayerCloudwatchConfigurationLogStreamsList", version: "19.15.0" };
function opsworksMysqlLayerCloudwatchConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        log_streams: cdktf.listMapper(opsworksMysqlLayerCloudwatchConfigurationLogStreamsToTerraform, true)(struct.logStreams),
    };
}
exports.opsworksMysqlLayerCloudwatchConfigurationToTerraform = opsworksMysqlLayerCloudwatchConfigurationToTerraform;
function opsworksMysqlLayerCloudwatchConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        log_streams: {
            value: cdktf.listMapperHcl(opsworksMysqlLayerCloudwatchConfigurationLogStreamsToHclTerraform, true)(struct.logStreams),
            isBlock: true,
            type: "list",
            storageClassType: "OpsworksMysqlLayerCloudwatchConfigurationLogStreamsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.opsworksMysqlLayerCloudwatchConfigurationToHclTerraform = opsworksMysqlLayerCloudwatchConfigurationToHclTerraform;
class OpsworksMysqlLayerCloudwatchConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // log_streams - computed: false, optional: true, required: false
        this._logStreams = new OpsworksMysqlLayerCloudwatchConfigurationLogStreamsList(this, "log_streams", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._logStreams?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.logStreams = this._logStreams?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._logStreams.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._logStreams.internalValue = value.logStreams;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get logStreams() {
        return this._logStreams;
    }
    putLogStreams(value) {
        this._logStreams.internalValue = value;
    }
    resetLogStreams() {
        this._logStreams.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logStreamsInput() {
        return this._logStreams.internalValue;
    }
}
exports.OpsworksMysqlLayerCloudwatchConfigurationOutputReference = OpsworksMysqlLayerCloudwatchConfigurationOutputReference;
_c = JSII_RTTI_SYMBOL_1;
OpsworksMysqlLayerCloudwatchConfigurationOutputReference[_c] = { fqn: "@cdktf/provider-aws.opsworksMysqlLayer.OpsworksMysqlLayerCloudwatchConfigurationOutputReference", version: "19.15.0" };
function opsworksMysqlLayerEbsVolumeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        encrypted: cdktf.booleanToTerraform(struct.encrypted),
        iops: cdktf.numberToTerraform(struct.iops),
        mount_point: cdktf.stringToTerraform(struct.mountPoint),
        number_of_disks: cdktf.numberToTerraform(struct.numberOfDisks),
        raid_level: cdktf.stringToTerraform(struct.raidLevel),
        size: cdktf.numberToTerraform(struct.size),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.opsworksMysqlLayerEbsVolumeToTerraform = opsworksMysqlLayerEbsVolumeToTerraform;
function opsworksMysqlLayerEbsVolumeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        encrypted: {
            value: cdktf.booleanToHclTerraform(struct.encrypted),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        iops: {
            value: cdktf.numberToHclTerraform(struct.iops),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        mount_point: {
            value: cdktf.stringToHclTerraform(struct.mountPoint),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        number_of_disks: {
            value: cdktf.numberToHclTerraform(struct.numberOfDisks),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        raid_level: {
            value: cdktf.stringToHclTerraform(struct.raidLevel),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        size: {
            value: cdktf.numberToHclTerraform(struct.size),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        type: {
            value: cdktf.stringToHclTerraform(struct.type),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.opsworksMysqlLayerEbsVolumeToHclTerraform = opsworksMysqlLayerEbsVolumeToHclTerraform;
class OpsworksMysqlLayerEbsVolumeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._encrypted !== undefined) {
            hasAnyValues = true;
            internalValueResult.encrypted = this._encrypted;
        }
        if (this._iops !== undefined) {
            hasAnyValues = true;
            internalValueResult.iops = this._iops;
        }
        if (this._mountPoint !== undefined) {
            hasAnyValues = true;
            internalValueResult.mountPoint = this._mountPoint;
        }
        if (this._numberOfDisks !== undefined) {
            hasAnyValues = true;
            internalValueResult.numberOfDisks = this._numberOfDisks;
        }
        if (this._raidLevel !== undefined) {
            hasAnyValues = true;
            internalValueResult.raidLevel = this._raidLevel;
        }
        if (this._size !== undefined) {
            hasAnyValues = true;
            internalValueResult.size = this._size;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._encrypted = undefined;
            this._iops = undefined;
            this._mountPoint = undefined;
            this._numberOfDisks = undefined;
            this._raidLevel = undefined;
            this._size = undefined;
            this._type = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._encrypted = value.encrypted;
            this._iops = value.iops;
            this._mountPoint = value.mountPoint;
            this._numberOfDisks = value.numberOfDisks;
            this._raidLevel = value.raidLevel;
            this._size = value.size;
            this._type = value.type;
        }
    }
    get encrypted() {
        return this.getBooleanAttribute('encrypted');
    }
    set encrypted(value) {
        this._encrypted = value;
    }
    resetEncrypted() {
        this._encrypted = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptedInput() {
        return this._encrypted;
    }
    get iops() {
        return this.getNumberAttribute('iops');
    }
    set iops(value) {
        this._iops = value;
    }
    resetIops() {
        this._iops = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get iopsInput() {
        return this._iops;
    }
    get mountPoint() {
        return this.getStringAttribute('mount_point');
    }
    set mountPoint(value) {
        this._mountPoint = value;
    }
    // Temporarily expose input value. Use with caution.
    get mountPointInput() {
        return this._mountPoint;
    }
    get numberOfDisks() {
        return this.getNumberAttribute('number_of_disks');
    }
    set numberOfDisks(value) {
        this._numberOfDisks = value;
    }
    // Temporarily expose input value. Use with caution.
    get numberOfDisksInput() {
        return this._numberOfDisks;
    }
    get raidLevel() {
        return this.getStringAttribute('raid_level');
    }
    set raidLevel(value) {
        this._raidLevel = value;
    }
    resetRaidLevel() {
        this._raidLevel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get raidLevelInput() {
        return this._raidLevel;
    }
    get size() {
        return this.getNumberAttribute('size');
    }
    set size(value) {
        this._size = value;
    }
    // Temporarily expose input value. Use with caution.
    get sizeInput() {
        return this._size;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    resetType() {
        this._type = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
}
exports.OpsworksMysqlLayerEbsVolumeOutputReference = OpsworksMysqlLayerEbsVolumeOutputReference;
_d = JSII_RTTI_SYMBOL_1;
OpsworksMysqlLayerEbsVolumeOutputReference[_d] = { fqn: "@cdktf/provider-aws.opsworksMysqlLayer.OpsworksMysqlLayerEbsVolumeOutputReference", version: "19.15.0" };
class OpsworksMysqlLayerEbsVolumeList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new OpsworksMysqlLayerEbsVolumeOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.OpsworksMysqlLayerEbsVolumeList = OpsworksMysqlLayerEbsVolumeList;
_e = JSII_RTTI_SYMBOL_1;
OpsworksMysqlLayerEbsVolumeList[_e] = { fqn: "@cdktf/provider-aws.opsworksMysqlLayer.OpsworksMysqlLayerEbsVolumeList", version: "19.15.0" };
function opsworksMysqlLayerLoadBasedAutoScalingDownscalingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        alarms: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.alarms),
        cpu_threshold: cdktf.numberToTerraform(struct.cpuThreshold),
        ignore_metrics_time: cdktf.numberToTerraform(struct.ignoreMetricsTime),
        instance_count: cdktf.numberToTerraform(struct.instanceCount),
        load_threshold: cdktf.numberToTerraform(struct.loadThreshold),
        memory_threshold: cdktf.numberToTerraform(struct.memoryThreshold),
        thresholds_wait_time: cdktf.numberToTerraform(struct.thresholdsWaitTime),
    };
}
exports.opsworksMysqlLayerLoadBasedAutoScalingDownscalingToTerraform = opsworksMysqlLayerLoadBasedAutoScalingDownscalingToTerraform;
function opsworksMysqlLayerLoadBasedAutoScalingDownscalingToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        alarms: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.alarms),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        cpu_threshold: {
            value: cdktf.numberToHclTerraform(struct.cpuThreshold),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        ignore_metrics_time: {
            value: cdktf.numberToHclTerraform(struct.ignoreMetricsTime),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        instance_count: {
            value: cdktf.numberToHclTerraform(struct.instanceCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        load_threshold: {
            value: cdktf.numberToHclTerraform(struct.loadThreshold),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        memory_threshold: {
            value: cdktf.numberToHclTerraform(struct.memoryThreshold),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        thresholds_wait_time: {
            value: cdktf.numberToHclTerraform(struct.thresholdsWaitTime),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.opsworksMysqlLayerLoadBasedAutoScalingDownscalingToHclTerraform = opsworksMysqlLayerLoadBasedAutoScalingDownscalingToHclTerraform;
class OpsworksMysqlLayerLoadBasedAutoScalingDownscalingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._alarms !== undefined) {
            hasAnyValues = true;
            internalValueResult.alarms = this._alarms;
        }
        if (this._cpuThreshold !== undefined) {
            hasAnyValues = true;
            internalValueResult.cpuThreshold = this._cpuThreshold;
        }
        if (this._ignoreMetricsTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.ignoreMetricsTime = this._ignoreMetricsTime;
        }
        if (this._instanceCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceCount = this._instanceCount;
        }
        if (this._loadThreshold !== undefined) {
            hasAnyValues = true;
            internalValueResult.loadThreshold = this._loadThreshold;
        }
        if (this._memoryThreshold !== undefined) {
            hasAnyValues = true;
            internalValueResult.memoryThreshold = this._memoryThreshold;
        }
        if (this._thresholdsWaitTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.thresholdsWaitTime = this._thresholdsWaitTime;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._alarms = undefined;
            this._cpuThreshold = undefined;
            this._ignoreMetricsTime = undefined;
            this._instanceCount = undefined;
            this._loadThreshold = undefined;
            this._memoryThreshold = undefined;
            this._thresholdsWaitTime = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._alarms = value.alarms;
            this._cpuThreshold = value.cpuThreshold;
            this._ignoreMetricsTime = value.ignoreMetricsTime;
            this._instanceCount = value.instanceCount;
            this._loadThreshold = value.loadThreshold;
            this._memoryThreshold = value.memoryThreshold;
            this._thresholdsWaitTime = value.thresholdsWaitTime;
        }
    }
    get alarms() {
        return this.getListAttribute('alarms');
    }
    set alarms(value) {
        this._alarms = value;
    }
    resetAlarms() {
        this._alarms = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get alarmsInput() {
        return this._alarms;
    }
    get cpuThreshold() {
        return this.getNumberAttribute('cpu_threshold');
    }
    set cpuThreshold(value) {
        this._cpuThreshold = value;
    }
    resetCpuThreshold() {
        this._cpuThreshold = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cpuThresholdInput() {
        return this._cpuThreshold;
    }
    get ignoreMetricsTime() {
        return this.getNumberAttribute('ignore_metrics_time');
    }
    set ignoreMetricsTime(value) {
        this._ignoreMetricsTime = value;
    }
    resetIgnoreMetricsTime() {
        this._ignoreMetricsTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ignoreMetricsTimeInput() {
        return this._ignoreMetricsTime;
    }
    get instanceCount() {
        return this.getNumberAttribute('instance_count');
    }
    set instanceCount(value) {
        this._instanceCount = value;
    }
    resetInstanceCount() {
        this._instanceCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceCountInput() {
        return this._instanceCount;
    }
    get loadThreshold() {
        return this.getNumberAttribute('load_threshold');
    }
    set loadThreshold(value) {
        this._loadThreshold = value;
    }
    resetLoadThreshold() {
        this._loadThreshold = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loadThresholdInput() {
        return this._loadThreshold;
    }
    get memoryThreshold() {
        return this.getNumberAttribute('memory_threshold');
    }
    set memoryThreshold(value) {
        this._memoryThreshold = value;
    }
    resetMemoryThreshold() {
        this._memoryThreshold = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get memoryThresholdInput() {
        return this._memoryThreshold;
    }
    get thresholdsWaitTime() {
        return this.getNumberAttribute('thresholds_wait_time');
    }
    set thresholdsWaitTime(value) {
        this._thresholdsWaitTime = value;
    }
    resetThresholdsWaitTime() {
        this._thresholdsWaitTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get thresholdsWaitTimeInput() {
        return this._thresholdsWaitTime;
    }
}
exports.OpsworksMysqlLayerLoadBasedAutoScalingDownscalingOutputReference = OpsworksMysqlLayerLoadBasedAutoScalingDownscalingOutputReference;
_f = JSII_RTTI_SYMBOL_1;
OpsworksMysqlLayerLoadBasedAutoScalingDownscalingOutputReference[_f] = { fqn: "@cdktf/provider-aws.opsworksMysqlLayer.OpsworksMysqlLayerLoadBasedAutoScalingDownscalingOutputReference", version: "19.15.0" };
function opsworksMysqlLayerLoadBasedAutoScalingUpscalingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        alarms: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.alarms),
        cpu_threshold: cdktf.numberToTerraform(struct.cpuThreshold),
        ignore_metrics_time: cdktf.numberToTerraform(struct.ignoreMetricsTime),
        instance_count: cdktf.numberToTerraform(struct.instanceCount),
        load_threshold: cdktf.numberToTerraform(struct.loadThreshold),
        memory_threshold: cdktf.numberToTerraform(struct.memoryThreshold),
        thresholds_wait_time: cdktf.numberToTerraform(struct.thresholdsWaitTime),
    };
}
exports.opsworksMysqlLayerLoadBasedAutoScalingUpscalingToTerraform = opsworksMysqlLayerLoadBasedAutoScalingUpscalingToTerraform;
function opsworksMysqlLayerLoadBasedAutoScalingUpscalingToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        alarms: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.alarms),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        cpu_threshold: {
            value: cdktf.numberToHclTerraform(struct.cpuThreshold),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        ignore_metrics_time: {
            value: cdktf.numberToHclTerraform(struct.ignoreMetricsTime),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        instance_count: {
            value: cdktf.numberToHclTerraform(struct.instanceCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        load_threshold: {
            value: cdktf.numberToHclTerraform(struct.loadThreshold),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        memory_threshold: {
            value: cdktf.numberToHclTerraform(struct.memoryThreshold),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        thresholds_wait_time: {
            value: cdktf.numberToHclTerraform(struct.thresholdsWaitTime),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.opsworksMysqlLayerLoadBasedAutoScalingUpscalingToHclTerraform = opsworksMysqlLayerLoadBasedAutoScalingUpscalingToHclTerraform;
class OpsworksMysqlLayerLoadBasedAutoScalingUpscalingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._alarms !== undefined) {
            hasAnyValues = true;
            internalValueResult.alarms = this._alarms;
        }
        if (this._cpuThreshold !== undefined) {
            hasAnyValues = true;
            internalValueResult.cpuThreshold = this._cpuThreshold;
        }
        if (this._ignoreMetricsTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.ignoreMetricsTime = this._ignoreMetricsTime;
        }
        if (this._instanceCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceCount = this._instanceCount;
        }
        if (this._loadThreshold !== undefined) {
            hasAnyValues = true;
            internalValueResult.loadThreshold = this._loadThreshold;
        }
        if (this._memoryThreshold !== undefined) {
            hasAnyValues = true;
            internalValueResult.memoryThreshold = this._memoryThreshold;
        }
        if (this._thresholdsWaitTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.thresholdsWaitTime = this._thresholdsWaitTime;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._alarms = undefined;
            this._cpuThreshold = undefined;
            this._ignoreMetricsTime = undefined;
            this._instanceCount = undefined;
            this._loadThreshold = undefined;
            this._memoryThreshold = undefined;
            this._thresholdsWaitTime = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._alarms = value.alarms;
            this._cpuThreshold = value.cpuThreshold;
            this._ignoreMetricsTime = value.ignoreMetricsTime;
            this._instanceCount = value.instanceCount;
            this._loadThreshold = value.loadThreshold;
            this._memoryThreshold = value.memoryThreshold;
            this._thresholdsWaitTime = value.thresholdsWaitTime;
        }
    }
    get alarms() {
        return this.getListAttribute('alarms');
    }
    set alarms(value) {
        this._alarms = value;
    }
    resetAlarms() {
        this._alarms = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get alarmsInput() {
        return this._alarms;
    }
    get cpuThreshold() {
        return this.getNumberAttribute('cpu_threshold');
    }
    set cpuThreshold(value) {
        this._cpuThreshold = value;
    }
    resetCpuThreshold() {
        this._cpuThreshold = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cpuThresholdInput() {
        return this._cpuThreshold;
    }
    get ignoreMetricsTime() {
        return this.getNumberAttribute('ignore_metrics_time');
    }
    set ignoreMetricsTime(value) {
        this._ignoreMetricsTime = value;
    }
    resetIgnoreMetricsTime() {
        this._ignoreMetricsTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ignoreMetricsTimeInput() {
        return this._ignoreMetricsTime;
    }
    get instanceCount() {
        return this.getNumberAttribute('instance_count');
    }
    set instanceCount(value) {
        this._instanceCount = value;
    }
    resetInstanceCount() {
        this._instanceCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceCountInput() {
        return this._instanceCount;
    }
    get loadThreshold() {
        return this.getNumberAttribute('load_threshold');
    }
    set loadThreshold(value) {
        this._loadThreshold = value;
    }
    resetLoadThreshold() {
        this._loadThreshold = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loadThresholdInput() {
        return this._loadThreshold;
    }
    get memoryThreshold() {
        return this.getNumberAttribute('memory_threshold');
    }
    set memoryThreshold(value) {
        this._memoryThreshold = value;
    }
    resetMemoryThreshold() {
        this._memoryThreshold = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get memoryThresholdInput() {
        return this._memoryThreshold;
    }
    get thresholdsWaitTime() {
        return this.getNumberAttribute('thresholds_wait_time');
    }
    set thresholdsWaitTime(value) {
        this._thresholdsWaitTime = value;
    }
    resetThresholdsWaitTime() {
        this._thresholdsWaitTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get thresholdsWaitTimeInput() {
        return this._thresholdsWaitTime;
    }
}
exports.OpsworksMysqlLayerLoadBasedAutoScalingUpscalingOutputReference = OpsworksMysqlLayerLoadBasedAutoScalingUpscalingOutputReference;
_g = JSII_RTTI_SYMBOL_1;
OpsworksMysqlLayerLoadBasedAutoScalingUpscalingOutputReference[_g] = { fqn: "@cdktf/provider-aws.opsworksMysqlLayer.OpsworksMysqlLayerLoadBasedAutoScalingUpscalingOutputReference", version: "19.15.0" };
function opsworksMysqlLayerLoadBasedAutoScalingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable: cdktf.booleanToTerraform(struct.enable),
        downscaling: opsworksMysqlLayerLoadBasedAutoScalingDownscalingToTerraform(struct.downscaling),
        upscaling: opsworksMysqlLayerLoadBasedAutoScalingUpscalingToTerraform(struct.upscaling),
    };
}
exports.opsworksMysqlLayerLoadBasedAutoScalingToTerraform = opsworksMysqlLayerLoadBasedAutoScalingToTerraform;
function opsworksMysqlLayerLoadBasedAutoScalingToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enable: {
            value: cdktf.booleanToHclTerraform(struct.enable),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        downscaling: {
            value: opsworksMysqlLayerLoadBasedAutoScalingDownscalingToHclTerraform(struct.downscaling),
            isBlock: true,
            type: "list",
            storageClassType: "OpsworksMysqlLayerLoadBasedAutoScalingDownscalingList",
        },
        upscaling: {
            value: opsworksMysqlLayerLoadBasedAutoScalingUpscalingToHclTerraform(struct.upscaling),
            isBlock: true,
            type: "list",
            storageClassType: "OpsworksMysqlLayerLoadBasedAutoScalingUpscalingList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.opsworksMysqlLayerLoadBasedAutoScalingToHclTerraform = opsworksMysqlLayerLoadBasedAutoScalingToHclTerraform;
class OpsworksMysqlLayerLoadBasedAutoScalingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // downscaling - computed: false, optional: true, required: false
        this._downscaling = new OpsworksMysqlLayerLoadBasedAutoScalingDownscalingOutputReference(this, "downscaling");
        // upscaling - computed: false, optional: true, required: false
        this._upscaling = new OpsworksMysqlLayerLoadBasedAutoScalingUpscalingOutputReference(this, "upscaling");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enable !== undefined) {
            hasAnyValues = true;
            internalValueResult.enable = this._enable;
        }
        if (this._downscaling?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.downscaling = this._downscaling?.internalValue;
        }
        if (this._upscaling?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.upscaling = this._upscaling?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enable = undefined;
            this._downscaling.internalValue = undefined;
            this._upscaling.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enable = value.enable;
            this._downscaling.internalValue = value.downscaling;
            this._upscaling.internalValue = value.upscaling;
        }
    }
    get enable() {
        return this.getBooleanAttribute('enable');
    }
    set enable(value) {
        this._enable = value;
    }
    resetEnable() {
        this._enable = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableInput() {
        return this._enable;
    }
    get downscaling() {
        return this._downscaling;
    }
    putDownscaling(value) {
        this._downscaling.internalValue = value;
    }
    resetDownscaling() {
        this._downscaling.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get downscalingInput() {
        return this._downscaling.internalValue;
    }
    get upscaling() {
        return this._upscaling;
    }
    putUpscaling(value) {
        this._upscaling.internalValue = value;
    }
    resetUpscaling() {
        this._upscaling.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get upscalingInput() {
        return this._upscaling.internalValue;
    }
}
exports.OpsworksMysqlLayerLoadBasedAutoScalingOutputReference = OpsworksMysqlLayerLoadBasedAutoScalingOutputReference;
_h = JSII_RTTI_SYMBOL_1;
OpsworksMysqlLayerLoadBasedAutoScalingOutputReference[_h] = { fqn: "@cdktf/provider-aws.opsworksMysqlLayer.OpsworksMysqlLayerLoadBasedAutoScalingOutputReference", version: "19.15.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/opsworks_mysql_layer aws_opsworks_mysql_layer}
*/
class OpsworksMysqlLayer extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a OpsworksMysqlLayer resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the OpsworksMysqlLayer to import
    * @param importFromId The id of the existing OpsworksMysqlLayer that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/opsworks_mysql_layer#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the OpsworksMysqlLayer to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_opsworks_mysql_layer", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/opsworks_mysql_layer aws_opsworks_mysql_layer} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options OpsworksMysqlLayerConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_opsworks_mysql_layer',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // cloudwatch_configuration - computed: false, optional: true, required: false
        this._cloudwatchConfiguration = new OpsworksMysqlLayerCloudwatchConfigurationOutputReference(this, "cloudwatch_configuration");
        // ebs_volume - computed: false, optional: true, required: false
        this._ebsVolume = new OpsworksMysqlLayerEbsVolumeList(this, "ebs_volume", true);
        // load_based_auto_scaling - computed: false, optional: true, required: false
        this._loadBasedAutoScaling = new OpsworksMysqlLayerLoadBasedAutoScalingOutputReference(this, "load_based_auto_scaling");
        this._autoAssignElasticIps = config.autoAssignElasticIps;
        this._autoAssignPublicIps = config.autoAssignPublicIps;
        this._autoHealing = config.autoHealing;
        this._customConfigureRecipes = config.customConfigureRecipes;
        this._customDeployRecipes = config.customDeployRecipes;
        this._customInstanceProfileArn = config.customInstanceProfileArn;
        this._customJson = config.customJson;
        this._customSecurityGroupIds = config.customSecurityGroupIds;
        this._customSetupRecipes = config.customSetupRecipes;
        this._customShutdownRecipes = config.customShutdownRecipes;
        this._customUndeployRecipes = config.customUndeployRecipes;
        this._drainElbOnShutdown = config.drainElbOnShutdown;
        this._elasticLoadBalancer = config.elasticLoadBalancer;
        this._id = config.id;
        this._installUpdatesOnBoot = config.installUpdatesOnBoot;
        this._instanceShutdownTimeout = config.instanceShutdownTimeout;
        this._name = config.name;
        this._rootPassword = config.rootPassword;
        this._rootPasswordOnAllInstances = config.rootPasswordOnAllInstances;
        this._stackId = config.stackId;
        this._systemPackages = config.systemPackages;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._useEbsOptimizedInstances = config.useEbsOptimizedInstances;
        this._cloudwatchConfiguration.internalValue = config.cloudwatchConfiguration;
        this._ebsVolume.internalValue = config.ebsVolume;
        this._loadBasedAutoScaling.internalValue = config.loadBasedAutoScaling;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get autoAssignElasticIps() {
        return this.getBooleanAttribute('auto_assign_elastic_ips');
    }
    set autoAssignElasticIps(value) {
        this._autoAssignElasticIps = value;
    }
    resetAutoAssignElasticIps() {
        this._autoAssignElasticIps = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoAssignElasticIpsInput() {
        return this._autoAssignElasticIps;
    }
    get autoAssignPublicIps() {
        return this.getBooleanAttribute('auto_assign_public_ips');
    }
    set autoAssignPublicIps(value) {
        this._autoAssignPublicIps = value;
    }
    resetAutoAssignPublicIps() {
        this._autoAssignPublicIps = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoAssignPublicIpsInput() {
        return this._autoAssignPublicIps;
    }
    get autoHealing() {
        return this.getBooleanAttribute('auto_healing');
    }
    set autoHealing(value) {
        this._autoHealing = value;
    }
    resetAutoHealing() {
        this._autoHealing = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoHealingInput() {
        return this._autoHealing;
    }
    get customConfigureRecipes() {
        return this.getListAttribute('custom_configure_recipes');
    }
    set customConfigureRecipes(value) {
        this._customConfigureRecipes = value;
    }
    resetCustomConfigureRecipes() {
        this._customConfigureRecipes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customConfigureRecipesInput() {
        return this._customConfigureRecipes;
    }
    get customDeployRecipes() {
        return this.getListAttribute('custom_deploy_recipes');
    }
    set customDeployRecipes(value) {
        this._customDeployRecipes = value;
    }
    resetCustomDeployRecipes() {
        this._customDeployRecipes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customDeployRecipesInput() {
        return this._customDeployRecipes;
    }
    get customInstanceProfileArn() {
        return this.getStringAttribute('custom_instance_profile_arn');
    }
    set customInstanceProfileArn(value) {
        this._customInstanceProfileArn = value;
    }
    resetCustomInstanceProfileArn() {
        this._customInstanceProfileArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customInstanceProfileArnInput() {
        return this._customInstanceProfileArn;
    }
    get customJson() {
        return this.getStringAttribute('custom_json');
    }
    set customJson(value) {
        this._customJson = value;
    }
    resetCustomJson() {
        this._customJson = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customJsonInput() {
        return this._customJson;
    }
    get customSecurityGroupIds() {
        return cdktf.Fn.tolist(this.getListAttribute('custom_security_group_ids'));
    }
    set customSecurityGroupIds(value) {
        this._customSecurityGroupIds = value;
    }
    resetCustomSecurityGroupIds() {
        this._customSecurityGroupIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customSecurityGroupIdsInput() {
        return this._customSecurityGroupIds;
    }
    get customSetupRecipes() {
        return this.getListAttribute('custom_setup_recipes');
    }
    set customSetupRecipes(value) {
        this._customSetupRecipes = value;
    }
    resetCustomSetupRecipes() {
        this._customSetupRecipes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customSetupRecipesInput() {
        return this._customSetupRecipes;
    }
    get customShutdownRecipes() {
        return this.getListAttribute('custom_shutdown_recipes');
    }
    set customShutdownRecipes(value) {
        this._customShutdownRecipes = value;
    }
    resetCustomShutdownRecipes() {
        this._customShutdownRecipes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customShutdownRecipesInput() {
        return this._customShutdownRecipes;
    }
    get customUndeployRecipes() {
        return this.getListAttribute('custom_undeploy_recipes');
    }
    set customUndeployRecipes(value) {
        this._customUndeployRecipes = value;
    }
    resetCustomUndeployRecipes() {
        this._customUndeployRecipes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customUndeployRecipesInput() {
        return this._customUndeployRecipes;
    }
    get drainElbOnShutdown() {
        return this.getBooleanAttribute('drain_elb_on_shutdown');
    }
    set drainElbOnShutdown(value) {
        this._drainElbOnShutdown = value;
    }
    resetDrainElbOnShutdown() {
        this._drainElbOnShutdown = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get drainElbOnShutdownInput() {
        return this._drainElbOnShutdown;
    }
    get elasticLoadBalancer() {
        return this.getStringAttribute('elastic_load_balancer');
    }
    set elasticLoadBalancer(value) {
        this._elasticLoadBalancer = value;
    }
    resetElasticLoadBalancer() {
        this._elasticLoadBalancer = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get elasticLoadBalancerInput() {
        return this._elasticLoadBalancer;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get installUpdatesOnBoot() {
        return this.getBooleanAttribute('install_updates_on_boot');
    }
    set installUpdatesOnBoot(value) {
        this._installUpdatesOnBoot = value;
    }
    resetInstallUpdatesOnBoot() {
        this._installUpdatesOnBoot = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get installUpdatesOnBootInput() {
        return this._installUpdatesOnBoot;
    }
    get instanceShutdownTimeout() {
        return this.getNumberAttribute('instance_shutdown_timeout');
    }
    set instanceShutdownTimeout(value) {
        this._instanceShutdownTimeout = value;
    }
    resetInstanceShutdownTimeout() {
        this._instanceShutdownTimeout = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceShutdownTimeoutInput() {
        return this._instanceShutdownTimeout;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get rootPassword() {
        return this.getStringAttribute('root_password');
    }
    set rootPassword(value) {
        this._rootPassword = value;
    }
    resetRootPassword() {
        this._rootPassword = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rootPasswordInput() {
        return this._rootPassword;
    }
    get rootPasswordOnAllInstances() {
        return this.getBooleanAttribute('root_password_on_all_instances');
    }
    set rootPasswordOnAllInstances(value) {
        this._rootPasswordOnAllInstances = value;
    }
    resetRootPasswordOnAllInstances() {
        this._rootPasswordOnAllInstances = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rootPasswordOnAllInstancesInput() {
        return this._rootPasswordOnAllInstances;
    }
    get stackId() {
        return this.getStringAttribute('stack_id');
    }
    set stackId(value) {
        this._stackId = value;
    }
    // Temporarily expose input value. Use with caution.
    get stackIdInput() {
        return this._stackId;
    }
    get systemPackages() {
        return cdktf.Fn.tolist(this.getListAttribute('system_packages'));
    }
    set systemPackages(value) {
        this._systemPackages = value;
    }
    resetSystemPackages() {
        this._systemPackages = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get systemPackagesInput() {
        return this._systemPackages;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get useEbsOptimizedInstances() {
        return this.getBooleanAttribute('use_ebs_optimized_instances');
    }
    set useEbsOptimizedInstances(value) {
        this._useEbsOptimizedInstances = value;
    }
    resetUseEbsOptimizedInstances() {
        this._useEbsOptimizedInstances = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get useEbsOptimizedInstancesInput() {
        return this._useEbsOptimizedInstances;
    }
    get cloudwatchConfiguration() {
        return this._cloudwatchConfiguration;
    }
    putCloudwatchConfiguration(value) {
        this._cloudwatchConfiguration.internalValue = value;
    }
    resetCloudwatchConfiguration() {
        this._cloudwatchConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudwatchConfigurationInput() {
        return this._cloudwatchConfiguration.internalValue;
    }
    get ebsVolume() {
        return this._ebsVolume;
    }
    putEbsVolume(value) {
        this._ebsVolume.internalValue = value;
    }
    resetEbsVolume() {
        this._ebsVolume.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ebsVolumeInput() {
        return this._ebsVolume.internalValue;
    }
    get loadBasedAutoScaling() {
        return this._loadBasedAutoScaling;
    }
    putLoadBasedAutoScaling(value) {
        this._loadBasedAutoScaling.internalValue = value;
    }
    resetLoadBasedAutoScaling() {
        this._loadBasedAutoScaling.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loadBasedAutoScalingInput() {
        return this._loadBasedAutoScaling.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            auto_assign_elastic_ips: cdktf.booleanToTerraform(this._autoAssignElasticIps),
            auto_assign_public_ips: cdktf.booleanToTerraform(this._autoAssignPublicIps),
            auto_healing: cdktf.booleanToTerraform(this._autoHealing),
            custom_configure_recipes: cdktf.listMapper(cdktf.stringToTerraform, false)(this._customConfigureRecipes),
            custom_deploy_recipes: cdktf.listMapper(cdktf.stringToTerraform, false)(this._customDeployRecipes),
            custom_instance_profile_arn: cdktf.stringToTerraform(this._customInstanceProfileArn),
            custom_json: cdktf.stringToTerraform(this._customJson),
            custom_security_group_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(this._customSecurityGroupIds),
            custom_setup_recipes: cdktf.listMapper(cdktf.stringToTerraform, false)(this._customSetupRecipes),
            custom_shutdown_recipes: cdktf.listMapper(cdktf.stringToTerraform, false)(this._customShutdownRecipes),
            custom_undeploy_recipes: cdktf.listMapper(cdktf.stringToTerraform, false)(this._customUndeployRecipes),
            drain_elb_on_shutdown: cdktf.booleanToTerraform(this._drainElbOnShutdown),
            elastic_load_balancer: cdktf.stringToTerraform(this._elasticLoadBalancer),
            id: cdktf.stringToTerraform(this._id),
            install_updates_on_boot: cdktf.booleanToTerraform(this._installUpdatesOnBoot),
            instance_shutdown_timeout: cdktf.numberToTerraform(this._instanceShutdownTimeout),
            name: cdktf.stringToTerraform(this._name),
            root_password: cdktf.stringToTerraform(this._rootPassword),
            root_password_on_all_instances: cdktf.booleanToTerraform(this._rootPasswordOnAllInstances),
            stack_id: cdktf.stringToTerraform(this._stackId),
            system_packages: cdktf.listMapper(cdktf.stringToTerraform, false)(this._systemPackages),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            use_ebs_optimized_instances: cdktf.booleanToTerraform(this._useEbsOptimizedInstances),
            cloudwatch_configuration: opsworksMysqlLayerCloudwatchConfigurationToTerraform(this._cloudwatchConfiguration.internalValue),
            ebs_volume: cdktf.listMapper(opsworksMysqlLayerEbsVolumeToTerraform, true)(this._ebsVolume.internalValue),
            load_based_auto_scaling: opsworksMysqlLayerLoadBasedAutoScalingToTerraform(this._loadBasedAutoScaling.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            auto_assign_elastic_ips: {
                value: cdktf.booleanToHclTerraform(this._autoAssignElasticIps),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            auto_assign_public_ips: {
                value: cdktf.booleanToHclTerraform(this._autoAssignPublicIps),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            auto_healing: {
                value: cdktf.booleanToHclTerraform(this._autoHealing),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            custom_configure_recipes: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._customConfigureRecipes),
                isBlock: false,
                type: "list",
                storageClassType: "stringList",
            },
            custom_deploy_recipes: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._customDeployRecipes),
                isBlock: false,
                type: "list",
                storageClassType: "stringList",
            },
            custom_instance_profile_arn: {
                value: cdktf.stringToHclTerraform(this._customInstanceProfileArn),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            custom_json: {
                value: cdktf.stringToHclTerraform(this._customJson),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            custom_security_group_ids: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._customSecurityGroupIds),
                isBlock: false,
                type: "set",
                storageClassType: "stringList",
            },
            custom_setup_recipes: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._customSetupRecipes),
                isBlock: false,
                type: "list",
                storageClassType: "stringList",
            },
            custom_shutdown_recipes: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._customShutdownRecipes),
                isBlock: false,
                type: "list",
                storageClassType: "stringList",
            },
            custom_undeploy_recipes: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._customUndeployRecipes),
                isBlock: false,
                type: "list",
                storageClassType: "stringList",
            },
            drain_elb_on_shutdown: {
                value: cdktf.booleanToHclTerraform(this._drainElbOnShutdown),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            elastic_load_balancer: {
                value: cdktf.stringToHclTerraform(this._elasticLoadBalancer),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            install_updates_on_boot: {
                value: cdktf.booleanToHclTerraform(this._installUpdatesOnBoot),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            instance_shutdown_timeout: {
                value: cdktf.numberToHclTerraform(this._instanceShutdownTimeout),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            root_password: {
                value: cdktf.stringToHclTerraform(this._rootPassword),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            root_password_on_all_instances: {
                value: cdktf.booleanToHclTerraform(this._rootPasswordOnAllInstances),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            stack_id: {
                value: cdktf.stringToHclTerraform(this._stackId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            system_packages: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._systemPackages),
                isBlock: false,
                type: "set",
                storageClassType: "stringList",
            },
            tags: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tags),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            tags_all: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tagsAll),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            use_ebs_optimized_instances: {
                value: cdktf.booleanToHclTerraform(this._useEbsOptimizedInstances),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            cloudwatch_configuration: {
                value: opsworksMysqlLayerCloudwatchConfigurationToHclTerraform(this._cloudwatchConfiguration.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "OpsworksMysqlLayerCloudwatchConfigurationList",
            },
            ebs_volume: {
                value: cdktf.listMapperHcl(opsworksMysqlLayerEbsVolumeToHclTerraform, true)(this._ebsVolume.internalValue),
                isBlock: true,
                type: "set",
                storageClassType: "OpsworksMysqlLayerEbsVolumeList",
            },
            load_based_auto_scaling: {
                value: opsworksMysqlLayerLoadBasedAutoScalingToHclTerraform(this._loadBasedAutoScaling.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "OpsworksMysqlLayerLoadBasedAutoScalingList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.OpsworksMysqlLayer = OpsworksMysqlLayer;
_j = JSII_RTTI_SYMBOL_1;
OpsworksMysqlLayer[_j] = { fqn: "@cdktf/provider-aws.opsworksMysqlLayer.OpsworksMysqlLayer", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
OpsworksMysqlLayer.tfResourceType = "aws_opsworks_mysql_layer";
//# sourceMappingURL=data:application/json;base64,