"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28;
Object.defineProperty(exports, "__esModule", { value: true });
exports.sagemakerDomainDefaultUserSettingsCodeEditorAppSettingsToHclTerraform = exports.sagemakerDomainDefaultUserSettingsCodeEditorAppSettingsToTerraform = exports.SagemakerDomainDefaultUserSettingsCodeEditorAppSettingsDefaultResourceSpecOutputReference = exports.sagemakerDomainDefaultUserSettingsCodeEditorAppSettingsDefaultResourceSpecToHclTerraform = exports.sagemakerDomainDefaultUserSettingsCodeEditorAppSettingsDefaultResourceSpecToTerraform = exports.SagemakerDomainDefaultUserSettingsCanvasAppSettingsOutputReference = exports.sagemakerDomainDefaultUserSettingsCanvasAppSettingsToHclTerraform = exports.sagemakerDomainDefaultUserSettingsCanvasAppSettingsToTerraform = exports.SagemakerDomainDefaultUserSettingsCanvasAppSettingsWorkspaceSettingsOutputReference = exports.sagemakerDomainDefaultUserSettingsCanvasAppSettingsWorkspaceSettingsToHclTerraform = exports.sagemakerDomainDefaultUserSettingsCanvasAppSettingsWorkspaceSettingsToTerraform = exports.SagemakerDomainDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsOutputReference = exports.sagemakerDomainDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsToHclTerraform = exports.sagemakerDomainDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsToTerraform = exports.SagemakerDomainDefaultUserSettingsCanvasAppSettingsModelRegisterSettingsOutputReference = exports.sagemakerDomainDefaultUserSettingsCanvasAppSettingsModelRegisterSettingsToHclTerraform = exports.sagemakerDomainDefaultUserSettingsCanvasAppSettingsModelRegisterSettingsToTerraform = exports.SagemakerDomainDefaultUserSettingsCanvasAppSettingsKendraSettingsOutputReference = exports.sagemakerDomainDefaultUserSettingsCanvasAppSettingsKendraSettingsToHclTerraform = exports.sagemakerDomainDefaultUserSettingsCanvasAppSettingsKendraSettingsToTerraform = exports.SagemakerDomainDefaultUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsList = exports.SagemakerDomainDefaultUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsOutputReference = exports.sagemakerDomainDefaultUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsToHclTerraform = exports.sagemakerDomainDefaultUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsToTerraform = exports.SagemakerDomainDefaultUserSettingsCanvasAppSettingsDirectDeploySettingsOutputReference = exports.sagemakerDomainDefaultUserSettingsCanvasAppSettingsDirectDeploySettingsToHclTerraform = exports.sagemakerDomainDefaultUserSettingsCanvasAppSettingsDirectDeploySettingsToTerraform = exports.SagemakerDomainDefaultSpaceSettingsOutputReference = exports.sagemakerDomainDefaultSpaceSettingsToHclTerraform = exports.sagemakerDomainDefaultSpaceSettingsToTerraform = exports.SagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsOutputReference = exports.sagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsToHclTerraform = exports.sagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsToTerraform = exports.SagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecOutputReference = exports.sagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecToHclTerraform = exports.sagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform = exports.SagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImageList = exports.SagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImageOutputReference = exports.sagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImageToHclTerraform = exports.sagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImageToTerraform = exports.SagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsOutputReference = exports.sagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsToHclTerraform = exports.sagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsToTerraform = exports.SagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecOutputReference = exports.sagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecToHclTerraform = exports.sagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform = exports.SagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepositoryList = exports.SagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepositoryOutputReference = exports.sagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepositoryToHclTerraform = exports.sagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepositoryToTerraform = void 0;
exports.sagemakerDomainDefaultUserSettingsRSessionAppSettingsDefaultResourceSpecToTerraform = exports.SagemakerDomainDefaultUserSettingsRSessionAppSettingsCustomImageList = exports.SagemakerDomainDefaultUserSettingsRSessionAppSettingsCustomImageOutputReference = exports.sagemakerDomainDefaultUserSettingsRSessionAppSettingsCustomImageToHclTerraform = exports.sagemakerDomainDefaultUserSettingsRSessionAppSettingsCustomImageToTerraform = exports.SagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsOutputReference = exports.sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsToHclTerraform = exports.sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsToTerraform = exports.SagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecOutputReference = exports.sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToHclTerraform = exports.sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform = exports.SagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageList = exports.SagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageOutputReference = exports.sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageToHclTerraform = exports.sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageToTerraform = exports.SagemakerDomainDefaultUserSettingsJupyterServerAppSettingsOutputReference = exports.sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsToHclTerraform = exports.sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsToTerraform = exports.SagemakerDomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecOutputReference = exports.sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecToHclTerraform = exports.sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform = exports.SagemakerDomainDefaultUserSettingsJupyterServerAppSettingsCodeRepositoryList = exports.SagemakerDomainDefaultUserSettingsJupyterServerAppSettingsCodeRepositoryOutputReference = exports.sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsCodeRepositoryToHclTerraform = exports.sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsCodeRepositoryToTerraform = exports.SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsOutputReference = exports.sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsToHclTerraform = exports.sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsToTerraform = exports.SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsDefaultResourceSpecOutputReference = exports.sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsDefaultResourceSpecToHclTerraform = exports.sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsDefaultResourceSpecToTerraform = exports.SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCustomImageList = exports.SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCustomImageOutputReference = exports.sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCustomImageToHclTerraform = exports.sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCustomImageToTerraform = exports.SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCodeRepositoryList = exports.SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCodeRepositoryOutputReference = exports.sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCodeRepositoryToHclTerraform = exports.sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCodeRepositoryToTerraform = exports.SagemakerDomainDefaultUserSettingsCustomPosixUserConfigOutputReference = exports.sagemakerDomainDefaultUserSettingsCustomPosixUserConfigToHclTerraform = exports.sagemakerDomainDefaultUserSettingsCustomPosixUserConfigToTerraform = exports.SagemakerDomainDefaultUserSettingsCustomFileSystemConfigList = exports.SagemakerDomainDefaultUserSettingsCustomFileSystemConfigOutputReference = exports.sagemakerDomainDefaultUserSettingsCustomFileSystemConfigToHclTerraform = exports.sagemakerDomainDefaultUserSettingsCustomFileSystemConfigToTerraform = exports.SagemakerDomainDefaultUserSettingsCustomFileSystemConfigEfsFileSystemConfigOutputReference = exports.sagemakerDomainDefaultUserSettingsCustomFileSystemConfigEfsFileSystemConfigToHclTerraform = exports.sagemakerDomainDefaultUserSettingsCustomFileSystemConfigEfsFileSystemConfigToTerraform = exports.SagemakerDomainDefaultUserSettingsCodeEditorAppSettingsOutputReference = void 0;
exports.SagemakerDomain = exports.SagemakerDomainRetentionPolicyOutputReference = exports.sagemakerDomainRetentionPolicyToHclTerraform = exports.sagemakerDomainRetentionPolicyToTerraform = exports.SagemakerDomainDomainSettingsOutputReference = exports.sagemakerDomainDomainSettingsToHclTerraform = exports.sagemakerDomainDomainSettingsToTerraform = exports.SagemakerDomainDomainSettingsRStudioServerProDomainSettingsOutputReference = exports.sagemakerDomainDomainSettingsRStudioServerProDomainSettingsToHclTerraform = exports.sagemakerDomainDomainSettingsRStudioServerProDomainSettingsToTerraform = exports.SagemakerDomainDomainSettingsRStudioServerProDomainSettingsDefaultResourceSpecOutputReference = exports.sagemakerDomainDomainSettingsRStudioServerProDomainSettingsDefaultResourceSpecToHclTerraform = exports.sagemakerDomainDomainSettingsRStudioServerProDomainSettingsDefaultResourceSpecToTerraform = exports.SagemakerDomainDefaultUserSettingsOutputReference = exports.sagemakerDomainDefaultUserSettingsToHclTerraform = exports.sagemakerDomainDefaultUserSettingsToTerraform = exports.SagemakerDomainDefaultUserSettingsTensorBoardAppSettingsOutputReference = exports.sagemakerDomainDefaultUserSettingsTensorBoardAppSettingsToHclTerraform = exports.sagemakerDomainDefaultUserSettingsTensorBoardAppSettingsToTerraform = exports.SagemakerDomainDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpecOutputReference = exports.sagemakerDomainDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpecToHclTerraform = exports.sagemakerDomainDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpecToTerraform = exports.SagemakerDomainDefaultUserSettingsSpaceStorageSettingsOutputReference = exports.sagemakerDomainDefaultUserSettingsSpaceStorageSettingsToHclTerraform = exports.sagemakerDomainDefaultUserSettingsSpaceStorageSettingsToTerraform = exports.SagemakerDomainDefaultUserSettingsSpaceStorageSettingsDefaultEbsStorageSettingsOutputReference = exports.sagemakerDomainDefaultUserSettingsSpaceStorageSettingsDefaultEbsStorageSettingsToHclTerraform = exports.sagemakerDomainDefaultUserSettingsSpaceStorageSettingsDefaultEbsStorageSettingsToTerraform = exports.SagemakerDomainDefaultUserSettingsSharingSettingsOutputReference = exports.sagemakerDomainDefaultUserSettingsSharingSettingsToHclTerraform = exports.sagemakerDomainDefaultUserSettingsSharingSettingsToTerraform = exports.SagemakerDomainDefaultUserSettingsRStudioServerProAppSettingsOutputReference = exports.sagemakerDomainDefaultUserSettingsRStudioServerProAppSettingsToHclTerraform = exports.sagemakerDomainDefaultUserSettingsRStudioServerProAppSettingsToTerraform = exports.SagemakerDomainDefaultUserSettingsRSessionAppSettingsOutputReference = exports.sagemakerDomainDefaultUserSettingsRSessionAppSettingsToHclTerraform = exports.sagemakerDomainDefaultUserSettingsRSessionAppSettingsToTerraform = exports.SagemakerDomainDefaultUserSettingsRSessionAppSettingsDefaultResourceSpecOutputReference = exports.sagemakerDomainDefaultUserSettingsRSessionAppSettingsDefaultResourceSpecToHclTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function sagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepositoryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        repository_url: cdktf.stringToTerraform(struct.repositoryUrl),
    };
}
exports.sagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepositoryToTerraform = sagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepositoryToTerraform;
function sagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepositoryToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        repository_url: {
            value: cdktf.stringToHclTerraform(struct.repositoryUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepositoryToHclTerraform = sagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepositoryToHclTerraform;
class SagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepositoryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._repositoryUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.repositoryUrl = this._repositoryUrl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._repositoryUrl = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._repositoryUrl = value.repositoryUrl;
        }
    }
    get repositoryUrl() {
        return this.getStringAttribute('repository_url');
    }
    set repositoryUrl(value) {
        this._repositoryUrl = value;
    }
    // Temporarily expose input value. Use with caution.
    get repositoryUrlInput() {
        return this._repositoryUrl;
    }
}
exports.SagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepositoryOutputReference = SagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepositoryOutputReference;
_a = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepositoryOutputReference[_a] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepositoryOutputReference", version: "19.15.0" };
class SagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepositoryList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepositoryOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepositoryList = SagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepositoryList;
_b = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepositoryList[_b] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepositoryList", version: "19.15.0" };
function sagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        lifecycle_config_arn: cdktf.stringToTerraform(struct.lifecycleConfigArn),
        sagemaker_image_arn: cdktf.stringToTerraform(struct.sagemakerImageArn),
        sagemaker_image_version_alias: cdktf.stringToTerraform(struct.sagemakerImageVersionAlias),
        sagemaker_image_version_arn: cdktf.stringToTerraform(struct.sagemakerImageVersionArn),
    };
}
exports.sagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform = sagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform;
function sagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        instance_type: {
            value: cdktf.stringToHclTerraform(struct.instanceType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        lifecycle_config_arn: {
            value: cdktf.stringToHclTerraform(struct.lifecycleConfigArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_arn: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_version_alias: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageVersionAlias),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_version_arn: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageVersionArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecToHclTerraform = sagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecToHclTerraform;
class SagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._instanceType !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceType = this._instanceType;
        }
        if (this._lifecycleConfigArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.lifecycleConfigArn = this._lifecycleConfigArn;
        }
        if (this._sagemakerImageArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageArn = this._sagemakerImageArn;
        }
        if (this._sagemakerImageVersionAlias !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageVersionAlias = this._sagemakerImageVersionAlias;
        }
        if (this._sagemakerImageVersionArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageVersionArn = this._sagemakerImageVersionArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._instanceType = undefined;
            this._lifecycleConfigArn = undefined;
            this._sagemakerImageArn = undefined;
            this._sagemakerImageVersionAlias = undefined;
            this._sagemakerImageVersionArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._instanceType = value.instanceType;
            this._lifecycleConfigArn = value.lifecycleConfigArn;
            this._sagemakerImageArn = value.sagemakerImageArn;
            this._sagemakerImageVersionAlias = value.sagemakerImageVersionAlias;
            this._sagemakerImageVersionArn = value.sagemakerImageVersionArn;
        }
    }
    get instanceType() {
        return this.getStringAttribute('instance_type');
    }
    set instanceType(value) {
        this._instanceType = value;
    }
    resetInstanceType() {
        this._instanceType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceTypeInput() {
        return this._instanceType;
    }
    get lifecycleConfigArn() {
        return this.getStringAttribute('lifecycle_config_arn');
    }
    set lifecycleConfigArn(value) {
        this._lifecycleConfigArn = value;
    }
    resetLifecycleConfigArn() {
        this._lifecycleConfigArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifecycleConfigArnInput() {
        return this._lifecycleConfigArn;
    }
    get sagemakerImageArn() {
        return this.getStringAttribute('sagemaker_image_arn');
    }
    set sagemakerImageArn(value) {
        this._sagemakerImageArn = value;
    }
    resetSagemakerImageArn() {
        this._sagemakerImageArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageArnInput() {
        return this._sagemakerImageArn;
    }
    get sagemakerImageVersionAlias() {
        return this.getStringAttribute('sagemaker_image_version_alias');
    }
    set sagemakerImageVersionAlias(value) {
        this._sagemakerImageVersionAlias = value;
    }
    resetSagemakerImageVersionAlias() {
        this._sagemakerImageVersionAlias = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageVersionAliasInput() {
        return this._sagemakerImageVersionAlias;
    }
    get sagemakerImageVersionArn() {
        return this.getStringAttribute('sagemaker_image_version_arn');
    }
    set sagemakerImageVersionArn(value) {
        this._sagemakerImageVersionArn = value;
    }
    resetSagemakerImageVersionArn() {
        this._sagemakerImageVersionArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageVersionArnInput() {
        return this._sagemakerImageVersionArn;
    }
}
exports.SagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecOutputReference = SagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecOutputReference;
_c = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecOutputReference[_c] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecOutputReference", version: "19.15.0" };
function sagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        lifecycle_config_arns: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.lifecycleConfigArns),
        code_repository: cdktf.listMapper(sagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepositoryToTerraform, true)(struct.codeRepository),
        default_resource_spec: sagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform(struct.defaultResourceSpec),
    };
}
exports.sagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsToTerraform = sagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsToTerraform;
function sagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        lifecycle_config_arns: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.lifecycleConfigArns),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        code_repository: {
            value: cdktf.listMapperHcl(sagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepositoryToHclTerraform, true)(struct.codeRepository),
            isBlock: true,
            type: "set",
            storageClassType: "SagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepositoryList",
        },
        default_resource_spec: {
            value: sagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecToHclTerraform(struct.defaultResourceSpec),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsToHclTerraform = sagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsToHclTerraform;
class SagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // code_repository - computed: false, optional: true, required: false
        this._codeRepository = new SagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepositoryList(this, "code_repository", true);
        // default_resource_spec - computed: false, optional: true, required: false
        this._defaultResourceSpec = new SagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecOutputReference(this, "default_resource_spec");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._lifecycleConfigArns !== undefined) {
            hasAnyValues = true;
            internalValueResult.lifecycleConfigArns = this._lifecycleConfigArns;
        }
        if (this._codeRepository?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.codeRepository = this._codeRepository?.internalValue;
        }
        if (this._defaultResourceSpec?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultResourceSpec = this._defaultResourceSpec?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._lifecycleConfigArns = undefined;
            this._codeRepository.internalValue = undefined;
            this._defaultResourceSpec.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._lifecycleConfigArns = value.lifecycleConfigArns;
            this._codeRepository.internalValue = value.codeRepository;
            this._defaultResourceSpec.internalValue = value.defaultResourceSpec;
        }
    }
    get lifecycleConfigArns() {
        return cdktf.Fn.tolist(this.getListAttribute('lifecycle_config_arns'));
    }
    set lifecycleConfigArns(value) {
        this._lifecycleConfigArns = value;
    }
    resetLifecycleConfigArns() {
        this._lifecycleConfigArns = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifecycleConfigArnsInput() {
        return this._lifecycleConfigArns;
    }
    get codeRepository() {
        return this._codeRepository;
    }
    putCodeRepository(value) {
        this._codeRepository.internalValue = value;
    }
    resetCodeRepository() {
        this._codeRepository.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get codeRepositoryInput() {
        return this._codeRepository.internalValue;
    }
    get defaultResourceSpec() {
        return this._defaultResourceSpec;
    }
    putDefaultResourceSpec(value) {
        this._defaultResourceSpec.internalValue = value;
    }
    resetDefaultResourceSpec() {
        this._defaultResourceSpec.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultResourceSpecInput() {
        return this._defaultResourceSpec.internalValue;
    }
}
exports.SagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsOutputReference = SagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsOutputReference;
_d = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsOutputReference[_d] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsOutputReference", version: "19.15.0" };
function sagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        app_image_config_name: cdktf.stringToTerraform(struct.appImageConfigName),
        image_name: cdktf.stringToTerraform(struct.imageName),
        image_version_number: cdktf.numberToTerraform(struct.imageVersionNumber),
    };
}
exports.sagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImageToTerraform = sagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImageToTerraform;
function sagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        app_image_config_name: {
            value: cdktf.stringToHclTerraform(struct.appImageConfigName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        image_name: {
            value: cdktf.stringToHclTerraform(struct.imageName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        image_version_number: {
            value: cdktf.numberToHclTerraform(struct.imageVersionNumber),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImageToHclTerraform = sagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImageToHclTerraform;
class SagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._appImageConfigName !== undefined) {
            hasAnyValues = true;
            internalValueResult.appImageConfigName = this._appImageConfigName;
        }
        if (this._imageName !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageName = this._imageName;
        }
        if (this._imageVersionNumber !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageVersionNumber = this._imageVersionNumber;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._appImageConfigName = undefined;
            this._imageName = undefined;
            this._imageVersionNumber = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._appImageConfigName = value.appImageConfigName;
            this._imageName = value.imageName;
            this._imageVersionNumber = value.imageVersionNumber;
        }
    }
    get appImageConfigName() {
        return this.getStringAttribute('app_image_config_name');
    }
    set appImageConfigName(value) {
        this._appImageConfigName = value;
    }
    // Temporarily expose input value. Use with caution.
    get appImageConfigNameInput() {
        return this._appImageConfigName;
    }
    get imageName() {
        return this.getStringAttribute('image_name');
    }
    set imageName(value) {
        this._imageName = value;
    }
    // Temporarily expose input value. Use with caution.
    get imageNameInput() {
        return this._imageName;
    }
    get imageVersionNumber() {
        return this.getNumberAttribute('image_version_number');
    }
    set imageVersionNumber(value) {
        this._imageVersionNumber = value;
    }
    resetImageVersionNumber() {
        this._imageVersionNumber = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageVersionNumberInput() {
        return this._imageVersionNumber;
    }
}
exports.SagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImageOutputReference = SagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImageOutputReference;
_e = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImageOutputReference[_e] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImageOutputReference", version: "19.15.0" };
class SagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImageList = SagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImageList;
_f = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImageList[_f] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImageList", version: "19.15.0" };
function sagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        lifecycle_config_arn: cdktf.stringToTerraform(struct.lifecycleConfigArn),
        sagemaker_image_arn: cdktf.stringToTerraform(struct.sagemakerImageArn),
        sagemaker_image_version_alias: cdktf.stringToTerraform(struct.sagemakerImageVersionAlias),
        sagemaker_image_version_arn: cdktf.stringToTerraform(struct.sagemakerImageVersionArn),
    };
}
exports.sagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform = sagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform;
function sagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        instance_type: {
            value: cdktf.stringToHclTerraform(struct.instanceType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        lifecycle_config_arn: {
            value: cdktf.stringToHclTerraform(struct.lifecycleConfigArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_arn: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_version_alias: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageVersionAlias),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_version_arn: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageVersionArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecToHclTerraform = sagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecToHclTerraform;
class SagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._instanceType !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceType = this._instanceType;
        }
        if (this._lifecycleConfigArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.lifecycleConfigArn = this._lifecycleConfigArn;
        }
        if (this._sagemakerImageArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageArn = this._sagemakerImageArn;
        }
        if (this._sagemakerImageVersionAlias !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageVersionAlias = this._sagemakerImageVersionAlias;
        }
        if (this._sagemakerImageVersionArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageVersionArn = this._sagemakerImageVersionArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._instanceType = undefined;
            this._lifecycleConfigArn = undefined;
            this._sagemakerImageArn = undefined;
            this._sagemakerImageVersionAlias = undefined;
            this._sagemakerImageVersionArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._instanceType = value.instanceType;
            this._lifecycleConfigArn = value.lifecycleConfigArn;
            this._sagemakerImageArn = value.sagemakerImageArn;
            this._sagemakerImageVersionAlias = value.sagemakerImageVersionAlias;
            this._sagemakerImageVersionArn = value.sagemakerImageVersionArn;
        }
    }
    get instanceType() {
        return this.getStringAttribute('instance_type');
    }
    set instanceType(value) {
        this._instanceType = value;
    }
    resetInstanceType() {
        this._instanceType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceTypeInput() {
        return this._instanceType;
    }
    get lifecycleConfigArn() {
        return this.getStringAttribute('lifecycle_config_arn');
    }
    set lifecycleConfigArn(value) {
        this._lifecycleConfigArn = value;
    }
    resetLifecycleConfigArn() {
        this._lifecycleConfigArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifecycleConfigArnInput() {
        return this._lifecycleConfigArn;
    }
    get sagemakerImageArn() {
        return this.getStringAttribute('sagemaker_image_arn');
    }
    set sagemakerImageArn(value) {
        this._sagemakerImageArn = value;
    }
    resetSagemakerImageArn() {
        this._sagemakerImageArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageArnInput() {
        return this._sagemakerImageArn;
    }
    get sagemakerImageVersionAlias() {
        return this.getStringAttribute('sagemaker_image_version_alias');
    }
    set sagemakerImageVersionAlias(value) {
        this._sagemakerImageVersionAlias = value;
    }
    resetSagemakerImageVersionAlias() {
        this._sagemakerImageVersionAlias = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageVersionAliasInput() {
        return this._sagemakerImageVersionAlias;
    }
    get sagemakerImageVersionArn() {
        return this.getStringAttribute('sagemaker_image_version_arn');
    }
    set sagemakerImageVersionArn(value) {
        this._sagemakerImageVersionArn = value;
    }
    resetSagemakerImageVersionArn() {
        this._sagemakerImageVersionArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageVersionArnInput() {
        return this._sagemakerImageVersionArn;
    }
}
exports.SagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecOutputReference = SagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecOutputReference;
_g = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecOutputReference[_g] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecOutputReference", version: "19.15.0" };
function sagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        lifecycle_config_arns: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.lifecycleConfigArns),
        custom_image: cdktf.listMapper(sagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImageToTerraform, true)(struct.customImage),
        default_resource_spec: sagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform(struct.defaultResourceSpec),
    };
}
exports.sagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsToTerraform = sagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsToTerraform;
function sagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        lifecycle_config_arns: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.lifecycleConfigArns),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        custom_image: {
            value: cdktf.listMapperHcl(sagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImageToHclTerraform, true)(struct.customImage),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImageList",
        },
        default_resource_spec: {
            value: sagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecToHclTerraform(struct.defaultResourceSpec),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsToHclTerraform = sagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsToHclTerraform;
class SagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // custom_image - computed: false, optional: true, required: false
        this._customImage = new SagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImageList(this, "custom_image", false);
        // default_resource_spec - computed: false, optional: true, required: false
        this._defaultResourceSpec = new SagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecOutputReference(this, "default_resource_spec");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._lifecycleConfigArns !== undefined) {
            hasAnyValues = true;
            internalValueResult.lifecycleConfigArns = this._lifecycleConfigArns;
        }
        if (this._customImage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customImage = this._customImage?.internalValue;
        }
        if (this._defaultResourceSpec?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultResourceSpec = this._defaultResourceSpec?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._lifecycleConfigArns = undefined;
            this._customImage.internalValue = undefined;
            this._defaultResourceSpec.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._lifecycleConfigArns = value.lifecycleConfigArns;
            this._customImage.internalValue = value.customImage;
            this._defaultResourceSpec.internalValue = value.defaultResourceSpec;
        }
    }
    get lifecycleConfigArns() {
        return cdktf.Fn.tolist(this.getListAttribute('lifecycle_config_arns'));
    }
    set lifecycleConfigArns(value) {
        this._lifecycleConfigArns = value;
    }
    resetLifecycleConfigArns() {
        this._lifecycleConfigArns = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifecycleConfigArnsInput() {
        return this._lifecycleConfigArns;
    }
    get customImage() {
        return this._customImage;
    }
    putCustomImage(value) {
        this._customImage.internalValue = value;
    }
    resetCustomImage() {
        this._customImage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customImageInput() {
        return this._customImage.internalValue;
    }
    get defaultResourceSpec() {
        return this._defaultResourceSpec;
    }
    putDefaultResourceSpec(value) {
        this._defaultResourceSpec.internalValue = value;
    }
    resetDefaultResourceSpec() {
        this._defaultResourceSpec.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultResourceSpecInput() {
        return this._defaultResourceSpec.internalValue;
    }
}
exports.SagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsOutputReference = SagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsOutputReference;
_h = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsOutputReference[_h] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsOutputReference", version: "19.15.0" };
function sagemakerDomainDefaultSpaceSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        execution_role: cdktf.stringToTerraform(struct.executionRole),
        security_groups: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.securityGroups),
        jupyter_server_app_settings: sagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsToTerraform(struct.jupyterServerAppSettings),
        kernel_gateway_app_settings: sagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsToTerraform(struct.kernelGatewayAppSettings),
    };
}
exports.sagemakerDomainDefaultSpaceSettingsToTerraform = sagemakerDomainDefaultSpaceSettingsToTerraform;
function sagemakerDomainDefaultSpaceSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        execution_role: {
            value: cdktf.stringToHclTerraform(struct.executionRole),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        security_groups: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.securityGroups),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        jupyter_server_app_settings: {
            value: sagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsToHclTerraform(struct.jupyterServerAppSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsList",
        },
        kernel_gateway_app_settings: {
            value: sagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsToHclTerraform(struct.kernelGatewayAppSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultSpaceSettingsToHclTerraform = sagemakerDomainDefaultSpaceSettingsToHclTerraform;
class SagemakerDomainDefaultSpaceSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // jupyter_server_app_settings - computed: false, optional: true, required: false
        this._jupyterServerAppSettings = new SagemakerDomainDefaultSpaceSettingsJupyterServerAppSettingsOutputReference(this, "jupyter_server_app_settings");
        // kernel_gateway_app_settings - computed: false, optional: true, required: false
        this._kernelGatewayAppSettings = new SagemakerDomainDefaultSpaceSettingsKernelGatewayAppSettingsOutputReference(this, "kernel_gateway_app_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._executionRole !== undefined) {
            hasAnyValues = true;
            internalValueResult.executionRole = this._executionRole;
        }
        if (this._securityGroups !== undefined) {
            hasAnyValues = true;
            internalValueResult.securityGroups = this._securityGroups;
        }
        if (this._jupyterServerAppSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.jupyterServerAppSettings = this._jupyterServerAppSettings?.internalValue;
        }
        if (this._kernelGatewayAppSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.kernelGatewayAppSettings = this._kernelGatewayAppSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._executionRole = undefined;
            this._securityGroups = undefined;
            this._jupyterServerAppSettings.internalValue = undefined;
            this._kernelGatewayAppSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._executionRole = value.executionRole;
            this._securityGroups = value.securityGroups;
            this._jupyterServerAppSettings.internalValue = value.jupyterServerAppSettings;
            this._kernelGatewayAppSettings.internalValue = value.kernelGatewayAppSettings;
        }
    }
    get executionRole() {
        return this.getStringAttribute('execution_role');
    }
    set executionRole(value) {
        this._executionRole = value;
    }
    // Temporarily expose input value. Use with caution.
    get executionRoleInput() {
        return this._executionRole;
    }
    get securityGroups() {
        return cdktf.Fn.tolist(this.getListAttribute('security_groups'));
    }
    set securityGroups(value) {
        this._securityGroups = value;
    }
    resetSecurityGroups() {
        this._securityGroups = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityGroupsInput() {
        return this._securityGroups;
    }
    get jupyterServerAppSettings() {
        return this._jupyterServerAppSettings;
    }
    putJupyterServerAppSettings(value) {
        this._jupyterServerAppSettings.internalValue = value;
    }
    resetJupyterServerAppSettings() {
        this._jupyterServerAppSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jupyterServerAppSettingsInput() {
        return this._jupyterServerAppSettings.internalValue;
    }
    get kernelGatewayAppSettings() {
        return this._kernelGatewayAppSettings;
    }
    putKernelGatewayAppSettings(value) {
        this._kernelGatewayAppSettings.internalValue = value;
    }
    resetKernelGatewayAppSettings() {
        this._kernelGatewayAppSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kernelGatewayAppSettingsInput() {
        return this._kernelGatewayAppSettings.internalValue;
    }
}
exports.SagemakerDomainDefaultSpaceSettingsOutputReference = SagemakerDomainDefaultSpaceSettingsOutputReference;
_j = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultSpaceSettingsOutputReference[_j] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultSpaceSettingsOutputReference", version: "19.15.0" };
function sagemakerDomainDefaultUserSettingsCanvasAppSettingsDirectDeploySettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        status: cdktf.stringToTerraform(struct.status),
    };
}
exports.sagemakerDomainDefaultUserSettingsCanvasAppSettingsDirectDeploySettingsToTerraform = sagemakerDomainDefaultUserSettingsCanvasAppSettingsDirectDeploySettingsToTerraform;
function sagemakerDomainDefaultUserSettingsCanvasAppSettingsDirectDeploySettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        status: {
            value: cdktf.stringToHclTerraform(struct.status),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultUserSettingsCanvasAppSettingsDirectDeploySettingsToHclTerraform = sagemakerDomainDefaultUserSettingsCanvasAppSettingsDirectDeploySettingsToHclTerraform;
class SagemakerDomainDefaultUserSettingsCanvasAppSettingsDirectDeploySettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._status !== undefined) {
            hasAnyValues = true;
            internalValueResult.status = this._status;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._status = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._status = value.status;
        }
    }
    get status() {
        return this.getStringAttribute('status');
    }
    set status(value) {
        this._status = value;
    }
    resetStatus() {
        this._status = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get statusInput() {
        return this._status;
    }
}
exports.SagemakerDomainDefaultUserSettingsCanvasAppSettingsDirectDeploySettingsOutputReference = SagemakerDomainDefaultUserSettingsCanvasAppSettingsDirectDeploySettingsOutputReference;
_k = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsCanvasAppSettingsDirectDeploySettingsOutputReference[_k] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsCanvasAppSettingsDirectDeploySettingsOutputReference", version: "19.15.0" };
function sagemakerDomainDefaultUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        data_source_name: cdktf.stringToTerraform(struct.dataSourceName),
        secret_arn: cdktf.stringToTerraform(struct.secretArn),
        status: cdktf.stringToTerraform(struct.status),
    };
}
exports.sagemakerDomainDefaultUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsToTerraform = sagemakerDomainDefaultUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsToTerraform;
function sagemakerDomainDefaultUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        data_source_name: {
            value: cdktf.stringToHclTerraform(struct.dataSourceName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        secret_arn: {
            value: cdktf.stringToHclTerraform(struct.secretArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        status: {
            value: cdktf.stringToHclTerraform(struct.status),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsToHclTerraform = sagemakerDomainDefaultUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsToHclTerraform;
class SagemakerDomainDefaultUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dataSourceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataSourceName = this._dataSourceName;
        }
        if (this._secretArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretArn = this._secretArn;
        }
        if (this._status !== undefined) {
            hasAnyValues = true;
            internalValueResult.status = this._status;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._dataSourceName = undefined;
            this._secretArn = undefined;
            this._status = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._dataSourceName = value.dataSourceName;
            this._secretArn = value.secretArn;
            this._status = value.status;
        }
    }
    get dataSourceName() {
        return this.getStringAttribute('data_source_name');
    }
    set dataSourceName(value) {
        this._dataSourceName = value;
    }
    resetDataSourceName() {
        this._dataSourceName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataSourceNameInput() {
        return this._dataSourceName;
    }
    get secretArn() {
        return this.getStringAttribute('secret_arn');
    }
    set secretArn(value) {
        this._secretArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get secretArnInput() {
        return this._secretArn;
    }
    get status() {
        return this.getStringAttribute('status');
    }
    set status(value) {
        this._status = value;
    }
    resetStatus() {
        this._status = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get statusInput() {
        return this._status;
    }
}
exports.SagemakerDomainDefaultUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsOutputReference = SagemakerDomainDefaultUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsOutputReference;
_l = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsOutputReference[_l] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsOutputReference", version: "19.15.0" };
class SagemakerDomainDefaultUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SagemakerDomainDefaultUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SagemakerDomainDefaultUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsList = SagemakerDomainDefaultUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsList;
_m = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsList[_m] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsList", version: "19.15.0" };
function sagemakerDomainDefaultUserSettingsCanvasAppSettingsKendraSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        status: cdktf.stringToTerraform(struct.status),
    };
}
exports.sagemakerDomainDefaultUserSettingsCanvasAppSettingsKendraSettingsToTerraform = sagemakerDomainDefaultUserSettingsCanvasAppSettingsKendraSettingsToTerraform;
function sagemakerDomainDefaultUserSettingsCanvasAppSettingsKendraSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        status: {
            value: cdktf.stringToHclTerraform(struct.status),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultUserSettingsCanvasAppSettingsKendraSettingsToHclTerraform = sagemakerDomainDefaultUserSettingsCanvasAppSettingsKendraSettingsToHclTerraform;
class SagemakerDomainDefaultUserSettingsCanvasAppSettingsKendraSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._status !== undefined) {
            hasAnyValues = true;
            internalValueResult.status = this._status;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._status = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._status = value.status;
        }
    }
    get status() {
        return this.getStringAttribute('status');
    }
    set status(value) {
        this._status = value;
    }
    resetStatus() {
        this._status = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get statusInput() {
        return this._status;
    }
}
exports.SagemakerDomainDefaultUserSettingsCanvasAppSettingsKendraSettingsOutputReference = SagemakerDomainDefaultUserSettingsCanvasAppSettingsKendraSettingsOutputReference;
_o = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsCanvasAppSettingsKendraSettingsOutputReference[_o] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsCanvasAppSettingsKendraSettingsOutputReference", version: "19.15.0" };
function sagemakerDomainDefaultUserSettingsCanvasAppSettingsModelRegisterSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cross_account_model_register_role_arn: cdktf.stringToTerraform(struct.crossAccountModelRegisterRoleArn),
        status: cdktf.stringToTerraform(struct.status),
    };
}
exports.sagemakerDomainDefaultUserSettingsCanvasAppSettingsModelRegisterSettingsToTerraform = sagemakerDomainDefaultUserSettingsCanvasAppSettingsModelRegisterSettingsToTerraform;
function sagemakerDomainDefaultUserSettingsCanvasAppSettingsModelRegisterSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cross_account_model_register_role_arn: {
            value: cdktf.stringToHclTerraform(struct.crossAccountModelRegisterRoleArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        status: {
            value: cdktf.stringToHclTerraform(struct.status),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultUserSettingsCanvasAppSettingsModelRegisterSettingsToHclTerraform = sagemakerDomainDefaultUserSettingsCanvasAppSettingsModelRegisterSettingsToHclTerraform;
class SagemakerDomainDefaultUserSettingsCanvasAppSettingsModelRegisterSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._crossAccountModelRegisterRoleArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.crossAccountModelRegisterRoleArn = this._crossAccountModelRegisterRoleArn;
        }
        if (this._status !== undefined) {
            hasAnyValues = true;
            internalValueResult.status = this._status;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._crossAccountModelRegisterRoleArn = undefined;
            this._status = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._crossAccountModelRegisterRoleArn = value.crossAccountModelRegisterRoleArn;
            this._status = value.status;
        }
    }
    get crossAccountModelRegisterRoleArn() {
        return this.getStringAttribute('cross_account_model_register_role_arn');
    }
    set crossAccountModelRegisterRoleArn(value) {
        this._crossAccountModelRegisterRoleArn = value;
    }
    resetCrossAccountModelRegisterRoleArn() {
        this._crossAccountModelRegisterRoleArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get crossAccountModelRegisterRoleArnInput() {
        return this._crossAccountModelRegisterRoleArn;
    }
    get status() {
        return this.getStringAttribute('status');
    }
    set status(value) {
        this._status = value;
    }
    resetStatus() {
        this._status = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get statusInput() {
        return this._status;
    }
}
exports.SagemakerDomainDefaultUserSettingsCanvasAppSettingsModelRegisterSettingsOutputReference = SagemakerDomainDefaultUserSettingsCanvasAppSettingsModelRegisterSettingsOutputReference;
_p = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsCanvasAppSettingsModelRegisterSettingsOutputReference[_p] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsCanvasAppSettingsModelRegisterSettingsOutputReference", version: "19.15.0" };
function sagemakerDomainDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        amazon_forecast_role_arn: cdktf.stringToTerraform(struct.amazonForecastRoleArn),
        status: cdktf.stringToTerraform(struct.status),
    };
}
exports.sagemakerDomainDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsToTerraform = sagemakerDomainDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsToTerraform;
function sagemakerDomainDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        amazon_forecast_role_arn: {
            value: cdktf.stringToHclTerraform(struct.amazonForecastRoleArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        status: {
            value: cdktf.stringToHclTerraform(struct.status),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsToHclTerraform = sagemakerDomainDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsToHclTerraform;
class SagemakerDomainDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._amazonForecastRoleArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.amazonForecastRoleArn = this._amazonForecastRoleArn;
        }
        if (this._status !== undefined) {
            hasAnyValues = true;
            internalValueResult.status = this._status;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._amazonForecastRoleArn = undefined;
            this._status = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._amazonForecastRoleArn = value.amazonForecastRoleArn;
            this._status = value.status;
        }
    }
    get amazonForecastRoleArn() {
        return this.getStringAttribute('amazon_forecast_role_arn');
    }
    set amazonForecastRoleArn(value) {
        this._amazonForecastRoleArn = value;
    }
    resetAmazonForecastRoleArn() {
        this._amazonForecastRoleArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get amazonForecastRoleArnInput() {
        return this._amazonForecastRoleArn;
    }
    get status() {
        return this.getStringAttribute('status');
    }
    set status(value) {
        this._status = value;
    }
    resetStatus() {
        this._status = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get statusInput() {
        return this._status;
    }
}
exports.SagemakerDomainDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsOutputReference = SagemakerDomainDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsOutputReference;
_q = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsOutputReference[_q] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsOutputReference", version: "19.15.0" };
function sagemakerDomainDefaultUserSettingsCanvasAppSettingsWorkspaceSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        s3_artifact_path: cdktf.stringToTerraform(struct.s3ArtifactPath),
        s3_kms_key_id: cdktf.stringToTerraform(struct.s3KmsKeyId),
    };
}
exports.sagemakerDomainDefaultUserSettingsCanvasAppSettingsWorkspaceSettingsToTerraform = sagemakerDomainDefaultUserSettingsCanvasAppSettingsWorkspaceSettingsToTerraform;
function sagemakerDomainDefaultUserSettingsCanvasAppSettingsWorkspaceSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        s3_artifact_path: {
            value: cdktf.stringToHclTerraform(struct.s3ArtifactPath),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        s3_kms_key_id: {
            value: cdktf.stringToHclTerraform(struct.s3KmsKeyId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultUserSettingsCanvasAppSettingsWorkspaceSettingsToHclTerraform = sagemakerDomainDefaultUserSettingsCanvasAppSettingsWorkspaceSettingsToHclTerraform;
class SagemakerDomainDefaultUserSettingsCanvasAppSettingsWorkspaceSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._s3ArtifactPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3ArtifactPath = this._s3ArtifactPath;
        }
        if (this._s3KmsKeyId !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3KmsKeyId = this._s3KmsKeyId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._s3ArtifactPath = undefined;
            this._s3KmsKeyId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._s3ArtifactPath = value.s3ArtifactPath;
            this._s3KmsKeyId = value.s3KmsKeyId;
        }
    }
    get s3ArtifactPath() {
        return this.getStringAttribute('s3_artifact_path');
    }
    set s3ArtifactPath(value) {
        this._s3ArtifactPath = value;
    }
    resetS3ArtifactPath() {
        this._s3ArtifactPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3ArtifactPathInput() {
        return this._s3ArtifactPath;
    }
    get s3KmsKeyId() {
        return this.getStringAttribute('s3_kms_key_id');
    }
    set s3KmsKeyId(value) {
        this._s3KmsKeyId = value;
    }
    resetS3KmsKeyId() {
        this._s3KmsKeyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3KmsKeyIdInput() {
        return this._s3KmsKeyId;
    }
}
exports.SagemakerDomainDefaultUserSettingsCanvasAppSettingsWorkspaceSettingsOutputReference = SagemakerDomainDefaultUserSettingsCanvasAppSettingsWorkspaceSettingsOutputReference;
_r = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsCanvasAppSettingsWorkspaceSettingsOutputReference[_r] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsCanvasAppSettingsWorkspaceSettingsOutputReference", version: "19.15.0" };
function sagemakerDomainDefaultUserSettingsCanvasAppSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        direct_deploy_settings: sagemakerDomainDefaultUserSettingsCanvasAppSettingsDirectDeploySettingsToTerraform(struct.directDeploySettings),
        identity_provider_oauth_settings: cdktf.listMapper(sagemakerDomainDefaultUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsToTerraform, true)(struct.identityProviderOauthSettings),
        kendra_settings: sagemakerDomainDefaultUserSettingsCanvasAppSettingsKendraSettingsToTerraform(struct.kendraSettings),
        model_register_settings: sagemakerDomainDefaultUserSettingsCanvasAppSettingsModelRegisterSettingsToTerraform(struct.modelRegisterSettings),
        time_series_forecasting_settings: sagemakerDomainDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsToTerraform(struct.timeSeriesForecastingSettings),
        workspace_settings: sagemakerDomainDefaultUserSettingsCanvasAppSettingsWorkspaceSettingsToTerraform(struct.workspaceSettings),
    };
}
exports.sagemakerDomainDefaultUserSettingsCanvasAppSettingsToTerraform = sagemakerDomainDefaultUserSettingsCanvasAppSettingsToTerraform;
function sagemakerDomainDefaultUserSettingsCanvasAppSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        direct_deploy_settings: {
            value: sagemakerDomainDefaultUserSettingsCanvasAppSettingsDirectDeploySettingsToHclTerraform(struct.directDeploySettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDomainDefaultUserSettingsCanvasAppSettingsDirectDeploySettingsList",
        },
        identity_provider_oauth_settings: {
            value: cdktf.listMapperHcl(sagemakerDomainDefaultUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsToHclTerraform, true)(struct.identityProviderOauthSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDomainDefaultUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsList",
        },
        kendra_settings: {
            value: sagemakerDomainDefaultUserSettingsCanvasAppSettingsKendraSettingsToHclTerraform(struct.kendraSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDomainDefaultUserSettingsCanvasAppSettingsKendraSettingsList",
        },
        model_register_settings: {
            value: sagemakerDomainDefaultUserSettingsCanvasAppSettingsModelRegisterSettingsToHclTerraform(struct.modelRegisterSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDomainDefaultUserSettingsCanvasAppSettingsModelRegisterSettingsList",
        },
        time_series_forecasting_settings: {
            value: sagemakerDomainDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsToHclTerraform(struct.timeSeriesForecastingSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDomainDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsList",
        },
        workspace_settings: {
            value: sagemakerDomainDefaultUserSettingsCanvasAppSettingsWorkspaceSettingsToHclTerraform(struct.workspaceSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDomainDefaultUserSettingsCanvasAppSettingsWorkspaceSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultUserSettingsCanvasAppSettingsToHclTerraform = sagemakerDomainDefaultUserSettingsCanvasAppSettingsToHclTerraform;
class SagemakerDomainDefaultUserSettingsCanvasAppSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // direct_deploy_settings - computed: false, optional: true, required: false
        this._directDeploySettings = new SagemakerDomainDefaultUserSettingsCanvasAppSettingsDirectDeploySettingsOutputReference(this, "direct_deploy_settings");
        // identity_provider_oauth_settings - computed: false, optional: true, required: false
        this._identityProviderOauthSettings = new SagemakerDomainDefaultUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsList(this, "identity_provider_oauth_settings", false);
        // kendra_settings - computed: false, optional: true, required: false
        this._kendraSettings = new SagemakerDomainDefaultUserSettingsCanvasAppSettingsKendraSettingsOutputReference(this, "kendra_settings");
        // model_register_settings - computed: false, optional: true, required: false
        this._modelRegisterSettings = new SagemakerDomainDefaultUserSettingsCanvasAppSettingsModelRegisterSettingsOutputReference(this, "model_register_settings");
        // time_series_forecasting_settings - computed: false, optional: true, required: false
        this._timeSeriesForecastingSettings = new SagemakerDomainDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsOutputReference(this, "time_series_forecasting_settings");
        // workspace_settings - computed: false, optional: true, required: false
        this._workspaceSettings = new SagemakerDomainDefaultUserSettingsCanvasAppSettingsWorkspaceSettingsOutputReference(this, "workspace_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._directDeploySettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.directDeploySettings = this._directDeploySettings?.internalValue;
        }
        if (this._identityProviderOauthSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.identityProviderOauthSettings = this._identityProviderOauthSettings?.internalValue;
        }
        if (this._kendraSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.kendraSettings = this._kendraSettings?.internalValue;
        }
        if (this._modelRegisterSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.modelRegisterSettings = this._modelRegisterSettings?.internalValue;
        }
        if (this._timeSeriesForecastingSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeSeriesForecastingSettings = this._timeSeriesForecastingSettings?.internalValue;
        }
        if (this._workspaceSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.workspaceSettings = this._workspaceSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._directDeploySettings.internalValue = undefined;
            this._identityProviderOauthSettings.internalValue = undefined;
            this._kendraSettings.internalValue = undefined;
            this._modelRegisterSettings.internalValue = undefined;
            this._timeSeriesForecastingSettings.internalValue = undefined;
            this._workspaceSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._directDeploySettings.internalValue = value.directDeploySettings;
            this._identityProviderOauthSettings.internalValue = value.identityProviderOauthSettings;
            this._kendraSettings.internalValue = value.kendraSettings;
            this._modelRegisterSettings.internalValue = value.modelRegisterSettings;
            this._timeSeriesForecastingSettings.internalValue = value.timeSeriesForecastingSettings;
            this._workspaceSettings.internalValue = value.workspaceSettings;
        }
    }
    get directDeploySettings() {
        return this._directDeploySettings;
    }
    putDirectDeploySettings(value) {
        this._directDeploySettings.internalValue = value;
    }
    resetDirectDeploySettings() {
        this._directDeploySettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get directDeploySettingsInput() {
        return this._directDeploySettings.internalValue;
    }
    get identityProviderOauthSettings() {
        return this._identityProviderOauthSettings;
    }
    putIdentityProviderOauthSettings(value) {
        this._identityProviderOauthSettings.internalValue = value;
    }
    resetIdentityProviderOauthSettings() {
        this._identityProviderOauthSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get identityProviderOauthSettingsInput() {
        return this._identityProviderOauthSettings.internalValue;
    }
    get kendraSettings() {
        return this._kendraSettings;
    }
    putKendraSettings(value) {
        this._kendraSettings.internalValue = value;
    }
    resetKendraSettings() {
        this._kendraSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kendraSettingsInput() {
        return this._kendraSettings.internalValue;
    }
    get modelRegisterSettings() {
        return this._modelRegisterSettings;
    }
    putModelRegisterSettings(value) {
        this._modelRegisterSettings.internalValue = value;
    }
    resetModelRegisterSettings() {
        this._modelRegisterSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get modelRegisterSettingsInput() {
        return this._modelRegisterSettings.internalValue;
    }
    get timeSeriesForecastingSettings() {
        return this._timeSeriesForecastingSettings;
    }
    putTimeSeriesForecastingSettings(value) {
        this._timeSeriesForecastingSettings.internalValue = value;
    }
    resetTimeSeriesForecastingSettings() {
        this._timeSeriesForecastingSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeSeriesForecastingSettingsInput() {
        return this._timeSeriesForecastingSettings.internalValue;
    }
    get workspaceSettings() {
        return this._workspaceSettings;
    }
    putWorkspaceSettings(value) {
        this._workspaceSettings.internalValue = value;
    }
    resetWorkspaceSettings() {
        this._workspaceSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get workspaceSettingsInput() {
        return this._workspaceSettings.internalValue;
    }
}
exports.SagemakerDomainDefaultUserSettingsCanvasAppSettingsOutputReference = SagemakerDomainDefaultUserSettingsCanvasAppSettingsOutputReference;
_s = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsCanvasAppSettingsOutputReference[_s] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsCanvasAppSettingsOutputReference", version: "19.15.0" };
function sagemakerDomainDefaultUserSettingsCodeEditorAppSettingsDefaultResourceSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        lifecycle_config_arn: cdktf.stringToTerraform(struct.lifecycleConfigArn),
        sagemaker_image_arn: cdktf.stringToTerraform(struct.sagemakerImageArn),
        sagemaker_image_version_alias: cdktf.stringToTerraform(struct.sagemakerImageVersionAlias),
        sagemaker_image_version_arn: cdktf.stringToTerraform(struct.sagemakerImageVersionArn),
    };
}
exports.sagemakerDomainDefaultUserSettingsCodeEditorAppSettingsDefaultResourceSpecToTerraform = sagemakerDomainDefaultUserSettingsCodeEditorAppSettingsDefaultResourceSpecToTerraform;
function sagemakerDomainDefaultUserSettingsCodeEditorAppSettingsDefaultResourceSpecToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        instance_type: {
            value: cdktf.stringToHclTerraform(struct.instanceType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        lifecycle_config_arn: {
            value: cdktf.stringToHclTerraform(struct.lifecycleConfigArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_arn: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_version_alias: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageVersionAlias),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_version_arn: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageVersionArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultUserSettingsCodeEditorAppSettingsDefaultResourceSpecToHclTerraform = sagemakerDomainDefaultUserSettingsCodeEditorAppSettingsDefaultResourceSpecToHclTerraform;
class SagemakerDomainDefaultUserSettingsCodeEditorAppSettingsDefaultResourceSpecOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._instanceType !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceType = this._instanceType;
        }
        if (this._lifecycleConfigArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.lifecycleConfigArn = this._lifecycleConfigArn;
        }
        if (this._sagemakerImageArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageArn = this._sagemakerImageArn;
        }
        if (this._sagemakerImageVersionAlias !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageVersionAlias = this._sagemakerImageVersionAlias;
        }
        if (this._sagemakerImageVersionArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageVersionArn = this._sagemakerImageVersionArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._instanceType = undefined;
            this._lifecycleConfigArn = undefined;
            this._sagemakerImageArn = undefined;
            this._sagemakerImageVersionAlias = undefined;
            this._sagemakerImageVersionArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._instanceType = value.instanceType;
            this._lifecycleConfigArn = value.lifecycleConfigArn;
            this._sagemakerImageArn = value.sagemakerImageArn;
            this._sagemakerImageVersionAlias = value.sagemakerImageVersionAlias;
            this._sagemakerImageVersionArn = value.sagemakerImageVersionArn;
        }
    }
    get instanceType() {
        return this.getStringAttribute('instance_type');
    }
    set instanceType(value) {
        this._instanceType = value;
    }
    resetInstanceType() {
        this._instanceType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceTypeInput() {
        return this._instanceType;
    }
    get lifecycleConfigArn() {
        return this.getStringAttribute('lifecycle_config_arn');
    }
    set lifecycleConfigArn(value) {
        this._lifecycleConfigArn = value;
    }
    resetLifecycleConfigArn() {
        this._lifecycleConfigArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifecycleConfigArnInput() {
        return this._lifecycleConfigArn;
    }
    get sagemakerImageArn() {
        return this.getStringAttribute('sagemaker_image_arn');
    }
    set sagemakerImageArn(value) {
        this._sagemakerImageArn = value;
    }
    resetSagemakerImageArn() {
        this._sagemakerImageArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageArnInput() {
        return this._sagemakerImageArn;
    }
    get sagemakerImageVersionAlias() {
        return this.getStringAttribute('sagemaker_image_version_alias');
    }
    set sagemakerImageVersionAlias(value) {
        this._sagemakerImageVersionAlias = value;
    }
    resetSagemakerImageVersionAlias() {
        this._sagemakerImageVersionAlias = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageVersionAliasInput() {
        return this._sagemakerImageVersionAlias;
    }
    get sagemakerImageVersionArn() {
        return this.getStringAttribute('sagemaker_image_version_arn');
    }
    set sagemakerImageVersionArn(value) {
        this._sagemakerImageVersionArn = value;
    }
    resetSagemakerImageVersionArn() {
        this._sagemakerImageVersionArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageVersionArnInput() {
        return this._sagemakerImageVersionArn;
    }
}
exports.SagemakerDomainDefaultUserSettingsCodeEditorAppSettingsDefaultResourceSpecOutputReference = SagemakerDomainDefaultUserSettingsCodeEditorAppSettingsDefaultResourceSpecOutputReference;
_t = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsCodeEditorAppSettingsDefaultResourceSpecOutputReference[_t] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsCodeEditorAppSettingsDefaultResourceSpecOutputReference", version: "19.15.0" };
function sagemakerDomainDefaultUserSettingsCodeEditorAppSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        lifecycle_config_arns: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.lifecycleConfigArns),
        default_resource_spec: sagemakerDomainDefaultUserSettingsCodeEditorAppSettingsDefaultResourceSpecToTerraform(struct.defaultResourceSpec),
    };
}
exports.sagemakerDomainDefaultUserSettingsCodeEditorAppSettingsToTerraform = sagemakerDomainDefaultUserSettingsCodeEditorAppSettingsToTerraform;
function sagemakerDomainDefaultUserSettingsCodeEditorAppSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        lifecycle_config_arns: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.lifecycleConfigArns),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        default_resource_spec: {
            value: sagemakerDomainDefaultUserSettingsCodeEditorAppSettingsDefaultResourceSpecToHclTerraform(struct.defaultResourceSpec),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDomainDefaultUserSettingsCodeEditorAppSettingsDefaultResourceSpecList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultUserSettingsCodeEditorAppSettingsToHclTerraform = sagemakerDomainDefaultUserSettingsCodeEditorAppSettingsToHclTerraform;
class SagemakerDomainDefaultUserSettingsCodeEditorAppSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // default_resource_spec - computed: false, optional: true, required: false
        this._defaultResourceSpec = new SagemakerDomainDefaultUserSettingsCodeEditorAppSettingsDefaultResourceSpecOutputReference(this, "default_resource_spec");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._lifecycleConfigArns !== undefined) {
            hasAnyValues = true;
            internalValueResult.lifecycleConfigArns = this._lifecycleConfigArns;
        }
        if (this._defaultResourceSpec?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultResourceSpec = this._defaultResourceSpec?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._lifecycleConfigArns = undefined;
            this._defaultResourceSpec.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._lifecycleConfigArns = value.lifecycleConfigArns;
            this._defaultResourceSpec.internalValue = value.defaultResourceSpec;
        }
    }
    get lifecycleConfigArns() {
        return cdktf.Fn.tolist(this.getListAttribute('lifecycle_config_arns'));
    }
    set lifecycleConfigArns(value) {
        this._lifecycleConfigArns = value;
    }
    resetLifecycleConfigArns() {
        this._lifecycleConfigArns = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifecycleConfigArnsInput() {
        return this._lifecycleConfigArns;
    }
    get defaultResourceSpec() {
        return this._defaultResourceSpec;
    }
    putDefaultResourceSpec(value) {
        this._defaultResourceSpec.internalValue = value;
    }
    resetDefaultResourceSpec() {
        this._defaultResourceSpec.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultResourceSpecInput() {
        return this._defaultResourceSpec.internalValue;
    }
}
exports.SagemakerDomainDefaultUserSettingsCodeEditorAppSettingsOutputReference = SagemakerDomainDefaultUserSettingsCodeEditorAppSettingsOutputReference;
_u = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsCodeEditorAppSettingsOutputReference[_u] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsCodeEditorAppSettingsOutputReference", version: "19.15.0" };
function sagemakerDomainDefaultUserSettingsCustomFileSystemConfigEfsFileSystemConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        file_system_id: cdktf.stringToTerraform(struct.fileSystemId),
        file_system_path: cdktf.stringToTerraform(struct.fileSystemPath),
    };
}
exports.sagemakerDomainDefaultUserSettingsCustomFileSystemConfigEfsFileSystemConfigToTerraform = sagemakerDomainDefaultUserSettingsCustomFileSystemConfigEfsFileSystemConfigToTerraform;
function sagemakerDomainDefaultUserSettingsCustomFileSystemConfigEfsFileSystemConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        file_system_id: {
            value: cdktf.stringToHclTerraform(struct.fileSystemId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        file_system_path: {
            value: cdktf.stringToHclTerraform(struct.fileSystemPath),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultUserSettingsCustomFileSystemConfigEfsFileSystemConfigToHclTerraform = sagemakerDomainDefaultUserSettingsCustomFileSystemConfigEfsFileSystemConfigToHclTerraform;
class SagemakerDomainDefaultUserSettingsCustomFileSystemConfigEfsFileSystemConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._fileSystemId !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileSystemId = this._fileSystemId;
        }
        if (this._fileSystemPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileSystemPath = this._fileSystemPath;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._fileSystemId = undefined;
            this._fileSystemPath = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._fileSystemId = value.fileSystemId;
            this._fileSystemPath = value.fileSystemPath;
        }
    }
    get fileSystemId() {
        return this.getStringAttribute('file_system_id');
    }
    set fileSystemId(value) {
        this._fileSystemId = value;
    }
    // Temporarily expose input value. Use with caution.
    get fileSystemIdInput() {
        return this._fileSystemId;
    }
    get fileSystemPath() {
        return this.getStringAttribute('file_system_path');
    }
    set fileSystemPath(value) {
        this._fileSystemPath = value;
    }
    // Temporarily expose input value. Use with caution.
    get fileSystemPathInput() {
        return this._fileSystemPath;
    }
}
exports.SagemakerDomainDefaultUserSettingsCustomFileSystemConfigEfsFileSystemConfigOutputReference = SagemakerDomainDefaultUserSettingsCustomFileSystemConfigEfsFileSystemConfigOutputReference;
_v = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsCustomFileSystemConfigEfsFileSystemConfigOutputReference[_v] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsCustomFileSystemConfigEfsFileSystemConfigOutputReference", version: "19.15.0" };
function sagemakerDomainDefaultUserSettingsCustomFileSystemConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        efs_file_system_config: sagemakerDomainDefaultUserSettingsCustomFileSystemConfigEfsFileSystemConfigToTerraform(struct.efsFileSystemConfig),
    };
}
exports.sagemakerDomainDefaultUserSettingsCustomFileSystemConfigToTerraform = sagemakerDomainDefaultUserSettingsCustomFileSystemConfigToTerraform;
function sagemakerDomainDefaultUserSettingsCustomFileSystemConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        efs_file_system_config: {
            value: sagemakerDomainDefaultUserSettingsCustomFileSystemConfigEfsFileSystemConfigToHclTerraform(struct.efsFileSystemConfig),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDomainDefaultUserSettingsCustomFileSystemConfigEfsFileSystemConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultUserSettingsCustomFileSystemConfigToHclTerraform = sagemakerDomainDefaultUserSettingsCustomFileSystemConfigToHclTerraform;
class SagemakerDomainDefaultUserSettingsCustomFileSystemConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // efs_file_system_config - computed: false, optional: true, required: false
        this._efsFileSystemConfig = new SagemakerDomainDefaultUserSettingsCustomFileSystemConfigEfsFileSystemConfigOutputReference(this, "efs_file_system_config");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._efsFileSystemConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.efsFileSystemConfig = this._efsFileSystemConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._efsFileSystemConfig.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._efsFileSystemConfig.internalValue = value.efsFileSystemConfig;
        }
    }
    get efsFileSystemConfig() {
        return this._efsFileSystemConfig;
    }
    putEfsFileSystemConfig(value) {
        this._efsFileSystemConfig.internalValue = value;
    }
    resetEfsFileSystemConfig() {
        this._efsFileSystemConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get efsFileSystemConfigInput() {
        return this._efsFileSystemConfig.internalValue;
    }
}
exports.SagemakerDomainDefaultUserSettingsCustomFileSystemConfigOutputReference = SagemakerDomainDefaultUserSettingsCustomFileSystemConfigOutputReference;
_w = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsCustomFileSystemConfigOutputReference[_w] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsCustomFileSystemConfigOutputReference", version: "19.15.0" };
class SagemakerDomainDefaultUserSettingsCustomFileSystemConfigList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SagemakerDomainDefaultUserSettingsCustomFileSystemConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SagemakerDomainDefaultUserSettingsCustomFileSystemConfigList = SagemakerDomainDefaultUserSettingsCustomFileSystemConfigList;
_x = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsCustomFileSystemConfigList[_x] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsCustomFileSystemConfigList", version: "19.15.0" };
function sagemakerDomainDefaultUserSettingsCustomPosixUserConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        gid: cdktf.numberToTerraform(struct.gid),
        uid: cdktf.numberToTerraform(struct.uid),
    };
}
exports.sagemakerDomainDefaultUserSettingsCustomPosixUserConfigToTerraform = sagemakerDomainDefaultUserSettingsCustomPosixUserConfigToTerraform;
function sagemakerDomainDefaultUserSettingsCustomPosixUserConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        gid: {
            value: cdktf.numberToHclTerraform(struct.gid),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        uid: {
            value: cdktf.numberToHclTerraform(struct.uid),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultUserSettingsCustomPosixUserConfigToHclTerraform = sagemakerDomainDefaultUserSettingsCustomPosixUserConfigToHclTerraform;
class SagemakerDomainDefaultUserSettingsCustomPosixUserConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._gid !== undefined) {
            hasAnyValues = true;
            internalValueResult.gid = this._gid;
        }
        if (this._uid !== undefined) {
            hasAnyValues = true;
            internalValueResult.uid = this._uid;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._gid = undefined;
            this._uid = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._gid = value.gid;
            this._uid = value.uid;
        }
    }
    get gid() {
        return this.getNumberAttribute('gid');
    }
    set gid(value) {
        this._gid = value;
    }
    // Temporarily expose input value. Use with caution.
    get gidInput() {
        return this._gid;
    }
    get uid() {
        return this.getNumberAttribute('uid');
    }
    set uid(value) {
        this._uid = value;
    }
    // Temporarily expose input value. Use with caution.
    get uidInput() {
        return this._uid;
    }
}
exports.SagemakerDomainDefaultUserSettingsCustomPosixUserConfigOutputReference = SagemakerDomainDefaultUserSettingsCustomPosixUserConfigOutputReference;
_y = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsCustomPosixUserConfigOutputReference[_y] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsCustomPosixUserConfigOutputReference", version: "19.15.0" };
function sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCodeRepositoryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        repository_url: cdktf.stringToTerraform(struct.repositoryUrl),
    };
}
exports.sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCodeRepositoryToTerraform = sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCodeRepositoryToTerraform;
function sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCodeRepositoryToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        repository_url: {
            value: cdktf.stringToHclTerraform(struct.repositoryUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCodeRepositoryToHclTerraform = sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCodeRepositoryToHclTerraform;
class SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCodeRepositoryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._repositoryUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.repositoryUrl = this._repositoryUrl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._repositoryUrl = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._repositoryUrl = value.repositoryUrl;
        }
    }
    get repositoryUrl() {
        return this.getStringAttribute('repository_url');
    }
    set repositoryUrl(value) {
        this._repositoryUrl = value;
    }
    // Temporarily expose input value. Use with caution.
    get repositoryUrlInput() {
        return this._repositoryUrl;
    }
}
exports.SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCodeRepositoryOutputReference = SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCodeRepositoryOutputReference;
_z = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCodeRepositoryOutputReference[_z] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCodeRepositoryOutputReference", version: "19.15.0" };
class SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCodeRepositoryList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCodeRepositoryOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCodeRepositoryList = SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCodeRepositoryList;
_0 = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCodeRepositoryList[_0] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCodeRepositoryList", version: "19.15.0" };
function sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCustomImageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        app_image_config_name: cdktf.stringToTerraform(struct.appImageConfigName),
        image_name: cdktf.stringToTerraform(struct.imageName),
        image_version_number: cdktf.numberToTerraform(struct.imageVersionNumber),
    };
}
exports.sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCustomImageToTerraform = sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCustomImageToTerraform;
function sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCustomImageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        app_image_config_name: {
            value: cdktf.stringToHclTerraform(struct.appImageConfigName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        image_name: {
            value: cdktf.stringToHclTerraform(struct.imageName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        image_version_number: {
            value: cdktf.numberToHclTerraform(struct.imageVersionNumber),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCustomImageToHclTerraform = sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCustomImageToHclTerraform;
class SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCustomImageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._appImageConfigName !== undefined) {
            hasAnyValues = true;
            internalValueResult.appImageConfigName = this._appImageConfigName;
        }
        if (this._imageName !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageName = this._imageName;
        }
        if (this._imageVersionNumber !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageVersionNumber = this._imageVersionNumber;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._appImageConfigName = undefined;
            this._imageName = undefined;
            this._imageVersionNumber = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._appImageConfigName = value.appImageConfigName;
            this._imageName = value.imageName;
            this._imageVersionNumber = value.imageVersionNumber;
        }
    }
    get appImageConfigName() {
        return this.getStringAttribute('app_image_config_name');
    }
    set appImageConfigName(value) {
        this._appImageConfigName = value;
    }
    // Temporarily expose input value. Use with caution.
    get appImageConfigNameInput() {
        return this._appImageConfigName;
    }
    get imageName() {
        return this.getStringAttribute('image_name');
    }
    set imageName(value) {
        this._imageName = value;
    }
    // Temporarily expose input value. Use with caution.
    get imageNameInput() {
        return this._imageName;
    }
    get imageVersionNumber() {
        return this.getNumberAttribute('image_version_number');
    }
    set imageVersionNumber(value) {
        this._imageVersionNumber = value;
    }
    resetImageVersionNumber() {
        this._imageVersionNumber = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageVersionNumberInput() {
        return this._imageVersionNumber;
    }
}
exports.SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCustomImageOutputReference = SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCustomImageOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCustomImageOutputReference[_1] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCustomImageOutputReference", version: "19.15.0" };
class SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCustomImageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCustomImageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCustomImageList = SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCustomImageList;
_2 = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCustomImageList[_2] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCustomImageList", version: "19.15.0" };
function sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsDefaultResourceSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        lifecycle_config_arn: cdktf.stringToTerraform(struct.lifecycleConfigArn),
        sagemaker_image_arn: cdktf.stringToTerraform(struct.sagemakerImageArn),
        sagemaker_image_version_alias: cdktf.stringToTerraform(struct.sagemakerImageVersionAlias),
        sagemaker_image_version_arn: cdktf.stringToTerraform(struct.sagemakerImageVersionArn),
    };
}
exports.sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsDefaultResourceSpecToTerraform = sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsDefaultResourceSpecToTerraform;
function sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsDefaultResourceSpecToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        instance_type: {
            value: cdktf.stringToHclTerraform(struct.instanceType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        lifecycle_config_arn: {
            value: cdktf.stringToHclTerraform(struct.lifecycleConfigArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_arn: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_version_alias: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageVersionAlias),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_version_arn: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageVersionArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsDefaultResourceSpecToHclTerraform = sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsDefaultResourceSpecToHclTerraform;
class SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsDefaultResourceSpecOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._instanceType !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceType = this._instanceType;
        }
        if (this._lifecycleConfigArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.lifecycleConfigArn = this._lifecycleConfigArn;
        }
        if (this._sagemakerImageArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageArn = this._sagemakerImageArn;
        }
        if (this._sagemakerImageVersionAlias !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageVersionAlias = this._sagemakerImageVersionAlias;
        }
        if (this._sagemakerImageVersionArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageVersionArn = this._sagemakerImageVersionArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._instanceType = undefined;
            this._lifecycleConfigArn = undefined;
            this._sagemakerImageArn = undefined;
            this._sagemakerImageVersionAlias = undefined;
            this._sagemakerImageVersionArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._instanceType = value.instanceType;
            this._lifecycleConfigArn = value.lifecycleConfigArn;
            this._sagemakerImageArn = value.sagemakerImageArn;
            this._sagemakerImageVersionAlias = value.sagemakerImageVersionAlias;
            this._sagemakerImageVersionArn = value.sagemakerImageVersionArn;
        }
    }
    get instanceType() {
        return this.getStringAttribute('instance_type');
    }
    set instanceType(value) {
        this._instanceType = value;
    }
    resetInstanceType() {
        this._instanceType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceTypeInput() {
        return this._instanceType;
    }
    get lifecycleConfigArn() {
        return this.getStringAttribute('lifecycle_config_arn');
    }
    set lifecycleConfigArn(value) {
        this._lifecycleConfigArn = value;
    }
    resetLifecycleConfigArn() {
        this._lifecycleConfigArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifecycleConfigArnInput() {
        return this._lifecycleConfigArn;
    }
    get sagemakerImageArn() {
        return this.getStringAttribute('sagemaker_image_arn');
    }
    set sagemakerImageArn(value) {
        this._sagemakerImageArn = value;
    }
    resetSagemakerImageArn() {
        this._sagemakerImageArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageArnInput() {
        return this._sagemakerImageArn;
    }
    get sagemakerImageVersionAlias() {
        return this.getStringAttribute('sagemaker_image_version_alias');
    }
    set sagemakerImageVersionAlias(value) {
        this._sagemakerImageVersionAlias = value;
    }
    resetSagemakerImageVersionAlias() {
        this._sagemakerImageVersionAlias = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageVersionAliasInput() {
        return this._sagemakerImageVersionAlias;
    }
    get sagemakerImageVersionArn() {
        return this.getStringAttribute('sagemaker_image_version_arn');
    }
    set sagemakerImageVersionArn(value) {
        this._sagemakerImageVersionArn = value;
    }
    resetSagemakerImageVersionArn() {
        this._sagemakerImageVersionArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageVersionArnInput() {
        return this._sagemakerImageVersionArn;
    }
}
exports.SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsDefaultResourceSpecOutputReference = SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsDefaultResourceSpecOutputReference;
_3 = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsDefaultResourceSpecOutputReference[_3] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsDefaultResourceSpecOutputReference", version: "19.15.0" };
function sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        lifecycle_config_arns: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.lifecycleConfigArns),
        code_repository: cdktf.listMapper(sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCodeRepositoryToTerraform, true)(struct.codeRepository),
        custom_image: cdktf.listMapper(sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCustomImageToTerraform, true)(struct.customImage),
        default_resource_spec: sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsDefaultResourceSpecToTerraform(struct.defaultResourceSpec),
    };
}
exports.sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsToTerraform = sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsToTerraform;
function sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        lifecycle_config_arns: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.lifecycleConfigArns),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        code_repository: {
            value: cdktf.listMapperHcl(sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCodeRepositoryToHclTerraform, true)(struct.codeRepository),
            isBlock: true,
            type: "set",
            storageClassType: "SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCodeRepositoryList",
        },
        custom_image: {
            value: cdktf.listMapperHcl(sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCustomImageToHclTerraform, true)(struct.customImage),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCustomImageList",
        },
        default_resource_spec: {
            value: sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsDefaultResourceSpecToHclTerraform(struct.defaultResourceSpec),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsDefaultResourceSpecList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsToHclTerraform = sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsToHclTerraform;
class SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // code_repository - computed: false, optional: true, required: false
        this._codeRepository = new SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCodeRepositoryList(this, "code_repository", true);
        // custom_image - computed: false, optional: true, required: false
        this._customImage = new SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsCustomImageList(this, "custom_image", false);
        // default_resource_spec - computed: false, optional: true, required: false
        this._defaultResourceSpec = new SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsDefaultResourceSpecOutputReference(this, "default_resource_spec");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._lifecycleConfigArns !== undefined) {
            hasAnyValues = true;
            internalValueResult.lifecycleConfigArns = this._lifecycleConfigArns;
        }
        if (this._codeRepository?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.codeRepository = this._codeRepository?.internalValue;
        }
        if (this._customImage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customImage = this._customImage?.internalValue;
        }
        if (this._defaultResourceSpec?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultResourceSpec = this._defaultResourceSpec?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._lifecycleConfigArns = undefined;
            this._codeRepository.internalValue = undefined;
            this._customImage.internalValue = undefined;
            this._defaultResourceSpec.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._lifecycleConfigArns = value.lifecycleConfigArns;
            this._codeRepository.internalValue = value.codeRepository;
            this._customImage.internalValue = value.customImage;
            this._defaultResourceSpec.internalValue = value.defaultResourceSpec;
        }
    }
    get lifecycleConfigArns() {
        return cdktf.Fn.tolist(this.getListAttribute('lifecycle_config_arns'));
    }
    set lifecycleConfigArns(value) {
        this._lifecycleConfigArns = value;
    }
    resetLifecycleConfigArns() {
        this._lifecycleConfigArns = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifecycleConfigArnsInput() {
        return this._lifecycleConfigArns;
    }
    get codeRepository() {
        return this._codeRepository;
    }
    putCodeRepository(value) {
        this._codeRepository.internalValue = value;
    }
    resetCodeRepository() {
        this._codeRepository.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get codeRepositoryInput() {
        return this._codeRepository.internalValue;
    }
    get customImage() {
        return this._customImage;
    }
    putCustomImage(value) {
        this._customImage.internalValue = value;
    }
    resetCustomImage() {
        this._customImage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customImageInput() {
        return this._customImage.internalValue;
    }
    get defaultResourceSpec() {
        return this._defaultResourceSpec;
    }
    putDefaultResourceSpec(value) {
        this._defaultResourceSpec.internalValue = value;
    }
    resetDefaultResourceSpec() {
        this._defaultResourceSpec.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultResourceSpecInput() {
        return this._defaultResourceSpec.internalValue;
    }
}
exports.SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsOutputReference = SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsOutputReference[_4] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsOutputReference", version: "19.15.0" };
function sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsCodeRepositoryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        repository_url: cdktf.stringToTerraform(struct.repositoryUrl),
    };
}
exports.sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsCodeRepositoryToTerraform = sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsCodeRepositoryToTerraform;
function sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsCodeRepositoryToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        repository_url: {
            value: cdktf.stringToHclTerraform(struct.repositoryUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsCodeRepositoryToHclTerraform = sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsCodeRepositoryToHclTerraform;
class SagemakerDomainDefaultUserSettingsJupyterServerAppSettingsCodeRepositoryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._repositoryUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.repositoryUrl = this._repositoryUrl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._repositoryUrl = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._repositoryUrl = value.repositoryUrl;
        }
    }
    get repositoryUrl() {
        return this.getStringAttribute('repository_url');
    }
    set repositoryUrl(value) {
        this._repositoryUrl = value;
    }
    // Temporarily expose input value. Use with caution.
    get repositoryUrlInput() {
        return this._repositoryUrl;
    }
}
exports.SagemakerDomainDefaultUserSettingsJupyterServerAppSettingsCodeRepositoryOutputReference = SagemakerDomainDefaultUserSettingsJupyterServerAppSettingsCodeRepositoryOutputReference;
_5 = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsJupyterServerAppSettingsCodeRepositoryOutputReference[_5] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsJupyterServerAppSettingsCodeRepositoryOutputReference", version: "19.15.0" };
class SagemakerDomainDefaultUserSettingsJupyterServerAppSettingsCodeRepositoryList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SagemakerDomainDefaultUserSettingsJupyterServerAppSettingsCodeRepositoryOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SagemakerDomainDefaultUserSettingsJupyterServerAppSettingsCodeRepositoryList = SagemakerDomainDefaultUserSettingsJupyterServerAppSettingsCodeRepositoryList;
_6 = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsJupyterServerAppSettingsCodeRepositoryList[_6] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsJupyterServerAppSettingsCodeRepositoryList", version: "19.15.0" };
function sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        lifecycle_config_arn: cdktf.stringToTerraform(struct.lifecycleConfigArn),
        sagemaker_image_arn: cdktf.stringToTerraform(struct.sagemakerImageArn),
        sagemaker_image_version_alias: cdktf.stringToTerraform(struct.sagemakerImageVersionAlias),
        sagemaker_image_version_arn: cdktf.stringToTerraform(struct.sagemakerImageVersionArn),
    };
}
exports.sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform = sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform;
function sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        instance_type: {
            value: cdktf.stringToHclTerraform(struct.instanceType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        lifecycle_config_arn: {
            value: cdktf.stringToHclTerraform(struct.lifecycleConfigArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_arn: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_version_alias: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageVersionAlias),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_version_arn: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageVersionArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecToHclTerraform = sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecToHclTerraform;
class SagemakerDomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._instanceType !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceType = this._instanceType;
        }
        if (this._lifecycleConfigArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.lifecycleConfigArn = this._lifecycleConfigArn;
        }
        if (this._sagemakerImageArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageArn = this._sagemakerImageArn;
        }
        if (this._sagemakerImageVersionAlias !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageVersionAlias = this._sagemakerImageVersionAlias;
        }
        if (this._sagemakerImageVersionArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageVersionArn = this._sagemakerImageVersionArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._instanceType = undefined;
            this._lifecycleConfigArn = undefined;
            this._sagemakerImageArn = undefined;
            this._sagemakerImageVersionAlias = undefined;
            this._sagemakerImageVersionArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._instanceType = value.instanceType;
            this._lifecycleConfigArn = value.lifecycleConfigArn;
            this._sagemakerImageArn = value.sagemakerImageArn;
            this._sagemakerImageVersionAlias = value.sagemakerImageVersionAlias;
            this._sagemakerImageVersionArn = value.sagemakerImageVersionArn;
        }
    }
    get instanceType() {
        return this.getStringAttribute('instance_type');
    }
    set instanceType(value) {
        this._instanceType = value;
    }
    resetInstanceType() {
        this._instanceType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceTypeInput() {
        return this._instanceType;
    }
    get lifecycleConfigArn() {
        return this.getStringAttribute('lifecycle_config_arn');
    }
    set lifecycleConfigArn(value) {
        this._lifecycleConfigArn = value;
    }
    resetLifecycleConfigArn() {
        this._lifecycleConfigArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifecycleConfigArnInput() {
        return this._lifecycleConfigArn;
    }
    get sagemakerImageArn() {
        return this.getStringAttribute('sagemaker_image_arn');
    }
    set sagemakerImageArn(value) {
        this._sagemakerImageArn = value;
    }
    resetSagemakerImageArn() {
        this._sagemakerImageArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageArnInput() {
        return this._sagemakerImageArn;
    }
    get sagemakerImageVersionAlias() {
        return this.getStringAttribute('sagemaker_image_version_alias');
    }
    set sagemakerImageVersionAlias(value) {
        this._sagemakerImageVersionAlias = value;
    }
    resetSagemakerImageVersionAlias() {
        this._sagemakerImageVersionAlias = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageVersionAliasInput() {
        return this._sagemakerImageVersionAlias;
    }
    get sagemakerImageVersionArn() {
        return this.getStringAttribute('sagemaker_image_version_arn');
    }
    set sagemakerImageVersionArn(value) {
        this._sagemakerImageVersionArn = value;
    }
    resetSagemakerImageVersionArn() {
        this._sagemakerImageVersionArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageVersionArnInput() {
        return this._sagemakerImageVersionArn;
    }
}
exports.SagemakerDomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecOutputReference = SagemakerDomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecOutputReference;
_7 = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecOutputReference[_7] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecOutputReference", version: "19.15.0" };
function sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        lifecycle_config_arns: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.lifecycleConfigArns),
        code_repository: cdktf.listMapper(sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsCodeRepositoryToTerraform, true)(struct.codeRepository),
        default_resource_spec: sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform(struct.defaultResourceSpec),
    };
}
exports.sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsToTerraform = sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsToTerraform;
function sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        lifecycle_config_arns: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.lifecycleConfigArns),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        code_repository: {
            value: cdktf.listMapperHcl(sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsCodeRepositoryToHclTerraform, true)(struct.codeRepository),
            isBlock: true,
            type: "set",
            storageClassType: "SagemakerDomainDefaultUserSettingsJupyterServerAppSettingsCodeRepositoryList",
        },
        default_resource_spec: {
            value: sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecToHclTerraform(struct.defaultResourceSpec),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsToHclTerraform = sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsToHclTerraform;
class SagemakerDomainDefaultUserSettingsJupyterServerAppSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // code_repository - computed: false, optional: true, required: false
        this._codeRepository = new SagemakerDomainDefaultUserSettingsJupyterServerAppSettingsCodeRepositoryList(this, "code_repository", true);
        // default_resource_spec - computed: false, optional: true, required: false
        this._defaultResourceSpec = new SagemakerDomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecOutputReference(this, "default_resource_spec");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._lifecycleConfigArns !== undefined) {
            hasAnyValues = true;
            internalValueResult.lifecycleConfigArns = this._lifecycleConfigArns;
        }
        if (this._codeRepository?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.codeRepository = this._codeRepository?.internalValue;
        }
        if (this._defaultResourceSpec?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultResourceSpec = this._defaultResourceSpec?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._lifecycleConfigArns = undefined;
            this._codeRepository.internalValue = undefined;
            this._defaultResourceSpec.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._lifecycleConfigArns = value.lifecycleConfigArns;
            this._codeRepository.internalValue = value.codeRepository;
            this._defaultResourceSpec.internalValue = value.defaultResourceSpec;
        }
    }
    get lifecycleConfigArns() {
        return cdktf.Fn.tolist(this.getListAttribute('lifecycle_config_arns'));
    }
    set lifecycleConfigArns(value) {
        this._lifecycleConfigArns = value;
    }
    resetLifecycleConfigArns() {
        this._lifecycleConfigArns = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifecycleConfigArnsInput() {
        return this._lifecycleConfigArns;
    }
    get codeRepository() {
        return this._codeRepository;
    }
    putCodeRepository(value) {
        this._codeRepository.internalValue = value;
    }
    resetCodeRepository() {
        this._codeRepository.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get codeRepositoryInput() {
        return this._codeRepository.internalValue;
    }
    get defaultResourceSpec() {
        return this._defaultResourceSpec;
    }
    putDefaultResourceSpec(value) {
        this._defaultResourceSpec.internalValue = value;
    }
    resetDefaultResourceSpec() {
        this._defaultResourceSpec.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultResourceSpecInput() {
        return this._defaultResourceSpec.internalValue;
    }
}
exports.SagemakerDomainDefaultUserSettingsJupyterServerAppSettingsOutputReference = SagemakerDomainDefaultUserSettingsJupyterServerAppSettingsOutputReference;
_8 = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsJupyterServerAppSettingsOutputReference[_8] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsJupyterServerAppSettingsOutputReference", version: "19.15.0" };
function sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        app_image_config_name: cdktf.stringToTerraform(struct.appImageConfigName),
        image_name: cdktf.stringToTerraform(struct.imageName),
        image_version_number: cdktf.numberToTerraform(struct.imageVersionNumber),
    };
}
exports.sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageToTerraform = sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageToTerraform;
function sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        app_image_config_name: {
            value: cdktf.stringToHclTerraform(struct.appImageConfigName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        image_name: {
            value: cdktf.stringToHclTerraform(struct.imageName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        image_version_number: {
            value: cdktf.numberToHclTerraform(struct.imageVersionNumber),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageToHclTerraform = sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageToHclTerraform;
class SagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._appImageConfigName !== undefined) {
            hasAnyValues = true;
            internalValueResult.appImageConfigName = this._appImageConfigName;
        }
        if (this._imageName !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageName = this._imageName;
        }
        if (this._imageVersionNumber !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageVersionNumber = this._imageVersionNumber;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._appImageConfigName = undefined;
            this._imageName = undefined;
            this._imageVersionNumber = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._appImageConfigName = value.appImageConfigName;
            this._imageName = value.imageName;
            this._imageVersionNumber = value.imageVersionNumber;
        }
    }
    get appImageConfigName() {
        return this.getStringAttribute('app_image_config_name');
    }
    set appImageConfigName(value) {
        this._appImageConfigName = value;
    }
    // Temporarily expose input value. Use with caution.
    get appImageConfigNameInput() {
        return this._appImageConfigName;
    }
    get imageName() {
        return this.getStringAttribute('image_name');
    }
    set imageName(value) {
        this._imageName = value;
    }
    // Temporarily expose input value. Use with caution.
    get imageNameInput() {
        return this._imageName;
    }
    get imageVersionNumber() {
        return this.getNumberAttribute('image_version_number');
    }
    set imageVersionNumber(value) {
        this._imageVersionNumber = value;
    }
    resetImageVersionNumber() {
        this._imageVersionNumber = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageVersionNumberInput() {
        return this._imageVersionNumber;
    }
}
exports.SagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageOutputReference = SagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageOutputReference;
_9 = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageOutputReference[_9] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageOutputReference", version: "19.15.0" };
class SagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageList = SagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageList;
_10 = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageList[_10] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageList", version: "19.15.0" };
function sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        lifecycle_config_arn: cdktf.stringToTerraform(struct.lifecycleConfigArn),
        sagemaker_image_arn: cdktf.stringToTerraform(struct.sagemakerImageArn),
        sagemaker_image_version_alias: cdktf.stringToTerraform(struct.sagemakerImageVersionAlias),
        sagemaker_image_version_arn: cdktf.stringToTerraform(struct.sagemakerImageVersionArn),
    };
}
exports.sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform = sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform;
function sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        instance_type: {
            value: cdktf.stringToHclTerraform(struct.instanceType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        lifecycle_config_arn: {
            value: cdktf.stringToHclTerraform(struct.lifecycleConfigArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_arn: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_version_alias: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageVersionAlias),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_version_arn: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageVersionArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToHclTerraform = sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToHclTerraform;
class SagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._instanceType !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceType = this._instanceType;
        }
        if (this._lifecycleConfigArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.lifecycleConfigArn = this._lifecycleConfigArn;
        }
        if (this._sagemakerImageArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageArn = this._sagemakerImageArn;
        }
        if (this._sagemakerImageVersionAlias !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageVersionAlias = this._sagemakerImageVersionAlias;
        }
        if (this._sagemakerImageVersionArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageVersionArn = this._sagemakerImageVersionArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._instanceType = undefined;
            this._lifecycleConfigArn = undefined;
            this._sagemakerImageArn = undefined;
            this._sagemakerImageVersionAlias = undefined;
            this._sagemakerImageVersionArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._instanceType = value.instanceType;
            this._lifecycleConfigArn = value.lifecycleConfigArn;
            this._sagemakerImageArn = value.sagemakerImageArn;
            this._sagemakerImageVersionAlias = value.sagemakerImageVersionAlias;
            this._sagemakerImageVersionArn = value.sagemakerImageVersionArn;
        }
    }
    get instanceType() {
        return this.getStringAttribute('instance_type');
    }
    set instanceType(value) {
        this._instanceType = value;
    }
    resetInstanceType() {
        this._instanceType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceTypeInput() {
        return this._instanceType;
    }
    get lifecycleConfigArn() {
        return this.getStringAttribute('lifecycle_config_arn');
    }
    set lifecycleConfigArn(value) {
        this._lifecycleConfigArn = value;
    }
    resetLifecycleConfigArn() {
        this._lifecycleConfigArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifecycleConfigArnInput() {
        return this._lifecycleConfigArn;
    }
    get sagemakerImageArn() {
        return this.getStringAttribute('sagemaker_image_arn');
    }
    set sagemakerImageArn(value) {
        this._sagemakerImageArn = value;
    }
    resetSagemakerImageArn() {
        this._sagemakerImageArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageArnInput() {
        return this._sagemakerImageArn;
    }
    get sagemakerImageVersionAlias() {
        return this.getStringAttribute('sagemaker_image_version_alias');
    }
    set sagemakerImageVersionAlias(value) {
        this._sagemakerImageVersionAlias = value;
    }
    resetSagemakerImageVersionAlias() {
        this._sagemakerImageVersionAlias = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageVersionAliasInput() {
        return this._sagemakerImageVersionAlias;
    }
    get sagemakerImageVersionArn() {
        return this.getStringAttribute('sagemaker_image_version_arn');
    }
    set sagemakerImageVersionArn(value) {
        this._sagemakerImageVersionArn = value;
    }
    resetSagemakerImageVersionArn() {
        this._sagemakerImageVersionArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageVersionArnInput() {
        return this._sagemakerImageVersionArn;
    }
}
exports.SagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecOutputReference = SagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecOutputReference;
_11 = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecOutputReference[_11] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecOutputReference", version: "19.15.0" };
function sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        lifecycle_config_arns: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.lifecycleConfigArns),
        custom_image: cdktf.listMapper(sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageToTerraform, true)(struct.customImage),
        default_resource_spec: sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform(struct.defaultResourceSpec),
    };
}
exports.sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsToTerraform = sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsToTerraform;
function sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        lifecycle_config_arns: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.lifecycleConfigArns),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        custom_image: {
            value: cdktf.listMapperHcl(sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageToHclTerraform, true)(struct.customImage),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageList",
        },
        default_resource_spec: {
            value: sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToHclTerraform(struct.defaultResourceSpec),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsToHclTerraform = sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsToHclTerraform;
class SagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // custom_image - computed: false, optional: true, required: false
        this._customImage = new SagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageList(this, "custom_image", false);
        // default_resource_spec - computed: false, optional: true, required: false
        this._defaultResourceSpec = new SagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecOutputReference(this, "default_resource_spec");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._lifecycleConfigArns !== undefined) {
            hasAnyValues = true;
            internalValueResult.lifecycleConfigArns = this._lifecycleConfigArns;
        }
        if (this._customImage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customImage = this._customImage?.internalValue;
        }
        if (this._defaultResourceSpec?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultResourceSpec = this._defaultResourceSpec?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._lifecycleConfigArns = undefined;
            this._customImage.internalValue = undefined;
            this._defaultResourceSpec.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._lifecycleConfigArns = value.lifecycleConfigArns;
            this._customImage.internalValue = value.customImage;
            this._defaultResourceSpec.internalValue = value.defaultResourceSpec;
        }
    }
    get lifecycleConfigArns() {
        return cdktf.Fn.tolist(this.getListAttribute('lifecycle_config_arns'));
    }
    set lifecycleConfigArns(value) {
        this._lifecycleConfigArns = value;
    }
    resetLifecycleConfigArns() {
        this._lifecycleConfigArns = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifecycleConfigArnsInput() {
        return this._lifecycleConfigArns;
    }
    get customImage() {
        return this._customImage;
    }
    putCustomImage(value) {
        this._customImage.internalValue = value;
    }
    resetCustomImage() {
        this._customImage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customImageInput() {
        return this._customImage.internalValue;
    }
    get defaultResourceSpec() {
        return this._defaultResourceSpec;
    }
    putDefaultResourceSpec(value) {
        this._defaultResourceSpec.internalValue = value;
    }
    resetDefaultResourceSpec() {
        this._defaultResourceSpec.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultResourceSpecInput() {
        return this._defaultResourceSpec.internalValue;
    }
}
exports.SagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsOutputReference = SagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsOutputReference;
_12 = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsOutputReference[_12] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsOutputReference", version: "19.15.0" };
function sagemakerDomainDefaultUserSettingsRSessionAppSettingsCustomImageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        app_image_config_name: cdktf.stringToTerraform(struct.appImageConfigName),
        image_name: cdktf.stringToTerraform(struct.imageName),
        image_version_number: cdktf.numberToTerraform(struct.imageVersionNumber),
    };
}
exports.sagemakerDomainDefaultUserSettingsRSessionAppSettingsCustomImageToTerraform = sagemakerDomainDefaultUserSettingsRSessionAppSettingsCustomImageToTerraform;
function sagemakerDomainDefaultUserSettingsRSessionAppSettingsCustomImageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        app_image_config_name: {
            value: cdktf.stringToHclTerraform(struct.appImageConfigName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        image_name: {
            value: cdktf.stringToHclTerraform(struct.imageName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        image_version_number: {
            value: cdktf.numberToHclTerraform(struct.imageVersionNumber),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultUserSettingsRSessionAppSettingsCustomImageToHclTerraform = sagemakerDomainDefaultUserSettingsRSessionAppSettingsCustomImageToHclTerraform;
class SagemakerDomainDefaultUserSettingsRSessionAppSettingsCustomImageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._appImageConfigName !== undefined) {
            hasAnyValues = true;
            internalValueResult.appImageConfigName = this._appImageConfigName;
        }
        if (this._imageName !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageName = this._imageName;
        }
        if (this._imageVersionNumber !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageVersionNumber = this._imageVersionNumber;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._appImageConfigName = undefined;
            this._imageName = undefined;
            this._imageVersionNumber = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._appImageConfigName = value.appImageConfigName;
            this._imageName = value.imageName;
            this._imageVersionNumber = value.imageVersionNumber;
        }
    }
    get appImageConfigName() {
        return this.getStringAttribute('app_image_config_name');
    }
    set appImageConfigName(value) {
        this._appImageConfigName = value;
    }
    // Temporarily expose input value. Use with caution.
    get appImageConfigNameInput() {
        return this._appImageConfigName;
    }
    get imageName() {
        return this.getStringAttribute('image_name');
    }
    set imageName(value) {
        this._imageName = value;
    }
    // Temporarily expose input value. Use with caution.
    get imageNameInput() {
        return this._imageName;
    }
    get imageVersionNumber() {
        return this.getNumberAttribute('image_version_number');
    }
    set imageVersionNumber(value) {
        this._imageVersionNumber = value;
    }
    resetImageVersionNumber() {
        this._imageVersionNumber = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageVersionNumberInput() {
        return this._imageVersionNumber;
    }
}
exports.SagemakerDomainDefaultUserSettingsRSessionAppSettingsCustomImageOutputReference = SagemakerDomainDefaultUserSettingsRSessionAppSettingsCustomImageOutputReference;
_13 = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsRSessionAppSettingsCustomImageOutputReference[_13] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsRSessionAppSettingsCustomImageOutputReference", version: "19.15.0" };
class SagemakerDomainDefaultUserSettingsRSessionAppSettingsCustomImageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SagemakerDomainDefaultUserSettingsRSessionAppSettingsCustomImageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SagemakerDomainDefaultUserSettingsRSessionAppSettingsCustomImageList = SagemakerDomainDefaultUserSettingsRSessionAppSettingsCustomImageList;
_14 = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsRSessionAppSettingsCustomImageList[_14] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsRSessionAppSettingsCustomImageList", version: "19.15.0" };
function sagemakerDomainDefaultUserSettingsRSessionAppSettingsDefaultResourceSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        lifecycle_config_arn: cdktf.stringToTerraform(struct.lifecycleConfigArn),
        sagemaker_image_arn: cdktf.stringToTerraform(struct.sagemakerImageArn),
        sagemaker_image_version_alias: cdktf.stringToTerraform(struct.sagemakerImageVersionAlias),
        sagemaker_image_version_arn: cdktf.stringToTerraform(struct.sagemakerImageVersionArn),
    };
}
exports.sagemakerDomainDefaultUserSettingsRSessionAppSettingsDefaultResourceSpecToTerraform = sagemakerDomainDefaultUserSettingsRSessionAppSettingsDefaultResourceSpecToTerraform;
function sagemakerDomainDefaultUserSettingsRSessionAppSettingsDefaultResourceSpecToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        instance_type: {
            value: cdktf.stringToHclTerraform(struct.instanceType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        lifecycle_config_arn: {
            value: cdktf.stringToHclTerraform(struct.lifecycleConfigArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_arn: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_version_alias: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageVersionAlias),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_version_arn: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageVersionArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultUserSettingsRSessionAppSettingsDefaultResourceSpecToHclTerraform = sagemakerDomainDefaultUserSettingsRSessionAppSettingsDefaultResourceSpecToHclTerraform;
class SagemakerDomainDefaultUserSettingsRSessionAppSettingsDefaultResourceSpecOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._instanceType !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceType = this._instanceType;
        }
        if (this._lifecycleConfigArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.lifecycleConfigArn = this._lifecycleConfigArn;
        }
        if (this._sagemakerImageArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageArn = this._sagemakerImageArn;
        }
        if (this._sagemakerImageVersionAlias !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageVersionAlias = this._sagemakerImageVersionAlias;
        }
        if (this._sagemakerImageVersionArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageVersionArn = this._sagemakerImageVersionArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._instanceType = undefined;
            this._lifecycleConfigArn = undefined;
            this._sagemakerImageArn = undefined;
            this._sagemakerImageVersionAlias = undefined;
            this._sagemakerImageVersionArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._instanceType = value.instanceType;
            this._lifecycleConfigArn = value.lifecycleConfigArn;
            this._sagemakerImageArn = value.sagemakerImageArn;
            this._sagemakerImageVersionAlias = value.sagemakerImageVersionAlias;
            this._sagemakerImageVersionArn = value.sagemakerImageVersionArn;
        }
    }
    get instanceType() {
        return this.getStringAttribute('instance_type');
    }
    set instanceType(value) {
        this._instanceType = value;
    }
    resetInstanceType() {
        this._instanceType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceTypeInput() {
        return this._instanceType;
    }
    get lifecycleConfigArn() {
        return this.getStringAttribute('lifecycle_config_arn');
    }
    set lifecycleConfigArn(value) {
        this._lifecycleConfigArn = value;
    }
    resetLifecycleConfigArn() {
        this._lifecycleConfigArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifecycleConfigArnInput() {
        return this._lifecycleConfigArn;
    }
    get sagemakerImageArn() {
        return this.getStringAttribute('sagemaker_image_arn');
    }
    set sagemakerImageArn(value) {
        this._sagemakerImageArn = value;
    }
    resetSagemakerImageArn() {
        this._sagemakerImageArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageArnInput() {
        return this._sagemakerImageArn;
    }
    get sagemakerImageVersionAlias() {
        return this.getStringAttribute('sagemaker_image_version_alias');
    }
    set sagemakerImageVersionAlias(value) {
        this._sagemakerImageVersionAlias = value;
    }
    resetSagemakerImageVersionAlias() {
        this._sagemakerImageVersionAlias = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageVersionAliasInput() {
        return this._sagemakerImageVersionAlias;
    }
    get sagemakerImageVersionArn() {
        return this.getStringAttribute('sagemaker_image_version_arn');
    }
    set sagemakerImageVersionArn(value) {
        this._sagemakerImageVersionArn = value;
    }
    resetSagemakerImageVersionArn() {
        this._sagemakerImageVersionArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageVersionArnInput() {
        return this._sagemakerImageVersionArn;
    }
}
exports.SagemakerDomainDefaultUserSettingsRSessionAppSettingsDefaultResourceSpecOutputReference = SagemakerDomainDefaultUserSettingsRSessionAppSettingsDefaultResourceSpecOutputReference;
_15 = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsRSessionAppSettingsDefaultResourceSpecOutputReference[_15] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsRSessionAppSettingsDefaultResourceSpecOutputReference", version: "19.15.0" };
function sagemakerDomainDefaultUserSettingsRSessionAppSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        custom_image: cdktf.listMapper(sagemakerDomainDefaultUserSettingsRSessionAppSettingsCustomImageToTerraform, true)(struct.customImage),
        default_resource_spec: sagemakerDomainDefaultUserSettingsRSessionAppSettingsDefaultResourceSpecToTerraform(struct.defaultResourceSpec),
    };
}
exports.sagemakerDomainDefaultUserSettingsRSessionAppSettingsToTerraform = sagemakerDomainDefaultUserSettingsRSessionAppSettingsToTerraform;
function sagemakerDomainDefaultUserSettingsRSessionAppSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        custom_image: {
            value: cdktf.listMapperHcl(sagemakerDomainDefaultUserSettingsRSessionAppSettingsCustomImageToHclTerraform, true)(struct.customImage),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDomainDefaultUserSettingsRSessionAppSettingsCustomImageList",
        },
        default_resource_spec: {
            value: sagemakerDomainDefaultUserSettingsRSessionAppSettingsDefaultResourceSpecToHclTerraform(struct.defaultResourceSpec),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDomainDefaultUserSettingsRSessionAppSettingsDefaultResourceSpecList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultUserSettingsRSessionAppSettingsToHclTerraform = sagemakerDomainDefaultUserSettingsRSessionAppSettingsToHclTerraform;
class SagemakerDomainDefaultUserSettingsRSessionAppSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // custom_image - computed: false, optional: true, required: false
        this._customImage = new SagemakerDomainDefaultUserSettingsRSessionAppSettingsCustomImageList(this, "custom_image", false);
        // default_resource_spec - computed: false, optional: true, required: false
        this._defaultResourceSpec = new SagemakerDomainDefaultUserSettingsRSessionAppSettingsDefaultResourceSpecOutputReference(this, "default_resource_spec");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._customImage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customImage = this._customImage?.internalValue;
        }
        if (this._defaultResourceSpec?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultResourceSpec = this._defaultResourceSpec?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._customImage.internalValue = undefined;
            this._defaultResourceSpec.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._customImage.internalValue = value.customImage;
            this._defaultResourceSpec.internalValue = value.defaultResourceSpec;
        }
    }
    get customImage() {
        return this._customImage;
    }
    putCustomImage(value) {
        this._customImage.internalValue = value;
    }
    resetCustomImage() {
        this._customImage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customImageInput() {
        return this._customImage.internalValue;
    }
    get defaultResourceSpec() {
        return this._defaultResourceSpec;
    }
    putDefaultResourceSpec(value) {
        this._defaultResourceSpec.internalValue = value;
    }
    resetDefaultResourceSpec() {
        this._defaultResourceSpec.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultResourceSpecInput() {
        return this._defaultResourceSpec.internalValue;
    }
}
exports.SagemakerDomainDefaultUserSettingsRSessionAppSettingsOutputReference = SagemakerDomainDefaultUserSettingsRSessionAppSettingsOutputReference;
_16 = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsRSessionAppSettingsOutputReference[_16] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsRSessionAppSettingsOutputReference", version: "19.15.0" };
function sagemakerDomainDefaultUserSettingsRStudioServerProAppSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        access_status: cdktf.stringToTerraform(struct.accessStatus),
        user_group: cdktf.stringToTerraform(struct.userGroup),
    };
}
exports.sagemakerDomainDefaultUserSettingsRStudioServerProAppSettingsToTerraform = sagemakerDomainDefaultUserSettingsRStudioServerProAppSettingsToTerraform;
function sagemakerDomainDefaultUserSettingsRStudioServerProAppSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        access_status: {
            value: cdktf.stringToHclTerraform(struct.accessStatus),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        user_group: {
            value: cdktf.stringToHclTerraform(struct.userGroup),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultUserSettingsRStudioServerProAppSettingsToHclTerraform = sagemakerDomainDefaultUserSettingsRStudioServerProAppSettingsToHclTerraform;
class SagemakerDomainDefaultUserSettingsRStudioServerProAppSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._accessStatus !== undefined) {
            hasAnyValues = true;
            internalValueResult.accessStatus = this._accessStatus;
        }
        if (this._userGroup !== undefined) {
            hasAnyValues = true;
            internalValueResult.userGroup = this._userGroup;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._accessStatus = undefined;
            this._userGroup = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._accessStatus = value.accessStatus;
            this._userGroup = value.userGroup;
        }
    }
    get accessStatus() {
        return this.getStringAttribute('access_status');
    }
    set accessStatus(value) {
        this._accessStatus = value;
    }
    resetAccessStatus() {
        this._accessStatus = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessStatusInput() {
        return this._accessStatus;
    }
    get userGroup() {
        return this.getStringAttribute('user_group');
    }
    set userGroup(value) {
        this._userGroup = value;
    }
    resetUserGroup() {
        this._userGroup = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userGroupInput() {
        return this._userGroup;
    }
}
exports.SagemakerDomainDefaultUserSettingsRStudioServerProAppSettingsOutputReference = SagemakerDomainDefaultUserSettingsRStudioServerProAppSettingsOutputReference;
_17 = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsRStudioServerProAppSettingsOutputReference[_17] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsRStudioServerProAppSettingsOutputReference", version: "19.15.0" };
function sagemakerDomainDefaultUserSettingsSharingSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        notebook_output_option: cdktf.stringToTerraform(struct.notebookOutputOption),
        s3_kms_key_id: cdktf.stringToTerraform(struct.s3KmsKeyId),
        s3_output_path: cdktf.stringToTerraform(struct.s3OutputPath),
    };
}
exports.sagemakerDomainDefaultUserSettingsSharingSettingsToTerraform = sagemakerDomainDefaultUserSettingsSharingSettingsToTerraform;
function sagemakerDomainDefaultUserSettingsSharingSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        notebook_output_option: {
            value: cdktf.stringToHclTerraform(struct.notebookOutputOption),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        s3_kms_key_id: {
            value: cdktf.stringToHclTerraform(struct.s3KmsKeyId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        s3_output_path: {
            value: cdktf.stringToHclTerraform(struct.s3OutputPath),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultUserSettingsSharingSettingsToHclTerraform = sagemakerDomainDefaultUserSettingsSharingSettingsToHclTerraform;
class SagemakerDomainDefaultUserSettingsSharingSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._notebookOutputOption !== undefined) {
            hasAnyValues = true;
            internalValueResult.notebookOutputOption = this._notebookOutputOption;
        }
        if (this._s3KmsKeyId !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3KmsKeyId = this._s3KmsKeyId;
        }
        if (this._s3OutputPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3OutputPath = this._s3OutputPath;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._notebookOutputOption = undefined;
            this._s3KmsKeyId = undefined;
            this._s3OutputPath = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._notebookOutputOption = value.notebookOutputOption;
            this._s3KmsKeyId = value.s3KmsKeyId;
            this._s3OutputPath = value.s3OutputPath;
        }
    }
    get notebookOutputOption() {
        return this.getStringAttribute('notebook_output_option');
    }
    set notebookOutputOption(value) {
        this._notebookOutputOption = value;
    }
    resetNotebookOutputOption() {
        this._notebookOutputOption = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get notebookOutputOptionInput() {
        return this._notebookOutputOption;
    }
    get s3KmsKeyId() {
        return this.getStringAttribute('s3_kms_key_id');
    }
    set s3KmsKeyId(value) {
        this._s3KmsKeyId = value;
    }
    resetS3KmsKeyId() {
        this._s3KmsKeyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3KmsKeyIdInput() {
        return this._s3KmsKeyId;
    }
    get s3OutputPath() {
        return this.getStringAttribute('s3_output_path');
    }
    set s3OutputPath(value) {
        this._s3OutputPath = value;
    }
    resetS3OutputPath() {
        this._s3OutputPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3OutputPathInput() {
        return this._s3OutputPath;
    }
}
exports.SagemakerDomainDefaultUserSettingsSharingSettingsOutputReference = SagemakerDomainDefaultUserSettingsSharingSettingsOutputReference;
_18 = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsSharingSettingsOutputReference[_18] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsSharingSettingsOutputReference", version: "19.15.0" };
function sagemakerDomainDefaultUserSettingsSpaceStorageSettingsDefaultEbsStorageSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        default_ebs_volume_size_in_gb: cdktf.numberToTerraform(struct.defaultEbsVolumeSizeInGb),
        maximum_ebs_volume_size_in_gb: cdktf.numberToTerraform(struct.maximumEbsVolumeSizeInGb),
    };
}
exports.sagemakerDomainDefaultUserSettingsSpaceStorageSettingsDefaultEbsStorageSettingsToTerraform = sagemakerDomainDefaultUserSettingsSpaceStorageSettingsDefaultEbsStorageSettingsToTerraform;
function sagemakerDomainDefaultUserSettingsSpaceStorageSettingsDefaultEbsStorageSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        default_ebs_volume_size_in_gb: {
            value: cdktf.numberToHclTerraform(struct.defaultEbsVolumeSizeInGb),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        maximum_ebs_volume_size_in_gb: {
            value: cdktf.numberToHclTerraform(struct.maximumEbsVolumeSizeInGb),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultUserSettingsSpaceStorageSettingsDefaultEbsStorageSettingsToHclTerraform = sagemakerDomainDefaultUserSettingsSpaceStorageSettingsDefaultEbsStorageSettingsToHclTerraform;
class SagemakerDomainDefaultUserSettingsSpaceStorageSettingsDefaultEbsStorageSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._defaultEbsVolumeSizeInGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultEbsVolumeSizeInGb = this._defaultEbsVolumeSizeInGb;
        }
        if (this._maximumEbsVolumeSizeInGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.maximumEbsVolumeSizeInGb = this._maximumEbsVolumeSizeInGb;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._defaultEbsVolumeSizeInGb = undefined;
            this._maximumEbsVolumeSizeInGb = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._defaultEbsVolumeSizeInGb = value.defaultEbsVolumeSizeInGb;
            this._maximumEbsVolumeSizeInGb = value.maximumEbsVolumeSizeInGb;
        }
    }
    get defaultEbsVolumeSizeInGb() {
        return this.getNumberAttribute('default_ebs_volume_size_in_gb');
    }
    set defaultEbsVolumeSizeInGb(value) {
        this._defaultEbsVolumeSizeInGb = value;
    }
    // Temporarily expose input value. Use with caution.
    get defaultEbsVolumeSizeInGbInput() {
        return this._defaultEbsVolumeSizeInGb;
    }
    get maximumEbsVolumeSizeInGb() {
        return this.getNumberAttribute('maximum_ebs_volume_size_in_gb');
    }
    set maximumEbsVolumeSizeInGb(value) {
        this._maximumEbsVolumeSizeInGb = value;
    }
    // Temporarily expose input value. Use with caution.
    get maximumEbsVolumeSizeInGbInput() {
        return this._maximumEbsVolumeSizeInGb;
    }
}
exports.SagemakerDomainDefaultUserSettingsSpaceStorageSettingsDefaultEbsStorageSettingsOutputReference = SagemakerDomainDefaultUserSettingsSpaceStorageSettingsDefaultEbsStorageSettingsOutputReference;
_19 = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsSpaceStorageSettingsDefaultEbsStorageSettingsOutputReference[_19] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsSpaceStorageSettingsDefaultEbsStorageSettingsOutputReference", version: "19.15.0" };
function sagemakerDomainDefaultUserSettingsSpaceStorageSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        default_ebs_storage_settings: sagemakerDomainDefaultUserSettingsSpaceStorageSettingsDefaultEbsStorageSettingsToTerraform(struct.defaultEbsStorageSettings),
    };
}
exports.sagemakerDomainDefaultUserSettingsSpaceStorageSettingsToTerraform = sagemakerDomainDefaultUserSettingsSpaceStorageSettingsToTerraform;
function sagemakerDomainDefaultUserSettingsSpaceStorageSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        default_ebs_storage_settings: {
            value: sagemakerDomainDefaultUserSettingsSpaceStorageSettingsDefaultEbsStorageSettingsToHclTerraform(struct.defaultEbsStorageSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDomainDefaultUserSettingsSpaceStorageSettingsDefaultEbsStorageSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultUserSettingsSpaceStorageSettingsToHclTerraform = sagemakerDomainDefaultUserSettingsSpaceStorageSettingsToHclTerraform;
class SagemakerDomainDefaultUserSettingsSpaceStorageSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // default_ebs_storage_settings - computed: false, optional: true, required: false
        this._defaultEbsStorageSettings = new SagemakerDomainDefaultUserSettingsSpaceStorageSettingsDefaultEbsStorageSettingsOutputReference(this, "default_ebs_storage_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._defaultEbsStorageSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultEbsStorageSettings = this._defaultEbsStorageSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._defaultEbsStorageSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._defaultEbsStorageSettings.internalValue = value.defaultEbsStorageSettings;
        }
    }
    get defaultEbsStorageSettings() {
        return this._defaultEbsStorageSettings;
    }
    putDefaultEbsStorageSettings(value) {
        this._defaultEbsStorageSettings.internalValue = value;
    }
    resetDefaultEbsStorageSettings() {
        this._defaultEbsStorageSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultEbsStorageSettingsInput() {
        return this._defaultEbsStorageSettings.internalValue;
    }
}
exports.SagemakerDomainDefaultUserSettingsSpaceStorageSettingsOutputReference = SagemakerDomainDefaultUserSettingsSpaceStorageSettingsOutputReference;
_20 = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsSpaceStorageSettingsOutputReference[_20] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsSpaceStorageSettingsOutputReference", version: "19.15.0" };
function sagemakerDomainDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        lifecycle_config_arn: cdktf.stringToTerraform(struct.lifecycleConfigArn),
        sagemaker_image_arn: cdktf.stringToTerraform(struct.sagemakerImageArn),
        sagemaker_image_version_alias: cdktf.stringToTerraform(struct.sagemakerImageVersionAlias),
        sagemaker_image_version_arn: cdktf.stringToTerraform(struct.sagemakerImageVersionArn),
    };
}
exports.sagemakerDomainDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpecToTerraform = sagemakerDomainDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpecToTerraform;
function sagemakerDomainDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpecToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        instance_type: {
            value: cdktf.stringToHclTerraform(struct.instanceType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        lifecycle_config_arn: {
            value: cdktf.stringToHclTerraform(struct.lifecycleConfigArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_arn: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_version_alias: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageVersionAlias),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_version_arn: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageVersionArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpecToHclTerraform = sagemakerDomainDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpecToHclTerraform;
class SagemakerDomainDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpecOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._instanceType !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceType = this._instanceType;
        }
        if (this._lifecycleConfigArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.lifecycleConfigArn = this._lifecycleConfigArn;
        }
        if (this._sagemakerImageArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageArn = this._sagemakerImageArn;
        }
        if (this._sagemakerImageVersionAlias !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageVersionAlias = this._sagemakerImageVersionAlias;
        }
        if (this._sagemakerImageVersionArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageVersionArn = this._sagemakerImageVersionArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._instanceType = undefined;
            this._lifecycleConfigArn = undefined;
            this._sagemakerImageArn = undefined;
            this._sagemakerImageVersionAlias = undefined;
            this._sagemakerImageVersionArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._instanceType = value.instanceType;
            this._lifecycleConfigArn = value.lifecycleConfigArn;
            this._sagemakerImageArn = value.sagemakerImageArn;
            this._sagemakerImageVersionAlias = value.sagemakerImageVersionAlias;
            this._sagemakerImageVersionArn = value.sagemakerImageVersionArn;
        }
    }
    get instanceType() {
        return this.getStringAttribute('instance_type');
    }
    set instanceType(value) {
        this._instanceType = value;
    }
    resetInstanceType() {
        this._instanceType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceTypeInput() {
        return this._instanceType;
    }
    get lifecycleConfigArn() {
        return this.getStringAttribute('lifecycle_config_arn');
    }
    set lifecycleConfigArn(value) {
        this._lifecycleConfigArn = value;
    }
    resetLifecycleConfigArn() {
        this._lifecycleConfigArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifecycleConfigArnInput() {
        return this._lifecycleConfigArn;
    }
    get sagemakerImageArn() {
        return this.getStringAttribute('sagemaker_image_arn');
    }
    set sagemakerImageArn(value) {
        this._sagemakerImageArn = value;
    }
    resetSagemakerImageArn() {
        this._sagemakerImageArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageArnInput() {
        return this._sagemakerImageArn;
    }
    get sagemakerImageVersionAlias() {
        return this.getStringAttribute('sagemaker_image_version_alias');
    }
    set sagemakerImageVersionAlias(value) {
        this._sagemakerImageVersionAlias = value;
    }
    resetSagemakerImageVersionAlias() {
        this._sagemakerImageVersionAlias = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageVersionAliasInput() {
        return this._sagemakerImageVersionAlias;
    }
    get sagemakerImageVersionArn() {
        return this.getStringAttribute('sagemaker_image_version_arn');
    }
    set sagemakerImageVersionArn(value) {
        this._sagemakerImageVersionArn = value;
    }
    resetSagemakerImageVersionArn() {
        this._sagemakerImageVersionArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageVersionArnInput() {
        return this._sagemakerImageVersionArn;
    }
}
exports.SagemakerDomainDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpecOutputReference = SagemakerDomainDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpecOutputReference;
_21 = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpecOutputReference[_21] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpecOutputReference", version: "19.15.0" };
function sagemakerDomainDefaultUserSettingsTensorBoardAppSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        default_resource_spec: sagemakerDomainDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpecToTerraform(struct.defaultResourceSpec),
    };
}
exports.sagemakerDomainDefaultUserSettingsTensorBoardAppSettingsToTerraform = sagemakerDomainDefaultUserSettingsTensorBoardAppSettingsToTerraform;
function sagemakerDomainDefaultUserSettingsTensorBoardAppSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        default_resource_spec: {
            value: sagemakerDomainDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpecToHclTerraform(struct.defaultResourceSpec),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDomainDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpecList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultUserSettingsTensorBoardAppSettingsToHclTerraform = sagemakerDomainDefaultUserSettingsTensorBoardAppSettingsToHclTerraform;
class SagemakerDomainDefaultUserSettingsTensorBoardAppSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // default_resource_spec - computed: false, optional: true, required: false
        this._defaultResourceSpec = new SagemakerDomainDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpecOutputReference(this, "default_resource_spec");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._defaultResourceSpec?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultResourceSpec = this._defaultResourceSpec?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._defaultResourceSpec.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._defaultResourceSpec.internalValue = value.defaultResourceSpec;
        }
    }
    get defaultResourceSpec() {
        return this._defaultResourceSpec;
    }
    putDefaultResourceSpec(value) {
        this._defaultResourceSpec.internalValue = value;
    }
    resetDefaultResourceSpec() {
        this._defaultResourceSpec.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultResourceSpecInput() {
        return this._defaultResourceSpec.internalValue;
    }
}
exports.SagemakerDomainDefaultUserSettingsTensorBoardAppSettingsOutputReference = SagemakerDomainDefaultUserSettingsTensorBoardAppSettingsOutputReference;
_22 = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsTensorBoardAppSettingsOutputReference[_22] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsTensorBoardAppSettingsOutputReference", version: "19.15.0" };
function sagemakerDomainDefaultUserSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        default_landing_uri: cdktf.stringToTerraform(struct.defaultLandingUri),
        execution_role: cdktf.stringToTerraform(struct.executionRole),
        security_groups: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.securityGroups),
        studio_web_portal: cdktf.stringToTerraform(struct.studioWebPortal),
        canvas_app_settings: sagemakerDomainDefaultUserSettingsCanvasAppSettingsToTerraform(struct.canvasAppSettings),
        code_editor_app_settings: sagemakerDomainDefaultUserSettingsCodeEditorAppSettingsToTerraform(struct.codeEditorAppSettings),
        custom_file_system_config: cdktf.listMapper(sagemakerDomainDefaultUserSettingsCustomFileSystemConfigToTerraform, true)(struct.customFileSystemConfig),
        custom_posix_user_config: sagemakerDomainDefaultUserSettingsCustomPosixUserConfigToTerraform(struct.customPosixUserConfig),
        jupyter_lab_app_settings: sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsToTerraform(struct.jupyterLabAppSettings),
        jupyter_server_app_settings: sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsToTerraform(struct.jupyterServerAppSettings),
        kernel_gateway_app_settings: sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsToTerraform(struct.kernelGatewayAppSettings),
        r_session_app_settings: sagemakerDomainDefaultUserSettingsRSessionAppSettingsToTerraform(struct.rSessionAppSettings),
        r_studio_server_pro_app_settings: sagemakerDomainDefaultUserSettingsRStudioServerProAppSettingsToTerraform(struct.rStudioServerProAppSettings),
        sharing_settings: sagemakerDomainDefaultUserSettingsSharingSettingsToTerraform(struct.sharingSettings),
        space_storage_settings: sagemakerDomainDefaultUserSettingsSpaceStorageSettingsToTerraform(struct.spaceStorageSettings),
        tensor_board_app_settings: sagemakerDomainDefaultUserSettingsTensorBoardAppSettingsToTerraform(struct.tensorBoardAppSettings),
    };
}
exports.sagemakerDomainDefaultUserSettingsToTerraform = sagemakerDomainDefaultUserSettingsToTerraform;
function sagemakerDomainDefaultUserSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        default_landing_uri: {
            value: cdktf.stringToHclTerraform(struct.defaultLandingUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        execution_role: {
            value: cdktf.stringToHclTerraform(struct.executionRole),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        security_groups: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.securityGroups),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        studio_web_portal: {
            value: cdktf.stringToHclTerraform(struct.studioWebPortal),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        canvas_app_settings: {
            value: sagemakerDomainDefaultUserSettingsCanvasAppSettingsToHclTerraform(struct.canvasAppSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDomainDefaultUserSettingsCanvasAppSettingsList",
        },
        code_editor_app_settings: {
            value: sagemakerDomainDefaultUserSettingsCodeEditorAppSettingsToHclTerraform(struct.codeEditorAppSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDomainDefaultUserSettingsCodeEditorAppSettingsList",
        },
        custom_file_system_config: {
            value: cdktf.listMapperHcl(sagemakerDomainDefaultUserSettingsCustomFileSystemConfigToHclTerraform, true)(struct.customFileSystemConfig),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDomainDefaultUserSettingsCustomFileSystemConfigList",
        },
        custom_posix_user_config: {
            value: sagemakerDomainDefaultUserSettingsCustomPosixUserConfigToHclTerraform(struct.customPosixUserConfig),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDomainDefaultUserSettingsCustomPosixUserConfigList",
        },
        jupyter_lab_app_settings: {
            value: sagemakerDomainDefaultUserSettingsJupyterLabAppSettingsToHclTerraform(struct.jupyterLabAppSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsList",
        },
        jupyter_server_app_settings: {
            value: sagemakerDomainDefaultUserSettingsJupyterServerAppSettingsToHclTerraform(struct.jupyterServerAppSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDomainDefaultUserSettingsJupyterServerAppSettingsList",
        },
        kernel_gateway_app_settings: {
            value: sagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsToHclTerraform(struct.kernelGatewayAppSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsList",
        },
        r_session_app_settings: {
            value: sagemakerDomainDefaultUserSettingsRSessionAppSettingsToHclTerraform(struct.rSessionAppSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDomainDefaultUserSettingsRSessionAppSettingsList",
        },
        r_studio_server_pro_app_settings: {
            value: sagemakerDomainDefaultUserSettingsRStudioServerProAppSettingsToHclTerraform(struct.rStudioServerProAppSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDomainDefaultUserSettingsRStudioServerProAppSettingsList",
        },
        sharing_settings: {
            value: sagemakerDomainDefaultUserSettingsSharingSettingsToHclTerraform(struct.sharingSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDomainDefaultUserSettingsSharingSettingsList",
        },
        space_storage_settings: {
            value: sagemakerDomainDefaultUserSettingsSpaceStorageSettingsToHclTerraform(struct.spaceStorageSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDomainDefaultUserSettingsSpaceStorageSettingsList",
        },
        tensor_board_app_settings: {
            value: sagemakerDomainDefaultUserSettingsTensorBoardAppSettingsToHclTerraform(struct.tensorBoardAppSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDomainDefaultUserSettingsTensorBoardAppSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDefaultUserSettingsToHclTerraform = sagemakerDomainDefaultUserSettingsToHclTerraform;
class SagemakerDomainDefaultUserSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // canvas_app_settings - computed: false, optional: true, required: false
        this._canvasAppSettings = new SagemakerDomainDefaultUserSettingsCanvasAppSettingsOutputReference(this, "canvas_app_settings");
        // code_editor_app_settings - computed: false, optional: true, required: false
        this._codeEditorAppSettings = new SagemakerDomainDefaultUserSettingsCodeEditorAppSettingsOutputReference(this, "code_editor_app_settings");
        // custom_file_system_config - computed: false, optional: true, required: false
        this._customFileSystemConfig = new SagemakerDomainDefaultUserSettingsCustomFileSystemConfigList(this, "custom_file_system_config", false);
        // custom_posix_user_config - computed: false, optional: true, required: false
        this._customPosixUserConfig = new SagemakerDomainDefaultUserSettingsCustomPosixUserConfigOutputReference(this, "custom_posix_user_config");
        // jupyter_lab_app_settings - computed: false, optional: true, required: false
        this._jupyterLabAppSettings = new SagemakerDomainDefaultUserSettingsJupyterLabAppSettingsOutputReference(this, "jupyter_lab_app_settings");
        // jupyter_server_app_settings - computed: false, optional: true, required: false
        this._jupyterServerAppSettings = new SagemakerDomainDefaultUserSettingsJupyterServerAppSettingsOutputReference(this, "jupyter_server_app_settings");
        // kernel_gateway_app_settings - computed: false, optional: true, required: false
        this._kernelGatewayAppSettings = new SagemakerDomainDefaultUserSettingsKernelGatewayAppSettingsOutputReference(this, "kernel_gateway_app_settings");
        // r_session_app_settings - computed: false, optional: true, required: false
        this._rSessionAppSettings = new SagemakerDomainDefaultUserSettingsRSessionAppSettingsOutputReference(this, "r_session_app_settings");
        // r_studio_server_pro_app_settings - computed: false, optional: true, required: false
        this._rStudioServerProAppSettings = new SagemakerDomainDefaultUserSettingsRStudioServerProAppSettingsOutputReference(this, "r_studio_server_pro_app_settings");
        // sharing_settings - computed: false, optional: true, required: false
        this._sharingSettings = new SagemakerDomainDefaultUserSettingsSharingSettingsOutputReference(this, "sharing_settings");
        // space_storage_settings - computed: false, optional: true, required: false
        this._spaceStorageSettings = new SagemakerDomainDefaultUserSettingsSpaceStorageSettingsOutputReference(this, "space_storage_settings");
        // tensor_board_app_settings - computed: false, optional: true, required: false
        this._tensorBoardAppSettings = new SagemakerDomainDefaultUserSettingsTensorBoardAppSettingsOutputReference(this, "tensor_board_app_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._defaultLandingUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultLandingUri = this._defaultLandingUri;
        }
        if (this._executionRole !== undefined) {
            hasAnyValues = true;
            internalValueResult.executionRole = this._executionRole;
        }
        if (this._securityGroups !== undefined) {
            hasAnyValues = true;
            internalValueResult.securityGroups = this._securityGroups;
        }
        if (this._studioWebPortal !== undefined) {
            hasAnyValues = true;
            internalValueResult.studioWebPortal = this._studioWebPortal;
        }
        if (this._canvasAppSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.canvasAppSettings = this._canvasAppSettings?.internalValue;
        }
        if (this._codeEditorAppSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.codeEditorAppSettings = this._codeEditorAppSettings?.internalValue;
        }
        if (this._customFileSystemConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customFileSystemConfig = this._customFileSystemConfig?.internalValue;
        }
        if (this._customPosixUserConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customPosixUserConfig = this._customPosixUserConfig?.internalValue;
        }
        if (this._jupyterLabAppSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.jupyterLabAppSettings = this._jupyterLabAppSettings?.internalValue;
        }
        if (this._jupyterServerAppSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.jupyterServerAppSettings = this._jupyterServerAppSettings?.internalValue;
        }
        if (this._kernelGatewayAppSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.kernelGatewayAppSettings = this._kernelGatewayAppSettings?.internalValue;
        }
        if (this._rSessionAppSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.rSessionAppSettings = this._rSessionAppSettings?.internalValue;
        }
        if (this._rStudioServerProAppSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.rStudioServerProAppSettings = this._rStudioServerProAppSettings?.internalValue;
        }
        if (this._sharingSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sharingSettings = this._sharingSettings?.internalValue;
        }
        if (this._spaceStorageSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.spaceStorageSettings = this._spaceStorageSettings?.internalValue;
        }
        if (this._tensorBoardAppSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tensorBoardAppSettings = this._tensorBoardAppSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._defaultLandingUri = undefined;
            this._executionRole = undefined;
            this._securityGroups = undefined;
            this._studioWebPortal = undefined;
            this._canvasAppSettings.internalValue = undefined;
            this._codeEditorAppSettings.internalValue = undefined;
            this._customFileSystemConfig.internalValue = undefined;
            this._customPosixUserConfig.internalValue = undefined;
            this._jupyterLabAppSettings.internalValue = undefined;
            this._jupyterServerAppSettings.internalValue = undefined;
            this._kernelGatewayAppSettings.internalValue = undefined;
            this._rSessionAppSettings.internalValue = undefined;
            this._rStudioServerProAppSettings.internalValue = undefined;
            this._sharingSettings.internalValue = undefined;
            this._spaceStorageSettings.internalValue = undefined;
            this._tensorBoardAppSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._defaultLandingUri = value.defaultLandingUri;
            this._executionRole = value.executionRole;
            this._securityGroups = value.securityGroups;
            this._studioWebPortal = value.studioWebPortal;
            this._canvasAppSettings.internalValue = value.canvasAppSettings;
            this._codeEditorAppSettings.internalValue = value.codeEditorAppSettings;
            this._customFileSystemConfig.internalValue = value.customFileSystemConfig;
            this._customPosixUserConfig.internalValue = value.customPosixUserConfig;
            this._jupyterLabAppSettings.internalValue = value.jupyterLabAppSettings;
            this._jupyterServerAppSettings.internalValue = value.jupyterServerAppSettings;
            this._kernelGatewayAppSettings.internalValue = value.kernelGatewayAppSettings;
            this._rSessionAppSettings.internalValue = value.rSessionAppSettings;
            this._rStudioServerProAppSettings.internalValue = value.rStudioServerProAppSettings;
            this._sharingSettings.internalValue = value.sharingSettings;
            this._spaceStorageSettings.internalValue = value.spaceStorageSettings;
            this._tensorBoardAppSettings.internalValue = value.tensorBoardAppSettings;
        }
    }
    get defaultLandingUri() {
        return this.getStringAttribute('default_landing_uri');
    }
    set defaultLandingUri(value) {
        this._defaultLandingUri = value;
    }
    resetDefaultLandingUri() {
        this._defaultLandingUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultLandingUriInput() {
        return this._defaultLandingUri;
    }
    get executionRole() {
        return this.getStringAttribute('execution_role');
    }
    set executionRole(value) {
        this._executionRole = value;
    }
    // Temporarily expose input value. Use with caution.
    get executionRoleInput() {
        return this._executionRole;
    }
    get securityGroups() {
        return cdktf.Fn.tolist(this.getListAttribute('security_groups'));
    }
    set securityGroups(value) {
        this._securityGroups = value;
    }
    resetSecurityGroups() {
        this._securityGroups = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityGroupsInput() {
        return this._securityGroups;
    }
    get studioWebPortal() {
        return this.getStringAttribute('studio_web_portal');
    }
    set studioWebPortal(value) {
        this._studioWebPortal = value;
    }
    resetStudioWebPortal() {
        this._studioWebPortal = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get studioWebPortalInput() {
        return this._studioWebPortal;
    }
    get canvasAppSettings() {
        return this._canvasAppSettings;
    }
    putCanvasAppSettings(value) {
        this._canvasAppSettings.internalValue = value;
    }
    resetCanvasAppSettings() {
        this._canvasAppSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get canvasAppSettingsInput() {
        return this._canvasAppSettings.internalValue;
    }
    get codeEditorAppSettings() {
        return this._codeEditorAppSettings;
    }
    putCodeEditorAppSettings(value) {
        this._codeEditorAppSettings.internalValue = value;
    }
    resetCodeEditorAppSettings() {
        this._codeEditorAppSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get codeEditorAppSettingsInput() {
        return this._codeEditorAppSettings.internalValue;
    }
    get customFileSystemConfig() {
        return this._customFileSystemConfig;
    }
    putCustomFileSystemConfig(value) {
        this._customFileSystemConfig.internalValue = value;
    }
    resetCustomFileSystemConfig() {
        this._customFileSystemConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customFileSystemConfigInput() {
        return this._customFileSystemConfig.internalValue;
    }
    get customPosixUserConfig() {
        return this._customPosixUserConfig;
    }
    putCustomPosixUserConfig(value) {
        this._customPosixUserConfig.internalValue = value;
    }
    resetCustomPosixUserConfig() {
        this._customPosixUserConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customPosixUserConfigInput() {
        return this._customPosixUserConfig.internalValue;
    }
    get jupyterLabAppSettings() {
        return this._jupyterLabAppSettings;
    }
    putJupyterLabAppSettings(value) {
        this._jupyterLabAppSettings.internalValue = value;
    }
    resetJupyterLabAppSettings() {
        this._jupyterLabAppSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jupyterLabAppSettingsInput() {
        return this._jupyterLabAppSettings.internalValue;
    }
    get jupyterServerAppSettings() {
        return this._jupyterServerAppSettings;
    }
    putJupyterServerAppSettings(value) {
        this._jupyterServerAppSettings.internalValue = value;
    }
    resetJupyterServerAppSettings() {
        this._jupyterServerAppSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jupyterServerAppSettingsInput() {
        return this._jupyterServerAppSettings.internalValue;
    }
    get kernelGatewayAppSettings() {
        return this._kernelGatewayAppSettings;
    }
    putKernelGatewayAppSettings(value) {
        this._kernelGatewayAppSettings.internalValue = value;
    }
    resetKernelGatewayAppSettings() {
        this._kernelGatewayAppSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kernelGatewayAppSettingsInput() {
        return this._kernelGatewayAppSettings.internalValue;
    }
    get rSessionAppSettings() {
        return this._rSessionAppSettings;
    }
    putRSessionAppSettings(value) {
        this._rSessionAppSettings.internalValue = value;
    }
    resetRSessionAppSettings() {
        this._rSessionAppSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rSessionAppSettingsInput() {
        return this._rSessionAppSettings.internalValue;
    }
    get rStudioServerProAppSettings() {
        return this._rStudioServerProAppSettings;
    }
    putRStudioServerProAppSettings(value) {
        this._rStudioServerProAppSettings.internalValue = value;
    }
    resetRStudioServerProAppSettings() {
        this._rStudioServerProAppSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rStudioServerProAppSettingsInput() {
        return this._rStudioServerProAppSettings.internalValue;
    }
    get sharingSettings() {
        return this._sharingSettings;
    }
    putSharingSettings(value) {
        this._sharingSettings.internalValue = value;
    }
    resetSharingSettings() {
        this._sharingSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sharingSettingsInput() {
        return this._sharingSettings.internalValue;
    }
    get spaceStorageSettings() {
        return this._spaceStorageSettings;
    }
    putSpaceStorageSettings(value) {
        this._spaceStorageSettings.internalValue = value;
    }
    resetSpaceStorageSettings() {
        this._spaceStorageSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get spaceStorageSettingsInput() {
        return this._spaceStorageSettings.internalValue;
    }
    get tensorBoardAppSettings() {
        return this._tensorBoardAppSettings;
    }
    putTensorBoardAppSettings(value) {
        this._tensorBoardAppSettings.internalValue = value;
    }
    resetTensorBoardAppSettings() {
        this._tensorBoardAppSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tensorBoardAppSettingsInput() {
        return this._tensorBoardAppSettings.internalValue;
    }
}
exports.SagemakerDomainDefaultUserSettingsOutputReference = SagemakerDomainDefaultUserSettingsOutputReference;
_23 = JSII_RTTI_SYMBOL_1;
SagemakerDomainDefaultUserSettingsOutputReference[_23] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDefaultUserSettingsOutputReference", version: "19.15.0" };
function sagemakerDomainDomainSettingsRStudioServerProDomainSettingsDefaultResourceSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        lifecycle_config_arn: cdktf.stringToTerraform(struct.lifecycleConfigArn),
        sagemaker_image_arn: cdktf.stringToTerraform(struct.sagemakerImageArn),
        sagemaker_image_version_alias: cdktf.stringToTerraform(struct.sagemakerImageVersionAlias),
        sagemaker_image_version_arn: cdktf.stringToTerraform(struct.sagemakerImageVersionArn),
    };
}
exports.sagemakerDomainDomainSettingsRStudioServerProDomainSettingsDefaultResourceSpecToTerraform = sagemakerDomainDomainSettingsRStudioServerProDomainSettingsDefaultResourceSpecToTerraform;
function sagemakerDomainDomainSettingsRStudioServerProDomainSettingsDefaultResourceSpecToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        instance_type: {
            value: cdktf.stringToHclTerraform(struct.instanceType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        lifecycle_config_arn: {
            value: cdktf.stringToHclTerraform(struct.lifecycleConfigArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_arn: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_version_alias: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageVersionAlias),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_version_arn: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageVersionArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDomainSettingsRStudioServerProDomainSettingsDefaultResourceSpecToHclTerraform = sagemakerDomainDomainSettingsRStudioServerProDomainSettingsDefaultResourceSpecToHclTerraform;
class SagemakerDomainDomainSettingsRStudioServerProDomainSettingsDefaultResourceSpecOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._instanceType !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceType = this._instanceType;
        }
        if (this._lifecycleConfigArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.lifecycleConfigArn = this._lifecycleConfigArn;
        }
        if (this._sagemakerImageArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageArn = this._sagemakerImageArn;
        }
        if (this._sagemakerImageVersionAlias !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageVersionAlias = this._sagemakerImageVersionAlias;
        }
        if (this._sagemakerImageVersionArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageVersionArn = this._sagemakerImageVersionArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._instanceType = undefined;
            this._lifecycleConfigArn = undefined;
            this._sagemakerImageArn = undefined;
            this._sagemakerImageVersionAlias = undefined;
            this._sagemakerImageVersionArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._instanceType = value.instanceType;
            this._lifecycleConfigArn = value.lifecycleConfigArn;
            this._sagemakerImageArn = value.sagemakerImageArn;
            this._sagemakerImageVersionAlias = value.sagemakerImageVersionAlias;
            this._sagemakerImageVersionArn = value.sagemakerImageVersionArn;
        }
    }
    get instanceType() {
        return this.getStringAttribute('instance_type');
    }
    set instanceType(value) {
        this._instanceType = value;
    }
    resetInstanceType() {
        this._instanceType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceTypeInput() {
        return this._instanceType;
    }
    get lifecycleConfigArn() {
        return this.getStringAttribute('lifecycle_config_arn');
    }
    set lifecycleConfigArn(value) {
        this._lifecycleConfigArn = value;
    }
    resetLifecycleConfigArn() {
        this._lifecycleConfigArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifecycleConfigArnInput() {
        return this._lifecycleConfigArn;
    }
    get sagemakerImageArn() {
        return this.getStringAttribute('sagemaker_image_arn');
    }
    set sagemakerImageArn(value) {
        this._sagemakerImageArn = value;
    }
    resetSagemakerImageArn() {
        this._sagemakerImageArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageArnInput() {
        return this._sagemakerImageArn;
    }
    get sagemakerImageVersionAlias() {
        return this.getStringAttribute('sagemaker_image_version_alias');
    }
    set sagemakerImageVersionAlias(value) {
        this._sagemakerImageVersionAlias = value;
    }
    resetSagemakerImageVersionAlias() {
        this._sagemakerImageVersionAlias = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageVersionAliasInput() {
        return this._sagemakerImageVersionAlias;
    }
    get sagemakerImageVersionArn() {
        return this.getStringAttribute('sagemaker_image_version_arn');
    }
    set sagemakerImageVersionArn(value) {
        this._sagemakerImageVersionArn = value;
    }
    resetSagemakerImageVersionArn() {
        this._sagemakerImageVersionArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageVersionArnInput() {
        return this._sagemakerImageVersionArn;
    }
}
exports.SagemakerDomainDomainSettingsRStudioServerProDomainSettingsDefaultResourceSpecOutputReference = SagemakerDomainDomainSettingsRStudioServerProDomainSettingsDefaultResourceSpecOutputReference;
_24 = JSII_RTTI_SYMBOL_1;
SagemakerDomainDomainSettingsRStudioServerProDomainSettingsDefaultResourceSpecOutputReference[_24] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDomainSettingsRStudioServerProDomainSettingsDefaultResourceSpecOutputReference", version: "19.15.0" };
function sagemakerDomainDomainSettingsRStudioServerProDomainSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        domain_execution_role_arn: cdktf.stringToTerraform(struct.domainExecutionRoleArn),
        r_studio_connect_url: cdktf.stringToTerraform(struct.rStudioConnectUrl),
        r_studio_package_manager_url: cdktf.stringToTerraform(struct.rStudioPackageManagerUrl),
        default_resource_spec: sagemakerDomainDomainSettingsRStudioServerProDomainSettingsDefaultResourceSpecToTerraform(struct.defaultResourceSpec),
    };
}
exports.sagemakerDomainDomainSettingsRStudioServerProDomainSettingsToTerraform = sagemakerDomainDomainSettingsRStudioServerProDomainSettingsToTerraform;
function sagemakerDomainDomainSettingsRStudioServerProDomainSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        domain_execution_role_arn: {
            value: cdktf.stringToHclTerraform(struct.domainExecutionRoleArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        r_studio_connect_url: {
            value: cdktf.stringToHclTerraform(struct.rStudioConnectUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        r_studio_package_manager_url: {
            value: cdktf.stringToHclTerraform(struct.rStudioPackageManagerUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        default_resource_spec: {
            value: sagemakerDomainDomainSettingsRStudioServerProDomainSettingsDefaultResourceSpecToHclTerraform(struct.defaultResourceSpec),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDomainDomainSettingsRStudioServerProDomainSettingsDefaultResourceSpecList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDomainSettingsRStudioServerProDomainSettingsToHclTerraform = sagemakerDomainDomainSettingsRStudioServerProDomainSettingsToHclTerraform;
class SagemakerDomainDomainSettingsRStudioServerProDomainSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // default_resource_spec - computed: false, optional: true, required: false
        this._defaultResourceSpec = new SagemakerDomainDomainSettingsRStudioServerProDomainSettingsDefaultResourceSpecOutputReference(this, "default_resource_spec");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._domainExecutionRoleArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.domainExecutionRoleArn = this._domainExecutionRoleArn;
        }
        if (this._rStudioConnectUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.rStudioConnectUrl = this._rStudioConnectUrl;
        }
        if (this._rStudioPackageManagerUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.rStudioPackageManagerUrl = this._rStudioPackageManagerUrl;
        }
        if (this._defaultResourceSpec?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultResourceSpec = this._defaultResourceSpec?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._domainExecutionRoleArn = undefined;
            this._rStudioConnectUrl = undefined;
            this._rStudioPackageManagerUrl = undefined;
            this._defaultResourceSpec.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._domainExecutionRoleArn = value.domainExecutionRoleArn;
            this._rStudioConnectUrl = value.rStudioConnectUrl;
            this._rStudioPackageManagerUrl = value.rStudioPackageManagerUrl;
            this._defaultResourceSpec.internalValue = value.defaultResourceSpec;
        }
    }
    get domainExecutionRoleArn() {
        return this.getStringAttribute('domain_execution_role_arn');
    }
    set domainExecutionRoleArn(value) {
        this._domainExecutionRoleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get domainExecutionRoleArnInput() {
        return this._domainExecutionRoleArn;
    }
    get rStudioConnectUrl() {
        return this.getStringAttribute('r_studio_connect_url');
    }
    set rStudioConnectUrl(value) {
        this._rStudioConnectUrl = value;
    }
    resetRStudioConnectUrl() {
        this._rStudioConnectUrl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rStudioConnectUrlInput() {
        return this._rStudioConnectUrl;
    }
    get rStudioPackageManagerUrl() {
        return this.getStringAttribute('r_studio_package_manager_url');
    }
    set rStudioPackageManagerUrl(value) {
        this._rStudioPackageManagerUrl = value;
    }
    resetRStudioPackageManagerUrl() {
        this._rStudioPackageManagerUrl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rStudioPackageManagerUrlInput() {
        return this._rStudioPackageManagerUrl;
    }
    get defaultResourceSpec() {
        return this._defaultResourceSpec;
    }
    putDefaultResourceSpec(value) {
        this._defaultResourceSpec.internalValue = value;
    }
    resetDefaultResourceSpec() {
        this._defaultResourceSpec.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultResourceSpecInput() {
        return this._defaultResourceSpec.internalValue;
    }
}
exports.SagemakerDomainDomainSettingsRStudioServerProDomainSettingsOutputReference = SagemakerDomainDomainSettingsRStudioServerProDomainSettingsOutputReference;
_25 = JSII_RTTI_SYMBOL_1;
SagemakerDomainDomainSettingsRStudioServerProDomainSettingsOutputReference[_25] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDomainSettingsRStudioServerProDomainSettingsOutputReference", version: "19.15.0" };
function sagemakerDomainDomainSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        execution_role_identity_config: cdktf.stringToTerraform(struct.executionRoleIdentityConfig),
        security_group_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.securityGroupIds),
        r_studio_server_pro_domain_settings: sagemakerDomainDomainSettingsRStudioServerProDomainSettingsToTerraform(struct.rStudioServerProDomainSettings),
    };
}
exports.sagemakerDomainDomainSettingsToTerraform = sagemakerDomainDomainSettingsToTerraform;
function sagemakerDomainDomainSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        execution_role_identity_config: {
            value: cdktf.stringToHclTerraform(struct.executionRoleIdentityConfig),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        security_group_ids: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.securityGroupIds),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        r_studio_server_pro_domain_settings: {
            value: sagemakerDomainDomainSettingsRStudioServerProDomainSettingsToHclTerraform(struct.rStudioServerProDomainSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDomainDomainSettingsRStudioServerProDomainSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainDomainSettingsToHclTerraform = sagemakerDomainDomainSettingsToHclTerraform;
class SagemakerDomainDomainSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // r_studio_server_pro_domain_settings - computed: false, optional: true, required: false
        this._rStudioServerProDomainSettings = new SagemakerDomainDomainSettingsRStudioServerProDomainSettingsOutputReference(this, "r_studio_server_pro_domain_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._executionRoleIdentityConfig !== undefined) {
            hasAnyValues = true;
            internalValueResult.executionRoleIdentityConfig = this._executionRoleIdentityConfig;
        }
        if (this._securityGroupIds !== undefined) {
            hasAnyValues = true;
            internalValueResult.securityGroupIds = this._securityGroupIds;
        }
        if (this._rStudioServerProDomainSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.rStudioServerProDomainSettings = this._rStudioServerProDomainSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._executionRoleIdentityConfig = undefined;
            this._securityGroupIds = undefined;
            this._rStudioServerProDomainSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._executionRoleIdentityConfig = value.executionRoleIdentityConfig;
            this._securityGroupIds = value.securityGroupIds;
            this._rStudioServerProDomainSettings.internalValue = value.rStudioServerProDomainSettings;
        }
    }
    get executionRoleIdentityConfig() {
        return this.getStringAttribute('execution_role_identity_config');
    }
    set executionRoleIdentityConfig(value) {
        this._executionRoleIdentityConfig = value;
    }
    resetExecutionRoleIdentityConfig() {
        this._executionRoleIdentityConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get executionRoleIdentityConfigInput() {
        return this._executionRoleIdentityConfig;
    }
    get securityGroupIds() {
        return cdktf.Fn.tolist(this.getListAttribute('security_group_ids'));
    }
    set securityGroupIds(value) {
        this._securityGroupIds = value;
    }
    resetSecurityGroupIds() {
        this._securityGroupIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityGroupIdsInput() {
        return this._securityGroupIds;
    }
    get rStudioServerProDomainSettings() {
        return this._rStudioServerProDomainSettings;
    }
    putRStudioServerProDomainSettings(value) {
        this._rStudioServerProDomainSettings.internalValue = value;
    }
    resetRStudioServerProDomainSettings() {
        this._rStudioServerProDomainSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rStudioServerProDomainSettingsInput() {
        return this._rStudioServerProDomainSettings.internalValue;
    }
}
exports.SagemakerDomainDomainSettingsOutputReference = SagemakerDomainDomainSettingsOutputReference;
_26 = JSII_RTTI_SYMBOL_1;
SagemakerDomainDomainSettingsOutputReference[_26] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainDomainSettingsOutputReference", version: "19.15.0" };
function sagemakerDomainRetentionPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        home_efs_file_system: cdktf.stringToTerraform(struct.homeEfsFileSystem),
    };
}
exports.sagemakerDomainRetentionPolicyToTerraform = sagemakerDomainRetentionPolicyToTerraform;
function sagemakerDomainRetentionPolicyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        home_efs_file_system: {
            value: cdktf.stringToHclTerraform(struct.homeEfsFileSystem),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDomainRetentionPolicyToHclTerraform = sagemakerDomainRetentionPolicyToHclTerraform;
class SagemakerDomainRetentionPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._homeEfsFileSystem !== undefined) {
            hasAnyValues = true;
            internalValueResult.homeEfsFileSystem = this._homeEfsFileSystem;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._homeEfsFileSystem = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._homeEfsFileSystem = value.homeEfsFileSystem;
        }
    }
    get homeEfsFileSystem() {
        return this.getStringAttribute('home_efs_file_system');
    }
    set homeEfsFileSystem(value) {
        this._homeEfsFileSystem = value;
    }
    resetHomeEfsFileSystem() {
        this._homeEfsFileSystem = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get homeEfsFileSystemInput() {
        return this._homeEfsFileSystem;
    }
}
exports.SagemakerDomainRetentionPolicyOutputReference = SagemakerDomainRetentionPolicyOutputReference;
_27 = JSII_RTTI_SYMBOL_1;
SagemakerDomainRetentionPolicyOutputReference[_27] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomainRetentionPolicyOutputReference", version: "19.15.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/sagemaker_domain aws_sagemaker_domain}
*/
class SagemakerDomain extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a SagemakerDomain resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the SagemakerDomain to import
    * @param importFromId The id of the existing SagemakerDomain that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/sagemaker_domain#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the SagemakerDomain to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_sagemaker_domain", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/sagemaker_domain aws_sagemaker_domain} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SagemakerDomainConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_sagemaker_domain',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // default_space_settings - computed: false, optional: true, required: false
        this._defaultSpaceSettings = new SagemakerDomainDefaultSpaceSettingsOutputReference(this, "default_space_settings");
        // default_user_settings - computed: false, optional: false, required: true
        this._defaultUserSettings = new SagemakerDomainDefaultUserSettingsOutputReference(this, "default_user_settings");
        // domain_settings - computed: false, optional: true, required: false
        this._domainSettings = new SagemakerDomainDomainSettingsOutputReference(this, "domain_settings");
        // retention_policy - computed: false, optional: true, required: false
        this._retentionPolicy = new SagemakerDomainRetentionPolicyOutputReference(this, "retention_policy");
        this._appNetworkAccessType = config.appNetworkAccessType;
        this._appSecurityGroupManagement = config.appSecurityGroupManagement;
        this._authMode = config.authMode;
        this._domainName = config.domainName;
        this._id = config.id;
        this._kmsKeyId = config.kmsKeyId;
        this._subnetIds = config.subnetIds;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._vpcId = config.vpcId;
        this._defaultSpaceSettings.internalValue = config.defaultSpaceSettings;
        this._defaultUserSettings.internalValue = config.defaultUserSettings;
        this._domainSettings.internalValue = config.domainSettings;
        this._retentionPolicy.internalValue = config.retentionPolicy;
    }
    get appNetworkAccessType() {
        return this.getStringAttribute('app_network_access_type');
    }
    set appNetworkAccessType(value) {
        this._appNetworkAccessType = value;
    }
    resetAppNetworkAccessType() {
        this._appNetworkAccessType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get appNetworkAccessTypeInput() {
        return this._appNetworkAccessType;
    }
    get appSecurityGroupManagement() {
        return this.getStringAttribute('app_security_group_management');
    }
    set appSecurityGroupManagement(value) {
        this._appSecurityGroupManagement = value;
    }
    resetAppSecurityGroupManagement() {
        this._appSecurityGroupManagement = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get appSecurityGroupManagementInput() {
        return this._appSecurityGroupManagement;
    }
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get authMode() {
        return this.getStringAttribute('auth_mode');
    }
    set authMode(value) {
        this._authMode = value;
    }
    // Temporarily expose input value. Use with caution.
    get authModeInput() {
        return this._authMode;
    }
    get domainName() {
        return this.getStringAttribute('domain_name');
    }
    set domainName(value) {
        this._domainName = value;
    }
    // Temporarily expose input value. Use with caution.
    get domainNameInput() {
        return this._domainName;
    }
    // home_efs_file_system_id - computed: true, optional: false, required: false
    get homeEfsFileSystemId() {
        return this.getStringAttribute('home_efs_file_system_id');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get kmsKeyId() {
        return this.getStringAttribute('kms_key_id');
    }
    set kmsKeyId(value) {
        this._kmsKeyId = value;
    }
    resetKmsKeyId() {
        this._kmsKeyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyIdInput() {
        return this._kmsKeyId;
    }
    // security_group_id_for_domain_boundary - computed: true, optional: false, required: false
    get securityGroupIdForDomainBoundary() {
        return this.getStringAttribute('security_group_id_for_domain_boundary');
    }
    // single_sign_on_application_arn - computed: true, optional: false, required: false
    get singleSignOnApplicationArn() {
        return this.getStringAttribute('single_sign_on_application_arn');
    }
    // single_sign_on_managed_application_instance_id - computed: true, optional: false, required: false
    get singleSignOnManagedApplicationInstanceId() {
        return this.getStringAttribute('single_sign_on_managed_application_instance_id');
    }
    get subnetIds() {
        return cdktf.Fn.tolist(this.getListAttribute('subnet_ids'));
    }
    set subnetIds(value) {
        this._subnetIds = value;
    }
    // Temporarily expose input value. Use with caution.
    get subnetIdsInput() {
        return this._subnetIds;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    // url - computed: true, optional: false, required: false
    get url() {
        return this.getStringAttribute('url');
    }
    get vpcId() {
        return this.getStringAttribute('vpc_id');
    }
    set vpcId(value) {
        this._vpcId = value;
    }
    // Temporarily expose input value. Use with caution.
    get vpcIdInput() {
        return this._vpcId;
    }
    get defaultSpaceSettings() {
        return this._defaultSpaceSettings;
    }
    putDefaultSpaceSettings(value) {
        this._defaultSpaceSettings.internalValue = value;
    }
    resetDefaultSpaceSettings() {
        this._defaultSpaceSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultSpaceSettingsInput() {
        return this._defaultSpaceSettings.internalValue;
    }
    get defaultUserSettings() {
        return this._defaultUserSettings;
    }
    putDefaultUserSettings(value) {
        this._defaultUserSettings.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get defaultUserSettingsInput() {
        return this._defaultUserSettings.internalValue;
    }
    get domainSettings() {
        return this._domainSettings;
    }
    putDomainSettings(value) {
        this._domainSettings.internalValue = value;
    }
    resetDomainSettings() {
        this._domainSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get domainSettingsInput() {
        return this._domainSettings.internalValue;
    }
    get retentionPolicy() {
        return this._retentionPolicy;
    }
    putRetentionPolicy(value) {
        this._retentionPolicy.internalValue = value;
    }
    resetRetentionPolicy() {
        this._retentionPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retentionPolicyInput() {
        return this._retentionPolicy.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            app_network_access_type: cdktf.stringToTerraform(this._appNetworkAccessType),
            app_security_group_management: cdktf.stringToTerraform(this._appSecurityGroupManagement),
            auth_mode: cdktf.stringToTerraform(this._authMode),
            domain_name: cdktf.stringToTerraform(this._domainName),
            id: cdktf.stringToTerraform(this._id),
            kms_key_id: cdktf.stringToTerraform(this._kmsKeyId),
            subnet_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(this._subnetIds),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            vpc_id: cdktf.stringToTerraform(this._vpcId),
            default_space_settings: sagemakerDomainDefaultSpaceSettingsToTerraform(this._defaultSpaceSettings.internalValue),
            default_user_settings: sagemakerDomainDefaultUserSettingsToTerraform(this._defaultUserSettings.internalValue),
            domain_settings: sagemakerDomainDomainSettingsToTerraform(this._domainSettings.internalValue),
            retention_policy: sagemakerDomainRetentionPolicyToTerraform(this._retentionPolicy.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            app_network_access_type: {
                value: cdktf.stringToHclTerraform(this._appNetworkAccessType),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            app_security_group_management: {
                value: cdktf.stringToHclTerraform(this._appSecurityGroupManagement),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            auth_mode: {
                value: cdktf.stringToHclTerraform(this._authMode),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            domain_name: {
                value: cdktf.stringToHclTerraform(this._domainName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            kms_key_id: {
                value: cdktf.stringToHclTerraform(this._kmsKeyId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            subnet_ids: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._subnetIds),
                isBlock: false,
                type: "set",
                storageClassType: "stringList",
            },
            tags: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tags),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            tags_all: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tagsAll),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            vpc_id: {
                value: cdktf.stringToHclTerraform(this._vpcId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            default_space_settings: {
                value: sagemakerDomainDefaultSpaceSettingsToHclTerraform(this._defaultSpaceSettings.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "SagemakerDomainDefaultSpaceSettingsList",
            },
            default_user_settings: {
                value: sagemakerDomainDefaultUserSettingsToHclTerraform(this._defaultUserSettings.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "SagemakerDomainDefaultUserSettingsList",
            },
            domain_settings: {
                value: sagemakerDomainDomainSettingsToHclTerraform(this._domainSettings.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "SagemakerDomainDomainSettingsList",
            },
            retention_policy: {
                value: sagemakerDomainRetentionPolicyToHclTerraform(this._retentionPolicy.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "SagemakerDomainRetentionPolicyList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.SagemakerDomain = SagemakerDomain;
_28 = JSII_RTTI_SYMBOL_1;
SagemakerDomain[_28] = { fqn: "@cdktf/provider-aws.sagemakerDomain.SagemakerDomain", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
SagemakerDomain.tfResourceType = "aws_sagemaker_domain";
//# sourceMappingURL=data:application/json;base64,