"use strict";
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkfirewallLoggingConfiguration = exports.NetworkfirewallLoggingConfigurationLoggingConfigurationOutputReference = exports.networkfirewallLoggingConfigurationLoggingConfigurationToHclTerraform = exports.networkfirewallLoggingConfigurationLoggingConfigurationToTerraform = exports.NetworkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigList = exports.NetworkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigOutputReference = exports.networkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigToHclTerraform = exports.networkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function networkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        log_destination: cdktf.hashMapper(cdktf.stringToTerraform)(struct.logDestination),
        log_destination_type: cdktf.stringToTerraform(struct.logDestinationType),
        log_type: cdktf.stringToTerraform(struct.logType),
    };
}
exports.networkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigToTerraform = networkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigToTerraform;
function networkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        log_destination: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.logDestination),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        log_destination_type: {
            value: cdktf.stringToHclTerraform(struct.logDestinationType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        log_type: {
            value: cdktf.stringToHclTerraform(struct.logType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.networkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigToHclTerraform = networkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigToHclTerraform;
class NetworkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._logDestination !== undefined) {
            hasAnyValues = true;
            internalValueResult.logDestination = this._logDestination;
        }
        if (this._logDestinationType !== undefined) {
            hasAnyValues = true;
            internalValueResult.logDestinationType = this._logDestinationType;
        }
        if (this._logType !== undefined) {
            hasAnyValues = true;
            internalValueResult.logType = this._logType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._logDestination = undefined;
            this._logDestinationType = undefined;
            this._logType = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._logDestination = value.logDestination;
            this._logDestinationType = value.logDestinationType;
            this._logType = value.logType;
        }
    }
    get logDestination() {
        return this.getStringMapAttribute('log_destination');
    }
    set logDestination(value) {
        this._logDestination = value;
    }
    // Temporarily expose input value. Use with caution.
    get logDestinationInput() {
        return this._logDestination;
    }
    get logDestinationType() {
        return this.getStringAttribute('log_destination_type');
    }
    set logDestinationType(value) {
        this._logDestinationType = value;
    }
    // Temporarily expose input value. Use with caution.
    get logDestinationTypeInput() {
        return this._logDestinationType;
    }
    get logType() {
        return this.getStringAttribute('log_type');
    }
    set logType(value) {
        this._logType = value;
    }
    // Temporarily expose input value. Use with caution.
    get logTypeInput() {
        return this._logType;
    }
}
exports.NetworkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigOutputReference = NetworkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigOutputReference;
_a = JSII_RTTI_SYMBOL_1;
NetworkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigOutputReference[_a] = { fqn: "@cdktf/provider-aws.networkfirewallLoggingConfiguration.NetworkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigOutputReference", version: "19.15.0" };
class NetworkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new NetworkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.NetworkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigList = NetworkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigList;
_b = JSII_RTTI_SYMBOL_1;
NetworkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigList[_b] = { fqn: "@cdktf/provider-aws.networkfirewallLoggingConfiguration.NetworkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigList", version: "19.15.0" };
function networkfirewallLoggingConfigurationLoggingConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        log_destination_config: cdktf.listMapper(networkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigToTerraform, true)(struct.logDestinationConfig),
    };
}
exports.networkfirewallLoggingConfigurationLoggingConfigurationToTerraform = networkfirewallLoggingConfigurationLoggingConfigurationToTerraform;
function networkfirewallLoggingConfigurationLoggingConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        log_destination_config: {
            value: cdktf.listMapperHcl(networkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigToHclTerraform, true)(struct.logDestinationConfig),
            isBlock: true,
            type: "set",
            storageClassType: "NetworkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.networkfirewallLoggingConfigurationLoggingConfigurationToHclTerraform = networkfirewallLoggingConfigurationLoggingConfigurationToHclTerraform;
class NetworkfirewallLoggingConfigurationLoggingConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // log_destination_config - computed: false, optional: false, required: true
        this._logDestinationConfig = new NetworkfirewallLoggingConfigurationLoggingConfigurationLogDestinationConfigList(this, "log_destination_config", true);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._logDestinationConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.logDestinationConfig = this._logDestinationConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._logDestinationConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._logDestinationConfig.internalValue = value.logDestinationConfig;
        }
    }
    get logDestinationConfig() {
        return this._logDestinationConfig;
    }
    putLogDestinationConfig(value) {
        this._logDestinationConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get logDestinationConfigInput() {
        return this._logDestinationConfig.internalValue;
    }
}
exports.NetworkfirewallLoggingConfigurationLoggingConfigurationOutputReference = NetworkfirewallLoggingConfigurationLoggingConfigurationOutputReference;
_c = JSII_RTTI_SYMBOL_1;
NetworkfirewallLoggingConfigurationLoggingConfigurationOutputReference[_c] = { fqn: "@cdktf/provider-aws.networkfirewallLoggingConfiguration.NetworkfirewallLoggingConfigurationLoggingConfigurationOutputReference", version: "19.15.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/networkfirewall_logging_configuration aws_networkfirewall_logging_configuration}
*/
class NetworkfirewallLoggingConfiguration extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a NetworkfirewallLoggingConfiguration resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the NetworkfirewallLoggingConfiguration to import
    * @param importFromId The id of the existing NetworkfirewallLoggingConfiguration that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/networkfirewall_logging_configuration#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the NetworkfirewallLoggingConfiguration to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_networkfirewall_logging_configuration", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/networkfirewall_logging_configuration aws_networkfirewall_logging_configuration} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options NetworkfirewallLoggingConfigurationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_networkfirewall_logging_configuration',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // logging_configuration - computed: false, optional: false, required: true
        this._loggingConfiguration = new NetworkfirewallLoggingConfigurationLoggingConfigurationOutputReference(this, "logging_configuration");
        this._firewallArn = config.firewallArn;
        this._id = config.id;
        this._loggingConfiguration.internalValue = config.loggingConfiguration;
    }
    get firewallArn() {
        return this.getStringAttribute('firewall_arn');
    }
    set firewallArn(value) {
        this._firewallArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get firewallArnInput() {
        return this._firewallArn;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get loggingConfiguration() {
        return this._loggingConfiguration;
    }
    putLoggingConfiguration(value) {
        this._loggingConfiguration.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get loggingConfigurationInput() {
        return this._loggingConfiguration.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            firewall_arn: cdktf.stringToTerraform(this._firewallArn),
            id: cdktf.stringToTerraform(this._id),
            logging_configuration: networkfirewallLoggingConfigurationLoggingConfigurationToTerraform(this._loggingConfiguration.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            firewall_arn: {
                value: cdktf.stringToHclTerraform(this._firewallArn),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            logging_configuration: {
                value: networkfirewallLoggingConfigurationLoggingConfigurationToHclTerraform(this._loggingConfiguration.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "NetworkfirewallLoggingConfigurationLoggingConfigurationList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.NetworkfirewallLoggingConfiguration = NetworkfirewallLoggingConfiguration;
_d = JSII_RTTI_SYMBOL_1;
NetworkfirewallLoggingConfiguration[_d] = { fqn: "@cdktf/provider-aws.networkfirewallLoggingConfiguration.NetworkfirewallLoggingConfiguration", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
NetworkfirewallLoggingConfiguration.tfResourceType = "aws_networkfirewall_logging_configuration";
//# sourceMappingURL=data:application/json;base64,