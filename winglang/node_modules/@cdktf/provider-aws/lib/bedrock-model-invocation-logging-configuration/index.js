"use strict";
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BedrockModelInvocationLoggingConfiguration = exports.BedrockModelInvocationLoggingConfigurationLoggingConfigOutputReference = exports.bedrockModelInvocationLoggingConfigurationLoggingConfigToHclTerraform = exports.bedrockModelInvocationLoggingConfigurationLoggingConfigToTerraform = exports.BedrockModelInvocationLoggingConfigurationLoggingConfigS3ConfigOutputReference = exports.bedrockModelInvocationLoggingConfigurationLoggingConfigS3ConfigToHclTerraform = exports.bedrockModelInvocationLoggingConfigurationLoggingConfigS3ConfigToTerraform = exports.BedrockModelInvocationLoggingConfigurationLoggingConfigCloudwatchConfigOutputReference = exports.bedrockModelInvocationLoggingConfigurationLoggingConfigCloudwatchConfigToHclTerraform = exports.bedrockModelInvocationLoggingConfigurationLoggingConfigCloudwatchConfigToTerraform = exports.BedrockModelInvocationLoggingConfigurationLoggingConfigCloudwatchConfigLargeDataDeliveryS3ConfigOutputReference = exports.bedrockModelInvocationLoggingConfigurationLoggingConfigCloudwatchConfigLargeDataDeliveryS3ConfigToHclTerraform = exports.bedrockModelInvocationLoggingConfigurationLoggingConfigCloudwatchConfigLargeDataDeliveryS3ConfigToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function bedrockModelInvocationLoggingConfigurationLoggingConfigCloudwatchConfigLargeDataDeliveryS3ConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        key_prefix: cdktf.stringToTerraform(struct.keyPrefix),
    };
}
exports.bedrockModelInvocationLoggingConfigurationLoggingConfigCloudwatchConfigLargeDataDeliveryS3ConfigToTerraform = bedrockModelInvocationLoggingConfigurationLoggingConfigCloudwatchConfigLargeDataDeliveryS3ConfigToTerraform;
function bedrockModelInvocationLoggingConfigurationLoggingConfigCloudwatchConfigLargeDataDeliveryS3ConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bucket_name: {
            value: cdktf.stringToHclTerraform(struct.bucketName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        key_prefix: {
            value: cdktf.stringToHclTerraform(struct.keyPrefix),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.bedrockModelInvocationLoggingConfigurationLoggingConfigCloudwatchConfigLargeDataDeliveryS3ConfigToHclTerraform = bedrockModelInvocationLoggingConfigurationLoggingConfigCloudwatchConfigLargeDataDeliveryS3ConfigToHclTerraform;
class BedrockModelInvocationLoggingConfigurationLoggingConfigCloudwatchConfigLargeDataDeliveryS3ConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketName !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketName = this._bucketName;
        }
        if (this._keyPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.keyPrefix = this._keyPrefix;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._bucketName = undefined;
            this._keyPrefix = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._bucketName = value.bucketName;
            this._keyPrefix = value.keyPrefix;
        }
    }
    get bucketName() {
        return this.getStringAttribute('bucket_name');
    }
    set bucketName(value) {
        this._bucketName = value;
    }
    resetBucketName() {
        this._bucketName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketNameInput() {
        return this._bucketName;
    }
    get keyPrefix() {
        return this.getStringAttribute('key_prefix');
    }
    set keyPrefix(value) {
        this._keyPrefix = value;
    }
    resetKeyPrefix() {
        this._keyPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyPrefixInput() {
        return this._keyPrefix;
    }
}
exports.BedrockModelInvocationLoggingConfigurationLoggingConfigCloudwatchConfigLargeDataDeliveryS3ConfigOutputReference = BedrockModelInvocationLoggingConfigurationLoggingConfigCloudwatchConfigLargeDataDeliveryS3ConfigOutputReference;
_a = JSII_RTTI_SYMBOL_1;
BedrockModelInvocationLoggingConfigurationLoggingConfigCloudwatchConfigLargeDataDeliveryS3ConfigOutputReference[_a] = { fqn: "@cdktf/provider-aws.bedrockModelInvocationLoggingConfiguration.BedrockModelInvocationLoggingConfigurationLoggingConfigCloudwatchConfigLargeDataDeliveryS3ConfigOutputReference", version: "19.15.0" };
function bedrockModelInvocationLoggingConfigurationLoggingConfigCloudwatchConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        large_data_delivery_s3_config: bedrockModelInvocationLoggingConfigurationLoggingConfigCloudwatchConfigLargeDataDeliveryS3ConfigToTerraform(struct.largeDataDeliveryS3Config),
    };
}
exports.bedrockModelInvocationLoggingConfigurationLoggingConfigCloudwatchConfigToTerraform = bedrockModelInvocationLoggingConfigurationLoggingConfigCloudwatchConfigToTerraform;
function bedrockModelInvocationLoggingConfigurationLoggingConfigCloudwatchConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        log_group_name: {
            value: cdktf.stringToHclTerraform(struct.logGroupName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        role_arn: {
            value: cdktf.stringToHclTerraform(struct.roleArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        large_data_delivery_s3_config: {
            value: bedrockModelInvocationLoggingConfigurationLoggingConfigCloudwatchConfigLargeDataDeliveryS3ConfigToHclTerraform(struct.largeDataDeliveryS3Config),
            isBlock: true,
            type: "struct",
            storageClassType: "BedrockModelInvocationLoggingConfigurationLoggingConfigCloudwatchConfigLargeDataDeliveryS3Config",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.bedrockModelInvocationLoggingConfigurationLoggingConfigCloudwatchConfigToHclTerraform = bedrockModelInvocationLoggingConfigurationLoggingConfigCloudwatchConfigToHclTerraform;
class BedrockModelInvocationLoggingConfigurationLoggingConfigCloudwatchConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
        // large_data_delivery_s3_config - computed: false, optional: true, required: false
        this._largeDataDeliveryS3Config = new BedrockModelInvocationLoggingConfigurationLoggingConfigCloudwatchConfigLargeDataDeliveryS3ConfigOutputReference(this, "large_data_delivery_s3_config");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._logGroupName !== undefined) {
            hasAnyValues = true;
            internalValueResult.logGroupName = this._logGroupName;
        }
        if (this._roleArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.roleArn = this._roleArn;
        }
        if (this._largeDataDeliveryS3Config?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.largeDataDeliveryS3Config = this._largeDataDeliveryS3Config?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._logGroupName = undefined;
            this._roleArn = undefined;
            this._largeDataDeliveryS3Config.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._logGroupName = value.logGroupName;
            this._roleArn = value.roleArn;
            this._largeDataDeliveryS3Config.internalValue = value.largeDataDeliveryS3Config;
        }
    }
    get logGroupName() {
        return this.getStringAttribute('log_group_name');
    }
    set logGroupName(value) {
        this._logGroupName = value;
    }
    resetLogGroupName() {
        this._logGroupName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logGroupNameInput() {
        return this._logGroupName;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    resetRoleArn() {
        this._roleArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get largeDataDeliveryS3Config() {
        return this._largeDataDeliveryS3Config;
    }
    putLargeDataDeliveryS3Config(value) {
        this._largeDataDeliveryS3Config.internalValue = value;
    }
    resetLargeDataDeliveryS3Config() {
        this._largeDataDeliveryS3Config.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get largeDataDeliveryS3ConfigInput() {
        return this._largeDataDeliveryS3Config.internalValue;
    }
}
exports.BedrockModelInvocationLoggingConfigurationLoggingConfigCloudwatchConfigOutputReference = BedrockModelInvocationLoggingConfigurationLoggingConfigCloudwatchConfigOutputReference;
_b = JSII_RTTI_SYMBOL_1;
BedrockModelInvocationLoggingConfigurationLoggingConfigCloudwatchConfigOutputReference[_b] = { fqn: "@cdktf/provider-aws.bedrockModelInvocationLoggingConfiguration.BedrockModelInvocationLoggingConfigurationLoggingConfigCloudwatchConfigOutputReference", version: "19.15.0" };
function bedrockModelInvocationLoggingConfigurationLoggingConfigS3ConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        key_prefix: cdktf.stringToTerraform(struct.keyPrefix),
    };
}
exports.bedrockModelInvocationLoggingConfigurationLoggingConfigS3ConfigToTerraform = bedrockModelInvocationLoggingConfigurationLoggingConfigS3ConfigToTerraform;
function bedrockModelInvocationLoggingConfigurationLoggingConfigS3ConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bucket_name: {
            value: cdktf.stringToHclTerraform(struct.bucketName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        key_prefix: {
            value: cdktf.stringToHclTerraform(struct.keyPrefix),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.bedrockModelInvocationLoggingConfigurationLoggingConfigS3ConfigToHclTerraform = bedrockModelInvocationLoggingConfigurationLoggingConfigS3ConfigToHclTerraform;
class BedrockModelInvocationLoggingConfigurationLoggingConfigS3ConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketName !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketName = this._bucketName;
        }
        if (this._keyPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.keyPrefix = this._keyPrefix;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._bucketName = undefined;
            this._keyPrefix = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._bucketName = value.bucketName;
            this._keyPrefix = value.keyPrefix;
        }
    }
    get bucketName() {
        return this.getStringAttribute('bucket_name');
    }
    set bucketName(value) {
        this._bucketName = value;
    }
    resetBucketName() {
        this._bucketName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketNameInput() {
        return this._bucketName;
    }
    get keyPrefix() {
        return this.getStringAttribute('key_prefix');
    }
    set keyPrefix(value) {
        this._keyPrefix = value;
    }
    resetKeyPrefix() {
        this._keyPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyPrefixInput() {
        return this._keyPrefix;
    }
}
exports.BedrockModelInvocationLoggingConfigurationLoggingConfigS3ConfigOutputReference = BedrockModelInvocationLoggingConfigurationLoggingConfigS3ConfigOutputReference;
_c = JSII_RTTI_SYMBOL_1;
BedrockModelInvocationLoggingConfigurationLoggingConfigS3ConfigOutputReference[_c] = { fqn: "@cdktf/provider-aws.bedrockModelInvocationLoggingConfiguration.BedrockModelInvocationLoggingConfigurationLoggingConfigS3ConfigOutputReference", version: "19.15.0" };
function bedrockModelInvocationLoggingConfigurationLoggingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        embedding_data_delivery_enabled: cdktf.booleanToTerraform(struct.embeddingDataDeliveryEnabled),
        image_data_delivery_enabled: cdktf.booleanToTerraform(struct.imageDataDeliveryEnabled),
        text_data_delivery_enabled: cdktf.booleanToTerraform(struct.textDataDeliveryEnabled),
        cloudwatch_config: bedrockModelInvocationLoggingConfigurationLoggingConfigCloudwatchConfigToTerraform(struct.cloudwatchConfig),
        s3_config: bedrockModelInvocationLoggingConfigurationLoggingConfigS3ConfigToTerraform(struct.s3Config),
    };
}
exports.bedrockModelInvocationLoggingConfigurationLoggingConfigToTerraform = bedrockModelInvocationLoggingConfigurationLoggingConfigToTerraform;
function bedrockModelInvocationLoggingConfigurationLoggingConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        embedding_data_delivery_enabled: {
            value: cdktf.booleanToHclTerraform(struct.embeddingDataDeliveryEnabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        image_data_delivery_enabled: {
            value: cdktf.booleanToHclTerraform(struct.imageDataDeliveryEnabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        text_data_delivery_enabled: {
            value: cdktf.booleanToHclTerraform(struct.textDataDeliveryEnabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        cloudwatch_config: {
            value: bedrockModelInvocationLoggingConfigurationLoggingConfigCloudwatchConfigToHclTerraform(struct.cloudwatchConfig),
            isBlock: true,
            type: "struct",
            storageClassType: "BedrockModelInvocationLoggingConfigurationLoggingConfigCloudwatchConfig",
        },
        s3_config: {
            value: bedrockModelInvocationLoggingConfigurationLoggingConfigS3ConfigToHclTerraform(struct.s3Config),
            isBlock: true,
            type: "struct",
            storageClassType: "BedrockModelInvocationLoggingConfigurationLoggingConfigS3Config",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.bedrockModelInvocationLoggingConfigurationLoggingConfigToHclTerraform = bedrockModelInvocationLoggingConfigurationLoggingConfigToHclTerraform;
class BedrockModelInvocationLoggingConfigurationLoggingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
        // cloudwatch_config - computed: false, optional: true, required: false
        this._cloudwatchConfig = new BedrockModelInvocationLoggingConfigurationLoggingConfigCloudwatchConfigOutputReference(this, "cloudwatch_config");
        // s3_config - computed: false, optional: true, required: false
        this._s3Config = new BedrockModelInvocationLoggingConfigurationLoggingConfigS3ConfigOutputReference(this, "s3_config");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._embeddingDataDeliveryEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.embeddingDataDeliveryEnabled = this._embeddingDataDeliveryEnabled;
        }
        if (this._imageDataDeliveryEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageDataDeliveryEnabled = this._imageDataDeliveryEnabled;
        }
        if (this._textDataDeliveryEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.textDataDeliveryEnabled = this._textDataDeliveryEnabled;
        }
        if (this._cloudwatchConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudwatchConfig = this._cloudwatchConfig?.internalValue;
        }
        if (this._s3Config?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3Config = this._s3Config?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._embeddingDataDeliveryEnabled = undefined;
            this._imageDataDeliveryEnabled = undefined;
            this._textDataDeliveryEnabled = undefined;
            this._cloudwatchConfig.internalValue = undefined;
            this._s3Config.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._embeddingDataDeliveryEnabled = value.embeddingDataDeliveryEnabled;
            this._imageDataDeliveryEnabled = value.imageDataDeliveryEnabled;
            this._textDataDeliveryEnabled = value.textDataDeliveryEnabled;
            this._cloudwatchConfig.internalValue = value.cloudwatchConfig;
            this._s3Config.internalValue = value.s3Config;
        }
    }
    get embeddingDataDeliveryEnabled() {
        return this.getBooleanAttribute('embedding_data_delivery_enabled');
    }
    set embeddingDataDeliveryEnabled(value) {
        this._embeddingDataDeliveryEnabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get embeddingDataDeliveryEnabledInput() {
        return this._embeddingDataDeliveryEnabled;
    }
    get imageDataDeliveryEnabled() {
        return this.getBooleanAttribute('image_data_delivery_enabled');
    }
    set imageDataDeliveryEnabled(value) {
        this._imageDataDeliveryEnabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get imageDataDeliveryEnabledInput() {
        return this._imageDataDeliveryEnabled;
    }
    get textDataDeliveryEnabled() {
        return this.getBooleanAttribute('text_data_delivery_enabled');
    }
    set textDataDeliveryEnabled(value) {
        this._textDataDeliveryEnabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get textDataDeliveryEnabledInput() {
        return this._textDataDeliveryEnabled;
    }
    get cloudwatchConfig() {
        return this._cloudwatchConfig;
    }
    putCloudwatchConfig(value) {
        this._cloudwatchConfig.internalValue = value;
    }
    resetCloudwatchConfig() {
        this._cloudwatchConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudwatchConfigInput() {
        return this._cloudwatchConfig.internalValue;
    }
    get s3Config() {
        return this._s3Config;
    }
    putS3Config(value) {
        this._s3Config.internalValue = value;
    }
    resetS3Config() {
        this._s3Config.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3ConfigInput() {
        return this._s3Config.internalValue;
    }
}
exports.BedrockModelInvocationLoggingConfigurationLoggingConfigOutputReference = BedrockModelInvocationLoggingConfigurationLoggingConfigOutputReference;
_d = JSII_RTTI_SYMBOL_1;
BedrockModelInvocationLoggingConfigurationLoggingConfigOutputReference[_d] = { fqn: "@cdktf/provider-aws.bedrockModelInvocationLoggingConfiguration.BedrockModelInvocationLoggingConfigurationLoggingConfigOutputReference", version: "19.15.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/bedrock_model_invocation_logging_configuration aws_bedrock_model_invocation_logging_configuration}
*/
class BedrockModelInvocationLoggingConfiguration extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a BedrockModelInvocationLoggingConfiguration resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the BedrockModelInvocationLoggingConfiguration to import
    * @param importFromId The id of the existing BedrockModelInvocationLoggingConfiguration that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/bedrock_model_invocation_logging_configuration#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the BedrockModelInvocationLoggingConfiguration to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_bedrock_model_invocation_logging_configuration", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/bedrock_model_invocation_logging_configuration aws_bedrock_model_invocation_logging_configuration} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options BedrockModelInvocationLoggingConfigurationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_bedrock_model_invocation_logging_configuration',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // logging_config - computed: false, optional: false, required: false
        this._loggingConfig = new BedrockModelInvocationLoggingConfigurationLoggingConfigOutputReference(this, "logging_config");
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get loggingConfig() {
        return this._loggingConfig;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {};
    }
    synthesizeHclAttributes() {
        const attrs = {};
        return attrs;
    }
}
exports.BedrockModelInvocationLoggingConfiguration = BedrockModelInvocationLoggingConfiguration;
_e = JSII_RTTI_SYMBOL_1;
BedrockModelInvocationLoggingConfiguration[_e] = { fqn: "@cdktf/provider-aws.bedrockModelInvocationLoggingConfiguration.BedrockModelInvocationLoggingConfiguration", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
BedrockModelInvocationLoggingConfiguration.tfResourceType = "aws_bedrock_model_invocation_logging_configuration";
//# sourceMappingURL=data:application/json;base64,