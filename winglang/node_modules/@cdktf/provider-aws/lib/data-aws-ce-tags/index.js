"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsCeTagsFilterOutputReference = exports.dataAwsCeTagsFilterToHclTerraform = exports.dataAwsCeTagsFilterToTerraform = exports.DataAwsCeTagsFilterTagsOutputReference = exports.dataAwsCeTagsFilterTagsToHclTerraform = exports.dataAwsCeTagsFilterTagsToTerraform = exports.DataAwsCeTagsFilterOrList = exports.DataAwsCeTagsFilterOrOutputReference = exports.dataAwsCeTagsFilterOrToHclTerraform = exports.dataAwsCeTagsFilterOrToTerraform = exports.DataAwsCeTagsFilterOrTagsOutputReference = exports.dataAwsCeTagsFilterOrTagsToHclTerraform = exports.dataAwsCeTagsFilterOrTagsToTerraform = exports.DataAwsCeTagsFilterOrDimensionOutputReference = exports.dataAwsCeTagsFilterOrDimensionToHclTerraform = exports.dataAwsCeTagsFilterOrDimensionToTerraform = exports.DataAwsCeTagsFilterOrCostCategoryOutputReference = exports.dataAwsCeTagsFilterOrCostCategoryToHclTerraform = exports.dataAwsCeTagsFilterOrCostCategoryToTerraform = exports.DataAwsCeTagsFilterNotOutputReference = exports.dataAwsCeTagsFilterNotToHclTerraform = exports.dataAwsCeTagsFilterNotToTerraform = exports.DataAwsCeTagsFilterNotTagsOutputReference = exports.dataAwsCeTagsFilterNotTagsToHclTerraform = exports.dataAwsCeTagsFilterNotTagsToTerraform = exports.DataAwsCeTagsFilterNotDimensionOutputReference = exports.dataAwsCeTagsFilterNotDimensionToHclTerraform = exports.dataAwsCeTagsFilterNotDimensionToTerraform = exports.DataAwsCeTagsFilterNotCostCategoryOutputReference = exports.dataAwsCeTagsFilterNotCostCategoryToHclTerraform = exports.dataAwsCeTagsFilterNotCostCategoryToTerraform = exports.DataAwsCeTagsFilterDimensionOutputReference = exports.dataAwsCeTagsFilterDimensionToHclTerraform = exports.dataAwsCeTagsFilterDimensionToTerraform = exports.DataAwsCeTagsFilterCostCategoryOutputReference = exports.dataAwsCeTagsFilterCostCategoryToHclTerraform = exports.dataAwsCeTagsFilterCostCategoryToTerraform = exports.DataAwsCeTagsFilterAndList = exports.DataAwsCeTagsFilterAndOutputReference = exports.dataAwsCeTagsFilterAndToHclTerraform = exports.dataAwsCeTagsFilterAndToTerraform = exports.DataAwsCeTagsFilterAndTagsOutputReference = exports.dataAwsCeTagsFilterAndTagsToHclTerraform = exports.dataAwsCeTagsFilterAndTagsToTerraform = exports.DataAwsCeTagsFilterAndDimensionOutputReference = exports.dataAwsCeTagsFilterAndDimensionToHclTerraform = exports.dataAwsCeTagsFilterAndDimensionToTerraform = exports.DataAwsCeTagsFilterAndCostCategoryOutputReference = exports.dataAwsCeTagsFilterAndCostCategoryToHclTerraform = exports.dataAwsCeTagsFilterAndCostCategoryToTerraform = void 0;
exports.DataAwsCeTags = exports.DataAwsCeTagsTimePeriodOutputReference = exports.dataAwsCeTagsTimePeriodToHclTerraform = exports.dataAwsCeTagsTimePeriodToTerraform = exports.DataAwsCeTagsSortByList = exports.DataAwsCeTagsSortByOutputReference = exports.dataAwsCeTagsSortByToHclTerraform = exports.dataAwsCeTagsSortByToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function dataAwsCeTagsFilterAndCostCategoryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        match_options: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.matchOptions),
        values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.values),
    };
}
exports.dataAwsCeTagsFilterAndCostCategoryToTerraform = dataAwsCeTagsFilterAndCostCategoryToTerraform;
function dataAwsCeTagsFilterAndCostCategoryToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        key: {
            value: cdktf.stringToHclTerraform(struct.key),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        match_options: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.matchOptions),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        values: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.values),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataAwsCeTagsFilterAndCostCategoryToHclTerraform = dataAwsCeTagsFilterAndCostCategoryToHclTerraform;
class DataAwsCeTagsFilterAndCostCategoryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._matchOptions !== undefined) {
            hasAnyValues = true;
            internalValueResult.matchOptions = this._matchOptions;
        }
        if (this._values !== undefined) {
            hasAnyValues = true;
            internalValueResult.values = this._values;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._key = undefined;
            this._matchOptions = undefined;
            this._values = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._key = value.key;
            this._matchOptions = value.matchOptions;
            this._values = value.values;
        }
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    resetKey() {
        this._key = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get matchOptions() {
        return cdktf.Fn.tolist(this.getListAttribute('match_options'));
    }
    set matchOptions(value) {
        this._matchOptions = value;
    }
    resetMatchOptions() {
        this._matchOptions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get matchOptionsInput() {
        return this._matchOptions;
    }
    get values() {
        return cdktf.Fn.tolist(this.getListAttribute('values'));
    }
    set values(value) {
        this._values = value;
    }
    resetValues() {
        this._values = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valuesInput() {
        return this._values;
    }
}
exports.DataAwsCeTagsFilterAndCostCategoryOutputReference = DataAwsCeTagsFilterAndCostCategoryOutputReference;
_a = JSII_RTTI_SYMBOL_1;
DataAwsCeTagsFilterAndCostCategoryOutputReference[_a] = { fqn: "@cdktf/provider-aws.dataAwsCeTags.DataAwsCeTagsFilterAndCostCategoryOutputReference", version: "19.15.0" };
function dataAwsCeTagsFilterAndDimensionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        match_options: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.matchOptions),
        values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.values),
    };
}
exports.dataAwsCeTagsFilterAndDimensionToTerraform = dataAwsCeTagsFilterAndDimensionToTerraform;
function dataAwsCeTagsFilterAndDimensionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        key: {
            value: cdktf.stringToHclTerraform(struct.key),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        match_options: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.matchOptions),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        values: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.values),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataAwsCeTagsFilterAndDimensionToHclTerraform = dataAwsCeTagsFilterAndDimensionToHclTerraform;
class DataAwsCeTagsFilterAndDimensionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._matchOptions !== undefined) {
            hasAnyValues = true;
            internalValueResult.matchOptions = this._matchOptions;
        }
        if (this._values !== undefined) {
            hasAnyValues = true;
            internalValueResult.values = this._values;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._key = undefined;
            this._matchOptions = undefined;
            this._values = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._key = value.key;
            this._matchOptions = value.matchOptions;
            this._values = value.values;
        }
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    resetKey() {
        this._key = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get matchOptions() {
        return cdktf.Fn.tolist(this.getListAttribute('match_options'));
    }
    set matchOptions(value) {
        this._matchOptions = value;
    }
    resetMatchOptions() {
        this._matchOptions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get matchOptionsInput() {
        return this._matchOptions;
    }
    get values() {
        return cdktf.Fn.tolist(this.getListAttribute('values'));
    }
    set values(value) {
        this._values = value;
    }
    resetValues() {
        this._values = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valuesInput() {
        return this._values;
    }
}
exports.DataAwsCeTagsFilterAndDimensionOutputReference = DataAwsCeTagsFilterAndDimensionOutputReference;
_b = JSII_RTTI_SYMBOL_1;
DataAwsCeTagsFilterAndDimensionOutputReference[_b] = { fqn: "@cdktf/provider-aws.dataAwsCeTags.DataAwsCeTagsFilterAndDimensionOutputReference", version: "19.15.0" };
function dataAwsCeTagsFilterAndTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        match_options: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.matchOptions),
        values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.values),
    };
}
exports.dataAwsCeTagsFilterAndTagsToTerraform = dataAwsCeTagsFilterAndTagsToTerraform;
function dataAwsCeTagsFilterAndTagsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        key: {
            value: cdktf.stringToHclTerraform(struct.key),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        match_options: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.matchOptions),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        values: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.values),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataAwsCeTagsFilterAndTagsToHclTerraform = dataAwsCeTagsFilterAndTagsToHclTerraform;
class DataAwsCeTagsFilterAndTagsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._matchOptions !== undefined) {
            hasAnyValues = true;
            internalValueResult.matchOptions = this._matchOptions;
        }
        if (this._values !== undefined) {
            hasAnyValues = true;
            internalValueResult.values = this._values;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._key = undefined;
            this._matchOptions = undefined;
            this._values = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._key = value.key;
            this._matchOptions = value.matchOptions;
            this._values = value.values;
        }
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    resetKey() {
        this._key = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get matchOptions() {
        return cdktf.Fn.tolist(this.getListAttribute('match_options'));
    }
    set matchOptions(value) {
        this._matchOptions = value;
    }
    resetMatchOptions() {
        this._matchOptions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get matchOptionsInput() {
        return this._matchOptions;
    }
    get values() {
        return cdktf.Fn.tolist(this.getListAttribute('values'));
    }
    set values(value) {
        this._values = value;
    }
    resetValues() {
        this._values = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valuesInput() {
        return this._values;
    }
}
exports.DataAwsCeTagsFilterAndTagsOutputReference = DataAwsCeTagsFilterAndTagsOutputReference;
_c = JSII_RTTI_SYMBOL_1;
DataAwsCeTagsFilterAndTagsOutputReference[_c] = { fqn: "@cdktf/provider-aws.dataAwsCeTags.DataAwsCeTagsFilterAndTagsOutputReference", version: "19.15.0" };
function dataAwsCeTagsFilterAndToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cost_category: dataAwsCeTagsFilterAndCostCategoryToTerraform(struct.costCategory),
        dimension: dataAwsCeTagsFilterAndDimensionToTerraform(struct.dimension),
        tags: dataAwsCeTagsFilterAndTagsToTerraform(struct.tags),
    };
}
exports.dataAwsCeTagsFilterAndToTerraform = dataAwsCeTagsFilterAndToTerraform;
function dataAwsCeTagsFilterAndToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cost_category: {
            value: dataAwsCeTagsFilterAndCostCategoryToHclTerraform(struct.costCategory),
            isBlock: true,
            type: "list",
            storageClassType: "DataAwsCeTagsFilterAndCostCategoryList",
        },
        dimension: {
            value: dataAwsCeTagsFilterAndDimensionToHclTerraform(struct.dimension),
            isBlock: true,
            type: "list",
            storageClassType: "DataAwsCeTagsFilterAndDimensionList",
        },
        tags: {
            value: dataAwsCeTagsFilterAndTagsToHclTerraform(struct.tags),
            isBlock: true,
            type: "list",
            storageClassType: "DataAwsCeTagsFilterAndTagsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataAwsCeTagsFilterAndToHclTerraform = dataAwsCeTagsFilterAndToHclTerraform;
class DataAwsCeTagsFilterAndOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // cost_category - computed: false, optional: true, required: false
        this._costCategory = new DataAwsCeTagsFilterAndCostCategoryOutputReference(this, "cost_category");
        // dimension - computed: false, optional: true, required: false
        this._dimension = new DataAwsCeTagsFilterAndDimensionOutputReference(this, "dimension");
        // tags - computed: false, optional: true, required: false
        this._tags = new DataAwsCeTagsFilterAndTagsOutputReference(this, "tags");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._costCategory?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.costCategory = this._costCategory?.internalValue;
        }
        if (this._dimension?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dimension = this._dimension?.internalValue;
        }
        if (this._tags?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tags = this._tags?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._costCategory.internalValue = undefined;
            this._dimension.internalValue = undefined;
            this._tags.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._costCategory.internalValue = value.costCategory;
            this._dimension.internalValue = value.dimension;
            this._tags.internalValue = value.tags;
        }
    }
    get costCategory() {
        return this._costCategory;
    }
    putCostCategory(value) {
        this._costCategory.internalValue = value;
    }
    resetCostCategory() {
        this._costCategory.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get costCategoryInput() {
        return this._costCategory.internalValue;
    }
    get dimension() {
        return this._dimension;
    }
    putDimension(value) {
        this._dimension.internalValue = value;
    }
    resetDimension() {
        this._dimension.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dimensionInput() {
        return this._dimension.internalValue;
    }
    get tags() {
        return this._tags;
    }
    putTags(value) {
        this._tags.internalValue = value;
    }
    resetTags() {
        this._tags.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags.internalValue;
    }
}
exports.DataAwsCeTagsFilterAndOutputReference = DataAwsCeTagsFilterAndOutputReference;
_d = JSII_RTTI_SYMBOL_1;
DataAwsCeTagsFilterAndOutputReference[_d] = { fqn: "@cdktf/provider-aws.dataAwsCeTags.DataAwsCeTagsFilterAndOutputReference", version: "19.15.0" };
class DataAwsCeTagsFilterAndList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataAwsCeTagsFilterAndOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataAwsCeTagsFilterAndList = DataAwsCeTagsFilterAndList;
_e = JSII_RTTI_SYMBOL_1;
DataAwsCeTagsFilterAndList[_e] = { fqn: "@cdktf/provider-aws.dataAwsCeTags.DataAwsCeTagsFilterAndList", version: "19.15.0" };
function dataAwsCeTagsFilterCostCategoryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        match_options: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.matchOptions),
        values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.values),
    };
}
exports.dataAwsCeTagsFilterCostCategoryToTerraform = dataAwsCeTagsFilterCostCategoryToTerraform;
function dataAwsCeTagsFilterCostCategoryToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        key: {
            value: cdktf.stringToHclTerraform(struct.key),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        match_options: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.matchOptions),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        values: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.values),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataAwsCeTagsFilterCostCategoryToHclTerraform = dataAwsCeTagsFilterCostCategoryToHclTerraform;
class DataAwsCeTagsFilterCostCategoryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._matchOptions !== undefined) {
            hasAnyValues = true;
            internalValueResult.matchOptions = this._matchOptions;
        }
        if (this._values !== undefined) {
            hasAnyValues = true;
            internalValueResult.values = this._values;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._key = undefined;
            this._matchOptions = undefined;
            this._values = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._key = value.key;
            this._matchOptions = value.matchOptions;
            this._values = value.values;
        }
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    resetKey() {
        this._key = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get matchOptions() {
        return cdktf.Fn.tolist(this.getListAttribute('match_options'));
    }
    set matchOptions(value) {
        this._matchOptions = value;
    }
    resetMatchOptions() {
        this._matchOptions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get matchOptionsInput() {
        return this._matchOptions;
    }
    get values() {
        return cdktf.Fn.tolist(this.getListAttribute('values'));
    }
    set values(value) {
        this._values = value;
    }
    resetValues() {
        this._values = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valuesInput() {
        return this._values;
    }
}
exports.DataAwsCeTagsFilterCostCategoryOutputReference = DataAwsCeTagsFilterCostCategoryOutputReference;
_f = JSII_RTTI_SYMBOL_1;
DataAwsCeTagsFilterCostCategoryOutputReference[_f] = { fqn: "@cdktf/provider-aws.dataAwsCeTags.DataAwsCeTagsFilterCostCategoryOutputReference", version: "19.15.0" };
function dataAwsCeTagsFilterDimensionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        match_options: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.matchOptions),
        values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.values),
    };
}
exports.dataAwsCeTagsFilterDimensionToTerraform = dataAwsCeTagsFilterDimensionToTerraform;
function dataAwsCeTagsFilterDimensionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        key: {
            value: cdktf.stringToHclTerraform(struct.key),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        match_options: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.matchOptions),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        values: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.values),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataAwsCeTagsFilterDimensionToHclTerraform = dataAwsCeTagsFilterDimensionToHclTerraform;
class DataAwsCeTagsFilterDimensionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._matchOptions !== undefined) {
            hasAnyValues = true;
            internalValueResult.matchOptions = this._matchOptions;
        }
        if (this._values !== undefined) {
            hasAnyValues = true;
            internalValueResult.values = this._values;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._key = undefined;
            this._matchOptions = undefined;
            this._values = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._key = value.key;
            this._matchOptions = value.matchOptions;
            this._values = value.values;
        }
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    resetKey() {
        this._key = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get matchOptions() {
        return cdktf.Fn.tolist(this.getListAttribute('match_options'));
    }
    set matchOptions(value) {
        this._matchOptions = value;
    }
    resetMatchOptions() {
        this._matchOptions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get matchOptionsInput() {
        return this._matchOptions;
    }
    get values() {
        return cdktf.Fn.tolist(this.getListAttribute('values'));
    }
    set values(value) {
        this._values = value;
    }
    resetValues() {
        this._values = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valuesInput() {
        return this._values;
    }
}
exports.DataAwsCeTagsFilterDimensionOutputReference = DataAwsCeTagsFilterDimensionOutputReference;
_g = JSII_RTTI_SYMBOL_1;
DataAwsCeTagsFilterDimensionOutputReference[_g] = { fqn: "@cdktf/provider-aws.dataAwsCeTags.DataAwsCeTagsFilterDimensionOutputReference", version: "19.15.0" };
function dataAwsCeTagsFilterNotCostCategoryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        match_options: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.matchOptions),
        values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.values),
    };
}
exports.dataAwsCeTagsFilterNotCostCategoryToTerraform = dataAwsCeTagsFilterNotCostCategoryToTerraform;
function dataAwsCeTagsFilterNotCostCategoryToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        key: {
            value: cdktf.stringToHclTerraform(struct.key),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        match_options: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.matchOptions),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        values: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.values),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataAwsCeTagsFilterNotCostCategoryToHclTerraform = dataAwsCeTagsFilterNotCostCategoryToHclTerraform;
class DataAwsCeTagsFilterNotCostCategoryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._matchOptions !== undefined) {
            hasAnyValues = true;
            internalValueResult.matchOptions = this._matchOptions;
        }
        if (this._values !== undefined) {
            hasAnyValues = true;
            internalValueResult.values = this._values;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._key = undefined;
            this._matchOptions = undefined;
            this._values = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._key = value.key;
            this._matchOptions = value.matchOptions;
            this._values = value.values;
        }
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    resetKey() {
        this._key = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get matchOptions() {
        return cdktf.Fn.tolist(this.getListAttribute('match_options'));
    }
    set matchOptions(value) {
        this._matchOptions = value;
    }
    resetMatchOptions() {
        this._matchOptions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get matchOptionsInput() {
        return this._matchOptions;
    }
    get values() {
        return cdktf.Fn.tolist(this.getListAttribute('values'));
    }
    set values(value) {
        this._values = value;
    }
    resetValues() {
        this._values = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valuesInput() {
        return this._values;
    }
}
exports.DataAwsCeTagsFilterNotCostCategoryOutputReference = DataAwsCeTagsFilterNotCostCategoryOutputReference;
_h = JSII_RTTI_SYMBOL_1;
DataAwsCeTagsFilterNotCostCategoryOutputReference[_h] = { fqn: "@cdktf/provider-aws.dataAwsCeTags.DataAwsCeTagsFilterNotCostCategoryOutputReference", version: "19.15.0" };
function dataAwsCeTagsFilterNotDimensionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        match_options: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.matchOptions),
        values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.values),
    };
}
exports.dataAwsCeTagsFilterNotDimensionToTerraform = dataAwsCeTagsFilterNotDimensionToTerraform;
function dataAwsCeTagsFilterNotDimensionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        key: {
            value: cdktf.stringToHclTerraform(struct.key),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        match_options: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.matchOptions),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        values: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.values),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataAwsCeTagsFilterNotDimensionToHclTerraform = dataAwsCeTagsFilterNotDimensionToHclTerraform;
class DataAwsCeTagsFilterNotDimensionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._matchOptions !== undefined) {
            hasAnyValues = true;
            internalValueResult.matchOptions = this._matchOptions;
        }
        if (this._values !== undefined) {
            hasAnyValues = true;
            internalValueResult.values = this._values;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._key = undefined;
            this._matchOptions = undefined;
            this._values = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._key = value.key;
            this._matchOptions = value.matchOptions;
            this._values = value.values;
        }
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    resetKey() {
        this._key = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get matchOptions() {
        return cdktf.Fn.tolist(this.getListAttribute('match_options'));
    }
    set matchOptions(value) {
        this._matchOptions = value;
    }
    resetMatchOptions() {
        this._matchOptions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get matchOptionsInput() {
        return this._matchOptions;
    }
    get values() {
        return cdktf.Fn.tolist(this.getListAttribute('values'));
    }
    set values(value) {
        this._values = value;
    }
    resetValues() {
        this._values = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valuesInput() {
        return this._values;
    }
}
exports.DataAwsCeTagsFilterNotDimensionOutputReference = DataAwsCeTagsFilterNotDimensionOutputReference;
_j = JSII_RTTI_SYMBOL_1;
DataAwsCeTagsFilterNotDimensionOutputReference[_j] = { fqn: "@cdktf/provider-aws.dataAwsCeTags.DataAwsCeTagsFilterNotDimensionOutputReference", version: "19.15.0" };
function dataAwsCeTagsFilterNotTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        match_options: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.matchOptions),
        values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.values),
    };
}
exports.dataAwsCeTagsFilterNotTagsToTerraform = dataAwsCeTagsFilterNotTagsToTerraform;
function dataAwsCeTagsFilterNotTagsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        key: {
            value: cdktf.stringToHclTerraform(struct.key),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        match_options: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.matchOptions),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        values: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.values),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataAwsCeTagsFilterNotTagsToHclTerraform = dataAwsCeTagsFilterNotTagsToHclTerraform;
class DataAwsCeTagsFilterNotTagsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._matchOptions !== undefined) {
            hasAnyValues = true;
            internalValueResult.matchOptions = this._matchOptions;
        }
        if (this._values !== undefined) {
            hasAnyValues = true;
            internalValueResult.values = this._values;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._key = undefined;
            this._matchOptions = undefined;
            this._values = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._key = value.key;
            this._matchOptions = value.matchOptions;
            this._values = value.values;
        }
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    resetKey() {
        this._key = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get matchOptions() {
        return cdktf.Fn.tolist(this.getListAttribute('match_options'));
    }
    set matchOptions(value) {
        this._matchOptions = value;
    }
    resetMatchOptions() {
        this._matchOptions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get matchOptionsInput() {
        return this._matchOptions;
    }
    get values() {
        return cdktf.Fn.tolist(this.getListAttribute('values'));
    }
    set values(value) {
        this._values = value;
    }
    resetValues() {
        this._values = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valuesInput() {
        return this._values;
    }
}
exports.DataAwsCeTagsFilterNotTagsOutputReference = DataAwsCeTagsFilterNotTagsOutputReference;
_k = JSII_RTTI_SYMBOL_1;
DataAwsCeTagsFilterNotTagsOutputReference[_k] = { fqn: "@cdktf/provider-aws.dataAwsCeTags.DataAwsCeTagsFilterNotTagsOutputReference", version: "19.15.0" };
function dataAwsCeTagsFilterNotToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cost_category: dataAwsCeTagsFilterNotCostCategoryToTerraform(struct.costCategory),
        dimension: dataAwsCeTagsFilterNotDimensionToTerraform(struct.dimension),
        tags: dataAwsCeTagsFilterNotTagsToTerraform(struct.tags),
    };
}
exports.dataAwsCeTagsFilterNotToTerraform = dataAwsCeTagsFilterNotToTerraform;
function dataAwsCeTagsFilterNotToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cost_category: {
            value: dataAwsCeTagsFilterNotCostCategoryToHclTerraform(struct.costCategory),
            isBlock: true,
            type: "list",
            storageClassType: "DataAwsCeTagsFilterNotCostCategoryList",
        },
        dimension: {
            value: dataAwsCeTagsFilterNotDimensionToHclTerraform(struct.dimension),
            isBlock: true,
            type: "list",
            storageClassType: "DataAwsCeTagsFilterNotDimensionList",
        },
        tags: {
            value: dataAwsCeTagsFilterNotTagsToHclTerraform(struct.tags),
            isBlock: true,
            type: "list",
            storageClassType: "DataAwsCeTagsFilterNotTagsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataAwsCeTagsFilterNotToHclTerraform = dataAwsCeTagsFilterNotToHclTerraform;
class DataAwsCeTagsFilterNotOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cost_category - computed: false, optional: true, required: false
        this._costCategory = new DataAwsCeTagsFilterNotCostCategoryOutputReference(this, "cost_category");
        // dimension - computed: false, optional: true, required: false
        this._dimension = new DataAwsCeTagsFilterNotDimensionOutputReference(this, "dimension");
        // tags - computed: false, optional: true, required: false
        this._tags = new DataAwsCeTagsFilterNotTagsOutputReference(this, "tags");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._costCategory?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.costCategory = this._costCategory?.internalValue;
        }
        if (this._dimension?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dimension = this._dimension?.internalValue;
        }
        if (this._tags?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tags = this._tags?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._costCategory.internalValue = undefined;
            this._dimension.internalValue = undefined;
            this._tags.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._costCategory.internalValue = value.costCategory;
            this._dimension.internalValue = value.dimension;
            this._tags.internalValue = value.tags;
        }
    }
    get costCategory() {
        return this._costCategory;
    }
    putCostCategory(value) {
        this._costCategory.internalValue = value;
    }
    resetCostCategory() {
        this._costCategory.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get costCategoryInput() {
        return this._costCategory.internalValue;
    }
    get dimension() {
        return this._dimension;
    }
    putDimension(value) {
        this._dimension.internalValue = value;
    }
    resetDimension() {
        this._dimension.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dimensionInput() {
        return this._dimension.internalValue;
    }
    get tags() {
        return this._tags;
    }
    putTags(value) {
        this._tags.internalValue = value;
    }
    resetTags() {
        this._tags.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags.internalValue;
    }
}
exports.DataAwsCeTagsFilterNotOutputReference = DataAwsCeTagsFilterNotOutputReference;
_l = JSII_RTTI_SYMBOL_1;
DataAwsCeTagsFilterNotOutputReference[_l] = { fqn: "@cdktf/provider-aws.dataAwsCeTags.DataAwsCeTagsFilterNotOutputReference", version: "19.15.0" };
function dataAwsCeTagsFilterOrCostCategoryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        match_options: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.matchOptions),
        values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.values),
    };
}
exports.dataAwsCeTagsFilterOrCostCategoryToTerraform = dataAwsCeTagsFilterOrCostCategoryToTerraform;
function dataAwsCeTagsFilterOrCostCategoryToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        key: {
            value: cdktf.stringToHclTerraform(struct.key),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        match_options: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.matchOptions),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        values: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.values),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataAwsCeTagsFilterOrCostCategoryToHclTerraform = dataAwsCeTagsFilterOrCostCategoryToHclTerraform;
class DataAwsCeTagsFilterOrCostCategoryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._matchOptions !== undefined) {
            hasAnyValues = true;
            internalValueResult.matchOptions = this._matchOptions;
        }
        if (this._values !== undefined) {
            hasAnyValues = true;
            internalValueResult.values = this._values;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._key = undefined;
            this._matchOptions = undefined;
            this._values = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._key = value.key;
            this._matchOptions = value.matchOptions;
            this._values = value.values;
        }
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    resetKey() {
        this._key = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get matchOptions() {
        return cdktf.Fn.tolist(this.getListAttribute('match_options'));
    }
    set matchOptions(value) {
        this._matchOptions = value;
    }
    resetMatchOptions() {
        this._matchOptions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get matchOptionsInput() {
        return this._matchOptions;
    }
    get values() {
        return cdktf.Fn.tolist(this.getListAttribute('values'));
    }
    set values(value) {
        this._values = value;
    }
    resetValues() {
        this._values = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valuesInput() {
        return this._values;
    }
}
exports.DataAwsCeTagsFilterOrCostCategoryOutputReference = DataAwsCeTagsFilterOrCostCategoryOutputReference;
_m = JSII_RTTI_SYMBOL_1;
DataAwsCeTagsFilterOrCostCategoryOutputReference[_m] = { fqn: "@cdktf/provider-aws.dataAwsCeTags.DataAwsCeTagsFilterOrCostCategoryOutputReference", version: "19.15.0" };
function dataAwsCeTagsFilterOrDimensionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        match_options: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.matchOptions),
        values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.values),
    };
}
exports.dataAwsCeTagsFilterOrDimensionToTerraform = dataAwsCeTagsFilterOrDimensionToTerraform;
function dataAwsCeTagsFilterOrDimensionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        key: {
            value: cdktf.stringToHclTerraform(struct.key),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        match_options: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.matchOptions),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        values: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.values),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataAwsCeTagsFilterOrDimensionToHclTerraform = dataAwsCeTagsFilterOrDimensionToHclTerraform;
class DataAwsCeTagsFilterOrDimensionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._matchOptions !== undefined) {
            hasAnyValues = true;
            internalValueResult.matchOptions = this._matchOptions;
        }
        if (this._values !== undefined) {
            hasAnyValues = true;
            internalValueResult.values = this._values;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._key = undefined;
            this._matchOptions = undefined;
            this._values = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._key = value.key;
            this._matchOptions = value.matchOptions;
            this._values = value.values;
        }
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    resetKey() {
        this._key = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get matchOptions() {
        return cdktf.Fn.tolist(this.getListAttribute('match_options'));
    }
    set matchOptions(value) {
        this._matchOptions = value;
    }
    resetMatchOptions() {
        this._matchOptions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get matchOptionsInput() {
        return this._matchOptions;
    }
    get values() {
        return cdktf.Fn.tolist(this.getListAttribute('values'));
    }
    set values(value) {
        this._values = value;
    }
    resetValues() {
        this._values = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valuesInput() {
        return this._values;
    }
}
exports.DataAwsCeTagsFilterOrDimensionOutputReference = DataAwsCeTagsFilterOrDimensionOutputReference;
_o = JSII_RTTI_SYMBOL_1;
DataAwsCeTagsFilterOrDimensionOutputReference[_o] = { fqn: "@cdktf/provider-aws.dataAwsCeTags.DataAwsCeTagsFilterOrDimensionOutputReference", version: "19.15.0" };
function dataAwsCeTagsFilterOrTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        match_options: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.matchOptions),
        values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.values),
    };
}
exports.dataAwsCeTagsFilterOrTagsToTerraform = dataAwsCeTagsFilterOrTagsToTerraform;
function dataAwsCeTagsFilterOrTagsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        key: {
            value: cdktf.stringToHclTerraform(struct.key),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        match_options: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.matchOptions),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        values: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.values),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataAwsCeTagsFilterOrTagsToHclTerraform = dataAwsCeTagsFilterOrTagsToHclTerraform;
class DataAwsCeTagsFilterOrTagsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._matchOptions !== undefined) {
            hasAnyValues = true;
            internalValueResult.matchOptions = this._matchOptions;
        }
        if (this._values !== undefined) {
            hasAnyValues = true;
            internalValueResult.values = this._values;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._key = undefined;
            this._matchOptions = undefined;
            this._values = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._key = value.key;
            this._matchOptions = value.matchOptions;
            this._values = value.values;
        }
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    resetKey() {
        this._key = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get matchOptions() {
        return cdktf.Fn.tolist(this.getListAttribute('match_options'));
    }
    set matchOptions(value) {
        this._matchOptions = value;
    }
    resetMatchOptions() {
        this._matchOptions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get matchOptionsInput() {
        return this._matchOptions;
    }
    get values() {
        return cdktf.Fn.tolist(this.getListAttribute('values'));
    }
    set values(value) {
        this._values = value;
    }
    resetValues() {
        this._values = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valuesInput() {
        return this._values;
    }
}
exports.DataAwsCeTagsFilterOrTagsOutputReference = DataAwsCeTagsFilterOrTagsOutputReference;
_p = JSII_RTTI_SYMBOL_1;
DataAwsCeTagsFilterOrTagsOutputReference[_p] = { fqn: "@cdktf/provider-aws.dataAwsCeTags.DataAwsCeTagsFilterOrTagsOutputReference", version: "19.15.0" };
function dataAwsCeTagsFilterOrToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cost_category: dataAwsCeTagsFilterOrCostCategoryToTerraform(struct.costCategory),
        dimension: dataAwsCeTagsFilterOrDimensionToTerraform(struct.dimension),
        tags: dataAwsCeTagsFilterOrTagsToTerraform(struct.tags),
    };
}
exports.dataAwsCeTagsFilterOrToTerraform = dataAwsCeTagsFilterOrToTerraform;
function dataAwsCeTagsFilterOrToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cost_category: {
            value: dataAwsCeTagsFilterOrCostCategoryToHclTerraform(struct.costCategory),
            isBlock: true,
            type: "list",
            storageClassType: "DataAwsCeTagsFilterOrCostCategoryList",
        },
        dimension: {
            value: dataAwsCeTagsFilterOrDimensionToHclTerraform(struct.dimension),
            isBlock: true,
            type: "list",
            storageClassType: "DataAwsCeTagsFilterOrDimensionList",
        },
        tags: {
            value: dataAwsCeTagsFilterOrTagsToHclTerraform(struct.tags),
            isBlock: true,
            type: "list",
            storageClassType: "DataAwsCeTagsFilterOrTagsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataAwsCeTagsFilterOrToHclTerraform = dataAwsCeTagsFilterOrToHclTerraform;
class DataAwsCeTagsFilterOrOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // cost_category - computed: false, optional: true, required: false
        this._costCategory = new DataAwsCeTagsFilterOrCostCategoryOutputReference(this, "cost_category");
        // dimension - computed: false, optional: true, required: false
        this._dimension = new DataAwsCeTagsFilterOrDimensionOutputReference(this, "dimension");
        // tags - computed: false, optional: true, required: false
        this._tags = new DataAwsCeTagsFilterOrTagsOutputReference(this, "tags");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._costCategory?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.costCategory = this._costCategory?.internalValue;
        }
        if (this._dimension?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dimension = this._dimension?.internalValue;
        }
        if (this._tags?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tags = this._tags?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._costCategory.internalValue = undefined;
            this._dimension.internalValue = undefined;
            this._tags.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._costCategory.internalValue = value.costCategory;
            this._dimension.internalValue = value.dimension;
            this._tags.internalValue = value.tags;
        }
    }
    get costCategory() {
        return this._costCategory;
    }
    putCostCategory(value) {
        this._costCategory.internalValue = value;
    }
    resetCostCategory() {
        this._costCategory.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get costCategoryInput() {
        return this._costCategory.internalValue;
    }
    get dimension() {
        return this._dimension;
    }
    putDimension(value) {
        this._dimension.internalValue = value;
    }
    resetDimension() {
        this._dimension.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dimensionInput() {
        return this._dimension.internalValue;
    }
    get tags() {
        return this._tags;
    }
    putTags(value) {
        this._tags.internalValue = value;
    }
    resetTags() {
        this._tags.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags.internalValue;
    }
}
exports.DataAwsCeTagsFilterOrOutputReference = DataAwsCeTagsFilterOrOutputReference;
_q = JSII_RTTI_SYMBOL_1;
DataAwsCeTagsFilterOrOutputReference[_q] = { fqn: "@cdktf/provider-aws.dataAwsCeTags.DataAwsCeTagsFilterOrOutputReference", version: "19.15.0" };
class DataAwsCeTagsFilterOrList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataAwsCeTagsFilterOrOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataAwsCeTagsFilterOrList = DataAwsCeTagsFilterOrList;
_r = JSII_RTTI_SYMBOL_1;
DataAwsCeTagsFilterOrList[_r] = { fqn: "@cdktf/provider-aws.dataAwsCeTags.DataAwsCeTagsFilterOrList", version: "19.15.0" };
function dataAwsCeTagsFilterTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        match_options: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.matchOptions),
        values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.values),
    };
}
exports.dataAwsCeTagsFilterTagsToTerraform = dataAwsCeTagsFilterTagsToTerraform;
function dataAwsCeTagsFilterTagsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        key: {
            value: cdktf.stringToHclTerraform(struct.key),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        match_options: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.matchOptions),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        values: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.values),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataAwsCeTagsFilterTagsToHclTerraform = dataAwsCeTagsFilterTagsToHclTerraform;
class DataAwsCeTagsFilterTagsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._matchOptions !== undefined) {
            hasAnyValues = true;
            internalValueResult.matchOptions = this._matchOptions;
        }
        if (this._values !== undefined) {
            hasAnyValues = true;
            internalValueResult.values = this._values;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._key = undefined;
            this._matchOptions = undefined;
            this._values = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._key = value.key;
            this._matchOptions = value.matchOptions;
            this._values = value.values;
        }
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    resetKey() {
        this._key = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get matchOptions() {
        return cdktf.Fn.tolist(this.getListAttribute('match_options'));
    }
    set matchOptions(value) {
        this._matchOptions = value;
    }
    resetMatchOptions() {
        this._matchOptions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get matchOptionsInput() {
        return this._matchOptions;
    }
    get values() {
        return cdktf.Fn.tolist(this.getListAttribute('values'));
    }
    set values(value) {
        this._values = value;
    }
    resetValues() {
        this._values = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valuesInput() {
        return this._values;
    }
}
exports.DataAwsCeTagsFilterTagsOutputReference = DataAwsCeTagsFilterTagsOutputReference;
_s = JSII_RTTI_SYMBOL_1;
DataAwsCeTagsFilterTagsOutputReference[_s] = { fqn: "@cdktf/provider-aws.dataAwsCeTags.DataAwsCeTagsFilterTagsOutputReference", version: "19.15.0" };
function dataAwsCeTagsFilterToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        and: cdktf.listMapper(dataAwsCeTagsFilterAndToTerraform, true)(struct.and),
        cost_category: dataAwsCeTagsFilterCostCategoryToTerraform(struct.costCategory),
        dimension: dataAwsCeTagsFilterDimensionToTerraform(struct.dimension),
        not: dataAwsCeTagsFilterNotToTerraform(struct.not),
        or: cdktf.listMapper(dataAwsCeTagsFilterOrToTerraform, true)(struct.or),
        tags: dataAwsCeTagsFilterTagsToTerraform(struct.tags),
    };
}
exports.dataAwsCeTagsFilterToTerraform = dataAwsCeTagsFilterToTerraform;
function dataAwsCeTagsFilterToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        and: {
            value: cdktf.listMapperHcl(dataAwsCeTagsFilterAndToHclTerraform, true)(struct.and),
            isBlock: true,
            type: "set",
            storageClassType: "DataAwsCeTagsFilterAndList",
        },
        cost_category: {
            value: dataAwsCeTagsFilterCostCategoryToHclTerraform(struct.costCategory),
            isBlock: true,
            type: "list",
            storageClassType: "DataAwsCeTagsFilterCostCategoryList",
        },
        dimension: {
            value: dataAwsCeTagsFilterDimensionToHclTerraform(struct.dimension),
            isBlock: true,
            type: "list",
            storageClassType: "DataAwsCeTagsFilterDimensionList",
        },
        not: {
            value: dataAwsCeTagsFilterNotToHclTerraform(struct.not),
            isBlock: true,
            type: "list",
            storageClassType: "DataAwsCeTagsFilterNotList",
        },
        or: {
            value: cdktf.listMapperHcl(dataAwsCeTagsFilterOrToHclTerraform, true)(struct.or),
            isBlock: true,
            type: "set",
            storageClassType: "DataAwsCeTagsFilterOrList",
        },
        tags: {
            value: dataAwsCeTagsFilterTagsToHclTerraform(struct.tags),
            isBlock: true,
            type: "list",
            storageClassType: "DataAwsCeTagsFilterTagsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataAwsCeTagsFilterToHclTerraform = dataAwsCeTagsFilterToHclTerraform;
class DataAwsCeTagsFilterOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // and - computed: false, optional: true, required: false
        this._and = new DataAwsCeTagsFilterAndList(this, "and", true);
        // cost_category - computed: false, optional: true, required: false
        this._costCategory = new DataAwsCeTagsFilterCostCategoryOutputReference(this, "cost_category");
        // dimension - computed: false, optional: true, required: false
        this._dimension = new DataAwsCeTagsFilterDimensionOutputReference(this, "dimension");
        // not - computed: false, optional: true, required: false
        this._not = new DataAwsCeTagsFilterNotOutputReference(this, "not");
        // or - computed: false, optional: true, required: false
        this._or = new DataAwsCeTagsFilterOrList(this, "or", true);
        // tags - computed: false, optional: true, required: false
        this._tags = new DataAwsCeTagsFilterTagsOutputReference(this, "tags");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._and?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.and = this._and?.internalValue;
        }
        if (this._costCategory?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.costCategory = this._costCategory?.internalValue;
        }
        if (this._dimension?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dimension = this._dimension?.internalValue;
        }
        if (this._not?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.not = this._not?.internalValue;
        }
        if (this._or?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.or = this._or?.internalValue;
        }
        if (this._tags?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tags = this._tags?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._and.internalValue = undefined;
            this._costCategory.internalValue = undefined;
            this._dimension.internalValue = undefined;
            this._not.internalValue = undefined;
            this._or.internalValue = undefined;
            this._tags.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._and.internalValue = value.and;
            this._costCategory.internalValue = value.costCategory;
            this._dimension.internalValue = value.dimension;
            this._not.internalValue = value.not;
            this._or.internalValue = value.or;
            this._tags.internalValue = value.tags;
        }
    }
    get and() {
        return this._and;
    }
    putAnd(value) {
        this._and.internalValue = value;
    }
    resetAnd() {
        this._and.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get andInput() {
        return this._and.internalValue;
    }
    get costCategory() {
        return this._costCategory;
    }
    putCostCategory(value) {
        this._costCategory.internalValue = value;
    }
    resetCostCategory() {
        this._costCategory.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get costCategoryInput() {
        return this._costCategory.internalValue;
    }
    get dimension() {
        return this._dimension;
    }
    putDimension(value) {
        this._dimension.internalValue = value;
    }
    resetDimension() {
        this._dimension.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dimensionInput() {
        return this._dimension.internalValue;
    }
    get not() {
        return this._not;
    }
    putNot(value) {
        this._not.internalValue = value;
    }
    resetNot() {
        this._not.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get notInput() {
        return this._not.internalValue;
    }
    get or() {
        return this._or;
    }
    putOr(value) {
        this._or.internalValue = value;
    }
    resetOr() {
        this._or.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get orInput() {
        return this._or.internalValue;
    }
    get tags() {
        return this._tags;
    }
    putTags(value) {
        this._tags.internalValue = value;
    }
    resetTags() {
        this._tags.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags.internalValue;
    }
}
exports.DataAwsCeTagsFilterOutputReference = DataAwsCeTagsFilterOutputReference;
_t = JSII_RTTI_SYMBOL_1;
DataAwsCeTagsFilterOutputReference[_t] = { fqn: "@cdktf/provider-aws.dataAwsCeTags.DataAwsCeTagsFilterOutputReference", version: "19.15.0" };
function dataAwsCeTagsSortByToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        sort_order: cdktf.stringToTerraform(struct.sortOrder),
    };
}
exports.dataAwsCeTagsSortByToTerraform = dataAwsCeTagsSortByToTerraform;
function dataAwsCeTagsSortByToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        key: {
            value: cdktf.stringToHclTerraform(struct.key),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sort_order: {
            value: cdktf.stringToHclTerraform(struct.sortOrder),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataAwsCeTagsSortByToHclTerraform = dataAwsCeTagsSortByToHclTerraform;
class DataAwsCeTagsSortByOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._sortOrder !== undefined) {
            hasAnyValues = true;
            internalValueResult.sortOrder = this._sortOrder;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._key = undefined;
            this._sortOrder = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._key = value.key;
            this._sortOrder = value.sortOrder;
        }
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    resetKey() {
        this._key = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get sortOrder() {
        return this.getStringAttribute('sort_order');
    }
    set sortOrder(value) {
        this._sortOrder = value;
    }
    resetSortOrder() {
        this._sortOrder = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sortOrderInput() {
        return this._sortOrder;
    }
}
exports.DataAwsCeTagsSortByOutputReference = DataAwsCeTagsSortByOutputReference;
_u = JSII_RTTI_SYMBOL_1;
DataAwsCeTagsSortByOutputReference[_u] = { fqn: "@cdktf/provider-aws.dataAwsCeTags.DataAwsCeTagsSortByOutputReference", version: "19.15.0" };
class DataAwsCeTagsSortByList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataAwsCeTagsSortByOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataAwsCeTagsSortByList = DataAwsCeTagsSortByList;
_v = JSII_RTTI_SYMBOL_1;
DataAwsCeTagsSortByList[_v] = { fqn: "@cdktf/provider-aws.dataAwsCeTags.DataAwsCeTagsSortByList", version: "19.15.0" };
function dataAwsCeTagsTimePeriodToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        end: cdktf.stringToTerraform(struct.end),
        start: cdktf.stringToTerraform(struct.start),
    };
}
exports.dataAwsCeTagsTimePeriodToTerraform = dataAwsCeTagsTimePeriodToTerraform;
function dataAwsCeTagsTimePeriodToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        end: {
            value: cdktf.stringToHclTerraform(struct.end),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        start: {
            value: cdktf.stringToHclTerraform(struct.start),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataAwsCeTagsTimePeriodToHclTerraform = dataAwsCeTagsTimePeriodToHclTerraform;
class DataAwsCeTagsTimePeriodOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._end !== undefined) {
            hasAnyValues = true;
            internalValueResult.end = this._end;
        }
        if (this._start !== undefined) {
            hasAnyValues = true;
            internalValueResult.start = this._start;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._end = undefined;
            this._start = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._end = value.end;
            this._start = value.start;
        }
    }
    get end() {
        return this.getStringAttribute('end');
    }
    set end(value) {
        this._end = value;
    }
    // Temporarily expose input value. Use with caution.
    get endInput() {
        return this._end;
    }
    get start() {
        return this.getStringAttribute('start');
    }
    set start(value) {
        this._start = value;
    }
    // Temporarily expose input value. Use with caution.
    get startInput() {
        return this._start;
    }
}
exports.DataAwsCeTagsTimePeriodOutputReference = DataAwsCeTagsTimePeriodOutputReference;
_w = JSII_RTTI_SYMBOL_1;
DataAwsCeTagsTimePeriodOutputReference[_w] = { fqn: "@cdktf/provider-aws.dataAwsCeTags.DataAwsCeTagsTimePeriodOutputReference", version: "19.15.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/data-sources/ce_tags aws_ce_tags}
*/
class DataAwsCeTags extends cdktf.TerraformDataSource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a DataAwsCeTags resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the DataAwsCeTags to import
    * @param importFromId The id of the existing DataAwsCeTags that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/data-sources/ce_tags#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the DataAwsCeTags to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_ce_tags", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/data-sources/ce_tags aws_ce_tags} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsCeTagsConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_ce_tags',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // filter - computed: false, optional: true, required: false
        this._filter = new DataAwsCeTagsFilterOutputReference(this, "filter");
        // sort_by - computed: false, optional: true, required: false
        this._sortBy = new DataAwsCeTagsSortByList(this, "sort_by", false);
        // time_period - computed: false, optional: false, required: true
        this._timePeriod = new DataAwsCeTagsTimePeriodOutputReference(this, "time_period");
        this._id = config.id;
        this._searchString = config.searchString;
        this._tagKey = config.tagKey;
        this._filter.internalValue = config.filter;
        this._sortBy.internalValue = config.sortBy;
        this._timePeriod.internalValue = config.timePeriod;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get searchString() {
        return this.getStringAttribute('search_string');
    }
    set searchString(value) {
        this._searchString = value;
    }
    resetSearchString() {
        this._searchString = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get searchStringInput() {
        return this._searchString;
    }
    get tagKey() {
        return this.getStringAttribute('tag_key');
    }
    set tagKey(value) {
        this._tagKey = value;
    }
    resetTagKey() {
        this._tagKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagKeyInput() {
        return this._tagKey;
    }
    // tags - computed: true, optional: false, required: false
    get tags() {
        return cdktf.Fn.tolist(this.getListAttribute('tags'));
    }
    get filter() {
        return this._filter;
    }
    putFilter(value) {
        this._filter.internalValue = value;
    }
    resetFilter() {
        this._filter.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get filterInput() {
        return this._filter.internalValue;
    }
    get sortBy() {
        return this._sortBy;
    }
    putSortBy(value) {
        this._sortBy.internalValue = value;
    }
    resetSortBy() {
        this._sortBy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sortByInput() {
        return this._sortBy.internalValue;
    }
    get timePeriod() {
        return this._timePeriod;
    }
    putTimePeriod(value) {
        this._timePeriod.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get timePeriodInput() {
        return this._timePeriod.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
            search_string: cdktf.stringToTerraform(this._searchString),
            tag_key: cdktf.stringToTerraform(this._tagKey),
            filter: dataAwsCeTagsFilterToTerraform(this._filter.internalValue),
            sort_by: cdktf.listMapper(dataAwsCeTagsSortByToTerraform, true)(this._sortBy.internalValue),
            time_period: dataAwsCeTagsTimePeriodToTerraform(this._timePeriod.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            search_string: {
                value: cdktf.stringToHclTerraform(this._searchString),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            tag_key: {
                value: cdktf.stringToHclTerraform(this._tagKey),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            filter: {
                value: dataAwsCeTagsFilterToHclTerraform(this._filter.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DataAwsCeTagsFilterList",
            },
            sort_by: {
                value: cdktf.listMapperHcl(dataAwsCeTagsSortByToHclTerraform, true)(this._sortBy.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DataAwsCeTagsSortByList",
            },
            time_period: {
                value: dataAwsCeTagsTimePeriodToHclTerraform(this._timePeriod.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DataAwsCeTagsTimePeriodList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.DataAwsCeTags = DataAwsCeTags;
_x = JSII_RTTI_SYMBOL_1;
DataAwsCeTags[_x] = { fqn: "@cdktf/provider-aws.dataAwsCeTags.DataAwsCeTags", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
DataAwsCeTags.tfResourceType = "aws_ce_tags";
//# sourceMappingURL=data:application/json;base64,