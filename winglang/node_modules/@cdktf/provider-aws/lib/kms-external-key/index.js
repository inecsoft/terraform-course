"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.KmsExternalKey = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/kms_external_key aws_kms_external_key}
*/
class KmsExternalKey extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a KmsExternalKey resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the KmsExternalKey to import
    * @param importFromId The id of the existing KmsExternalKey that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/kms_external_key#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the KmsExternalKey to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_kms_external_key", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/kms_external_key aws_kms_external_key} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options KmsExternalKeyConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'aws_kms_external_key',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        this._bypassPolicyLockoutSafetyCheck = config.bypassPolicyLockoutSafetyCheck;
        this._deletionWindowInDays = config.deletionWindowInDays;
        this._description = config.description;
        this._enabled = config.enabled;
        this._id = config.id;
        this._keyMaterialBase64 = config.keyMaterialBase64;
        this._multiRegion = config.multiRegion;
        this._policy = config.policy;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._validTo = config.validTo;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get bypassPolicyLockoutSafetyCheck() {
        return this.getBooleanAttribute('bypass_policy_lockout_safety_check');
    }
    set bypassPolicyLockoutSafetyCheck(value) {
        this._bypassPolicyLockoutSafetyCheck = value;
    }
    resetBypassPolicyLockoutSafetyCheck() {
        this._bypassPolicyLockoutSafetyCheck = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bypassPolicyLockoutSafetyCheckInput() {
        return this._bypassPolicyLockoutSafetyCheck;
    }
    get deletionWindowInDays() {
        return this.getNumberAttribute('deletion_window_in_days');
    }
    set deletionWindowInDays(value) {
        this._deletionWindowInDays = value;
    }
    resetDeletionWindowInDays() {
        this._deletionWindowInDays = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deletionWindowInDaysInput() {
        return this._deletionWindowInDays;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    // expiration_model - computed: true, optional: false, required: false
    get expirationModel() {
        return this.getStringAttribute('expiration_model');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get keyMaterialBase64() {
        return this.getStringAttribute('key_material_base64');
    }
    set keyMaterialBase64(value) {
        this._keyMaterialBase64 = value;
    }
    resetKeyMaterialBase64() {
        this._keyMaterialBase64 = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyMaterialBase64Input() {
        return this._keyMaterialBase64;
    }
    // key_state - computed: true, optional: false, required: false
    get keyState() {
        return this.getStringAttribute('key_state');
    }
    // key_usage - computed: true, optional: false, required: false
    get keyUsage() {
        return this.getStringAttribute('key_usage');
    }
    get multiRegion() {
        return this.getBooleanAttribute('multi_region');
    }
    set multiRegion(value) {
        this._multiRegion = value;
    }
    resetMultiRegion() {
        this._multiRegion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get multiRegionInput() {
        return this._multiRegion;
    }
    get policy() {
        return this.getStringAttribute('policy');
    }
    set policy(value) {
        this._policy = value;
    }
    resetPolicy() {
        this._policy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get policyInput() {
        return this._policy;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get validTo() {
        return this.getStringAttribute('valid_to');
    }
    set validTo(value) {
        this._validTo = value;
    }
    resetValidTo() {
        this._validTo = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get validToInput() {
        return this._validTo;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            bypass_policy_lockout_safety_check: cdktf.booleanToTerraform(this._bypassPolicyLockoutSafetyCheck),
            deletion_window_in_days: cdktf.numberToTerraform(this._deletionWindowInDays),
            description: cdktf.stringToTerraform(this._description),
            enabled: cdktf.booleanToTerraform(this._enabled),
            id: cdktf.stringToTerraform(this._id),
            key_material_base64: cdktf.stringToTerraform(this._keyMaterialBase64),
            multi_region: cdktf.booleanToTerraform(this._multiRegion),
            policy: cdktf.stringToTerraform(this._policy),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            valid_to: cdktf.stringToTerraform(this._validTo),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            bypass_policy_lockout_safety_check: {
                value: cdktf.booleanToHclTerraform(this._bypassPolicyLockoutSafetyCheck),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            deletion_window_in_days: {
                value: cdktf.numberToHclTerraform(this._deletionWindowInDays),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            description: {
                value: cdktf.stringToHclTerraform(this._description),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            enabled: {
                value: cdktf.booleanToHclTerraform(this._enabled),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            key_material_base64: {
                value: cdktf.stringToHclTerraform(this._keyMaterialBase64),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            multi_region: {
                value: cdktf.booleanToHclTerraform(this._multiRegion),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            policy: {
                value: cdktf.stringToHclTerraform(this._policy),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            tags: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tags),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            tags_all: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tagsAll),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            valid_to: {
                value: cdktf.stringToHclTerraform(this._validTo),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.KmsExternalKey = KmsExternalKey;
_a = JSII_RTTI_SYMBOL_1;
KmsExternalKey[_a] = { fqn: "@cdktf/provider-aws.kmsExternalKey.KmsExternalKey", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
KmsExternalKey.tfResourceType = "aws_kms_external_key";
//# sourceMappingURL=data:application/json;base64,