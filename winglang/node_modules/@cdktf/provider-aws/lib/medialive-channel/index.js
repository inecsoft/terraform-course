"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MedialiveChannel = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */
// generated from terraform resource schema
const index_structs_1 = require("./index-structs");
__exportStar(require("./index-structs"), exports);
const cdktf = require("cdktf");
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/medialive_channel aws_medialive_channel}
*/
class MedialiveChannel extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a MedialiveChannel resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the MedialiveChannel to import
    * @param importFromId The id of the existing MedialiveChannel that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/medialive_channel#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the MedialiveChannel to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_medialive_channel", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/medialive_channel aws_medialive_channel} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options MedialiveChannelConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_medialive_channel',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // cdi_input_specification - computed: false, optional: true, required: false
        this._cdiInputSpecification = new index_structs_1.MedialiveChannelCdiInputSpecificationOutputReference(this, "cdi_input_specification");
        // destinations - computed: false, optional: false, required: true
        this._destinations = new index_structs_1.MedialiveChannelDestinationsList(this, "destinations", true);
        // encoder_settings - computed: false, optional: false, required: true
        this._encoderSettings = new index_structs_1.MedialiveChannelEncoderSettingsOutputReference(this, "encoder_settings");
        // input_attachments - computed: false, optional: false, required: true
        this._inputAttachments = new index_structs_1.MedialiveChannelInputAttachmentsList(this, "input_attachments", true);
        // input_specification - computed: false, optional: false, required: true
        this._inputSpecification = new index_structs_1.MedialiveChannelInputSpecificationOutputReference(this, "input_specification");
        // maintenance - computed: false, optional: true, required: false
        this._maintenance = new index_structs_1.MedialiveChannelMaintenanceOutputReference(this, "maintenance");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new index_structs_1.MedialiveChannelTimeoutsOutputReference(this, "timeouts");
        // vpc - computed: false, optional: true, required: false
        this._vpc = new index_structs_1.MedialiveChannelVpcOutputReference(this, "vpc");
        this._channelClass = config.channelClass;
        this._id = config.id;
        this._logLevel = config.logLevel;
        this._name = config.name;
        this._roleArn = config.roleArn;
        this._startChannel = config.startChannel;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._cdiInputSpecification.internalValue = config.cdiInputSpecification;
        this._destinations.internalValue = config.destinations;
        this._encoderSettings.internalValue = config.encoderSettings;
        this._inputAttachments.internalValue = config.inputAttachments;
        this._inputSpecification.internalValue = config.inputSpecification;
        this._maintenance.internalValue = config.maintenance;
        this._timeouts.internalValue = config.timeouts;
        this._vpc.internalValue = config.vpc;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get channelClass() {
        return this.getStringAttribute('channel_class');
    }
    set channelClass(value) {
        this._channelClass = value;
    }
    // Temporarily expose input value. Use with caution.
    get channelClassInput() {
        return this._channelClass;
    }
    // channel_id - computed: true, optional: false, required: false
    get channelId() {
        return this.getStringAttribute('channel_id');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get logLevel() {
        return this.getStringAttribute('log_level');
    }
    set logLevel(value) {
        this._logLevel = value;
    }
    resetLogLevel() {
        this._logLevel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logLevelInput() {
        return this._logLevel;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    resetRoleArn() {
        this._roleArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get startChannel() {
        return this.getBooleanAttribute('start_channel');
    }
    set startChannel(value) {
        this._startChannel = value;
    }
    resetStartChannel() {
        this._startChannel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get startChannelInput() {
        return this._startChannel;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get cdiInputSpecification() {
        return this._cdiInputSpecification;
    }
    putCdiInputSpecification(value) {
        this._cdiInputSpecification.internalValue = value;
    }
    resetCdiInputSpecification() {
        this._cdiInputSpecification.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cdiInputSpecificationInput() {
        return this._cdiInputSpecification.internalValue;
    }
    get destinations() {
        return this._destinations;
    }
    putDestinations(value) {
        this._destinations.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationsInput() {
        return this._destinations.internalValue;
    }
    get encoderSettings() {
        return this._encoderSettings;
    }
    putEncoderSettings(value) {
        this._encoderSettings.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get encoderSettingsInput() {
        return this._encoderSettings.internalValue;
    }
    get inputAttachments() {
        return this._inputAttachments;
    }
    putInputAttachments(value) {
        this._inputAttachments.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get inputAttachmentsInput() {
        return this._inputAttachments.internalValue;
    }
    get inputSpecification() {
        return this._inputSpecification;
    }
    putInputSpecification(value) {
        this._inputSpecification.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get inputSpecificationInput() {
        return this._inputSpecification.internalValue;
    }
    get maintenance() {
        return this._maintenance;
    }
    putMaintenance(value) {
        this._maintenance.internalValue = value;
    }
    resetMaintenance() {
        this._maintenance.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maintenanceInput() {
        return this._maintenance.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    get vpc() {
        return this._vpc;
    }
    putVpc(value) {
        this._vpc.internalValue = value;
    }
    resetVpc() {
        this._vpc.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vpcInput() {
        return this._vpc.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            channel_class: cdktf.stringToTerraform(this._channelClass),
            id: cdktf.stringToTerraform(this._id),
            log_level: cdktf.stringToTerraform(this._logLevel),
            name: cdktf.stringToTerraform(this._name),
            role_arn: cdktf.stringToTerraform(this._roleArn),
            start_channel: cdktf.booleanToTerraform(this._startChannel),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            cdi_input_specification: (0, index_structs_1.medialiveChannelCdiInputSpecificationToTerraform)(this._cdiInputSpecification.internalValue),
            destinations: cdktf.listMapper(index_structs_1.medialiveChannelDestinationsToTerraform, true)(this._destinations.internalValue),
            encoder_settings: (0, index_structs_1.medialiveChannelEncoderSettingsToTerraform)(this._encoderSettings.internalValue),
            input_attachments: cdktf.listMapper(index_structs_1.medialiveChannelInputAttachmentsToTerraform, true)(this._inputAttachments.internalValue),
            input_specification: (0, index_structs_1.medialiveChannelInputSpecificationToTerraform)(this._inputSpecification.internalValue),
            maintenance: (0, index_structs_1.medialiveChannelMaintenanceToTerraform)(this._maintenance.internalValue),
            timeouts: (0, index_structs_1.medialiveChannelTimeoutsToTerraform)(this._timeouts.internalValue),
            vpc: (0, index_structs_1.medialiveChannelVpcToTerraform)(this._vpc.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            channel_class: {
                value: cdktf.stringToHclTerraform(this._channelClass),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            log_level: {
                value: cdktf.stringToHclTerraform(this._logLevel),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            role_arn: {
                value: cdktf.stringToHclTerraform(this._roleArn),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            start_channel: {
                value: cdktf.booleanToHclTerraform(this._startChannel),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            tags: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tags),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            tags_all: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tagsAll),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            cdi_input_specification: {
                value: (0, index_structs_1.medialiveChannelCdiInputSpecificationToHclTerraform)(this._cdiInputSpecification.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "MedialiveChannelCdiInputSpecificationList",
            },
            destinations: {
                value: cdktf.listMapperHcl(index_structs_1.medialiveChannelDestinationsToHclTerraform, true)(this._destinations.internalValue),
                isBlock: true,
                type: "set",
                storageClassType: "MedialiveChannelDestinationsList",
            },
            encoder_settings: {
                value: (0, index_structs_1.medialiveChannelEncoderSettingsToHclTerraform)(this._encoderSettings.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "MedialiveChannelEncoderSettingsList",
            },
            input_attachments: {
                value: cdktf.listMapperHcl(index_structs_1.medialiveChannelInputAttachmentsToHclTerraform, true)(this._inputAttachments.internalValue),
                isBlock: true,
                type: "set",
                storageClassType: "MedialiveChannelInputAttachmentsList",
            },
            input_specification: {
                value: (0, index_structs_1.medialiveChannelInputSpecificationToHclTerraform)(this._inputSpecification.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "MedialiveChannelInputSpecificationList",
            },
            maintenance: {
                value: (0, index_structs_1.medialiveChannelMaintenanceToHclTerraform)(this._maintenance.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "MedialiveChannelMaintenanceList",
            },
            timeouts: {
                value: (0, index_structs_1.medialiveChannelTimeoutsToHclTerraform)(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "MedialiveChannelTimeouts",
            },
            vpc: {
                value: (0, index_structs_1.medialiveChannelVpcToHclTerraform)(this._vpc.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "MedialiveChannelVpcList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.MedialiveChannel = MedialiveChannel;
_a = JSII_RTTI_SYMBOL_1;
MedialiveChannel[_a] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannel", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
MedialiveChannel.tfResourceType = "aws_medialive_channel";
//# sourceMappingURL=data:application/json;base64,