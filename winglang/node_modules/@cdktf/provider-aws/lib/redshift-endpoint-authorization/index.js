"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedshiftEndpointAuthorization = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/redshift_endpoint_authorization aws_redshift_endpoint_authorization}
*/
class RedshiftEndpointAuthorization extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a RedshiftEndpointAuthorization resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the RedshiftEndpointAuthorization to import
    * @param importFromId The id of the existing RedshiftEndpointAuthorization that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/redshift_endpoint_authorization#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the RedshiftEndpointAuthorization to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_redshift_endpoint_authorization", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/redshift_endpoint_authorization aws_redshift_endpoint_authorization} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options RedshiftEndpointAuthorizationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_redshift_endpoint_authorization',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        this._account = config.account;
        this._clusterIdentifier = config.clusterIdentifier;
        this._forceDelete = config.forceDelete;
        this._id = config.id;
        this._vpcIds = config.vpcIds;
    }
    get account() {
        return this.getStringAttribute('account');
    }
    set account(value) {
        this._account = value;
    }
    // Temporarily expose input value. Use with caution.
    get accountInput() {
        return this._account;
    }
    // allowed_all_vpcs - computed: true, optional: false, required: false
    get allowedAllVpcs() {
        return this.getBooleanAttribute('allowed_all_vpcs');
    }
    get clusterIdentifier() {
        return this.getStringAttribute('cluster_identifier');
    }
    set clusterIdentifier(value) {
        this._clusterIdentifier = value;
    }
    // Temporarily expose input value. Use with caution.
    get clusterIdentifierInput() {
        return this._clusterIdentifier;
    }
    // endpoint_count - computed: true, optional: false, required: false
    get endpointCount() {
        return this.getNumberAttribute('endpoint_count');
    }
    get forceDelete() {
        return this.getBooleanAttribute('force_delete');
    }
    set forceDelete(value) {
        this._forceDelete = value;
    }
    resetForceDelete() {
        this._forceDelete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get forceDeleteInput() {
        return this._forceDelete;
    }
    // grantee - computed: true, optional: false, required: false
    get grantee() {
        return this.getStringAttribute('grantee');
    }
    // grantor - computed: true, optional: false, required: false
    get grantor() {
        return this.getStringAttribute('grantor');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get vpcIds() {
        return cdktf.Fn.tolist(this.getListAttribute('vpc_ids'));
    }
    set vpcIds(value) {
        this._vpcIds = value;
    }
    resetVpcIds() {
        this._vpcIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vpcIdsInput() {
        return this._vpcIds;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            account: cdktf.stringToTerraform(this._account),
            cluster_identifier: cdktf.stringToTerraform(this._clusterIdentifier),
            force_delete: cdktf.booleanToTerraform(this._forceDelete),
            id: cdktf.stringToTerraform(this._id),
            vpc_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(this._vpcIds),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            account: {
                value: cdktf.stringToHclTerraform(this._account),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            cluster_identifier: {
                value: cdktf.stringToHclTerraform(this._clusterIdentifier),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            force_delete: {
                value: cdktf.booleanToHclTerraform(this._forceDelete),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            vpc_ids: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._vpcIds),
                isBlock: false,
                type: "set",
                storageClassType: "stringList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.RedshiftEndpointAuthorization = RedshiftEndpointAuthorization;
_a = JSII_RTTI_SYMBOL_1;
RedshiftEndpointAuthorization[_a] = { fqn: "@cdktf/provider-aws.redshiftEndpointAuthorization.RedshiftEndpointAuthorization", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
RedshiftEndpointAuthorization.tfResourceType = "aws_redshift_endpoint_authorization";
//# sourceMappingURL=data:application/json;base64,