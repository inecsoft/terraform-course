"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y;
Object.defineProperty(exports, "__esModule", { value: true });
exports.sagemakerSpaceSpaceSettingsSpaceStorageSettingsToTerraform = exports.SagemakerSpaceSpaceSettingsSpaceStorageSettingsEbsStorageSettingsOutputReference = exports.sagemakerSpaceSpaceSettingsSpaceStorageSettingsEbsStorageSettingsToHclTerraform = exports.sagemakerSpaceSpaceSettingsSpaceStorageSettingsEbsStorageSettingsToTerraform = exports.SagemakerSpaceSpaceSettingsKernelGatewayAppSettingsOutputReference = exports.sagemakerSpaceSpaceSettingsKernelGatewayAppSettingsToHclTerraform = exports.sagemakerSpaceSpaceSettingsKernelGatewayAppSettingsToTerraform = exports.SagemakerSpaceSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecOutputReference = exports.sagemakerSpaceSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecToHclTerraform = exports.sagemakerSpaceSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform = exports.SagemakerSpaceSpaceSettingsKernelGatewayAppSettingsCustomImageList = exports.SagemakerSpaceSpaceSettingsKernelGatewayAppSettingsCustomImageOutputReference = exports.sagemakerSpaceSpaceSettingsKernelGatewayAppSettingsCustomImageToHclTerraform = exports.sagemakerSpaceSpaceSettingsKernelGatewayAppSettingsCustomImageToTerraform = exports.SagemakerSpaceSpaceSettingsJupyterServerAppSettingsOutputReference = exports.sagemakerSpaceSpaceSettingsJupyterServerAppSettingsToHclTerraform = exports.sagemakerSpaceSpaceSettingsJupyterServerAppSettingsToTerraform = exports.SagemakerSpaceSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecOutputReference = exports.sagemakerSpaceSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecToHclTerraform = exports.sagemakerSpaceSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform = exports.SagemakerSpaceSpaceSettingsJupyterServerAppSettingsCodeRepositoryList = exports.SagemakerSpaceSpaceSettingsJupyterServerAppSettingsCodeRepositoryOutputReference = exports.sagemakerSpaceSpaceSettingsJupyterServerAppSettingsCodeRepositoryToHclTerraform = exports.sagemakerSpaceSpaceSettingsJupyterServerAppSettingsCodeRepositoryToTerraform = exports.SagemakerSpaceSpaceSettingsJupyterLabAppSettingsOutputReference = exports.sagemakerSpaceSpaceSettingsJupyterLabAppSettingsToHclTerraform = exports.sagemakerSpaceSpaceSettingsJupyterLabAppSettingsToTerraform = exports.SagemakerSpaceSpaceSettingsJupyterLabAppSettingsDefaultResourceSpecOutputReference = exports.sagemakerSpaceSpaceSettingsJupyterLabAppSettingsDefaultResourceSpecToHclTerraform = exports.sagemakerSpaceSpaceSettingsJupyterLabAppSettingsDefaultResourceSpecToTerraform = exports.SagemakerSpaceSpaceSettingsJupyterLabAppSettingsCodeRepositoryList = exports.SagemakerSpaceSpaceSettingsJupyterLabAppSettingsCodeRepositoryOutputReference = exports.sagemakerSpaceSpaceSettingsJupyterLabAppSettingsCodeRepositoryToHclTerraform = exports.sagemakerSpaceSpaceSettingsJupyterLabAppSettingsCodeRepositoryToTerraform = exports.SagemakerSpaceSpaceSettingsCustomFileSystemList = exports.SagemakerSpaceSpaceSettingsCustomFileSystemOutputReference = exports.sagemakerSpaceSpaceSettingsCustomFileSystemToHclTerraform = exports.sagemakerSpaceSpaceSettingsCustomFileSystemToTerraform = exports.SagemakerSpaceSpaceSettingsCustomFileSystemEfsFileSystemOutputReference = exports.sagemakerSpaceSpaceSettingsCustomFileSystemEfsFileSystemToHclTerraform = exports.sagemakerSpaceSpaceSettingsCustomFileSystemEfsFileSystemToTerraform = exports.SagemakerSpaceSpaceSettingsCodeEditorAppSettingsOutputReference = exports.sagemakerSpaceSpaceSettingsCodeEditorAppSettingsToHclTerraform = exports.sagemakerSpaceSpaceSettingsCodeEditorAppSettingsToTerraform = exports.SagemakerSpaceSpaceSettingsCodeEditorAppSettingsDefaultResourceSpecOutputReference = exports.sagemakerSpaceSpaceSettingsCodeEditorAppSettingsDefaultResourceSpecToHclTerraform = exports.sagemakerSpaceSpaceSettingsCodeEditorAppSettingsDefaultResourceSpecToTerraform = exports.SagemakerSpaceOwnershipSettingsOutputReference = exports.sagemakerSpaceOwnershipSettingsToHclTerraform = exports.sagemakerSpaceOwnershipSettingsToTerraform = void 0;
exports.SagemakerSpace = exports.SagemakerSpaceSpaceSharingSettingsOutputReference = exports.sagemakerSpaceSpaceSharingSettingsToHclTerraform = exports.sagemakerSpaceSpaceSharingSettingsToTerraform = exports.SagemakerSpaceSpaceSettingsOutputReference = exports.sagemakerSpaceSpaceSettingsToHclTerraform = exports.sagemakerSpaceSpaceSettingsToTerraform = exports.SagemakerSpaceSpaceSettingsSpaceStorageSettingsOutputReference = exports.sagemakerSpaceSpaceSettingsSpaceStorageSettingsToHclTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function sagemakerSpaceOwnershipSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        owner_user_profile_name: cdktf.stringToTerraform(struct.ownerUserProfileName),
    };
}
exports.sagemakerSpaceOwnershipSettingsToTerraform = sagemakerSpaceOwnershipSettingsToTerraform;
function sagemakerSpaceOwnershipSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        owner_user_profile_name: {
            value: cdktf.stringToHclTerraform(struct.ownerUserProfileName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerSpaceOwnershipSettingsToHclTerraform = sagemakerSpaceOwnershipSettingsToHclTerraform;
class SagemakerSpaceOwnershipSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._ownerUserProfileName !== undefined) {
            hasAnyValues = true;
            internalValueResult.ownerUserProfileName = this._ownerUserProfileName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._ownerUserProfileName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._ownerUserProfileName = value.ownerUserProfileName;
        }
    }
    get ownerUserProfileName() {
        return this.getStringAttribute('owner_user_profile_name');
    }
    set ownerUserProfileName(value) {
        this._ownerUserProfileName = value;
    }
    // Temporarily expose input value. Use with caution.
    get ownerUserProfileNameInput() {
        return this._ownerUserProfileName;
    }
}
exports.SagemakerSpaceOwnershipSettingsOutputReference = SagemakerSpaceOwnershipSettingsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
SagemakerSpaceOwnershipSettingsOutputReference[_a] = { fqn: "@cdktf/provider-aws.sagemakerSpace.SagemakerSpaceOwnershipSettingsOutputReference", version: "19.15.0" };
function sagemakerSpaceSpaceSettingsCodeEditorAppSettingsDefaultResourceSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        lifecycle_config_arn: cdktf.stringToTerraform(struct.lifecycleConfigArn),
        sagemaker_image_arn: cdktf.stringToTerraform(struct.sagemakerImageArn),
        sagemaker_image_version_alias: cdktf.stringToTerraform(struct.sagemakerImageVersionAlias),
        sagemaker_image_version_arn: cdktf.stringToTerraform(struct.sagemakerImageVersionArn),
    };
}
exports.sagemakerSpaceSpaceSettingsCodeEditorAppSettingsDefaultResourceSpecToTerraform = sagemakerSpaceSpaceSettingsCodeEditorAppSettingsDefaultResourceSpecToTerraform;
function sagemakerSpaceSpaceSettingsCodeEditorAppSettingsDefaultResourceSpecToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        instance_type: {
            value: cdktf.stringToHclTerraform(struct.instanceType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        lifecycle_config_arn: {
            value: cdktf.stringToHclTerraform(struct.lifecycleConfigArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_arn: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_version_alias: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageVersionAlias),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_version_arn: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageVersionArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerSpaceSpaceSettingsCodeEditorAppSettingsDefaultResourceSpecToHclTerraform = sagemakerSpaceSpaceSettingsCodeEditorAppSettingsDefaultResourceSpecToHclTerraform;
class SagemakerSpaceSpaceSettingsCodeEditorAppSettingsDefaultResourceSpecOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._instanceType !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceType = this._instanceType;
        }
        if (this._lifecycleConfigArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.lifecycleConfigArn = this._lifecycleConfigArn;
        }
        if (this._sagemakerImageArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageArn = this._sagemakerImageArn;
        }
        if (this._sagemakerImageVersionAlias !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageVersionAlias = this._sagemakerImageVersionAlias;
        }
        if (this._sagemakerImageVersionArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageVersionArn = this._sagemakerImageVersionArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._instanceType = undefined;
            this._lifecycleConfigArn = undefined;
            this._sagemakerImageArn = undefined;
            this._sagemakerImageVersionAlias = undefined;
            this._sagemakerImageVersionArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._instanceType = value.instanceType;
            this._lifecycleConfigArn = value.lifecycleConfigArn;
            this._sagemakerImageArn = value.sagemakerImageArn;
            this._sagemakerImageVersionAlias = value.sagemakerImageVersionAlias;
            this._sagemakerImageVersionArn = value.sagemakerImageVersionArn;
        }
    }
    get instanceType() {
        return this.getStringAttribute('instance_type');
    }
    set instanceType(value) {
        this._instanceType = value;
    }
    resetInstanceType() {
        this._instanceType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceTypeInput() {
        return this._instanceType;
    }
    get lifecycleConfigArn() {
        return this.getStringAttribute('lifecycle_config_arn');
    }
    set lifecycleConfigArn(value) {
        this._lifecycleConfigArn = value;
    }
    resetLifecycleConfigArn() {
        this._lifecycleConfigArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifecycleConfigArnInput() {
        return this._lifecycleConfigArn;
    }
    get sagemakerImageArn() {
        return this.getStringAttribute('sagemaker_image_arn');
    }
    set sagemakerImageArn(value) {
        this._sagemakerImageArn = value;
    }
    resetSagemakerImageArn() {
        this._sagemakerImageArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageArnInput() {
        return this._sagemakerImageArn;
    }
    get sagemakerImageVersionAlias() {
        return this.getStringAttribute('sagemaker_image_version_alias');
    }
    set sagemakerImageVersionAlias(value) {
        this._sagemakerImageVersionAlias = value;
    }
    resetSagemakerImageVersionAlias() {
        this._sagemakerImageVersionAlias = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageVersionAliasInput() {
        return this._sagemakerImageVersionAlias;
    }
    get sagemakerImageVersionArn() {
        return this.getStringAttribute('sagemaker_image_version_arn');
    }
    set sagemakerImageVersionArn(value) {
        this._sagemakerImageVersionArn = value;
    }
    resetSagemakerImageVersionArn() {
        this._sagemakerImageVersionArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageVersionArnInput() {
        return this._sagemakerImageVersionArn;
    }
}
exports.SagemakerSpaceSpaceSettingsCodeEditorAppSettingsDefaultResourceSpecOutputReference = SagemakerSpaceSpaceSettingsCodeEditorAppSettingsDefaultResourceSpecOutputReference;
_b = JSII_RTTI_SYMBOL_1;
SagemakerSpaceSpaceSettingsCodeEditorAppSettingsDefaultResourceSpecOutputReference[_b] = { fqn: "@cdktf/provider-aws.sagemakerSpace.SagemakerSpaceSpaceSettingsCodeEditorAppSettingsDefaultResourceSpecOutputReference", version: "19.15.0" };
function sagemakerSpaceSpaceSettingsCodeEditorAppSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        default_resource_spec: sagemakerSpaceSpaceSettingsCodeEditorAppSettingsDefaultResourceSpecToTerraform(struct.defaultResourceSpec),
    };
}
exports.sagemakerSpaceSpaceSettingsCodeEditorAppSettingsToTerraform = sagemakerSpaceSpaceSettingsCodeEditorAppSettingsToTerraform;
function sagemakerSpaceSpaceSettingsCodeEditorAppSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        default_resource_spec: {
            value: sagemakerSpaceSpaceSettingsCodeEditorAppSettingsDefaultResourceSpecToHclTerraform(struct.defaultResourceSpec),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerSpaceSpaceSettingsCodeEditorAppSettingsDefaultResourceSpecList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerSpaceSpaceSettingsCodeEditorAppSettingsToHclTerraform = sagemakerSpaceSpaceSettingsCodeEditorAppSettingsToHclTerraform;
class SagemakerSpaceSpaceSettingsCodeEditorAppSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // default_resource_spec - computed: false, optional: false, required: true
        this._defaultResourceSpec = new SagemakerSpaceSpaceSettingsCodeEditorAppSettingsDefaultResourceSpecOutputReference(this, "default_resource_spec");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._defaultResourceSpec?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultResourceSpec = this._defaultResourceSpec?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._defaultResourceSpec.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._defaultResourceSpec.internalValue = value.defaultResourceSpec;
        }
    }
    get defaultResourceSpec() {
        return this._defaultResourceSpec;
    }
    putDefaultResourceSpec(value) {
        this._defaultResourceSpec.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get defaultResourceSpecInput() {
        return this._defaultResourceSpec.internalValue;
    }
}
exports.SagemakerSpaceSpaceSettingsCodeEditorAppSettingsOutputReference = SagemakerSpaceSpaceSettingsCodeEditorAppSettingsOutputReference;
_c = JSII_RTTI_SYMBOL_1;
SagemakerSpaceSpaceSettingsCodeEditorAppSettingsOutputReference[_c] = { fqn: "@cdktf/provider-aws.sagemakerSpace.SagemakerSpaceSpaceSettingsCodeEditorAppSettingsOutputReference", version: "19.15.0" };
function sagemakerSpaceSpaceSettingsCustomFileSystemEfsFileSystemToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        file_system_id: cdktf.stringToTerraform(struct.fileSystemId),
    };
}
exports.sagemakerSpaceSpaceSettingsCustomFileSystemEfsFileSystemToTerraform = sagemakerSpaceSpaceSettingsCustomFileSystemEfsFileSystemToTerraform;
function sagemakerSpaceSpaceSettingsCustomFileSystemEfsFileSystemToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        file_system_id: {
            value: cdktf.stringToHclTerraform(struct.fileSystemId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerSpaceSpaceSettingsCustomFileSystemEfsFileSystemToHclTerraform = sagemakerSpaceSpaceSettingsCustomFileSystemEfsFileSystemToHclTerraform;
class SagemakerSpaceSpaceSettingsCustomFileSystemEfsFileSystemOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._fileSystemId !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileSystemId = this._fileSystemId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._fileSystemId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._fileSystemId = value.fileSystemId;
        }
    }
    get fileSystemId() {
        return this.getStringAttribute('file_system_id');
    }
    set fileSystemId(value) {
        this._fileSystemId = value;
    }
    // Temporarily expose input value. Use with caution.
    get fileSystemIdInput() {
        return this._fileSystemId;
    }
}
exports.SagemakerSpaceSpaceSettingsCustomFileSystemEfsFileSystemOutputReference = SagemakerSpaceSpaceSettingsCustomFileSystemEfsFileSystemOutputReference;
_d = JSII_RTTI_SYMBOL_1;
SagemakerSpaceSpaceSettingsCustomFileSystemEfsFileSystemOutputReference[_d] = { fqn: "@cdktf/provider-aws.sagemakerSpace.SagemakerSpaceSpaceSettingsCustomFileSystemEfsFileSystemOutputReference", version: "19.15.0" };
function sagemakerSpaceSpaceSettingsCustomFileSystemToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        efs_file_system: sagemakerSpaceSpaceSettingsCustomFileSystemEfsFileSystemToTerraform(struct.efsFileSystem),
    };
}
exports.sagemakerSpaceSpaceSettingsCustomFileSystemToTerraform = sagemakerSpaceSpaceSettingsCustomFileSystemToTerraform;
function sagemakerSpaceSpaceSettingsCustomFileSystemToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        efs_file_system: {
            value: sagemakerSpaceSpaceSettingsCustomFileSystemEfsFileSystemToHclTerraform(struct.efsFileSystem),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerSpaceSpaceSettingsCustomFileSystemEfsFileSystemList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerSpaceSpaceSettingsCustomFileSystemToHclTerraform = sagemakerSpaceSpaceSettingsCustomFileSystemToHclTerraform;
class SagemakerSpaceSpaceSettingsCustomFileSystemOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // efs_file_system - computed: false, optional: false, required: true
        this._efsFileSystem = new SagemakerSpaceSpaceSettingsCustomFileSystemEfsFileSystemOutputReference(this, "efs_file_system");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._efsFileSystem?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.efsFileSystem = this._efsFileSystem?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._efsFileSystem.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._efsFileSystem.internalValue = value.efsFileSystem;
        }
    }
    get efsFileSystem() {
        return this._efsFileSystem;
    }
    putEfsFileSystem(value) {
        this._efsFileSystem.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get efsFileSystemInput() {
        return this._efsFileSystem.internalValue;
    }
}
exports.SagemakerSpaceSpaceSettingsCustomFileSystemOutputReference = SagemakerSpaceSpaceSettingsCustomFileSystemOutputReference;
_e = JSII_RTTI_SYMBOL_1;
SagemakerSpaceSpaceSettingsCustomFileSystemOutputReference[_e] = { fqn: "@cdktf/provider-aws.sagemakerSpace.SagemakerSpaceSpaceSettingsCustomFileSystemOutputReference", version: "19.15.0" };
class SagemakerSpaceSpaceSettingsCustomFileSystemList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SagemakerSpaceSpaceSettingsCustomFileSystemOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SagemakerSpaceSpaceSettingsCustomFileSystemList = SagemakerSpaceSpaceSettingsCustomFileSystemList;
_f = JSII_RTTI_SYMBOL_1;
SagemakerSpaceSpaceSettingsCustomFileSystemList[_f] = { fqn: "@cdktf/provider-aws.sagemakerSpace.SagemakerSpaceSpaceSettingsCustomFileSystemList", version: "19.15.0" };
function sagemakerSpaceSpaceSettingsJupyterLabAppSettingsCodeRepositoryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        repository_url: cdktf.stringToTerraform(struct.repositoryUrl),
    };
}
exports.sagemakerSpaceSpaceSettingsJupyterLabAppSettingsCodeRepositoryToTerraform = sagemakerSpaceSpaceSettingsJupyterLabAppSettingsCodeRepositoryToTerraform;
function sagemakerSpaceSpaceSettingsJupyterLabAppSettingsCodeRepositoryToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        repository_url: {
            value: cdktf.stringToHclTerraform(struct.repositoryUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerSpaceSpaceSettingsJupyterLabAppSettingsCodeRepositoryToHclTerraform = sagemakerSpaceSpaceSettingsJupyterLabAppSettingsCodeRepositoryToHclTerraform;
class SagemakerSpaceSpaceSettingsJupyterLabAppSettingsCodeRepositoryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._repositoryUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.repositoryUrl = this._repositoryUrl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._repositoryUrl = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._repositoryUrl = value.repositoryUrl;
        }
    }
    get repositoryUrl() {
        return this.getStringAttribute('repository_url');
    }
    set repositoryUrl(value) {
        this._repositoryUrl = value;
    }
    // Temporarily expose input value. Use with caution.
    get repositoryUrlInput() {
        return this._repositoryUrl;
    }
}
exports.SagemakerSpaceSpaceSettingsJupyterLabAppSettingsCodeRepositoryOutputReference = SagemakerSpaceSpaceSettingsJupyterLabAppSettingsCodeRepositoryOutputReference;
_g = JSII_RTTI_SYMBOL_1;
SagemakerSpaceSpaceSettingsJupyterLabAppSettingsCodeRepositoryOutputReference[_g] = { fqn: "@cdktf/provider-aws.sagemakerSpace.SagemakerSpaceSpaceSettingsJupyterLabAppSettingsCodeRepositoryOutputReference", version: "19.15.0" };
class SagemakerSpaceSpaceSettingsJupyterLabAppSettingsCodeRepositoryList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SagemakerSpaceSpaceSettingsJupyterLabAppSettingsCodeRepositoryOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SagemakerSpaceSpaceSettingsJupyterLabAppSettingsCodeRepositoryList = SagemakerSpaceSpaceSettingsJupyterLabAppSettingsCodeRepositoryList;
_h = JSII_RTTI_SYMBOL_1;
SagemakerSpaceSpaceSettingsJupyterLabAppSettingsCodeRepositoryList[_h] = { fqn: "@cdktf/provider-aws.sagemakerSpace.SagemakerSpaceSpaceSettingsJupyterLabAppSettingsCodeRepositoryList", version: "19.15.0" };
function sagemakerSpaceSpaceSettingsJupyterLabAppSettingsDefaultResourceSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        lifecycle_config_arn: cdktf.stringToTerraform(struct.lifecycleConfigArn),
        sagemaker_image_arn: cdktf.stringToTerraform(struct.sagemakerImageArn),
        sagemaker_image_version_alias: cdktf.stringToTerraform(struct.sagemakerImageVersionAlias),
        sagemaker_image_version_arn: cdktf.stringToTerraform(struct.sagemakerImageVersionArn),
    };
}
exports.sagemakerSpaceSpaceSettingsJupyterLabAppSettingsDefaultResourceSpecToTerraform = sagemakerSpaceSpaceSettingsJupyterLabAppSettingsDefaultResourceSpecToTerraform;
function sagemakerSpaceSpaceSettingsJupyterLabAppSettingsDefaultResourceSpecToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        instance_type: {
            value: cdktf.stringToHclTerraform(struct.instanceType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        lifecycle_config_arn: {
            value: cdktf.stringToHclTerraform(struct.lifecycleConfigArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_arn: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_version_alias: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageVersionAlias),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_version_arn: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageVersionArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerSpaceSpaceSettingsJupyterLabAppSettingsDefaultResourceSpecToHclTerraform = sagemakerSpaceSpaceSettingsJupyterLabAppSettingsDefaultResourceSpecToHclTerraform;
class SagemakerSpaceSpaceSettingsJupyterLabAppSettingsDefaultResourceSpecOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._instanceType !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceType = this._instanceType;
        }
        if (this._lifecycleConfigArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.lifecycleConfigArn = this._lifecycleConfigArn;
        }
        if (this._sagemakerImageArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageArn = this._sagemakerImageArn;
        }
        if (this._sagemakerImageVersionAlias !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageVersionAlias = this._sagemakerImageVersionAlias;
        }
        if (this._sagemakerImageVersionArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageVersionArn = this._sagemakerImageVersionArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._instanceType = undefined;
            this._lifecycleConfigArn = undefined;
            this._sagemakerImageArn = undefined;
            this._sagemakerImageVersionAlias = undefined;
            this._sagemakerImageVersionArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._instanceType = value.instanceType;
            this._lifecycleConfigArn = value.lifecycleConfigArn;
            this._sagemakerImageArn = value.sagemakerImageArn;
            this._sagemakerImageVersionAlias = value.sagemakerImageVersionAlias;
            this._sagemakerImageVersionArn = value.sagemakerImageVersionArn;
        }
    }
    get instanceType() {
        return this.getStringAttribute('instance_type');
    }
    set instanceType(value) {
        this._instanceType = value;
    }
    resetInstanceType() {
        this._instanceType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceTypeInput() {
        return this._instanceType;
    }
    get lifecycleConfigArn() {
        return this.getStringAttribute('lifecycle_config_arn');
    }
    set lifecycleConfigArn(value) {
        this._lifecycleConfigArn = value;
    }
    resetLifecycleConfigArn() {
        this._lifecycleConfigArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifecycleConfigArnInput() {
        return this._lifecycleConfigArn;
    }
    get sagemakerImageArn() {
        return this.getStringAttribute('sagemaker_image_arn');
    }
    set sagemakerImageArn(value) {
        this._sagemakerImageArn = value;
    }
    resetSagemakerImageArn() {
        this._sagemakerImageArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageArnInput() {
        return this._sagemakerImageArn;
    }
    get sagemakerImageVersionAlias() {
        return this.getStringAttribute('sagemaker_image_version_alias');
    }
    set sagemakerImageVersionAlias(value) {
        this._sagemakerImageVersionAlias = value;
    }
    resetSagemakerImageVersionAlias() {
        this._sagemakerImageVersionAlias = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageVersionAliasInput() {
        return this._sagemakerImageVersionAlias;
    }
    get sagemakerImageVersionArn() {
        return this.getStringAttribute('sagemaker_image_version_arn');
    }
    set sagemakerImageVersionArn(value) {
        this._sagemakerImageVersionArn = value;
    }
    resetSagemakerImageVersionArn() {
        this._sagemakerImageVersionArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageVersionArnInput() {
        return this._sagemakerImageVersionArn;
    }
}
exports.SagemakerSpaceSpaceSettingsJupyterLabAppSettingsDefaultResourceSpecOutputReference = SagemakerSpaceSpaceSettingsJupyterLabAppSettingsDefaultResourceSpecOutputReference;
_j = JSII_RTTI_SYMBOL_1;
SagemakerSpaceSpaceSettingsJupyterLabAppSettingsDefaultResourceSpecOutputReference[_j] = { fqn: "@cdktf/provider-aws.sagemakerSpace.SagemakerSpaceSpaceSettingsJupyterLabAppSettingsDefaultResourceSpecOutputReference", version: "19.15.0" };
function sagemakerSpaceSpaceSettingsJupyterLabAppSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        code_repository: cdktf.listMapper(sagemakerSpaceSpaceSettingsJupyterLabAppSettingsCodeRepositoryToTerraform, true)(struct.codeRepository),
        default_resource_spec: sagemakerSpaceSpaceSettingsJupyterLabAppSettingsDefaultResourceSpecToTerraform(struct.defaultResourceSpec),
    };
}
exports.sagemakerSpaceSpaceSettingsJupyterLabAppSettingsToTerraform = sagemakerSpaceSpaceSettingsJupyterLabAppSettingsToTerraform;
function sagemakerSpaceSpaceSettingsJupyterLabAppSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        code_repository: {
            value: cdktf.listMapperHcl(sagemakerSpaceSpaceSettingsJupyterLabAppSettingsCodeRepositoryToHclTerraform, true)(struct.codeRepository),
            isBlock: true,
            type: "set",
            storageClassType: "SagemakerSpaceSpaceSettingsJupyterLabAppSettingsCodeRepositoryList",
        },
        default_resource_spec: {
            value: sagemakerSpaceSpaceSettingsJupyterLabAppSettingsDefaultResourceSpecToHclTerraform(struct.defaultResourceSpec),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerSpaceSpaceSettingsJupyterLabAppSettingsDefaultResourceSpecList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerSpaceSpaceSettingsJupyterLabAppSettingsToHclTerraform = sagemakerSpaceSpaceSettingsJupyterLabAppSettingsToHclTerraform;
class SagemakerSpaceSpaceSettingsJupyterLabAppSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // code_repository - computed: false, optional: true, required: false
        this._codeRepository = new SagemakerSpaceSpaceSettingsJupyterLabAppSettingsCodeRepositoryList(this, "code_repository", true);
        // default_resource_spec - computed: false, optional: false, required: true
        this._defaultResourceSpec = new SagemakerSpaceSpaceSettingsJupyterLabAppSettingsDefaultResourceSpecOutputReference(this, "default_resource_spec");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._codeRepository?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.codeRepository = this._codeRepository?.internalValue;
        }
        if (this._defaultResourceSpec?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultResourceSpec = this._defaultResourceSpec?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._codeRepository.internalValue = undefined;
            this._defaultResourceSpec.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._codeRepository.internalValue = value.codeRepository;
            this._defaultResourceSpec.internalValue = value.defaultResourceSpec;
        }
    }
    get codeRepository() {
        return this._codeRepository;
    }
    putCodeRepository(value) {
        this._codeRepository.internalValue = value;
    }
    resetCodeRepository() {
        this._codeRepository.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get codeRepositoryInput() {
        return this._codeRepository.internalValue;
    }
    get defaultResourceSpec() {
        return this._defaultResourceSpec;
    }
    putDefaultResourceSpec(value) {
        this._defaultResourceSpec.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get defaultResourceSpecInput() {
        return this._defaultResourceSpec.internalValue;
    }
}
exports.SagemakerSpaceSpaceSettingsJupyterLabAppSettingsOutputReference = SagemakerSpaceSpaceSettingsJupyterLabAppSettingsOutputReference;
_k = JSII_RTTI_SYMBOL_1;
SagemakerSpaceSpaceSettingsJupyterLabAppSettingsOutputReference[_k] = { fqn: "@cdktf/provider-aws.sagemakerSpace.SagemakerSpaceSpaceSettingsJupyterLabAppSettingsOutputReference", version: "19.15.0" };
function sagemakerSpaceSpaceSettingsJupyterServerAppSettingsCodeRepositoryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        repository_url: cdktf.stringToTerraform(struct.repositoryUrl),
    };
}
exports.sagemakerSpaceSpaceSettingsJupyterServerAppSettingsCodeRepositoryToTerraform = sagemakerSpaceSpaceSettingsJupyterServerAppSettingsCodeRepositoryToTerraform;
function sagemakerSpaceSpaceSettingsJupyterServerAppSettingsCodeRepositoryToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        repository_url: {
            value: cdktf.stringToHclTerraform(struct.repositoryUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerSpaceSpaceSettingsJupyterServerAppSettingsCodeRepositoryToHclTerraform = sagemakerSpaceSpaceSettingsJupyterServerAppSettingsCodeRepositoryToHclTerraform;
class SagemakerSpaceSpaceSettingsJupyterServerAppSettingsCodeRepositoryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._repositoryUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.repositoryUrl = this._repositoryUrl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._repositoryUrl = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._repositoryUrl = value.repositoryUrl;
        }
    }
    get repositoryUrl() {
        return this.getStringAttribute('repository_url');
    }
    set repositoryUrl(value) {
        this._repositoryUrl = value;
    }
    // Temporarily expose input value. Use with caution.
    get repositoryUrlInput() {
        return this._repositoryUrl;
    }
}
exports.SagemakerSpaceSpaceSettingsJupyterServerAppSettingsCodeRepositoryOutputReference = SagemakerSpaceSpaceSettingsJupyterServerAppSettingsCodeRepositoryOutputReference;
_l = JSII_RTTI_SYMBOL_1;
SagemakerSpaceSpaceSettingsJupyterServerAppSettingsCodeRepositoryOutputReference[_l] = { fqn: "@cdktf/provider-aws.sagemakerSpace.SagemakerSpaceSpaceSettingsJupyterServerAppSettingsCodeRepositoryOutputReference", version: "19.15.0" };
class SagemakerSpaceSpaceSettingsJupyterServerAppSettingsCodeRepositoryList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SagemakerSpaceSpaceSettingsJupyterServerAppSettingsCodeRepositoryOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SagemakerSpaceSpaceSettingsJupyterServerAppSettingsCodeRepositoryList = SagemakerSpaceSpaceSettingsJupyterServerAppSettingsCodeRepositoryList;
_m = JSII_RTTI_SYMBOL_1;
SagemakerSpaceSpaceSettingsJupyterServerAppSettingsCodeRepositoryList[_m] = { fqn: "@cdktf/provider-aws.sagemakerSpace.SagemakerSpaceSpaceSettingsJupyterServerAppSettingsCodeRepositoryList", version: "19.15.0" };
function sagemakerSpaceSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        lifecycle_config_arn: cdktf.stringToTerraform(struct.lifecycleConfigArn),
        sagemaker_image_arn: cdktf.stringToTerraform(struct.sagemakerImageArn),
        sagemaker_image_version_alias: cdktf.stringToTerraform(struct.sagemakerImageVersionAlias),
        sagemaker_image_version_arn: cdktf.stringToTerraform(struct.sagemakerImageVersionArn),
    };
}
exports.sagemakerSpaceSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform = sagemakerSpaceSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform;
function sagemakerSpaceSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        instance_type: {
            value: cdktf.stringToHclTerraform(struct.instanceType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        lifecycle_config_arn: {
            value: cdktf.stringToHclTerraform(struct.lifecycleConfigArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_arn: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_version_alias: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageVersionAlias),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_version_arn: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageVersionArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerSpaceSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecToHclTerraform = sagemakerSpaceSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecToHclTerraform;
class SagemakerSpaceSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._instanceType !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceType = this._instanceType;
        }
        if (this._lifecycleConfigArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.lifecycleConfigArn = this._lifecycleConfigArn;
        }
        if (this._sagemakerImageArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageArn = this._sagemakerImageArn;
        }
        if (this._sagemakerImageVersionAlias !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageVersionAlias = this._sagemakerImageVersionAlias;
        }
        if (this._sagemakerImageVersionArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageVersionArn = this._sagemakerImageVersionArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._instanceType = undefined;
            this._lifecycleConfigArn = undefined;
            this._sagemakerImageArn = undefined;
            this._sagemakerImageVersionAlias = undefined;
            this._sagemakerImageVersionArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._instanceType = value.instanceType;
            this._lifecycleConfigArn = value.lifecycleConfigArn;
            this._sagemakerImageArn = value.sagemakerImageArn;
            this._sagemakerImageVersionAlias = value.sagemakerImageVersionAlias;
            this._sagemakerImageVersionArn = value.sagemakerImageVersionArn;
        }
    }
    get instanceType() {
        return this.getStringAttribute('instance_type');
    }
    set instanceType(value) {
        this._instanceType = value;
    }
    resetInstanceType() {
        this._instanceType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceTypeInput() {
        return this._instanceType;
    }
    get lifecycleConfigArn() {
        return this.getStringAttribute('lifecycle_config_arn');
    }
    set lifecycleConfigArn(value) {
        this._lifecycleConfigArn = value;
    }
    resetLifecycleConfigArn() {
        this._lifecycleConfigArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifecycleConfigArnInput() {
        return this._lifecycleConfigArn;
    }
    get sagemakerImageArn() {
        return this.getStringAttribute('sagemaker_image_arn');
    }
    set sagemakerImageArn(value) {
        this._sagemakerImageArn = value;
    }
    resetSagemakerImageArn() {
        this._sagemakerImageArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageArnInput() {
        return this._sagemakerImageArn;
    }
    get sagemakerImageVersionAlias() {
        return this.getStringAttribute('sagemaker_image_version_alias');
    }
    set sagemakerImageVersionAlias(value) {
        this._sagemakerImageVersionAlias = value;
    }
    resetSagemakerImageVersionAlias() {
        this._sagemakerImageVersionAlias = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageVersionAliasInput() {
        return this._sagemakerImageVersionAlias;
    }
    get sagemakerImageVersionArn() {
        return this.getStringAttribute('sagemaker_image_version_arn');
    }
    set sagemakerImageVersionArn(value) {
        this._sagemakerImageVersionArn = value;
    }
    resetSagemakerImageVersionArn() {
        this._sagemakerImageVersionArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageVersionArnInput() {
        return this._sagemakerImageVersionArn;
    }
}
exports.SagemakerSpaceSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecOutputReference = SagemakerSpaceSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecOutputReference;
_o = JSII_RTTI_SYMBOL_1;
SagemakerSpaceSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecOutputReference[_o] = { fqn: "@cdktf/provider-aws.sagemakerSpace.SagemakerSpaceSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecOutputReference", version: "19.15.0" };
function sagemakerSpaceSpaceSettingsJupyterServerAppSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        lifecycle_config_arns: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.lifecycleConfigArns),
        code_repository: cdktf.listMapper(sagemakerSpaceSpaceSettingsJupyterServerAppSettingsCodeRepositoryToTerraform, true)(struct.codeRepository),
        default_resource_spec: sagemakerSpaceSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform(struct.defaultResourceSpec),
    };
}
exports.sagemakerSpaceSpaceSettingsJupyterServerAppSettingsToTerraform = sagemakerSpaceSpaceSettingsJupyterServerAppSettingsToTerraform;
function sagemakerSpaceSpaceSettingsJupyterServerAppSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        lifecycle_config_arns: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.lifecycleConfigArns),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        code_repository: {
            value: cdktf.listMapperHcl(sagemakerSpaceSpaceSettingsJupyterServerAppSettingsCodeRepositoryToHclTerraform, true)(struct.codeRepository),
            isBlock: true,
            type: "set",
            storageClassType: "SagemakerSpaceSpaceSettingsJupyterServerAppSettingsCodeRepositoryList",
        },
        default_resource_spec: {
            value: sagemakerSpaceSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecToHclTerraform(struct.defaultResourceSpec),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerSpaceSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerSpaceSpaceSettingsJupyterServerAppSettingsToHclTerraform = sagemakerSpaceSpaceSettingsJupyterServerAppSettingsToHclTerraform;
class SagemakerSpaceSpaceSettingsJupyterServerAppSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // code_repository - computed: false, optional: true, required: false
        this._codeRepository = new SagemakerSpaceSpaceSettingsJupyterServerAppSettingsCodeRepositoryList(this, "code_repository", true);
        // default_resource_spec - computed: false, optional: false, required: true
        this._defaultResourceSpec = new SagemakerSpaceSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecOutputReference(this, "default_resource_spec");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._lifecycleConfigArns !== undefined) {
            hasAnyValues = true;
            internalValueResult.lifecycleConfigArns = this._lifecycleConfigArns;
        }
        if (this._codeRepository?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.codeRepository = this._codeRepository?.internalValue;
        }
        if (this._defaultResourceSpec?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultResourceSpec = this._defaultResourceSpec?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._lifecycleConfigArns = undefined;
            this._codeRepository.internalValue = undefined;
            this._defaultResourceSpec.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._lifecycleConfigArns = value.lifecycleConfigArns;
            this._codeRepository.internalValue = value.codeRepository;
            this._defaultResourceSpec.internalValue = value.defaultResourceSpec;
        }
    }
    get lifecycleConfigArns() {
        return cdktf.Fn.tolist(this.getListAttribute('lifecycle_config_arns'));
    }
    set lifecycleConfigArns(value) {
        this._lifecycleConfigArns = value;
    }
    resetLifecycleConfigArns() {
        this._lifecycleConfigArns = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifecycleConfigArnsInput() {
        return this._lifecycleConfigArns;
    }
    get codeRepository() {
        return this._codeRepository;
    }
    putCodeRepository(value) {
        this._codeRepository.internalValue = value;
    }
    resetCodeRepository() {
        this._codeRepository.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get codeRepositoryInput() {
        return this._codeRepository.internalValue;
    }
    get defaultResourceSpec() {
        return this._defaultResourceSpec;
    }
    putDefaultResourceSpec(value) {
        this._defaultResourceSpec.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get defaultResourceSpecInput() {
        return this._defaultResourceSpec.internalValue;
    }
}
exports.SagemakerSpaceSpaceSettingsJupyterServerAppSettingsOutputReference = SagemakerSpaceSpaceSettingsJupyterServerAppSettingsOutputReference;
_p = JSII_RTTI_SYMBOL_1;
SagemakerSpaceSpaceSettingsJupyterServerAppSettingsOutputReference[_p] = { fqn: "@cdktf/provider-aws.sagemakerSpace.SagemakerSpaceSpaceSettingsJupyterServerAppSettingsOutputReference", version: "19.15.0" };
function sagemakerSpaceSpaceSettingsKernelGatewayAppSettingsCustomImageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        app_image_config_name: cdktf.stringToTerraform(struct.appImageConfigName),
        image_name: cdktf.stringToTerraform(struct.imageName),
        image_version_number: cdktf.numberToTerraform(struct.imageVersionNumber),
    };
}
exports.sagemakerSpaceSpaceSettingsKernelGatewayAppSettingsCustomImageToTerraform = sagemakerSpaceSpaceSettingsKernelGatewayAppSettingsCustomImageToTerraform;
function sagemakerSpaceSpaceSettingsKernelGatewayAppSettingsCustomImageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        app_image_config_name: {
            value: cdktf.stringToHclTerraform(struct.appImageConfigName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        image_name: {
            value: cdktf.stringToHclTerraform(struct.imageName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        image_version_number: {
            value: cdktf.numberToHclTerraform(struct.imageVersionNumber),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerSpaceSpaceSettingsKernelGatewayAppSettingsCustomImageToHclTerraform = sagemakerSpaceSpaceSettingsKernelGatewayAppSettingsCustomImageToHclTerraform;
class SagemakerSpaceSpaceSettingsKernelGatewayAppSettingsCustomImageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._appImageConfigName !== undefined) {
            hasAnyValues = true;
            internalValueResult.appImageConfigName = this._appImageConfigName;
        }
        if (this._imageName !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageName = this._imageName;
        }
        if (this._imageVersionNumber !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageVersionNumber = this._imageVersionNumber;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._appImageConfigName = undefined;
            this._imageName = undefined;
            this._imageVersionNumber = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._appImageConfigName = value.appImageConfigName;
            this._imageName = value.imageName;
            this._imageVersionNumber = value.imageVersionNumber;
        }
    }
    get appImageConfigName() {
        return this.getStringAttribute('app_image_config_name');
    }
    set appImageConfigName(value) {
        this._appImageConfigName = value;
    }
    // Temporarily expose input value. Use with caution.
    get appImageConfigNameInput() {
        return this._appImageConfigName;
    }
    get imageName() {
        return this.getStringAttribute('image_name');
    }
    set imageName(value) {
        this._imageName = value;
    }
    // Temporarily expose input value. Use with caution.
    get imageNameInput() {
        return this._imageName;
    }
    get imageVersionNumber() {
        return this.getNumberAttribute('image_version_number');
    }
    set imageVersionNumber(value) {
        this._imageVersionNumber = value;
    }
    resetImageVersionNumber() {
        this._imageVersionNumber = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageVersionNumberInput() {
        return this._imageVersionNumber;
    }
}
exports.SagemakerSpaceSpaceSettingsKernelGatewayAppSettingsCustomImageOutputReference = SagemakerSpaceSpaceSettingsKernelGatewayAppSettingsCustomImageOutputReference;
_q = JSII_RTTI_SYMBOL_1;
SagemakerSpaceSpaceSettingsKernelGatewayAppSettingsCustomImageOutputReference[_q] = { fqn: "@cdktf/provider-aws.sagemakerSpace.SagemakerSpaceSpaceSettingsKernelGatewayAppSettingsCustomImageOutputReference", version: "19.15.0" };
class SagemakerSpaceSpaceSettingsKernelGatewayAppSettingsCustomImageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SagemakerSpaceSpaceSettingsKernelGatewayAppSettingsCustomImageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SagemakerSpaceSpaceSettingsKernelGatewayAppSettingsCustomImageList = SagemakerSpaceSpaceSettingsKernelGatewayAppSettingsCustomImageList;
_r = JSII_RTTI_SYMBOL_1;
SagemakerSpaceSpaceSettingsKernelGatewayAppSettingsCustomImageList[_r] = { fqn: "@cdktf/provider-aws.sagemakerSpace.SagemakerSpaceSpaceSettingsKernelGatewayAppSettingsCustomImageList", version: "19.15.0" };
function sagemakerSpaceSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        lifecycle_config_arn: cdktf.stringToTerraform(struct.lifecycleConfigArn),
        sagemaker_image_arn: cdktf.stringToTerraform(struct.sagemakerImageArn),
        sagemaker_image_version_alias: cdktf.stringToTerraform(struct.sagemakerImageVersionAlias),
        sagemaker_image_version_arn: cdktf.stringToTerraform(struct.sagemakerImageVersionArn),
    };
}
exports.sagemakerSpaceSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform = sagemakerSpaceSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform;
function sagemakerSpaceSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        instance_type: {
            value: cdktf.stringToHclTerraform(struct.instanceType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        lifecycle_config_arn: {
            value: cdktf.stringToHclTerraform(struct.lifecycleConfigArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_arn: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_version_alias: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageVersionAlias),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_version_arn: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageVersionArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerSpaceSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecToHclTerraform = sagemakerSpaceSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecToHclTerraform;
class SagemakerSpaceSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._instanceType !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceType = this._instanceType;
        }
        if (this._lifecycleConfigArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.lifecycleConfigArn = this._lifecycleConfigArn;
        }
        if (this._sagemakerImageArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageArn = this._sagemakerImageArn;
        }
        if (this._sagemakerImageVersionAlias !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageVersionAlias = this._sagemakerImageVersionAlias;
        }
        if (this._sagemakerImageVersionArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageVersionArn = this._sagemakerImageVersionArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._instanceType = undefined;
            this._lifecycleConfigArn = undefined;
            this._sagemakerImageArn = undefined;
            this._sagemakerImageVersionAlias = undefined;
            this._sagemakerImageVersionArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._instanceType = value.instanceType;
            this._lifecycleConfigArn = value.lifecycleConfigArn;
            this._sagemakerImageArn = value.sagemakerImageArn;
            this._sagemakerImageVersionAlias = value.sagemakerImageVersionAlias;
            this._sagemakerImageVersionArn = value.sagemakerImageVersionArn;
        }
    }
    get instanceType() {
        return this.getStringAttribute('instance_type');
    }
    set instanceType(value) {
        this._instanceType = value;
    }
    resetInstanceType() {
        this._instanceType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceTypeInput() {
        return this._instanceType;
    }
    get lifecycleConfigArn() {
        return this.getStringAttribute('lifecycle_config_arn');
    }
    set lifecycleConfigArn(value) {
        this._lifecycleConfigArn = value;
    }
    resetLifecycleConfigArn() {
        this._lifecycleConfigArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifecycleConfigArnInput() {
        return this._lifecycleConfigArn;
    }
    get sagemakerImageArn() {
        return this.getStringAttribute('sagemaker_image_arn');
    }
    set sagemakerImageArn(value) {
        this._sagemakerImageArn = value;
    }
    resetSagemakerImageArn() {
        this._sagemakerImageArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageArnInput() {
        return this._sagemakerImageArn;
    }
    get sagemakerImageVersionAlias() {
        return this.getStringAttribute('sagemaker_image_version_alias');
    }
    set sagemakerImageVersionAlias(value) {
        this._sagemakerImageVersionAlias = value;
    }
    resetSagemakerImageVersionAlias() {
        this._sagemakerImageVersionAlias = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageVersionAliasInput() {
        return this._sagemakerImageVersionAlias;
    }
    get sagemakerImageVersionArn() {
        return this.getStringAttribute('sagemaker_image_version_arn');
    }
    set sagemakerImageVersionArn(value) {
        this._sagemakerImageVersionArn = value;
    }
    resetSagemakerImageVersionArn() {
        this._sagemakerImageVersionArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageVersionArnInput() {
        return this._sagemakerImageVersionArn;
    }
}
exports.SagemakerSpaceSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecOutputReference = SagemakerSpaceSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecOutputReference;
_s = JSII_RTTI_SYMBOL_1;
SagemakerSpaceSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecOutputReference[_s] = { fqn: "@cdktf/provider-aws.sagemakerSpace.SagemakerSpaceSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecOutputReference", version: "19.15.0" };
function sagemakerSpaceSpaceSettingsKernelGatewayAppSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        lifecycle_config_arns: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.lifecycleConfigArns),
        custom_image: cdktf.listMapper(sagemakerSpaceSpaceSettingsKernelGatewayAppSettingsCustomImageToTerraform, true)(struct.customImage),
        default_resource_spec: sagemakerSpaceSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform(struct.defaultResourceSpec),
    };
}
exports.sagemakerSpaceSpaceSettingsKernelGatewayAppSettingsToTerraform = sagemakerSpaceSpaceSettingsKernelGatewayAppSettingsToTerraform;
function sagemakerSpaceSpaceSettingsKernelGatewayAppSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        lifecycle_config_arns: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.lifecycleConfigArns),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        custom_image: {
            value: cdktf.listMapperHcl(sagemakerSpaceSpaceSettingsKernelGatewayAppSettingsCustomImageToHclTerraform, true)(struct.customImage),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerSpaceSpaceSettingsKernelGatewayAppSettingsCustomImageList",
        },
        default_resource_spec: {
            value: sagemakerSpaceSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecToHclTerraform(struct.defaultResourceSpec),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerSpaceSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerSpaceSpaceSettingsKernelGatewayAppSettingsToHclTerraform = sagemakerSpaceSpaceSettingsKernelGatewayAppSettingsToHclTerraform;
class SagemakerSpaceSpaceSettingsKernelGatewayAppSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // custom_image - computed: false, optional: true, required: false
        this._customImage = new SagemakerSpaceSpaceSettingsKernelGatewayAppSettingsCustomImageList(this, "custom_image", false);
        // default_resource_spec - computed: false, optional: false, required: true
        this._defaultResourceSpec = new SagemakerSpaceSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecOutputReference(this, "default_resource_spec");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._lifecycleConfigArns !== undefined) {
            hasAnyValues = true;
            internalValueResult.lifecycleConfigArns = this._lifecycleConfigArns;
        }
        if (this._customImage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customImage = this._customImage?.internalValue;
        }
        if (this._defaultResourceSpec?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultResourceSpec = this._defaultResourceSpec?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._lifecycleConfigArns = undefined;
            this._customImage.internalValue = undefined;
            this._defaultResourceSpec.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._lifecycleConfigArns = value.lifecycleConfigArns;
            this._customImage.internalValue = value.customImage;
            this._defaultResourceSpec.internalValue = value.defaultResourceSpec;
        }
    }
    get lifecycleConfigArns() {
        return cdktf.Fn.tolist(this.getListAttribute('lifecycle_config_arns'));
    }
    set lifecycleConfigArns(value) {
        this._lifecycleConfigArns = value;
    }
    resetLifecycleConfigArns() {
        this._lifecycleConfigArns = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifecycleConfigArnsInput() {
        return this._lifecycleConfigArns;
    }
    get customImage() {
        return this._customImage;
    }
    putCustomImage(value) {
        this._customImage.internalValue = value;
    }
    resetCustomImage() {
        this._customImage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customImageInput() {
        return this._customImage.internalValue;
    }
    get defaultResourceSpec() {
        return this._defaultResourceSpec;
    }
    putDefaultResourceSpec(value) {
        this._defaultResourceSpec.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get defaultResourceSpecInput() {
        return this._defaultResourceSpec.internalValue;
    }
}
exports.SagemakerSpaceSpaceSettingsKernelGatewayAppSettingsOutputReference = SagemakerSpaceSpaceSettingsKernelGatewayAppSettingsOutputReference;
_t = JSII_RTTI_SYMBOL_1;
SagemakerSpaceSpaceSettingsKernelGatewayAppSettingsOutputReference[_t] = { fqn: "@cdktf/provider-aws.sagemakerSpace.SagemakerSpaceSpaceSettingsKernelGatewayAppSettingsOutputReference", version: "19.15.0" };
function sagemakerSpaceSpaceSettingsSpaceStorageSettingsEbsStorageSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ebs_volume_size_in_gb: cdktf.numberToTerraform(struct.ebsVolumeSizeInGb),
    };
}
exports.sagemakerSpaceSpaceSettingsSpaceStorageSettingsEbsStorageSettingsToTerraform = sagemakerSpaceSpaceSettingsSpaceStorageSettingsEbsStorageSettingsToTerraform;
function sagemakerSpaceSpaceSettingsSpaceStorageSettingsEbsStorageSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        ebs_volume_size_in_gb: {
            value: cdktf.numberToHclTerraform(struct.ebsVolumeSizeInGb),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerSpaceSpaceSettingsSpaceStorageSettingsEbsStorageSettingsToHclTerraform = sagemakerSpaceSpaceSettingsSpaceStorageSettingsEbsStorageSettingsToHclTerraform;
class SagemakerSpaceSpaceSettingsSpaceStorageSettingsEbsStorageSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._ebsVolumeSizeInGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.ebsVolumeSizeInGb = this._ebsVolumeSizeInGb;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._ebsVolumeSizeInGb = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._ebsVolumeSizeInGb = value.ebsVolumeSizeInGb;
        }
    }
    get ebsVolumeSizeInGb() {
        return this.getNumberAttribute('ebs_volume_size_in_gb');
    }
    set ebsVolumeSizeInGb(value) {
        this._ebsVolumeSizeInGb = value;
    }
    // Temporarily expose input value. Use with caution.
    get ebsVolumeSizeInGbInput() {
        return this._ebsVolumeSizeInGb;
    }
}
exports.SagemakerSpaceSpaceSettingsSpaceStorageSettingsEbsStorageSettingsOutputReference = SagemakerSpaceSpaceSettingsSpaceStorageSettingsEbsStorageSettingsOutputReference;
_u = JSII_RTTI_SYMBOL_1;
SagemakerSpaceSpaceSettingsSpaceStorageSettingsEbsStorageSettingsOutputReference[_u] = { fqn: "@cdktf/provider-aws.sagemakerSpace.SagemakerSpaceSpaceSettingsSpaceStorageSettingsEbsStorageSettingsOutputReference", version: "19.15.0" };
function sagemakerSpaceSpaceSettingsSpaceStorageSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ebs_storage_settings: sagemakerSpaceSpaceSettingsSpaceStorageSettingsEbsStorageSettingsToTerraform(struct.ebsStorageSettings),
    };
}
exports.sagemakerSpaceSpaceSettingsSpaceStorageSettingsToTerraform = sagemakerSpaceSpaceSettingsSpaceStorageSettingsToTerraform;
function sagemakerSpaceSpaceSettingsSpaceStorageSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        ebs_storage_settings: {
            value: sagemakerSpaceSpaceSettingsSpaceStorageSettingsEbsStorageSettingsToHclTerraform(struct.ebsStorageSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerSpaceSpaceSettingsSpaceStorageSettingsEbsStorageSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerSpaceSpaceSettingsSpaceStorageSettingsToHclTerraform = sagemakerSpaceSpaceSettingsSpaceStorageSettingsToHclTerraform;
class SagemakerSpaceSpaceSettingsSpaceStorageSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // ebs_storage_settings - computed: false, optional: false, required: true
        this._ebsStorageSettings = new SagemakerSpaceSpaceSettingsSpaceStorageSettingsEbsStorageSettingsOutputReference(this, "ebs_storage_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._ebsStorageSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ebsStorageSettings = this._ebsStorageSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._ebsStorageSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._ebsStorageSettings.internalValue = value.ebsStorageSettings;
        }
    }
    get ebsStorageSettings() {
        return this._ebsStorageSettings;
    }
    putEbsStorageSettings(value) {
        this._ebsStorageSettings.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get ebsStorageSettingsInput() {
        return this._ebsStorageSettings.internalValue;
    }
}
exports.SagemakerSpaceSpaceSettingsSpaceStorageSettingsOutputReference = SagemakerSpaceSpaceSettingsSpaceStorageSettingsOutputReference;
_v = JSII_RTTI_SYMBOL_1;
SagemakerSpaceSpaceSettingsSpaceStorageSettingsOutputReference[_v] = { fqn: "@cdktf/provider-aws.sagemakerSpace.SagemakerSpaceSpaceSettingsSpaceStorageSettingsOutputReference", version: "19.15.0" };
function sagemakerSpaceSpaceSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        app_type: cdktf.stringToTerraform(struct.appType),
        code_editor_app_settings: sagemakerSpaceSpaceSettingsCodeEditorAppSettingsToTerraform(struct.codeEditorAppSettings),
        custom_file_system: cdktf.listMapper(sagemakerSpaceSpaceSettingsCustomFileSystemToTerraform, true)(struct.customFileSystem),
        jupyter_lab_app_settings: sagemakerSpaceSpaceSettingsJupyterLabAppSettingsToTerraform(struct.jupyterLabAppSettings),
        jupyter_server_app_settings: sagemakerSpaceSpaceSettingsJupyterServerAppSettingsToTerraform(struct.jupyterServerAppSettings),
        kernel_gateway_app_settings: sagemakerSpaceSpaceSettingsKernelGatewayAppSettingsToTerraform(struct.kernelGatewayAppSettings),
        space_storage_settings: sagemakerSpaceSpaceSettingsSpaceStorageSettingsToTerraform(struct.spaceStorageSettings),
    };
}
exports.sagemakerSpaceSpaceSettingsToTerraform = sagemakerSpaceSpaceSettingsToTerraform;
function sagemakerSpaceSpaceSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        app_type: {
            value: cdktf.stringToHclTerraform(struct.appType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        code_editor_app_settings: {
            value: sagemakerSpaceSpaceSettingsCodeEditorAppSettingsToHclTerraform(struct.codeEditorAppSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerSpaceSpaceSettingsCodeEditorAppSettingsList",
        },
        custom_file_system: {
            value: cdktf.listMapperHcl(sagemakerSpaceSpaceSettingsCustomFileSystemToHclTerraform, true)(struct.customFileSystem),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerSpaceSpaceSettingsCustomFileSystemList",
        },
        jupyter_lab_app_settings: {
            value: sagemakerSpaceSpaceSettingsJupyterLabAppSettingsToHclTerraform(struct.jupyterLabAppSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerSpaceSpaceSettingsJupyterLabAppSettingsList",
        },
        jupyter_server_app_settings: {
            value: sagemakerSpaceSpaceSettingsJupyterServerAppSettingsToHclTerraform(struct.jupyterServerAppSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerSpaceSpaceSettingsJupyterServerAppSettingsList",
        },
        kernel_gateway_app_settings: {
            value: sagemakerSpaceSpaceSettingsKernelGatewayAppSettingsToHclTerraform(struct.kernelGatewayAppSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerSpaceSpaceSettingsKernelGatewayAppSettingsList",
        },
        space_storage_settings: {
            value: sagemakerSpaceSpaceSettingsSpaceStorageSettingsToHclTerraform(struct.spaceStorageSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerSpaceSpaceSettingsSpaceStorageSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerSpaceSpaceSettingsToHclTerraform = sagemakerSpaceSpaceSettingsToHclTerraform;
class SagemakerSpaceSpaceSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // code_editor_app_settings - computed: false, optional: true, required: false
        this._codeEditorAppSettings = new SagemakerSpaceSpaceSettingsCodeEditorAppSettingsOutputReference(this, "code_editor_app_settings");
        // custom_file_system - computed: false, optional: true, required: false
        this._customFileSystem = new SagemakerSpaceSpaceSettingsCustomFileSystemList(this, "custom_file_system", false);
        // jupyter_lab_app_settings - computed: false, optional: true, required: false
        this._jupyterLabAppSettings = new SagemakerSpaceSpaceSettingsJupyterLabAppSettingsOutputReference(this, "jupyter_lab_app_settings");
        // jupyter_server_app_settings - computed: false, optional: true, required: false
        this._jupyterServerAppSettings = new SagemakerSpaceSpaceSettingsJupyterServerAppSettingsOutputReference(this, "jupyter_server_app_settings");
        // kernel_gateway_app_settings - computed: false, optional: true, required: false
        this._kernelGatewayAppSettings = new SagemakerSpaceSpaceSettingsKernelGatewayAppSettingsOutputReference(this, "kernel_gateway_app_settings");
        // space_storage_settings - computed: false, optional: true, required: false
        this._spaceStorageSettings = new SagemakerSpaceSpaceSettingsSpaceStorageSettingsOutputReference(this, "space_storage_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._appType !== undefined) {
            hasAnyValues = true;
            internalValueResult.appType = this._appType;
        }
        if (this._codeEditorAppSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.codeEditorAppSettings = this._codeEditorAppSettings?.internalValue;
        }
        if (this._customFileSystem?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customFileSystem = this._customFileSystem?.internalValue;
        }
        if (this._jupyterLabAppSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.jupyterLabAppSettings = this._jupyterLabAppSettings?.internalValue;
        }
        if (this._jupyterServerAppSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.jupyterServerAppSettings = this._jupyterServerAppSettings?.internalValue;
        }
        if (this._kernelGatewayAppSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.kernelGatewayAppSettings = this._kernelGatewayAppSettings?.internalValue;
        }
        if (this._spaceStorageSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.spaceStorageSettings = this._spaceStorageSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._appType = undefined;
            this._codeEditorAppSettings.internalValue = undefined;
            this._customFileSystem.internalValue = undefined;
            this._jupyterLabAppSettings.internalValue = undefined;
            this._jupyterServerAppSettings.internalValue = undefined;
            this._kernelGatewayAppSettings.internalValue = undefined;
            this._spaceStorageSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._appType = value.appType;
            this._codeEditorAppSettings.internalValue = value.codeEditorAppSettings;
            this._customFileSystem.internalValue = value.customFileSystem;
            this._jupyterLabAppSettings.internalValue = value.jupyterLabAppSettings;
            this._jupyterServerAppSettings.internalValue = value.jupyterServerAppSettings;
            this._kernelGatewayAppSettings.internalValue = value.kernelGatewayAppSettings;
            this._spaceStorageSettings.internalValue = value.spaceStorageSettings;
        }
    }
    get appType() {
        return this.getStringAttribute('app_type');
    }
    set appType(value) {
        this._appType = value;
    }
    resetAppType() {
        this._appType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get appTypeInput() {
        return this._appType;
    }
    get codeEditorAppSettings() {
        return this._codeEditorAppSettings;
    }
    putCodeEditorAppSettings(value) {
        this._codeEditorAppSettings.internalValue = value;
    }
    resetCodeEditorAppSettings() {
        this._codeEditorAppSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get codeEditorAppSettingsInput() {
        return this._codeEditorAppSettings.internalValue;
    }
    get customFileSystem() {
        return this._customFileSystem;
    }
    putCustomFileSystem(value) {
        this._customFileSystem.internalValue = value;
    }
    resetCustomFileSystem() {
        this._customFileSystem.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customFileSystemInput() {
        return this._customFileSystem.internalValue;
    }
    get jupyterLabAppSettings() {
        return this._jupyterLabAppSettings;
    }
    putJupyterLabAppSettings(value) {
        this._jupyterLabAppSettings.internalValue = value;
    }
    resetJupyterLabAppSettings() {
        this._jupyterLabAppSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jupyterLabAppSettingsInput() {
        return this._jupyterLabAppSettings.internalValue;
    }
    get jupyterServerAppSettings() {
        return this._jupyterServerAppSettings;
    }
    putJupyterServerAppSettings(value) {
        this._jupyterServerAppSettings.internalValue = value;
    }
    resetJupyterServerAppSettings() {
        this._jupyterServerAppSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jupyterServerAppSettingsInput() {
        return this._jupyterServerAppSettings.internalValue;
    }
    get kernelGatewayAppSettings() {
        return this._kernelGatewayAppSettings;
    }
    putKernelGatewayAppSettings(value) {
        this._kernelGatewayAppSettings.internalValue = value;
    }
    resetKernelGatewayAppSettings() {
        this._kernelGatewayAppSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kernelGatewayAppSettingsInput() {
        return this._kernelGatewayAppSettings.internalValue;
    }
    get spaceStorageSettings() {
        return this._spaceStorageSettings;
    }
    putSpaceStorageSettings(value) {
        this._spaceStorageSettings.internalValue = value;
    }
    resetSpaceStorageSettings() {
        this._spaceStorageSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get spaceStorageSettingsInput() {
        return this._spaceStorageSettings.internalValue;
    }
}
exports.SagemakerSpaceSpaceSettingsOutputReference = SagemakerSpaceSpaceSettingsOutputReference;
_w = JSII_RTTI_SYMBOL_1;
SagemakerSpaceSpaceSettingsOutputReference[_w] = { fqn: "@cdktf/provider-aws.sagemakerSpace.SagemakerSpaceSpaceSettingsOutputReference", version: "19.15.0" };
function sagemakerSpaceSpaceSharingSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        sharing_type: cdktf.stringToTerraform(struct.sharingType),
    };
}
exports.sagemakerSpaceSpaceSharingSettingsToTerraform = sagemakerSpaceSpaceSharingSettingsToTerraform;
function sagemakerSpaceSpaceSharingSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        sharing_type: {
            value: cdktf.stringToHclTerraform(struct.sharingType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerSpaceSpaceSharingSettingsToHclTerraform = sagemakerSpaceSpaceSharingSettingsToHclTerraform;
class SagemakerSpaceSpaceSharingSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._sharingType !== undefined) {
            hasAnyValues = true;
            internalValueResult.sharingType = this._sharingType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._sharingType = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._sharingType = value.sharingType;
        }
    }
    get sharingType() {
        return this.getStringAttribute('sharing_type');
    }
    set sharingType(value) {
        this._sharingType = value;
    }
    // Temporarily expose input value. Use with caution.
    get sharingTypeInput() {
        return this._sharingType;
    }
}
exports.SagemakerSpaceSpaceSharingSettingsOutputReference = SagemakerSpaceSpaceSharingSettingsOutputReference;
_x = JSII_RTTI_SYMBOL_1;
SagemakerSpaceSpaceSharingSettingsOutputReference[_x] = { fqn: "@cdktf/provider-aws.sagemakerSpace.SagemakerSpaceSpaceSharingSettingsOutputReference", version: "19.15.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/sagemaker_space aws_sagemaker_space}
*/
class SagemakerSpace extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a SagemakerSpace resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the SagemakerSpace to import
    * @param importFromId The id of the existing SagemakerSpace that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/sagemaker_space#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the SagemakerSpace to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_sagemaker_space", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/sagemaker_space aws_sagemaker_space} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SagemakerSpaceConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_sagemaker_space',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // ownership_settings - computed: false, optional: true, required: false
        this._ownershipSettings = new SagemakerSpaceOwnershipSettingsOutputReference(this, "ownership_settings");
        // space_settings - computed: false, optional: true, required: false
        this._spaceSettings = new SagemakerSpaceSpaceSettingsOutputReference(this, "space_settings");
        // space_sharing_settings - computed: false, optional: true, required: false
        this._spaceSharingSettings = new SagemakerSpaceSpaceSharingSettingsOutputReference(this, "space_sharing_settings");
        this._domainId = config.domainId;
        this._id = config.id;
        this._spaceDisplayName = config.spaceDisplayName;
        this._spaceName = config.spaceName;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._ownershipSettings.internalValue = config.ownershipSettings;
        this._spaceSettings.internalValue = config.spaceSettings;
        this._spaceSharingSettings.internalValue = config.spaceSharingSettings;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get domainId() {
        return this.getStringAttribute('domain_id');
    }
    set domainId(value) {
        this._domainId = value;
    }
    // Temporarily expose input value. Use with caution.
    get domainIdInput() {
        return this._domainId;
    }
    // home_efs_file_system_uid - computed: true, optional: false, required: false
    get homeEfsFileSystemUid() {
        return this.getStringAttribute('home_efs_file_system_uid');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get spaceDisplayName() {
        return this.getStringAttribute('space_display_name');
    }
    set spaceDisplayName(value) {
        this._spaceDisplayName = value;
    }
    resetSpaceDisplayName() {
        this._spaceDisplayName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get spaceDisplayNameInput() {
        return this._spaceDisplayName;
    }
    get spaceName() {
        return this.getStringAttribute('space_name');
    }
    set spaceName(value) {
        this._spaceName = value;
    }
    // Temporarily expose input value. Use with caution.
    get spaceNameInput() {
        return this._spaceName;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    // url - computed: true, optional: false, required: false
    get url() {
        return this.getStringAttribute('url');
    }
    get ownershipSettings() {
        return this._ownershipSettings;
    }
    putOwnershipSettings(value) {
        this._ownershipSettings.internalValue = value;
    }
    resetOwnershipSettings() {
        this._ownershipSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ownershipSettingsInput() {
        return this._ownershipSettings.internalValue;
    }
    get spaceSettings() {
        return this._spaceSettings;
    }
    putSpaceSettings(value) {
        this._spaceSettings.internalValue = value;
    }
    resetSpaceSettings() {
        this._spaceSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get spaceSettingsInput() {
        return this._spaceSettings.internalValue;
    }
    get spaceSharingSettings() {
        return this._spaceSharingSettings;
    }
    putSpaceSharingSettings(value) {
        this._spaceSharingSettings.internalValue = value;
    }
    resetSpaceSharingSettings() {
        this._spaceSharingSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get spaceSharingSettingsInput() {
        return this._spaceSharingSettings.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            domain_id: cdktf.stringToTerraform(this._domainId),
            id: cdktf.stringToTerraform(this._id),
            space_display_name: cdktf.stringToTerraform(this._spaceDisplayName),
            space_name: cdktf.stringToTerraform(this._spaceName),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            ownership_settings: sagemakerSpaceOwnershipSettingsToTerraform(this._ownershipSettings.internalValue),
            space_settings: sagemakerSpaceSpaceSettingsToTerraform(this._spaceSettings.internalValue),
            space_sharing_settings: sagemakerSpaceSpaceSharingSettingsToTerraform(this._spaceSharingSettings.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            domain_id: {
                value: cdktf.stringToHclTerraform(this._domainId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            space_display_name: {
                value: cdktf.stringToHclTerraform(this._spaceDisplayName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            space_name: {
                value: cdktf.stringToHclTerraform(this._spaceName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            tags: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tags),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            tags_all: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tagsAll),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            ownership_settings: {
                value: sagemakerSpaceOwnershipSettingsToHclTerraform(this._ownershipSettings.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "SagemakerSpaceOwnershipSettingsList",
            },
            space_settings: {
                value: sagemakerSpaceSpaceSettingsToHclTerraform(this._spaceSettings.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "SagemakerSpaceSpaceSettingsList",
            },
            space_sharing_settings: {
                value: sagemakerSpaceSpaceSharingSettingsToHclTerraform(this._spaceSharingSettings.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "SagemakerSpaceSpaceSharingSettingsList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.SagemakerSpace = SagemakerSpace;
_y = JSII_RTTI_SYMBOL_1;
SagemakerSpace[_y] = { fqn: "@cdktf/provider-aws.sagemakerSpace.SagemakerSpace", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
SagemakerSpace.tfResourceType = "aws_sagemaker_space";
//# sourceMappingURL=data:application/json;base64,