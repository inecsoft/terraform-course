import * as $internal from "@winglang/sdk/lib/core/types"
import { std } from "@winglang/sdk"
import { util } from "@winglang/sdk"
import { cloud } from "@winglang/sdk"
import { ui } from "@winglang/sdk"
import * as api from "./preflight.api-1";
import * as awscdk from "./preflight.awscdk-4";
import * as tfaws from "./preflight.tfaws-5";
import * as sim from "./preflight.sim-6";
export class WebSocket extends std.Resource implements api.IWebSocket
{
  constructor(scope: $internal.Construct, id: string, props: api.WebSocketProps);
  [$internal.INFLIGHT_SYMBOL]?: WebSocket$Inflight;
  _supportedOps(): $internal.OperationsOf<WebSocket$Inflight>;
  url: string;
  onConnect: (handler: $internal.Inflight<(arg0: string) => Promise<void>>) => void;
  onDisconnect: (handler: $internal.Inflight<(arg0: string) => Promise<void>>) => void;
  onMessage: (handler: $internal.Inflight<(arg0: string, arg1: string) => Promise<void>>) => void;
}
export class WebSocket$Inflight implements api.IWebSocket$Inflight
{
  constructor(props: api.WebSocketProps);
  sendMessage: (connectionId: string, message: string) => Promise<void>;
}