import * as $internal from "@winglang/sdk/lib/core/types"
import { std } from "@winglang/sdk"
import { aws } from "@winglang/sdk"
import { cloud } from "@winglang/sdk"
import * as commons from "./preflight.api-1";
import * as cdktf from "cdktf"
import * as tfaws from "@cdktf/provider-aws"
import * as awsapi from "./preflight.api-3";
export class WebSocket_tfaws extends std.Resource implements awsapi.IAwsWebSocket
{
  constructor(scope: $internal.Construct, id: string, props: commons.WebSocketProps);
  [$internal.INFLIGHT_SYMBOL]?: WebSocket_tfaws$Inflight;
  _supportedOps(): $internal.OperationsOf<WebSocket_tfaws$Inflight>;
  url: string;
  onLift: (host: std.IInflightHost, ops: (readonly (string)[])) => void;
  onConnect: (handler: $internal.Inflight<(arg0: string) => Promise<void>>) => void;
  onDisconnect: (handler: $internal.Inflight<(arg0: string) => Promise<void>>) => void;
  onMessage: (handler: $internal.Inflight<(arg0: string, arg1: string) => Promise<void>>) => void;
  addRoute: (handler: cloud.Function, routeKey: string) => void;
}
export class WebSocket_tfaws$Inflight implements awsapi.IAwsWebSocket$Inflight
{
  constructor(props: commons.WebSocketProps);
  sendMessage: (connectionId: string, message: string) => Promise<void>;
}