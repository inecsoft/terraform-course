"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerraformDataSource = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const tokens_1 = require("./tokens");
const terraform_element_1 = require("./terraform-element");
const terraform_resource_1 = require("./terraform-resource");
const util_1 = require("./util");
const tfExpression_1 = require("./tfExpression");
const terraform_count_1 = require("./terraform-count");
const assert = require("assert");
const TERRAFORM_DATA_SOURCE_SYMBOL = Symbol.for("cdktf/TerraformDataSource");
// eslint-disable-next-line jsdoc/require-jsdoc
class TerraformDataSource extends terraform_element_1.TerraformElement {
    constructor(scope, id, config) {
        super(scope, id, `data.${config.terraformResourceType}`);
        Object.defineProperty(this, TERRAFORM_DATA_SOURCE_SYMBOL, { value: true });
        this.terraformResourceType = config.terraformResourceType;
        this.terraformGeneratorMetadata = config.terraformGeneratorMetadata;
        if (Array.isArray(config.dependsOn)) {
            this.dependsOn = config.dependsOn.map((dependency) => (0, tfExpression_1.dependable)(dependency));
        }
        this.count = config.count;
        this.provider = config.provider;
        this.lifecycle = config.lifecycle;
        this.forEach = config.forEach;
    }
    static isTerraformDataSource(x) {
        return (x !== null && typeof x === "object" && TERRAFORM_DATA_SOURCE_SYMBOL in x);
    }
    getStringAttribute(terraformAttribute) {
        return tokens_1.Token.asString(this.interpolationForAttribute(terraformAttribute));
    }
    getNumberAttribute(terraformAttribute) {
        return tokens_1.Token.asNumber(this.interpolationForAttribute(terraformAttribute));
    }
    getListAttribute(terraformAttribute) {
        return tokens_1.Token.asList(this.interpolationForAttribute(terraformAttribute));
    }
    getBooleanAttribute(terraformAttribute) {
        return this.interpolationForAttribute(terraformAttribute);
    }
    getNumberListAttribute(terraformAttribute) {
        return tokens_1.Token.asNumberList(this.interpolationForAttribute(terraformAttribute));
    }
    getStringMapAttribute(terraformAttribute) {
        return tokens_1.Token.asStringMap(this.interpolationForAttribute(terraformAttribute));
    }
    getNumberMapAttribute(terraformAttribute) {
        return tokens_1.Token.asNumberMap(this.interpolationForAttribute(terraformAttribute));
    }
    getBooleanMapAttribute(terraformAttribute) {
        return tokens_1.Token.asBooleanMap(this.interpolationForAttribute(terraformAttribute));
    }
    getAnyMapAttribute(terraformAttribute) {
        return tokens_1.Token.asAnyMap(this.interpolationForAttribute(terraformAttribute));
    }
    get terraformMetaArguments() {
        assert(!this.forEach || typeof this.count === "undefined", `forEach and count are both set, but they are mutually exclusive. You can only use either of them. Check the data source at path: ${this.node.path}`);
        return {
            dependsOn: this.dependsOn,
            count: terraform_count_1.TerraformCount.isTerraformCount(this.count)
                ? this.count.toTerraform()
                : this.count,
            provider: this.provider?.fqn,
            lifecycle: (0, terraform_resource_1.lifecycleToTerraform)(this.lifecycle),
            forEach: this.forEach?._getForEachExpression(),
        };
    }
    // jsii can't handle abstract classes?
    synthesizeAttributes() {
        return {};
    }
    synthesizeHclAttributes() {
        return {};
    }
    /**
     * Adds this resource to the terraform JSON output.
     */
    toHclTerraform() {
        const attributes = (0, util_1.deepMerge)((0, util_1.processDynamicAttributesForHcl)(this.synthesizeHclAttributes()), (0, util_1.keysToSnakeCase)(this.terraformMetaArguments), this.rawOverrides);
        attributes["//"] = this.constructNodeMetadata;
        return {
            data: {
                [this.terraformResourceType]: {
                    [this.friendlyUniqueId]: attributes,
                },
            },
        };
    }
    /**
     * Adds this resource to the terraform JSON output.
     */
    toTerraform() {
        const attributes = (0, util_1.deepMerge)((0, util_1.processDynamicAttributes)(this.synthesizeAttributes()), (0, util_1.keysToSnakeCase)(this.terraformMetaArguments), this.rawOverrides);
        attributes["//"] = this.constructNodeMetadata;
        return {
            data: {
                [this.terraformResourceType]: {
                    [this.friendlyUniqueId]: attributes,
                },
            },
        };
    }
    toMetadata() {
        if (!Object.keys(this.rawOverrides).length) {
            return {};
        }
        return {
            overrides: {
                [this.terraformResourceType]: Object.keys(this.rawOverrides),
            },
        };
    }
    interpolationForAttribute(terraformAttribute) {
        return (0, tfExpression_1.ref)(`data.${this.terraformResourceType}.${this.friendlyUniqueId}${this.forEach ? ".*" : ""}.${terraformAttribute}`, this.cdktfStack);
    }
}
exports.TerraformDataSource = TerraformDataSource;
_a = JSII_RTTI_SYMBOL_1;
TerraformDataSource[_a] = { fqn: "cdktf.TerraformDataSource", version: "0.20.7" };
//# sourceMappingURL=data:application/json;base64,