"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerraformOutput = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const terraform_element_1 = require("./terraform-element");
const util_1 = require("./util");
const util_2 = require("util");
const tokens_1 = require("./tokens");
const TERRAFORM_OUTPUT_SYMBOL = Symbol.for("cdktf/TerraformOutput");
// eslint-disable-next-line jsdoc/require-jsdoc
class TerraformOutput extends terraform_element_1.TerraformElement {
    constructor(scope, id, config) {
        super(scope, id);
        this.value = config.value;
        this.description = config.description;
        this.sensitive = config.sensitive;
        this.dependsOn = config.dependsOn;
        this.staticId = config.staticId || false;
        this.precondition = config.precondition;
        Object.defineProperty(this, TERRAFORM_OUTPUT_SYMBOL, { value: true });
    }
    static isTerraformOutput(x) {
        return x !== null && typeof x === "object" && TERRAFORM_OUTPUT_SYMBOL in x;
    }
    set staticId(staticId) {
        if (staticId)
            this.overrideLogicalId(this.node.id);
        else
            this.resetOverrideLogicalId();
    }
    get staticId() {
        return this.friendlyUniqueId === this.node.id;
    }
    isITerraformAddressable(object) {
        return (object &&
            typeof object === "object" &&
            !(0, util_2.isArray)(object) &&
            "fqn" in object);
    }
    synthesizeValue(arg) {
        if (tokens_1.Token.isUnresolved(arg)) {
            return arg;
        }
        if (this.isITerraformAddressable(arg)) {
            return arg.fqn;
        }
        if (Array.isArray(arg)) {
            return arg.map((innerArg) => this.synthesizeValue(innerArg));
        }
        if (typeof arg === "object") {
            return Object.keys(arg).reduce((result, key) => {
                result[key] = this.synthesizeValue(arg[key]);
                return result;
            }, {});
        }
        return arg;
    }
    synthesizeAttributes() {
        return {
            value: this.synthesizeValue(this.value),
            description: this.description,
            sensitive: this.sensitive,
            depends_on: this.dependsOn?.map((resource) => resource.fqn),
        };
    }
    synthesizeHclAttributes() {
        return Object.fromEntries(Object.entries({
            value: {
                value: this.synthesizeValue(this.value),
                type: "any",
                isBlock: false,
                storageClassType: "",
            },
            description: {
                value: this.description,
                type: "simple",
                isBlock: false,
                storageClassType: "string",
            },
            sensitive: {
                value: this.sensitive,
                type: "simple",
                isBlock: false,
                storageClassType: "bool",
            },
            depends_on: {
                value: this.dependsOn?.map((resource) => resource.fqn),
                type: "list",
                isBlock: false,
                storageClassType: "stringList",
            },
        }).filter(([, value]) => value.value !== undefined));
    }
    toHclTerraform() {
        return {
            output: {
                [this.friendlyUniqueId]: (0, util_1.deepMerge)(this.synthesizeHclAttributes(), this.rawOverrides),
            },
        };
    }
    toTerraform() {
        return {
            output: {
                [this.friendlyUniqueId]: (0, util_1.deepMerge)(this.synthesizeAttributes(), this.rawOverrides),
            },
        };
    }
    toMetadata() {
        if (!Object.keys(this.rawOverrides).length) {
            return {};
        }
        return {
            overrides: {
                output: Object.keys(this.rawOverrides),
            },
        };
    }
}
exports.TerraformOutput = TerraformOutput;
_a = JSII_RTTI_SYMBOL_1;
TerraformOutput[_a] = { fqn: "cdktf.TerraformOutput", version: "0.20.7" };
//# sourceMappingURL=data:application/json;base64,