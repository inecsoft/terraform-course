"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerraformResource = exports.lifecycleToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const tokens_1 = require("./tokens");
const terraform_element_1 = require("./terraform-element");
const util_1 = require("./util");
const tfExpression_1 = require("./tfExpression");
const terraform_count_1 = require("./terraform-count");
const assert = require("assert");
const validate_terraform_version_1 = require("./validations/validate-terraform-version");
const terraform_stack_1 = require("./terraform-stack");
const errors_1 = require("./errors");
const TERRAFORM_RESOURCE_SYMBOL = Symbol.for("cdktf/TerraformResource");
/**
 * prepares a lifecycle object for being rendered as JSON
 * currently this function:
 *  - converts all replaceTriggeredBy items that are ITerraformDependables to strings
 */
function lifecycleToTerraform(lifecycle) {
    if (!lifecycle) {
        return undefined;
    }
    return {
        ...lifecycle,
        ...(lifecycle?.replaceTriggeredBy?.length
            ? {
                replaceTriggeredBy: lifecycle?.replaceTriggeredBy?.map((x) => {
                    if (typeof x === "string") {
                        return x;
                    }
                    else {
                        return x.fqn;
                    }
                }),
            }
            : undefined),
    };
}
exports.lifecycleToTerraform = lifecycleToTerraform;
// eslint-disable-next-line jsdoc/require-jsdoc
class TerraformResource extends terraform_element_1.TerraformElement {
    constructor(scope, id, config) {
        super(scope, id, config.terraformResourceType);
        this._hasMoved = false;
        Object.defineProperty(this, TERRAFORM_RESOURCE_SYMBOL, { value: true });
        this.terraformResourceType = config.terraformResourceType;
        this.terraformGeneratorMetadata = config.terraformGeneratorMetadata;
        if (Array.isArray(config.dependsOn)) {
            this.dependsOn = config.dependsOn.map((dependency) => (0, tfExpression_1.dependable)(dependency));
        }
        this.count = config.count;
        this.provider = config.provider;
        this.lifecycle = config.lifecycle;
        this.forEach = config.forEach;
        this.provisioners = config.provisioners;
        this.connection = config.connection;
    }
    static isTerraformResource(x) {
        return (x !== null && typeof x === "object" && TERRAFORM_RESOURCE_SYMBOL in x);
    }
    hasResourceMove() {
        return this._movedById || this._movedByTarget;
    }
    getStringAttribute(terraformAttribute) {
        return tokens_1.Token.asString(this.interpolationForAttribute(terraformAttribute));
    }
    getNumberAttribute(terraformAttribute) {
        return tokens_1.Token.asNumber(this.interpolationForAttribute(terraformAttribute));
    }
    getListAttribute(terraformAttribute) {
        return tokens_1.Token.asList(this.interpolationForAttribute(terraformAttribute));
    }
    getBooleanAttribute(terraformAttribute) {
        return this.interpolationForAttribute(terraformAttribute);
    }
    getNumberListAttribute(terraformAttribute) {
        return tokens_1.Token.asNumberList(this.interpolationForAttribute(terraformAttribute));
    }
    getStringMapAttribute(terraformAttribute) {
        return tokens_1.Token.asStringMap(this.interpolationForAttribute(terraformAttribute));
    }
    getNumberMapAttribute(terraformAttribute) {
        return tokens_1.Token.asNumberMap(this.interpolationForAttribute(terraformAttribute));
    }
    getBooleanMapAttribute(terraformAttribute) {
        return tokens_1.Token.asBooleanMap(this.interpolationForAttribute(terraformAttribute));
    }
    getAnyMapAttribute(terraformAttribute) {
        return tokens_1.Token.asAnyMap(this.interpolationForAttribute(terraformAttribute));
    }
    get terraformMetaArguments() {
        assert(!this.forEach || typeof this.count === "undefined", `forEach and count are both set, but they are mutually exclusive. You can only use either of them. Check the resource at path: ${this.node.path}`);
        return {
            dependsOn: this.dependsOn,
            count: terraform_count_1.TerraformCount.isTerraformCount(this.count)
                ? this.count.toTerraform()
                : this.count,
            provider: this.provider?.fqn,
            lifecycle: lifecycleToTerraform(this.lifecycle),
            forEach: this.forEach?._getForEachExpression(),
            connection: this.connection,
        };
    }
    // jsii can't handle abstract classes?
    synthesizeAttributes() {
        return {};
    }
    synthesizeHclAttributes() {
        return {};
    }
    /**
     * Adds this resource to the terraform JSON output.
     */
    toTerraform() {
        const attributes = (0, util_1.deepMerge)((0, util_1.processDynamicAttributes)(this.synthesizeAttributes()), (0, util_1.keysToSnakeCase)(this.terraformMetaArguments), {
            provisioner: this.provisioners?.map(({ type, ...props }) => ({
                [type]: (0, util_1.keysToSnakeCase)(props),
            })),
        }, this.rawOverrides);
        attributes["//"] = {
            ...(attributes["//"] ?? {}),
            ...this.constructNodeMetadata,
        };
        const movedBlock = this._buildMovedBlock();
        return {
            resource: this._hasMoved
                ? undefined
                : {
                    [this.terraformResourceType]: {
                        [this.friendlyUniqueId]: attributes,
                    },
                },
            moved: movedBlock
                ? [
                    {
                        to: movedBlock.to,
                        from: movedBlock.from,
                    },
                ]
                : undefined,
            import: this._imported
                ? [
                    {
                        provider: this._imported.provider?.fqn,
                        id: this._imported.id,
                        to: `${this.terraformResourceType}.${this.friendlyUniqueId}`,
                    },
                ]
                : undefined,
        };
    }
    toHclTerraform() {
        const attributes = (0, util_1.deepMerge)((0, util_1.processDynamicAttributesForHcl)(this.synthesizeHclAttributes()), (0, util_1.keysToSnakeCase)(this.terraformMetaArguments), {
            provisioner: this.provisioners?.map(({ type, ...props }) => ({
                [type]: {
                    isBlock: true,
                    type: "list",
                    storageClassType: "object",
                    value: (0, util_1.keysToSnakeCase)(props),
                },
            })),
        }, this.rawOverrides);
        attributes["//"] = {
            ...(attributes["//"] ?? {}),
            ...this.constructNodeMetadata,
        };
        const movedBlock = this._buildMovedBlock();
        return {
            resource: this._hasMoved
                ? undefined
                : {
                    [this.terraformResourceType]: {
                        [this.friendlyUniqueId]: attributes,
                    },
                },
            moved: movedBlock
                ? [
                    {
                        to: {
                            value: movedBlock.to,
                            isBlock: false,
                            type: "simple",
                            storageClassType: "reference",
                        },
                        from: {
                            value: movedBlock.from,
                            isBlock: false,
                            type: "simple",
                            storageClassType: "reference",
                        },
                    },
                ]
                : undefined,
            import: this._imported
                ? [
                    {
                        to: {
                            value: `${this.terraformResourceType}.${this.friendlyUniqueId}`,
                            type: "simple",
                            storageClassType: "reference",
                        },
                        id: {
                            value: this._imported.id,
                            type: "simple",
                            storageClassType: "string",
                        },
                        provider: this._imported.provider
                            ? {
                                value: this._imported.provider.fqn,
                                type: "simple",
                                storageClassType: "reference",
                            }
                            : undefined,
                    },
                ]
                : undefined,
        };
    }
    toMetadata() {
        return {
            overrides: Object.keys(this.rawOverrides).length
                ? {
                    [this.terraformResourceType]: Object.keys(this.rawOverrides),
                }
                : undefined,
            imports: this._imported
                ? {
                    [this.terraformResourceType]: [this.friendlyUniqueId],
                }
                : undefined,
            moved: this._movedByTarget || this._movedById
                ? {
                    [this.terraformResourceType]: [this.friendlyUniqueId],
                }
                : undefined,
        };
    }
    interpolationForAttribute(terraformAttribute) {
        return (0, tfExpression_1.ref)(`${this.terraformResourceType}.${this.friendlyUniqueId}${this.forEach ? ".*" : ""}.${terraformAttribute}`, this.cdktfStack);
    }
    importFrom(id, provider) {
        this._imported = { id, provider };
        this.node.addValidation(new validate_terraform_version_1.ValidateTerraformVersion(">=1.5", `Import blocks are only supported for Terraform >=1.5. Please upgrade your Terraform version.`));
    }
    _getResourceTarget(moveTarget) {
        return terraform_stack_1.TerraformStack.of(this).moveTargets.getResourceByTarget(moveTarget);
    }
    _addResourceTarget(moveTarget) {
        return terraform_stack_1.TerraformStack.of(this).moveTargets.addResourceTarget(this, moveTarget);
    }
    _buildMovedBlockByTarget(movedTarget) {
        const { moveTarget, index } = movedTarget;
        const resourceToMoveTo = this._getResourceTarget(moveTarget);
        if (this.terraformResourceType !== resourceToMoveTo.terraformResourceType) {
            throw (0, errors_1.movedToResourceOfDifferentType)(moveTarget, this.terraformResourceType, resourceToMoveTo.terraformResourceType);
        }
        const to = index
            ? typeof index === "string"
                ? `${this.terraformResourceType}.${resourceToMoveTo.friendlyUniqueId}["${index}"]`
                : `${this.terraformResourceType}.${resourceToMoveTo.friendlyUniqueId}[${index}]`
            : `${this.terraformResourceType}.${resourceToMoveTo.friendlyUniqueId}`;
        const from = `${this.terraformResourceType}.${this.friendlyUniqueId}`;
        return { to, from };
    }
    _buildMovedBlock() {
        if (this._movedByTarget && this._movedById) {
            throw (0, errors_1.resourceGivenTwoMoveOperationsByTargetAndId)(this.node.id, this._movedByTarget.moveTarget, { to: this._movedById.to, from: this._movedById.from });
        }
        else if (this._movedByTarget) {
            const movedBlockByTarget = this._buildMovedBlockByTarget(this._movedByTarget);
            return { to: movedBlockByTarget.to, from: movedBlockByTarget.from };
        }
        else if (this._movedById) {
            return { to: this._movedById.to, from: this._movedById.from };
        }
        else {
            return undefined;
        }
    }
    /**
     * Moves this resource to the target resource given by moveTarget.
     * @param moveTarget The previously set user defined string set by .addMoveTarget() corresponding to the resource to move to.
     * @param index Optional The index corresponding to the key the resource is to appear in the foreach of a resource to move to
     */
    moveTo(moveTarget, index) {
        if (this._movedByTarget) {
            throw (0, errors_1.resourceGivenTwoMoveOperationsByTarget)(this.friendlyUniqueId, this._movedByTarget.moveTarget, moveTarget);
        }
        this._movedByTarget = { moveTarget, index };
        this._hasMoved = true;
    }
    /**
     * Adds a user defined moveTarget string to this resource to be later used in .moveTo(moveTarget) to resolve the location of the move.
     * @param moveTarget The string move target that will correspond to this resource
     */
    addMoveTarget(moveTarget) {
        this._addResourceTarget(moveTarget);
    }
    /**
     * Moves this resource to the resource corresponding to "id"
     * @param id Full id of resource to move to, e.g. "aws_s3_bucket.example"
     */
    moveToId(id) {
        if (this._movedById) {
            throw (0, errors_1.resourceGivenTwoMoveOperationsById)(this.node.id, { to: this._movedById.from, from: this._movedById.to }, {
                to: id,
                from: `${this.terraformResourceType}.${this.friendlyUniqueId}`,
            });
        }
        this._movedById = {
            to: id,
            from: `${this.terraformResourceType}.${this.friendlyUniqueId}`,
        };
        this._hasMoved = true;
    }
    /**
     * Move the resource corresponding to "id" to this resource. Note that the resource being moved from must be marked as moved using it's instance function.
     * @param id Full id of resource being moved from, e.g. "aws_s3_bucket.example"
     */
    moveFromId(id) {
        if (this._movedById) {
            throw (0, errors_1.resourceGivenTwoMoveOperationsById)(this.node.id, { to: this._movedById.from, from: this._movedById.to }, {
                to: id,
                from: `${this.terraformResourceType}.${this.friendlyUniqueId}`,
            });
        }
        this._movedById = {
            to: `${this.terraformResourceType}.${this.friendlyUniqueId}`,
            from: id,
        };
    }
}
exports.TerraformResource = TerraformResource;
_a = JSII_RTTI_SYMBOL_1;
TerraformResource[_a] = { fqn: "cdktf.TerraformResource", version: "0.20.7" };
//# sourceMappingURL=data:application/json;base64,