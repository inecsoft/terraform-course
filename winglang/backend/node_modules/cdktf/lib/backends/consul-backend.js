"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataTerraformRemoteStateConsul = exports.ConsulBackend = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const terraform_backend_1 = require("../terraform-backend");
const util_1 = require("../util");
const terraform_remote_state_1 = require("../terraform-remote-state");
// eslint-disable-next-line jsdoc/require-jsdoc
class ConsulBackend extends terraform_backend_1.TerraformBackend {
    constructor(scope, props) {
        super(scope, "backend", "consul");
        this.props = props;
    }
    synthesizeHclAttributes() {
        return (0, util_1.keysToSnakeCase)({ ...this.props });
    }
    synthesizeAttributes() {
        return (0, util_1.keysToSnakeCase)({ ...this.props });
    }
    getRemoteStateDataSource(scope, name, _fromStack) {
        return new DataTerraformRemoteStateConsul(scope, name, {
            ...this.props,
            workspace: "${terraform.workspace}",
        });
    }
}
exports.ConsulBackend = ConsulBackend;
_a = JSII_RTTI_SYMBOL_1;
ConsulBackend[_a] = { fqn: "cdktf.ConsulBackend", version: "0.20.7" };
// eslint-disable-next-line jsdoc/require-jsdoc
class DataTerraformRemoteStateConsul extends terraform_remote_state_1.TerraformRemoteState {
    constructor(scope, id, config) {
        super(scope, id, "consul", config);
    }
}
exports.DataTerraformRemoteStateConsul = DataTerraformRemoteStateConsul;
_b = JSII_RTTI_SYMBOL_1;
DataTerraformRemoteStateConsul[_b] = { fqn: "cdktf.DataTerraformRemoteStateConsul", version: "0.20.7" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3VsLWJhY2tlbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb25zdWwtYmFja2VuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUdBLDREQUF3RDtBQUN4RCxrQ0FBMEM7QUFDMUMsc0VBR21DO0FBRW5DLCtDQUErQztBQUMvQyxNQUFhLGFBQWMsU0FBUSxvQ0FBZ0I7SUFDakQsWUFBWSxLQUFnQixFQUFtQixLQUEwQjtRQUN2RSxLQUFLLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQztRQURXLFVBQUssR0FBTCxLQUFLLENBQXFCO0lBRXpFLENBQUM7SUFFUyx1QkFBdUI7UUFDL0IsT0FBTyxJQUFBLHNCQUFlLEVBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFUyxvQkFBb0I7UUFDNUIsT0FBTyxJQUFBLHNCQUFlLEVBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFTSx3QkFBd0IsQ0FDN0IsS0FBZ0IsRUFDaEIsSUFBWSxFQUNaLFVBQWtCO1FBRWxCLE9BQU8sSUFBSSw4QkFBOEIsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFO1lBQ3JELEdBQUcsSUFBSSxDQUFDLEtBQUs7WUFDYixTQUFTLEVBQUUsd0JBQXdCO1NBQ3BDLENBQUMsQ0FBQztJQUNMLENBQUM7O0FBdEJILHNDQXVCQzs7O0FBRUQsK0NBQStDO0FBQy9DLE1BQWEsOEJBQStCLFNBQVEsNkNBQW9CO0lBQ3RFLFlBQ0UsS0FBZ0IsRUFDaEIsRUFBVSxFQUNWLE1BQTRDO1FBRTVDLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNyQyxDQUFDOztBQVBILHdFQVFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBIYXNoaUNvcnAsIEluY1xuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1QTC0yLjBcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgeyBUZXJyYWZvcm1CYWNrZW5kIH0gZnJvbSBcIi4uL3RlcnJhZm9ybS1iYWNrZW5kXCI7XG5pbXBvcnQgeyBrZXlzVG9TbmFrZUNhc2UgfSBmcm9tIFwiLi4vdXRpbFwiO1xuaW1wb3J0IHtcbiAgVGVycmFmb3JtUmVtb3RlU3RhdGUsXG4gIERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZUNvbmZpZyxcbn0gZnJvbSBcIi4uL3RlcnJhZm9ybS1yZW1vdGUtc3RhdGVcIjtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzZG9jL3JlcXVpcmUtanNkb2NcbmV4cG9ydCBjbGFzcyBDb25zdWxCYWNrZW5kIGV4dGVuZHMgVGVycmFmb3JtQmFja2VuZCB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIHByaXZhdGUgcmVhZG9ubHkgcHJvcHM6IENvbnN1bEJhY2tlbmRDb25maWcpIHtcbiAgICBzdXBlcihzY29wZSwgXCJiYWNrZW5kXCIsIFwiY29uc3VsXCIpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHN5bnRoZXNpemVIY2xBdHRyaWJ1dGVzKCk6IHsgW25hbWU6IHN0cmluZ106IGFueSB9IHtcbiAgICByZXR1cm4ga2V5c1RvU25ha2VDYXNlKHsgLi4udGhpcy5wcm9wcyB9KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzeW50aGVzaXplQXR0cmlidXRlcygpOiB7IFtuYW1lOiBzdHJpbmddOiBhbnkgfSB7XG4gICAgcmV0dXJuIGtleXNUb1NuYWtlQ2FzZSh7IC4uLnRoaXMucHJvcHMgfSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0UmVtb3RlU3RhdGVEYXRhU291cmNlKFxuICAgIHNjb3BlOiBDb25zdHJ1Y3QsXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIF9mcm9tU3RhY2s6IHN0cmluZ1xuICApOiBUZXJyYWZvcm1SZW1vdGVTdGF0ZSB7XG4gICAgcmV0dXJuIG5ldyBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVDb25zdWwoc2NvcGUsIG5hbWUsIHtcbiAgICAgIC4uLnRoaXMucHJvcHMsXG4gICAgICB3b3Jrc3BhY2U6IFwiJHt0ZXJyYWZvcm0ud29ya3NwYWNlfVwiLFxuICAgIH0pO1xuICB9XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc2RvYy9yZXF1aXJlLWpzZG9jXG5leHBvcnQgY2xhc3MgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlQ29uc3VsIGV4dGVuZHMgVGVycmFmb3JtUmVtb3RlU3RhdGUge1xuICBjb25zdHJ1Y3RvcihcbiAgICBzY29wZTogQ29uc3RydWN0LFxuICAgIGlkOiBzdHJpbmcsXG4gICAgY29uZmlnOiBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVDb25zdWxDb25maWdcbiAgKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCBcImNvbnN1bFwiLCBjb25maWcpO1xuICB9XG59XG4vKipcbiAqIFN0b3JlcyB0aGUgc3RhdGUgaW4gdGhlIENvbnN1bCBLViBzdG9yZSBhdCBhIGdpdmVuIHBhdGguXG4gKiBUaGlzIGJhY2tlbmQgc3VwcG9ydHMgc3RhdGUgbG9ja2luZy5cbiAqXG4gKiBSZWFkIG1vcmUgYWJvdXQgdGhpcyBiYWNrZW5kIGluIHRoZSBUZXJyYWZvcm0gZG9jczpcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLmhhc2hpY29ycC5jb20vdGVycmFmb3JtL2xhbmd1YWdlL3NldHRpbmdzL2JhY2tlbmRzL2NvbnN1bFxuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbnN1bEJhY2tlbmRDb25maWcge1xuICAvKipcbiAgICogKFJlcXVpcmVkKSBQYXRoIGluIHRoZSBDb25zdWwgS1Ygc3RvcmVcbiAgICovXG4gIHJlYWRvbmx5IHBhdGg6IHN0cmluZztcbiAgLyoqXG4gICAqIChSZXF1aXJlZCkgQWNjZXNzIHRva2VuXG4gICAqL1xuICByZWFkb25seSBhY2Nlc3NUb2tlbjogc3RyaW5nO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBETlMgbmFtZSBhbmQgcG9ydCBvZiB5b3VyIENvbnN1bCBlbmRwb2ludCBzcGVjaWZpZWQgaW4gdGhlIGZvcm1hdCBkbnNuYW1lOnBvcnQuXG4gICAqICBEZWZhdWx0cyB0byB0aGUgbG9jYWwgYWdlbnQgSFRUUCBsaXN0ZW5lci5cbiAgICovXG4gIHJlYWRvbmx5IGFkZHJlc3M/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIFNwZWNpZmllcyB3aGF0IHByb3RvY29sIHRvIHVzZSB3aGVuIHRhbGtpbmcgdG8gdGhlIGdpdmVuIGFkZHJlc3MsZWl0aGVyIGh0dHAgb3IgaHR0cHMuXG4gICAqIFNTTCBzdXBwb3J0IGNhbiBhbHNvIGJlIHRyaWdnZXJlZCBieSBzZXR0aW5nIHRoZW4gZW52aXJvbm1lbnQgdmFyaWFibGUgQ09OU1VMX0hUVFBfU1NMIHRvIHRydWUuXG4gICAqL1xuICByZWFkb25seSBzY2hlbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIFRoZSBkYXRhY2VudGVyIHRvIHVzZS4gRGVmYXVsdHMgdG8gdGhhdCBvZiB0aGUgYWdlbnQuXG4gICAqL1xuICByZWFkb25seSBkYXRhY2VudGVyPzogc3RyaW5nO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBIVFRQIEJhc2ljIEF1dGhlbnRpY2F0aW9uIGNyZWRlbnRpYWxzIHRvIGJlIHVzZWQgd2hlbiBjb21tdW5pY2F0aW5nIHdpdGggQ29uc3VsLFxuICAgKiBpbiB0aGUgZm9ybWF0IG9mIGVpdGhlciB1c2VyIG9yIHVzZXI6cGFzcy5cbiAgICovXG4gIHJlYWRvbmx5IGh0dHBBdXRoPzogc3RyaW5nO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSB0cnVlIHRvIGNvbXByZXNzIHRoZSBzdGF0ZSBkYXRhIHVzaW5nIGd6aXAsXG4gICAqIG9yIGZhbHNlICh0aGUgZGVmYXVsdCkgdG8gbGVhdmUgaXQgdW5jb21wcmVzc2VkLlxuICAgKi9cbiAgcmVhZG9ubHkgZ3ppcD86IGJvb2xlYW47XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIGZhbHNlIHRvIGRpc2FibGUgbG9ja2luZy5cbiAgICogVGhpcyBkZWZhdWx0cyB0byB0cnVlLCBidXQgd2lsbCByZXF1aXJlIHNlc3Npb24gcGVybWlzc2lvbnMgd2l0aCBDb25zdWwgYW5kXG4gICAqIGF0IGxlYXN0IGt2IHdyaXRlIHBlcm1pc3Npb25zIG9uICRwYXRoLy5sb2NrIHRvIHBlcmZvcm0gbG9ja2luZy5cbiAgICovXG4gIHJlYWRvbmx5IGxvY2s/OiBib29sZWFuO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBBIHBhdGggdG8gYSBQRU0tZW5jb2RlZCBjZXJ0aWZpY2F0ZSBhdXRob3JpdHlcbiAgICogdXNlZCB0byB2ZXJpZnkgdGhlIHJlbW90ZSBhZ2VudCdzIGNlcnRpZmljYXRlLlxuICAgKi9cbiAgcmVhZG9ubHkgY2FGaWxlPzogc3RyaW5nO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBBIHBhdGggdG8gYSBQRU0tZW5jb2RlZCBjZXJ0aWZpY2F0ZSBwcm92aWRlZCB0byB0aGUgcmVtb3RlIGFnZW50O1xuICAgKiByZXF1aXJlcyB1c2Ugb2Yga2V5X2ZpbGUuXG4gICAqL1xuICByZWFkb25seSBjZXJ0RmlsZT86IHN0cmluZztcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgQSBwYXRoIHRvIGEgUEVNLWVuY29kZWQgcHJpdmF0ZSBrZXksIHJlcXVpcmVkIGlmIGNlcnRfZmlsZSBpcyBzcGVjaWZpZWQuXG4gICAqL1xuICByZWFkb25seSBrZXlGaWxlPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZUNvbnN1bENvbmZpZ1xuICBleHRlbmRzIERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZUNvbmZpZyxcbiAgICBDb25zdWxCYWNrZW5kQ29uZmlnIHt9XG4iXX0=