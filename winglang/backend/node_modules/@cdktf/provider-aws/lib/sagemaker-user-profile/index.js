"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SagemakerUserProfileUserSettingsJupyterLabAppSettingsDefaultResourceSpecOutputReference = exports.sagemakerUserProfileUserSettingsJupyterLabAppSettingsDefaultResourceSpecToHclTerraform = exports.sagemakerUserProfileUserSettingsJupyterLabAppSettingsDefaultResourceSpecToTerraform = exports.SagemakerUserProfileUserSettingsJupyterLabAppSettingsCustomImageList = exports.SagemakerUserProfileUserSettingsJupyterLabAppSettingsCustomImageOutputReference = exports.sagemakerUserProfileUserSettingsJupyterLabAppSettingsCustomImageToHclTerraform = exports.sagemakerUserProfileUserSettingsJupyterLabAppSettingsCustomImageToTerraform = exports.SagemakerUserProfileUserSettingsJupyterLabAppSettingsCodeRepositoryList = exports.SagemakerUserProfileUserSettingsJupyterLabAppSettingsCodeRepositoryOutputReference = exports.sagemakerUserProfileUserSettingsJupyterLabAppSettingsCodeRepositoryToHclTerraform = exports.sagemakerUserProfileUserSettingsJupyterLabAppSettingsCodeRepositoryToTerraform = exports.SagemakerUserProfileUserSettingsCustomPosixUserConfigOutputReference = exports.sagemakerUserProfileUserSettingsCustomPosixUserConfigToHclTerraform = exports.sagemakerUserProfileUserSettingsCustomPosixUserConfigToTerraform = exports.SagemakerUserProfileUserSettingsCustomFileSystemConfigList = exports.SagemakerUserProfileUserSettingsCustomFileSystemConfigOutputReference = exports.sagemakerUserProfileUserSettingsCustomFileSystemConfigToHclTerraform = exports.sagemakerUserProfileUserSettingsCustomFileSystemConfigToTerraform = exports.SagemakerUserProfileUserSettingsCustomFileSystemConfigEfsFileSystemConfigList = exports.SagemakerUserProfileUserSettingsCustomFileSystemConfigEfsFileSystemConfigOutputReference = exports.sagemakerUserProfileUserSettingsCustomFileSystemConfigEfsFileSystemConfigToHclTerraform = exports.sagemakerUserProfileUserSettingsCustomFileSystemConfigEfsFileSystemConfigToTerraform = exports.SagemakerUserProfileUserSettingsCodeEditorAppSettingsOutputReference = exports.sagemakerUserProfileUserSettingsCodeEditorAppSettingsToHclTerraform = exports.sagemakerUserProfileUserSettingsCodeEditorAppSettingsToTerraform = exports.SagemakerUserProfileUserSettingsCodeEditorAppSettingsDefaultResourceSpecOutputReference = exports.sagemakerUserProfileUserSettingsCodeEditorAppSettingsDefaultResourceSpecToHclTerraform = exports.sagemakerUserProfileUserSettingsCodeEditorAppSettingsDefaultResourceSpecToTerraform = exports.SagemakerUserProfileUserSettingsCanvasAppSettingsOutputReference = exports.sagemakerUserProfileUserSettingsCanvasAppSettingsToHclTerraform = exports.sagemakerUserProfileUserSettingsCanvasAppSettingsToTerraform = exports.SagemakerUserProfileUserSettingsCanvasAppSettingsWorkspaceSettingsOutputReference = exports.sagemakerUserProfileUserSettingsCanvasAppSettingsWorkspaceSettingsToHclTerraform = exports.sagemakerUserProfileUserSettingsCanvasAppSettingsWorkspaceSettingsToTerraform = exports.SagemakerUserProfileUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsOutputReference = exports.sagemakerUserProfileUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsToHclTerraform = exports.sagemakerUserProfileUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsToTerraform = exports.SagemakerUserProfileUserSettingsCanvasAppSettingsModelRegisterSettingsOutputReference = exports.sagemakerUserProfileUserSettingsCanvasAppSettingsModelRegisterSettingsToHclTerraform = exports.sagemakerUserProfileUserSettingsCanvasAppSettingsModelRegisterSettingsToTerraform = exports.SagemakerUserProfileUserSettingsCanvasAppSettingsKendraSettingsOutputReference = exports.sagemakerUserProfileUserSettingsCanvasAppSettingsKendraSettingsToHclTerraform = exports.sagemakerUserProfileUserSettingsCanvasAppSettingsKendraSettingsToTerraform = exports.SagemakerUserProfileUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsList = exports.SagemakerUserProfileUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsOutputReference = exports.sagemakerUserProfileUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsToHclTerraform = exports.sagemakerUserProfileUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsToTerraform = exports.SagemakerUserProfileUserSettingsCanvasAppSettingsDirectDeploySettingsOutputReference = exports.sagemakerUserProfileUserSettingsCanvasAppSettingsDirectDeploySettingsToHclTerraform = exports.sagemakerUserProfileUserSettingsCanvasAppSettingsDirectDeploySettingsToTerraform = void 0;
exports.sagemakerUserProfileUserSettingsTensorBoardAppSettingsToHclTerraform = exports.sagemakerUserProfileUserSettingsTensorBoardAppSettingsToTerraform = exports.SagemakerUserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpecOutputReference = exports.sagemakerUserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpecToHclTerraform = exports.sagemakerUserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpecToTerraform = exports.SagemakerUserProfileUserSettingsSpaceStorageSettingsOutputReference = exports.sagemakerUserProfileUserSettingsSpaceStorageSettingsToHclTerraform = exports.sagemakerUserProfileUserSettingsSpaceStorageSettingsToTerraform = exports.SagemakerUserProfileUserSettingsSpaceStorageSettingsDefaultEbsStorageSettingsOutputReference = exports.sagemakerUserProfileUserSettingsSpaceStorageSettingsDefaultEbsStorageSettingsToHclTerraform = exports.sagemakerUserProfileUserSettingsSpaceStorageSettingsDefaultEbsStorageSettingsToTerraform = exports.SagemakerUserProfileUserSettingsSharingSettingsOutputReference = exports.sagemakerUserProfileUserSettingsSharingSettingsToHclTerraform = exports.sagemakerUserProfileUserSettingsSharingSettingsToTerraform = exports.SagemakerUserProfileUserSettingsRStudioServerProAppSettingsOutputReference = exports.sagemakerUserProfileUserSettingsRStudioServerProAppSettingsToHclTerraform = exports.sagemakerUserProfileUserSettingsRStudioServerProAppSettingsToTerraform = exports.SagemakerUserProfileUserSettingsRSessionAppSettingsOutputReference = exports.sagemakerUserProfileUserSettingsRSessionAppSettingsToHclTerraform = exports.sagemakerUserProfileUserSettingsRSessionAppSettingsToTerraform = exports.SagemakerUserProfileUserSettingsRSessionAppSettingsDefaultResourceSpecOutputReference = exports.sagemakerUserProfileUserSettingsRSessionAppSettingsDefaultResourceSpecToHclTerraform = exports.sagemakerUserProfileUserSettingsRSessionAppSettingsDefaultResourceSpecToTerraform = exports.SagemakerUserProfileUserSettingsRSessionAppSettingsCustomImageList = exports.SagemakerUserProfileUserSettingsRSessionAppSettingsCustomImageOutputReference = exports.sagemakerUserProfileUserSettingsRSessionAppSettingsCustomImageToHclTerraform = exports.sagemakerUserProfileUserSettingsRSessionAppSettingsCustomImageToTerraform = exports.SagemakerUserProfileUserSettingsKernelGatewayAppSettingsOutputReference = exports.sagemakerUserProfileUserSettingsKernelGatewayAppSettingsToHclTerraform = exports.sagemakerUserProfileUserSettingsKernelGatewayAppSettingsToTerraform = exports.SagemakerUserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecOutputReference = exports.sagemakerUserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToHclTerraform = exports.sagemakerUserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform = exports.SagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImageList = exports.SagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImageOutputReference = exports.sagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImageToHclTerraform = exports.sagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImageToTerraform = exports.SagemakerUserProfileUserSettingsJupyterServerAppSettingsOutputReference = exports.sagemakerUserProfileUserSettingsJupyterServerAppSettingsToHclTerraform = exports.sagemakerUserProfileUserSettingsJupyterServerAppSettingsToTerraform = exports.SagemakerUserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecOutputReference = exports.sagemakerUserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecToHclTerraform = exports.sagemakerUserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform = exports.SagemakerUserProfileUserSettingsJupyterServerAppSettingsCodeRepositoryList = exports.SagemakerUserProfileUserSettingsJupyterServerAppSettingsCodeRepositoryOutputReference = exports.sagemakerUserProfileUserSettingsJupyterServerAppSettingsCodeRepositoryToHclTerraform = exports.sagemakerUserProfileUserSettingsJupyterServerAppSettingsCodeRepositoryToTerraform = exports.SagemakerUserProfileUserSettingsJupyterLabAppSettingsOutputReference = exports.sagemakerUserProfileUserSettingsJupyterLabAppSettingsToHclTerraform = exports.sagemakerUserProfileUserSettingsJupyterLabAppSettingsToTerraform = void 0;
exports.SagemakerUserProfile = exports.SagemakerUserProfileUserSettingsOutputReference = exports.sagemakerUserProfileUserSettingsToHclTerraform = exports.sagemakerUserProfileUserSettingsToTerraform = exports.SagemakerUserProfileUserSettingsTensorBoardAppSettingsOutputReference = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function sagemakerUserProfileUserSettingsCanvasAppSettingsDirectDeploySettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        status: cdktf.stringToTerraform(struct.status),
    };
}
exports.sagemakerUserProfileUserSettingsCanvasAppSettingsDirectDeploySettingsToTerraform = sagemakerUserProfileUserSettingsCanvasAppSettingsDirectDeploySettingsToTerraform;
function sagemakerUserProfileUserSettingsCanvasAppSettingsDirectDeploySettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        status: {
            value: cdktf.stringToHclTerraform(struct.status),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerUserProfileUserSettingsCanvasAppSettingsDirectDeploySettingsToHclTerraform = sagemakerUserProfileUserSettingsCanvasAppSettingsDirectDeploySettingsToHclTerraform;
class SagemakerUserProfileUserSettingsCanvasAppSettingsDirectDeploySettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._status !== undefined) {
            hasAnyValues = true;
            internalValueResult.status = this._status;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._status = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._status = value.status;
        }
    }
    get status() {
        return this.getStringAttribute('status');
    }
    set status(value) {
        this._status = value;
    }
    resetStatus() {
        this._status = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get statusInput() {
        return this._status;
    }
}
exports.SagemakerUserProfileUserSettingsCanvasAppSettingsDirectDeploySettingsOutputReference = SagemakerUserProfileUserSettingsCanvasAppSettingsDirectDeploySettingsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsCanvasAppSettingsDirectDeploySettingsOutputReference[_a] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsCanvasAppSettingsDirectDeploySettingsOutputReference", version: "19.15.0" };
function sagemakerUserProfileUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        data_source_name: cdktf.stringToTerraform(struct.dataSourceName),
        secret_arn: cdktf.stringToTerraform(struct.secretArn),
        status: cdktf.stringToTerraform(struct.status),
    };
}
exports.sagemakerUserProfileUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsToTerraform = sagemakerUserProfileUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsToTerraform;
function sagemakerUserProfileUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        data_source_name: {
            value: cdktf.stringToHclTerraform(struct.dataSourceName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        secret_arn: {
            value: cdktf.stringToHclTerraform(struct.secretArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        status: {
            value: cdktf.stringToHclTerraform(struct.status),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerUserProfileUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsToHclTerraform = sagemakerUserProfileUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsToHclTerraform;
class SagemakerUserProfileUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dataSourceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataSourceName = this._dataSourceName;
        }
        if (this._secretArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretArn = this._secretArn;
        }
        if (this._status !== undefined) {
            hasAnyValues = true;
            internalValueResult.status = this._status;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._dataSourceName = undefined;
            this._secretArn = undefined;
            this._status = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._dataSourceName = value.dataSourceName;
            this._secretArn = value.secretArn;
            this._status = value.status;
        }
    }
    get dataSourceName() {
        return this.getStringAttribute('data_source_name');
    }
    set dataSourceName(value) {
        this._dataSourceName = value;
    }
    resetDataSourceName() {
        this._dataSourceName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataSourceNameInput() {
        return this._dataSourceName;
    }
    get secretArn() {
        return this.getStringAttribute('secret_arn');
    }
    set secretArn(value) {
        this._secretArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get secretArnInput() {
        return this._secretArn;
    }
    get status() {
        return this.getStringAttribute('status');
    }
    set status(value) {
        this._status = value;
    }
    resetStatus() {
        this._status = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get statusInput() {
        return this._status;
    }
}
exports.SagemakerUserProfileUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsOutputReference = SagemakerUserProfileUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsOutputReference;
_b = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsOutputReference[_b] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsOutputReference", version: "19.15.0" };
class SagemakerUserProfileUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SagemakerUserProfileUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SagemakerUserProfileUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsList = SagemakerUserProfileUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsList;
_c = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsList[_c] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsList", version: "19.15.0" };
function sagemakerUserProfileUserSettingsCanvasAppSettingsKendraSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        status: cdktf.stringToTerraform(struct.status),
    };
}
exports.sagemakerUserProfileUserSettingsCanvasAppSettingsKendraSettingsToTerraform = sagemakerUserProfileUserSettingsCanvasAppSettingsKendraSettingsToTerraform;
function sagemakerUserProfileUserSettingsCanvasAppSettingsKendraSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        status: {
            value: cdktf.stringToHclTerraform(struct.status),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerUserProfileUserSettingsCanvasAppSettingsKendraSettingsToHclTerraform = sagemakerUserProfileUserSettingsCanvasAppSettingsKendraSettingsToHclTerraform;
class SagemakerUserProfileUserSettingsCanvasAppSettingsKendraSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._status !== undefined) {
            hasAnyValues = true;
            internalValueResult.status = this._status;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._status = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._status = value.status;
        }
    }
    get status() {
        return this.getStringAttribute('status');
    }
    set status(value) {
        this._status = value;
    }
    resetStatus() {
        this._status = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get statusInput() {
        return this._status;
    }
}
exports.SagemakerUserProfileUserSettingsCanvasAppSettingsKendraSettingsOutputReference = SagemakerUserProfileUserSettingsCanvasAppSettingsKendraSettingsOutputReference;
_d = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsCanvasAppSettingsKendraSettingsOutputReference[_d] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsCanvasAppSettingsKendraSettingsOutputReference", version: "19.15.0" };
function sagemakerUserProfileUserSettingsCanvasAppSettingsModelRegisterSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cross_account_model_register_role_arn: cdktf.stringToTerraform(struct.crossAccountModelRegisterRoleArn),
        status: cdktf.stringToTerraform(struct.status),
    };
}
exports.sagemakerUserProfileUserSettingsCanvasAppSettingsModelRegisterSettingsToTerraform = sagemakerUserProfileUserSettingsCanvasAppSettingsModelRegisterSettingsToTerraform;
function sagemakerUserProfileUserSettingsCanvasAppSettingsModelRegisterSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cross_account_model_register_role_arn: {
            value: cdktf.stringToHclTerraform(struct.crossAccountModelRegisterRoleArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        status: {
            value: cdktf.stringToHclTerraform(struct.status),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerUserProfileUserSettingsCanvasAppSettingsModelRegisterSettingsToHclTerraform = sagemakerUserProfileUserSettingsCanvasAppSettingsModelRegisterSettingsToHclTerraform;
class SagemakerUserProfileUserSettingsCanvasAppSettingsModelRegisterSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._crossAccountModelRegisterRoleArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.crossAccountModelRegisterRoleArn = this._crossAccountModelRegisterRoleArn;
        }
        if (this._status !== undefined) {
            hasAnyValues = true;
            internalValueResult.status = this._status;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._crossAccountModelRegisterRoleArn = undefined;
            this._status = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._crossAccountModelRegisterRoleArn = value.crossAccountModelRegisterRoleArn;
            this._status = value.status;
        }
    }
    get crossAccountModelRegisterRoleArn() {
        return this.getStringAttribute('cross_account_model_register_role_arn');
    }
    set crossAccountModelRegisterRoleArn(value) {
        this._crossAccountModelRegisterRoleArn = value;
    }
    resetCrossAccountModelRegisterRoleArn() {
        this._crossAccountModelRegisterRoleArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get crossAccountModelRegisterRoleArnInput() {
        return this._crossAccountModelRegisterRoleArn;
    }
    get status() {
        return this.getStringAttribute('status');
    }
    set status(value) {
        this._status = value;
    }
    resetStatus() {
        this._status = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get statusInput() {
        return this._status;
    }
}
exports.SagemakerUserProfileUserSettingsCanvasAppSettingsModelRegisterSettingsOutputReference = SagemakerUserProfileUserSettingsCanvasAppSettingsModelRegisterSettingsOutputReference;
_e = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsCanvasAppSettingsModelRegisterSettingsOutputReference[_e] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsCanvasAppSettingsModelRegisterSettingsOutputReference", version: "19.15.0" };
function sagemakerUserProfileUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        amazon_forecast_role_arn: cdktf.stringToTerraform(struct.amazonForecastRoleArn),
        status: cdktf.stringToTerraform(struct.status),
    };
}
exports.sagemakerUserProfileUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsToTerraform = sagemakerUserProfileUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsToTerraform;
function sagemakerUserProfileUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        amazon_forecast_role_arn: {
            value: cdktf.stringToHclTerraform(struct.amazonForecastRoleArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        status: {
            value: cdktf.stringToHclTerraform(struct.status),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerUserProfileUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsToHclTerraform = sagemakerUserProfileUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsToHclTerraform;
class SagemakerUserProfileUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._amazonForecastRoleArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.amazonForecastRoleArn = this._amazonForecastRoleArn;
        }
        if (this._status !== undefined) {
            hasAnyValues = true;
            internalValueResult.status = this._status;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._amazonForecastRoleArn = undefined;
            this._status = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._amazonForecastRoleArn = value.amazonForecastRoleArn;
            this._status = value.status;
        }
    }
    get amazonForecastRoleArn() {
        return this.getStringAttribute('amazon_forecast_role_arn');
    }
    set amazonForecastRoleArn(value) {
        this._amazonForecastRoleArn = value;
    }
    resetAmazonForecastRoleArn() {
        this._amazonForecastRoleArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get amazonForecastRoleArnInput() {
        return this._amazonForecastRoleArn;
    }
    get status() {
        return this.getStringAttribute('status');
    }
    set status(value) {
        this._status = value;
    }
    resetStatus() {
        this._status = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get statusInput() {
        return this._status;
    }
}
exports.SagemakerUserProfileUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsOutputReference = SagemakerUserProfileUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsOutputReference;
_f = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsOutputReference[_f] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsOutputReference", version: "19.15.0" };
function sagemakerUserProfileUserSettingsCanvasAppSettingsWorkspaceSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        s3_artifact_path: cdktf.stringToTerraform(struct.s3ArtifactPath),
        s3_kms_key_id: cdktf.stringToTerraform(struct.s3KmsKeyId),
    };
}
exports.sagemakerUserProfileUserSettingsCanvasAppSettingsWorkspaceSettingsToTerraform = sagemakerUserProfileUserSettingsCanvasAppSettingsWorkspaceSettingsToTerraform;
function sagemakerUserProfileUserSettingsCanvasAppSettingsWorkspaceSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        s3_artifact_path: {
            value: cdktf.stringToHclTerraform(struct.s3ArtifactPath),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        s3_kms_key_id: {
            value: cdktf.stringToHclTerraform(struct.s3KmsKeyId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerUserProfileUserSettingsCanvasAppSettingsWorkspaceSettingsToHclTerraform = sagemakerUserProfileUserSettingsCanvasAppSettingsWorkspaceSettingsToHclTerraform;
class SagemakerUserProfileUserSettingsCanvasAppSettingsWorkspaceSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._s3ArtifactPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3ArtifactPath = this._s3ArtifactPath;
        }
        if (this._s3KmsKeyId !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3KmsKeyId = this._s3KmsKeyId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._s3ArtifactPath = undefined;
            this._s3KmsKeyId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._s3ArtifactPath = value.s3ArtifactPath;
            this._s3KmsKeyId = value.s3KmsKeyId;
        }
    }
    get s3ArtifactPath() {
        return this.getStringAttribute('s3_artifact_path');
    }
    set s3ArtifactPath(value) {
        this._s3ArtifactPath = value;
    }
    resetS3ArtifactPath() {
        this._s3ArtifactPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3ArtifactPathInput() {
        return this._s3ArtifactPath;
    }
    get s3KmsKeyId() {
        return this.getStringAttribute('s3_kms_key_id');
    }
    set s3KmsKeyId(value) {
        this._s3KmsKeyId = value;
    }
    resetS3KmsKeyId() {
        this._s3KmsKeyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3KmsKeyIdInput() {
        return this._s3KmsKeyId;
    }
}
exports.SagemakerUserProfileUserSettingsCanvasAppSettingsWorkspaceSettingsOutputReference = SagemakerUserProfileUserSettingsCanvasAppSettingsWorkspaceSettingsOutputReference;
_g = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsCanvasAppSettingsWorkspaceSettingsOutputReference[_g] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsCanvasAppSettingsWorkspaceSettingsOutputReference", version: "19.15.0" };
function sagemakerUserProfileUserSettingsCanvasAppSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        direct_deploy_settings: sagemakerUserProfileUserSettingsCanvasAppSettingsDirectDeploySettingsToTerraform(struct.directDeploySettings),
        identity_provider_oauth_settings: cdktf.listMapper(sagemakerUserProfileUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsToTerraform, true)(struct.identityProviderOauthSettings),
        kendra_settings: sagemakerUserProfileUserSettingsCanvasAppSettingsKendraSettingsToTerraform(struct.kendraSettings),
        model_register_settings: sagemakerUserProfileUserSettingsCanvasAppSettingsModelRegisterSettingsToTerraform(struct.modelRegisterSettings),
        time_series_forecasting_settings: sagemakerUserProfileUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsToTerraform(struct.timeSeriesForecastingSettings),
        workspace_settings: sagemakerUserProfileUserSettingsCanvasAppSettingsWorkspaceSettingsToTerraform(struct.workspaceSettings),
    };
}
exports.sagemakerUserProfileUserSettingsCanvasAppSettingsToTerraform = sagemakerUserProfileUserSettingsCanvasAppSettingsToTerraform;
function sagemakerUserProfileUserSettingsCanvasAppSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        direct_deploy_settings: {
            value: sagemakerUserProfileUserSettingsCanvasAppSettingsDirectDeploySettingsToHclTerraform(struct.directDeploySettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerUserProfileUserSettingsCanvasAppSettingsDirectDeploySettingsList",
        },
        identity_provider_oauth_settings: {
            value: cdktf.listMapperHcl(sagemakerUserProfileUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsToHclTerraform, true)(struct.identityProviderOauthSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerUserProfileUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsList",
        },
        kendra_settings: {
            value: sagemakerUserProfileUserSettingsCanvasAppSettingsKendraSettingsToHclTerraform(struct.kendraSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerUserProfileUserSettingsCanvasAppSettingsKendraSettingsList",
        },
        model_register_settings: {
            value: sagemakerUserProfileUserSettingsCanvasAppSettingsModelRegisterSettingsToHclTerraform(struct.modelRegisterSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerUserProfileUserSettingsCanvasAppSettingsModelRegisterSettingsList",
        },
        time_series_forecasting_settings: {
            value: sagemakerUserProfileUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsToHclTerraform(struct.timeSeriesForecastingSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerUserProfileUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsList",
        },
        workspace_settings: {
            value: sagemakerUserProfileUserSettingsCanvasAppSettingsWorkspaceSettingsToHclTerraform(struct.workspaceSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerUserProfileUserSettingsCanvasAppSettingsWorkspaceSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerUserProfileUserSettingsCanvasAppSettingsToHclTerraform = sagemakerUserProfileUserSettingsCanvasAppSettingsToHclTerraform;
class SagemakerUserProfileUserSettingsCanvasAppSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // direct_deploy_settings - computed: false, optional: true, required: false
        this._directDeploySettings = new SagemakerUserProfileUserSettingsCanvasAppSettingsDirectDeploySettingsOutputReference(this, "direct_deploy_settings");
        // identity_provider_oauth_settings - computed: false, optional: true, required: false
        this._identityProviderOauthSettings = new SagemakerUserProfileUserSettingsCanvasAppSettingsIdentityProviderOauthSettingsList(this, "identity_provider_oauth_settings", false);
        // kendra_settings - computed: false, optional: true, required: false
        this._kendraSettings = new SagemakerUserProfileUserSettingsCanvasAppSettingsKendraSettingsOutputReference(this, "kendra_settings");
        // model_register_settings - computed: false, optional: true, required: false
        this._modelRegisterSettings = new SagemakerUserProfileUserSettingsCanvasAppSettingsModelRegisterSettingsOutputReference(this, "model_register_settings");
        // time_series_forecasting_settings - computed: false, optional: true, required: false
        this._timeSeriesForecastingSettings = new SagemakerUserProfileUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsOutputReference(this, "time_series_forecasting_settings");
        // workspace_settings - computed: false, optional: true, required: false
        this._workspaceSettings = new SagemakerUserProfileUserSettingsCanvasAppSettingsWorkspaceSettingsOutputReference(this, "workspace_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._directDeploySettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.directDeploySettings = this._directDeploySettings?.internalValue;
        }
        if (this._identityProviderOauthSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.identityProviderOauthSettings = this._identityProviderOauthSettings?.internalValue;
        }
        if (this._kendraSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.kendraSettings = this._kendraSettings?.internalValue;
        }
        if (this._modelRegisterSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.modelRegisterSettings = this._modelRegisterSettings?.internalValue;
        }
        if (this._timeSeriesForecastingSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeSeriesForecastingSettings = this._timeSeriesForecastingSettings?.internalValue;
        }
        if (this._workspaceSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.workspaceSettings = this._workspaceSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._directDeploySettings.internalValue = undefined;
            this._identityProviderOauthSettings.internalValue = undefined;
            this._kendraSettings.internalValue = undefined;
            this._modelRegisterSettings.internalValue = undefined;
            this._timeSeriesForecastingSettings.internalValue = undefined;
            this._workspaceSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._directDeploySettings.internalValue = value.directDeploySettings;
            this._identityProviderOauthSettings.internalValue = value.identityProviderOauthSettings;
            this._kendraSettings.internalValue = value.kendraSettings;
            this._modelRegisterSettings.internalValue = value.modelRegisterSettings;
            this._timeSeriesForecastingSettings.internalValue = value.timeSeriesForecastingSettings;
            this._workspaceSettings.internalValue = value.workspaceSettings;
        }
    }
    get directDeploySettings() {
        return this._directDeploySettings;
    }
    putDirectDeploySettings(value) {
        this._directDeploySettings.internalValue = value;
    }
    resetDirectDeploySettings() {
        this._directDeploySettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get directDeploySettingsInput() {
        return this._directDeploySettings.internalValue;
    }
    get identityProviderOauthSettings() {
        return this._identityProviderOauthSettings;
    }
    putIdentityProviderOauthSettings(value) {
        this._identityProviderOauthSettings.internalValue = value;
    }
    resetIdentityProviderOauthSettings() {
        this._identityProviderOauthSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get identityProviderOauthSettingsInput() {
        return this._identityProviderOauthSettings.internalValue;
    }
    get kendraSettings() {
        return this._kendraSettings;
    }
    putKendraSettings(value) {
        this._kendraSettings.internalValue = value;
    }
    resetKendraSettings() {
        this._kendraSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kendraSettingsInput() {
        return this._kendraSettings.internalValue;
    }
    get modelRegisterSettings() {
        return this._modelRegisterSettings;
    }
    putModelRegisterSettings(value) {
        this._modelRegisterSettings.internalValue = value;
    }
    resetModelRegisterSettings() {
        this._modelRegisterSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get modelRegisterSettingsInput() {
        return this._modelRegisterSettings.internalValue;
    }
    get timeSeriesForecastingSettings() {
        return this._timeSeriesForecastingSettings;
    }
    putTimeSeriesForecastingSettings(value) {
        this._timeSeriesForecastingSettings.internalValue = value;
    }
    resetTimeSeriesForecastingSettings() {
        this._timeSeriesForecastingSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeSeriesForecastingSettingsInput() {
        return this._timeSeriesForecastingSettings.internalValue;
    }
    get workspaceSettings() {
        return this._workspaceSettings;
    }
    putWorkspaceSettings(value) {
        this._workspaceSettings.internalValue = value;
    }
    resetWorkspaceSettings() {
        this._workspaceSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get workspaceSettingsInput() {
        return this._workspaceSettings.internalValue;
    }
}
exports.SagemakerUserProfileUserSettingsCanvasAppSettingsOutputReference = SagemakerUserProfileUserSettingsCanvasAppSettingsOutputReference;
_h = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsCanvasAppSettingsOutputReference[_h] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsCanvasAppSettingsOutputReference", version: "19.15.0" };
function sagemakerUserProfileUserSettingsCodeEditorAppSettingsDefaultResourceSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        lifecycle_config_arn: cdktf.stringToTerraform(struct.lifecycleConfigArn),
        sagemaker_image_arn: cdktf.stringToTerraform(struct.sagemakerImageArn),
        sagemaker_image_version_alias: cdktf.stringToTerraform(struct.sagemakerImageVersionAlias),
        sagemaker_image_version_arn: cdktf.stringToTerraform(struct.sagemakerImageVersionArn),
    };
}
exports.sagemakerUserProfileUserSettingsCodeEditorAppSettingsDefaultResourceSpecToTerraform = sagemakerUserProfileUserSettingsCodeEditorAppSettingsDefaultResourceSpecToTerraform;
function sagemakerUserProfileUserSettingsCodeEditorAppSettingsDefaultResourceSpecToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        instance_type: {
            value: cdktf.stringToHclTerraform(struct.instanceType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        lifecycle_config_arn: {
            value: cdktf.stringToHclTerraform(struct.lifecycleConfigArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_arn: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_version_alias: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageVersionAlias),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_version_arn: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageVersionArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerUserProfileUserSettingsCodeEditorAppSettingsDefaultResourceSpecToHclTerraform = sagemakerUserProfileUserSettingsCodeEditorAppSettingsDefaultResourceSpecToHclTerraform;
class SagemakerUserProfileUserSettingsCodeEditorAppSettingsDefaultResourceSpecOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._instanceType !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceType = this._instanceType;
        }
        if (this._lifecycleConfigArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.lifecycleConfigArn = this._lifecycleConfigArn;
        }
        if (this._sagemakerImageArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageArn = this._sagemakerImageArn;
        }
        if (this._sagemakerImageVersionAlias !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageVersionAlias = this._sagemakerImageVersionAlias;
        }
        if (this._sagemakerImageVersionArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageVersionArn = this._sagemakerImageVersionArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._instanceType = undefined;
            this._lifecycleConfigArn = undefined;
            this._sagemakerImageArn = undefined;
            this._sagemakerImageVersionAlias = undefined;
            this._sagemakerImageVersionArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._instanceType = value.instanceType;
            this._lifecycleConfigArn = value.lifecycleConfigArn;
            this._sagemakerImageArn = value.sagemakerImageArn;
            this._sagemakerImageVersionAlias = value.sagemakerImageVersionAlias;
            this._sagemakerImageVersionArn = value.sagemakerImageVersionArn;
        }
    }
    get instanceType() {
        return this.getStringAttribute('instance_type');
    }
    set instanceType(value) {
        this._instanceType = value;
    }
    resetInstanceType() {
        this._instanceType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceTypeInput() {
        return this._instanceType;
    }
    get lifecycleConfigArn() {
        return this.getStringAttribute('lifecycle_config_arn');
    }
    set lifecycleConfigArn(value) {
        this._lifecycleConfigArn = value;
    }
    resetLifecycleConfigArn() {
        this._lifecycleConfigArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifecycleConfigArnInput() {
        return this._lifecycleConfigArn;
    }
    get sagemakerImageArn() {
        return this.getStringAttribute('sagemaker_image_arn');
    }
    set sagemakerImageArn(value) {
        this._sagemakerImageArn = value;
    }
    resetSagemakerImageArn() {
        this._sagemakerImageArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageArnInput() {
        return this._sagemakerImageArn;
    }
    get sagemakerImageVersionAlias() {
        return this.getStringAttribute('sagemaker_image_version_alias');
    }
    set sagemakerImageVersionAlias(value) {
        this._sagemakerImageVersionAlias = value;
    }
    resetSagemakerImageVersionAlias() {
        this._sagemakerImageVersionAlias = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageVersionAliasInput() {
        return this._sagemakerImageVersionAlias;
    }
    get sagemakerImageVersionArn() {
        return this.getStringAttribute('sagemaker_image_version_arn');
    }
    set sagemakerImageVersionArn(value) {
        this._sagemakerImageVersionArn = value;
    }
    resetSagemakerImageVersionArn() {
        this._sagemakerImageVersionArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageVersionArnInput() {
        return this._sagemakerImageVersionArn;
    }
}
exports.SagemakerUserProfileUserSettingsCodeEditorAppSettingsDefaultResourceSpecOutputReference = SagemakerUserProfileUserSettingsCodeEditorAppSettingsDefaultResourceSpecOutputReference;
_j = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsCodeEditorAppSettingsDefaultResourceSpecOutputReference[_j] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsCodeEditorAppSettingsDefaultResourceSpecOutputReference", version: "19.15.0" };
function sagemakerUserProfileUserSettingsCodeEditorAppSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        lifecycle_config_arns: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.lifecycleConfigArns),
        default_resource_spec: sagemakerUserProfileUserSettingsCodeEditorAppSettingsDefaultResourceSpecToTerraform(struct.defaultResourceSpec),
    };
}
exports.sagemakerUserProfileUserSettingsCodeEditorAppSettingsToTerraform = sagemakerUserProfileUserSettingsCodeEditorAppSettingsToTerraform;
function sagemakerUserProfileUserSettingsCodeEditorAppSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        lifecycle_config_arns: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.lifecycleConfigArns),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        default_resource_spec: {
            value: sagemakerUserProfileUserSettingsCodeEditorAppSettingsDefaultResourceSpecToHclTerraform(struct.defaultResourceSpec),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerUserProfileUserSettingsCodeEditorAppSettingsDefaultResourceSpecList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerUserProfileUserSettingsCodeEditorAppSettingsToHclTerraform = sagemakerUserProfileUserSettingsCodeEditorAppSettingsToHclTerraform;
class SagemakerUserProfileUserSettingsCodeEditorAppSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // default_resource_spec - computed: false, optional: true, required: false
        this._defaultResourceSpec = new SagemakerUserProfileUserSettingsCodeEditorAppSettingsDefaultResourceSpecOutputReference(this, "default_resource_spec");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._lifecycleConfigArns !== undefined) {
            hasAnyValues = true;
            internalValueResult.lifecycleConfigArns = this._lifecycleConfigArns;
        }
        if (this._defaultResourceSpec?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultResourceSpec = this._defaultResourceSpec?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._lifecycleConfigArns = undefined;
            this._defaultResourceSpec.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._lifecycleConfigArns = value.lifecycleConfigArns;
            this._defaultResourceSpec.internalValue = value.defaultResourceSpec;
        }
    }
    get lifecycleConfigArns() {
        return cdktf.Fn.tolist(this.getListAttribute('lifecycle_config_arns'));
    }
    set lifecycleConfigArns(value) {
        this._lifecycleConfigArns = value;
    }
    resetLifecycleConfigArns() {
        this._lifecycleConfigArns = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifecycleConfigArnsInput() {
        return this._lifecycleConfigArns;
    }
    get defaultResourceSpec() {
        return this._defaultResourceSpec;
    }
    putDefaultResourceSpec(value) {
        this._defaultResourceSpec.internalValue = value;
    }
    resetDefaultResourceSpec() {
        this._defaultResourceSpec.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultResourceSpecInput() {
        return this._defaultResourceSpec.internalValue;
    }
}
exports.SagemakerUserProfileUserSettingsCodeEditorAppSettingsOutputReference = SagemakerUserProfileUserSettingsCodeEditorAppSettingsOutputReference;
_k = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsCodeEditorAppSettingsOutputReference[_k] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsCodeEditorAppSettingsOutputReference", version: "19.15.0" };
function sagemakerUserProfileUserSettingsCustomFileSystemConfigEfsFileSystemConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        file_system_id: cdktf.stringToTerraform(struct.fileSystemId),
        file_system_path: cdktf.stringToTerraform(struct.fileSystemPath),
    };
}
exports.sagemakerUserProfileUserSettingsCustomFileSystemConfigEfsFileSystemConfigToTerraform = sagemakerUserProfileUserSettingsCustomFileSystemConfigEfsFileSystemConfigToTerraform;
function sagemakerUserProfileUserSettingsCustomFileSystemConfigEfsFileSystemConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        file_system_id: {
            value: cdktf.stringToHclTerraform(struct.fileSystemId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        file_system_path: {
            value: cdktf.stringToHclTerraform(struct.fileSystemPath),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerUserProfileUserSettingsCustomFileSystemConfigEfsFileSystemConfigToHclTerraform = sagemakerUserProfileUserSettingsCustomFileSystemConfigEfsFileSystemConfigToHclTerraform;
class SagemakerUserProfileUserSettingsCustomFileSystemConfigEfsFileSystemConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._fileSystemId !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileSystemId = this._fileSystemId;
        }
        if (this._fileSystemPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileSystemPath = this._fileSystemPath;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._fileSystemId = undefined;
            this._fileSystemPath = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._fileSystemId = value.fileSystemId;
            this._fileSystemPath = value.fileSystemPath;
        }
    }
    get fileSystemId() {
        return this.getStringAttribute('file_system_id');
    }
    set fileSystemId(value) {
        this._fileSystemId = value;
    }
    // Temporarily expose input value. Use with caution.
    get fileSystemIdInput() {
        return this._fileSystemId;
    }
    get fileSystemPath() {
        return this.getStringAttribute('file_system_path');
    }
    set fileSystemPath(value) {
        this._fileSystemPath = value;
    }
    resetFileSystemPath() {
        this._fileSystemPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileSystemPathInput() {
        return this._fileSystemPath;
    }
}
exports.SagemakerUserProfileUserSettingsCustomFileSystemConfigEfsFileSystemConfigOutputReference = SagemakerUserProfileUserSettingsCustomFileSystemConfigEfsFileSystemConfigOutputReference;
_l = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsCustomFileSystemConfigEfsFileSystemConfigOutputReference[_l] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsCustomFileSystemConfigEfsFileSystemConfigOutputReference", version: "19.15.0" };
class SagemakerUserProfileUserSettingsCustomFileSystemConfigEfsFileSystemConfigList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SagemakerUserProfileUserSettingsCustomFileSystemConfigEfsFileSystemConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SagemakerUserProfileUserSettingsCustomFileSystemConfigEfsFileSystemConfigList = SagemakerUserProfileUserSettingsCustomFileSystemConfigEfsFileSystemConfigList;
_m = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsCustomFileSystemConfigEfsFileSystemConfigList[_m] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsCustomFileSystemConfigEfsFileSystemConfigList", version: "19.15.0" };
function sagemakerUserProfileUserSettingsCustomFileSystemConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        efs_file_system_config: cdktf.listMapper(sagemakerUserProfileUserSettingsCustomFileSystemConfigEfsFileSystemConfigToTerraform, true)(struct.efsFileSystemConfig),
    };
}
exports.sagemakerUserProfileUserSettingsCustomFileSystemConfigToTerraform = sagemakerUserProfileUserSettingsCustomFileSystemConfigToTerraform;
function sagemakerUserProfileUserSettingsCustomFileSystemConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        efs_file_system_config: {
            value: cdktf.listMapperHcl(sagemakerUserProfileUserSettingsCustomFileSystemConfigEfsFileSystemConfigToHclTerraform, true)(struct.efsFileSystemConfig),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerUserProfileUserSettingsCustomFileSystemConfigEfsFileSystemConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerUserProfileUserSettingsCustomFileSystemConfigToHclTerraform = sagemakerUserProfileUserSettingsCustomFileSystemConfigToHclTerraform;
class SagemakerUserProfileUserSettingsCustomFileSystemConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // efs_file_system_config - computed: false, optional: true, required: false
        this._efsFileSystemConfig = new SagemakerUserProfileUserSettingsCustomFileSystemConfigEfsFileSystemConfigList(this, "efs_file_system_config", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._efsFileSystemConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.efsFileSystemConfig = this._efsFileSystemConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._efsFileSystemConfig.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._efsFileSystemConfig.internalValue = value.efsFileSystemConfig;
        }
    }
    get efsFileSystemConfig() {
        return this._efsFileSystemConfig;
    }
    putEfsFileSystemConfig(value) {
        this._efsFileSystemConfig.internalValue = value;
    }
    resetEfsFileSystemConfig() {
        this._efsFileSystemConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get efsFileSystemConfigInput() {
        return this._efsFileSystemConfig.internalValue;
    }
}
exports.SagemakerUserProfileUserSettingsCustomFileSystemConfigOutputReference = SagemakerUserProfileUserSettingsCustomFileSystemConfigOutputReference;
_o = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsCustomFileSystemConfigOutputReference[_o] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsCustomFileSystemConfigOutputReference", version: "19.15.0" };
class SagemakerUserProfileUserSettingsCustomFileSystemConfigList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SagemakerUserProfileUserSettingsCustomFileSystemConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SagemakerUserProfileUserSettingsCustomFileSystemConfigList = SagemakerUserProfileUserSettingsCustomFileSystemConfigList;
_p = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsCustomFileSystemConfigList[_p] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsCustomFileSystemConfigList", version: "19.15.0" };
function sagemakerUserProfileUserSettingsCustomPosixUserConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        gid: cdktf.numberToTerraform(struct.gid),
        uid: cdktf.numberToTerraform(struct.uid),
    };
}
exports.sagemakerUserProfileUserSettingsCustomPosixUserConfigToTerraform = sagemakerUserProfileUserSettingsCustomPosixUserConfigToTerraform;
function sagemakerUserProfileUserSettingsCustomPosixUserConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        gid: {
            value: cdktf.numberToHclTerraform(struct.gid),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        uid: {
            value: cdktf.numberToHclTerraform(struct.uid),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerUserProfileUserSettingsCustomPosixUserConfigToHclTerraform = sagemakerUserProfileUserSettingsCustomPosixUserConfigToHclTerraform;
class SagemakerUserProfileUserSettingsCustomPosixUserConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._gid !== undefined) {
            hasAnyValues = true;
            internalValueResult.gid = this._gid;
        }
        if (this._uid !== undefined) {
            hasAnyValues = true;
            internalValueResult.uid = this._uid;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._gid = undefined;
            this._uid = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._gid = value.gid;
            this._uid = value.uid;
        }
    }
    get gid() {
        return this.getNumberAttribute('gid');
    }
    set gid(value) {
        this._gid = value;
    }
    // Temporarily expose input value. Use with caution.
    get gidInput() {
        return this._gid;
    }
    get uid() {
        return this.getNumberAttribute('uid');
    }
    set uid(value) {
        this._uid = value;
    }
    // Temporarily expose input value. Use with caution.
    get uidInput() {
        return this._uid;
    }
}
exports.SagemakerUserProfileUserSettingsCustomPosixUserConfigOutputReference = SagemakerUserProfileUserSettingsCustomPosixUserConfigOutputReference;
_q = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsCustomPosixUserConfigOutputReference[_q] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsCustomPosixUserConfigOutputReference", version: "19.15.0" };
function sagemakerUserProfileUserSettingsJupyterLabAppSettingsCodeRepositoryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        repository_url: cdktf.stringToTerraform(struct.repositoryUrl),
    };
}
exports.sagemakerUserProfileUserSettingsJupyterLabAppSettingsCodeRepositoryToTerraform = sagemakerUserProfileUserSettingsJupyterLabAppSettingsCodeRepositoryToTerraform;
function sagemakerUserProfileUserSettingsJupyterLabAppSettingsCodeRepositoryToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        repository_url: {
            value: cdktf.stringToHclTerraform(struct.repositoryUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerUserProfileUserSettingsJupyterLabAppSettingsCodeRepositoryToHclTerraform = sagemakerUserProfileUserSettingsJupyterLabAppSettingsCodeRepositoryToHclTerraform;
class SagemakerUserProfileUserSettingsJupyterLabAppSettingsCodeRepositoryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._repositoryUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.repositoryUrl = this._repositoryUrl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._repositoryUrl = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._repositoryUrl = value.repositoryUrl;
        }
    }
    get repositoryUrl() {
        return this.getStringAttribute('repository_url');
    }
    set repositoryUrl(value) {
        this._repositoryUrl = value;
    }
    // Temporarily expose input value. Use with caution.
    get repositoryUrlInput() {
        return this._repositoryUrl;
    }
}
exports.SagemakerUserProfileUserSettingsJupyterLabAppSettingsCodeRepositoryOutputReference = SagemakerUserProfileUserSettingsJupyterLabAppSettingsCodeRepositoryOutputReference;
_r = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsJupyterLabAppSettingsCodeRepositoryOutputReference[_r] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsJupyterLabAppSettingsCodeRepositoryOutputReference", version: "19.15.0" };
class SagemakerUserProfileUserSettingsJupyterLabAppSettingsCodeRepositoryList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SagemakerUserProfileUserSettingsJupyterLabAppSettingsCodeRepositoryOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SagemakerUserProfileUserSettingsJupyterLabAppSettingsCodeRepositoryList = SagemakerUserProfileUserSettingsJupyterLabAppSettingsCodeRepositoryList;
_s = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsJupyterLabAppSettingsCodeRepositoryList[_s] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsJupyterLabAppSettingsCodeRepositoryList", version: "19.15.0" };
function sagemakerUserProfileUserSettingsJupyterLabAppSettingsCustomImageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        app_image_config_name: cdktf.stringToTerraform(struct.appImageConfigName),
        image_name: cdktf.stringToTerraform(struct.imageName),
        image_version_number: cdktf.numberToTerraform(struct.imageVersionNumber),
    };
}
exports.sagemakerUserProfileUserSettingsJupyterLabAppSettingsCustomImageToTerraform = sagemakerUserProfileUserSettingsJupyterLabAppSettingsCustomImageToTerraform;
function sagemakerUserProfileUserSettingsJupyterLabAppSettingsCustomImageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        app_image_config_name: {
            value: cdktf.stringToHclTerraform(struct.appImageConfigName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        image_name: {
            value: cdktf.stringToHclTerraform(struct.imageName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        image_version_number: {
            value: cdktf.numberToHclTerraform(struct.imageVersionNumber),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerUserProfileUserSettingsJupyterLabAppSettingsCustomImageToHclTerraform = sagemakerUserProfileUserSettingsJupyterLabAppSettingsCustomImageToHclTerraform;
class SagemakerUserProfileUserSettingsJupyterLabAppSettingsCustomImageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._appImageConfigName !== undefined) {
            hasAnyValues = true;
            internalValueResult.appImageConfigName = this._appImageConfigName;
        }
        if (this._imageName !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageName = this._imageName;
        }
        if (this._imageVersionNumber !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageVersionNumber = this._imageVersionNumber;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._appImageConfigName = undefined;
            this._imageName = undefined;
            this._imageVersionNumber = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._appImageConfigName = value.appImageConfigName;
            this._imageName = value.imageName;
            this._imageVersionNumber = value.imageVersionNumber;
        }
    }
    get appImageConfigName() {
        return this.getStringAttribute('app_image_config_name');
    }
    set appImageConfigName(value) {
        this._appImageConfigName = value;
    }
    // Temporarily expose input value. Use with caution.
    get appImageConfigNameInput() {
        return this._appImageConfigName;
    }
    get imageName() {
        return this.getStringAttribute('image_name');
    }
    set imageName(value) {
        this._imageName = value;
    }
    // Temporarily expose input value. Use with caution.
    get imageNameInput() {
        return this._imageName;
    }
    get imageVersionNumber() {
        return this.getNumberAttribute('image_version_number');
    }
    set imageVersionNumber(value) {
        this._imageVersionNumber = value;
    }
    resetImageVersionNumber() {
        this._imageVersionNumber = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageVersionNumberInput() {
        return this._imageVersionNumber;
    }
}
exports.SagemakerUserProfileUserSettingsJupyterLabAppSettingsCustomImageOutputReference = SagemakerUserProfileUserSettingsJupyterLabAppSettingsCustomImageOutputReference;
_t = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsJupyterLabAppSettingsCustomImageOutputReference[_t] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsJupyterLabAppSettingsCustomImageOutputReference", version: "19.15.0" };
class SagemakerUserProfileUserSettingsJupyterLabAppSettingsCustomImageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SagemakerUserProfileUserSettingsJupyterLabAppSettingsCustomImageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SagemakerUserProfileUserSettingsJupyterLabAppSettingsCustomImageList = SagemakerUserProfileUserSettingsJupyterLabAppSettingsCustomImageList;
_u = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsJupyterLabAppSettingsCustomImageList[_u] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsJupyterLabAppSettingsCustomImageList", version: "19.15.0" };
function sagemakerUserProfileUserSettingsJupyterLabAppSettingsDefaultResourceSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        lifecycle_config_arn: cdktf.stringToTerraform(struct.lifecycleConfigArn),
        sagemaker_image_arn: cdktf.stringToTerraform(struct.sagemakerImageArn),
        sagemaker_image_version_alias: cdktf.stringToTerraform(struct.sagemakerImageVersionAlias),
        sagemaker_image_version_arn: cdktf.stringToTerraform(struct.sagemakerImageVersionArn),
    };
}
exports.sagemakerUserProfileUserSettingsJupyterLabAppSettingsDefaultResourceSpecToTerraform = sagemakerUserProfileUserSettingsJupyterLabAppSettingsDefaultResourceSpecToTerraform;
function sagemakerUserProfileUserSettingsJupyterLabAppSettingsDefaultResourceSpecToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        instance_type: {
            value: cdktf.stringToHclTerraform(struct.instanceType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        lifecycle_config_arn: {
            value: cdktf.stringToHclTerraform(struct.lifecycleConfigArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_arn: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_version_alias: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageVersionAlias),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_version_arn: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageVersionArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerUserProfileUserSettingsJupyterLabAppSettingsDefaultResourceSpecToHclTerraform = sagemakerUserProfileUserSettingsJupyterLabAppSettingsDefaultResourceSpecToHclTerraform;
class SagemakerUserProfileUserSettingsJupyterLabAppSettingsDefaultResourceSpecOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._instanceType !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceType = this._instanceType;
        }
        if (this._lifecycleConfigArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.lifecycleConfigArn = this._lifecycleConfigArn;
        }
        if (this._sagemakerImageArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageArn = this._sagemakerImageArn;
        }
        if (this._sagemakerImageVersionAlias !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageVersionAlias = this._sagemakerImageVersionAlias;
        }
        if (this._sagemakerImageVersionArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageVersionArn = this._sagemakerImageVersionArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._instanceType = undefined;
            this._lifecycleConfigArn = undefined;
            this._sagemakerImageArn = undefined;
            this._sagemakerImageVersionAlias = undefined;
            this._sagemakerImageVersionArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._instanceType = value.instanceType;
            this._lifecycleConfigArn = value.lifecycleConfigArn;
            this._sagemakerImageArn = value.sagemakerImageArn;
            this._sagemakerImageVersionAlias = value.sagemakerImageVersionAlias;
            this._sagemakerImageVersionArn = value.sagemakerImageVersionArn;
        }
    }
    get instanceType() {
        return this.getStringAttribute('instance_type');
    }
    set instanceType(value) {
        this._instanceType = value;
    }
    resetInstanceType() {
        this._instanceType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceTypeInput() {
        return this._instanceType;
    }
    get lifecycleConfigArn() {
        return this.getStringAttribute('lifecycle_config_arn');
    }
    set lifecycleConfigArn(value) {
        this._lifecycleConfigArn = value;
    }
    resetLifecycleConfigArn() {
        this._lifecycleConfigArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifecycleConfigArnInput() {
        return this._lifecycleConfigArn;
    }
    get sagemakerImageArn() {
        return this.getStringAttribute('sagemaker_image_arn');
    }
    set sagemakerImageArn(value) {
        this._sagemakerImageArn = value;
    }
    resetSagemakerImageArn() {
        this._sagemakerImageArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageArnInput() {
        return this._sagemakerImageArn;
    }
    get sagemakerImageVersionAlias() {
        return this.getStringAttribute('sagemaker_image_version_alias');
    }
    set sagemakerImageVersionAlias(value) {
        this._sagemakerImageVersionAlias = value;
    }
    resetSagemakerImageVersionAlias() {
        this._sagemakerImageVersionAlias = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageVersionAliasInput() {
        return this._sagemakerImageVersionAlias;
    }
    get sagemakerImageVersionArn() {
        return this.getStringAttribute('sagemaker_image_version_arn');
    }
    set sagemakerImageVersionArn(value) {
        this._sagemakerImageVersionArn = value;
    }
    resetSagemakerImageVersionArn() {
        this._sagemakerImageVersionArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageVersionArnInput() {
        return this._sagemakerImageVersionArn;
    }
}
exports.SagemakerUserProfileUserSettingsJupyterLabAppSettingsDefaultResourceSpecOutputReference = SagemakerUserProfileUserSettingsJupyterLabAppSettingsDefaultResourceSpecOutputReference;
_v = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsJupyterLabAppSettingsDefaultResourceSpecOutputReference[_v] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsJupyterLabAppSettingsDefaultResourceSpecOutputReference", version: "19.15.0" };
function sagemakerUserProfileUserSettingsJupyterLabAppSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        lifecycle_config_arns: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.lifecycleConfigArns),
        code_repository: cdktf.listMapper(sagemakerUserProfileUserSettingsJupyterLabAppSettingsCodeRepositoryToTerraform, true)(struct.codeRepository),
        custom_image: cdktf.listMapper(sagemakerUserProfileUserSettingsJupyterLabAppSettingsCustomImageToTerraform, true)(struct.customImage),
        default_resource_spec: sagemakerUserProfileUserSettingsJupyterLabAppSettingsDefaultResourceSpecToTerraform(struct.defaultResourceSpec),
    };
}
exports.sagemakerUserProfileUserSettingsJupyterLabAppSettingsToTerraform = sagemakerUserProfileUserSettingsJupyterLabAppSettingsToTerraform;
function sagemakerUserProfileUserSettingsJupyterLabAppSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        lifecycle_config_arns: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.lifecycleConfigArns),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        code_repository: {
            value: cdktf.listMapperHcl(sagemakerUserProfileUserSettingsJupyterLabAppSettingsCodeRepositoryToHclTerraform, true)(struct.codeRepository),
            isBlock: true,
            type: "set",
            storageClassType: "SagemakerUserProfileUserSettingsJupyterLabAppSettingsCodeRepositoryList",
        },
        custom_image: {
            value: cdktf.listMapperHcl(sagemakerUserProfileUserSettingsJupyterLabAppSettingsCustomImageToHclTerraform, true)(struct.customImage),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerUserProfileUserSettingsJupyterLabAppSettingsCustomImageList",
        },
        default_resource_spec: {
            value: sagemakerUserProfileUserSettingsJupyterLabAppSettingsDefaultResourceSpecToHclTerraform(struct.defaultResourceSpec),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerUserProfileUserSettingsJupyterLabAppSettingsDefaultResourceSpecList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerUserProfileUserSettingsJupyterLabAppSettingsToHclTerraform = sagemakerUserProfileUserSettingsJupyterLabAppSettingsToHclTerraform;
class SagemakerUserProfileUserSettingsJupyterLabAppSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // code_repository - computed: false, optional: true, required: false
        this._codeRepository = new SagemakerUserProfileUserSettingsJupyterLabAppSettingsCodeRepositoryList(this, "code_repository", true);
        // custom_image - computed: false, optional: true, required: false
        this._customImage = new SagemakerUserProfileUserSettingsJupyterLabAppSettingsCustomImageList(this, "custom_image", false);
        // default_resource_spec - computed: false, optional: true, required: false
        this._defaultResourceSpec = new SagemakerUserProfileUserSettingsJupyterLabAppSettingsDefaultResourceSpecOutputReference(this, "default_resource_spec");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._lifecycleConfigArns !== undefined) {
            hasAnyValues = true;
            internalValueResult.lifecycleConfigArns = this._lifecycleConfigArns;
        }
        if (this._codeRepository?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.codeRepository = this._codeRepository?.internalValue;
        }
        if (this._customImage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customImage = this._customImage?.internalValue;
        }
        if (this._defaultResourceSpec?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultResourceSpec = this._defaultResourceSpec?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._lifecycleConfigArns = undefined;
            this._codeRepository.internalValue = undefined;
            this._customImage.internalValue = undefined;
            this._defaultResourceSpec.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._lifecycleConfigArns = value.lifecycleConfigArns;
            this._codeRepository.internalValue = value.codeRepository;
            this._customImage.internalValue = value.customImage;
            this._defaultResourceSpec.internalValue = value.defaultResourceSpec;
        }
    }
    get lifecycleConfigArns() {
        return cdktf.Fn.tolist(this.getListAttribute('lifecycle_config_arns'));
    }
    set lifecycleConfigArns(value) {
        this._lifecycleConfigArns = value;
    }
    resetLifecycleConfigArns() {
        this._lifecycleConfigArns = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifecycleConfigArnsInput() {
        return this._lifecycleConfigArns;
    }
    get codeRepository() {
        return this._codeRepository;
    }
    putCodeRepository(value) {
        this._codeRepository.internalValue = value;
    }
    resetCodeRepository() {
        this._codeRepository.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get codeRepositoryInput() {
        return this._codeRepository.internalValue;
    }
    get customImage() {
        return this._customImage;
    }
    putCustomImage(value) {
        this._customImage.internalValue = value;
    }
    resetCustomImage() {
        this._customImage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customImageInput() {
        return this._customImage.internalValue;
    }
    get defaultResourceSpec() {
        return this._defaultResourceSpec;
    }
    putDefaultResourceSpec(value) {
        this._defaultResourceSpec.internalValue = value;
    }
    resetDefaultResourceSpec() {
        this._defaultResourceSpec.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultResourceSpecInput() {
        return this._defaultResourceSpec.internalValue;
    }
}
exports.SagemakerUserProfileUserSettingsJupyterLabAppSettingsOutputReference = SagemakerUserProfileUserSettingsJupyterLabAppSettingsOutputReference;
_w = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsJupyterLabAppSettingsOutputReference[_w] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsJupyterLabAppSettingsOutputReference", version: "19.15.0" };
function sagemakerUserProfileUserSettingsJupyterServerAppSettingsCodeRepositoryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        repository_url: cdktf.stringToTerraform(struct.repositoryUrl),
    };
}
exports.sagemakerUserProfileUserSettingsJupyterServerAppSettingsCodeRepositoryToTerraform = sagemakerUserProfileUserSettingsJupyterServerAppSettingsCodeRepositoryToTerraform;
function sagemakerUserProfileUserSettingsJupyterServerAppSettingsCodeRepositoryToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        repository_url: {
            value: cdktf.stringToHclTerraform(struct.repositoryUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerUserProfileUserSettingsJupyterServerAppSettingsCodeRepositoryToHclTerraform = sagemakerUserProfileUserSettingsJupyterServerAppSettingsCodeRepositoryToHclTerraform;
class SagemakerUserProfileUserSettingsJupyterServerAppSettingsCodeRepositoryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._repositoryUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.repositoryUrl = this._repositoryUrl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._repositoryUrl = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._repositoryUrl = value.repositoryUrl;
        }
    }
    get repositoryUrl() {
        return this.getStringAttribute('repository_url');
    }
    set repositoryUrl(value) {
        this._repositoryUrl = value;
    }
    // Temporarily expose input value. Use with caution.
    get repositoryUrlInput() {
        return this._repositoryUrl;
    }
}
exports.SagemakerUserProfileUserSettingsJupyterServerAppSettingsCodeRepositoryOutputReference = SagemakerUserProfileUserSettingsJupyterServerAppSettingsCodeRepositoryOutputReference;
_x = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsJupyterServerAppSettingsCodeRepositoryOutputReference[_x] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsJupyterServerAppSettingsCodeRepositoryOutputReference", version: "19.15.0" };
class SagemakerUserProfileUserSettingsJupyterServerAppSettingsCodeRepositoryList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SagemakerUserProfileUserSettingsJupyterServerAppSettingsCodeRepositoryOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SagemakerUserProfileUserSettingsJupyterServerAppSettingsCodeRepositoryList = SagemakerUserProfileUserSettingsJupyterServerAppSettingsCodeRepositoryList;
_y = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsJupyterServerAppSettingsCodeRepositoryList[_y] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsJupyterServerAppSettingsCodeRepositoryList", version: "19.15.0" };
function sagemakerUserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        lifecycle_config_arn: cdktf.stringToTerraform(struct.lifecycleConfigArn),
        sagemaker_image_arn: cdktf.stringToTerraform(struct.sagemakerImageArn),
        sagemaker_image_version_alias: cdktf.stringToTerraform(struct.sagemakerImageVersionAlias),
        sagemaker_image_version_arn: cdktf.stringToTerraform(struct.sagemakerImageVersionArn),
    };
}
exports.sagemakerUserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform = sagemakerUserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform;
function sagemakerUserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        instance_type: {
            value: cdktf.stringToHclTerraform(struct.instanceType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        lifecycle_config_arn: {
            value: cdktf.stringToHclTerraform(struct.lifecycleConfigArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_arn: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_version_alias: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageVersionAlias),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_version_arn: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageVersionArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerUserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecToHclTerraform = sagemakerUserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecToHclTerraform;
class SagemakerUserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._instanceType !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceType = this._instanceType;
        }
        if (this._lifecycleConfigArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.lifecycleConfigArn = this._lifecycleConfigArn;
        }
        if (this._sagemakerImageArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageArn = this._sagemakerImageArn;
        }
        if (this._sagemakerImageVersionAlias !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageVersionAlias = this._sagemakerImageVersionAlias;
        }
        if (this._sagemakerImageVersionArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageVersionArn = this._sagemakerImageVersionArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._instanceType = undefined;
            this._lifecycleConfigArn = undefined;
            this._sagemakerImageArn = undefined;
            this._sagemakerImageVersionAlias = undefined;
            this._sagemakerImageVersionArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._instanceType = value.instanceType;
            this._lifecycleConfigArn = value.lifecycleConfigArn;
            this._sagemakerImageArn = value.sagemakerImageArn;
            this._sagemakerImageVersionAlias = value.sagemakerImageVersionAlias;
            this._sagemakerImageVersionArn = value.sagemakerImageVersionArn;
        }
    }
    get instanceType() {
        return this.getStringAttribute('instance_type');
    }
    set instanceType(value) {
        this._instanceType = value;
    }
    resetInstanceType() {
        this._instanceType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceTypeInput() {
        return this._instanceType;
    }
    get lifecycleConfigArn() {
        return this.getStringAttribute('lifecycle_config_arn');
    }
    set lifecycleConfigArn(value) {
        this._lifecycleConfigArn = value;
    }
    resetLifecycleConfigArn() {
        this._lifecycleConfigArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifecycleConfigArnInput() {
        return this._lifecycleConfigArn;
    }
    get sagemakerImageArn() {
        return this.getStringAttribute('sagemaker_image_arn');
    }
    set sagemakerImageArn(value) {
        this._sagemakerImageArn = value;
    }
    resetSagemakerImageArn() {
        this._sagemakerImageArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageArnInput() {
        return this._sagemakerImageArn;
    }
    get sagemakerImageVersionAlias() {
        return this.getStringAttribute('sagemaker_image_version_alias');
    }
    set sagemakerImageVersionAlias(value) {
        this._sagemakerImageVersionAlias = value;
    }
    resetSagemakerImageVersionAlias() {
        this._sagemakerImageVersionAlias = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageVersionAliasInput() {
        return this._sagemakerImageVersionAlias;
    }
    get sagemakerImageVersionArn() {
        return this.getStringAttribute('sagemaker_image_version_arn');
    }
    set sagemakerImageVersionArn(value) {
        this._sagemakerImageVersionArn = value;
    }
    resetSagemakerImageVersionArn() {
        this._sagemakerImageVersionArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageVersionArnInput() {
        return this._sagemakerImageVersionArn;
    }
}
exports.SagemakerUserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecOutputReference = SagemakerUserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecOutputReference;
_z = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecOutputReference[_z] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecOutputReference", version: "19.15.0" };
function sagemakerUserProfileUserSettingsJupyterServerAppSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        lifecycle_config_arns: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.lifecycleConfigArns),
        code_repository: cdktf.listMapper(sagemakerUserProfileUserSettingsJupyterServerAppSettingsCodeRepositoryToTerraform, true)(struct.codeRepository),
        default_resource_spec: sagemakerUserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecToTerraform(struct.defaultResourceSpec),
    };
}
exports.sagemakerUserProfileUserSettingsJupyterServerAppSettingsToTerraform = sagemakerUserProfileUserSettingsJupyterServerAppSettingsToTerraform;
function sagemakerUserProfileUserSettingsJupyterServerAppSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        lifecycle_config_arns: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.lifecycleConfigArns),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        code_repository: {
            value: cdktf.listMapperHcl(sagemakerUserProfileUserSettingsJupyterServerAppSettingsCodeRepositoryToHclTerraform, true)(struct.codeRepository),
            isBlock: true,
            type: "set",
            storageClassType: "SagemakerUserProfileUserSettingsJupyterServerAppSettingsCodeRepositoryList",
        },
        default_resource_spec: {
            value: sagemakerUserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecToHclTerraform(struct.defaultResourceSpec),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerUserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerUserProfileUserSettingsJupyterServerAppSettingsToHclTerraform = sagemakerUserProfileUserSettingsJupyterServerAppSettingsToHclTerraform;
class SagemakerUserProfileUserSettingsJupyterServerAppSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // code_repository - computed: false, optional: true, required: false
        this._codeRepository = new SagemakerUserProfileUserSettingsJupyterServerAppSettingsCodeRepositoryList(this, "code_repository", true);
        // default_resource_spec - computed: false, optional: true, required: false
        this._defaultResourceSpec = new SagemakerUserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecOutputReference(this, "default_resource_spec");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._lifecycleConfigArns !== undefined) {
            hasAnyValues = true;
            internalValueResult.lifecycleConfigArns = this._lifecycleConfigArns;
        }
        if (this._codeRepository?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.codeRepository = this._codeRepository?.internalValue;
        }
        if (this._defaultResourceSpec?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultResourceSpec = this._defaultResourceSpec?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._lifecycleConfigArns = undefined;
            this._codeRepository.internalValue = undefined;
            this._defaultResourceSpec.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._lifecycleConfigArns = value.lifecycleConfigArns;
            this._codeRepository.internalValue = value.codeRepository;
            this._defaultResourceSpec.internalValue = value.defaultResourceSpec;
        }
    }
    get lifecycleConfigArns() {
        return cdktf.Fn.tolist(this.getListAttribute('lifecycle_config_arns'));
    }
    set lifecycleConfigArns(value) {
        this._lifecycleConfigArns = value;
    }
    resetLifecycleConfigArns() {
        this._lifecycleConfigArns = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifecycleConfigArnsInput() {
        return this._lifecycleConfigArns;
    }
    get codeRepository() {
        return this._codeRepository;
    }
    putCodeRepository(value) {
        this._codeRepository.internalValue = value;
    }
    resetCodeRepository() {
        this._codeRepository.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get codeRepositoryInput() {
        return this._codeRepository.internalValue;
    }
    get defaultResourceSpec() {
        return this._defaultResourceSpec;
    }
    putDefaultResourceSpec(value) {
        this._defaultResourceSpec.internalValue = value;
    }
    resetDefaultResourceSpec() {
        this._defaultResourceSpec.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultResourceSpecInput() {
        return this._defaultResourceSpec.internalValue;
    }
}
exports.SagemakerUserProfileUserSettingsJupyterServerAppSettingsOutputReference = SagemakerUserProfileUserSettingsJupyterServerAppSettingsOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsJupyterServerAppSettingsOutputReference[_0] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsJupyterServerAppSettingsOutputReference", version: "19.15.0" };
function sagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        app_image_config_name: cdktf.stringToTerraform(struct.appImageConfigName),
        image_name: cdktf.stringToTerraform(struct.imageName),
        image_version_number: cdktf.numberToTerraform(struct.imageVersionNumber),
    };
}
exports.sagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImageToTerraform = sagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImageToTerraform;
function sagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        app_image_config_name: {
            value: cdktf.stringToHclTerraform(struct.appImageConfigName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        image_name: {
            value: cdktf.stringToHclTerraform(struct.imageName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        image_version_number: {
            value: cdktf.numberToHclTerraform(struct.imageVersionNumber),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImageToHclTerraform = sagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImageToHclTerraform;
class SagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._appImageConfigName !== undefined) {
            hasAnyValues = true;
            internalValueResult.appImageConfigName = this._appImageConfigName;
        }
        if (this._imageName !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageName = this._imageName;
        }
        if (this._imageVersionNumber !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageVersionNumber = this._imageVersionNumber;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._appImageConfigName = undefined;
            this._imageName = undefined;
            this._imageVersionNumber = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._appImageConfigName = value.appImageConfigName;
            this._imageName = value.imageName;
            this._imageVersionNumber = value.imageVersionNumber;
        }
    }
    get appImageConfigName() {
        return this.getStringAttribute('app_image_config_name');
    }
    set appImageConfigName(value) {
        this._appImageConfigName = value;
    }
    // Temporarily expose input value. Use with caution.
    get appImageConfigNameInput() {
        return this._appImageConfigName;
    }
    get imageName() {
        return this.getStringAttribute('image_name');
    }
    set imageName(value) {
        this._imageName = value;
    }
    // Temporarily expose input value. Use with caution.
    get imageNameInput() {
        return this._imageName;
    }
    get imageVersionNumber() {
        return this.getNumberAttribute('image_version_number');
    }
    set imageVersionNumber(value) {
        this._imageVersionNumber = value;
    }
    resetImageVersionNumber() {
        this._imageVersionNumber = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageVersionNumberInput() {
        return this._imageVersionNumber;
    }
}
exports.SagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImageOutputReference = SagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImageOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImageOutputReference[_1] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImageOutputReference", version: "19.15.0" };
class SagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImageList = SagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImageList;
_2 = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImageList[_2] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImageList", version: "19.15.0" };
function sagemakerUserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        lifecycle_config_arn: cdktf.stringToTerraform(struct.lifecycleConfigArn),
        sagemaker_image_arn: cdktf.stringToTerraform(struct.sagemakerImageArn),
        sagemaker_image_version_alias: cdktf.stringToTerraform(struct.sagemakerImageVersionAlias),
        sagemaker_image_version_arn: cdktf.stringToTerraform(struct.sagemakerImageVersionArn),
    };
}
exports.sagemakerUserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform = sagemakerUserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform;
function sagemakerUserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        instance_type: {
            value: cdktf.stringToHclTerraform(struct.instanceType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        lifecycle_config_arn: {
            value: cdktf.stringToHclTerraform(struct.lifecycleConfigArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_arn: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_version_alias: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageVersionAlias),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_version_arn: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageVersionArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerUserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToHclTerraform = sagemakerUserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToHclTerraform;
class SagemakerUserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._instanceType !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceType = this._instanceType;
        }
        if (this._lifecycleConfigArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.lifecycleConfigArn = this._lifecycleConfigArn;
        }
        if (this._sagemakerImageArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageArn = this._sagemakerImageArn;
        }
        if (this._sagemakerImageVersionAlias !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageVersionAlias = this._sagemakerImageVersionAlias;
        }
        if (this._sagemakerImageVersionArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageVersionArn = this._sagemakerImageVersionArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._instanceType = undefined;
            this._lifecycleConfigArn = undefined;
            this._sagemakerImageArn = undefined;
            this._sagemakerImageVersionAlias = undefined;
            this._sagemakerImageVersionArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._instanceType = value.instanceType;
            this._lifecycleConfigArn = value.lifecycleConfigArn;
            this._sagemakerImageArn = value.sagemakerImageArn;
            this._sagemakerImageVersionAlias = value.sagemakerImageVersionAlias;
            this._sagemakerImageVersionArn = value.sagemakerImageVersionArn;
        }
    }
    get instanceType() {
        return this.getStringAttribute('instance_type');
    }
    set instanceType(value) {
        this._instanceType = value;
    }
    resetInstanceType() {
        this._instanceType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceTypeInput() {
        return this._instanceType;
    }
    get lifecycleConfigArn() {
        return this.getStringAttribute('lifecycle_config_arn');
    }
    set lifecycleConfigArn(value) {
        this._lifecycleConfigArn = value;
    }
    resetLifecycleConfigArn() {
        this._lifecycleConfigArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifecycleConfigArnInput() {
        return this._lifecycleConfigArn;
    }
    get sagemakerImageArn() {
        return this.getStringAttribute('sagemaker_image_arn');
    }
    set sagemakerImageArn(value) {
        this._sagemakerImageArn = value;
    }
    resetSagemakerImageArn() {
        this._sagemakerImageArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageArnInput() {
        return this._sagemakerImageArn;
    }
    get sagemakerImageVersionAlias() {
        return this.getStringAttribute('sagemaker_image_version_alias');
    }
    set sagemakerImageVersionAlias(value) {
        this._sagemakerImageVersionAlias = value;
    }
    resetSagemakerImageVersionAlias() {
        this._sagemakerImageVersionAlias = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageVersionAliasInput() {
        return this._sagemakerImageVersionAlias;
    }
    get sagemakerImageVersionArn() {
        return this.getStringAttribute('sagemaker_image_version_arn');
    }
    set sagemakerImageVersionArn(value) {
        this._sagemakerImageVersionArn = value;
    }
    resetSagemakerImageVersionArn() {
        this._sagemakerImageVersionArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageVersionArnInput() {
        return this._sagemakerImageVersionArn;
    }
}
exports.SagemakerUserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecOutputReference = SagemakerUserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecOutputReference;
_3 = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecOutputReference[_3] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecOutputReference", version: "19.15.0" };
function sagemakerUserProfileUserSettingsKernelGatewayAppSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        lifecycle_config_arns: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.lifecycleConfigArns),
        custom_image: cdktf.listMapper(sagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImageToTerraform, true)(struct.customImage),
        default_resource_spec: sagemakerUserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToTerraform(struct.defaultResourceSpec),
    };
}
exports.sagemakerUserProfileUserSettingsKernelGatewayAppSettingsToTerraform = sagemakerUserProfileUserSettingsKernelGatewayAppSettingsToTerraform;
function sagemakerUserProfileUserSettingsKernelGatewayAppSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        lifecycle_config_arns: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.lifecycleConfigArns),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        custom_image: {
            value: cdktf.listMapperHcl(sagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImageToHclTerraform, true)(struct.customImage),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImageList",
        },
        default_resource_spec: {
            value: sagemakerUserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecToHclTerraform(struct.defaultResourceSpec),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerUserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerUserProfileUserSettingsKernelGatewayAppSettingsToHclTerraform = sagemakerUserProfileUserSettingsKernelGatewayAppSettingsToHclTerraform;
class SagemakerUserProfileUserSettingsKernelGatewayAppSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // custom_image - computed: false, optional: true, required: false
        this._customImage = new SagemakerUserProfileUserSettingsKernelGatewayAppSettingsCustomImageList(this, "custom_image", false);
        // default_resource_spec - computed: false, optional: true, required: false
        this._defaultResourceSpec = new SagemakerUserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecOutputReference(this, "default_resource_spec");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._lifecycleConfigArns !== undefined) {
            hasAnyValues = true;
            internalValueResult.lifecycleConfigArns = this._lifecycleConfigArns;
        }
        if (this._customImage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customImage = this._customImage?.internalValue;
        }
        if (this._defaultResourceSpec?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultResourceSpec = this._defaultResourceSpec?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._lifecycleConfigArns = undefined;
            this._customImage.internalValue = undefined;
            this._defaultResourceSpec.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._lifecycleConfigArns = value.lifecycleConfigArns;
            this._customImage.internalValue = value.customImage;
            this._defaultResourceSpec.internalValue = value.defaultResourceSpec;
        }
    }
    get lifecycleConfigArns() {
        return cdktf.Fn.tolist(this.getListAttribute('lifecycle_config_arns'));
    }
    set lifecycleConfigArns(value) {
        this._lifecycleConfigArns = value;
    }
    resetLifecycleConfigArns() {
        this._lifecycleConfigArns = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifecycleConfigArnsInput() {
        return this._lifecycleConfigArns;
    }
    get customImage() {
        return this._customImage;
    }
    putCustomImage(value) {
        this._customImage.internalValue = value;
    }
    resetCustomImage() {
        this._customImage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customImageInput() {
        return this._customImage.internalValue;
    }
    get defaultResourceSpec() {
        return this._defaultResourceSpec;
    }
    putDefaultResourceSpec(value) {
        this._defaultResourceSpec.internalValue = value;
    }
    resetDefaultResourceSpec() {
        this._defaultResourceSpec.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultResourceSpecInput() {
        return this._defaultResourceSpec.internalValue;
    }
}
exports.SagemakerUserProfileUserSettingsKernelGatewayAppSettingsOutputReference = SagemakerUserProfileUserSettingsKernelGatewayAppSettingsOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsKernelGatewayAppSettingsOutputReference[_4] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsKernelGatewayAppSettingsOutputReference", version: "19.15.0" };
function sagemakerUserProfileUserSettingsRSessionAppSettingsCustomImageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        app_image_config_name: cdktf.stringToTerraform(struct.appImageConfigName),
        image_name: cdktf.stringToTerraform(struct.imageName),
        image_version_number: cdktf.numberToTerraform(struct.imageVersionNumber),
    };
}
exports.sagemakerUserProfileUserSettingsRSessionAppSettingsCustomImageToTerraform = sagemakerUserProfileUserSettingsRSessionAppSettingsCustomImageToTerraform;
function sagemakerUserProfileUserSettingsRSessionAppSettingsCustomImageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        app_image_config_name: {
            value: cdktf.stringToHclTerraform(struct.appImageConfigName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        image_name: {
            value: cdktf.stringToHclTerraform(struct.imageName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        image_version_number: {
            value: cdktf.numberToHclTerraform(struct.imageVersionNumber),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerUserProfileUserSettingsRSessionAppSettingsCustomImageToHclTerraform = sagemakerUserProfileUserSettingsRSessionAppSettingsCustomImageToHclTerraform;
class SagemakerUserProfileUserSettingsRSessionAppSettingsCustomImageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._appImageConfigName !== undefined) {
            hasAnyValues = true;
            internalValueResult.appImageConfigName = this._appImageConfigName;
        }
        if (this._imageName !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageName = this._imageName;
        }
        if (this._imageVersionNumber !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageVersionNumber = this._imageVersionNumber;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._appImageConfigName = undefined;
            this._imageName = undefined;
            this._imageVersionNumber = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._appImageConfigName = value.appImageConfigName;
            this._imageName = value.imageName;
            this._imageVersionNumber = value.imageVersionNumber;
        }
    }
    get appImageConfigName() {
        return this.getStringAttribute('app_image_config_name');
    }
    set appImageConfigName(value) {
        this._appImageConfigName = value;
    }
    // Temporarily expose input value. Use with caution.
    get appImageConfigNameInput() {
        return this._appImageConfigName;
    }
    get imageName() {
        return this.getStringAttribute('image_name');
    }
    set imageName(value) {
        this._imageName = value;
    }
    // Temporarily expose input value. Use with caution.
    get imageNameInput() {
        return this._imageName;
    }
    get imageVersionNumber() {
        return this.getNumberAttribute('image_version_number');
    }
    set imageVersionNumber(value) {
        this._imageVersionNumber = value;
    }
    resetImageVersionNumber() {
        this._imageVersionNumber = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageVersionNumberInput() {
        return this._imageVersionNumber;
    }
}
exports.SagemakerUserProfileUserSettingsRSessionAppSettingsCustomImageOutputReference = SagemakerUserProfileUserSettingsRSessionAppSettingsCustomImageOutputReference;
_5 = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsRSessionAppSettingsCustomImageOutputReference[_5] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsRSessionAppSettingsCustomImageOutputReference", version: "19.15.0" };
class SagemakerUserProfileUserSettingsRSessionAppSettingsCustomImageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SagemakerUserProfileUserSettingsRSessionAppSettingsCustomImageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SagemakerUserProfileUserSettingsRSessionAppSettingsCustomImageList = SagemakerUserProfileUserSettingsRSessionAppSettingsCustomImageList;
_6 = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsRSessionAppSettingsCustomImageList[_6] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsRSessionAppSettingsCustomImageList", version: "19.15.0" };
function sagemakerUserProfileUserSettingsRSessionAppSettingsDefaultResourceSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        lifecycle_config_arn: cdktf.stringToTerraform(struct.lifecycleConfigArn),
        sagemaker_image_arn: cdktf.stringToTerraform(struct.sagemakerImageArn),
        sagemaker_image_version_alias: cdktf.stringToTerraform(struct.sagemakerImageVersionAlias),
        sagemaker_image_version_arn: cdktf.stringToTerraform(struct.sagemakerImageVersionArn),
    };
}
exports.sagemakerUserProfileUserSettingsRSessionAppSettingsDefaultResourceSpecToTerraform = sagemakerUserProfileUserSettingsRSessionAppSettingsDefaultResourceSpecToTerraform;
function sagemakerUserProfileUserSettingsRSessionAppSettingsDefaultResourceSpecToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        instance_type: {
            value: cdktf.stringToHclTerraform(struct.instanceType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        lifecycle_config_arn: {
            value: cdktf.stringToHclTerraform(struct.lifecycleConfigArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_arn: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_version_alias: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageVersionAlias),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_version_arn: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageVersionArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerUserProfileUserSettingsRSessionAppSettingsDefaultResourceSpecToHclTerraform = sagemakerUserProfileUserSettingsRSessionAppSettingsDefaultResourceSpecToHclTerraform;
class SagemakerUserProfileUserSettingsRSessionAppSettingsDefaultResourceSpecOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._instanceType !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceType = this._instanceType;
        }
        if (this._lifecycleConfigArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.lifecycleConfigArn = this._lifecycleConfigArn;
        }
        if (this._sagemakerImageArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageArn = this._sagemakerImageArn;
        }
        if (this._sagemakerImageVersionAlias !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageVersionAlias = this._sagemakerImageVersionAlias;
        }
        if (this._sagemakerImageVersionArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageVersionArn = this._sagemakerImageVersionArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._instanceType = undefined;
            this._lifecycleConfigArn = undefined;
            this._sagemakerImageArn = undefined;
            this._sagemakerImageVersionAlias = undefined;
            this._sagemakerImageVersionArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._instanceType = value.instanceType;
            this._lifecycleConfigArn = value.lifecycleConfigArn;
            this._sagemakerImageArn = value.sagemakerImageArn;
            this._sagemakerImageVersionAlias = value.sagemakerImageVersionAlias;
            this._sagemakerImageVersionArn = value.sagemakerImageVersionArn;
        }
    }
    get instanceType() {
        return this.getStringAttribute('instance_type');
    }
    set instanceType(value) {
        this._instanceType = value;
    }
    resetInstanceType() {
        this._instanceType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceTypeInput() {
        return this._instanceType;
    }
    get lifecycleConfigArn() {
        return this.getStringAttribute('lifecycle_config_arn');
    }
    set lifecycleConfigArn(value) {
        this._lifecycleConfigArn = value;
    }
    resetLifecycleConfigArn() {
        this._lifecycleConfigArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifecycleConfigArnInput() {
        return this._lifecycleConfigArn;
    }
    get sagemakerImageArn() {
        return this.getStringAttribute('sagemaker_image_arn');
    }
    set sagemakerImageArn(value) {
        this._sagemakerImageArn = value;
    }
    resetSagemakerImageArn() {
        this._sagemakerImageArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageArnInput() {
        return this._sagemakerImageArn;
    }
    get sagemakerImageVersionAlias() {
        return this.getStringAttribute('sagemaker_image_version_alias');
    }
    set sagemakerImageVersionAlias(value) {
        this._sagemakerImageVersionAlias = value;
    }
    resetSagemakerImageVersionAlias() {
        this._sagemakerImageVersionAlias = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageVersionAliasInput() {
        return this._sagemakerImageVersionAlias;
    }
    get sagemakerImageVersionArn() {
        return this.getStringAttribute('sagemaker_image_version_arn');
    }
    set sagemakerImageVersionArn(value) {
        this._sagemakerImageVersionArn = value;
    }
    resetSagemakerImageVersionArn() {
        this._sagemakerImageVersionArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageVersionArnInput() {
        return this._sagemakerImageVersionArn;
    }
}
exports.SagemakerUserProfileUserSettingsRSessionAppSettingsDefaultResourceSpecOutputReference = SagemakerUserProfileUserSettingsRSessionAppSettingsDefaultResourceSpecOutputReference;
_7 = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsRSessionAppSettingsDefaultResourceSpecOutputReference[_7] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsRSessionAppSettingsDefaultResourceSpecOutputReference", version: "19.15.0" };
function sagemakerUserProfileUserSettingsRSessionAppSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        custom_image: cdktf.listMapper(sagemakerUserProfileUserSettingsRSessionAppSettingsCustomImageToTerraform, true)(struct.customImage),
        default_resource_spec: sagemakerUserProfileUserSettingsRSessionAppSettingsDefaultResourceSpecToTerraform(struct.defaultResourceSpec),
    };
}
exports.sagemakerUserProfileUserSettingsRSessionAppSettingsToTerraform = sagemakerUserProfileUserSettingsRSessionAppSettingsToTerraform;
function sagemakerUserProfileUserSettingsRSessionAppSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        custom_image: {
            value: cdktf.listMapperHcl(sagemakerUserProfileUserSettingsRSessionAppSettingsCustomImageToHclTerraform, true)(struct.customImage),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerUserProfileUserSettingsRSessionAppSettingsCustomImageList",
        },
        default_resource_spec: {
            value: sagemakerUserProfileUserSettingsRSessionAppSettingsDefaultResourceSpecToHclTerraform(struct.defaultResourceSpec),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerUserProfileUserSettingsRSessionAppSettingsDefaultResourceSpecList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerUserProfileUserSettingsRSessionAppSettingsToHclTerraform = sagemakerUserProfileUserSettingsRSessionAppSettingsToHclTerraform;
class SagemakerUserProfileUserSettingsRSessionAppSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // custom_image - computed: false, optional: true, required: false
        this._customImage = new SagemakerUserProfileUserSettingsRSessionAppSettingsCustomImageList(this, "custom_image", false);
        // default_resource_spec - computed: false, optional: true, required: false
        this._defaultResourceSpec = new SagemakerUserProfileUserSettingsRSessionAppSettingsDefaultResourceSpecOutputReference(this, "default_resource_spec");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._customImage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customImage = this._customImage?.internalValue;
        }
        if (this._defaultResourceSpec?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultResourceSpec = this._defaultResourceSpec?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._customImage.internalValue = undefined;
            this._defaultResourceSpec.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._customImage.internalValue = value.customImage;
            this._defaultResourceSpec.internalValue = value.defaultResourceSpec;
        }
    }
    get customImage() {
        return this._customImage;
    }
    putCustomImage(value) {
        this._customImage.internalValue = value;
    }
    resetCustomImage() {
        this._customImage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customImageInput() {
        return this._customImage.internalValue;
    }
    get defaultResourceSpec() {
        return this._defaultResourceSpec;
    }
    putDefaultResourceSpec(value) {
        this._defaultResourceSpec.internalValue = value;
    }
    resetDefaultResourceSpec() {
        this._defaultResourceSpec.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultResourceSpecInput() {
        return this._defaultResourceSpec.internalValue;
    }
}
exports.SagemakerUserProfileUserSettingsRSessionAppSettingsOutputReference = SagemakerUserProfileUserSettingsRSessionAppSettingsOutputReference;
_8 = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsRSessionAppSettingsOutputReference[_8] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsRSessionAppSettingsOutputReference", version: "19.15.0" };
function sagemakerUserProfileUserSettingsRStudioServerProAppSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        access_status: cdktf.stringToTerraform(struct.accessStatus),
        user_group: cdktf.stringToTerraform(struct.userGroup),
    };
}
exports.sagemakerUserProfileUserSettingsRStudioServerProAppSettingsToTerraform = sagemakerUserProfileUserSettingsRStudioServerProAppSettingsToTerraform;
function sagemakerUserProfileUserSettingsRStudioServerProAppSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        access_status: {
            value: cdktf.stringToHclTerraform(struct.accessStatus),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        user_group: {
            value: cdktf.stringToHclTerraform(struct.userGroup),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerUserProfileUserSettingsRStudioServerProAppSettingsToHclTerraform = sagemakerUserProfileUserSettingsRStudioServerProAppSettingsToHclTerraform;
class SagemakerUserProfileUserSettingsRStudioServerProAppSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._accessStatus !== undefined) {
            hasAnyValues = true;
            internalValueResult.accessStatus = this._accessStatus;
        }
        if (this._userGroup !== undefined) {
            hasAnyValues = true;
            internalValueResult.userGroup = this._userGroup;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._accessStatus = undefined;
            this._userGroup = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._accessStatus = value.accessStatus;
            this._userGroup = value.userGroup;
        }
    }
    get accessStatus() {
        return this.getStringAttribute('access_status');
    }
    set accessStatus(value) {
        this._accessStatus = value;
    }
    resetAccessStatus() {
        this._accessStatus = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessStatusInput() {
        return this._accessStatus;
    }
    get userGroup() {
        return this.getStringAttribute('user_group');
    }
    set userGroup(value) {
        this._userGroup = value;
    }
    resetUserGroup() {
        this._userGroup = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userGroupInput() {
        return this._userGroup;
    }
}
exports.SagemakerUserProfileUserSettingsRStudioServerProAppSettingsOutputReference = SagemakerUserProfileUserSettingsRStudioServerProAppSettingsOutputReference;
_9 = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsRStudioServerProAppSettingsOutputReference[_9] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsRStudioServerProAppSettingsOutputReference", version: "19.15.0" };
function sagemakerUserProfileUserSettingsSharingSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        notebook_output_option: cdktf.stringToTerraform(struct.notebookOutputOption),
        s3_kms_key_id: cdktf.stringToTerraform(struct.s3KmsKeyId),
        s3_output_path: cdktf.stringToTerraform(struct.s3OutputPath),
    };
}
exports.sagemakerUserProfileUserSettingsSharingSettingsToTerraform = sagemakerUserProfileUserSettingsSharingSettingsToTerraform;
function sagemakerUserProfileUserSettingsSharingSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        notebook_output_option: {
            value: cdktf.stringToHclTerraform(struct.notebookOutputOption),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        s3_kms_key_id: {
            value: cdktf.stringToHclTerraform(struct.s3KmsKeyId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        s3_output_path: {
            value: cdktf.stringToHclTerraform(struct.s3OutputPath),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerUserProfileUserSettingsSharingSettingsToHclTerraform = sagemakerUserProfileUserSettingsSharingSettingsToHclTerraform;
class SagemakerUserProfileUserSettingsSharingSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._notebookOutputOption !== undefined) {
            hasAnyValues = true;
            internalValueResult.notebookOutputOption = this._notebookOutputOption;
        }
        if (this._s3KmsKeyId !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3KmsKeyId = this._s3KmsKeyId;
        }
        if (this._s3OutputPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3OutputPath = this._s3OutputPath;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._notebookOutputOption = undefined;
            this._s3KmsKeyId = undefined;
            this._s3OutputPath = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._notebookOutputOption = value.notebookOutputOption;
            this._s3KmsKeyId = value.s3KmsKeyId;
            this._s3OutputPath = value.s3OutputPath;
        }
    }
    get notebookOutputOption() {
        return this.getStringAttribute('notebook_output_option');
    }
    set notebookOutputOption(value) {
        this._notebookOutputOption = value;
    }
    resetNotebookOutputOption() {
        this._notebookOutputOption = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get notebookOutputOptionInput() {
        return this._notebookOutputOption;
    }
    get s3KmsKeyId() {
        return this.getStringAttribute('s3_kms_key_id');
    }
    set s3KmsKeyId(value) {
        this._s3KmsKeyId = value;
    }
    resetS3KmsKeyId() {
        this._s3KmsKeyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3KmsKeyIdInput() {
        return this._s3KmsKeyId;
    }
    get s3OutputPath() {
        return this.getStringAttribute('s3_output_path');
    }
    set s3OutputPath(value) {
        this._s3OutputPath = value;
    }
    resetS3OutputPath() {
        this._s3OutputPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3OutputPathInput() {
        return this._s3OutputPath;
    }
}
exports.SagemakerUserProfileUserSettingsSharingSettingsOutputReference = SagemakerUserProfileUserSettingsSharingSettingsOutputReference;
_10 = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsSharingSettingsOutputReference[_10] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsSharingSettingsOutputReference", version: "19.15.0" };
function sagemakerUserProfileUserSettingsSpaceStorageSettingsDefaultEbsStorageSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        default_ebs_volume_size_in_gb: cdktf.numberToTerraform(struct.defaultEbsVolumeSizeInGb),
        maximum_ebs_volume_size_in_gb: cdktf.numberToTerraform(struct.maximumEbsVolumeSizeInGb),
    };
}
exports.sagemakerUserProfileUserSettingsSpaceStorageSettingsDefaultEbsStorageSettingsToTerraform = sagemakerUserProfileUserSettingsSpaceStorageSettingsDefaultEbsStorageSettingsToTerraform;
function sagemakerUserProfileUserSettingsSpaceStorageSettingsDefaultEbsStorageSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        default_ebs_volume_size_in_gb: {
            value: cdktf.numberToHclTerraform(struct.defaultEbsVolumeSizeInGb),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        maximum_ebs_volume_size_in_gb: {
            value: cdktf.numberToHclTerraform(struct.maximumEbsVolumeSizeInGb),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerUserProfileUserSettingsSpaceStorageSettingsDefaultEbsStorageSettingsToHclTerraform = sagemakerUserProfileUserSettingsSpaceStorageSettingsDefaultEbsStorageSettingsToHclTerraform;
class SagemakerUserProfileUserSettingsSpaceStorageSettingsDefaultEbsStorageSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._defaultEbsVolumeSizeInGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultEbsVolumeSizeInGb = this._defaultEbsVolumeSizeInGb;
        }
        if (this._maximumEbsVolumeSizeInGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.maximumEbsVolumeSizeInGb = this._maximumEbsVolumeSizeInGb;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._defaultEbsVolumeSizeInGb = undefined;
            this._maximumEbsVolumeSizeInGb = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._defaultEbsVolumeSizeInGb = value.defaultEbsVolumeSizeInGb;
            this._maximumEbsVolumeSizeInGb = value.maximumEbsVolumeSizeInGb;
        }
    }
    get defaultEbsVolumeSizeInGb() {
        return this.getNumberAttribute('default_ebs_volume_size_in_gb');
    }
    set defaultEbsVolumeSizeInGb(value) {
        this._defaultEbsVolumeSizeInGb = value;
    }
    // Temporarily expose input value. Use with caution.
    get defaultEbsVolumeSizeInGbInput() {
        return this._defaultEbsVolumeSizeInGb;
    }
    get maximumEbsVolumeSizeInGb() {
        return this.getNumberAttribute('maximum_ebs_volume_size_in_gb');
    }
    set maximumEbsVolumeSizeInGb(value) {
        this._maximumEbsVolumeSizeInGb = value;
    }
    // Temporarily expose input value. Use with caution.
    get maximumEbsVolumeSizeInGbInput() {
        return this._maximumEbsVolumeSizeInGb;
    }
}
exports.SagemakerUserProfileUserSettingsSpaceStorageSettingsDefaultEbsStorageSettingsOutputReference = SagemakerUserProfileUserSettingsSpaceStorageSettingsDefaultEbsStorageSettingsOutputReference;
_11 = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsSpaceStorageSettingsDefaultEbsStorageSettingsOutputReference[_11] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsSpaceStorageSettingsDefaultEbsStorageSettingsOutputReference", version: "19.15.0" };
function sagemakerUserProfileUserSettingsSpaceStorageSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        default_ebs_storage_settings: sagemakerUserProfileUserSettingsSpaceStorageSettingsDefaultEbsStorageSettingsToTerraform(struct.defaultEbsStorageSettings),
    };
}
exports.sagemakerUserProfileUserSettingsSpaceStorageSettingsToTerraform = sagemakerUserProfileUserSettingsSpaceStorageSettingsToTerraform;
function sagemakerUserProfileUserSettingsSpaceStorageSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        default_ebs_storage_settings: {
            value: sagemakerUserProfileUserSettingsSpaceStorageSettingsDefaultEbsStorageSettingsToHclTerraform(struct.defaultEbsStorageSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerUserProfileUserSettingsSpaceStorageSettingsDefaultEbsStorageSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerUserProfileUserSettingsSpaceStorageSettingsToHclTerraform = sagemakerUserProfileUserSettingsSpaceStorageSettingsToHclTerraform;
class SagemakerUserProfileUserSettingsSpaceStorageSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // default_ebs_storage_settings - computed: false, optional: true, required: false
        this._defaultEbsStorageSettings = new SagemakerUserProfileUserSettingsSpaceStorageSettingsDefaultEbsStorageSettingsOutputReference(this, "default_ebs_storage_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._defaultEbsStorageSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultEbsStorageSettings = this._defaultEbsStorageSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._defaultEbsStorageSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._defaultEbsStorageSettings.internalValue = value.defaultEbsStorageSettings;
        }
    }
    get defaultEbsStorageSettings() {
        return this._defaultEbsStorageSettings;
    }
    putDefaultEbsStorageSettings(value) {
        this._defaultEbsStorageSettings.internalValue = value;
    }
    resetDefaultEbsStorageSettings() {
        this._defaultEbsStorageSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultEbsStorageSettingsInput() {
        return this._defaultEbsStorageSettings.internalValue;
    }
}
exports.SagemakerUserProfileUserSettingsSpaceStorageSettingsOutputReference = SagemakerUserProfileUserSettingsSpaceStorageSettingsOutputReference;
_12 = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsSpaceStorageSettingsOutputReference[_12] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsSpaceStorageSettingsOutputReference", version: "19.15.0" };
function sagemakerUserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        lifecycle_config_arn: cdktf.stringToTerraform(struct.lifecycleConfigArn),
        sagemaker_image_arn: cdktf.stringToTerraform(struct.sagemakerImageArn),
        sagemaker_image_version_alias: cdktf.stringToTerraform(struct.sagemakerImageVersionAlias),
        sagemaker_image_version_arn: cdktf.stringToTerraform(struct.sagemakerImageVersionArn),
    };
}
exports.sagemakerUserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpecToTerraform = sagemakerUserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpecToTerraform;
function sagemakerUserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpecToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        instance_type: {
            value: cdktf.stringToHclTerraform(struct.instanceType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        lifecycle_config_arn: {
            value: cdktf.stringToHclTerraform(struct.lifecycleConfigArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_arn: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_version_alias: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageVersionAlias),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker_image_version_arn: {
            value: cdktf.stringToHclTerraform(struct.sagemakerImageVersionArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerUserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpecToHclTerraform = sagemakerUserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpecToHclTerraform;
class SagemakerUserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpecOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._instanceType !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceType = this._instanceType;
        }
        if (this._lifecycleConfigArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.lifecycleConfigArn = this._lifecycleConfigArn;
        }
        if (this._sagemakerImageArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageArn = this._sagemakerImageArn;
        }
        if (this._sagemakerImageVersionAlias !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageVersionAlias = this._sagemakerImageVersionAlias;
        }
        if (this._sagemakerImageVersionArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sagemakerImageVersionArn = this._sagemakerImageVersionArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._instanceType = undefined;
            this._lifecycleConfigArn = undefined;
            this._sagemakerImageArn = undefined;
            this._sagemakerImageVersionAlias = undefined;
            this._sagemakerImageVersionArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._instanceType = value.instanceType;
            this._lifecycleConfigArn = value.lifecycleConfigArn;
            this._sagemakerImageArn = value.sagemakerImageArn;
            this._sagemakerImageVersionAlias = value.sagemakerImageVersionAlias;
            this._sagemakerImageVersionArn = value.sagemakerImageVersionArn;
        }
    }
    get instanceType() {
        return this.getStringAttribute('instance_type');
    }
    set instanceType(value) {
        this._instanceType = value;
    }
    resetInstanceType() {
        this._instanceType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceTypeInput() {
        return this._instanceType;
    }
    get lifecycleConfigArn() {
        return this.getStringAttribute('lifecycle_config_arn');
    }
    set lifecycleConfigArn(value) {
        this._lifecycleConfigArn = value;
    }
    resetLifecycleConfigArn() {
        this._lifecycleConfigArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifecycleConfigArnInput() {
        return this._lifecycleConfigArn;
    }
    get sagemakerImageArn() {
        return this.getStringAttribute('sagemaker_image_arn');
    }
    set sagemakerImageArn(value) {
        this._sagemakerImageArn = value;
    }
    resetSagemakerImageArn() {
        this._sagemakerImageArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageArnInput() {
        return this._sagemakerImageArn;
    }
    get sagemakerImageVersionAlias() {
        return this.getStringAttribute('sagemaker_image_version_alias');
    }
    set sagemakerImageVersionAlias(value) {
        this._sagemakerImageVersionAlias = value;
    }
    resetSagemakerImageVersionAlias() {
        this._sagemakerImageVersionAlias = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageVersionAliasInput() {
        return this._sagemakerImageVersionAlias;
    }
    get sagemakerImageVersionArn() {
        return this.getStringAttribute('sagemaker_image_version_arn');
    }
    set sagemakerImageVersionArn(value) {
        this._sagemakerImageVersionArn = value;
    }
    resetSagemakerImageVersionArn() {
        this._sagemakerImageVersionArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sagemakerImageVersionArnInput() {
        return this._sagemakerImageVersionArn;
    }
}
exports.SagemakerUserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpecOutputReference = SagemakerUserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpecOutputReference;
_13 = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpecOutputReference[_13] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpecOutputReference", version: "19.15.0" };
function sagemakerUserProfileUserSettingsTensorBoardAppSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        default_resource_spec: sagemakerUserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpecToTerraform(struct.defaultResourceSpec),
    };
}
exports.sagemakerUserProfileUserSettingsTensorBoardAppSettingsToTerraform = sagemakerUserProfileUserSettingsTensorBoardAppSettingsToTerraform;
function sagemakerUserProfileUserSettingsTensorBoardAppSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        default_resource_spec: {
            value: sagemakerUserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpecToHclTerraform(struct.defaultResourceSpec),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerUserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpecList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerUserProfileUserSettingsTensorBoardAppSettingsToHclTerraform = sagemakerUserProfileUserSettingsTensorBoardAppSettingsToHclTerraform;
class SagemakerUserProfileUserSettingsTensorBoardAppSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // default_resource_spec - computed: false, optional: true, required: false
        this._defaultResourceSpec = new SagemakerUserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpecOutputReference(this, "default_resource_spec");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._defaultResourceSpec?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultResourceSpec = this._defaultResourceSpec?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._defaultResourceSpec.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._defaultResourceSpec.internalValue = value.defaultResourceSpec;
        }
    }
    get defaultResourceSpec() {
        return this._defaultResourceSpec;
    }
    putDefaultResourceSpec(value) {
        this._defaultResourceSpec.internalValue = value;
    }
    resetDefaultResourceSpec() {
        this._defaultResourceSpec.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultResourceSpecInput() {
        return this._defaultResourceSpec.internalValue;
    }
}
exports.SagemakerUserProfileUserSettingsTensorBoardAppSettingsOutputReference = SagemakerUserProfileUserSettingsTensorBoardAppSettingsOutputReference;
_14 = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsTensorBoardAppSettingsOutputReference[_14] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsTensorBoardAppSettingsOutputReference", version: "19.15.0" };
function sagemakerUserProfileUserSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        default_landing_uri: cdktf.stringToTerraform(struct.defaultLandingUri),
        execution_role: cdktf.stringToTerraform(struct.executionRole),
        security_groups: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.securityGroups),
        studio_web_portal: cdktf.stringToTerraform(struct.studioWebPortal),
        canvas_app_settings: sagemakerUserProfileUserSettingsCanvasAppSettingsToTerraform(struct.canvasAppSettings),
        code_editor_app_settings: sagemakerUserProfileUserSettingsCodeEditorAppSettingsToTerraform(struct.codeEditorAppSettings),
        custom_file_system_config: cdktf.listMapper(sagemakerUserProfileUserSettingsCustomFileSystemConfigToTerraform, true)(struct.customFileSystemConfig),
        custom_posix_user_config: sagemakerUserProfileUserSettingsCustomPosixUserConfigToTerraform(struct.customPosixUserConfig),
        jupyter_lab_app_settings: sagemakerUserProfileUserSettingsJupyterLabAppSettingsToTerraform(struct.jupyterLabAppSettings),
        jupyter_server_app_settings: sagemakerUserProfileUserSettingsJupyterServerAppSettingsToTerraform(struct.jupyterServerAppSettings),
        kernel_gateway_app_settings: sagemakerUserProfileUserSettingsKernelGatewayAppSettingsToTerraform(struct.kernelGatewayAppSettings),
        r_session_app_settings: sagemakerUserProfileUserSettingsRSessionAppSettingsToTerraform(struct.rSessionAppSettings),
        r_studio_server_pro_app_settings: sagemakerUserProfileUserSettingsRStudioServerProAppSettingsToTerraform(struct.rStudioServerProAppSettings),
        sharing_settings: sagemakerUserProfileUserSettingsSharingSettingsToTerraform(struct.sharingSettings),
        space_storage_settings: sagemakerUserProfileUserSettingsSpaceStorageSettingsToTerraform(struct.spaceStorageSettings),
        tensor_board_app_settings: sagemakerUserProfileUserSettingsTensorBoardAppSettingsToTerraform(struct.tensorBoardAppSettings),
    };
}
exports.sagemakerUserProfileUserSettingsToTerraform = sagemakerUserProfileUserSettingsToTerraform;
function sagemakerUserProfileUserSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        default_landing_uri: {
            value: cdktf.stringToHclTerraform(struct.defaultLandingUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        execution_role: {
            value: cdktf.stringToHclTerraform(struct.executionRole),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        security_groups: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.securityGroups),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        studio_web_portal: {
            value: cdktf.stringToHclTerraform(struct.studioWebPortal),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        canvas_app_settings: {
            value: sagemakerUserProfileUserSettingsCanvasAppSettingsToHclTerraform(struct.canvasAppSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerUserProfileUserSettingsCanvasAppSettingsList",
        },
        code_editor_app_settings: {
            value: sagemakerUserProfileUserSettingsCodeEditorAppSettingsToHclTerraform(struct.codeEditorAppSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerUserProfileUserSettingsCodeEditorAppSettingsList",
        },
        custom_file_system_config: {
            value: cdktf.listMapperHcl(sagemakerUserProfileUserSettingsCustomFileSystemConfigToHclTerraform, true)(struct.customFileSystemConfig),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerUserProfileUserSettingsCustomFileSystemConfigList",
        },
        custom_posix_user_config: {
            value: sagemakerUserProfileUserSettingsCustomPosixUserConfigToHclTerraform(struct.customPosixUserConfig),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerUserProfileUserSettingsCustomPosixUserConfigList",
        },
        jupyter_lab_app_settings: {
            value: sagemakerUserProfileUserSettingsJupyterLabAppSettingsToHclTerraform(struct.jupyterLabAppSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerUserProfileUserSettingsJupyterLabAppSettingsList",
        },
        jupyter_server_app_settings: {
            value: sagemakerUserProfileUserSettingsJupyterServerAppSettingsToHclTerraform(struct.jupyterServerAppSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerUserProfileUserSettingsJupyterServerAppSettingsList",
        },
        kernel_gateway_app_settings: {
            value: sagemakerUserProfileUserSettingsKernelGatewayAppSettingsToHclTerraform(struct.kernelGatewayAppSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerUserProfileUserSettingsKernelGatewayAppSettingsList",
        },
        r_session_app_settings: {
            value: sagemakerUserProfileUserSettingsRSessionAppSettingsToHclTerraform(struct.rSessionAppSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerUserProfileUserSettingsRSessionAppSettingsList",
        },
        r_studio_server_pro_app_settings: {
            value: sagemakerUserProfileUserSettingsRStudioServerProAppSettingsToHclTerraform(struct.rStudioServerProAppSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerUserProfileUserSettingsRStudioServerProAppSettingsList",
        },
        sharing_settings: {
            value: sagemakerUserProfileUserSettingsSharingSettingsToHclTerraform(struct.sharingSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerUserProfileUserSettingsSharingSettingsList",
        },
        space_storage_settings: {
            value: sagemakerUserProfileUserSettingsSpaceStorageSettingsToHclTerraform(struct.spaceStorageSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerUserProfileUserSettingsSpaceStorageSettingsList",
        },
        tensor_board_app_settings: {
            value: sagemakerUserProfileUserSettingsTensorBoardAppSettingsToHclTerraform(struct.tensorBoardAppSettings),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerUserProfileUserSettingsTensorBoardAppSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerUserProfileUserSettingsToHclTerraform = sagemakerUserProfileUserSettingsToHclTerraform;
class SagemakerUserProfileUserSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // canvas_app_settings - computed: false, optional: true, required: false
        this._canvasAppSettings = new SagemakerUserProfileUserSettingsCanvasAppSettingsOutputReference(this, "canvas_app_settings");
        // code_editor_app_settings - computed: false, optional: true, required: false
        this._codeEditorAppSettings = new SagemakerUserProfileUserSettingsCodeEditorAppSettingsOutputReference(this, "code_editor_app_settings");
        // custom_file_system_config - computed: false, optional: true, required: false
        this._customFileSystemConfig = new SagemakerUserProfileUserSettingsCustomFileSystemConfigList(this, "custom_file_system_config", false);
        // custom_posix_user_config - computed: false, optional: true, required: false
        this._customPosixUserConfig = new SagemakerUserProfileUserSettingsCustomPosixUserConfigOutputReference(this, "custom_posix_user_config");
        // jupyter_lab_app_settings - computed: false, optional: true, required: false
        this._jupyterLabAppSettings = new SagemakerUserProfileUserSettingsJupyterLabAppSettingsOutputReference(this, "jupyter_lab_app_settings");
        // jupyter_server_app_settings - computed: false, optional: true, required: false
        this._jupyterServerAppSettings = new SagemakerUserProfileUserSettingsJupyterServerAppSettingsOutputReference(this, "jupyter_server_app_settings");
        // kernel_gateway_app_settings - computed: false, optional: true, required: false
        this._kernelGatewayAppSettings = new SagemakerUserProfileUserSettingsKernelGatewayAppSettingsOutputReference(this, "kernel_gateway_app_settings");
        // r_session_app_settings - computed: false, optional: true, required: false
        this._rSessionAppSettings = new SagemakerUserProfileUserSettingsRSessionAppSettingsOutputReference(this, "r_session_app_settings");
        // r_studio_server_pro_app_settings - computed: false, optional: true, required: false
        this._rStudioServerProAppSettings = new SagemakerUserProfileUserSettingsRStudioServerProAppSettingsOutputReference(this, "r_studio_server_pro_app_settings");
        // sharing_settings - computed: false, optional: true, required: false
        this._sharingSettings = new SagemakerUserProfileUserSettingsSharingSettingsOutputReference(this, "sharing_settings");
        // space_storage_settings - computed: false, optional: true, required: false
        this._spaceStorageSettings = new SagemakerUserProfileUserSettingsSpaceStorageSettingsOutputReference(this, "space_storage_settings");
        // tensor_board_app_settings - computed: false, optional: true, required: false
        this._tensorBoardAppSettings = new SagemakerUserProfileUserSettingsTensorBoardAppSettingsOutputReference(this, "tensor_board_app_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._defaultLandingUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultLandingUri = this._defaultLandingUri;
        }
        if (this._executionRole !== undefined) {
            hasAnyValues = true;
            internalValueResult.executionRole = this._executionRole;
        }
        if (this._securityGroups !== undefined) {
            hasAnyValues = true;
            internalValueResult.securityGroups = this._securityGroups;
        }
        if (this._studioWebPortal !== undefined) {
            hasAnyValues = true;
            internalValueResult.studioWebPortal = this._studioWebPortal;
        }
        if (this._canvasAppSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.canvasAppSettings = this._canvasAppSettings?.internalValue;
        }
        if (this._codeEditorAppSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.codeEditorAppSettings = this._codeEditorAppSettings?.internalValue;
        }
        if (this._customFileSystemConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customFileSystemConfig = this._customFileSystemConfig?.internalValue;
        }
        if (this._customPosixUserConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customPosixUserConfig = this._customPosixUserConfig?.internalValue;
        }
        if (this._jupyterLabAppSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.jupyterLabAppSettings = this._jupyterLabAppSettings?.internalValue;
        }
        if (this._jupyterServerAppSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.jupyterServerAppSettings = this._jupyterServerAppSettings?.internalValue;
        }
        if (this._kernelGatewayAppSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.kernelGatewayAppSettings = this._kernelGatewayAppSettings?.internalValue;
        }
        if (this._rSessionAppSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.rSessionAppSettings = this._rSessionAppSettings?.internalValue;
        }
        if (this._rStudioServerProAppSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.rStudioServerProAppSettings = this._rStudioServerProAppSettings?.internalValue;
        }
        if (this._sharingSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sharingSettings = this._sharingSettings?.internalValue;
        }
        if (this._spaceStorageSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.spaceStorageSettings = this._spaceStorageSettings?.internalValue;
        }
        if (this._tensorBoardAppSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tensorBoardAppSettings = this._tensorBoardAppSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._defaultLandingUri = undefined;
            this._executionRole = undefined;
            this._securityGroups = undefined;
            this._studioWebPortal = undefined;
            this._canvasAppSettings.internalValue = undefined;
            this._codeEditorAppSettings.internalValue = undefined;
            this._customFileSystemConfig.internalValue = undefined;
            this._customPosixUserConfig.internalValue = undefined;
            this._jupyterLabAppSettings.internalValue = undefined;
            this._jupyterServerAppSettings.internalValue = undefined;
            this._kernelGatewayAppSettings.internalValue = undefined;
            this._rSessionAppSettings.internalValue = undefined;
            this._rStudioServerProAppSettings.internalValue = undefined;
            this._sharingSettings.internalValue = undefined;
            this._spaceStorageSettings.internalValue = undefined;
            this._tensorBoardAppSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._defaultLandingUri = value.defaultLandingUri;
            this._executionRole = value.executionRole;
            this._securityGroups = value.securityGroups;
            this._studioWebPortal = value.studioWebPortal;
            this._canvasAppSettings.internalValue = value.canvasAppSettings;
            this._codeEditorAppSettings.internalValue = value.codeEditorAppSettings;
            this._customFileSystemConfig.internalValue = value.customFileSystemConfig;
            this._customPosixUserConfig.internalValue = value.customPosixUserConfig;
            this._jupyterLabAppSettings.internalValue = value.jupyterLabAppSettings;
            this._jupyterServerAppSettings.internalValue = value.jupyterServerAppSettings;
            this._kernelGatewayAppSettings.internalValue = value.kernelGatewayAppSettings;
            this._rSessionAppSettings.internalValue = value.rSessionAppSettings;
            this._rStudioServerProAppSettings.internalValue = value.rStudioServerProAppSettings;
            this._sharingSettings.internalValue = value.sharingSettings;
            this._spaceStorageSettings.internalValue = value.spaceStorageSettings;
            this._tensorBoardAppSettings.internalValue = value.tensorBoardAppSettings;
        }
    }
    get defaultLandingUri() {
        return this.getStringAttribute('default_landing_uri');
    }
    set defaultLandingUri(value) {
        this._defaultLandingUri = value;
    }
    resetDefaultLandingUri() {
        this._defaultLandingUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultLandingUriInput() {
        return this._defaultLandingUri;
    }
    get executionRole() {
        return this.getStringAttribute('execution_role');
    }
    set executionRole(value) {
        this._executionRole = value;
    }
    // Temporarily expose input value. Use with caution.
    get executionRoleInput() {
        return this._executionRole;
    }
    get securityGroups() {
        return cdktf.Fn.tolist(this.getListAttribute('security_groups'));
    }
    set securityGroups(value) {
        this._securityGroups = value;
    }
    resetSecurityGroups() {
        this._securityGroups = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityGroupsInput() {
        return this._securityGroups;
    }
    get studioWebPortal() {
        return this.getStringAttribute('studio_web_portal');
    }
    set studioWebPortal(value) {
        this._studioWebPortal = value;
    }
    resetStudioWebPortal() {
        this._studioWebPortal = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get studioWebPortalInput() {
        return this._studioWebPortal;
    }
    get canvasAppSettings() {
        return this._canvasAppSettings;
    }
    putCanvasAppSettings(value) {
        this._canvasAppSettings.internalValue = value;
    }
    resetCanvasAppSettings() {
        this._canvasAppSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get canvasAppSettingsInput() {
        return this._canvasAppSettings.internalValue;
    }
    get codeEditorAppSettings() {
        return this._codeEditorAppSettings;
    }
    putCodeEditorAppSettings(value) {
        this._codeEditorAppSettings.internalValue = value;
    }
    resetCodeEditorAppSettings() {
        this._codeEditorAppSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get codeEditorAppSettingsInput() {
        return this._codeEditorAppSettings.internalValue;
    }
    get customFileSystemConfig() {
        return this._customFileSystemConfig;
    }
    putCustomFileSystemConfig(value) {
        this._customFileSystemConfig.internalValue = value;
    }
    resetCustomFileSystemConfig() {
        this._customFileSystemConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customFileSystemConfigInput() {
        return this._customFileSystemConfig.internalValue;
    }
    get customPosixUserConfig() {
        return this._customPosixUserConfig;
    }
    putCustomPosixUserConfig(value) {
        this._customPosixUserConfig.internalValue = value;
    }
    resetCustomPosixUserConfig() {
        this._customPosixUserConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customPosixUserConfigInput() {
        return this._customPosixUserConfig.internalValue;
    }
    get jupyterLabAppSettings() {
        return this._jupyterLabAppSettings;
    }
    putJupyterLabAppSettings(value) {
        this._jupyterLabAppSettings.internalValue = value;
    }
    resetJupyterLabAppSettings() {
        this._jupyterLabAppSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jupyterLabAppSettingsInput() {
        return this._jupyterLabAppSettings.internalValue;
    }
    get jupyterServerAppSettings() {
        return this._jupyterServerAppSettings;
    }
    putJupyterServerAppSettings(value) {
        this._jupyterServerAppSettings.internalValue = value;
    }
    resetJupyterServerAppSettings() {
        this._jupyterServerAppSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jupyterServerAppSettingsInput() {
        return this._jupyterServerAppSettings.internalValue;
    }
    get kernelGatewayAppSettings() {
        return this._kernelGatewayAppSettings;
    }
    putKernelGatewayAppSettings(value) {
        this._kernelGatewayAppSettings.internalValue = value;
    }
    resetKernelGatewayAppSettings() {
        this._kernelGatewayAppSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kernelGatewayAppSettingsInput() {
        return this._kernelGatewayAppSettings.internalValue;
    }
    get rSessionAppSettings() {
        return this._rSessionAppSettings;
    }
    putRSessionAppSettings(value) {
        this._rSessionAppSettings.internalValue = value;
    }
    resetRSessionAppSettings() {
        this._rSessionAppSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rSessionAppSettingsInput() {
        return this._rSessionAppSettings.internalValue;
    }
    get rStudioServerProAppSettings() {
        return this._rStudioServerProAppSettings;
    }
    putRStudioServerProAppSettings(value) {
        this._rStudioServerProAppSettings.internalValue = value;
    }
    resetRStudioServerProAppSettings() {
        this._rStudioServerProAppSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rStudioServerProAppSettingsInput() {
        return this._rStudioServerProAppSettings.internalValue;
    }
    get sharingSettings() {
        return this._sharingSettings;
    }
    putSharingSettings(value) {
        this._sharingSettings.internalValue = value;
    }
    resetSharingSettings() {
        this._sharingSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sharingSettingsInput() {
        return this._sharingSettings.internalValue;
    }
    get spaceStorageSettings() {
        return this._spaceStorageSettings;
    }
    putSpaceStorageSettings(value) {
        this._spaceStorageSettings.internalValue = value;
    }
    resetSpaceStorageSettings() {
        this._spaceStorageSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get spaceStorageSettingsInput() {
        return this._spaceStorageSettings.internalValue;
    }
    get tensorBoardAppSettings() {
        return this._tensorBoardAppSettings;
    }
    putTensorBoardAppSettings(value) {
        this._tensorBoardAppSettings.internalValue = value;
    }
    resetTensorBoardAppSettings() {
        this._tensorBoardAppSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tensorBoardAppSettingsInput() {
        return this._tensorBoardAppSettings.internalValue;
    }
}
exports.SagemakerUserProfileUserSettingsOutputReference = SagemakerUserProfileUserSettingsOutputReference;
_15 = JSII_RTTI_SYMBOL_1;
SagemakerUserProfileUserSettingsOutputReference[_15] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfileUserSettingsOutputReference", version: "19.15.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/sagemaker_user_profile aws_sagemaker_user_profile}
*/
class SagemakerUserProfile extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a SagemakerUserProfile resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the SagemakerUserProfile to import
    * @param importFromId The id of the existing SagemakerUserProfile that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/sagemaker_user_profile#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the SagemakerUserProfile to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_sagemaker_user_profile", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/sagemaker_user_profile aws_sagemaker_user_profile} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SagemakerUserProfileConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_sagemaker_user_profile',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // user_settings - computed: false, optional: true, required: false
        this._userSettings = new SagemakerUserProfileUserSettingsOutputReference(this, "user_settings");
        this._domainId = config.domainId;
        this._id = config.id;
        this._singleSignOnUserIdentifier = config.singleSignOnUserIdentifier;
        this._singleSignOnUserValue = config.singleSignOnUserValue;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._userProfileName = config.userProfileName;
        this._userSettings.internalValue = config.userSettings;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get domainId() {
        return this.getStringAttribute('domain_id');
    }
    set domainId(value) {
        this._domainId = value;
    }
    // Temporarily expose input value. Use with caution.
    get domainIdInput() {
        return this._domainId;
    }
    // home_efs_file_system_uid - computed: true, optional: false, required: false
    get homeEfsFileSystemUid() {
        return this.getStringAttribute('home_efs_file_system_uid');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get singleSignOnUserIdentifier() {
        return this.getStringAttribute('single_sign_on_user_identifier');
    }
    set singleSignOnUserIdentifier(value) {
        this._singleSignOnUserIdentifier = value;
    }
    resetSingleSignOnUserIdentifier() {
        this._singleSignOnUserIdentifier = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get singleSignOnUserIdentifierInput() {
        return this._singleSignOnUserIdentifier;
    }
    get singleSignOnUserValue() {
        return this.getStringAttribute('single_sign_on_user_value');
    }
    set singleSignOnUserValue(value) {
        this._singleSignOnUserValue = value;
    }
    resetSingleSignOnUserValue() {
        this._singleSignOnUserValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get singleSignOnUserValueInput() {
        return this._singleSignOnUserValue;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get userProfileName() {
        return this.getStringAttribute('user_profile_name');
    }
    set userProfileName(value) {
        this._userProfileName = value;
    }
    // Temporarily expose input value. Use with caution.
    get userProfileNameInput() {
        return this._userProfileName;
    }
    get userSettings() {
        return this._userSettings;
    }
    putUserSettings(value) {
        this._userSettings.internalValue = value;
    }
    resetUserSettings() {
        this._userSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userSettingsInput() {
        return this._userSettings.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            domain_id: cdktf.stringToTerraform(this._domainId),
            id: cdktf.stringToTerraform(this._id),
            single_sign_on_user_identifier: cdktf.stringToTerraform(this._singleSignOnUserIdentifier),
            single_sign_on_user_value: cdktf.stringToTerraform(this._singleSignOnUserValue),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            user_profile_name: cdktf.stringToTerraform(this._userProfileName),
            user_settings: sagemakerUserProfileUserSettingsToTerraform(this._userSettings.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            domain_id: {
                value: cdktf.stringToHclTerraform(this._domainId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            single_sign_on_user_identifier: {
                value: cdktf.stringToHclTerraform(this._singleSignOnUserIdentifier),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            single_sign_on_user_value: {
                value: cdktf.stringToHclTerraform(this._singleSignOnUserValue),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            tags: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tags),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            tags_all: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tagsAll),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            user_profile_name: {
                value: cdktf.stringToHclTerraform(this._userProfileName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            user_settings: {
                value: sagemakerUserProfileUserSettingsToHclTerraform(this._userSettings.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "SagemakerUserProfileUserSettingsList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.SagemakerUserProfile = SagemakerUserProfile;
_16 = JSII_RTTI_SYMBOL_1;
SagemakerUserProfile[_16] = { fqn: "@cdktf/provider-aws.sagemakerUserProfile.SagemakerUserProfile", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
SagemakerUserProfile.tfResourceType = "aws_sagemaker_user_profile";
//# sourceMappingURL=data:application/json;base64,