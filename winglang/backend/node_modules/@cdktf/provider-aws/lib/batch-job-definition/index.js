"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BatchJobDefinition = exports.BatchJobDefinitionTimeoutOutputReference = exports.batchJobDefinitionTimeoutToHclTerraform = exports.batchJobDefinitionTimeoutToTerraform = exports.BatchJobDefinitionRetryStrategyOutputReference = exports.batchJobDefinitionRetryStrategyToHclTerraform = exports.batchJobDefinitionRetryStrategyToTerraform = exports.BatchJobDefinitionRetryStrategyEvaluateOnExitList = exports.BatchJobDefinitionRetryStrategyEvaluateOnExitOutputReference = exports.batchJobDefinitionRetryStrategyEvaluateOnExitToHclTerraform = exports.batchJobDefinitionRetryStrategyEvaluateOnExitToTerraform = exports.BatchJobDefinitionEksPropertiesOutputReference = exports.batchJobDefinitionEksPropertiesToHclTerraform = exports.batchJobDefinitionEksPropertiesToTerraform = exports.BatchJobDefinitionEksPropertiesPodPropertiesOutputReference = exports.batchJobDefinitionEksPropertiesPodPropertiesToHclTerraform = exports.batchJobDefinitionEksPropertiesPodPropertiesToTerraform = exports.BatchJobDefinitionEksPropertiesPodPropertiesVolumesList = exports.BatchJobDefinitionEksPropertiesPodPropertiesVolumesOutputReference = exports.batchJobDefinitionEksPropertiesPodPropertiesVolumesToHclTerraform = exports.batchJobDefinitionEksPropertiesPodPropertiesVolumesToTerraform = exports.BatchJobDefinitionEksPropertiesPodPropertiesVolumesSecretOutputReference = exports.batchJobDefinitionEksPropertiesPodPropertiesVolumesSecretToHclTerraform = exports.batchJobDefinitionEksPropertiesPodPropertiesVolumesSecretToTerraform = exports.BatchJobDefinitionEksPropertiesPodPropertiesVolumesHostPathOutputReference = exports.batchJobDefinitionEksPropertiesPodPropertiesVolumesHostPathToHclTerraform = exports.batchJobDefinitionEksPropertiesPodPropertiesVolumesHostPathToTerraform = exports.BatchJobDefinitionEksPropertiesPodPropertiesVolumesEmptyDirOutputReference = exports.batchJobDefinitionEksPropertiesPodPropertiesVolumesEmptyDirToHclTerraform = exports.batchJobDefinitionEksPropertiesPodPropertiesVolumesEmptyDirToTerraform = exports.BatchJobDefinitionEksPropertiesPodPropertiesMetadataOutputReference = exports.batchJobDefinitionEksPropertiesPodPropertiesMetadataToHclTerraform = exports.batchJobDefinitionEksPropertiesPodPropertiesMetadataToTerraform = exports.BatchJobDefinitionEksPropertiesPodPropertiesContainersOutputReference = exports.batchJobDefinitionEksPropertiesPodPropertiesContainersToHclTerraform = exports.batchJobDefinitionEksPropertiesPodPropertiesContainersToTerraform = exports.BatchJobDefinitionEksPropertiesPodPropertiesContainersVolumeMountsList = exports.BatchJobDefinitionEksPropertiesPodPropertiesContainersVolumeMountsOutputReference = exports.batchJobDefinitionEksPropertiesPodPropertiesContainersVolumeMountsToHclTerraform = exports.batchJobDefinitionEksPropertiesPodPropertiesContainersVolumeMountsToTerraform = exports.BatchJobDefinitionEksPropertiesPodPropertiesContainersSecurityContextOutputReference = exports.batchJobDefinitionEksPropertiesPodPropertiesContainersSecurityContextToHclTerraform = exports.batchJobDefinitionEksPropertiesPodPropertiesContainersSecurityContextToTerraform = exports.BatchJobDefinitionEksPropertiesPodPropertiesContainersResourcesOutputReference = exports.batchJobDefinitionEksPropertiesPodPropertiesContainersResourcesToHclTerraform = exports.batchJobDefinitionEksPropertiesPodPropertiesContainersResourcesToTerraform = exports.BatchJobDefinitionEksPropertiesPodPropertiesContainersEnvList = exports.BatchJobDefinitionEksPropertiesPodPropertiesContainersEnvOutputReference = exports.batchJobDefinitionEksPropertiesPodPropertiesContainersEnvToHclTerraform = exports.batchJobDefinitionEksPropertiesPodPropertiesContainersEnvToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function batchJobDefinitionEksPropertiesPodPropertiesContainersEnvToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.batchJobDefinitionEksPropertiesPodPropertiesContainersEnvToTerraform = batchJobDefinitionEksPropertiesPodPropertiesContainersEnvToTerraform;
function batchJobDefinitionEksPropertiesPodPropertiesContainersEnvToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.batchJobDefinitionEksPropertiesPodPropertiesContainersEnvToHclTerraform = batchJobDefinitionEksPropertiesPodPropertiesContainersEnvToHclTerraform;
class BatchJobDefinitionEksPropertiesPodPropertiesContainersEnvOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._value = value.value;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.BatchJobDefinitionEksPropertiesPodPropertiesContainersEnvOutputReference = BatchJobDefinitionEksPropertiesPodPropertiesContainersEnvOutputReference;
_a = JSII_RTTI_SYMBOL_1;
BatchJobDefinitionEksPropertiesPodPropertiesContainersEnvOutputReference[_a] = { fqn: "@cdktf/provider-aws.batchJobDefinition.BatchJobDefinitionEksPropertiesPodPropertiesContainersEnvOutputReference", version: "19.15.0" };
class BatchJobDefinitionEksPropertiesPodPropertiesContainersEnvList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new BatchJobDefinitionEksPropertiesPodPropertiesContainersEnvOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.BatchJobDefinitionEksPropertiesPodPropertiesContainersEnvList = BatchJobDefinitionEksPropertiesPodPropertiesContainersEnvList;
_b = JSII_RTTI_SYMBOL_1;
BatchJobDefinitionEksPropertiesPodPropertiesContainersEnvList[_b] = { fqn: "@cdktf/provider-aws.batchJobDefinition.BatchJobDefinitionEksPropertiesPodPropertiesContainersEnvList", version: "19.15.0" };
function batchJobDefinitionEksPropertiesPodPropertiesContainersResourcesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        limits: cdktf.hashMapper(cdktf.stringToTerraform)(struct.limits),
        requests: cdktf.hashMapper(cdktf.stringToTerraform)(struct.requests),
    };
}
exports.batchJobDefinitionEksPropertiesPodPropertiesContainersResourcesToTerraform = batchJobDefinitionEksPropertiesPodPropertiesContainersResourcesToTerraform;
function batchJobDefinitionEksPropertiesPodPropertiesContainersResourcesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        limits: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.limits),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        requests: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.requests),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.batchJobDefinitionEksPropertiesPodPropertiesContainersResourcesToHclTerraform = batchJobDefinitionEksPropertiesPodPropertiesContainersResourcesToHclTerraform;
class BatchJobDefinitionEksPropertiesPodPropertiesContainersResourcesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._limits !== undefined) {
            hasAnyValues = true;
            internalValueResult.limits = this._limits;
        }
        if (this._requests !== undefined) {
            hasAnyValues = true;
            internalValueResult.requests = this._requests;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._limits = undefined;
            this._requests = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._limits = value.limits;
            this._requests = value.requests;
        }
    }
    get limits() {
        return this.getStringMapAttribute('limits');
    }
    set limits(value) {
        this._limits = value;
    }
    resetLimits() {
        this._limits = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get limitsInput() {
        return this._limits;
    }
    get requests() {
        return this.getStringMapAttribute('requests');
    }
    set requests(value) {
        this._requests = value;
    }
    resetRequests() {
        this._requests = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestsInput() {
        return this._requests;
    }
}
exports.BatchJobDefinitionEksPropertiesPodPropertiesContainersResourcesOutputReference = BatchJobDefinitionEksPropertiesPodPropertiesContainersResourcesOutputReference;
_c = JSII_RTTI_SYMBOL_1;
BatchJobDefinitionEksPropertiesPodPropertiesContainersResourcesOutputReference[_c] = { fqn: "@cdktf/provider-aws.batchJobDefinition.BatchJobDefinitionEksPropertiesPodPropertiesContainersResourcesOutputReference", version: "19.15.0" };
function batchJobDefinitionEksPropertiesPodPropertiesContainersSecurityContextToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        privileged: cdktf.booleanToTerraform(struct.privileged),
        read_only_root_file_system: cdktf.booleanToTerraform(struct.readOnlyRootFileSystem),
        run_as_group: cdktf.numberToTerraform(struct.runAsGroup),
        run_as_non_root: cdktf.booleanToTerraform(struct.runAsNonRoot),
        run_as_user: cdktf.numberToTerraform(struct.runAsUser),
    };
}
exports.batchJobDefinitionEksPropertiesPodPropertiesContainersSecurityContextToTerraform = batchJobDefinitionEksPropertiesPodPropertiesContainersSecurityContextToTerraform;
function batchJobDefinitionEksPropertiesPodPropertiesContainersSecurityContextToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        privileged: {
            value: cdktf.booleanToHclTerraform(struct.privileged),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        read_only_root_file_system: {
            value: cdktf.booleanToHclTerraform(struct.readOnlyRootFileSystem),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        run_as_group: {
            value: cdktf.numberToHclTerraform(struct.runAsGroup),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        run_as_non_root: {
            value: cdktf.booleanToHclTerraform(struct.runAsNonRoot),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        run_as_user: {
            value: cdktf.numberToHclTerraform(struct.runAsUser),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.batchJobDefinitionEksPropertiesPodPropertiesContainersSecurityContextToHclTerraform = batchJobDefinitionEksPropertiesPodPropertiesContainersSecurityContextToHclTerraform;
class BatchJobDefinitionEksPropertiesPodPropertiesContainersSecurityContextOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._privileged !== undefined) {
            hasAnyValues = true;
            internalValueResult.privileged = this._privileged;
        }
        if (this._readOnlyRootFileSystem !== undefined) {
            hasAnyValues = true;
            internalValueResult.readOnlyRootFileSystem = this._readOnlyRootFileSystem;
        }
        if (this._runAsGroup !== undefined) {
            hasAnyValues = true;
            internalValueResult.runAsGroup = this._runAsGroup;
        }
        if (this._runAsNonRoot !== undefined) {
            hasAnyValues = true;
            internalValueResult.runAsNonRoot = this._runAsNonRoot;
        }
        if (this._runAsUser !== undefined) {
            hasAnyValues = true;
            internalValueResult.runAsUser = this._runAsUser;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._privileged = undefined;
            this._readOnlyRootFileSystem = undefined;
            this._runAsGroup = undefined;
            this._runAsNonRoot = undefined;
            this._runAsUser = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._privileged = value.privileged;
            this._readOnlyRootFileSystem = value.readOnlyRootFileSystem;
            this._runAsGroup = value.runAsGroup;
            this._runAsNonRoot = value.runAsNonRoot;
            this._runAsUser = value.runAsUser;
        }
    }
    get privileged() {
        return this.getBooleanAttribute('privileged');
    }
    set privileged(value) {
        this._privileged = value;
    }
    resetPrivileged() {
        this._privileged = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get privilegedInput() {
        return this._privileged;
    }
    get readOnlyRootFileSystem() {
        return this.getBooleanAttribute('read_only_root_file_system');
    }
    set readOnlyRootFileSystem(value) {
        this._readOnlyRootFileSystem = value;
    }
    resetReadOnlyRootFileSystem() {
        this._readOnlyRootFileSystem = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get readOnlyRootFileSystemInput() {
        return this._readOnlyRootFileSystem;
    }
    get runAsGroup() {
        return this.getNumberAttribute('run_as_group');
    }
    set runAsGroup(value) {
        this._runAsGroup = value;
    }
    resetRunAsGroup() {
        this._runAsGroup = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get runAsGroupInput() {
        return this._runAsGroup;
    }
    get runAsNonRoot() {
        return this.getBooleanAttribute('run_as_non_root');
    }
    set runAsNonRoot(value) {
        this._runAsNonRoot = value;
    }
    resetRunAsNonRoot() {
        this._runAsNonRoot = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get runAsNonRootInput() {
        return this._runAsNonRoot;
    }
    get runAsUser() {
        return this.getNumberAttribute('run_as_user');
    }
    set runAsUser(value) {
        this._runAsUser = value;
    }
    resetRunAsUser() {
        this._runAsUser = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get runAsUserInput() {
        return this._runAsUser;
    }
}
exports.BatchJobDefinitionEksPropertiesPodPropertiesContainersSecurityContextOutputReference = BatchJobDefinitionEksPropertiesPodPropertiesContainersSecurityContextOutputReference;
_d = JSII_RTTI_SYMBOL_1;
BatchJobDefinitionEksPropertiesPodPropertiesContainersSecurityContextOutputReference[_d] = { fqn: "@cdktf/provider-aws.batchJobDefinition.BatchJobDefinitionEksPropertiesPodPropertiesContainersSecurityContextOutputReference", version: "19.15.0" };
function batchJobDefinitionEksPropertiesPodPropertiesContainersVolumeMountsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        mount_path: cdktf.stringToTerraform(struct.mountPath),
        name: cdktf.stringToTerraform(struct.name),
        read_only: cdktf.booleanToTerraform(struct.readOnly),
    };
}
exports.batchJobDefinitionEksPropertiesPodPropertiesContainersVolumeMountsToTerraform = batchJobDefinitionEksPropertiesPodPropertiesContainersVolumeMountsToTerraform;
function batchJobDefinitionEksPropertiesPodPropertiesContainersVolumeMountsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        mount_path: {
            value: cdktf.stringToHclTerraform(struct.mountPath),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        read_only: {
            value: cdktf.booleanToHclTerraform(struct.readOnly),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.batchJobDefinitionEksPropertiesPodPropertiesContainersVolumeMountsToHclTerraform = batchJobDefinitionEksPropertiesPodPropertiesContainersVolumeMountsToHclTerraform;
class BatchJobDefinitionEksPropertiesPodPropertiesContainersVolumeMountsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._mountPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.mountPath = this._mountPath;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._readOnly !== undefined) {
            hasAnyValues = true;
            internalValueResult.readOnly = this._readOnly;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._mountPath = undefined;
            this._name = undefined;
            this._readOnly = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._mountPath = value.mountPath;
            this._name = value.name;
            this._readOnly = value.readOnly;
        }
    }
    get mountPath() {
        return this.getStringAttribute('mount_path');
    }
    set mountPath(value) {
        this._mountPath = value;
    }
    // Temporarily expose input value. Use with caution.
    get mountPathInput() {
        return this._mountPath;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get readOnly() {
        return this.getBooleanAttribute('read_only');
    }
    set readOnly(value) {
        this._readOnly = value;
    }
    resetReadOnly() {
        this._readOnly = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get readOnlyInput() {
        return this._readOnly;
    }
}
exports.BatchJobDefinitionEksPropertiesPodPropertiesContainersVolumeMountsOutputReference = BatchJobDefinitionEksPropertiesPodPropertiesContainersVolumeMountsOutputReference;
_e = JSII_RTTI_SYMBOL_1;
BatchJobDefinitionEksPropertiesPodPropertiesContainersVolumeMountsOutputReference[_e] = { fqn: "@cdktf/provider-aws.batchJobDefinition.BatchJobDefinitionEksPropertiesPodPropertiesContainersVolumeMountsOutputReference", version: "19.15.0" };
class BatchJobDefinitionEksPropertiesPodPropertiesContainersVolumeMountsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new BatchJobDefinitionEksPropertiesPodPropertiesContainersVolumeMountsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.BatchJobDefinitionEksPropertiesPodPropertiesContainersVolumeMountsList = BatchJobDefinitionEksPropertiesPodPropertiesContainersVolumeMountsList;
_f = JSII_RTTI_SYMBOL_1;
BatchJobDefinitionEksPropertiesPodPropertiesContainersVolumeMountsList[_f] = { fqn: "@cdktf/provider-aws.batchJobDefinition.BatchJobDefinitionEksPropertiesPodPropertiesContainersVolumeMountsList", version: "19.15.0" };
function batchJobDefinitionEksPropertiesPodPropertiesContainersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        args: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.args),
        command: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.command),
        image: cdktf.stringToTerraform(struct.image),
        image_pull_policy: cdktf.stringToTerraform(struct.imagePullPolicy),
        name: cdktf.stringToTerraform(struct.name),
        env: cdktf.listMapper(batchJobDefinitionEksPropertiesPodPropertiesContainersEnvToTerraform, true)(struct.env),
        resources: batchJobDefinitionEksPropertiesPodPropertiesContainersResourcesToTerraform(struct.resources),
        security_context: batchJobDefinitionEksPropertiesPodPropertiesContainersSecurityContextToTerraform(struct.securityContext),
        volume_mounts: cdktf.listMapper(batchJobDefinitionEksPropertiesPodPropertiesContainersVolumeMountsToTerraform, true)(struct.volumeMounts),
    };
}
exports.batchJobDefinitionEksPropertiesPodPropertiesContainersToTerraform = batchJobDefinitionEksPropertiesPodPropertiesContainersToTerraform;
function batchJobDefinitionEksPropertiesPodPropertiesContainersToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        args: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.args),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        command: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.command),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        image: {
            value: cdktf.stringToHclTerraform(struct.image),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        image_pull_policy: {
            value: cdktf.stringToHclTerraform(struct.imagePullPolicy),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        env: {
            value: cdktf.listMapperHcl(batchJobDefinitionEksPropertiesPodPropertiesContainersEnvToHclTerraform, true)(struct.env),
            isBlock: true,
            type: "set",
            storageClassType: "BatchJobDefinitionEksPropertiesPodPropertiesContainersEnvList",
        },
        resources: {
            value: batchJobDefinitionEksPropertiesPodPropertiesContainersResourcesToHclTerraform(struct.resources),
            isBlock: true,
            type: "list",
            storageClassType: "BatchJobDefinitionEksPropertiesPodPropertiesContainersResourcesList",
        },
        security_context: {
            value: batchJobDefinitionEksPropertiesPodPropertiesContainersSecurityContextToHclTerraform(struct.securityContext),
            isBlock: true,
            type: "list",
            storageClassType: "BatchJobDefinitionEksPropertiesPodPropertiesContainersSecurityContextList",
        },
        volume_mounts: {
            value: cdktf.listMapperHcl(batchJobDefinitionEksPropertiesPodPropertiesContainersVolumeMountsToHclTerraform, true)(struct.volumeMounts),
            isBlock: true,
            type: "list",
            storageClassType: "BatchJobDefinitionEksPropertiesPodPropertiesContainersVolumeMountsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.batchJobDefinitionEksPropertiesPodPropertiesContainersToHclTerraform = batchJobDefinitionEksPropertiesPodPropertiesContainersToHclTerraform;
class BatchJobDefinitionEksPropertiesPodPropertiesContainersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // env - computed: false, optional: true, required: false
        this._env = new BatchJobDefinitionEksPropertiesPodPropertiesContainersEnvList(this, "env", true);
        // resources - computed: false, optional: true, required: false
        this._resources = new BatchJobDefinitionEksPropertiesPodPropertiesContainersResourcesOutputReference(this, "resources");
        // security_context - computed: false, optional: true, required: false
        this._securityContext = new BatchJobDefinitionEksPropertiesPodPropertiesContainersSecurityContextOutputReference(this, "security_context");
        // volume_mounts - computed: false, optional: true, required: false
        this._volumeMounts = new BatchJobDefinitionEksPropertiesPodPropertiesContainersVolumeMountsList(this, "volume_mounts", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._args !== undefined) {
            hasAnyValues = true;
            internalValueResult.args = this._args;
        }
        if (this._command !== undefined) {
            hasAnyValues = true;
            internalValueResult.command = this._command;
        }
        if (this._image !== undefined) {
            hasAnyValues = true;
            internalValueResult.image = this._image;
        }
        if (this._imagePullPolicy !== undefined) {
            hasAnyValues = true;
            internalValueResult.imagePullPolicy = this._imagePullPolicy;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._env?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.env = this._env?.internalValue;
        }
        if (this._resources?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.resources = this._resources?.internalValue;
        }
        if (this._securityContext?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.securityContext = this._securityContext?.internalValue;
        }
        if (this._volumeMounts?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.volumeMounts = this._volumeMounts?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._args = undefined;
            this._command = undefined;
            this._image = undefined;
            this._imagePullPolicy = undefined;
            this._name = undefined;
            this._env.internalValue = undefined;
            this._resources.internalValue = undefined;
            this._securityContext.internalValue = undefined;
            this._volumeMounts.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._args = value.args;
            this._command = value.command;
            this._image = value.image;
            this._imagePullPolicy = value.imagePullPolicy;
            this._name = value.name;
            this._env.internalValue = value.env;
            this._resources.internalValue = value.resources;
            this._securityContext.internalValue = value.securityContext;
            this._volumeMounts.internalValue = value.volumeMounts;
        }
    }
    get args() {
        return this.getListAttribute('args');
    }
    set args(value) {
        this._args = value;
    }
    resetArgs() {
        this._args = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get argsInput() {
        return this._args;
    }
    get command() {
        return this.getListAttribute('command');
    }
    set command(value) {
        this._command = value;
    }
    resetCommand() {
        this._command = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get commandInput() {
        return this._command;
    }
    get image() {
        return this.getStringAttribute('image');
    }
    set image(value) {
        this._image = value;
    }
    // Temporarily expose input value. Use with caution.
    get imageInput() {
        return this._image;
    }
    get imagePullPolicy() {
        return this.getStringAttribute('image_pull_policy');
    }
    set imagePullPolicy(value) {
        this._imagePullPolicy = value;
    }
    resetImagePullPolicy() {
        this._imagePullPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imagePullPolicyInput() {
        return this._imagePullPolicy;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get env() {
        return this._env;
    }
    putEnv(value) {
        this._env.internalValue = value;
    }
    resetEnv() {
        this._env.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get envInput() {
        return this._env.internalValue;
    }
    get resources() {
        return this._resources;
    }
    putResources(value) {
        this._resources.internalValue = value;
    }
    resetResources() {
        this._resources.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourcesInput() {
        return this._resources.internalValue;
    }
    get securityContext() {
        return this._securityContext;
    }
    putSecurityContext(value) {
        this._securityContext.internalValue = value;
    }
    resetSecurityContext() {
        this._securityContext.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityContextInput() {
        return this._securityContext.internalValue;
    }
    get volumeMounts() {
        return this._volumeMounts;
    }
    putVolumeMounts(value) {
        this._volumeMounts.internalValue = value;
    }
    resetVolumeMounts() {
        this._volumeMounts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get volumeMountsInput() {
        return this._volumeMounts.internalValue;
    }
}
exports.BatchJobDefinitionEksPropertiesPodPropertiesContainersOutputReference = BatchJobDefinitionEksPropertiesPodPropertiesContainersOutputReference;
_g = JSII_RTTI_SYMBOL_1;
BatchJobDefinitionEksPropertiesPodPropertiesContainersOutputReference[_g] = { fqn: "@cdktf/provider-aws.batchJobDefinition.BatchJobDefinitionEksPropertiesPodPropertiesContainersOutputReference", version: "19.15.0" };
function batchJobDefinitionEksPropertiesPodPropertiesMetadataToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        labels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.labels),
    };
}
exports.batchJobDefinitionEksPropertiesPodPropertiesMetadataToTerraform = batchJobDefinitionEksPropertiesPodPropertiesMetadataToTerraform;
function batchJobDefinitionEksPropertiesPodPropertiesMetadataToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        labels: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.labels),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.batchJobDefinitionEksPropertiesPodPropertiesMetadataToHclTerraform = batchJobDefinitionEksPropertiesPodPropertiesMetadataToHclTerraform;
class BatchJobDefinitionEksPropertiesPodPropertiesMetadataOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._labels !== undefined) {
            hasAnyValues = true;
            internalValueResult.labels = this._labels;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._labels = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._labels = value.labels;
        }
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
}
exports.BatchJobDefinitionEksPropertiesPodPropertiesMetadataOutputReference = BatchJobDefinitionEksPropertiesPodPropertiesMetadataOutputReference;
_h = JSII_RTTI_SYMBOL_1;
BatchJobDefinitionEksPropertiesPodPropertiesMetadataOutputReference[_h] = { fqn: "@cdktf/provider-aws.batchJobDefinition.BatchJobDefinitionEksPropertiesPodPropertiesMetadataOutputReference", version: "19.15.0" };
function batchJobDefinitionEksPropertiesPodPropertiesVolumesEmptyDirToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        medium: cdktf.stringToTerraform(struct.medium),
        size_limit: cdktf.stringToTerraform(struct.sizeLimit),
    };
}
exports.batchJobDefinitionEksPropertiesPodPropertiesVolumesEmptyDirToTerraform = batchJobDefinitionEksPropertiesPodPropertiesVolumesEmptyDirToTerraform;
function batchJobDefinitionEksPropertiesPodPropertiesVolumesEmptyDirToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        medium: {
            value: cdktf.stringToHclTerraform(struct.medium),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        size_limit: {
            value: cdktf.stringToHclTerraform(struct.sizeLimit),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.batchJobDefinitionEksPropertiesPodPropertiesVolumesEmptyDirToHclTerraform = batchJobDefinitionEksPropertiesPodPropertiesVolumesEmptyDirToHclTerraform;
class BatchJobDefinitionEksPropertiesPodPropertiesVolumesEmptyDirOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._medium !== undefined) {
            hasAnyValues = true;
            internalValueResult.medium = this._medium;
        }
        if (this._sizeLimit !== undefined) {
            hasAnyValues = true;
            internalValueResult.sizeLimit = this._sizeLimit;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._medium = undefined;
            this._sizeLimit = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._medium = value.medium;
            this._sizeLimit = value.sizeLimit;
        }
    }
    get medium() {
        return this.getStringAttribute('medium');
    }
    set medium(value) {
        this._medium = value;
    }
    resetMedium() {
        this._medium = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mediumInput() {
        return this._medium;
    }
    get sizeLimit() {
        return this.getStringAttribute('size_limit');
    }
    set sizeLimit(value) {
        this._sizeLimit = value;
    }
    // Temporarily expose input value. Use with caution.
    get sizeLimitInput() {
        return this._sizeLimit;
    }
}
exports.BatchJobDefinitionEksPropertiesPodPropertiesVolumesEmptyDirOutputReference = BatchJobDefinitionEksPropertiesPodPropertiesVolumesEmptyDirOutputReference;
_j = JSII_RTTI_SYMBOL_1;
BatchJobDefinitionEksPropertiesPodPropertiesVolumesEmptyDirOutputReference[_j] = { fqn: "@cdktf/provider-aws.batchJobDefinition.BatchJobDefinitionEksPropertiesPodPropertiesVolumesEmptyDirOutputReference", version: "19.15.0" };
function batchJobDefinitionEksPropertiesPodPropertiesVolumesHostPathToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        path: cdktf.stringToTerraform(struct.path),
    };
}
exports.batchJobDefinitionEksPropertiesPodPropertiesVolumesHostPathToTerraform = batchJobDefinitionEksPropertiesPodPropertiesVolumesHostPathToTerraform;
function batchJobDefinitionEksPropertiesPodPropertiesVolumesHostPathToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        path: {
            value: cdktf.stringToHclTerraform(struct.path),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.batchJobDefinitionEksPropertiesPodPropertiesVolumesHostPathToHclTerraform = batchJobDefinitionEksPropertiesPodPropertiesVolumesHostPathToHclTerraform;
class BatchJobDefinitionEksPropertiesPodPropertiesVolumesHostPathOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._path !== undefined) {
            hasAnyValues = true;
            internalValueResult.path = this._path;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._path = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._path = value.path;
        }
    }
    get path() {
        return this.getStringAttribute('path');
    }
    set path(value) {
        this._path = value;
    }
    // Temporarily expose input value. Use with caution.
    get pathInput() {
        return this._path;
    }
}
exports.BatchJobDefinitionEksPropertiesPodPropertiesVolumesHostPathOutputReference = BatchJobDefinitionEksPropertiesPodPropertiesVolumesHostPathOutputReference;
_k = JSII_RTTI_SYMBOL_1;
BatchJobDefinitionEksPropertiesPodPropertiesVolumesHostPathOutputReference[_k] = { fqn: "@cdktf/provider-aws.batchJobDefinition.BatchJobDefinitionEksPropertiesPodPropertiesVolumesHostPathOutputReference", version: "19.15.0" };
function batchJobDefinitionEksPropertiesPodPropertiesVolumesSecretToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        optional: cdktf.booleanToTerraform(struct.optional),
        secret_name: cdktf.stringToTerraform(struct.secretName),
    };
}
exports.batchJobDefinitionEksPropertiesPodPropertiesVolumesSecretToTerraform = batchJobDefinitionEksPropertiesPodPropertiesVolumesSecretToTerraform;
function batchJobDefinitionEksPropertiesPodPropertiesVolumesSecretToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        optional: {
            value: cdktf.booleanToHclTerraform(struct.optional),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        secret_name: {
            value: cdktf.stringToHclTerraform(struct.secretName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.batchJobDefinitionEksPropertiesPodPropertiesVolumesSecretToHclTerraform = batchJobDefinitionEksPropertiesPodPropertiesVolumesSecretToHclTerraform;
class BatchJobDefinitionEksPropertiesPodPropertiesVolumesSecretOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._optional !== undefined) {
            hasAnyValues = true;
            internalValueResult.optional = this._optional;
        }
        if (this._secretName !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretName = this._secretName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._optional = undefined;
            this._secretName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._optional = value.optional;
            this._secretName = value.secretName;
        }
    }
    get optional() {
        return this.getBooleanAttribute('optional');
    }
    set optional(value) {
        this._optional = value;
    }
    resetOptional() {
        this._optional = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get optionalInput() {
        return this._optional;
    }
    get secretName() {
        return this.getStringAttribute('secret_name');
    }
    set secretName(value) {
        this._secretName = value;
    }
    // Temporarily expose input value. Use with caution.
    get secretNameInput() {
        return this._secretName;
    }
}
exports.BatchJobDefinitionEksPropertiesPodPropertiesVolumesSecretOutputReference = BatchJobDefinitionEksPropertiesPodPropertiesVolumesSecretOutputReference;
_l = JSII_RTTI_SYMBOL_1;
BatchJobDefinitionEksPropertiesPodPropertiesVolumesSecretOutputReference[_l] = { fqn: "@cdktf/provider-aws.batchJobDefinition.BatchJobDefinitionEksPropertiesPodPropertiesVolumesSecretOutputReference", version: "19.15.0" };
function batchJobDefinitionEksPropertiesPodPropertiesVolumesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        empty_dir: batchJobDefinitionEksPropertiesPodPropertiesVolumesEmptyDirToTerraform(struct.emptyDir),
        host_path: batchJobDefinitionEksPropertiesPodPropertiesVolumesHostPathToTerraform(struct.hostPath),
        secret: batchJobDefinitionEksPropertiesPodPropertiesVolumesSecretToTerraform(struct.secret),
    };
}
exports.batchJobDefinitionEksPropertiesPodPropertiesVolumesToTerraform = batchJobDefinitionEksPropertiesPodPropertiesVolumesToTerraform;
function batchJobDefinitionEksPropertiesPodPropertiesVolumesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        empty_dir: {
            value: batchJobDefinitionEksPropertiesPodPropertiesVolumesEmptyDirToHclTerraform(struct.emptyDir),
            isBlock: true,
            type: "list",
            storageClassType: "BatchJobDefinitionEksPropertiesPodPropertiesVolumesEmptyDirList",
        },
        host_path: {
            value: batchJobDefinitionEksPropertiesPodPropertiesVolumesHostPathToHclTerraform(struct.hostPath),
            isBlock: true,
            type: "list",
            storageClassType: "BatchJobDefinitionEksPropertiesPodPropertiesVolumesHostPathList",
        },
        secret: {
            value: batchJobDefinitionEksPropertiesPodPropertiesVolumesSecretToHclTerraform(struct.secret),
            isBlock: true,
            type: "list",
            storageClassType: "BatchJobDefinitionEksPropertiesPodPropertiesVolumesSecretList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.batchJobDefinitionEksPropertiesPodPropertiesVolumesToHclTerraform = batchJobDefinitionEksPropertiesPodPropertiesVolumesToHclTerraform;
class BatchJobDefinitionEksPropertiesPodPropertiesVolumesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // empty_dir - computed: false, optional: true, required: false
        this._emptyDir = new BatchJobDefinitionEksPropertiesPodPropertiesVolumesEmptyDirOutputReference(this, "empty_dir");
        // host_path - computed: false, optional: true, required: false
        this._hostPath = new BatchJobDefinitionEksPropertiesPodPropertiesVolumesHostPathOutputReference(this, "host_path");
        // secret - computed: false, optional: true, required: false
        this._secret = new BatchJobDefinitionEksPropertiesPodPropertiesVolumesSecretOutputReference(this, "secret");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._emptyDir?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.emptyDir = this._emptyDir?.internalValue;
        }
        if (this._hostPath?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.hostPath = this._hostPath?.internalValue;
        }
        if (this._secret?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.secret = this._secret?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._emptyDir.internalValue = undefined;
            this._hostPath.internalValue = undefined;
            this._secret.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._emptyDir.internalValue = value.emptyDir;
            this._hostPath.internalValue = value.hostPath;
            this._secret.internalValue = value.secret;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get emptyDir() {
        return this._emptyDir;
    }
    putEmptyDir(value) {
        this._emptyDir.internalValue = value;
    }
    resetEmptyDir() {
        this._emptyDir.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get emptyDirInput() {
        return this._emptyDir.internalValue;
    }
    get hostPath() {
        return this._hostPath;
    }
    putHostPath(value) {
        this._hostPath.internalValue = value;
    }
    resetHostPath() {
        this._hostPath.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostPathInput() {
        return this._hostPath.internalValue;
    }
    get secret() {
        return this._secret;
    }
    putSecret(value) {
        this._secret.internalValue = value;
    }
    resetSecret() {
        this._secret.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secretInput() {
        return this._secret.internalValue;
    }
}
exports.BatchJobDefinitionEksPropertiesPodPropertiesVolumesOutputReference = BatchJobDefinitionEksPropertiesPodPropertiesVolumesOutputReference;
_m = JSII_RTTI_SYMBOL_1;
BatchJobDefinitionEksPropertiesPodPropertiesVolumesOutputReference[_m] = { fqn: "@cdktf/provider-aws.batchJobDefinition.BatchJobDefinitionEksPropertiesPodPropertiesVolumesOutputReference", version: "19.15.0" };
class BatchJobDefinitionEksPropertiesPodPropertiesVolumesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new BatchJobDefinitionEksPropertiesPodPropertiesVolumesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.BatchJobDefinitionEksPropertiesPodPropertiesVolumesList = BatchJobDefinitionEksPropertiesPodPropertiesVolumesList;
_o = JSII_RTTI_SYMBOL_1;
BatchJobDefinitionEksPropertiesPodPropertiesVolumesList[_o] = { fqn: "@cdktf/provider-aws.batchJobDefinition.BatchJobDefinitionEksPropertiesPodPropertiesVolumesList", version: "19.15.0" };
function batchJobDefinitionEksPropertiesPodPropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dns_policy: cdktf.stringToTerraform(struct.dnsPolicy),
        host_network: cdktf.booleanToTerraform(struct.hostNetwork),
        service_account_name: cdktf.stringToTerraform(struct.serviceAccountName),
        containers: batchJobDefinitionEksPropertiesPodPropertiesContainersToTerraform(struct.containers),
        metadata: batchJobDefinitionEksPropertiesPodPropertiesMetadataToTerraform(struct.metadata),
        volumes: cdktf.listMapper(batchJobDefinitionEksPropertiesPodPropertiesVolumesToTerraform, true)(struct.volumes),
    };
}
exports.batchJobDefinitionEksPropertiesPodPropertiesToTerraform = batchJobDefinitionEksPropertiesPodPropertiesToTerraform;
function batchJobDefinitionEksPropertiesPodPropertiesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        dns_policy: {
            value: cdktf.stringToHclTerraform(struct.dnsPolicy),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        host_network: {
            value: cdktf.booleanToHclTerraform(struct.hostNetwork),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        service_account_name: {
            value: cdktf.stringToHclTerraform(struct.serviceAccountName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        containers: {
            value: batchJobDefinitionEksPropertiesPodPropertiesContainersToHclTerraform(struct.containers),
            isBlock: true,
            type: "list",
            storageClassType: "BatchJobDefinitionEksPropertiesPodPropertiesContainersList",
        },
        metadata: {
            value: batchJobDefinitionEksPropertiesPodPropertiesMetadataToHclTerraform(struct.metadata),
            isBlock: true,
            type: "list",
            storageClassType: "BatchJobDefinitionEksPropertiesPodPropertiesMetadataList",
        },
        volumes: {
            value: cdktf.listMapperHcl(batchJobDefinitionEksPropertiesPodPropertiesVolumesToHclTerraform, true)(struct.volumes),
            isBlock: true,
            type: "list",
            storageClassType: "BatchJobDefinitionEksPropertiesPodPropertiesVolumesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.batchJobDefinitionEksPropertiesPodPropertiesToHclTerraform = batchJobDefinitionEksPropertiesPodPropertiesToHclTerraform;
class BatchJobDefinitionEksPropertiesPodPropertiesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // containers - computed: false, optional: false, required: true
        this._containers = new BatchJobDefinitionEksPropertiesPodPropertiesContainersOutputReference(this, "containers");
        // metadata - computed: false, optional: true, required: false
        this._metadata = new BatchJobDefinitionEksPropertiesPodPropertiesMetadataOutputReference(this, "metadata");
        // volumes - computed: false, optional: true, required: false
        this._volumes = new BatchJobDefinitionEksPropertiesPodPropertiesVolumesList(this, "volumes", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dnsPolicy !== undefined) {
            hasAnyValues = true;
            internalValueResult.dnsPolicy = this._dnsPolicy;
        }
        if (this._hostNetwork !== undefined) {
            hasAnyValues = true;
            internalValueResult.hostNetwork = this._hostNetwork;
        }
        if (this._serviceAccountName !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceAccountName = this._serviceAccountName;
        }
        if (this._containers?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.containers = this._containers?.internalValue;
        }
        if (this._metadata?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.metadata = this._metadata?.internalValue;
        }
        if (this._volumes?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.volumes = this._volumes?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dnsPolicy = undefined;
            this._hostNetwork = undefined;
            this._serviceAccountName = undefined;
            this._containers.internalValue = undefined;
            this._metadata.internalValue = undefined;
            this._volumes.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dnsPolicy = value.dnsPolicy;
            this._hostNetwork = value.hostNetwork;
            this._serviceAccountName = value.serviceAccountName;
            this._containers.internalValue = value.containers;
            this._metadata.internalValue = value.metadata;
            this._volumes.internalValue = value.volumes;
        }
    }
    get dnsPolicy() {
        return this.getStringAttribute('dns_policy');
    }
    set dnsPolicy(value) {
        this._dnsPolicy = value;
    }
    resetDnsPolicy() {
        this._dnsPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dnsPolicyInput() {
        return this._dnsPolicy;
    }
    get hostNetwork() {
        return this.getBooleanAttribute('host_network');
    }
    set hostNetwork(value) {
        this._hostNetwork = value;
    }
    resetHostNetwork() {
        this._hostNetwork = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostNetworkInput() {
        return this._hostNetwork;
    }
    get serviceAccountName() {
        return this.getStringAttribute('service_account_name');
    }
    set serviceAccountName(value) {
        this._serviceAccountName = value;
    }
    resetServiceAccountName() {
        this._serviceAccountName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceAccountNameInput() {
        return this._serviceAccountName;
    }
    get containers() {
        return this._containers;
    }
    putContainers(value) {
        this._containers.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get containersInput() {
        return this._containers.internalValue;
    }
    get metadata() {
        return this._metadata;
    }
    putMetadata(value) {
        this._metadata.internalValue = value;
    }
    resetMetadata() {
        this._metadata.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metadataInput() {
        return this._metadata.internalValue;
    }
    get volumes() {
        return this._volumes;
    }
    putVolumes(value) {
        this._volumes.internalValue = value;
    }
    resetVolumes() {
        this._volumes.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get volumesInput() {
        return this._volumes.internalValue;
    }
}
exports.BatchJobDefinitionEksPropertiesPodPropertiesOutputReference = BatchJobDefinitionEksPropertiesPodPropertiesOutputReference;
_p = JSII_RTTI_SYMBOL_1;
BatchJobDefinitionEksPropertiesPodPropertiesOutputReference[_p] = { fqn: "@cdktf/provider-aws.batchJobDefinition.BatchJobDefinitionEksPropertiesPodPropertiesOutputReference", version: "19.15.0" };
function batchJobDefinitionEksPropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        pod_properties: batchJobDefinitionEksPropertiesPodPropertiesToTerraform(struct.podProperties),
    };
}
exports.batchJobDefinitionEksPropertiesToTerraform = batchJobDefinitionEksPropertiesToTerraform;
function batchJobDefinitionEksPropertiesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        pod_properties: {
            value: batchJobDefinitionEksPropertiesPodPropertiesToHclTerraform(struct.podProperties),
            isBlock: true,
            type: "list",
            storageClassType: "BatchJobDefinitionEksPropertiesPodPropertiesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.batchJobDefinitionEksPropertiesToHclTerraform = batchJobDefinitionEksPropertiesToHclTerraform;
class BatchJobDefinitionEksPropertiesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // pod_properties - computed: false, optional: false, required: true
        this._podProperties = new BatchJobDefinitionEksPropertiesPodPropertiesOutputReference(this, "pod_properties");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._podProperties?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.podProperties = this._podProperties?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._podProperties.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._podProperties.internalValue = value.podProperties;
        }
    }
    get podProperties() {
        return this._podProperties;
    }
    putPodProperties(value) {
        this._podProperties.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get podPropertiesInput() {
        return this._podProperties.internalValue;
    }
}
exports.BatchJobDefinitionEksPropertiesOutputReference = BatchJobDefinitionEksPropertiesOutputReference;
_q = JSII_RTTI_SYMBOL_1;
BatchJobDefinitionEksPropertiesOutputReference[_q] = { fqn: "@cdktf/provider-aws.batchJobDefinition.BatchJobDefinitionEksPropertiesOutputReference", version: "19.15.0" };
function batchJobDefinitionRetryStrategyEvaluateOnExitToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        action: cdktf.stringToTerraform(struct.action),
        on_exit_code: cdktf.stringToTerraform(struct.onExitCode),
        on_reason: cdktf.stringToTerraform(struct.onReason),
        on_status_reason: cdktf.stringToTerraform(struct.onStatusReason),
    };
}
exports.batchJobDefinitionRetryStrategyEvaluateOnExitToTerraform = batchJobDefinitionRetryStrategyEvaluateOnExitToTerraform;
function batchJobDefinitionRetryStrategyEvaluateOnExitToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        action: {
            value: cdktf.stringToHclTerraform(struct.action),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        on_exit_code: {
            value: cdktf.stringToHclTerraform(struct.onExitCode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        on_reason: {
            value: cdktf.stringToHclTerraform(struct.onReason),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        on_status_reason: {
            value: cdktf.stringToHclTerraform(struct.onStatusReason),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.batchJobDefinitionRetryStrategyEvaluateOnExitToHclTerraform = batchJobDefinitionRetryStrategyEvaluateOnExitToHclTerraform;
class BatchJobDefinitionRetryStrategyEvaluateOnExitOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._action !== undefined) {
            hasAnyValues = true;
            internalValueResult.action = this._action;
        }
        if (this._onExitCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.onExitCode = this._onExitCode;
        }
        if (this._onReason !== undefined) {
            hasAnyValues = true;
            internalValueResult.onReason = this._onReason;
        }
        if (this._onStatusReason !== undefined) {
            hasAnyValues = true;
            internalValueResult.onStatusReason = this._onStatusReason;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._action = undefined;
            this._onExitCode = undefined;
            this._onReason = undefined;
            this._onStatusReason = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._action = value.action;
            this._onExitCode = value.onExitCode;
            this._onReason = value.onReason;
            this._onStatusReason = value.onStatusReason;
        }
    }
    get action() {
        return this.getStringAttribute('action');
    }
    set action(value) {
        this._action = value;
    }
    // Temporarily expose input value. Use with caution.
    get actionInput() {
        return this._action;
    }
    get onExitCode() {
        return this.getStringAttribute('on_exit_code');
    }
    set onExitCode(value) {
        this._onExitCode = value;
    }
    resetOnExitCode() {
        this._onExitCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get onExitCodeInput() {
        return this._onExitCode;
    }
    get onReason() {
        return this.getStringAttribute('on_reason');
    }
    set onReason(value) {
        this._onReason = value;
    }
    resetOnReason() {
        this._onReason = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get onReasonInput() {
        return this._onReason;
    }
    get onStatusReason() {
        return this.getStringAttribute('on_status_reason');
    }
    set onStatusReason(value) {
        this._onStatusReason = value;
    }
    resetOnStatusReason() {
        this._onStatusReason = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get onStatusReasonInput() {
        return this._onStatusReason;
    }
}
exports.BatchJobDefinitionRetryStrategyEvaluateOnExitOutputReference = BatchJobDefinitionRetryStrategyEvaluateOnExitOutputReference;
_r = JSII_RTTI_SYMBOL_1;
BatchJobDefinitionRetryStrategyEvaluateOnExitOutputReference[_r] = { fqn: "@cdktf/provider-aws.batchJobDefinition.BatchJobDefinitionRetryStrategyEvaluateOnExitOutputReference", version: "19.15.0" };
class BatchJobDefinitionRetryStrategyEvaluateOnExitList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new BatchJobDefinitionRetryStrategyEvaluateOnExitOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.BatchJobDefinitionRetryStrategyEvaluateOnExitList = BatchJobDefinitionRetryStrategyEvaluateOnExitList;
_s = JSII_RTTI_SYMBOL_1;
BatchJobDefinitionRetryStrategyEvaluateOnExitList[_s] = { fqn: "@cdktf/provider-aws.batchJobDefinition.BatchJobDefinitionRetryStrategyEvaluateOnExitList", version: "19.15.0" };
function batchJobDefinitionRetryStrategyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        attempts: cdktf.numberToTerraform(struct.attempts),
        evaluate_on_exit: cdktf.listMapper(batchJobDefinitionRetryStrategyEvaluateOnExitToTerraform, true)(struct.evaluateOnExit),
    };
}
exports.batchJobDefinitionRetryStrategyToTerraform = batchJobDefinitionRetryStrategyToTerraform;
function batchJobDefinitionRetryStrategyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        attempts: {
            value: cdktf.numberToHclTerraform(struct.attempts),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        evaluate_on_exit: {
            value: cdktf.listMapperHcl(batchJobDefinitionRetryStrategyEvaluateOnExitToHclTerraform, true)(struct.evaluateOnExit),
            isBlock: true,
            type: "list",
            storageClassType: "BatchJobDefinitionRetryStrategyEvaluateOnExitList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.batchJobDefinitionRetryStrategyToHclTerraform = batchJobDefinitionRetryStrategyToHclTerraform;
class BatchJobDefinitionRetryStrategyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // evaluate_on_exit - computed: false, optional: true, required: false
        this._evaluateOnExit = new BatchJobDefinitionRetryStrategyEvaluateOnExitList(this, "evaluate_on_exit", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._attempts !== undefined) {
            hasAnyValues = true;
            internalValueResult.attempts = this._attempts;
        }
        if (this._evaluateOnExit?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.evaluateOnExit = this._evaluateOnExit?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._attempts = undefined;
            this._evaluateOnExit.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._attempts = value.attempts;
            this._evaluateOnExit.internalValue = value.evaluateOnExit;
        }
    }
    get attempts() {
        return this.getNumberAttribute('attempts');
    }
    set attempts(value) {
        this._attempts = value;
    }
    resetAttempts() {
        this._attempts = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get attemptsInput() {
        return this._attempts;
    }
    get evaluateOnExit() {
        return this._evaluateOnExit;
    }
    putEvaluateOnExit(value) {
        this._evaluateOnExit.internalValue = value;
    }
    resetEvaluateOnExit() {
        this._evaluateOnExit.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get evaluateOnExitInput() {
        return this._evaluateOnExit.internalValue;
    }
}
exports.BatchJobDefinitionRetryStrategyOutputReference = BatchJobDefinitionRetryStrategyOutputReference;
_t = JSII_RTTI_SYMBOL_1;
BatchJobDefinitionRetryStrategyOutputReference[_t] = { fqn: "@cdktf/provider-aws.batchJobDefinition.BatchJobDefinitionRetryStrategyOutputReference", version: "19.15.0" };
function batchJobDefinitionTimeoutToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        attempt_duration_seconds: cdktf.numberToTerraform(struct.attemptDurationSeconds),
    };
}
exports.batchJobDefinitionTimeoutToTerraform = batchJobDefinitionTimeoutToTerraform;
function batchJobDefinitionTimeoutToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        attempt_duration_seconds: {
            value: cdktf.numberToHclTerraform(struct.attemptDurationSeconds),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.batchJobDefinitionTimeoutToHclTerraform = batchJobDefinitionTimeoutToHclTerraform;
class BatchJobDefinitionTimeoutOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._attemptDurationSeconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.attemptDurationSeconds = this._attemptDurationSeconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._attemptDurationSeconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._attemptDurationSeconds = value.attemptDurationSeconds;
        }
    }
    get attemptDurationSeconds() {
        return this.getNumberAttribute('attempt_duration_seconds');
    }
    set attemptDurationSeconds(value) {
        this._attemptDurationSeconds = value;
    }
    resetAttemptDurationSeconds() {
        this._attemptDurationSeconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get attemptDurationSecondsInput() {
        return this._attemptDurationSeconds;
    }
}
exports.BatchJobDefinitionTimeoutOutputReference = BatchJobDefinitionTimeoutOutputReference;
_u = JSII_RTTI_SYMBOL_1;
BatchJobDefinitionTimeoutOutputReference[_u] = { fqn: "@cdktf/provider-aws.batchJobDefinition.BatchJobDefinitionTimeoutOutputReference", version: "19.15.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/batch_job_definition aws_batch_job_definition}
*/
class BatchJobDefinition extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a BatchJobDefinition resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the BatchJobDefinition to import
    * @param importFromId The id of the existing BatchJobDefinition that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/batch_job_definition#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the BatchJobDefinition to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_batch_job_definition", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/batch_job_definition aws_batch_job_definition} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options BatchJobDefinitionConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_batch_job_definition',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // eks_properties - computed: false, optional: true, required: false
        this._eksProperties = new BatchJobDefinitionEksPropertiesOutputReference(this, "eks_properties");
        // retry_strategy - computed: false, optional: true, required: false
        this._retryStrategy = new BatchJobDefinitionRetryStrategyOutputReference(this, "retry_strategy");
        // timeout - computed: false, optional: true, required: false
        this._timeout = new BatchJobDefinitionTimeoutOutputReference(this, "timeout");
        this._containerProperties = config.containerProperties;
        this._deregisterOnNewRevision = config.deregisterOnNewRevision;
        this._id = config.id;
        this._name = config.name;
        this._nodeProperties = config.nodeProperties;
        this._parameters = config.parameters;
        this._platformCapabilities = config.platformCapabilities;
        this._propagateTags = config.propagateTags;
        this._schedulingPriority = config.schedulingPriority;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._type = config.type;
        this._eksProperties.internalValue = config.eksProperties;
        this._retryStrategy.internalValue = config.retryStrategy;
        this._timeout.internalValue = config.timeout;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // arn_prefix - computed: true, optional: false, required: false
    get arnPrefix() {
        return this.getStringAttribute('arn_prefix');
    }
    get containerProperties() {
        return this.getStringAttribute('container_properties');
    }
    set containerProperties(value) {
        this._containerProperties = value;
    }
    resetContainerProperties() {
        this._containerProperties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get containerPropertiesInput() {
        return this._containerProperties;
    }
    get deregisterOnNewRevision() {
        return this.getBooleanAttribute('deregister_on_new_revision');
    }
    set deregisterOnNewRevision(value) {
        this._deregisterOnNewRevision = value;
    }
    resetDeregisterOnNewRevision() {
        this._deregisterOnNewRevision = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deregisterOnNewRevisionInput() {
        return this._deregisterOnNewRevision;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get nodeProperties() {
        return this.getStringAttribute('node_properties');
    }
    set nodeProperties(value) {
        this._nodeProperties = value;
    }
    resetNodeProperties() {
        this._nodeProperties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodePropertiesInput() {
        return this._nodeProperties;
    }
    get parameters() {
        return this.getStringMapAttribute('parameters');
    }
    set parameters(value) {
        this._parameters = value;
    }
    resetParameters() {
        this._parameters = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parametersInput() {
        return this._parameters;
    }
    get platformCapabilities() {
        return cdktf.Fn.tolist(this.getListAttribute('platform_capabilities'));
    }
    set platformCapabilities(value) {
        this._platformCapabilities = value;
    }
    resetPlatformCapabilities() {
        this._platformCapabilities = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get platformCapabilitiesInput() {
        return this._platformCapabilities;
    }
    get propagateTags() {
        return this.getBooleanAttribute('propagate_tags');
    }
    set propagateTags(value) {
        this._propagateTags = value;
    }
    resetPropagateTags() {
        this._propagateTags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get propagateTagsInput() {
        return this._propagateTags;
    }
    // revision - computed: true, optional: false, required: false
    get revision() {
        return this.getNumberAttribute('revision');
    }
    get schedulingPriority() {
        return this.getNumberAttribute('scheduling_priority');
    }
    set schedulingPriority(value) {
        this._schedulingPriority = value;
    }
    resetSchedulingPriority() {
        this._schedulingPriority = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get schedulingPriorityInput() {
        return this._schedulingPriority;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get eksProperties() {
        return this._eksProperties;
    }
    putEksProperties(value) {
        this._eksProperties.internalValue = value;
    }
    resetEksProperties() {
        this._eksProperties.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get eksPropertiesInput() {
        return this._eksProperties.internalValue;
    }
    get retryStrategy() {
        return this._retryStrategy;
    }
    putRetryStrategy(value) {
        this._retryStrategy.internalValue = value;
    }
    resetRetryStrategy() {
        this._retryStrategy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retryStrategyInput() {
        return this._retryStrategy.internalValue;
    }
    get timeout() {
        return this._timeout;
    }
    putTimeout(value) {
        this._timeout.internalValue = value;
    }
    resetTimeout() {
        this._timeout.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutInput() {
        return this._timeout.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            container_properties: cdktf.stringToTerraform(this._containerProperties),
            deregister_on_new_revision: cdktf.booleanToTerraform(this._deregisterOnNewRevision),
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            node_properties: cdktf.stringToTerraform(this._nodeProperties),
            parameters: cdktf.hashMapper(cdktf.stringToTerraform)(this._parameters),
            platform_capabilities: cdktf.listMapper(cdktf.stringToTerraform, false)(this._platformCapabilities),
            propagate_tags: cdktf.booleanToTerraform(this._propagateTags),
            scheduling_priority: cdktf.numberToTerraform(this._schedulingPriority),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            type: cdktf.stringToTerraform(this._type),
            eks_properties: batchJobDefinitionEksPropertiesToTerraform(this._eksProperties.internalValue),
            retry_strategy: batchJobDefinitionRetryStrategyToTerraform(this._retryStrategy.internalValue),
            timeout: batchJobDefinitionTimeoutToTerraform(this._timeout.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            container_properties: {
                value: cdktf.stringToHclTerraform(this._containerProperties),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            deregister_on_new_revision: {
                value: cdktf.booleanToHclTerraform(this._deregisterOnNewRevision),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            node_properties: {
                value: cdktf.stringToHclTerraform(this._nodeProperties),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            parameters: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._parameters),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            platform_capabilities: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._platformCapabilities),
                isBlock: false,
                type: "set",
                storageClassType: "stringList",
            },
            propagate_tags: {
                value: cdktf.booleanToHclTerraform(this._propagateTags),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            scheduling_priority: {
                value: cdktf.numberToHclTerraform(this._schedulingPriority),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            tags: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tags),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            tags_all: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tagsAll),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            type: {
                value: cdktf.stringToHclTerraform(this._type),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            eks_properties: {
                value: batchJobDefinitionEksPropertiesToHclTerraform(this._eksProperties.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "BatchJobDefinitionEksPropertiesList",
            },
            retry_strategy: {
                value: batchJobDefinitionRetryStrategyToHclTerraform(this._retryStrategy.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "BatchJobDefinitionRetryStrategyList",
            },
            timeout: {
                value: batchJobDefinitionTimeoutToHclTerraform(this._timeout.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "BatchJobDefinitionTimeoutList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.BatchJobDefinition = BatchJobDefinition;
_v = JSII_RTTI_SYMBOL_1;
BatchJobDefinition[_v] = { fqn: "@cdktf/provider-aws.batchJobDefinition.BatchJobDefinition", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
BatchJobDefinition.tfResourceType = "aws_batch_job_definition";
//# sourceMappingURL=data:application/json;base64,