"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomerprofilesDomain = exports.CustomerprofilesDomainRuleBasedMatchingOutputReference = exports.customerprofilesDomainRuleBasedMatchingToHclTerraform = exports.customerprofilesDomainRuleBasedMatchingToTerraform = exports.CustomerprofilesDomainRuleBasedMatchingMatchingRulesList = exports.CustomerprofilesDomainRuleBasedMatchingMatchingRulesOutputReference = exports.customerprofilesDomainRuleBasedMatchingMatchingRulesToHclTerraform = exports.customerprofilesDomainRuleBasedMatchingMatchingRulesToTerraform = exports.CustomerprofilesDomainRuleBasedMatchingExportingConfigOutputReference = exports.customerprofilesDomainRuleBasedMatchingExportingConfigToHclTerraform = exports.customerprofilesDomainRuleBasedMatchingExportingConfigToTerraform = exports.CustomerprofilesDomainRuleBasedMatchingExportingConfigS3ExportingOutputReference = exports.customerprofilesDomainRuleBasedMatchingExportingConfigS3ExportingToHclTerraform = exports.customerprofilesDomainRuleBasedMatchingExportingConfigS3ExportingToTerraform = exports.CustomerprofilesDomainRuleBasedMatchingConflictResolutionOutputReference = exports.customerprofilesDomainRuleBasedMatchingConflictResolutionToHclTerraform = exports.customerprofilesDomainRuleBasedMatchingConflictResolutionToTerraform = exports.CustomerprofilesDomainRuleBasedMatchingAttributeTypesSelectorOutputReference = exports.customerprofilesDomainRuleBasedMatchingAttributeTypesSelectorToHclTerraform = exports.customerprofilesDomainRuleBasedMatchingAttributeTypesSelectorToTerraform = exports.CustomerprofilesDomainMatchingOutputReference = exports.customerprofilesDomainMatchingToHclTerraform = exports.customerprofilesDomainMatchingToTerraform = exports.CustomerprofilesDomainMatchingJobScheduleOutputReference = exports.customerprofilesDomainMatchingJobScheduleToHclTerraform = exports.customerprofilesDomainMatchingJobScheduleToTerraform = exports.CustomerprofilesDomainMatchingExportingConfigOutputReference = exports.customerprofilesDomainMatchingExportingConfigToHclTerraform = exports.customerprofilesDomainMatchingExportingConfigToTerraform = exports.CustomerprofilesDomainMatchingExportingConfigS3ExportingOutputReference = exports.customerprofilesDomainMatchingExportingConfigS3ExportingToHclTerraform = exports.customerprofilesDomainMatchingExportingConfigS3ExportingToTerraform = exports.CustomerprofilesDomainMatchingAutoMergingOutputReference = exports.customerprofilesDomainMatchingAutoMergingToHclTerraform = exports.customerprofilesDomainMatchingAutoMergingToTerraform = exports.CustomerprofilesDomainMatchingAutoMergingConsolidationOutputReference = exports.customerprofilesDomainMatchingAutoMergingConsolidationToHclTerraform = exports.customerprofilesDomainMatchingAutoMergingConsolidationToTerraform = exports.CustomerprofilesDomainMatchingAutoMergingConflictResolutionOutputReference = exports.customerprofilesDomainMatchingAutoMergingConflictResolutionToHclTerraform = exports.customerprofilesDomainMatchingAutoMergingConflictResolutionToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function customerprofilesDomainMatchingAutoMergingConflictResolutionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        conflict_resolving_model: cdktf.stringToTerraform(struct.conflictResolvingModel),
        source_name: cdktf.stringToTerraform(struct.sourceName),
    };
}
exports.customerprofilesDomainMatchingAutoMergingConflictResolutionToTerraform = customerprofilesDomainMatchingAutoMergingConflictResolutionToTerraform;
function customerprofilesDomainMatchingAutoMergingConflictResolutionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        conflict_resolving_model: {
            value: cdktf.stringToHclTerraform(struct.conflictResolvingModel),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        source_name: {
            value: cdktf.stringToHclTerraform(struct.sourceName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.customerprofilesDomainMatchingAutoMergingConflictResolutionToHclTerraform = customerprofilesDomainMatchingAutoMergingConflictResolutionToHclTerraform;
class CustomerprofilesDomainMatchingAutoMergingConflictResolutionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._conflictResolvingModel !== undefined) {
            hasAnyValues = true;
            internalValueResult.conflictResolvingModel = this._conflictResolvingModel;
        }
        if (this._sourceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceName = this._sourceName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._conflictResolvingModel = undefined;
            this._sourceName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._conflictResolvingModel = value.conflictResolvingModel;
            this._sourceName = value.sourceName;
        }
    }
    get conflictResolvingModel() {
        return this.getStringAttribute('conflict_resolving_model');
    }
    set conflictResolvingModel(value) {
        this._conflictResolvingModel = value;
    }
    // Temporarily expose input value. Use with caution.
    get conflictResolvingModelInput() {
        return this._conflictResolvingModel;
    }
    get sourceName() {
        return this.getStringAttribute('source_name');
    }
    set sourceName(value) {
        this._sourceName = value;
    }
    resetSourceName() {
        this._sourceName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourceNameInput() {
        return this._sourceName;
    }
}
exports.CustomerprofilesDomainMatchingAutoMergingConflictResolutionOutputReference = CustomerprofilesDomainMatchingAutoMergingConflictResolutionOutputReference;
_a = JSII_RTTI_SYMBOL_1;
CustomerprofilesDomainMatchingAutoMergingConflictResolutionOutputReference[_a] = { fqn: "@cdktf/provider-aws.customerprofilesDomain.CustomerprofilesDomainMatchingAutoMergingConflictResolutionOutputReference", version: "19.15.0" };
function customerprofilesDomainMatchingAutoMergingConsolidationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        matching_attributes_list: cdktf.listMapper(cdktf.listMapper(cdktf.stringToTerraform, false), false)(struct.matchingAttributesList),
    };
}
exports.customerprofilesDomainMatchingAutoMergingConsolidationToTerraform = customerprofilesDomainMatchingAutoMergingConsolidationToTerraform;
function customerprofilesDomainMatchingAutoMergingConsolidationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        matching_attributes_list: {
            value: cdktf.listMapperHcl(cdktf.listMapperHcl(cdktf.stringToHclTerraform, false), false)(struct.matchingAttributesList),
            isBlock: false,
            type: "list",
            storageClassType: "stringListList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.customerprofilesDomainMatchingAutoMergingConsolidationToHclTerraform = customerprofilesDomainMatchingAutoMergingConsolidationToHclTerraform;
class CustomerprofilesDomainMatchingAutoMergingConsolidationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._matchingAttributesList !== undefined) {
            hasAnyValues = true;
            internalValueResult.matchingAttributesList = this._matchingAttributesList;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._matchingAttributesList = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._matchingAttributesList = value.matchingAttributesList;
        }
    }
    get matchingAttributesList() {
        return this.interpolationForAttribute('matching_attributes_list');
    }
    set matchingAttributesList(value) {
        this._matchingAttributesList = value;
    }
    // Temporarily expose input value. Use with caution.
    get matchingAttributesListInput() {
        return this._matchingAttributesList;
    }
}
exports.CustomerprofilesDomainMatchingAutoMergingConsolidationOutputReference = CustomerprofilesDomainMatchingAutoMergingConsolidationOutputReference;
_b = JSII_RTTI_SYMBOL_1;
CustomerprofilesDomainMatchingAutoMergingConsolidationOutputReference[_b] = { fqn: "@cdktf/provider-aws.customerprofilesDomain.CustomerprofilesDomainMatchingAutoMergingConsolidationOutputReference", version: "19.15.0" };
function customerprofilesDomainMatchingAutoMergingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        min_allowed_confidence_score_for_merging: cdktf.numberToTerraform(struct.minAllowedConfidenceScoreForMerging),
        conflict_resolution: customerprofilesDomainMatchingAutoMergingConflictResolutionToTerraform(struct.conflictResolution),
        consolidation: customerprofilesDomainMatchingAutoMergingConsolidationToTerraform(struct.consolidation),
    };
}
exports.customerprofilesDomainMatchingAutoMergingToTerraform = customerprofilesDomainMatchingAutoMergingToTerraform;
function customerprofilesDomainMatchingAutoMergingToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        min_allowed_confidence_score_for_merging: {
            value: cdktf.numberToHclTerraform(struct.minAllowedConfidenceScoreForMerging),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        conflict_resolution: {
            value: customerprofilesDomainMatchingAutoMergingConflictResolutionToHclTerraform(struct.conflictResolution),
            isBlock: true,
            type: "list",
            storageClassType: "CustomerprofilesDomainMatchingAutoMergingConflictResolutionList",
        },
        consolidation: {
            value: customerprofilesDomainMatchingAutoMergingConsolidationToHclTerraform(struct.consolidation),
            isBlock: true,
            type: "list",
            storageClassType: "CustomerprofilesDomainMatchingAutoMergingConsolidationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.customerprofilesDomainMatchingAutoMergingToHclTerraform = customerprofilesDomainMatchingAutoMergingToHclTerraform;
class CustomerprofilesDomainMatchingAutoMergingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // conflict_resolution - computed: false, optional: true, required: false
        this._conflictResolution = new CustomerprofilesDomainMatchingAutoMergingConflictResolutionOutputReference(this, "conflict_resolution");
        // consolidation - computed: false, optional: true, required: false
        this._consolidation = new CustomerprofilesDomainMatchingAutoMergingConsolidationOutputReference(this, "consolidation");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._minAllowedConfidenceScoreForMerging !== undefined) {
            hasAnyValues = true;
            internalValueResult.minAllowedConfidenceScoreForMerging = this._minAllowedConfidenceScoreForMerging;
        }
        if (this._conflictResolution?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.conflictResolution = this._conflictResolution?.internalValue;
        }
        if (this._consolidation?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.consolidation = this._consolidation?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._minAllowedConfidenceScoreForMerging = undefined;
            this._conflictResolution.internalValue = undefined;
            this._consolidation.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._minAllowedConfidenceScoreForMerging = value.minAllowedConfidenceScoreForMerging;
            this._conflictResolution.internalValue = value.conflictResolution;
            this._consolidation.internalValue = value.consolidation;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get minAllowedConfidenceScoreForMerging() {
        return this.getNumberAttribute('min_allowed_confidence_score_for_merging');
    }
    set minAllowedConfidenceScoreForMerging(value) {
        this._minAllowedConfidenceScoreForMerging = value;
    }
    resetMinAllowedConfidenceScoreForMerging() {
        this._minAllowedConfidenceScoreForMerging = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minAllowedConfidenceScoreForMergingInput() {
        return this._minAllowedConfidenceScoreForMerging;
    }
    get conflictResolution() {
        return this._conflictResolution;
    }
    putConflictResolution(value) {
        this._conflictResolution.internalValue = value;
    }
    resetConflictResolution() {
        this._conflictResolution.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conflictResolutionInput() {
        return this._conflictResolution.internalValue;
    }
    get consolidation() {
        return this._consolidation;
    }
    putConsolidation(value) {
        this._consolidation.internalValue = value;
    }
    resetConsolidation() {
        this._consolidation.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get consolidationInput() {
        return this._consolidation.internalValue;
    }
}
exports.CustomerprofilesDomainMatchingAutoMergingOutputReference = CustomerprofilesDomainMatchingAutoMergingOutputReference;
_c = JSII_RTTI_SYMBOL_1;
CustomerprofilesDomainMatchingAutoMergingOutputReference[_c] = { fqn: "@cdktf/provider-aws.customerprofilesDomain.CustomerprofilesDomainMatchingAutoMergingOutputReference", version: "19.15.0" };
function customerprofilesDomainMatchingExportingConfigS3ExportingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        s3_bucket_name: cdktf.stringToTerraform(struct.s3BucketName),
        s3_key_name: cdktf.stringToTerraform(struct.s3KeyName),
    };
}
exports.customerprofilesDomainMatchingExportingConfigS3ExportingToTerraform = customerprofilesDomainMatchingExportingConfigS3ExportingToTerraform;
function customerprofilesDomainMatchingExportingConfigS3ExportingToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        s3_bucket_name: {
            value: cdktf.stringToHclTerraform(struct.s3BucketName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        s3_key_name: {
            value: cdktf.stringToHclTerraform(struct.s3KeyName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.customerprofilesDomainMatchingExportingConfigS3ExportingToHclTerraform = customerprofilesDomainMatchingExportingConfigS3ExportingToHclTerraform;
class CustomerprofilesDomainMatchingExportingConfigS3ExportingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._s3BucketName !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3BucketName = this._s3BucketName;
        }
        if (this._s3KeyName !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3KeyName = this._s3KeyName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._s3BucketName = undefined;
            this._s3KeyName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._s3BucketName = value.s3BucketName;
            this._s3KeyName = value.s3KeyName;
        }
    }
    get s3BucketName() {
        return this.getStringAttribute('s3_bucket_name');
    }
    set s3BucketName(value) {
        this._s3BucketName = value;
    }
    // Temporarily expose input value. Use with caution.
    get s3BucketNameInput() {
        return this._s3BucketName;
    }
    get s3KeyName() {
        return this.getStringAttribute('s3_key_name');
    }
    set s3KeyName(value) {
        this._s3KeyName = value;
    }
    resetS3KeyName() {
        this._s3KeyName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3KeyNameInput() {
        return this._s3KeyName;
    }
}
exports.CustomerprofilesDomainMatchingExportingConfigS3ExportingOutputReference = CustomerprofilesDomainMatchingExportingConfigS3ExportingOutputReference;
_d = JSII_RTTI_SYMBOL_1;
CustomerprofilesDomainMatchingExportingConfigS3ExportingOutputReference[_d] = { fqn: "@cdktf/provider-aws.customerprofilesDomain.CustomerprofilesDomainMatchingExportingConfigS3ExportingOutputReference", version: "19.15.0" };
function customerprofilesDomainMatchingExportingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        s3_exporting: customerprofilesDomainMatchingExportingConfigS3ExportingToTerraform(struct.s3Exporting),
    };
}
exports.customerprofilesDomainMatchingExportingConfigToTerraform = customerprofilesDomainMatchingExportingConfigToTerraform;
function customerprofilesDomainMatchingExportingConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        s3_exporting: {
            value: customerprofilesDomainMatchingExportingConfigS3ExportingToHclTerraform(struct.s3Exporting),
            isBlock: true,
            type: "list",
            storageClassType: "CustomerprofilesDomainMatchingExportingConfigS3ExportingList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.customerprofilesDomainMatchingExportingConfigToHclTerraform = customerprofilesDomainMatchingExportingConfigToHclTerraform;
class CustomerprofilesDomainMatchingExportingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // s3_exporting - computed: false, optional: true, required: false
        this._s3Exporting = new CustomerprofilesDomainMatchingExportingConfigS3ExportingOutputReference(this, "s3_exporting");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._s3Exporting?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3Exporting = this._s3Exporting?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._s3Exporting.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._s3Exporting.internalValue = value.s3Exporting;
        }
    }
    get s3Exporting() {
        return this._s3Exporting;
    }
    putS3Exporting(value) {
        this._s3Exporting.internalValue = value;
    }
    resetS3Exporting() {
        this._s3Exporting.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3ExportingInput() {
        return this._s3Exporting.internalValue;
    }
}
exports.CustomerprofilesDomainMatchingExportingConfigOutputReference = CustomerprofilesDomainMatchingExportingConfigOutputReference;
_e = JSII_RTTI_SYMBOL_1;
CustomerprofilesDomainMatchingExportingConfigOutputReference[_e] = { fqn: "@cdktf/provider-aws.customerprofilesDomain.CustomerprofilesDomainMatchingExportingConfigOutputReference", version: "19.15.0" };
function customerprofilesDomainMatchingJobScheduleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        day_of_the_week: cdktf.stringToTerraform(struct.dayOfTheWeek),
        time: cdktf.stringToTerraform(struct.time),
    };
}
exports.customerprofilesDomainMatchingJobScheduleToTerraform = customerprofilesDomainMatchingJobScheduleToTerraform;
function customerprofilesDomainMatchingJobScheduleToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        day_of_the_week: {
            value: cdktf.stringToHclTerraform(struct.dayOfTheWeek),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        time: {
            value: cdktf.stringToHclTerraform(struct.time),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.customerprofilesDomainMatchingJobScheduleToHclTerraform = customerprofilesDomainMatchingJobScheduleToHclTerraform;
class CustomerprofilesDomainMatchingJobScheduleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dayOfTheWeek !== undefined) {
            hasAnyValues = true;
            internalValueResult.dayOfTheWeek = this._dayOfTheWeek;
        }
        if (this._time !== undefined) {
            hasAnyValues = true;
            internalValueResult.time = this._time;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dayOfTheWeek = undefined;
            this._time = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dayOfTheWeek = value.dayOfTheWeek;
            this._time = value.time;
        }
    }
    get dayOfTheWeek() {
        return this.getStringAttribute('day_of_the_week');
    }
    set dayOfTheWeek(value) {
        this._dayOfTheWeek = value;
    }
    // Temporarily expose input value. Use with caution.
    get dayOfTheWeekInput() {
        return this._dayOfTheWeek;
    }
    get time() {
        return this.getStringAttribute('time');
    }
    set time(value) {
        this._time = value;
    }
    // Temporarily expose input value. Use with caution.
    get timeInput() {
        return this._time;
    }
}
exports.CustomerprofilesDomainMatchingJobScheduleOutputReference = CustomerprofilesDomainMatchingJobScheduleOutputReference;
_f = JSII_RTTI_SYMBOL_1;
CustomerprofilesDomainMatchingJobScheduleOutputReference[_f] = { fqn: "@cdktf/provider-aws.customerprofilesDomain.CustomerprofilesDomainMatchingJobScheduleOutputReference", version: "19.15.0" };
function customerprofilesDomainMatchingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        auto_merging: customerprofilesDomainMatchingAutoMergingToTerraform(struct.autoMerging),
        exporting_config: customerprofilesDomainMatchingExportingConfigToTerraform(struct.exportingConfig),
        job_schedule: customerprofilesDomainMatchingJobScheduleToTerraform(struct.jobSchedule),
    };
}
exports.customerprofilesDomainMatchingToTerraform = customerprofilesDomainMatchingToTerraform;
function customerprofilesDomainMatchingToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        auto_merging: {
            value: customerprofilesDomainMatchingAutoMergingToHclTerraform(struct.autoMerging),
            isBlock: true,
            type: "list",
            storageClassType: "CustomerprofilesDomainMatchingAutoMergingList",
        },
        exporting_config: {
            value: customerprofilesDomainMatchingExportingConfigToHclTerraform(struct.exportingConfig),
            isBlock: true,
            type: "list",
            storageClassType: "CustomerprofilesDomainMatchingExportingConfigList",
        },
        job_schedule: {
            value: customerprofilesDomainMatchingJobScheduleToHclTerraform(struct.jobSchedule),
            isBlock: true,
            type: "list",
            storageClassType: "CustomerprofilesDomainMatchingJobScheduleList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.customerprofilesDomainMatchingToHclTerraform = customerprofilesDomainMatchingToHclTerraform;
class CustomerprofilesDomainMatchingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // auto_merging - computed: false, optional: true, required: false
        this._autoMerging = new CustomerprofilesDomainMatchingAutoMergingOutputReference(this, "auto_merging");
        // exporting_config - computed: false, optional: true, required: false
        this._exportingConfig = new CustomerprofilesDomainMatchingExportingConfigOutputReference(this, "exporting_config");
        // job_schedule - computed: false, optional: true, required: false
        this._jobSchedule = new CustomerprofilesDomainMatchingJobScheduleOutputReference(this, "job_schedule");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._autoMerging?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoMerging = this._autoMerging?.internalValue;
        }
        if (this._exportingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.exportingConfig = this._exportingConfig?.internalValue;
        }
        if (this._jobSchedule?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.jobSchedule = this._jobSchedule?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._autoMerging.internalValue = undefined;
            this._exportingConfig.internalValue = undefined;
            this._jobSchedule.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._autoMerging.internalValue = value.autoMerging;
            this._exportingConfig.internalValue = value.exportingConfig;
            this._jobSchedule.internalValue = value.jobSchedule;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get autoMerging() {
        return this._autoMerging;
    }
    putAutoMerging(value) {
        this._autoMerging.internalValue = value;
    }
    resetAutoMerging() {
        this._autoMerging.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoMergingInput() {
        return this._autoMerging.internalValue;
    }
    get exportingConfig() {
        return this._exportingConfig;
    }
    putExportingConfig(value) {
        this._exportingConfig.internalValue = value;
    }
    resetExportingConfig() {
        this._exportingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exportingConfigInput() {
        return this._exportingConfig.internalValue;
    }
    get jobSchedule() {
        return this._jobSchedule;
    }
    putJobSchedule(value) {
        this._jobSchedule.internalValue = value;
    }
    resetJobSchedule() {
        this._jobSchedule.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jobScheduleInput() {
        return this._jobSchedule.internalValue;
    }
}
exports.CustomerprofilesDomainMatchingOutputReference = CustomerprofilesDomainMatchingOutputReference;
_g = JSII_RTTI_SYMBOL_1;
CustomerprofilesDomainMatchingOutputReference[_g] = { fqn: "@cdktf/provider-aws.customerprofilesDomain.CustomerprofilesDomainMatchingOutputReference", version: "19.15.0" };
function customerprofilesDomainRuleBasedMatchingAttributeTypesSelectorToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        address: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.address),
        attribute_matching_model: cdktf.stringToTerraform(struct.attributeMatchingModel),
        email_address: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.emailAddress),
        phone_number: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.phoneNumber),
    };
}
exports.customerprofilesDomainRuleBasedMatchingAttributeTypesSelectorToTerraform = customerprofilesDomainRuleBasedMatchingAttributeTypesSelectorToTerraform;
function customerprofilesDomainRuleBasedMatchingAttributeTypesSelectorToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        address: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.address),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        attribute_matching_model: {
            value: cdktf.stringToHclTerraform(struct.attributeMatchingModel),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        email_address: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.emailAddress),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        phone_number: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.phoneNumber),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.customerprofilesDomainRuleBasedMatchingAttributeTypesSelectorToHclTerraform = customerprofilesDomainRuleBasedMatchingAttributeTypesSelectorToHclTerraform;
class CustomerprofilesDomainRuleBasedMatchingAttributeTypesSelectorOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._address !== undefined) {
            hasAnyValues = true;
            internalValueResult.address = this._address;
        }
        if (this._attributeMatchingModel !== undefined) {
            hasAnyValues = true;
            internalValueResult.attributeMatchingModel = this._attributeMatchingModel;
        }
        if (this._emailAddress !== undefined) {
            hasAnyValues = true;
            internalValueResult.emailAddress = this._emailAddress;
        }
        if (this._phoneNumber !== undefined) {
            hasAnyValues = true;
            internalValueResult.phoneNumber = this._phoneNumber;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._address = undefined;
            this._attributeMatchingModel = undefined;
            this._emailAddress = undefined;
            this._phoneNumber = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._address = value.address;
            this._attributeMatchingModel = value.attributeMatchingModel;
            this._emailAddress = value.emailAddress;
            this._phoneNumber = value.phoneNumber;
        }
    }
    get address() {
        return this.getListAttribute('address');
    }
    set address(value) {
        this._address = value;
    }
    resetAddress() {
        this._address = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get addressInput() {
        return this._address;
    }
    get attributeMatchingModel() {
        return this.getStringAttribute('attribute_matching_model');
    }
    set attributeMatchingModel(value) {
        this._attributeMatchingModel = value;
    }
    // Temporarily expose input value. Use with caution.
    get attributeMatchingModelInput() {
        return this._attributeMatchingModel;
    }
    get emailAddress() {
        return this.getListAttribute('email_address');
    }
    set emailAddress(value) {
        this._emailAddress = value;
    }
    resetEmailAddress() {
        this._emailAddress = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get emailAddressInput() {
        return this._emailAddress;
    }
    get phoneNumber() {
        return this.getListAttribute('phone_number');
    }
    set phoneNumber(value) {
        this._phoneNumber = value;
    }
    resetPhoneNumber() {
        this._phoneNumber = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get phoneNumberInput() {
        return this._phoneNumber;
    }
}
exports.CustomerprofilesDomainRuleBasedMatchingAttributeTypesSelectorOutputReference = CustomerprofilesDomainRuleBasedMatchingAttributeTypesSelectorOutputReference;
_h = JSII_RTTI_SYMBOL_1;
CustomerprofilesDomainRuleBasedMatchingAttributeTypesSelectorOutputReference[_h] = { fqn: "@cdktf/provider-aws.customerprofilesDomain.CustomerprofilesDomainRuleBasedMatchingAttributeTypesSelectorOutputReference", version: "19.15.0" };
function customerprofilesDomainRuleBasedMatchingConflictResolutionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        conflict_resolving_model: cdktf.stringToTerraform(struct.conflictResolvingModel),
        source_name: cdktf.stringToTerraform(struct.sourceName),
    };
}
exports.customerprofilesDomainRuleBasedMatchingConflictResolutionToTerraform = customerprofilesDomainRuleBasedMatchingConflictResolutionToTerraform;
function customerprofilesDomainRuleBasedMatchingConflictResolutionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        conflict_resolving_model: {
            value: cdktf.stringToHclTerraform(struct.conflictResolvingModel),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        source_name: {
            value: cdktf.stringToHclTerraform(struct.sourceName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.customerprofilesDomainRuleBasedMatchingConflictResolutionToHclTerraform = customerprofilesDomainRuleBasedMatchingConflictResolutionToHclTerraform;
class CustomerprofilesDomainRuleBasedMatchingConflictResolutionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._conflictResolvingModel !== undefined) {
            hasAnyValues = true;
            internalValueResult.conflictResolvingModel = this._conflictResolvingModel;
        }
        if (this._sourceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceName = this._sourceName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._conflictResolvingModel = undefined;
            this._sourceName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._conflictResolvingModel = value.conflictResolvingModel;
            this._sourceName = value.sourceName;
        }
    }
    get conflictResolvingModel() {
        return this.getStringAttribute('conflict_resolving_model');
    }
    set conflictResolvingModel(value) {
        this._conflictResolvingModel = value;
    }
    // Temporarily expose input value. Use with caution.
    get conflictResolvingModelInput() {
        return this._conflictResolvingModel;
    }
    get sourceName() {
        return this.getStringAttribute('source_name');
    }
    set sourceName(value) {
        this._sourceName = value;
    }
    resetSourceName() {
        this._sourceName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourceNameInput() {
        return this._sourceName;
    }
}
exports.CustomerprofilesDomainRuleBasedMatchingConflictResolutionOutputReference = CustomerprofilesDomainRuleBasedMatchingConflictResolutionOutputReference;
_j = JSII_RTTI_SYMBOL_1;
CustomerprofilesDomainRuleBasedMatchingConflictResolutionOutputReference[_j] = { fqn: "@cdktf/provider-aws.customerprofilesDomain.CustomerprofilesDomainRuleBasedMatchingConflictResolutionOutputReference", version: "19.15.0" };
function customerprofilesDomainRuleBasedMatchingExportingConfigS3ExportingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        s3_bucket_name: cdktf.stringToTerraform(struct.s3BucketName),
        s3_key_name: cdktf.stringToTerraform(struct.s3KeyName),
    };
}
exports.customerprofilesDomainRuleBasedMatchingExportingConfigS3ExportingToTerraform = customerprofilesDomainRuleBasedMatchingExportingConfigS3ExportingToTerraform;
function customerprofilesDomainRuleBasedMatchingExportingConfigS3ExportingToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        s3_bucket_name: {
            value: cdktf.stringToHclTerraform(struct.s3BucketName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        s3_key_name: {
            value: cdktf.stringToHclTerraform(struct.s3KeyName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.customerprofilesDomainRuleBasedMatchingExportingConfigS3ExportingToHclTerraform = customerprofilesDomainRuleBasedMatchingExportingConfigS3ExportingToHclTerraform;
class CustomerprofilesDomainRuleBasedMatchingExportingConfigS3ExportingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._s3BucketName !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3BucketName = this._s3BucketName;
        }
        if (this._s3KeyName !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3KeyName = this._s3KeyName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._s3BucketName = undefined;
            this._s3KeyName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._s3BucketName = value.s3BucketName;
            this._s3KeyName = value.s3KeyName;
        }
    }
    get s3BucketName() {
        return this.getStringAttribute('s3_bucket_name');
    }
    set s3BucketName(value) {
        this._s3BucketName = value;
    }
    // Temporarily expose input value. Use with caution.
    get s3BucketNameInput() {
        return this._s3BucketName;
    }
    get s3KeyName() {
        return this.getStringAttribute('s3_key_name');
    }
    set s3KeyName(value) {
        this._s3KeyName = value;
    }
    resetS3KeyName() {
        this._s3KeyName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3KeyNameInput() {
        return this._s3KeyName;
    }
}
exports.CustomerprofilesDomainRuleBasedMatchingExportingConfigS3ExportingOutputReference = CustomerprofilesDomainRuleBasedMatchingExportingConfigS3ExportingOutputReference;
_k = JSII_RTTI_SYMBOL_1;
CustomerprofilesDomainRuleBasedMatchingExportingConfigS3ExportingOutputReference[_k] = { fqn: "@cdktf/provider-aws.customerprofilesDomain.CustomerprofilesDomainRuleBasedMatchingExportingConfigS3ExportingOutputReference", version: "19.15.0" };
function customerprofilesDomainRuleBasedMatchingExportingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        s3_exporting: customerprofilesDomainRuleBasedMatchingExportingConfigS3ExportingToTerraform(struct.s3Exporting),
    };
}
exports.customerprofilesDomainRuleBasedMatchingExportingConfigToTerraform = customerprofilesDomainRuleBasedMatchingExportingConfigToTerraform;
function customerprofilesDomainRuleBasedMatchingExportingConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        s3_exporting: {
            value: customerprofilesDomainRuleBasedMatchingExportingConfigS3ExportingToHclTerraform(struct.s3Exporting),
            isBlock: true,
            type: "list",
            storageClassType: "CustomerprofilesDomainRuleBasedMatchingExportingConfigS3ExportingList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.customerprofilesDomainRuleBasedMatchingExportingConfigToHclTerraform = customerprofilesDomainRuleBasedMatchingExportingConfigToHclTerraform;
class CustomerprofilesDomainRuleBasedMatchingExportingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // s3_exporting - computed: false, optional: true, required: false
        this._s3Exporting = new CustomerprofilesDomainRuleBasedMatchingExportingConfigS3ExportingOutputReference(this, "s3_exporting");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._s3Exporting?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3Exporting = this._s3Exporting?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._s3Exporting.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._s3Exporting.internalValue = value.s3Exporting;
        }
    }
    get s3Exporting() {
        return this._s3Exporting;
    }
    putS3Exporting(value) {
        this._s3Exporting.internalValue = value;
    }
    resetS3Exporting() {
        this._s3Exporting.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3ExportingInput() {
        return this._s3Exporting.internalValue;
    }
}
exports.CustomerprofilesDomainRuleBasedMatchingExportingConfigOutputReference = CustomerprofilesDomainRuleBasedMatchingExportingConfigOutputReference;
_l = JSII_RTTI_SYMBOL_1;
CustomerprofilesDomainRuleBasedMatchingExportingConfigOutputReference[_l] = { fqn: "@cdktf/provider-aws.customerprofilesDomain.CustomerprofilesDomainRuleBasedMatchingExportingConfigOutputReference", version: "19.15.0" };
function customerprofilesDomainRuleBasedMatchingMatchingRulesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        rule: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.rule),
    };
}
exports.customerprofilesDomainRuleBasedMatchingMatchingRulesToTerraform = customerprofilesDomainRuleBasedMatchingMatchingRulesToTerraform;
function customerprofilesDomainRuleBasedMatchingMatchingRulesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        rule: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.rule),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.customerprofilesDomainRuleBasedMatchingMatchingRulesToHclTerraform = customerprofilesDomainRuleBasedMatchingMatchingRulesToHclTerraform;
class CustomerprofilesDomainRuleBasedMatchingMatchingRulesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._rule !== undefined) {
            hasAnyValues = true;
            internalValueResult.rule = this._rule;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._rule = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._rule = value.rule;
        }
    }
    get rule() {
        return this.getListAttribute('rule');
    }
    set rule(value) {
        this._rule = value;
    }
    // Temporarily expose input value. Use with caution.
    get ruleInput() {
        return this._rule;
    }
}
exports.CustomerprofilesDomainRuleBasedMatchingMatchingRulesOutputReference = CustomerprofilesDomainRuleBasedMatchingMatchingRulesOutputReference;
_m = JSII_RTTI_SYMBOL_1;
CustomerprofilesDomainRuleBasedMatchingMatchingRulesOutputReference[_m] = { fqn: "@cdktf/provider-aws.customerprofilesDomain.CustomerprofilesDomainRuleBasedMatchingMatchingRulesOutputReference", version: "19.15.0" };
class CustomerprofilesDomainRuleBasedMatchingMatchingRulesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new CustomerprofilesDomainRuleBasedMatchingMatchingRulesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.CustomerprofilesDomainRuleBasedMatchingMatchingRulesList = CustomerprofilesDomainRuleBasedMatchingMatchingRulesList;
_o = JSII_RTTI_SYMBOL_1;
CustomerprofilesDomainRuleBasedMatchingMatchingRulesList[_o] = { fqn: "@cdktf/provider-aws.customerprofilesDomain.CustomerprofilesDomainRuleBasedMatchingMatchingRulesList", version: "19.15.0" };
function customerprofilesDomainRuleBasedMatchingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        max_allowed_rule_level_for_matching: cdktf.numberToTerraform(struct.maxAllowedRuleLevelForMatching),
        max_allowed_rule_level_for_merging: cdktf.numberToTerraform(struct.maxAllowedRuleLevelForMerging),
        status: cdktf.stringToTerraform(struct.status),
        attribute_types_selector: customerprofilesDomainRuleBasedMatchingAttributeTypesSelectorToTerraform(struct.attributeTypesSelector),
        conflict_resolution: customerprofilesDomainRuleBasedMatchingConflictResolutionToTerraform(struct.conflictResolution),
        exporting_config: customerprofilesDomainRuleBasedMatchingExportingConfigToTerraform(struct.exportingConfig),
        matching_rules: cdktf.listMapper(customerprofilesDomainRuleBasedMatchingMatchingRulesToTerraform, true)(struct.matchingRules),
    };
}
exports.customerprofilesDomainRuleBasedMatchingToTerraform = customerprofilesDomainRuleBasedMatchingToTerraform;
function customerprofilesDomainRuleBasedMatchingToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        max_allowed_rule_level_for_matching: {
            value: cdktf.numberToHclTerraform(struct.maxAllowedRuleLevelForMatching),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        max_allowed_rule_level_for_merging: {
            value: cdktf.numberToHclTerraform(struct.maxAllowedRuleLevelForMerging),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        status: {
            value: cdktf.stringToHclTerraform(struct.status),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        attribute_types_selector: {
            value: customerprofilesDomainRuleBasedMatchingAttributeTypesSelectorToHclTerraform(struct.attributeTypesSelector),
            isBlock: true,
            type: "list",
            storageClassType: "CustomerprofilesDomainRuleBasedMatchingAttributeTypesSelectorList",
        },
        conflict_resolution: {
            value: customerprofilesDomainRuleBasedMatchingConflictResolutionToHclTerraform(struct.conflictResolution),
            isBlock: true,
            type: "list",
            storageClassType: "CustomerprofilesDomainRuleBasedMatchingConflictResolutionList",
        },
        exporting_config: {
            value: customerprofilesDomainRuleBasedMatchingExportingConfigToHclTerraform(struct.exportingConfig),
            isBlock: true,
            type: "list",
            storageClassType: "CustomerprofilesDomainRuleBasedMatchingExportingConfigList",
        },
        matching_rules: {
            value: cdktf.listMapperHcl(customerprofilesDomainRuleBasedMatchingMatchingRulesToHclTerraform, true)(struct.matchingRules),
            isBlock: true,
            type: "set",
            storageClassType: "CustomerprofilesDomainRuleBasedMatchingMatchingRulesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.customerprofilesDomainRuleBasedMatchingToHclTerraform = customerprofilesDomainRuleBasedMatchingToHclTerraform;
class CustomerprofilesDomainRuleBasedMatchingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // attribute_types_selector - computed: false, optional: true, required: false
        this._attributeTypesSelector = new CustomerprofilesDomainRuleBasedMatchingAttributeTypesSelectorOutputReference(this, "attribute_types_selector");
        // conflict_resolution - computed: false, optional: true, required: false
        this._conflictResolution = new CustomerprofilesDomainRuleBasedMatchingConflictResolutionOutputReference(this, "conflict_resolution");
        // exporting_config - computed: false, optional: true, required: false
        this._exportingConfig = new CustomerprofilesDomainRuleBasedMatchingExportingConfigOutputReference(this, "exporting_config");
        // matching_rules - computed: false, optional: true, required: false
        this._matchingRules = new CustomerprofilesDomainRuleBasedMatchingMatchingRulesList(this, "matching_rules", true);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._maxAllowedRuleLevelForMatching !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxAllowedRuleLevelForMatching = this._maxAllowedRuleLevelForMatching;
        }
        if (this._maxAllowedRuleLevelForMerging !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxAllowedRuleLevelForMerging = this._maxAllowedRuleLevelForMerging;
        }
        if (this._status !== undefined) {
            hasAnyValues = true;
            internalValueResult.status = this._status;
        }
        if (this._attributeTypesSelector?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.attributeTypesSelector = this._attributeTypesSelector?.internalValue;
        }
        if (this._conflictResolution?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.conflictResolution = this._conflictResolution?.internalValue;
        }
        if (this._exportingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.exportingConfig = this._exportingConfig?.internalValue;
        }
        if (this._matchingRules?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.matchingRules = this._matchingRules?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._maxAllowedRuleLevelForMatching = undefined;
            this._maxAllowedRuleLevelForMerging = undefined;
            this._status = undefined;
            this._attributeTypesSelector.internalValue = undefined;
            this._conflictResolution.internalValue = undefined;
            this._exportingConfig.internalValue = undefined;
            this._matchingRules.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._maxAllowedRuleLevelForMatching = value.maxAllowedRuleLevelForMatching;
            this._maxAllowedRuleLevelForMerging = value.maxAllowedRuleLevelForMerging;
            this._status = value.status;
            this._attributeTypesSelector.internalValue = value.attributeTypesSelector;
            this._conflictResolution.internalValue = value.conflictResolution;
            this._exportingConfig.internalValue = value.exportingConfig;
            this._matchingRules.internalValue = value.matchingRules;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get maxAllowedRuleLevelForMatching() {
        return this.getNumberAttribute('max_allowed_rule_level_for_matching');
    }
    set maxAllowedRuleLevelForMatching(value) {
        this._maxAllowedRuleLevelForMatching = value;
    }
    resetMaxAllowedRuleLevelForMatching() {
        this._maxAllowedRuleLevelForMatching = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxAllowedRuleLevelForMatchingInput() {
        return this._maxAllowedRuleLevelForMatching;
    }
    get maxAllowedRuleLevelForMerging() {
        return this.getNumberAttribute('max_allowed_rule_level_for_merging');
    }
    set maxAllowedRuleLevelForMerging(value) {
        this._maxAllowedRuleLevelForMerging = value;
    }
    resetMaxAllowedRuleLevelForMerging() {
        this._maxAllowedRuleLevelForMerging = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxAllowedRuleLevelForMergingInput() {
        return this._maxAllowedRuleLevelForMerging;
    }
    get status() {
        return this.getStringAttribute('status');
    }
    set status(value) {
        this._status = value;
    }
    resetStatus() {
        this._status = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get statusInput() {
        return this._status;
    }
    get attributeTypesSelector() {
        return this._attributeTypesSelector;
    }
    putAttributeTypesSelector(value) {
        this._attributeTypesSelector.internalValue = value;
    }
    resetAttributeTypesSelector() {
        this._attributeTypesSelector.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get attributeTypesSelectorInput() {
        return this._attributeTypesSelector.internalValue;
    }
    get conflictResolution() {
        return this._conflictResolution;
    }
    putConflictResolution(value) {
        this._conflictResolution.internalValue = value;
    }
    resetConflictResolution() {
        this._conflictResolution.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conflictResolutionInput() {
        return this._conflictResolution.internalValue;
    }
    get exportingConfig() {
        return this._exportingConfig;
    }
    putExportingConfig(value) {
        this._exportingConfig.internalValue = value;
    }
    resetExportingConfig() {
        this._exportingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exportingConfigInput() {
        return this._exportingConfig.internalValue;
    }
    get matchingRules() {
        return this._matchingRules;
    }
    putMatchingRules(value) {
        this._matchingRules.internalValue = value;
    }
    resetMatchingRules() {
        this._matchingRules.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get matchingRulesInput() {
        return this._matchingRules.internalValue;
    }
}
exports.CustomerprofilesDomainRuleBasedMatchingOutputReference = CustomerprofilesDomainRuleBasedMatchingOutputReference;
_p = JSII_RTTI_SYMBOL_1;
CustomerprofilesDomainRuleBasedMatchingOutputReference[_p] = { fqn: "@cdktf/provider-aws.customerprofilesDomain.CustomerprofilesDomainRuleBasedMatchingOutputReference", version: "19.15.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/customerprofiles_domain aws_customerprofiles_domain}
*/
class CustomerprofilesDomain extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a CustomerprofilesDomain resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the CustomerprofilesDomain to import
    * @param importFromId The id of the existing CustomerprofilesDomain that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/customerprofiles_domain#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the CustomerprofilesDomain to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_customerprofiles_domain", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/customerprofiles_domain aws_customerprofiles_domain} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options CustomerprofilesDomainConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_customerprofiles_domain',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // matching - computed: false, optional: true, required: false
        this._matching = new CustomerprofilesDomainMatchingOutputReference(this, "matching");
        // rule_based_matching - computed: false, optional: true, required: false
        this._ruleBasedMatching = new CustomerprofilesDomainRuleBasedMatchingOutputReference(this, "rule_based_matching");
        this._deadLetterQueueUrl = config.deadLetterQueueUrl;
        this._defaultEncryptionKey = config.defaultEncryptionKey;
        this._defaultExpirationDays = config.defaultExpirationDays;
        this._domainName = config.domainName;
        this._id = config.id;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._matching.internalValue = config.matching;
        this._ruleBasedMatching.internalValue = config.ruleBasedMatching;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get deadLetterQueueUrl() {
        return this.getStringAttribute('dead_letter_queue_url');
    }
    set deadLetterQueueUrl(value) {
        this._deadLetterQueueUrl = value;
    }
    resetDeadLetterQueueUrl() {
        this._deadLetterQueueUrl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deadLetterQueueUrlInput() {
        return this._deadLetterQueueUrl;
    }
    get defaultEncryptionKey() {
        return this.getStringAttribute('default_encryption_key');
    }
    set defaultEncryptionKey(value) {
        this._defaultEncryptionKey = value;
    }
    resetDefaultEncryptionKey() {
        this._defaultEncryptionKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultEncryptionKeyInput() {
        return this._defaultEncryptionKey;
    }
    get defaultExpirationDays() {
        return this.getNumberAttribute('default_expiration_days');
    }
    set defaultExpirationDays(value) {
        this._defaultExpirationDays = value;
    }
    // Temporarily expose input value. Use with caution.
    get defaultExpirationDaysInput() {
        return this._defaultExpirationDays;
    }
    get domainName() {
        return this.getStringAttribute('domain_name');
    }
    set domainName(value) {
        this._domainName = value;
    }
    // Temporarily expose input value. Use with caution.
    get domainNameInput() {
        return this._domainName;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get matching() {
        return this._matching;
    }
    putMatching(value) {
        this._matching.internalValue = value;
    }
    resetMatching() {
        this._matching.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get matchingInput() {
        return this._matching.internalValue;
    }
    get ruleBasedMatching() {
        return this._ruleBasedMatching;
    }
    putRuleBasedMatching(value) {
        this._ruleBasedMatching.internalValue = value;
    }
    resetRuleBasedMatching() {
        this._ruleBasedMatching.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ruleBasedMatchingInput() {
        return this._ruleBasedMatching.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            dead_letter_queue_url: cdktf.stringToTerraform(this._deadLetterQueueUrl),
            default_encryption_key: cdktf.stringToTerraform(this._defaultEncryptionKey),
            default_expiration_days: cdktf.numberToTerraform(this._defaultExpirationDays),
            domain_name: cdktf.stringToTerraform(this._domainName),
            id: cdktf.stringToTerraform(this._id),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            matching: customerprofilesDomainMatchingToTerraform(this._matching.internalValue),
            rule_based_matching: customerprofilesDomainRuleBasedMatchingToTerraform(this._ruleBasedMatching.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            dead_letter_queue_url: {
                value: cdktf.stringToHclTerraform(this._deadLetterQueueUrl),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            default_encryption_key: {
                value: cdktf.stringToHclTerraform(this._defaultEncryptionKey),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            default_expiration_days: {
                value: cdktf.numberToHclTerraform(this._defaultExpirationDays),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            domain_name: {
                value: cdktf.stringToHclTerraform(this._domainName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            tags: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tags),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            tags_all: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tagsAll),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            matching: {
                value: customerprofilesDomainMatchingToHclTerraform(this._matching.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "CustomerprofilesDomainMatchingList",
            },
            rule_based_matching: {
                value: customerprofilesDomainRuleBasedMatchingToHclTerraform(this._ruleBasedMatching.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "CustomerprofilesDomainRuleBasedMatchingList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.CustomerprofilesDomain = CustomerprofilesDomain;
_q = JSII_RTTI_SYMBOL_1;
CustomerprofilesDomain[_q] = { fqn: "@cdktf/provider-aws.customerprofilesDomain.CustomerprofilesDomain", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
CustomerprofilesDomain.tfResourceType = "aws_customerprofiles_domain";
//# sourceMappingURL=data:application/json;base64,