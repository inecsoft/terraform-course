"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DbInstance = exports.DbInstanceTimeoutsOutputReference = exports.dbInstanceTimeoutsToHclTerraform = exports.dbInstanceTimeoutsToTerraform = exports.DbInstanceS3ImportOutputReference = exports.dbInstanceS3ImportToHclTerraform = exports.dbInstanceS3ImportToTerraform = exports.DbInstanceRestoreToPointInTimeOutputReference = exports.dbInstanceRestoreToPointInTimeToHclTerraform = exports.dbInstanceRestoreToPointInTimeToTerraform = exports.DbInstanceBlueGreenUpdateOutputReference = exports.dbInstanceBlueGreenUpdateToHclTerraform = exports.dbInstanceBlueGreenUpdateToTerraform = exports.DbInstanceMasterUserSecretList = exports.DbInstanceMasterUserSecretOutputReference = exports.dbInstanceMasterUserSecretToHclTerraform = exports.dbInstanceMasterUserSecretToTerraform = exports.DbInstanceListenerEndpointList = exports.DbInstanceListenerEndpointOutputReference = exports.dbInstanceListenerEndpointToHclTerraform = exports.dbInstanceListenerEndpointToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function dbInstanceListenerEndpointToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dbInstanceListenerEndpointToTerraform = dbInstanceListenerEndpointToTerraform;
function dbInstanceListenerEndpointToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.dbInstanceListenerEndpointToHclTerraform = dbInstanceListenerEndpointToHclTerraform;
class DbInstanceListenerEndpointOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // address - computed: true, optional: false, required: false
    get address() {
        return this.getStringAttribute('address');
    }
    // hosted_zone_id - computed: true, optional: false, required: false
    get hostedZoneId() {
        return this.getStringAttribute('hosted_zone_id');
    }
    // port - computed: true, optional: false, required: false
    get port() {
        return this.getNumberAttribute('port');
    }
}
exports.DbInstanceListenerEndpointOutputReference = DbInstanceListenerEndpointOutputReference;
_a = JSII_RTTI_SYMBOL_1;
DbInstanceListenerEndpointOutputReference[_a] = { fqn: "@cdktf/provider-aws.dbInstance.DbInstanceListenerEndpointOutputReference", version: "19.15.0" };
class DbInstanceListenerEndpointList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DbInstanceListenerEndpointOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DbInstanceListenerEndpointList = DbInstanceListenerEndpointList;
_b = JSII_RTTI_SYMBOL_1;
DbInstanceListenerEndpointList[_b] = { fqn: "@cdktf/provider-aws.dbInstance.DbInstanceListenerEndpointList", version: "19.15.0" };
function dbInstanceMasterUserSecretToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dbInstanceMasterUserSecretToTerraform = dbInstanceMasterUserSecretToTerraform;
function dbInstanceMasterUserSecretToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.dbInstanceMasterUserSecretToHclTerraform = dbInstanceMasterUserSecretToHclTerraform;
class DbInstanceMasterUserSecretOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // kms_key_id - computed: true, optional: false, required: false
    get kmsKeyId() {
        return this.getStringAttribute('kms_key_id');
    }
    // secret_arn - computed: true, optional: false, required: false
    get secretArn() {
        return this.getStringAttribute('secret_arn');
    }
    // secret_status - computed: true, optional: false, required: false
    get secretStatus() {
        return this.getStringAttribute('secret_status');
    }
}
exports.DbInstanceMasterUserSecretOutputReference = DbInstanceMasterUserSecretOutputReference;
_c = JSII_RTTI_SYMBOL_1;
DbInstanceMasterUserSecretOutputReference[_c] = { fqn: "@cdktf/provider-aws.dbInstance.DbInstanceMasterUserSecretOutputReference", version: "19.15.0" };
class DbInstanceMasterUserSecretList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DbInstanceMasterUserSecretOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DbInstanceMasterUserSecretList = DbInstanceMasterUserSecretList;
_d = JSII_RTTI_SYMBOL_1;
DbInstanceMasterUserSecretList[_d] = { fqn: "@cdktf/provider-aws.dbInstance.DbInstanceMasterUserSecretList", version: "19.15.0" };
function dbInstanceBlueGreenUpdateToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.dbInstanceBlueGreenUpdateToTerraform = dbInstanceBlueGreenUpdateToTerraform;
function dbInstanceBlueGreenUpdateToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dbInstanceBlueGreenUpdateToHclTerraform = dbInstanceBlueGreenUpdateToHclTerraform;
class DbInstanceBlueGreenUpdateOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.DbInstanceBlueGreenUpdateOutputReference = DbInstanceBlueGreenUpdateOutputReference;
_e = JSII_RTTI_SYMBOL_1;
DbInstanceBlueGreenUpdateOutputReference[_e] = { fqn: "@cdktf/provider-aws.dbInstance.DbInstanceBlueGreenUpdateOutputReference", version: "19.15.0" };
function dbInstanceRestoreToPointInTimeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        restore_time: cdktf.stringToTerraform(struct.restoreTime),
        source_db_instance_automated_backups_arn: cdktf.stringToTerraform(struct.sourceDbInstanceAutomatedBackupsArn),
        source_db_instance_identifier: cdktf.stringToTerraform(struct.sourceDbInstanceIdentifier),
        source_dbi_resource_id: cdktf.stringToTerraform(struct.sourceDbiResourceId),
        use_latest_restorable_time: cdktf.booleanToTerraform(struct.useLatestRestorableTime),
    };
}
exports.dbInstanceRestoreToPointInTimeToTerraform = dbInstanceRestoreToPointInTimeToTerraform;
function dbInstanceRestoreToPointInTimeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        restore_time: {
            value: cdktf.stringToHclTerraform(struct.restoreTime),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        source_db_instance_automated_backups_arn: {
            value: cdktf.stringToHclTerraform(struct.sourceDbInstanceAutomatedBackupsArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        source_db_instance_identifier: {
            value: cdktf.stringToHclTerraform(struct.sourceDbInstanceIdentifier),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        source_dbi_resource_id: {
            value: cdktf.stringToHclTerraform(struct.sourceDbiResourceId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        use_latest_restorable_time: {
            value: cdktf.booleanToHclTerraform(struct.useLatestRestorableTime),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dbInstanceRestoreToPointInTimeToHclTerraform = dbInstanceRestoreToPointInTimeToHclTerraform;
class DbInstanceRestoreToPointInTimeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._restoreTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.restoreTime = this._restoreTime;
        }
        if (this._sourceDbInstanceAutomatedBackupsArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceDbInstanceAutomatedBackupsArn = this._sourceDbInstanceAutomatedBackupsArn;
        }
        if (this._sourceDbInstanceIdentifier !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceDbInstanceIdentifier = this._sourceDbInstanceIdentifier;
        }
        if (this._sourceDbiResourceId !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceDbiResourceId = this._sourceDbiResourceId;
        }
        if (this._useLatestRestorableTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.useLatestRestorableTime = this._useLatestRestorableTime;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._restoreTime = undefined;
            this._sourceDbInstanceAutomatedBackupsArn = undefined;
            this._sourceDbInstanceIdentifier = undefined;
            this._sourceDbiResourceId = undefined;
            this._useLatestRestorableTime = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._restoreTime = value.restoreTime;
            this._sourceDbInstanceAutomatedBackupsArn = value.sourceDbInstanceAutomatedBackupsArn;
            this._sourceDbInstanceIdentifier = value.sourceDbInstanceIdentifier;
            this._sourceDbiResourceId = value.sourceDbiResourceId;
            this._useLatestRestorableTime = value.useLatestRestorableTime;
        }
    }
    get restoreTime() {
        return this.getStringAttribute('restore_time');
    }
    set restoreTime(value) {
        this._restoreTime = value;
    }
    resetRestoreTime() {
        this._restoreTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get restoreTimeInput() {
        return this._restoreTime;
    }
    get sourceDbInstanceAutomatedBackupsArn() {
        return this.getStringAttribute('source_db_instance_automated_backups_arn');
    }
    set sourceDbInstanceAutomatedBackupsArn(value) {
        this._sourceDbInstanceAutomatedBackupsArn = value;
    }
    resetSourceDbInstanceAutomatedBackupsArn() {
        this._sourceDbInstanceAutomatedBackupsArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourceDbInstanceAutomatedBackupsArnInput() {
        return this._sourceDbInstanceAutomatedBackupsArn;
    }
    get sourceDbInstanceIdentifier() {
        return this.getStringAttribute('source_db_instance_identifier');
    }
    set sourceDbInstanceIdentifier(value) {
        this._sourceDbInstanceIdentifier = value;
    }
    resetSourceDbInstanceIdentifier() {
        this._sourceDbInstanceIdentifier = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourceDbInstanceIdentifierInput() {
        return this._sourceDbInstanceIdentifier;
    }
    get sourceDbiResourceId() {
        return this.getStringAttribute('source_dbi_resource_id');
    }
    set sourceDbiResourceId(value) {
        this._sourceDbiResourceId = value;
    }
    resetSourceDbiResourceId() {
        this._sourceDbiResourceId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourceDbiResourceIdInput() {
        return this._sourceDbiResourceId;
    }
    get useLatestRestorableTime() {
        return this.getBooleanAttribute('use_latest_restorable_time');
    }
    set useLatestRestorableTime(value) {
        this._useLatestRestorableTime = value;
    }
    resetUseLatestRestorableTime() {
        this._useLatestRestorableTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get useLatestRestorableTimeInput() {
        return this._useLatestRestorableTime;
    }
}
exports.DbInstanceRestoreToPointInTimeOutputReference = DbInstanceRestoreToPointInTimeOutputReference;
_f = JSII_RTTI_SYMBOL_1;
DbInstanceRestoreToPointInTimeOutputReference[_f] = { fqn: "@cdktf/provider-aws.dbInstance.DbInstanceRestoreToPointInTimeOutputReference", version: "19.15.0" };
function dbInstanceS3ImportToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        bucket_prefix: cdktf.stringToTerraform(struct.bucketPrefix),
        ingestion_role: cdktf.stringToTerraform(struct.ingestionRole),
        source_engine: cdktf.stringToTerraform(struct.sourceEngine),
        source_engine_version: cdktf.stringToTerraform(struct.sourceEngineVersion),
    };
}
exports.dbInstanceS3ImportToTerraform = dbInstanceS3ImportToTerraform;
function dbInstanceS3ImportToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bucket_name: {
            value: cdktf.stringToHclTerraform(struct.bucketName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        bucket_prefix: {
            value: cdktf.stringToHclTerraform(struct.bucketPrefix),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ingestion_role: {
            value: cdktf.stringToHclTerraform(struct.ingestionRole),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        source_engine: {
            value: cdktf.stringToHclTerraform(struct.sourceEngine),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        source_engine_version: {
            value: cdktf.stringToHclTerraform(struct.sourceEngineVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dbInstanceS3ImportToHclTerraform = dbInstanceS3ImportToHclTerraform;
class DbInstanceS3ImportOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketName !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketName = this._bucketName;
        }
        if (this._bucketPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketPrefix = this._bucketPrefix;
        }
        if (this._ingestionRole !== undefined) {
            hasAnyValues = true;
            internalValueResult.ingestionRole = this._ingestionRole;
        }
        if (this._sourceEngine !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceEngine = this._sourceEngine;
        }
        if (this._sourceEngineVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceEngineVersion = this._sourceEngineVersion;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketName = undefined;
            this._bucketPrefix = undefined;
            this._ingestionRole = undefined;
            this._sourceEngine = undefined;
            this._sourceEngineVersion = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketName = value.bucketName;
            this._bucketPrefix = value.bucketPrefix;
            this._ingestionRole = value.ingestionRole;
            this._sourceEngine = value.sourceEngine;
            this._sourceEngineVersion = value.sourceEngineVersion;
        }
    }
    get bucketName() {
        return this.getStringAttribute('bucket_name');
    }
    set bucketName(value) {
        this._bucketName = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketNameInput() {
        return this._bucketName;
    }
    get bucketPrefix() {
        return this.getStringAttribute('bucket_prefix');
    }
    set bucketPrefix(value) {
        this._bucketPrefix = value;
    }
    resetBucketPrefix() {
        this._bucketPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketPrefixInput() {
        return this._bucketPrefix;
    }
    get ingestionRole() {
        return this.getStringAttribute('ingestion_role');
    }
    set ingestionRole(value) {
        this._ingestionRole = value;
    }
    // Temporarily expose input value. Use with caution.
    get ingestionRoleInput() {
        return this._ingestionRole;
    }
    get sourceEngine() {
        return this.getStringAttribute('source_engine');
    }
    set sourceEngine(value) {
        this._sourceEngine = value;
    }
    // Temporarily expose input value. Use with caution.
    get sourceEngineInput() {
        return this._sourceEngine;
    }
    get sourceEngineVersion() {
        return this.getStringAttribute('source_engine_version');
    }
    set sourceEngineVersion(value) {
        this._sourceEngineVersion = value;
    }
    // Temporarily expose input value. Use with caution.
    get sourceEngineVersionInput() {
        return this._sourceEngineVersion;
    }
}
exports.DbInstanceS3ImportOutputReference = DbInstanceS3ImportOutputReference;
_g = JSII_RTTI_SYMBOL_1;
DbInstanceS3ImportOutputReference[_g] = { fqn: "@cdktf/provider-aws.dbInstance.DbInstanceS3ImportOutputReference", version: "19.15.0" };
function dbInstanceTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.dbInstanceTimeoutsToTerraform = dbInstanceTimeoutsToTerraform;
function dbInstanceTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dbInstanceTimeoutsToHclTerraform = dbInstanceTimeoutsToHclTerraform;
class DbInstanceTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.DbInstanceTimeoutsOutputReference = DbInstanceTimeoutsOutputReference;
_h = JSII_RTTI_SYMBOL_1;
DbInstanceTimeoutsOutputReference[_h] = { fqn: "@cdktf/provider-aws.dbInstance.DbInstanceTimeoutsOutputReference", version: "19.15.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/db_instance aws_db_instance}
*/
class DbInstance extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a DbInstance resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the DbInstance to import
    * @param importFromId The id of the existing DbInstance that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/db_instance#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the DbInstance to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_db_instance", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/db_instance aws_db_instance} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DbInstanceConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_db_instance',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // listener_endpoint - computed: true, optional: false, required: false
        this._listenerEndpoint = new DbInstanceListenerEndpointList(this, "listener_endpoint", false);
        // master_user_secret - computed: true, optional: false, required: false
        this._masterUserSecret = new DbInstanceMasterUserSecretList(this, "master_user_secret", false);
        // blue_green_update - computed: false, optional: true, required: false
        this._blueGreenUpdate = new DbInstanceBlueGreenUpdateOutputReference(this, "blue_green_update");
        // restore_to_point_in_time - computed: false, optional: true, required: false
        this._restoreToPointInTime = new DbInstanceRestoreToPointInTimeOutputReference(this, "restore_to_point_in_time");
        // s3_import - computed: false, optional: true, required: false
        this._s3Import = new DbInstanceS3ImportOutputReference(this, "s3_import");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new DbInstanceTimeoutsOutputReference(this, "timeouts");
        this._allocatedStorage = config.allocatedStorage;
        this._allowMajorVersionUpgrade = config.allowMajorVersionUpgrade;
        this._applyImmediately = config.applyImmediately;
        this._autoMinorVersionUpgrade = config.autoMinorVersionUpgrade;
        this._availabilityZone = config.availabilityZone;
        this._backupRetentionPeriod = config.backupRetentionPeriod;
        this._backupTarget = config.backupTarget;
        this._backupWindow = config.backupWindow;
        this._caCertIdentifier = config.caCertIdentifier;
        this._characterSetName = config.characterSetName;
        this._copyTagsToSnapshot = config.copyTagsToSnapshot;
        this._customIamInstanceProfile = config.customIamInstanceProfile;
        this._customerOwnedIpEnabled = config.customerOwnedIpEnabled;
        this._dbName = config.dbName;
        this._dbSubnetGroupName = config.dbSubnetGroupName;
        this._deleteAutomatedBackups = config.deleteAutomatedBackups;
        this._deletionProtection = config.deletionProtection;
        this._domain = config.domain;
        this._domainAuthSecretArn = config.domainAuthSecretArn;
        this._domainDnsIps = config.domainDnsIps;
        this._domainFqdn = config.domainFqdn;
        this._domainIamRoleName = config.domainIamRoleName;
        this._domainOu = config.domainOu;
        this._enabledCloudwatchLogsExports = config.enabledCloudwatchLogsExports;
        this._engine = config.engine;
        this._engineVersion = config.engineVersion;
        this._finalSnapshotIdentifier = config.finalSnapshotIdentifier;
        this._iamDatabaseAuthenticationEnabled = config.iamDatabaseAuthenticationEnabled;
        this._id = config.id;
        this._identifier = config.identifier;
        this._identifierPrefix = config.identifierPrefix;
        this._instanceClass = config.instanceClass;
        this._iops = config.iops;
        this._kmsKeyId = config.kmsKeyId;
        this._licenseModel = config.licenseModel;
        this._maintenanceWindow = config.maintenanceWindow;
        this._manageMasterUserPassword = config.manageMasterUserPassword;
        this._masterUserSecretKmsKeyId = config.masterUserSecretKmsKeyId;
        this._maxAllocatedStorage = config.maxAllocatedStorage;
        this._monitoringInterval = config.monitoringInterval;
        this._monitoringRoleArn = config.monitoringRoleArn;
        this._multiAz = config.multiAz;
        this._ncharCharacterSetName = config.ncharCharacterSetName;
        this._networkType = config.networkType;
        this._optionGroupName = config.optionGroupName;
        this._parameterGroupName = config.parameterGroupName;
        this._password = config.password;
        this._performanceInsightsEnabled = config.performanceInsightsEnabled;
        this._performanceInsightsKmsKeyId = config.performanceInsightsKmsKeyId;
        this._performanceInsightsRetentionPeriod = config.performanceInsightsRetentionPeriod;
        this._port = config.port;
        this._publiclyAccessible = config.publiclyAccessible;
        this._replicaMode = config.replicaMode;
        this._replicateSourceDb = config.replicateSourceDb;
        this._skipFinalSnapshot = config.skipFinalSnapshot;
        this._snapshotIdentifier = config.snapshotIdentifier;
        this._storageEncrypted = config.storageEncrypted;
        this._storageThroughput = config.storageThroughput;
        this._storageType = config.storageType;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._timezone = config.timezone;
        this._username = config.username;
        this._vpcSecurityGroupIds = config.vpcSecurityGroupIds;
        this._blueGreenUpdate.internalValue = config.blueGreenUpdate;
        this._restoreToPointInTime.internalValue = config.restoreToPointInTime;
        this._s3Import.internalValue = config.s3Import;
        this._timeouts.internalValue = config.timeouts;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // address - computed: true, optional: false, required: false
    get address() {
        return this.getStringAttribute('address');
    }
    get allocatedStorage() {
        return this.getNumberAttribute('allocated_storage');
    }
    set allocatedStorage(value) {
        this._allocatedStorage = value;
    }
    resetAllocatedStorage() {
        this._allocatedStorage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allocatedStorageInput() {
        return this._allocatedStorage;
    }
    get allowMajorVersionUpgrade() {
        return this.getBooleanAttribute('allow_major_version_upgrade');
    }
    set allowMajorVersionUpgrade(value) {
        this._allowMajorVersionUpgrade = value;
    }
    resetAllowMajorVersionUpgrade() {
        this._allowMajorVersionUpgrade = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowMajorVersionUpgradeInput() {
        return this._allowMajorVersionUpgrade;
    }
    get applyImmediately() {
        return this.getBooleanAttribute('apply_immediately');
    }
    set applyImmediately(value) {
        this._applyImmediately = value;
    }
    resetApplyImmediately() {
        this._applyImmediately = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get applyImmediatelyInput() {
        return this._applyImmediately;
    }
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get autoMinorVersionUpgrade() {
        return this.getBooleanAttribute('auto_minor_version_upgrade');
    }
    set autoMinorVersionUpgrade(value) {
        this._autoMinorVersionUpgrade = value;
    }
    resetAutoMinorVersionUpgrade() {
        this._autoMinorVersionUpgrade = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoMinorVersionUpgradeInput() {
        return this._autoMinorVersionUpgrade;
    }
    get availabilityZone() {
        return this.getStringAttribute('availability_zone');
    }
    set availabilityZone(value) {
        this._availabilityZone = value;
    }
    resetAvailabilityZone() {
        this._availabilityZone = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get availabilityZoneInput() {
        return this._availabilityZone;
    }
    get backupRetentionPeriod() {
        return this.getNumberAttribute('backup_retention_period');
    }
    set backupRetentionPeriod(value) {
        this._backupRetentionPeriod = value;
    }
    resetBackupRetentionPeriod() {
        this._backupRetentionPeriod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backupRetentionPeriodInput() {
        return this._backupRetentionPeriod;
    }
    get backupTarget() {
        return this.getStringAttribute('backup_target');
    }
    set backupTarget(value) {
        this._backupTarget = value;
    }
    resetBackupTarget() {
        this._backupTarget = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backupTargetInput() {
        return this._backupTarget;
    }
    get backupWindow() {
        return this.getStringAttribute('backup_window');
    }
    set backupWindow(value) {
        this._backupWindow = value;
    }
    resetBackupWindow() {
        this._backupWindow = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backupWindowInput() {
        return this._backupWindow;
    }
    get caCertIdentifier() {
        return this.getStringAttribute('ca_cert_identifier');
    }
    set caCertIdentifier(value) {
        this._caCertIdentifier = value;
    }
    resetCaCertIdentifier() {
        this._caCertIdentifier = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get caCertIdentifierInput() {
        return this._caCertIdentifier;
    }
    get characterSetName() {
        return this.getStringAttribute('character_set_name');
    }
    set characterSetName(value) {
        this._characterSetName = value;
    }
    resetCharacterSetName() {
        this._characterSetName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get characterSetNameInput() {
        return this._characterSetName;
    }
    get copyTagsToSnapshot() {
        return this.getBooleanAttribute('copy_tags_to_snapshot');
    }
    set copyTagsToSnapshot(value) {
        this._copyTagsToSnapshot = value;
    }
    resetCopyTagsToSnapshot() {
        this._copyTagsToSnapshot = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get copyTagsToSnapshotInput() {
        return this._copyTagsToSnapshot;
    }
    get customIamInstanceProfile() {
        return this.getStringAttribute('custom_iam_instance_profile');
    }
    set customIamInstanceProfile(value) {
        this._customIamInstanceProfile = value;
    }
    resetCustomIamInstanceProfile() {
        this._customIamInstanceProfile = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customIamInstanceProfileInput() {
        return this._customIamInstanceProfile;
    }
    get customerOwnedIpEnabled() {
        return this.getBooleanAttribute('customer_owned_ip_enabled');
    }
    set customerOwnedIpEnabled(value) {
        this._customerOwnedIpEnabled = value;
    }
    resetCustomerOwnedIpEnabled() {
        this._customerOwnedIpEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customerOwnedIpEnabledInput() {
        return this._customerOwnedIpEnabled;
    }
    get dbName() {
        return this.getStringAttribute('db_name');
    }
    set dbName(value) {
        this._dbName = value;
    }
    resetDbName() {
        this._dbName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dbNameInput() {
        return this._dbName;
    }
    get dbSubnetGroupName() {
        return this.getStringAttribute('db_subnet_group_name');
    }
    set dbSubnetGroupName(value) {
        this._dbSubnetGroupName = value;
    }
    resetDbSubnetGroupName() {
        this._dbSubnetGroupName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dbSubnetGroupNameInput() {
        return this._dbSubnetGroupName;
    }
    get deleteAutomatedBackups() {
        return this.getBooleanAttribute('delete_automated_backups');
    }
    set deleteAutomatedBackups(value) {
        this._deleteAutomatedBackups = value;
    }
    resetDeleteAutomatedBackups() {
        this._deleteAutomatedBackups = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteAutomatedBackupsInput() {
        return this._deleteAutomatedBackups;
    }
    get deletionProtection() {
        return this.getBooleanAttribute('deletion_protection');
    }
    set deletionProtection(value) {
        this._deletionProtection = value;
    }
    resetDeletionProtection() {
        this._deletionProtection = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deletionProtectionInput() {
        return this._deletionProtection;
    }
    get domain() {
        return this.getStringAttribute('domain');
    }
    set domain(value) {
        this._domain = value;
    }
    resetDomain() {
        this._domain = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get domainInput() {
        return this._domain;
    }
    get domainAuthSecretArn() {
        return this.getStringAttribute('domain_auth_secret_arn');
    }
    set domainAuthSecretArn(value) {
        this._domainAuthSecretArn = value;
    }
    resetDomainAuthSecretArn() {
        this._domainAuthSecretArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get domainAuthSecretArnInput() {
        return this._domainAuthSecretArn;
    }
    get domainDnsIps() {
        return cdktf.Fn.tolist(this.getListAttribute('domain_dns_ips'));
    }
    set domainDnsIps(value) {
        this._domainDnsIps = value;
    }
    resetDomainDnsIps() {
        this._domainDnsIps = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get domainDnsIpsInput() {
        return this._domainDnsIps;
    }
    get domainFqdn() {
        return this.getStringAttribute('domain_fqdn');
    }
    set domainFqdn(value) {
        this._domainFqdn = value;
    }
    resetDomainFqdn() {
        this._domainFqdn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get domainFqdnInput() {
        return this._domainFqdn;
    }
    get domainIamRoleName() {
        return this.getStringAttribute('domain_iam_role_name');
    }
    set domainIamRoleName(value) {
        this._domainIamRoleName = value;
    }
    resetDomainIamRoleName() {
        this._domainIamRoleName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get domainIamRoleNameInput() {
        return this._domainIamRoleName;
    }
    get domainOu() {
        return this.getStringAttribute('domain_ou');
    }
    set domainOu(value) {
        this._domainOu = value;
    }
    resetDomainOu() {
        this._domainOu = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get domainOuInput() {
        return this._domainOu;
    }
    get enabledCloudwatchLogsExports() {
        return cdktf.Fn.tolist(this.getListAttribute('enabled_cloudwatch_logs_exports'));
    }
    set enabledCloudwatchLogsExports(value) {
        this._enabledCloudwatchLogsExports = value;
    }
    resetEnabledCloudwatchLogsExports() {
        this._enabledCloudwatchLogsExports = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledCloudwatchLogsExportsInput() {
        return this._enabledCloudwatchLogsExports;
    }
    // endpoint - computed: true, optional: false, required: false
    get endpoint() {
        return this.getStringAttribute('endpoint');
    }
    get engine() {
        return this.getStringAttribute('engine');
    }
    set engine(value) {
        this._engine = value;
    }
    resetEngine() {
        this._engine = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get engineInput() {
        return this._engine;
    }
    get engineVersion() {
        return this.getStringAttribute('engine_version');
    }
    set engineVersion(value) {
        this._engineVersion = value;
    }
    resetEngineVersion() {
        this._engineVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get engineVersionInput() {
        return this._engineVersion;
    }
    // engine_version_actual - computed: true, optional: false, required: false
    get engineVersionActual() {
        return this.getStringAttribute('engine_version_actual');
    }
    get finalSnapshotIdentifier() {
        return this.getStringAttribute('final_snapshot_identifier');
    }
    set finalSnapshotIdentifier(value) {
        this._finalSnapshotIdentifier = value;
    }
    resetFinalSnapshotIdentifier() {
        this._finalSnapshotIdentifier = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get finalSnapshotIdentifierInput() {
        return this._finalSnapshotIdentifier;
    }
    // hosted_zone_id - computed: true, optional: false, required: false
    get hostedZoneId() {
        return this.getStringAttribute('hosted_zone_id');
    }
    get iamDatabaseAuthenticationEnabled() {
        return this.getBooleanAttribute('iam_database_authentication_enabled');
    }
    set iamDatabaseAuthenticationEnabled(value) {
        this._iamDatabaseAuthenticationEnabled = value;
    }
    resetIamDatabaseAuthenticationEnabled() {
        this._iamDatabaseAuthenticationEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get iamDatabaseAuthenticationEnabledInput() {
        return this._iamDatabaseAuthenticationEnabled;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get identifier() {
        return this.getStringAttribute('identifier');
    }
    set identifier(value) {
        this._identifier = value;
    }
    resetIdentifier() {
        this._identifier = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get identifierInput() {
        return this._identifier;
    }
    get identifierPrefix() {
        return this.getStringAttribute('identifier_prefix');
    }
    set identifierPrefix(value) {
        this._identifierPrefix = value;
    }
    resetIdentifierPrefix() {
        this._identifierPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get identifierPrefixInput() {
        return this._identifierPrefix;
    }
    get instanceClass() {
        return this.getStringAttribute('instance_class');
    }
    set instanceClass(value) {
        this._instanceClass = value;
    }
    // Temporarily expose input value. Use with caution.
    get instanceClassInput() {
        return this._instanceClass;
    }
    get iops() {
        return this.getNumberAttribute('iops');
    }
    set iops(value) {
        this._iops = value;
    }
    resetIops() {
        this._iops = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get iopsInput() {
        return this._iops;
    }
    get kmsKeyId() {
        return this.getStringAttribute('kms_key_id');
    }
    set kmsKeyId(value) {
        this._kmsKeyId = value;
    }
    resetKmsKeyId() {
        this._kmsKeyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyIdInput() {
        return this._kmsKeyId;
    }
    // latest_restorable_time - computed: true, optional: false, required: false
    get latestRestorableTime() {
        return this.getStringAttribute('latest_restorable_time');
    }
    get licenseModel() {
        return this.getStringAttribute('license_model');
    }
    set licenseModel(value) {
        this._licenseModel = value;
    }
    resetLicenseModel() {
        this._licenseModel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get licenseModelInput() {
        return this._licenseModel;
    }
    get listenerEndpoint() {
        return this._listenerEndpoint;
    }
    get maintenanceWindow() {
        return this.getStringAttribute('maintenance_window');
    }
    set maintenanceWindow(value) {
        this._maintenanceWindow = value;
    }
    resetMaintenanceWindow() {
        this._maintenanceWindow = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maintenanceWindowInput() {
        return this._maintenanceWindow;
    }
    get manageMasterUserPassword() {
        return this.getBooleanAttribute('manage_master_user_password');
    }
    set manageMasterUserPassword(value) {
        this._manageMasterUserPassword = value;
    }
    resetManageMasterUserPassword() {
        this._manageMasterUserPassword = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get manageMasterUserPasswordInput() {
        return this._manageMasterUserPassword;
    }
    get masterUserSecret() {
        return this._masterUserSecret;
    }
    get masterUserSecretKmsKeyId() {
        return this.getStringAttribute('master_user_secret_kms_key_id');
    }
    set masterUserSecretKmsKeyId(value) {
        this._masterUserSecretKmsKeyId = value;
    }
    resetMasterUserSecretKmsKeyId() {
        this._masterUserSecretKmsKeyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get masterUserSecretKmsKeyIdInput() {
        return this._masterUserSecretKmsKeyId;
    }
    get maxAllocatedStorage() {
        return this.getNumberAttribute('max_allocated_storage');
    }
    set maxAllocatedStorage(value) {
        this._maxAllocatedStorage = value;
    }
    resetMaxAllocatedStorage() {
        this._maxAllocatedStorage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxAllocatedStorageInput() {
        return this._maxAllocatedStorage;
    }
    get monitoringInterval() {
        return this.getNumberAttribute('monitoring_interval');
    }
    set monitoringInterval(value) {
        this._monitoringInterval = value;
    }
    resetMonitoringInterval() {
        this._monitoringInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get monitoringIntervalInput() {
        return this._monitoringInterval;
    }
    get monitoringRoleArn() {
        return this.getStringAttribute('monitoring_role_arn');
    }
    set monitoringRoleArn(value) {
        this._monitoringRoleArn = value;
    }
    resetMonitoringRoleArn() {
        this._monitoringRoleArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get monitoringRoleArnInput() {
        return this._monitoringRoleArn;
    }
    get multiAz() {
        return this.getBooleanAttribute('multi_az');
    }
    set multiAz(value) {
        this._multiAz = value;
    }
    resetMultiAz() {
        this._multiAz = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get multiAzInput() {
        return this._multiAz;
    }
    get ncharCharacterSetName() {
        return this.getStringAttribute('nchar_character_set_name');
    }
    set ncharCharacterSetName(value) {
        this._ncharCharacterSetName = value;
    }
    resetNcharCharacterSetName() {
        this._ncharCharacterSetName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ncharCharacterSetNameInput() {
        return this._ncharCharacterSetName;
    }
    get networkType() {
        return this.getStringAttribute('network_type');
    }
    set networkType(value) {
        this._networkType = value;
    }
    resetNetworkType() {
        this._networkType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkTypeInput() {
        return this._networkType;
    }
    get optionGroupName() {
        return this.getStringAttribute('option_group_name');
    }
    set optionGroupName(value) {
        this._optionGroupName = value;
    }
    resetOptionGroupName() {
        this._optionGroupName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get optionGroupNameInput() {
        return this._optionGroupName;
    }
    get parameterGroupName() {
        return this.getStringAttribute('parameter_group_name');
    }
    set parameterGroupName(value) {
        this._parameterGroupName = value;
    }
    resetParameterGroupName() {
        this._parameterGroupName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parameterGroupNameInput() {
        return this._parameterGroupName;
    }
    get password() {
        return this.getStringAttribute('password');
    }
    set password(value) {
        this._password = value;
    }
    resetPassword() {
        this._password = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passwordInput() {
        return this._password;
    }
    get performanceInsightsEnabled() {
        return this.getBooleanAttribute('performance_insights_enabled');
    }
    set performanceInsightsEnabled(value) {
        this._performanceInsightsEnabled = value;
    }
    resetPerformanceInsightsEnabled() {
        this._performanceInsightsEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get performanceInsightsEnabledInput() {
        return this._performanceInsightsEnabled;
    }
    get performanceInsightsKmsKeyId() {
        return this.getStringAttribute('performance_insights_kms_key_id');
    }
    set performanceInsightsKmsKeyId(value) {
        this._performanceInsightsKmsKeyId = value;
    }
    resetPerformanceInsightsKmsKeyId() {
        this._performanceInsightsKmsKeyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get performanceInsightsKmsKeyIdInput() {
        return this._performanceInsightsKmsKeyId;
    }
    get performanceInsightsRetentionPeriod() {
        return this.getNumberAttribute('performance_insights_retention_period');
    }
    set performanceInsightsRetentionPeriod(value) {
        this._performanceInsightsRetentionPeriod = value;
    }
    resetPerformanceInsightsRetentionPeriod() {
        this._performanceInsightsRetentionPeriod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get performanceInsightsRetentionPeriodInput() {
        return this._performanceInsightsRetentionPeriod;
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    resetPort() {
        this._port = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
    get publiclyAccessible() {
        return this.getBooleanAttribute('publicly_accessible');
    }
    set publiclyAccessible(value) {
        this._publiclyAccessible = value;
    }
    resetPubliclyAccessible() {
        this._publiclyAccessible = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get publiclyAccessibleInput() {
        return this._publiclyAccessible;
    }
    get replicaMode() {
        return this.getStringAttribute('replica_mode');
    }
    set replicaMode(value) {
        this._replicaMode = value;
    }
    resetReplicaMode() {
        this._replicaMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replicaModeInput() {
        return this._replicaMode;
    }
    // replicas - computed: true, optional: false, required: false
    get replicas() {
        return this.getListAttribute('replicas');
    }
    get replicateSourceDb() {
        return this.getStringAttribute('replicate_source_db');
    }
    set replicateSourceDb(value) {
        this._replicateSourceDb = value;
    }
    resetReplicateSourceDb() {
        this._replicateSourceDb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replicateSourceDbInput() {
        return this._replicateSourceDb;
    }
    // resource_id - computed: true, optional: false, required: false
    get resourceId() {
        return this.getStringAttribute('resource_id');
    }
    get skipFinalSnapshot() {
        return this.getBooleanAttribute('skip_final_snapshot');
    }
    set skipFinalSnapshot(value) {
        this._skipFinalSnapshot = value;
    }
    resetSkipFinalSnapshot() {
        this._skipFinalSnapshot = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get skipFinalSnapshotInput() {
        return this._skipFinalSnapshot;
    }
    get snapshotIdentifier() {
        return this.getStringAttribute('snapshot_identifier');
    }
    set snapshotIdentifier(value) {
        this._snapshotIdentifier = value;
    }
    resetSnapshotIdentifier() {
        this._snapshotIdentifier = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get snapshotIdentifierInput() {
        return this._snapshotIdentifier;
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.getStringAttribute('status');
    }
    get storageEncrypted() {
        return this.getBooleanAttribute('storage_encrypted');
    }
    set storageEncrypted(value) {
        this._storageEncrypted = value;
    }
    resetStorageEncrypted() {
        this._storageEncrypted = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storageEncryptedInput() {
        return this._storageEncrypted;
    }
    get storageThroughput() {
        return this.getNumberAttribute('storage_throughput');
    }
    set storageThroughput(value) {
        this._storageThroughput = value;
    }
    resetStorageThroughput() {
        this._storageThroughput = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storageThroughputInput() {
        return this._storageThroughput;
    }
    get storageType() {
        return this.getStringAttribute('storage_type');
    }
    set storageType(value) {
        this._storageType = value;
    }
    resetStorageType() {
        this._storageType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storageTypeInput() {
        return this._storageType;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get timezone() {
        return this.getStringAttribute('timezone');
    }
    set timezone(value) {
        this._timezone = value;
    }
    resetTimezone() {
        this._timezone = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timezoneInput() {
        return this._timezone;
    }
    get username() {
        return this.getStringAttribute('username');
    }
    set username(value) {
        this._username = value;
    }
    resetUsername() {
        this._username = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get usernameInput() {
        return this._username;
    }
    get vpcSecurityGroupIds() {
        return cdktf.Fn.tolist(this.getListAttribute('vpc_security_group_ids'));
    }
    set vpcSecurityGroupIds(value) {
        this._vpcSecurityGroupIds = value;
    }
    resetVpcSecurityGroupIds() {
        this._vpcSecurityGroupIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vpcSecurityGroupIdsInput() {
        return this._vpcSecurityGroupIds;
    }
    get blueGreenUpdate() {
        return this._blueGreenUpdate;
    }
    putBlueGreenUpdate(value) {
        this._blueGreenUpdate.internalValue = value;
    }
    resetBlueGreenUpdate() {
        this._blueGreenUpdate.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get blueGreenUpdateInput() {
        return this._blueGreenUpdate.internalValue;
    }
    get restoreToPointInTime() {
        return this._restoreToPointInTime;
    }
    putRestoreToPointInTime(value) {
        this._restoreToPointInTime.internalValue = value;
    }
    resetRestoreToPointInTime() {
        this._restoreToPointInTime.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get restoreToPointInTimeInput() {
        return this._restoreToPointInTime.internalValue;
    }
    get s3Import() {
        return this._s3Import;
    }
    putS3Import(value) {
        this._s3Import.internalValue = value;
    }
    resetS3Import() {
        this._s3Import.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3ImportInput() {
        return this._s3Import.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            allocated_storage: cdktf.numberToTerraform(this._allocatedStorage),
            allow_major_version_upgrade: cdktf.booleanToTerraform(this._allowMajorVersionUpgrade),
            apply_immediately: cdktf.booleanToTerraform(this._applyImmediately),
            auto_minor_version_upgrade: cdktf.booleanToTerraform(this._autoMinorVersionUpgrade),
            availability_zone: cdktf.stringToTerraform(this._availabilityZone),
            backup_retention_period: cdktf.numberToTerraform(this._backupRetentionPeriod),
            backup_target: cdktf.stringToTerraform(this._backupTarget),
            backup_window: cdktf.stringToTerraform(this._backupWindow),
            ca_cert_identifier: cdktf.stringToTerraform(this._caCertIdentifier),
            character_set_name: cdktf.stringToTerraform(this._characterSetName),
            copy_tags_to_snapshot: cdktf.booleanToTerraform(this._copyTagsToSnapshot),
            custom_iam_instance_profile: cdktf.stringToTerraform(this._customIamInstanceProfile),
            customer_owned_ip_enabled: cdktf.booleanToTerraform(this._customerOwnedIpEnabled),
            db_name: cdktf.stringToTerraform(this._dbName),
            db_subnet_group_name: cdktf.stringToTerraform(this._dbSubnetGroupName),
            delete_automated_backups: cdktf.booleanToTerraform(this._deleteAutomatedBackups),
            deletion_protection: cdktf.booleanToTerraform(this._deletionProtection),
            domain: cdktf.stringToTerraform(this._domain),
            domain_auth_secret_arn: cdktf.stringToTerraform(this._domainAuthSecretArn),
            domain_dns_ips: cdktf.listMapper(cdktf.stringToTerraform, false)(this._domainDnsIps),
            domain_fqdn: cdktf.stringToTerraform(this._domainFqdn),
            domain_iam_role_name: cdktf.stringToTerraform(this._domainIamRoleName),
            domain_ou: cdktf.stringToTerraform(this._domainOu),
            enabled_cloudwatch_logs_exports: cdktf.listMapper(cdktf.stringToTerraform, false)(this._enabledCloudwatchLogsExports),
            engine: cdktf.stringToTerraform(this._engine),
            engine_version: cdktf.stringToTerraform(this._engineVersion),
            final_snapshot_identifier: cdktf.stringToTerraform(this._finalSnapshotIdentifier),
            iam_database_authentication_enabled: cdktf.booleanToTerraform(this._iamDatabaseAuthenticationEnabled),
            id: cdktf.stringToTerraform(this._id),
            identifier: cdktf.stringToTerraform(this._identifier),
            identifier_prefix: cdktf.stringToTerraform(this._identifierPrefix),
            instance_class: cdktf.stringToTerraform(this._instanceClass),
            iops: cdktf.numberToTerraform(this._iops),
            kms_key_id: cdktf.stringToTerraform(this._kmsKeyId),
            license_model: cdktf.stringToTerraform(this._licenseModel),
            maintenance_window: cdktf.stringToTerraform(this._maintenanceWindow),
            manage_master_user_password: cdktf.booleanToTerraform(this._manageMasterUserPassword),
            master_user_secret_kms_key_id: cdktf.stringToTerraform(this._masterUserSecretKmsKeyId),
            max_allocated_storage: cdktf.numberToTerraform(this._maxAllocatedStorage),
            monitoring_interval: cdktf.numberToTerraform(this._monitoringInterval),
            monitoring_role_arn: cdktf.stringToTerraform(this._monitoringRoleArn),
            multi_az: cdktf.booleanToTerraform(this._multiAz),
            nchar_character_set_name: cdktf.stringToTerraform(this._ncharCharacterSetName),
            network_type: cdktf.stringToTerraform(this._networkType),
            option_group_name: cdktf.stringToTerraform(this._optionGroupName),
            parameter_group_name: cdktf.stringToTerraform(this._parameterGroupName),
            password: cdktf.stringToTerraform(this._password),
            performance_insights_enabled: cdktf.booleanToTerraform(this._performanceInsightsEnabled),
            performance_insights_kms_key_id: cdktf.stringToTerraform(this._performanceInsightsKmsKeyId),
            performance_insights_retention_period: cdktf.numberToTerraform(this._performanceInsightsRetentionPeriod),
            port: cdktf.numberToTerraform(this._port),
            publicly_accessible: cdktf.booleanToTerraform(this._publiclyAccessible),
            replica_mode: cdktf.stringToTerraform(this._replicaMode),
            replicate_source_db: cdktf.stringToTerraform(this._replicateSourceDb),
            skip_final_snapshot: cdktf.booleanToTerraform(this._skipFinalSnapshot),
            snapshot_identifier: cdktf.stringToTerraform(this._snapshotIdentifier),
            storage_encrypted: cdktf.booleanToTerraform(this._storageEncrypted),
            storage_throughput: cdktf.numberToTerraform(this._storageThroughput),
            storage_type: cdktf.stringToTerraform(this._storageType),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            timezone: cdktf.stringToTerraform(this._timezone),
            username: cdktf.stringToTerraform(this._username),
            vpc_security_group_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(this._vpcSecurityGroupIds),
            blue_green_update: dbInstanceBlueGreenUpdateToTerraform(this._blueGreenUpdate.internalValue),
            restore_to_point_in_time: dbInstanceRestoreToPointInTimeToTerraform(this._restoreToPointInTime.internalValue),
            s3_import: dbInstanceS3ImportToTerraform(this._s3Import.internalValue),
            timeouts: dbInstanceTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            allocated_storage: {
                value: cdktf.numberToHclTerraform(this._allocatedStorage),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            allow_major_version_upgrade: {
                value: cdktf.booleanToHclTerraform(this._allowMajorVersionUpgrade),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            apply_immediately: {
                value: cdktf.booleanToHclTerraform(this._applyImmediately),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            auto_minor_version_upgrade: {
                value: cdktf.booleanToHclTerraform(this._autoMinorVersionUpgrade),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            availability_zone: {
                value: cdktf.stringToHclTerraform(this._availabilityZone),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            backup_retention_period: {
                value: cdktf.numberToHclTerraform(this._backupRetentionPeriod),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            backup_target: {
                value: cdktf.stringToHclTerraform(this._backupTarget),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            backup_window: {
                value: cdktf.stringToHclTerraform(this._backupWindow),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            ca_cert_identifier: {
                value: cdktf.stringToHclTerraform(this._caCertIdentifier),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            character_set_name: {
                value: cdktf.stringToHclTerraform(this._characterSetName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            copy_tags_to_snapshot: {
                value: cdktf.booleanToHclTerraform(this._copyTagsToSnapshot),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            custom_iam_instance_profile: {
                value: cdktf.stringToHclTerraform(this._customIamInstanceProfile),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            customer_owned_ip_enabled: {
                value: cdktf.booleanToHclTerraform(this._customerOwnedIpEnabled),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            db_name: {
                value: cdktf.stringToHclTerraform(this._dbName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            db_subnet_group_name: {
                value: cdktf.stringToHclTerraform(this._dbSubnetGroupName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            delete_automated_backups: {
                value: cdktf.booleanToHclTerraform(this._deleteAutomatedBackups),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            deletion_protection: {
                value: cdktf.booleanToHclTerraform(this._deletionProtection),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            domain: {
                value: cdktf.stringToHclTerraform(this._domain),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            domain_auth_secret_arn: {
                value: cdktf.stringToHclTerraform(this._domainAuthSecretArn),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            domain_dns_ips: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._domainDnsIps),
                isBlock: false,
                type: "set",
                storageClassType: "stringList",
            },
            domain_fqdn: {
                value: cdktf.stringToHclTerraform(this._domainFqdn),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            domain_iam_role_name: {
                value: cdktf.stringToHclTerraform(this._domainIamRoleName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            domain_ou: {
                value: cdktf.stringToHclTerraform(this._domainOu),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            enabled_cloudwatch_logs_exports: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._enabledCloudwatchLogsExports),
                isBlock: false,
                type: "set",
                storageClassType: "stringList",
            },
            engine: {
                value: cdktf.stringToHclTerraform(this._engine),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            engine_version: {
                value: cdktf.stringToHclTerraform(this._engineVersion),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            final_snapshot_identifier: {
                value: cdktf.stringToHclTerraform(this._finalSnapshotIdentifier),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            iam_database_authentication_enabled: {
                value: cdktf.booleanToHclTerraform(this._iamDatabaseAuthenticationEnabled),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            identifier: {
                value: cdktf.stringToHclTerraform(this._identifier),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            identifier_prefix: {
                value: cdktf.stringToHclTerraform(this._identifierPrefix),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            instance_class: {
                value: cdktf.stringToHclTerraform(this._instanceClass),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            iops: {
                value: cdktf.numberToHclTerraform(this._iops),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            kms_key_id: {
                value: cdktf.stringToHclTerraform(this._kmsKeyId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            license_model: {
                value: cdktf.stringToHclTerraform(this._licenseModel),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            maintenance_window: {
                value: cdktf.stringToHclTerraform(this._maintenanceWindow),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            manage_master_user_password: {
                value: cdktf.booleanToHclTerraform(this._manageMasterUserPassword),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            master_user_secret_kms_key_id: {
                value: cdktf.stringToHclTerraform(this._masterUserSecretKmsKeyId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            max_allocated_storage: {
                value: cdktf.numberToHclTerraform(this._maxAllocatedStorage),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            monitoring_interval: {
                value: cdktf.numberToHclTerraform(this._monitoringInterval),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            monitoring_role_arn: {
                value: cdktf.stringToHclTerraform(this._monitoringRoleArn),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            multi_az: {
                value: cdktf.booleanToHclTerraform(this._multiAz),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            nchar_character_set_name: {
                value: cdktf.stringToHclTerraform(this._ncharCharacterSetName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            network_type: {
                value: cdktf.stringToHclTerraform(this._networkType),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            option_group_name: {
                value: cdktf.stringToHclTerraform(this._optionGroupName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            parameter_group_name: {
                value: cdktf.stringToHclTerraform(this._parameterGroupName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            password: {
                value: cdktf.stringToHclTerraform(this._password),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            performance_insights_enabled: {
                value: cdktf.booleanToHclTerraform(this._performanceInsightsEnabled),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            performance_insights_kms_key_id: {
                value: cdktf.stringToHclTerraform(this._performanceInsightsKmsKeyId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            performance_insights_retention_period: {
                value: cdktf.numberToHclTerraform(this._performanceInsightsRetentionPeriod),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            port: {
                value: cdktf.numberToHclTerraform(this._port),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            publicly_accessible: {
                value: cdktf.booleanToHclTerraform(this._publiclyAccessible),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            replica_mode: {
                value: cdktf.stringToHclTerraform(this._replicaMode),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            replicate_source_db: {
                value: cdktf.stringToHclTerraform(this._replicateSourceDb),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            skip_final_snapshot: {
                value: cdktf.booleanToHclTerraform(this._skipFinalSnapshot),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            snapshot_identifier: {
                value: cdktf.stringToHclTerraform(this._snapshotIdentifier),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            storage_encrypted: {
                value: cdktf.booleanToHclTerraform(this._storageEncrypted),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            storage_throughput: {
                value: cdktf.numberToHclTerraform(this._storageThroughput),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            storage_type: {
                value: cdktf.stringToHclTerraform(this._storageType),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            tags: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tags),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            tags_all: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tagsAll),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            timezone: {
                value: cdktf.stringToHclTerraform(this._timezone),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            username: {
                value: cdktf.stringToHclTerraform(this._username),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            vpc_security_group_ids: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._vpcSecurityGroupIds),
                isBlock: false,
                type: "set",
                storageClassType: "stringList",
            },
            blue_green_update: {
                value: dbInstanceBlueGreenUpdateToHclTerraform(this._blueGreenUpdate.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DbInstanceBlueGreenUpdateList",
            },
            restore_to_point_in_time: {
                value: dbInstanceRestoreToPointInTimeToHclTerraform(this._restoreToPointInTime.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DbInstanceRestoreToPointInTimeList",
            },
            s3_import: {
                value: dbInstanceS3ImportToHclTerraform(this._s3Import.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DbInstanceS3ImportList",
            },
            timeouts: {
                value: dbInstanceTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "DbInstanceTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.DbInstance = DbInstance;
_j = JSII_RTTI_SYMBOL_1;
DbInstance[_j] = { fqn: "@cdktf/provider-aws.dbInstance.DbInstance", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
DbInstance.tfResourceType = "aws_db_instance";
//# sourceMappingURL=data:application/json;base64,