"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GuarddutyOrganizationConfiguration = exports.GuarddutyOrganizationConfigurationDatasourcesOutputReference = exports.guarddutyOrganizationConfigurationDatasourcesToHclTerraform = exports.guarddutyOrganizationConfigurationDatasourcesToTerraform = exports.GuarddutyOrganizationConfigurationDatasourcesS3LogsOutputReference = exports.guarddutyOrganizationConfigurationDatasourcesS3LogsToHclTerraform = exports.guarddutyOrganizationConfigurationDatasourcesS3LogsToTerraform = exports.GuarddutyOrganizationConfigurationDatasourcesMalwareProtectionOutputReference = exports.guarddutyOrganizationConfigurationDatasourcesMalwareProtectionToHclTerraform = exports.guarddutyOrganizationConfigurationDatasourcesMalwareProtectionToTerraform = exports.GuarddutyOrganizationConfigurationDatasourcesMalwareProtectionScanEc2InstanceWithFindingsOutputReference = exports.guarddutyOrganizationConfigurationDatasourcesMalwareProtectionScanEc2InstanceWithFindingsToHclTerraform = exports.guarddutyOrganizationConfigurationDatasourcesMalwareProtectionScanEc2InstanceWithFindingsToTerraform = exports.GuarddutyOrganizationConfigurationDatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesOutputReference = exports.guarddutyOrganizationConfigurationDatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesToHclTerraform = exports.guarddutyOrganizationConfigurationDatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesToTerraform = exports.GuarddutyOrganizationConfigurationDatasourcesKubernetesOutputReference = exports.guarddutyOrganizationConfigurationDatasourcesKubernetesToHclTerraform = exports.guarddutyOrganizationConfigurationDatasourcesKubernetesToTerraform = exports.GuarddutyOrganizationConfigurationDatasourcesKubernetesAuditLogsOutputReference = exports.guarddutyOrganizationConfigurationDatasourcesKubernetesAuditLogsToHclTerraform = exports.guarddutyOrganizationConfigurationDatasourcesKubernetesAuditLogsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function guarddutyOrganizationConfigurationDatasourcesKubernetesAuditLogsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable: cdktf.booleanToTerraform(struct.enable),
    };
}
exports.guarddutyOrganizationConfigurationDatasourcesKubernetesAuditLogsToTerraform = guarddutyOrganizationConfigurationDatasourcesKubernetesAuditLogsToTerraform;
function guarddutyOrganizationConfigurationDatasourcesKubernetesAuditLogsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enable: {
            value: cdktf.booleanToHclTerraform(struct.enable),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.guarddutyOrganizationConfigurationDatasourcesKubernetesAuditLogsToHclTerraform = guarddutyOrganizationConfigurationDatasourcesKubernetesAuditLogsToHclTerraform;
class GuarddutyOrganizationConfigurationDatasourcesKubernetesAuditLogsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enable !== undefined) {
            hasAnyValues = true;
            internalValueResult.enable = this._enable;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enable = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enable = value.enable;
        }
    }
    get enable() {
        return this.getBooleanAttribute('enable');
    }
    set enable(value) {
        this._enable = value;
    }
    // Temporarily expose input value. Use with caution.
    get enableInput() {
        return this._enable;
    }
}
exports.GuarddutyOrganizationConfigurationDatasourcesKubernetesAuditLogsOutputReference = GuarddutyOrganizationConfigurationDatasourcesKubernetesAuditLogsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
GuarddutyOrganizationConfigurationDatasourcesKubernetesAuditLogsOutputReference[_a] = { fqn: "@cdktf/provider-aws.guarddutyOrganizationConfiguration.GuarddutyOrganizationConfigurationDatasourcesKubernetesAuditLogsOutputReference", version: "19.15.0" };
function guarddutyOrganizationConfigurationDatasourcesKubernetesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        audit_logs: guarddutyOrganizationConfigurationDatasourcesKubernetesAuditLogsToTerraform(struct.auditLogs),
    };
}
exports.guarddutyOrganizationConfigurationDatasourcesKubernetesToTerraform = guarddutyOrganizationConfigurationDatasourcesKubernetesToTerraform;
function guarddutyOrganizationConfigurationDatasourcesKubernetesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        audit_logs: {
            value: guarddutyOrganizationConfigurationDatasourcesKubernetesAuditLogsToHclTerraform(struct.auditLogs),
            isBlock: true,
            type: "list",
            storageClassType: "GuarddutyOrganizationConfigurationDatasourcesKubernetesAuditLogsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.guarddutyOrganizationConfigurationDatasourcesKubernetesToHclTerraform = guarddutyOrganizationConfigurationDatasourcesKubernetesToHclTerraform;
class GuarddutyOrganizationConfigurationDatasourcesKubernetesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // audit_logs - computed: false, optional: false, required: true
        this._auditLogs = new GuarddutyOrganizationConfigurationDatasourcesKubernetesAuditLogsOutputReference(this, "audit_logs");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._auditLogs?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.auditLogs = this._auditLogs?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._auditLogs.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._auditLogs.internalValue = value.auditLogs;
        }
    }
    get auditLogs() {
        return this._auditLogs;
    }
    putAuditLogs(value) {
        this._auditLogs.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get auditLogsInput() {
        return this._auditLogs.internalValue;
    }
}
exports.GuarddutyOrganizationConfigurationDatasourcesKubernetesOutputReference = GuarddutyOrganizationConfigurationDatasourcesKubernetesOutputReference;
_b = JSII_RTTI_SYMBOL_1;
GuarddutyOrganizationConfigurationDatasourcesKubernetesOutputReference[_b] = { fqn: "@cdktf/provider-aws.guarddutyOrganizationConfiguration.GuarddutyOrganizationConfigurationDatasourcesKubernetesOutputReference", version: "19.15.0" };
function guarddutyOrganizationConfigurationDatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auto_enable: cdktf.booleanToTerraform(struct.autoEnable),
    };
}
exports.guarddutyOrganizationConfigurationDatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesToTerraform = guarddutyOrganizationConfigurationDatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesToTerraform;
function guarddutyOrganizationConfigurationDatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        auto_enable: {
            value: cdktf.booleanToHclTerraform(struct.autoEnable),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.guarddutyOrganizationConfigurationDatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesToHclTerraform = guarddutyOrganizationConfigurationDatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesToHclTerraform;
class GuarddutyOrganizationConfigurationDatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._autoEnable !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoEnable = this._autoEnable;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._autoEnable = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._autoEnable = value.autoEnable;
        }
    }
    get autoEnable() {
        return this.getBooleanAttribute('auto_enable');
    }
    set autoEnable(value) {
        this._autoEnable = value;
    }
    // Temporarily expose input value. Use with caution.
    get autoEnableInput() {
        return this._autoEnable;
    }
}
exports.GuarddutyOrganizationConfigurationDatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesOutputReference = GuarddutyOrganizationConfigurationDatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesOutputReference;
_c = JSII_RTTI_SYMBOL_1;
GuarddutyOrganizationConfigurationDatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesOutputReference[_c] = { fqn: "@cdktf/provider-aws.guarddutyOrganizationConfiguration.GuarddutyOrganizationConfigurationDatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesOutputReference", version: "19.15.0" };
function guarddutyOrganizationConfigurationDatasourcesMalwareProtectionScanEc2InstanceWithFindingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ebs_volumes: guarddutyOrganizationConfigurationDatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesToTerraform(struct.ebsVolumes),
    };
}
exports.guarddutyOrganizationConfigurationDatasourcesMalwareProtectionScanEc2InstanceWithFindingsToTerraform = guarddutyOrganizationConfigurationDatasourcesMalwareProtectionScanEc2InstanceWithFindingsToTerraform;
function guarddutyOrganizationConfigurationDatasourcesMalwareProtectionScanEc2InstanceWithFindingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        ebs_volumes: {
            value: guarddutyOrganizationConfigurationDatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesToHclTerraform(struct.ebsVolumes),
            isBlock: true,
            type: "list",
            storageClassType: "GuarddutyOrganizationConfigurationDatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.guarddutyOrganizationConfigurationDatasourcesMalwareProtectionScanEc2InstanceWithFindingsToHclTerraform = guarddutyOrganizationConfigurationDatasourcesMalwareProtectionScanEc2InstanceWithFindingsToHclTerraform;
class GuarddutyOrganizationConfigurationDatasourcesMalwareProtectionScanEc2InstanceWithFindingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // ebs_volumes - computed: false, optional: false, required: true
        this._ebsVolumes = new GuarddutyOrganizationConfigurationDatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesOutputReference(this, "ebs_volumes");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._ebsVolumes?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ebsVolumes = this._ebsVolumes?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._ebsVolumes.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._ebsVolumes.internalValue = value.ebsVolumes;
        }
    }
    get ebsVolumes() {
        return this._ebsVolumes;
    }
    putEbsVolumes(value) {
        this._ebsVolumes.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get ebsVolumesInput() {
        return this._ebsVolumes.internalValue;
    }
}
exports.GuarddutyOrganizationConfigurationDatasourcesMalwareProtectionScanEc2InstanceWithFindingsOutputReference = GuarddutyOrganizationConfigurationDatasourcesMalwareProtectionScanEc2InstanceWithFindingsOutputReference;
_d = JSII_RTTI_SYMBOL_1;
GuarddutyOrganizationConfigurationDatasourcesMalwareProtectionScanEc2InstanceWithFindingsOutputReference[_d] = { fqn: "@cdktf/provider-aws.guarddutyOrganizationConfiguration.GuarddutyOrganizationConfigurationDatasourcesMalwareProtectionScanEc2InstanceWithFindingsOutputReference", version: "19.15.0" };
function guarddutyOrganizationConfigurationDatasourcesMalwareProtectionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        scan_ec2_instance_with_findings: guarddutyOrganizationConfigurationDatasourcesMalwareProtectionScanEc2InstanceWithFindingsToTerraform(struct.scanEc2InstanceWithFindings),
    };
}
exports.guarddutyOrganizationConfigurationDatasourcesMalwareProtectionToTerraform = guarddutyOrganizationConfigurationDatasourcesMalwareProtectionToTerraform;
function guarddutyOrganizationConfigurationDatasourcesMalwareProtectionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        scan_ec2_instance_with_findings: {
            value: guarddutyOrganizationConfigurationDatasourcesMalwareProtectionScanEc2InstanceWithFindingsToHclTerraform(struct.scanEc2InstanceWithFindings),
            isBlock: true,
            type: "list",
            storageClassType: "GuarddutyOrganizationConfigurationDatasourcesMalwareProtectionScanEc2InstanceWithFindingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.guarddutyOrganizationConfigurationDatasourcesMalwareProtectionToHclTerraform = guarddutyOrganizationConfigurationDatasourcesMalwareProtectionToHclTerraform;
class GuarddutyOrganizationConfigurationDatasourcesMalwareProtectionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // scan_ec2_instance_with_findings - computed: false, optional: false, required: true
        this._scanEc2InstanceWithFindings = new GuarddutyOrganizationConfigurationDatasourcesMalwareProtectionScanEc2InstanceWithFindingsOutputReference(this, "scan_ec2_instance_with_findings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._scanEc2InstanceWithFindings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.scanEc2InstanceWithFindings = this._scanEc2InstanceWithFindings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._scanEc2InstanceWithFindings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._scanEc2InstanceWithFindings.internalValue = value.scanEc2InstanceWithFindings;
        }
    }
    get scanEc2InstanceWithFindings() {
        return this._scanEc2InstanceWithFindings;
    }
    putScanEc2InstanceWithFindings(value) {
        this._scanEc2InstanceWithFindings.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get scanEc2InstanceWithFindingsInput() {
        return this._scanEc2InstanceWithFindings.internalValue;
    }
}
exports.GuarddutyOrganizationConfigurationDatasourcesMalwareProtectionOutputReference = GuarddutyOrganizationConfigurationDatasourcesMalwareProtectionOutputReference;
_e = JSII_RTTI_SYMBOL_1;
GuarddutyOrganizationConfigurationDatasourcesMalwareProtectionOutputReference[_e] = { fqn: "@cdktf/provider-aws.guarddutyOrganizationConfiguration.GuarddutyOrganizationConfigurationDatasourcesMalwareProtectionOutputReference", version: "19.15.0" };
function guarddutyOrganizationConfigurationDatasourcesS3LogsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auto_enable: cdktf.booleanToTerraform(struct.autoEnable),
    };
}
exports.guarddutyOrganizationConfigurationDatasourcesS3LogsToTerraform = guarddutyOrganizationConfigurationDatasourcesS3LogsToTerraform;
function guarddutyOrganizationConfigurationDatasourcesS3LogsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        auto_enable: {
            value: cdktf.booleanToHclTerraform(struct.autoEnable),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.guarddutyOrganizationConfigurationDatasourcesS3LogsToHclTerraform = guarddutyOrganizationConfigurationDatasourcesS3LogsToHclTerraform;
class GuarddutyOrganizationConfigurationDatasourcesS3LogsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._autoEnable !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoEnable = this._autoEnable;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._autoEnable = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._autoEnable = value.autoEnable;
        }
    }
    get autoEnable() {
        return this.getBooleanAttribute('auto_enable');
    }
    set autoEnable(value) {
        this._autoEnable = value;
    }
    // Temporarily expose input value. Use with caution.
    get autoEnableInput() {
        return this._autoEnable;
    }
}
exports.GuarddutyOrganizationConfigurationDatasourcesS3LogsOutputReference = GuarddutyOrganizationConfigurationDatasourcesS3LogsOutputReference;
_f = JSII_RTTI_SYMBOL_1;
GuarddutyOrganizationConfigurationDatasourcesS3LogsOutputReference[_f] = { fqn: "@cdktf/provider-aws.guarddutyOrganizationConfiguration.GuarddutyOrganizationConfigurationDatasourcesS3LogsOutputReference", version: "19.15.0" };
function guarddutyOrganizationConfigurationDatasourcesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kubernetes: guarddutyOrganizationConfigurationDatasourcesKubernetesToTerraform(struct.kubernetes),
        malware_protection: guarddutyOrganizationConfigurationDatasourcesMalwareProtectionToTerraform(struct.malwareProtection),
        s3_logs: guarddutyOrganizationConfigurationDatasourcesS3LogsToTerraform(struct.s3Logs),
    };
}
exports.guarddutyOrganizationConfigurationDatasourcesToTerraform = guarddutyOrganizationConfigurationDatasourcesToTerraform;
function guarddutyOrganizationConfigurationDatasourcesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        kubernetes: {
            value: guarddutyOrganizationConfigurationDatasourcesKubernetesToHclTerraform(struct.kubernetes),
            isBlock: true,
            type: "list",
            storageClassType: "GuarddutyOrganizationConfigurationDatasourcesKubernetesList",
        },
        malware_protection: {
            value: guarddutyOrganizationConfigurationDatasourcesMalwareProtectionToHclTerraform(struct.malwareProtection),
            isBlock: true,
            type: "list",
            storageClassType: "GuarddutyOrganizationConfigurationDatasourcesMalwareProtectionList",
        },
        s3_logs: {
            value: guarddutyOrganizationConfigurationDatasourcesS3LogsToHclTerraform(struct.s3Logs),
            isBlock: true,
            type: "list",
            storageClassType: "GuarddutyOrganizationConfigurationDatasourcesS3LogsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.guarddutyOrganizationConfigurationDatasourcesToHclTerraform = guarddutyOrganizationConfigurationDatasourcesToHclTerraform;
class GuarddutyOrganizationConfigurationDatasourcesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // kubernetes - computed: false, optional: true, required: false
        this._kubernetes = new GuarddutyOrganizationConfigurationDatasourcesKubernetesOutputReference(this, "kubernetes");
        // malware_protection - computed: false, optional: true, required: false
        this._malwareProtection = new GuarddutyOrganizationConfigurationDatasourcesMalwareProtectionOutputReference(this, "malware_protection");
        // s3_logs - computed: false, optional: true, required: false
        this._s3Logs = new GuarddutyOrganizationConfigurationDatasourcesS3LogsOutputReference(this, "s3_logs");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kubernetes?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.kubernetes = this._kubernetes?.internalValue;
        }
        if (this._malwareProtection?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.malwareProtection = this._malwareProtection?.internalValue;
        }
        if (this._s3Logs?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3Logs = this._s3Logs?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kubernetes.internalValue = undefined;
            this._malwareProtection.internalValue = undefined;
            this._s3Logs.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kubernetes.internalValue = value.kubernetes;
            this._malwareProtection.internalValue = value.malwareProtection;
            this._s3Logs.internalValue = value.s3Logs;
        }
    }
    get kubernetes() {
        return this._kubernetes;
    }
    putKubernetes(value) {
        this._kubernetes.internalValue = value;
    }
    resetKubernetes() {
        this._kubernetes.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kubernetesInput() {
        return this._kubernetes.internalValue;
    }
    get malwareProtection() {
        return this._malwareProtection;
    }
    putMalwareProtection(value) {
        this._malwareProtection.internalValue = value;
    }
    resetMalwareProtection() {
        this._malwareProtection.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get malwareProtectionInput() {
        return this._malwareProtection.internalValue;
    }
    get s3Logs() {
        return this._s3Logs;
    }
    putS3Logs(value) {
        this._s3Logs.internalValue = value;
    }
    resetS3Logs() {
        this._s3Logs.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3LogsInput() {
        return this._s3Logs.internalValue;
    }
}
exports.GuarddutyOrganizationConfigurationDatasourcesOutputReference = GuarddutyOrganizationConfigurationDatasourcesOutputReference;
_g = JSII_RTTI_SYMBOL_1;
GuarddutyOrganizationConfigurationDatasourcesOutputReference[_g] = { fqn: "@cdktf/provider-aws.guarddutyOrganizationConfiguration.GuarddutyOrganizationConfigurationDatasourcesOutputReference", version: "19.15.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/guardduty_organization_configuration aws_guardduty_organization_configuration}
*/
class GuarddutyOrganizationConfiguration extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a GuarddutyOrganizationConfiguration resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the GuarddutyOrganizationConfiguration to import
    * @param importFromId The id of the existing GuarddutyOrganizationConfiguration that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/guardduty_organization_configuration#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the GuarddutyOrganizationConfiguration to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_guardduty_organization_configuration", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/guardduty_organization_configuration aws_guardduty_organization_configuration} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options GuarddutyOrganizationConfigurationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_guardduty_organization_configuration',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // datasources - computed: false, optional: true, required: false
        this._datasources = new GuarddutyOrganizationConfigurationDatasourcesOutputReference(this, "datasources");
        this._autoEnable = config.autoEnable;
        this._autoEnableOrganizationMembers = config.autoEnableOrganizationMembers;
        this._detectorId = config.detectorId;
        this._id = config.id;
        this._datasources.internalValue = config.datasources;
    }
    get autoEnable() {
        return this.getBooleanAttribute('auto_enable');
    }
    set autoEnable(value) {
        this._autoEnable = value;
    }
    resetAutoEnable() {
        this._autoEnable = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoEnableInput() {
        return this._autoEnable;
    }
    get autoEnableOrganizationMembers() {
        return this.getStringAttribute('auto_enable_organization_members');
    }
    set autoEnableOrganizationMembers(value) {
        this._autoEnableOrganizationMembers = value;
    }
    resetAutoEnableOrganizationMembers() {
        this._autoEnableOrganizationMembers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoEnableOrganizationMembersInput() {
        return this._autoEnableOrganizationMembers;
    }
    get detectorId() {
        return this.getStringAttribute('detector_id');
    }
    set detectorId(value) {
        this._detectorId = value;
    }
    // Temporarily expose input value. Use with caution.
    get detectorIdInput() {
        return this._detectorId;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get datasources() {
        return this._datasources;
    }
    putDatasources(value) {
        this._datasources.internalValue = value;
    }
    resetDatasources() {
        this._datasources.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get datasourcesInput() {
        return this._datasources.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            auto_enable: cdktf.booleanToTerraform(this._autoEnable),
            auto_enable_organization_members: cdktf.stringToTerraform(this._autoEnableOrganizationMembers),
            detector_id: cdktf.stringToTerraform(this._detectorId),
            id: cdktf.stringToTerraform(this._id),
            datasources: guarddutyOrganizationConfigurationDatasourcesToTerraform(this._datasources.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            auto_enable: {
                value: cdktf.booleanToHclTerraform(this._autoEnable),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            auto_enable_organization_members: {
                value: cdktf.stringToHclTerraform(this._autoEnableOrganizationMembers),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            detector_id: {
                value: cdktf.stringToHclTerraform(this._detectorId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            datasources: {
                value: guarddutyOrganizationConfigurationDatasourcesToHclTerraform(this._datasources.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "GuarddutyOrganizationConfigurationDatasourcesList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.GuarddutyOrganizationConfiguration = GuarddutyOrganizationConfiguration;
_h = JSII_RTTI_SYMBOL_1;
GuarddutyOrganizationConfiguration[_h] = { fqn: "@cdktf/provider-aws.guarddutyOrganizationConfiguration.GuarddutyOrganizationConfiguration", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
GuarddutyOrganizationConfiguration.tfResourceType = "aws_guardduty_organization_configuration";
//# sourceMappingURL=data:application/json;base64,