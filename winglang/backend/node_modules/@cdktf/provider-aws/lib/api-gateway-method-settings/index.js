"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiGatewayMethodSettings = exports.ApiGatewayMethodSettingsSettingsOutputReference = exports.apiGatewayMethodSettingsSettingsToHclTerraform = exports.apiGatewayMethodSettingsSettingsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function apiGatewayMethodSettingsSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cache_data_encrypted: cdktf.booleanToTerraform(struct.cacheDataEncrypted),
        cache_ttl_in_seconds: cdktf.numberToTerraform(struct.cacheTtlInSeconds),
        caching_enabled: cdktf.booleanToTerraform(struct.cachingEnabled),
        data_trace_enabled: cdktf.booleanToTerraform(struct.dataTraceEnabled),
        logging_level: cdktf.stringToTerraform(struct.loggingLevel),
        metrics_enabled: cdktf.booleanToTerraform(struct.metricsEnabled),
        require_authorization_for_cache_control: cdktf.booleanToTerraform(struct.requireAuthorizationForCacheControl),
        throttling_burst_limit: cdktf.numberToTerraform(struct.throttlingBurstLimit),
        throttling_rate_limit: cdktf.numberToTerraform(struct.throttlingRateLimit),
        unauthorized_cache_control_header_strategy: cdktf.stringToTerraform(struct.unauthorizedCacheControlHeaderStrategy),
    };
}
exports.apiGatewayMethodSettingsSettingsToTerraform = apiGatewayMethodSettingsSettingsToTerraform;
function apiGatewayMethodSettingsSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cache_data_encrypted: {
            value: cdktf.booleanToHclTerraform(struct.cacheDataEncrypted),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        cache_ttl_in_seconds: {
            value: cdktf.numberToHclTerraform(struct.cacheTtlInSeconds),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        caching_enabled: {
            value: cdktf.booleanToHclTerraform(struct.cachingEnabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        data_trace_enabled: {
            value: cdktf.booleanToHclTerraform(struct.dataTraceEnabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        logging_level: {
            value: cdktf.stringToHclTerraform(struct.loggingLevel),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        metrics_enabled: {
            value: cdktf.booleanToHclTerraform(struct.metricsEnabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        require_authorization_for_cache_control: {
            value: cdktf.booleanToHclTerraform(struct.requireAuthorizationForCacheControl),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        throttling_burst_limit: {
            value: cdktf.numberToHclTerraform(struct.throttlingBurstLimit),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        throttling_rate_limit: {
            value: cdktf.numberToHclTerraform(struct.throttlingRateLimit),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        unauthorized_cache_control_header_strategy: {
            value: cdktf.stringToHclTerraform(struct.unauthorizedCacheControlHeaderStrategy),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.apiGatewayMethodSettingsSettingsToHclTerraform = apiGatewayMethodSettingsSettingsToHclTerraform;
class ApiGatewayMethodSettingsSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cacheDataEncrypted !== undefined) {
            hasAnyValues = true;
            internalValueResult.cacheDataEncrypted = this._cacheDataEncrypted;
        }
        if (this._cacheTtlInSeconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.cacheTtlInSeconds = this._cacheTtlInSeconds;
        }
        if (this._cachingEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.cachingEnabled = this._cachingEnabled;
        }
        if (this._dataTraceEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataTraceEnabled = this._dataTraceEnabled;
        }
        if (this._loggingLevel !== undefined) {
            hasAnyValues = true;
            internalValueResult.loggingLevel = this._loggingLevel;
        }
        if (this._metricsEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.metricsEnabled = this._metricsEnabled;
        }
        if (this._requireAuthorizationForCacheControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.requireAuthorizationForCacheControl = this._requireAuthorizationForCacheControl;
        }
        if (this._throttlingBurstLimit !== undefined) {
            hasAnyValues = true;
            internalValueResult.throttlingBurstLimit = this._throttlingBurstLimit;
        }
        if (this._throttlingRateLimit !== undefined) {
            hasAnyValues = true;
            internalValueResult.throttlingRateLimit = this._throttlingRateLimit;
        }
        if (this._unauthorizedCacheControlHeaderStrategy !== undefined) {
            hasAnyValues = true;
            internalValueResult.unauthorizedCacheControlHeaderStrategy = this._unauthorizedCacheControlHeaderStrategy;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cacheDataEncrypted = undefined;
            this._cacheTtlInSeconds = undefined;
            this._cachingEnabled = undefined;
            this._dataTraceEnabled = undefined;
            this._loggingLevel = undefined;
            this._metricsEnabled = undefined;
            this._requireAuthorizationForCacheControl = undefined;
            this._throttlingBurstLimit = undefined;
            this._throttlingRateLimit = undefined;
            this._unauthorizedCacheControlHeaderStrategy = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cacheDataEncrypted = value.cacheDataEncrypted;
            this._cacheTtlInSeconds = value.cacheTtlInSeconds;
            this._cachingEnabled = value.cachingEnabled;
            this._dataTraceEnabled = value.dataTraceEnabled;
            this._loggingLevel = value.loggingLevel;
            this._metricsEnabled = value.metricsEnabled;
            this._requireAuthorizationForCacheControl = value.requireAuthorizationForCacheControl;
            this._throttlingBurstLimit = value.throttlingBurstLimit;
            this._throttlingRateLimit = value.throttlingRateLimit;
            this._unauthorizedCacheControlHeaderStrategy = value.unauthorizedCacheControlHeaderStrategy;
        }
    }
    get cacheDataEncrypted() {
        return this.getBooleanAttribute('cache_data_encrypted');
    }
    set cacheDataEncrypted(value) {
        this._cacheDataEncrypted = value;
    }
    resetCacheDataEncrypted() {
        this._cacheDataEncrypted = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cacheDataEncryptedInput() {
        return this._cacheDataEncrypted;
    }
    get cacheTtlInSeconds() {
        return this.getNumberAttribute('cache_ttl_in_seconds');
    }
    set cacheTtlInSeconds(value) {
        this._cacheTtlInSeconds = value;
    }
    resetCacheTtlInSeconds() {
        this._cacheTtlInSeconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cacheTtlInSecondsInput() {
        return this._cacheTtlInSeconds;
    }
    get cachingEnabled() {
        return this.getBooleanAttribute('caching_enabled');
    }
    set cachingEnabled(value) {
        this._cachingEnabled = value;
    }
    resetCachingEnabled() {
        this._cachingEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cachingEnabledInput() {
        return this._cachingEnabled;
    }
    get dataTraceEnabled() {
        return this.getBooleanAttribute('data_trace_enabled');
    }
    set dataTraceEnabled(value) {
        this._dataTraceEnabled = value;
    }
    resetDataTraceEnabled() {
        this._dataTraceEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataTraceEnabledInput() {
        return this._dataTraceEnabled;
    }
    get loggingLevel() {
        return this.getStringAttribute('logging_level');
    }
    set loggingLevel(value) {
        this._loggingLevel = value;
    }
    resetLoggingLevel() {
        this._loggingLevel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loggingLevelInput() {
        return this._loggingLevel;
    }
    get metricsEnabled() {
        return this.getBooleanAttribute('metrics_enabled');
    }
    set metricsEnabled(value) {
        this._metricsEnabled = value;
    }
    resetMetricsEnabled() {
        this._metricsEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metricsEnabledInput() {
        return this._metricsEnabled;
    }
    get requireAuthorizationForCacheControl() {
        return this.getBooleanAttribute('require_authorization_for_cache_control');
    }
    set requireAuthorizationForCacheControl(value) {
        this._requireAuthorizationForCacheControl = value;
    }
    resetRequireAuthorizationForCacheControl() {
        this._requireAuthorizationForCacheControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requireAuthorizationForCacheControlInput() {
        return this._requireAuthorizationForCacheControl;
    }
    get throttlingBurstLimit() {
        return this.getNumberAttribute('throttling_burst_limit');
    }
    set throttlingBurstLimit(value) {
        this._throttlingBurstLimit = value;
    }
    resetThrottlingBurstLimit() {
        this._throttlingBurstLimit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get throttlingBurstLimitInput() {
        return this._throttlingBurstLimit;
    }
    get throttlingRateLimit() {
        return this.getNumberAttribute('throttling_rate_limit');
    }
    set throttlingRateLimit(value) {
        this._throttlingRateLimit = value;
    }
    resetThrottlingRateLimit() {
        this._throttlingRateLimit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get throttlingRateLimitInput() {
        return this._throttlingRateLimit;
    }
    get unauthorizedCacheControlHeaderStrategy() {
        return this.getStringAttribute('unauthorized_cache_control_header_strategy');
    }
    set unauthorizedCacheControlHeaderStrategy(value) {
        this._unauthorizedCacheControlHeaderStrategy = value;
    }
    resetUnauthorizedCacheControlHeaderStrategy() {
        this._unauthorizedCacheControlHeaderStrategy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get unauthorizedCacheControlHeaderStrategyInput() {
        return this._unauthorizedCacheControlHeaderStrategy;
    }
}
exports.ApiGatewayMethodSettingsSettingsOutputReference = ApiGatewayMethodSettingsSettingsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
ApiGatewayMethodSettingsSettingsOutputReference[_a] = { fqn: "@cdktf/provider-aws.apiGatewayMethodSettings.ApiGatewayMethodSettingsSettingsOutputReference", version: "19.15.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/api_gateway_method_settings aws_api_gateway_method_settings}
*/
class ApiGatewayMethodSettings extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a ApiGatewayMethodSettings resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the ApiGatewayMethodSettings to import
    * @param importFromId The id of the existing ApiGatewayMethodSettings that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/api_gateway_method_settings#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the ApiGatewayMethodSettings to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_api_gateway_method_settings", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/api_gateway_method_settings aws_api_gateway_method_settings} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ApiGatewayMethodSettingsConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_api_gateway_method_settings',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // settings - computed: false, optional: false, required: true
        this._settings = new ApiGatewayMethodSettingsSettingsOutputReference(this, "settings");
        this._id = config.id;
        this._methodPath = config.methodPath;
        this._restApiId = config.restApiId;
        this._stageName = config.stageName;
        this._settings.internalValue = config.settings;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get methodPath() {
        return this.getStringAttribute('method_path');
    }
    set methodPath(value) {
        this._methodPath = value;
    }
    // Temporarily expose input value. Use with caution.
    get methodPathInput() {
        return this._methodPath;
    }
    get restApiId() {
        return this.getStringAttribute('rest_api_id');
    }
    set restApiId(value) {
        this._restApiId = value;
    }
    // Temporarily expose input value. Use with caution.
    get restApiIdInput() {
        return this._restApiId;
    }
    get stageName() {
        return this.getStringAttribute('stage_name');
    }
    set stageName(value) {
        this._stageName = value;
    }
    // Temporarily expose input value. Use with caution.
    get stageNameInput() {
        return this._stageName;
    }
    get settings() {
        return this._settings;
    }
    putSettings(value) {
        this._settings.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get settingsInput() {
        return this._settings.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
            method_path: cdktf.stringToTerraform(this._methodPath),
            rest_api_id: cdktf.stringToTerraform(this._restApiId),
            stage_name: cdktf.stringToTerraform(this._stageName),
            settings: apiGatewayMethodSettingsSettingsToTerraform(this._settings.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            method_path: {
                value: cdktf.stringToHclTerraform(this._methodPath),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            rest_api_id: {
                value: cdktf.stringToHclTerraform(this._restApiId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            stage_name: {
                value: cdktf.stringToHclTerraform(this._stageName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            settings: {
                value: apiGatewayMethodSettingsSettingsToHclTerraform(this._settings.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ApiGatewayMethodSettingsSettingsList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.ApiGatewayMethodSettings = ApiGatewayMethodSettings;
_b = JSII_RTTI_SYMBOL_1;
ApiGatewayMethodSettings[_b] = { fqn: "@cdktf/provider-aws.apiGatewayMethodSettings.ApiGatewayMethodSettings", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
ApiGatewayMethodSettings.tfResourceType = "aws_api_gateway_method_settings";
//# sourceMappingURL=data:application/json;base64,