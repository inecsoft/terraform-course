"use strict";
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsAuditmanagerFramework = exports.DataAwsAuditmanagerFrameworkControlSetsList = exports.DataAwsAuditmanagerFrameworkControlSetsOutputReference = exports.dataAwsAuditmanagerFrameworkControlSetsToHclTerraform = exports.dataAwsAuditmanagerFrameworkControlSetsToTerraform = exports.DataAwsAuditmanagerFrameworkControlSetsControlsList = exports.DataAwsAuditmanagerFrameworkControlSetsControlsOutputReference = exports.dataAwsAuditmanagerFrameworkControlSetsControlsToHclTerraform = exports.dataAwsAuditmanagerFrameworkControlSetsControlsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function dataAwsAuditmanagerFrameworkControlSetsControlsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataAwsAuditmanagerFrameworkControlSetsControlsToTerraform = dataAwsAuditmanagerFrameworkControlSetsControlsToTerraform;
function dataAwsAuditmanagerFrameworkControlSetsControlsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.dataAwsAuditmanagerFrameworkControlSetsControlsToHclTerraform = dataAwsAuditmanagerFrameworkControlSetsControlsToHclTerraform;
class DataAwsAuditmanagerFrameworkControlSetsControlsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
        }
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
}
exports.DataAwsAuditmanagerFrameworkControlSetsControlsOutputReference = DataAwsAuditmanagerFrameworkControlSetsControlsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
DataAwsAuditmanagerFrameworkControlSetsControlsOutputReference[_a] = { fqn: "@cdktf/provider-aws.dataAwsAuditmanagerFramework.DataAwsAuditmanagerFrameworkControlSetsControlsOutputReference", version: "19.15.0" };
class DataAwsAuditmanagerFrameworkControlSetsControlsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataAwsAuditmanagerFrameworkControlSetsControlsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataAwsAuditmanagerFrameworkControlSetsControlsList = DataAwsAuditmanagerFrameworkControlSetsControlsList;
_b = JSII_RTTI_SYMBOL_1;
DataAwsAuditmanagerFrameworkControlSetsControlsList[_b] = { fqn: "@cdktf/provider-aws.dataAwsAuditmanagerFramework.DataAwsAuditmanagerFrameworkControlSetsControlsList", version: "19.15.0" };
function dataAwsAuditmanagerFrameworkControlSetsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        controls: cdktf.listMapper(dataAwsAuditmanagerFrameworkControlSetsControlsToTerraform, true)(struct.controls),
    };
}
exports.dataAwsAuditmanagerFrameworkControlSetsToTerraform = dataAwsAuditmanagerFrameworkControlSetsToTerraform;
function dataAwsAuditmanagerFrameworkControlSetsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        controls: {
            value: cdktf.listMapperHcl(dataAwsAuditmanagerFrameworkControlSetsControlsToHclTerraform, true)(struct.controls),
            isBlock: true,
            type: "set",
            storageClassType: "DataAwsAuditmanagerFrameworkControlSetsControlsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataAwsAuditmanagerFrameworkControlSetsToHclTerraform = dataAwsAuditmanagerFrameworkControlSetsToHclTerraform;
class DataAwsAuditmanagerFrameworkControlSetsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // controls - computed: false, optional: true, required: false
        this._controls = new DataAwsAuditmanagerFrameworkControlSetsControlsList(this, "controls", true);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._controls?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.controls = this._controls?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._controls.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._controls.internalValue = value.controls;
        }
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get controls() {
        return this._controls;
    }
    putControls(value) {
        this._controls.internalValue = value;
    }
    resetControls() {
        this._controls.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get controlsInput() {
        return this._controls.internalValue;
    }
}
exports.DataAwsAuditmanagerFrameworkControlSetsOutputReference = DataAwsAuditmanagerFrameworkControlSetsOutputReference;
_c = JSII_RTTI_SYMBOL_1;
DataAwsAuditmanagerFrameworkControlSetsOutputReference[_c] = { fqn: "@cdktf/provider-aws.dataAwsAuditmanagerFramework.DataAwsAuditmanagerFrameworkControlSetsOutputReference", version: "19.15.0" };
class DataAwsAuditmanagerFrameworkControlSetsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataAwsAuditmanagerFrameworkControlSetsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataAwsAuditmanagerFrameworkControlSetsList = DataAwsAuditmanagerFrameworkControlSetsList;
_d = JSII_RTTI_SYMBOL_1;
DataAwsAuditmanagerFrameworkControlSetsList[_d] = { fqn: "@cdktf/provider-aws.dataAwsAuditmanagerFramework.DataAwsAuditmanagerFrameworkControlSetsList", version: "19.15.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/data-sources/auditmanager_framework aws_auditmanager_framework}
*/
class DataAwsAuditmanagerFramework extends cdktf.TerraformDataSource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a DataAwsAuditmanagerFramework resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the DataAwsAuditmanagerFramework to import
    * @param importFromId The id of the existing DataAwsAuditmanagerFramework that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/data-sources/auditmanager_framework#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the DataAwsAuditmanagerFramework to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_auditmanager_framework", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/data-sources/auditmanager_framework aws_auditmanager_framework} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataAwsAuditmanagerFrameworkConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_auditmanager_framework',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // tags - computed: true, optional: false, required: false
        this._tags = new cdktf.StringMap(this, "tags");
        // control_sets - computed: false, optional: true, required: false
        this._controlSets = new DataAwsAuditmanagerFrameworkControlSetsList(this, "control_sets", true);
        this._frameworkType = config.frameworkType;
        this._name = config.name;
        this._controlSets.internalValue = config.controlSets;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // compliance_type - computed: true, optional: false, required: false
    get complianceType() {
        return this.getStringAttribute('compliance_type');
    }
    // description - computed: true, optional: false, required: false
    get description() {
        return this.getStringAttribute('description');
    }
    get frameworkType() {
        return this.getStringAttribute('framework_type');
    }
    set frameworkType(value) {
        this._frameworkType = value;
    }
    // Temporarily expose input value. Use with caution.
    get frameworkTypeInput() {
        return this._frameworkType;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get tags() {
        return this._tags;
    }
    get controlSets() {
        return this._controlSets;
    }
    putControlSets(value) {
        this._controlSets.internalValue = value;
    }
    resetControlSets() {
        this._controlSets.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get controlSetsInput() {
        return this._controlSets.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            framework_type: cdktf.stringToTerraform(this._frameworkType),
            name: cdktf.stringToTerraform(this._name),
            control_sets: cdktf.listMapper(dataAwsAuditmanagerFrameworkControlSetsToTerraform, true)(this._controlSets.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            framework_type: {
                value: cdktf.stringToHclTerraform(this._frameworkType),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            control_sets: {
                value: cdktf.listMapperHcl(dataAwsAuditmanagerFrameworkControlSetsToHclTerraform, true)(this._controlSets.internalValue),
                isBlock: true,
                type: "set",
                storageClassType: "DataAwsAuditmanagerFrameworkControlSetsList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.DataAwsAuditmanagerFramework = DataAwsAuditmanagerFramework;
_e = JSII_RTTI_SYMBOL_1;
DataAwsAuditmanagerFramework[_e] = { fqn: "@cdktf/provider-aws.dataAwsAuditmanagerFramework.DataAwsAuditmanagerFramework", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
DataAwsAuditmanagerFramework.tfResourceType = "aws_auditmanager_framework";
//# sourceMappingURL=data:application/json;base64,