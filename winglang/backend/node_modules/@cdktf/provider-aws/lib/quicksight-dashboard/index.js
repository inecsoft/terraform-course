"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3;
Object.defineProperty(exports, "__esModule", { value: true });
exports.quicksightDashboardParametersToTerraform = exports.QuicksightDashboardParametersStringParametersList = exports.QuicksightDashboardParametersStringParametersOutputReference = exports.quicksightDashboardParametersStringParametersToHclTerraform = exports.quicksightDashboardParametersStringParametersToTerraform = exports.QuicksightDashboardParametersIntegerParametersList = exports.QuicksightDashboardParametersIntegerParametersOutputReference = exports.quicksightDashboardParametersIntegerParametersToHclTerraform = exports.quicksightDashboardParametersIntegerParametersToTerraform = exports.QuicksightDashboardParametersDecimalParametersList = exports.QuicksightDashboardParametersDecimalParametersOutputReference = exports.quicksightDashboardParametersDecimalParametersToHclTerraform = exports.quicksightDashboardParametersDecimalParametersToTerraform = exports.QuicksightDashboardParametersDateTimeParametersList = exports.QuicksightDashboardParametersDateTimeParametersOutputReference = exports.quicksightDashboardParametersDateTimeParametersToHclTerraform = exports.quicksightDashboardParametersDateTimeParametersToTerraform = exports.QuicksightDashboardDashboardPublishOptionsOutputReference = exports.quicksightDashboardDashboardPublishOptionsToHclTerraform = exports.quicksightDashboardDashboardPublishOptionsToTerraform = exports.QuicksightDashboardDashboardPublishOptionsVisualMenuOptionOutputReference = exports.quicksightDashboardDashboardPublishOptionsVisualMenuOptionToHclTerraform = exports.quicksightDashboardDashboardPublishOptionsVisualMenuOptionToTerraform = exports.QuicksightDashboardDashboardPublishOptionsVisualAxisSortOptionOutputReference = exports.quicksightDashboardDashboardPublishOptionsVisualAxisSortOptionToHclTerraform = exports.quicksightDashboardDashboardPublishOptionsVisualAxisSortOptionToTerraform = exports.QuicksightDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutputReference = exports.quicksightDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionToHclTerraform = exports.quicksightDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionToTerraform = exports.QuicksightDashboardDashboardPublishOptionsSheetControlsOptionOutputReference = exports.quicksightDashboardDashboardPublishOptionsSheetControlsOptionToHclTerraform = exports.quicksightDashboardDashboardPublishOptionsSheetControlsOptionToTerraform = exports.QuicksightDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutputReference = exports.quicksightDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionToHclTerraform = exports.quicksightDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionToTerraform = exports.QuicksightDashboardDashboardPublishOptionsExportToCsvOptionOutputReference = exports.quicksightDashboardDashboardPublishOptionsExportToCsvOptionToHclTerraform = exports.quicksightDashboardDashboardPublishOptionsExportToCsvOptionToTerraform = exports.QuicksightDashboardDashboardPublishOptionsDataPointTooltipOptionOutputReference = exports.quicksightDashboardDashboardPublishOptionsDataPointTooltipOptionToHclTerraform = exports.quicksightDashboardDashboardPublishOptionsDataPointTooltipOptionToTerraform = exports.QuicksightDashboardDashboardPublishOptionsDataPointMenuLabelOptionOutputReference = exports.quicksightDashboardDashboardPublishOptionsDataPointMenuLabelOptionToHclTerraform = exports.quicksightDashboardDashboardPublishOptionsDataPointMenuLabelOptionToTerraform = exports.QuicksightDashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutputReference = exports.quicksightDashboardDashboardPublishOptionsDataPointDrillUpDownOptionToHclTerraform = exports.quicksightDashboardDashboardPublishOptionsDataPointDrillUpDownOptionToTerraform = exports.QuicksightDashboardDashboardPublishOptionsAdHocFilteringOptionOutputReference = exports.quicksightDashboardDashboardPublishOptionsAdHocFilteringOptionToHclTerraform = exports.quicksightDashboardDashboardPublishOptionsAdHocFilteringOptionToTerraform = void 0;
exports.QuicksightDashboard = exports.QuicksightDashboardTimeoutsOutputReference = exports.quicksightDashboardTimeoutsToHclTerraform = exports.quicksightDashboardTimeoutsToTerraform = exports.QuicksightDashboardSourceEntityOutputReference = exports.quicksightDashboardSourceEntityToHclTerraform = exports.quicksightDashboardSourceEntityToTerraform = exports.QuicksightDashboardSourceEntitySourceTemplateOutputReference = exports.quicksightDashboardSourceEntitySourceTemplateToHclTerraform = exports.quicksightDashboardSourceEntitySourceTemplateToTerraform = exports.QuicksightDashboardSourceEntitySourceTemplateDataSetReferencesList = exports.QuicksightDashboardSourceEntitySourceTemplateDataSetReferencesOutputReference = exports.quicksightDashboardSourceEntitySourceTemplateDataSetReferencesToHclTerraform = exports.quicksightDashboardSourceEntitySourceTemplateDataSetReferencesToTerraform = exports.QuicksightDashboardPermissionsList = exports.QuicksightDashboardPermissionsOutputReference = exports.quicksightDashboardPermissionsToHclTerraform = exports.quicksightDashboardPermissionsToTerraform = exports.QuicksightDashboardParametersOutputReference = exports.quicksightDashboardParametersToHclTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function quicksightDashboardDashboardPublishOptionsAdHocFilteringOptionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        availability_status: cdktf.stringToTerraform(struct.availabilityStatus),
    };
}
exports.quicksightDashboardDashboardPublishOptionsAdHocFilteringOptionToTerraform = quicksightDashboardDashboardPublishOptionsAdHocFilteringOptionToTerraform;
function quicksightDashboardDashboardPublishOptionsAdHocFilteringOptionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        availability_status: {
            value: cdktf.stringToHclTerraform(struct.availabilityStatus),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.quicksightDashboardDashboardPublishOptionsAdHocFilteringOptionToHclTerraform = quicksightDashboardDashboardPublishOptionsAdHocFilteringOptionToHclTerraform;
class QuicksightDashboardDashboardPublishOptionsAdHocFilteringOptionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._availabilityStatus !== undefined) {
            hasAnyValues = true;
            internalValueResult.availabilityStatus = this._availabilityStatus;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._availabilityStatus = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._availabilityStatus = value.availabilityStatus;
        }
    }
    get availabilityStatus() {
        return this.getStringAttribute('availability_status');
    }
    set availabilityStatus(value) {
        this._availabilityStatus = value;
    }
    resetAvailabilityStatus() {
        this._availabilityStatus = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get availabilityStatusInput() {
        return this._availabilityStatus;
    }
}
exports.QuicksightDashboardDashboardPublishOptionsAdHocFilteringOptionOutputReference = QuicksightDashboardDashboardPublishOptionsAdHocFilteringOptionOutputReference;
_a = JSII_RTTI_SYMBOL_1;
QuicksightDashboardDashboardPublishOptionsAdHocFilteringOptionOutputReference[_a] = { fqn: "@cdktf/provider-aws.quicksightDashboard.QuicksightDashboardDashboardPublishOptionsAdHocFilteringOptionOutputReference", version: "19.15.0" };
function quicksightDashboardDashboardPublishOptionsDataPointDrillUpDownOptionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        availability_status: cdktf.stringToTerraform(struct.availabilityStatus),
    };
}
exports.quicksightDashboardDashboardPublishOptionsDataPointDrillUpDownOptionToTerraform = quicksightDashboardDashboardPublishOptionsDataPointDrillUpDownOptionToTerraform;
function quicksightDashboardDashboardPublishOptionsDataPointDrillUpDownOptionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        availability_status: {
            value: cdktf.stringToHclTerraform(struct.availabilityStatus),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.quicksightDashboardDashboardPublishOptionsDataPointDrillUpDownOptionToHclTerraform = quicksightDashboardDashboardPublishOptionsDataPointDrillUpDownOptionToHclTerraform;
class QuicksightDashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._availabilityStatus !== undefined) {
            hasAnyValues = true;
            internalValueResult.availabilityStatus = this._availabilityStatus;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._availabilityStatus = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._availabilityStatus = value.availabilityStatus;
        }
    }
    get availabilityStatus() {
        return this.getStringAttribute('availability_status');
    }
    set availabilityStatus(value) {
        this._availabilityStatus = value;
    }
    resetAvailabilityStatus() {
        this._availabilityStatus = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get availabilityStatusInput() {
        return this._availabilityStatus;
    }
}
exports.QuicksightDashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutputReference = QuicksightDashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutputReference;
_b = JSII_RTTI_SYMBOL_1;
QuicksightDashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutputReference[_b] = { fqn: "@cdktf/provider-aws.quicksightDashboard.QuicksightDashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutputReference", version: "19.15.0" };
function quicksightDashboardDashboardPublishOptionsDataPointMenuLabelOptionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        availability_status: cdktf.stringToTerraform(struct.availabilityStatus),
    };
}
exports.quicksightDashboardDashboardPublishOptionsDataPointMenuLabelOptionToTerraform = quicksightDashboardDashboardPublishOptionsDataPointMenuLabelOptionToTerraform;
function quicksightDashboardDashboardPublishOptionsDataPointMenuLabelOptionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        availability_status: {
            value: cdktf.stringToHclTerraform(struct.availabilityStatus),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.quicksightDashboardDashboardPublishOptionsDataPointMenuLabelOptionToHclTerraform = quicksightDashboardDashboardPublishOptionsDataPointMenuLabelOptionToHclTerraform;
class QuicksightDashboardDashboardPublishOptionsDataPointMenuLabelOptionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._availabilityStatus !== undefined) {
            hasAnyValues = true;
            internalValueResult.availabilityStatus = this._availabilityStatus;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._availabilityStatus = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._availabilityStatus = value.availabilityStatus;
        }
    }
    get availabilityStatus() {
        return this.getStringAttribute('availability_status');
    }
    set availabilityStatus(value) {
        this._availabilityStatus = value;
    }
    resetAvailabilityStatus() {
        this._availabilityStatus = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get availabilityStatusInput() {
        return this._availabilityStatus;
    }
}
exports.QuicksightDashboardDashboardPublishOptionsDataPointMenuLabelOptionOutputReference = QuicksightDashboardDashboardPublishOptionsDataPointMenuLabelOptionOutputReference;
_c = JSII_RTTI_SYMBOL_1;
QuicksightDashboardDashboardPublishOptionsDataPointMenuLabelOptionOutputReference[_c] = { fqn: "@cdktf/provider-aws.quicksightDashboard.QuicksightDashboardDashboardPublishOptionsDataPointMenuLabelOptionOutputReference", version: "19.15.0" };
function quicksightDashboardDashboardPublishOptionsDataPointTooltipOptionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        availability_status: cdktf.stringToTerraform(struct.availabilityStatus),
    };
}
exports.quicksightDashboardDashboardPublishOptionsDataPointTooltipOptionToTerraform = quicksightDashboardDashboardPublishOptionsDataPointTooltipOptionToTerraform;
function quicksightDashboardDashboardPublishOptionsDataPointTooltipOptionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        availability_status: {
            value: cdktf.stringToHclTerraform(struct.availabilityStatus),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.quicksightDashboardDashboardPublishOptionsDataPointTooltipOptionToHclTerraform = quicksightDashboardDashboardPublishOptionsDataPointTooltipOptionToHclTerraform;
class QuicksightDashboardDashboardPublishOptionsDataPointTooltipOptionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._availabilityStatus !== undefined) {
            hasAnyValues = true;
            internalValueResult.availabilityStatus = this._availabilityStatus;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._availabilityStatus = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._availabilityStatus = value.availabilityStatus;
        }
    }
    get availabilityStatus() {
        return this.getStringAttribute('availability_status');
    }
    set availabilityStatus(value) {
        this._availabilityStatus = value;
    }
    resetAvailabilityStatus() {
        this._availabilityStatus = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get availabilityStatusInput() {
        return this._availabilityStatus;
    }
}
exports.QuicksightDashboardDashboardPublishOptionsDataPointTooltipOptionOutputReference = QuicksightDashboardDashboardPublishOptionsDataPointTooltipOptionOutputReference;
_d = JSII_RTTI_SYMBOL_1;
QuicksightDashboardDashboardPublishOptionsDataPointTooltipOptionOutputReference[_d] = { fqn: "@cdktf/provider-aws.quicksightDashboard.QuicksightDashboardDashboardPublishOptionsDataPointTooltipOptionOutputReference", version: "19.15.0" };
function quicksightDashboardDashboardPublishOptionsExportToCsvOptionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        availability_status: cdktf.stringToTerraform(struct.availabilityStatus),
    };
}
exports.quicksightDashboardDashboardPublishOptionsExportToCsvOptionToTerraform = quicksightDashboardDashboardPublishOptionsExportToCsvOptionToTerraform;
function quicksightDashboardDashboardPublishOptionsExportToCsvOptionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        availability_status: {
            value: cdktf.stringToHclTerraform(struct.availabilityStatus),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.quicksightDashboardDashboardPublishOptionsExportToCsvOptionToHclTerraform = quicksightDashboardDashboardPublishOptionsExportToCsvOptionToHclTerraform;
class QuicksightDashboardDashboardPublishOptionsExportToCsvOptionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._availabilityStatus !== undefined) {
            hasAnyValues = true;
            internalValueResult.availabilityStatus = this._availabilityStatus;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._availabilityStatus = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._availabilityStatus = value.availabilityStatus;
        }
    }
    get availabilityStatus() {
        return this.getStringAttribute('availability_status');
    }
    set availabilityStatus(value) {
        this._availabilityStatus = value;
    }
    resetAvailabilityStatus() {
        this._availabilityStatus = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get availabilityStatusInput() {
        return this._availabilityStatus;
    }
}
exports.QuicksightDashboardDashboardPublishOptionsExportToCsvOptionOutputReference = QuicksightDashboardDashboardPublishOptionsExportToCsvOptionOutputReference;
_e = JSII_RTTI_SYMBOL_1;
QuicksightDashboardDashboardPublishOptionsExportToCsvOptionOutputReference[_e] = { fqn: "@cdktf/provider-aws.quicksightDashboard.QuicksightDashboardDashboardPublishOptionsExportToCsvOptionOutputReference", version: "19.15.0" };
function quicksightDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        availability_status: cdktf.stringToTerraform(struct.availabilityStatus),
    };
}
exports.quicksightDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionToTerraform = quicksightDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionToTerraform;
function quicksightDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        availability_status: {
            value: cdktf.stringToHclTerraform(struct.availabilityStatus),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.quicksightDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionToHclTerraform = quicksightDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionToHclTerraform;
class QuicksightDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._availabilityStatus !== undefined) {
            hasAnyValues = true;
            internalValueResult.availabilityStatus = this._availabilityStatus;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._availabilityStatus = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._availabilityStatus = value.availabilityStatus;
        }
    }
    get availabilityStatus() {
        return this.getStringAttribute('availability_status');
    }
    set availabilityStatus(value) {
        this._availabilityStatus = value;
    }
    resetAvailabilityStatus() {
        this._availabilityStatus = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get availabilityStatusInput() {
        return this._availabilityStatus;
    }
}
exports.QuicksightDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutputReference = QuicksightDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutputReference;
_f = JSII_RTTI_SYMBOL_1;
QuicksightDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutputReference[_f] = { fqn: "@cdktf/provider-aws.quicksightDashboard.QuicksightDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutputReference", version: "19.15.0" };
function quicksightDashboardDashboardPublishOptionsSheetControlsOptionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        visibility_state: cdktf.stringToTerraform(struct.visibilityState),
    };
}
exports.quicksightDashboardDashboardPublishOptionsSheetControlsOptionToTerraform = quicksightDashboardDashboardPublishOptionsSheetControlsOptionToTerraform;
function quicksightDashboardDashboardPublishOptionsSheetControlsOptionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        visibility_state: {
            value: cdktf.stringToHclTerraform(struct.visibilityState),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.quicksightDashboardDashboardPublishOptionsSheetControlsOptionToHclTerraform = quicksightDashboardDashboardPublishOptionsSheetControlsOptionToHclTerraform;
class QuicksightDashboardDashboardPublishOptionsSheetControlsOptionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._visibilityState !== undefined) {
            hasAnyValues = true;
            internalValueResult.visibilityState = this._visibilityState;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._visibilityState = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._visibilityState = value.visibilityState;
        }
    }
    get visibilityState() {
        return this.getStringAttribute('visibility_state');
    }
    set visibilityState(value) {
        this._visibilityState = value;
    }
    resetVisibilityState() {
        this._visibilityState = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get visibilityStateInput() {
        return this._visibilityState;
    }
}
exports.QuicksightDashboardDashboardPublishOptionsSheetControlsOptionOutputReference = QuicksightDashboardDashboardPublishOptionsSheetControlsOptionOutputReference;
_g = JSII_RTTI_SYMBOL_1;
QuicksightDashboardDashboardPublishOptionsSheetControlsOptionOutputReference[_g] = { fqn: "@cdktf/provider-aws.quicksightDashboard.QuicksightDashboardDashboardPublishOptionsSheetControlsOptionOutputReference", version: "19.15.0" };
function quicksightDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        availability_status: cdktf.stringToTerraform(struct.availabilityStatus),
    };
}
exports.quicksightDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionToTerraform = quicksightDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionToTerraform;
function quicksightDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        availability_status: {
            value: cdktf.stringToHclTerraform(struct.availabilityStatus),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.quicksightDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionToHclTerraform = quicksightDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionToHclTerraform;
class QuicksightDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._availabilityStatus !== undefined) {
            hasAnyValues = true;
            internalValueResult.availabilityStatus = this._availabilityStatus;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._availabilityStatus = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._availabilityStatus = value.availabilityStatus;
        }
    }
    get availabilityStatus() {
        return this.getStringAttribute('availability_status');
    }
    set availabilityStatus(value) {
        this._availabilityStatus = value;
    }
    resetAvailabilityStatus() {
        this._availabilityStatus = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get availabilityStatusInput() {
        return this._availabilityStatus;
    }
}
exports.QuicksightDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutputReference = QuicksightDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutputReference;
_h = JSII_RTTI_SYMBOL_1;
QuicksightDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutputReference[_h] = { fqn: "@cdktf/provider-aws.quicksightDashboard.QuicksightDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutputReference", version: "19.15.0" };
function quicksightDashboardDashboardPublishOptionsVisualAxisSortOptionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        availability_status: cdktf.stringToTerraform(struct.availabilityStatus),
    };
}
exports.quicksightDashboardDashboardPublishOptionsVisualAxisSortOptionToTerraform = quicksightDashboardDashboardPublishOptionsVisualAxisSortOptionToTerraform;
function quicksightDashboardDashboardPublishOptionsVisualAxisSortOptionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        availability_status: {
            value: cdktf.stringToHclTerraform(struct.availabilityStatus),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.quicksightDashboardDashboardPublishOptionsVisualAxisSortOptionToHclTerraform = quicksightDashboardDashboardPublishOptionsVisualAxisSortOptionToHclTerraform;
class QuicksightDashboardDashboardPublishOptionsVisualAxisSortOptionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._availabilityStatus !== undefined) {
            hasAnyValues = true;
            internalValueResult.availabilityStatus = this._availabilityStatus;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._availabilityStatus = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._availabilityStatus = value.availabilityStatus;
        }
    }
    get availabilityStatus() {
        return this.getStringAttribute('availability_status');
    }
    set availabilityStatus(value) {
        this._availabilityStatus = value;
    }
    resetAvailabilityStatus() {
        this._availabilityStatus = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get availabilityStatusInput() {
        return this._availabilityStatus;
    }
}
exports.QuicksightDashboardDashboardPublishOptionsVisualAxisSortOptionOutputReference = QuicksightDashboardDashboardPublishOptionsVisualAxisSortOptionOutputReference;
_j = JSII_RTTI_SYMBOL_1;
QuicksightDashboardDashboardPublishOptionsVisualAxisSortOptionOutputReference[_j] = { fqn: "@cdktf/provider-aws.quicksightDashboard.QuicksightDashboardDashboardPublishOptionsVisualAxisSortOptionOutputReference", version: "19.15.0" };
function quicksightDashboardDashboardPublishOptionsVisualMenuOptionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        availability_status: cdktf.stringToTerraform(struct.availabilityStatus),
    };
}
exports.quicksightDashboardDashboardPublishOptionsVisualMenuOptionToTerraform = quicksightDashboardDashboardPublishOptionsVisualMenuOptionToTerraform;
function quicksightDashboardDashboardPublishOptionsVisualMenuOptionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        availability_status: {
            value: cdktf.stringToHclTerraform(struct.availabilityStatus),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.quicksightDashboardDashboardPublishOptionsVisualMenuOptionToHclTerraform = quicksightDashboardDashboardPublishOptionsVisualMenuOptionToHclTerraform;
class QuicksightDashboardDashboardPublishOptionsVisualMenuOptionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._availabilityStatus !== undefined) {
            hasAnyValues = true;
            internalValueResult.availabilityStatus = this._availabilityStatus;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._availabilityStatus = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._availabilityStatus = value.availabilityStatus;
        }
    }
    get availabilityStatus() {
        return this.getStringAttribute('availability_status');
    }
    set availabilityStatus(value) {
        this._availabilityStatus = value;
    }
    resetAvailabilityStatus() {
        this._availabilityStatus = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get availabilityStatusInput() {
        return this._availabilityStatus;
    }
}
exports.QuicksightDashboardDashboardPublishOptionsVisualMenuOptionOutputReference = QuicksightDashboardDashboardPublishOptionsVisualMenuOptionOutputReference;
_k = JSII_RTTI_SYMBOL_1;
QuicksightDashboardDashboardPublishOptionsVisualMenuOptionOutputReference[_k] = { fqn: "@cdktf/provider-aws.quicksightDashboard.QuicksightDashboardDashboardPublishOptionsVisualMenuOptionOutputReference", version: "19.15.0" };
function quicksightDashboardDashboardPublishOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ad_hoc_filtering_option: quicksightDashboardDashboardPublishOptionsAdHocFilteringOptionToTerraform(struct.adHocFilteringOption),
        data_point_drill_up_down_option: quicksightDashboardDashboardPublishOptionsDataPointDrillUpDownOptionToTerraform(struct.dataPointDrillUpDownOption),
        data_point_menu_label_option: quicksightDashboardDashboardPublishOptionsDataPointMenuLabelOptionToTerraform(struct.dataPointMenuLabelOption),
        data_point_tooltip_option: quicksightDashboardDashboardPublishOptionsDataPointTooltipOptionToTerraform(struct.dataPointTooltipOption),
        export_to_csv_option: quicksightDashboardDashboardPublishOptionsExportToCsvOptionToTerraform(struct.exportToCsvOption),
        export_with_hidden_fields_option: quicksightDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionToTerraform(struct.exportWithHiddenFieldsOption),
        sheet_controls_option: quicksightDashboardDashboardPublishOptionsSheetControlsOptionToTerraform(struct.sheetControlsOption),
        sheet_layout_element_maximization_option: quicksightDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionToTerraform(struct.sheetLayoutElementMaximizationOption),
        visual_axis_sort_option: quicksightDashboardDashboardPublishOptionsVisualAxisSortOptionToTerraform(struct.visualAxisSortOption),
        visual_menu_option: quicksightDashboardDashboardPublishOptionsVisualMenuOptionToTerraform(struct.visualMenuOption),
    };
}
exports.quicksightDashboardDashboardPublishOptionsToTerraform = quicksightDashboardDashboardPublishOptionsToTerraform;
function quicksightDashboardDashboardPublishOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        ad_hoc_filtering_option: {
            value: quicksightDashboardDashboardPublishOptionsAdHocFilteringOptionToHclTerraform(struct.adHocFilteringOption),
            isBlock: true,
            type: "list",
            storageClassType: "QuicksightDashboardDashboardPublishOptionsAdHocFilteringOptionList",
        },
        data_point_drill_up_down_option: {
            value: quicksightDashboardDashboardPublishOptionsDataPointDrillUpDownOptionToHclTerraform(struct.dataPointDrillUpDownOption),
            isBlock: true,
            type: "list",
            storageClassType: "QuicksightDashboardDashboardPublishOptionsDataPointDrillUpDownOptionList",
        },
        data_point_menu_label_option: {
            value: quicksightDashboardDashboardPublishOptionsDataPointMenuLabelOptionToHclTerraform(struct.dataPointMenuLabelOption),
            isBlock: true,
            type: "list",
            storageClassType: "QuicksightDashboardDashboardPublishOptionsDataPointMenuLabelOptionList",
        },
        data_point_tooltip_option: {
            value: quicksightDashboardDashboardPublishOptionsDataPointTooltipOptionToHclTerraform(struct.dataPointTooltipOption),
            isBlock: true,
            type: "list",
            storageClassType: "QuicksightDashboardDashboardPublishOptionsDataPointTooltipOptionList",
        },
        export_to_csv_option: {
            value: quicksightDashboardDashboardPublishOptionsExportToCsvOptionToHclTerraform(struct.exportToCsvOption),
            isBlock: true,
            type: "list",
            storageClassType: "QuicksightDashboardDashboardPublishOptionsExportToCsvOptionList",
        },
        export_with_hidden_fields_option: {
            value: quicksightDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionToHclTerraform(struct.exportWithHiddenFieldsOption),
            isBlock: true,
            type: "list",
            storageClassType: "QuicksightDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionList",
        },
        sheet_controls_option: {
            value: quicksightDashboardDashboardPublishOptionsSheetControlsOptionToHclTerraform(struct.sheetControlsOption),
            isBlock: true,
            type: "list",
            storageClassType: "QuicksightDashboardDashboardPublishOptionsSheetControlsOptionList",
        },
        sheet_layout_element_maximization_option: {
            value: quicksightDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionToHclTerraform(struct.sheetLayoutElementMaximizationOption),
            isBlock: true,
            type: "list",
            storageClassType: "QuicksightDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionList",
        },
        visual_axis_sort_option: {
            value: quicksightDashboardDashboardPublishOptionsVisualAxisSortOptionToHclTerraform(struct.visualAxisSortOption),
            isBlock: true,
            type: "list",
            storageClassType: "QuicksightDashboardDashboardPublishOptionsVisualAxisSortOptionList",
        },
        visual_menu_option: {
            value: quicksightDashboardDashboardPublishOptionsVisualMenuOptionToHclTerraform(struct.visualMenuOption),
            isBlock: true,
            type: "list",
            storageClassType: "QuicksightDashboardDashboardPublishOptionsVisualMenuOptionList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.quicksightDashboardDashboardPublishOptionsToHclTerraform = quicksightDashboardDashboardPublishOptionsToHclTerraform;
class QuicksightDashboardDashboardPublishOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // ad_hoc_filtering_option - computed: false, optional: true, required: false
        this._adHocFilteringOption = new QuicksightDashboardDashboardPublishOptionsAdHocFilteringOptionOutputReference(this, "ad_hoc_filtering_option");
        // data_point_drill_up_down_option - computed: false, optional: true, required: false
        this._dataPointDrillUpDownOption = new QuicksightDashboardDashboardPublishOptionsDataPointDrillUpDownOptionOutputReference(this, "data_point_drill_up_down_option");
        // data_point_menu_label_option - computed: false, optional: true, required: false
        this._dataPointMenuLabelOption = new QuicksightDashboardDashboardPublishOptionsDataPointMenuLabelOptionOutputReference(this, "data_point_menu_label_option");
        // data_point_tooltip_option - computed: false, optional: true, required: false
        this._dataPointTooltipOption = new QuicksightDashboardDashboardPublishOptionsDataPointTooltipOptionOutputReference(this, "data_point_tooltip_option");
        // export_to_csv_option - computed: false, optional: true, required: false
        this._exportToCsvOption = new QuicksightDashboardDashboardPublishOptionsExportToCsvOptionOutputReference(this, "export_to_csv_option");
        // export_with_hidden_fields_option - computed: false, optional: true, required: false
        this._exportWithHiddenFieldsOption = new QuicksightDashboardDashboardPublishOptionsExportWithHiddenFieldsOptionOutputReference(this, "export_with_hidden_fields_option");
        // sheet_controls_option - computed: false, optional: true, required: false
        this._sheetControlsOption = new QuicksightDashboardDashboardPublishOptionsSheetControlsOptionOutputReference(this, "sheet_controls_option");
        // sheet_layout_element_maximization_option - computed: false, optional: true, required: false
        this._sheetLayoutElementMaximizationOption = new QuicksightDashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionOutputReference(this, "sheet_layout_element_maximization_option");
        // visual_axis_sort_option - computed: false, optional: true, required: false
        this._visualAxisSortOption = new QuicksightDashboardDashboardPublishOptionsVisualAxisSortOptionOutputReference(this, "visual_axis_sort_option");
        // visual_menu_option - computed: false, optional: true, required: false
        this._visualMenuOption = new QuicksightDashboardDashboardPublishOptionsVisualMenuOptionOutputReference(this, "visual_menu_option");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._adHocFilteringOption?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.adHocFilteringOption = this._adHocFilteringOption?.internalValue;
        }
        if (this._dataPointDrillUpDownOption?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataPointDrillUpDownOption = this._dataPointDrillUpDownOption?.internalValue;
        }
        if (this._dataPointMenuLabelOption?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataPointMenuLabelOption = this._dataPointMenuLabelOption?.internalValue;
        }
        if (this._dataPointTooltipOption?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataPointTooltipOption = this._dataPointTooltipOption?.internalValue;
        }
        if (this._exportToCsvOption?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.exportToCsvOption = this._exportToCsvOption?.internalValue;
        }
        if (this._exportWithHiddenFieldsOption?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.exportWithHiddenFieldsOption = this._exportWithHiddenFieldsOption?.internalValue;
        }
        if (this._sheetControlsOption?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sheetControlsOption = this._sheetControlsOption?.internalValue;
        }
        if (this._sheetLayoutElementMaximizationOption?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sheetLayoutElementMaximizationOption = this._sheetLayoutElementMaximizationOption?.internalValue;
        }
        if (this._visualAxisSortOption?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.visualAxisSortOption = this._visualAxisSortOption?.internalValue;
        }
        if (this._visualMenuOption?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.visualMenuOption = this._visualMenuOption?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._adHocFilteringOption.internalValue = undefined;
            this._dataPointDrillUpDownOption.internalValue = undefined;
            this._dataPointMenuLabelOption.internalValue = undefined;
            this._dataPointTooltipOption.internalValue = undefined;
            this._exportToCsvOption.internalValue = undefined;
            this._exportWithHiddenFieldsOption.internalValue = undefined;
            this._sheetControlsOption.internalValue = undefined;
            this._sheetLayoutElementMaximizationOption.internalValue = undefined;
            this._visualAxisSortOption.internalValue = undefined;
            this._visualMenuOption.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._adHocFilteringOption.internalValue = value.adHocFilteringOption;
            this._dataPointDrillUpDownOption.internalValue = value.dataPointDrillUpDownOption;
            this._dataPointMenuLabelOption.internalValue = value.dataPointMenuLabelOption;
            this._dataPointTooltipOption.internalValue = value.dataPointTooltipOption;
            this._exportToCsvOption.internalValue = value.exportToCsvOption;
            this._exportWithHiddenFieldsOption.internalValue = value.exportWithHiddenFieldsOption;
            this._sheetControlsOption.internalValue = value.sheetControlsOption;
            this._sheetLayoutElementMaximizationOption.internalValue = value.sheetLayoutElementMaximizationOption;
            this._visualAxisSortOption.internalValue = value.visualAxisSortOption;
            this._visualMenuOption.internalValue = value.visualMenuOption;
        }
    }
    get adHocFilteringOption() {
        return this._adHocFilteringOption;
    }
    putAdHocFilteringOption(value) {
        this._adHocFilteringOption.internalValue = value;
    }
    resetAdHocFilteringOption() {
        this._adHocFilteringOption.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get adHocFilteringOptionInput() {
        return this._adHocFilteringOption.internalValue;
    }
    get dataPointDrillUpDownOption() {
        return this._dataPointDrillUpDownOption;
    }
    putDataPointDrillUpDownOption(value) {
        this._dataPointDrillUpDownOption.internalValue = value;
    }
    resetDataPointDrillUpDownOption() {
        this._dataPointDrillUpDownOption.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataPointDrillUpDownOptionInput() {
        return this._dataPointDrillUpDownOption.internalValue;
    }
    get dataPointMenuLabelOption() {
        return this._dataPointMenuLabelOption;
    }
    putDataPointMenuLabelOption(value) {
        this._dataPointMenuLabelOption.internalValue = value;
    }
    resetDataPointMenuLabelOption() {
        this._dataPointMenuLabelOption.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataPointMenuLabelOptionInput() {
        return this._dataPointMenuLabelOption.internalValue;
    }
    get dataPointTooltipOption() {
        return this._dataPointTooltipOption;
    }
    putDataPointTooltipOption(value) {
        this._dataPointTooltipOption.internalValue = value;
    }
    resetDataPointTooltipOption() {
        this._dataPointTooltipOption.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataPointTooltipOptionInput() {
        return this._dataPointTooltipOption.internalValue;
    }
    get exportToCsvOption() {
        return this._exportToCsvOption;
    }
    putExportToCsvOption(value) {
        this._exportToCsvOption.internalValue = value;
    }
    resetExportToCsvOption() {
        this._exportToCsvOption.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exportToCsvOptionInput() {
        return this._exportToCsvOption.internalValue;
    }
    get exportWithHiddenFieldsOption() {
        return this._exportWithHiddenFieldsOption;
    }
    putExportWithHiddenFieldsOption(value) {
        this._exportWithHiddenFieldsOption.internalValue = value;
    }
    resetExportWithHiddenFieldsOption() {
        this._exportWithHiddenFieldsOption.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exportWithHiddenFieldsOptionInput() {
        return this._exportWithHiddenFieldsOption.internalValue;
    }
    get sheetControlsOption() {
        return this._sheetControlsOption;
    }
    putSheetControlsOption(value) {
        this._sheetControlsOption.internalValue = value;
    }
    resetSheetControlsOption() {
        this._sheetControlsOption.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sheetControlsOptionInput() {
        return this._sheetControlsOption.internalValue;
    }
    get sheetLayoutElementMaximizationOption() {
        return this._sheetLayoutElementMaximizationOption;
    }
    putSheetLayoutElementMaximizationOption(value) {
        this._sheetLayoutElementMaximizationOption.internalValue = value;
    }
    resetSheetLayoutElementMaximizationOption() {
        this._sheetLayoutElementMaximizationOption.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sheetLayoutElementMaximizationOptionInput() {
        return this._sheetLayoutElementMaximizationOption.internalValue;
    }
    get visualAxisSortOption() {
        return this._visualAxisSortOption;
    }
    putVisualAxisSortOption(value) {
        this._visualAxisSortOption.internalValue = value;
    }
    resetVisualAxisSortOption() {
        this._visualAxisSortOption.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get visualAxisSortOptionInput() {
        return this._visualAxisSortOption.internalValue;
    }
    get visualMenuOption() {
        return this._visualMenuOption;
    }
    putVisualMenuOption(value) {
        this._visualMenuOption.internalValue = value;
    }
    resetVisualMenuOption() {
        this._visualMenuOption.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get visualMenuOptionInput() {
        return this._visualMenuOption.internalValue;
    }
}
exports.QuicksightDashboardDashboardPublishOptionsOutputReference = QuicksightDashboardDashboardPublishOptionsOutputReference;
_l = JSII_RTTI_SYMBOL_1;
QuicksightDashboardDashboardPublishOptionsOutputReference[_l] = { fqn: "@cdktf/provider-aws.quicksightDashboard.QuicksightDashboardDashboardPublishOptionsOutputReference", version: "19.15.0" };
function quicksightDashboardParametersDateTimeParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.values),
    };
}
exports.quicksightDashboardParametersDateTimeParametersToTerraform = quicksightDashboardParametersDateTimeParametersToTerraform;
function quicksightDashboardParametersDateTimeParametersToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        values: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.values),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.quicksightDashboardParametersDateTimeParametersToHclTerraform = quicksightDashboardParametersDateTimeParametersToHclTerraform;
class QuicksightDashboardParametersDateTimeParametersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._values !== undefined) {
            hasAnyValues = true;
            internalValueResult.values = this._values;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._values = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._values = value.values;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get values() {
        return this.getListAttribute('values');
    }
    set values(value) {
        this._values = value;
    }
    // Temporarily expose input value. Use with caution.
    get valuesInput() {
        return this._values;
    }
}
exports.QuicksightDashboardParametersDateTimeParametersOutputReference = QuicksightDashboardParametersDateTimeParametersOutputReference;
_m = JSII_RTTI_SYMBOL_1;
QuicksightDashboardParametersDateTimeParametersOutputReference[_m] = { fqn: "@cdktf/provider-aws.quicksightDashboard.QuicksightDashboardParametersDateTimeParametersOutputReference", version: "19.15.0" };
class QuicksightDashboardParametersDateTimeParametersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new QuicksightDashboardParametersDateTimeParametersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.QuicksightDashboardParametersDateTimeParametersList = QuicksightDashboardParametersDateTimeParametersList;
_o = JSII_RTTI_SYMBOL_1;
QuicksightDashboardParametersDateTimeParametersList[_o] = { fqn: "@cdktf/provider-aws.quicksightDashboard.QuicksightDashboardParametersDateTimeParametersList", version: "19.15.0" };
function quicksightDashboardParametersDecimalParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        values: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.values),
    };
}
exports.quicksightDashboardParametersDecimalParametersToTerraform = quicksightDashboardParametersDecimalParametersToTerraform;
function quicksightDashboardParametersDecimalParametersToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        values: {
            value: cdktf.listMapperHcl(cdktf.numberToHclTerraform, false)(struct.values),
            isBlock: false,
            type: "list",
            storageClassType: "numberList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.quicksightDashboardParametersDecimalParametersToHclTerraform = quicksightDashboardParametersDecimalParametersToHclTerraform;
class QuicksightDashboardParametersDecimalParametersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._values !== undefined) {
            hasAnyValues = true;
            internalValueResult.values = this._values;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._values = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._values = value.values;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get values() {
        return this.getNumberListAttribute('values');
    }
    set values(value) {
        this._values = value;
    }
    // Temporarily expose input value. Use with caution.
    get valuesInput() {
        return this._values;
    }
}
exports.QuicksightDashboardParametersDecimalParametersOutputReference = QuicksightDashboardParametersDecimalParametersOutputReference;
_p = JSII_RTTI_SYMBOL_1;
QuicksightDashboardParametersDecimalParametersOutputReference[_p] = { fqn: "@cdktf/provider-aws.quicksightDashboard.QuicksightDashboardParametersDecimalParametersOutputReference", version: "19.15.0" };
class QuicksightDashboardParametersDecimalParametersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new QuicksightDashboardParametersDecimalParametersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.QuicksightDashboardParametersDecimalParametersList = QuicksightDashboardParametersDecimalParametersList;
_q = JSII_RTTI_SYMBOL_1;
QuicksightDashboardParametersDecimalParametersList[_q] = { fqn: "@cdktf/provider-aws.quicksightDashboard.QuicksightDashboardParametersDecimalParametersList", version: "19.15.0" };
function quicksightDashboardParametersIntegerParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        values: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.values),
    };
}
exports.quicksightDashboardParametersIntegerParametersToTerraform = quicksightDashboardParametersIntegerParametersToTerraform;
function quicksightDashboardParametersIntegerParametersToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        values: {
            value: cdktf.listMapperHcl(cdktf.numberToHclTerraform, false)(struct.values),
            isBlock: false,
            type: "list",
            storageClassType: "numberList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.quicksightDashboardParametersIntegerParametersToHclTerraform = quicksightDashboardParametersIntegerParametersToHclTerraform;
class QuicksightDashboardParametersIntegerParametersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._values !== undefined) {
            hasAnyValues = true;
            internalValueResult.values = this._values;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._values = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._values = value.values;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get values() {
        return this.getNumberListAttribute('values');
    }
    set values(value) {
        this._values = value;
    }
    // Temporarily expose input value. Use with caution.
    get valuesInput() {
        return this._values;
    }
}
exports.QuicksightDashboardParametersIntegerParametersOutputReference = QuicksightDashboardParametersIntegerParametersOutputReference;
_r = JSII_RTTI_SYMBOL_1;
QuicksightDashboardParametersIntegerParametersOutputReference[_r] = { fqn: "@cdktf/provider-aws.quicksightDashboard.QuicksightDashboardParametersIntegerParametersOutputReference", version: "19.15.0" };
class QuicksightDashboardParametersIntegerParametersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new QuicksightDashboardParametersIntegerParametersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.QuicksightDashboardParametersIntegerParametersList = QuicksightDashboardParametersIntegerParametersList;
_s = JSII_RTTI_SYMBOL_1;
QuicksightDashboardParametersIntegerParametersList[_s] = { fqn: "@cdktf/provider-aws.quicksightDashboard.QuicksightDashboardParametersIntegerParametersList", version: "19.15.0" };
function quicksightDashboardParametersStringParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.values),
    };
}
exports.quicksightDashboardParametersStringParametersToTerraform = quicksightDashboardParametersStringParametersToTerraform;
function quicksightDashboardParametersStringParametersToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        values: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.values),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.quicksightDashboardParametersStringParametersToHclTerraform = quicksightDashboardParametersStringParametersToHclTerraform;
class QuicksightDashboardParametersStringParametersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._values !== undefined) {
            hasAnyValues = true;
            internalValueResult.values = this._values;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._values = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._values = value.values;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get values() {
        return this.getListAttribute('values');
    }
    set values(value) {
        this._values = value;
    }
    // Temporarily expose input value. Use with caution.
    get valuesInput() {
        return this._values;
    }
}
exports.QuicksightDashboardParametersStringParametersOutputReference = QuicksightDashboardParametersStringParametersOutputReference;
_t = JSII_RTTI_SYMBOL_1;
QuicksightDashboardParametersStringParametersOutputReference[_t] = { fqn: "@cdktf/provider-aws.quicksightDashboard.QuicksightDashboardParametersStringParametersOutputReference", version: "19.15.0" };
class QuicksightDashboardParametersStringParametersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new QuicksightDashboardParametersStringParametersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.QuicksightDashboardParametersStringParametersList = QuicksightDashboardParametersStringParametersList;
_u = JSII_RTTI_SYMBOL_1;
QuicksightDashboardParametersStringParametersList[_u] = { fqn: "@cdktf/provider-aws.quicksightDashboard.QuicksightDashboardParametersStringParametersList", version: "19.15.0" };
function quicksightDashboardParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        date_time_parameters: cdktf.listMapper(quicksightDashboardParametersDateTimeParametersToTerraform, true)(struct.dateTimeParameters),
        decimal_parameters: cdktf.listMapper(quicksightDashboardParametersDecimalParametersToTerraform, true)(struct.decimalParameters),
        integer_parameters: cdktf.listMapper(quicksightDashboardParametersIntegerParametersToTerraform, true)(struct.integerParameters),
        string_parameters: cdktf.listMapper(quicksightDashboardParametersStringParametersToTerraform, true)(struct.stringParameters),
    };
}
exports.quicksightDashboardParametersToTerraform = quicksightDashboardParametersToTerraform;
function quicksightDashboardParametersToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        date_time_parameters: {
            value: cdktf.listMapperHcl(quicksightDashboardParametersDateTimeParametersToHclTerraform, true)(struct.dateTimeParameters),
            isBlock: true,
            type: "list",
            storageClassType: "QuicksightDashboardParametersDateTimeParametersList",
        },
        decimal_parameters: {
            value: cdktf.listMapperHcl(quicksightDashboardParametersDecimalParametersToHclTerraform, true)(struct.decimalParameters),
            isBlock: true,
            type: "list",
            storageClassType: "QuicksightDashboardParametersDecimalParametersList",
        },
        integer_parameters: {
            value: cdktf.listMapperHcl(quicksightDashboardParametersIntegerParametersToHclTerraform, true)(struct.integerParameters),
            isBlock: true,
            type: "list",
            storageClassType: "QuicksightDashboardParametersIntegerParametersList",
        },
        string_parameters: {
            value: cdktf.listMapperHcl(quicksightDashboardParametersStringParametersToHclTerraform, true)(struct.stringParameters),
            isBlock: true,
            type: "list",
            storageClassType: "QuicksightDashboardParametersStringParametersList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.quicksightDashboardParametersToHclTerraform = quicksightDashboardParametersToHclTerraform;
class QuicksightDashboardParametersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // date_time_parameters - computed: false, optional: true, required: false
        this._dateTimeParameters = new QuicksightDashboardParametersDateTimeParametersList(this, "date_time_parameters", false);
        // decimal_parameters - computed: false, optional: true, required: false
        this._decimalParameters = new QuicksightDashboardParametersDecimalParametersList(this, "decimal_parameters", false);
        // integer_parameters - computed: false, optional: true, required: false
        this._integerParameters = new QuicksightDashboardParametersIntegerParametersList(this, "integer_parameters", false);
        // string_parameters - computed: false, optional: true, required: false
        this._stringParameters = new QuicksightDashboardParametersStringParametersList(this, "string_parameters", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dateTimeParameters?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dateTimeParameters = this._dateTimeParameters?.internalValue;
        }
        if (this._decimalParameters?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.decimalParameters = this._decimalParameters?.internalValue;
        }
        if (this._integerParameters?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.integerParameters = this._integerParameters?.internalValue;
        }
        if (this._stringParameters?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.stringParameters = this._stringParameters?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dateTimeParameters.internalValue = undefined;
            this._decimalParameters.internalValue = undefined;
            this._integerParameters.internalValue = undefined;
            this._stringParameters.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dateTimeParameters.internalValue = value.dateTimeParameters;
            this._decimalParameters.internalValue = value.decimalParameters;
            this._integerParameters.internalValue = value.integerParameters;
            this._stringParameters.internalValue = value.stringParameters;
        }
    }
    get dateTimeParameters() {
        return this._dateTimeParameters;
    }
    putDateTimeParameters(value) {
        this._dateTimeParameters.internalValue = value;
    }
    resetDateTimeParameters() {
        this._dateTimeParameters.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dateTimeParametersInput() {
        return this._dateTimeParameters.internalValue;
    }
    get decimalParameters() {
        return this._decimalParameters;
    }
    putDecimalParameters(value) {
        this._decimalParameters.internalValue = value;
    }
    resetDecimalParameters() {
        this._decimalParameters.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get decimalParametersInput() {
        return this._decimalParameters.internalValue;
    }
    get integerParameters() {
        return this._integerParameters;
    }
    putIntegerParameters(value) {
        this._integerParameters.internalValue = value;
    }
    resetIntegerParameters() {
        this._integerParameters.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get integerParametersInput() {
        return this._integerParameters.internalValue;
    }
    get stringParameters() {
        return this._stringParameters;
    }
    putStringParameters(value) {
        this._stringParameters.internalValue = value;
    }
    resetStringParameters() {
        this._stringParameters.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stringParametersInput() {
        return this._stringParameters.internalValue;
    }
}
exports.QuicksightDashboardParametersOutputReference = QuicksightDashboardParametersOutputReference;
_v = JSII_RTTI_SYMBOL_1;
QuicksightDashboardParametersOutputReference[_v] = { fqn: "@cdktf/provider-aws.quicksightDashboard.QuicksightDashboardParametersOutputReference", version: "19.15.0" };
function quicksightDashboardPermissionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        actions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.actions),
        principal: cdktf.stringToTerraform(struct.principal),
    };
}
exports.quicksightDashboardPermissionsToTerraform = quicksightDashboardPermissionsToTerraform;
function quicksightDashboardPermissionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        actions: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.actions),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        principal: {
            value: cdktf.stringToHclTerraform(struct.principal),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.quicksightDashboardPermissionsToHclTerraform = quicksightDashboardPermissionsToHclTerraform;
class QuicksightDashboardPermissionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._actions !== undefined) {
            hasAnyValues = true;
            internalValueResult.actions = this._actions;
        }
        if (this._principal !== undefined) {
            hasAnyValues = true;
            internalValueResult.principal = this._principal;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._actions = undefined;
            this._principal = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._actions = value.actions;
            this._principal = value.principal;
        }
    }
    get actions() {
        return cdktf.Fn.tolist(this.getListAttribute('actions'));
    }
    set actions(value) {
        this._actions = value;
    }
    // Temporarily expose input value. Use with caution.
    get actionsInput() {
        return this._actions;
    }
    get principal() {
        return this.getStringAttribute('principal');
    }
    set principal(value) {
        this._principal = value;
    }
    // Temporarily expose input value. Use with caution.
    get principalInput() {
        return this._principal;
    }
}
exports.QuicksightDashboardPermissionsOutputReference = QuicksightDashboardPermissionsOutputReference;
_w = JSII_RTTI_SYMBOL_1;
QuicksightDashboardPermissionsOutputReference[_w] = { fqn: "@cdktf/provider-aws.quicksightDashboard.QuicksightDashboardPermissionsOutputReference", version: "19.15.0" };
class QuicksightDashboardPermissionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new QuicksightDashboardPermissionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.QuicksightDashboardPermissionsList = QuicksightDashboardPermissionsList;
_x = JSII_RTTI_SYMBOL_1;
QuicksightDashboardPermissionsList[_x] = { fqn: "@cdktf/provider-aws.quicksightDashboard.QuicksightDashboardPermissionsList", version: "19.15.0" };
function quicksightDashboardSourceEntitySourceTemplateDataSetReferencesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        data_set_arn: cdktf.stringToTerraform(struct.dataSetArn),
        data_set_placeholder: cdktf.stringToTerraform(struct.dataSetPlaceholder),
    };
}
exports.quicksightDashboardSourceEntitySourceTemplateDataSetReferencesToTerraform = quicksightDashboardSourceEntitySourceTemplateDataSetReferencesToTerraform;
function quicksightDashboardSourceEntitySourceTemplateDataSetReferencesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        data_set_arn: {
            value: cdktf.stringToHclTerraform(struct.dataSetArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        data_set_placeholder: {
            value: cdktf.stringToHclTerraform(struct.dataSetPlaceholder),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.quicksightDashboardSourceEntitySourceTemplateDataSetReferencesToHclTerraform = quicksightDashboardSourceEntitySourceTemplateDataSetReferencesToHclTerraform;
class QuicksightDashboardSourceEntitySourceTemplateDataSetReferencesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dataSetArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataSetArn = this._dataSetArn;
        }
        if (this._dataSetPlaceholder !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataSetPlaceholder = this._dataSetPlaceholder;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._dataSetArn = undefined;
            this._dataSetPlaceholder = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._dataSetArn = value.dataSetArn;
            this._dataSetPlaceholder = value.dataSetPlaceholder;
        }
    }
    get dataSetArn() {
        return this.getStringAttribute('data_set_arn');
    }
    set dataSetArn(value) {
        this._dataSetArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get dataSetArnInput() {
        return this._dataSetArn;
    }
    get dataSetPlaceholder() {
        return this.getStringAttribute('data_set_placeholder');
    }
    set dataSetPlaceholder(value) {
        this._dataSetPlaceholder = value;
    }
    // Temporarily expose input value. Use with caution.
    get dataSetPlaceholderInput() {
        return this._dataSetPlaceholder;
    }
}
exports.QuicksightDashboardSourceEntitySourceTemplateDataSetReferencesOutputReference = QuicksightDashboardSourceEntitySourceTemplateDataSetReferencesOutputReference;
_y = JSII_RTTI_SYMBOL_1;
QuicksightDashboardSourceEntitySourceTemplateDataSetReferencesOutputReference[_y] = { fqn: "@cdktf/provider-aws.quicksightDashboard.QuicksightDashboardSourceEntitySourceTemplateDataSetReferencesOutputReference", version: "19.15.0" };
class QuicksightDashboardSourceEntitySourceTemplateDataSetReferencesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new QuicksightDashboardSourceEntitySourceTemplateDataSetReferencesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.QuicksightDashboardSourceEntitySourceTemplateDataSetReferencesList = QuicksightDashboardSourceEntitySourceTemplateDataSetReferencesList;
_z = JSII_RTTI_SYMBOL_1;
QuicksightDashboardSourceEntitySourceTemplateDataSetReferencesList[_z] = { fqn: "@cdktf/provider-aws.quicksightDashboard.QuicksightDashboardSourceEntitySourceTemplateDataSetReferencesList", version: "19.15.0" };
function quicksightDashboardSourceEntitySourceTemplateToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        arn: cdktf.stringToTerraform(struct.arn),
        data_set_references: cdktf.listMapper(quicksightDashboardSourceEntitySourceTemplateDataSetReferencesToTerraform, true)(struct.dataSetReferences),
    };
}
exports.quicksightDashboardSourceEntitySourceTemplateToTerraform = quicksightDashboardSourceEntitySourceTemplateToTerraform;
function quicksightDashboardSourceEntitySourceTemplateToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        arn: {
            value: cdktf.stringToHclTerraform(struct.arn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        data_set_references: {
            value: cdktf.listMapperHcl(quicksightDashboardSourceEntitySourceTemplateDataSetReferencesToHclTerraform, true)(struct.dataSetReferences),
            isBlock: true,
            type: "list",
            storageClassType: "QuicksightDashboardSourceEntitySourceTemplateDataSetReferencesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.quicksightDashboardSourceEntitySourceTemplateToHclTerraform = quicksightDashboardSourceEntitySourceTemplateToHclTerraform;
class QuicksightDashboardSourceEntitySourceTemplateOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // data_set_references - computed: false, optional: false, required: true
        this._dataSetReferences = new QuicksightDashboardSourceEntitySourceTemplateDataSetReferencesList(this, "data_set_references", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._arn !== undefined) {
            hasAnyValues = true;
            internalValueResult.arn = this._arn;
        }
        if (this._dataSetReferences?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataSetReferences = this._dataSetReferences?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._arn = undefined;
            this._dataSetReferences.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._arn = value.arn;
            this._dataSetReferences.internalValue = value.dataSetReferences;
        }
    }
    get arn() {
        return this.getStringAttribute('arn');
    }
    set arn(value) {
        this._arn = value;
    }
    // Temporarily expose input value. Use with caution.
    get arnInput() {
        return this._arn;
    }
    get dataSetReferences() {
        return this._dataSetReferences;
    }
    putDataSetReferences(value) {
        this._dataSetReferences.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get dataSetReferencesInput() {
        return this._dataSetReferences.internalValue;
    }
}
exports.QuicksightDashboardSourceEntitySourceTemplateOutputReference = QuicksightDashboardSourceEntitySourceTemplateOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
QuicksightDashboardSourceEntitySourceTemplateOutputReference[_0] = { fqn: "@cdktf/provider-aws.quicksightDashboard.QuicksightDashboardSourceEntitySourceTemplateOutputReference", version: "19.15.0" };
function quicksightDashboardSourceEntityToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        source_template: quicksightDashboardSourceEntitySourceTemplateToTerraform(struct.sourceTemplate),
    };
}
exports.quicksightDashboardSourceEntityToTerraform = quicksightDashboardSourceEntityToTerraform;
function quicksightDashboardSourceEntityToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        source_template: {
            value: quicksightDashboardSourceEntitySourceTemplateToHclTerraform(struct.sourceTemplate),
            isBlock: true,
            type: "list",
            storageClassType: "QuicksightDashboardSourceEntitySourceTemplateList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.quicksightDashboardSourceEntityToHclTerraform = quicksightDashboardSourceEntityToHclTerraform;
class QuicksightDashboardSourceEntityOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // source_template - computed: false, optional: true, required: false
        this._sourceTemplate = new QuicksightDashboardSourceEntitySourceTemplateOutputReference(this, "source_template");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._sourceTemplate?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceTemplate = this._sourceTemplate?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._sourceTemplate.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._sourceTemplate.internalValue = value.sourceTemplate;
        }
    }
    get sourceTemplate() {
        return this._sourceTemplate;
    }
    putSourceTemplate(value) {
        this._sourceTemplate.internalValue = value;
    }
    resetSourceTemplate() {
        this._sourceTemplate.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourceTemplateInput() {
        return this._sourceTemplate.internalValue;
    }
}
exports.QuicksightDashboardSourceEntityOutputReference = QuicksightDashboardSourceEntityOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
QuicksightDashboardSourceEntityOutputReference[_1] = { fqn: "@cdktf/provider-aws.quicksightDashboard.QuicksightDashboardSourceEntityOutputReference", version: "19.15.0" };
function quicksightDashboardTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.quicksightDashboardTimeoutsToTerraform = quicksightDashboardTimeoutsToTerraform;
function quicksightDashboardTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.quicksightDashboardTimeoutsToHclTerraform = quicksightDashboardTimeoutsToHclTerraform;
class QuicksightDashboardTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.QuicksightDashboardTimeoutsOutputReference = QuicksightDashboardTimeoutsOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
QuicksightDashboardTimeoutsOutputReference[_2] = { fqn: "@cdktf/provider-aws.quicksightDashboard.QuicksightDashboardTimeoutsOutputReference", version: "19.15.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/quicksight_dashboard aws_quicksight_dashboard}
*/
class QuicksightDashboard extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a QuicksightDashboard resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the QuicksightDashboard to import
    * @param importFromId The id of the existing QuicksightDashboard that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/quicksight_dashboard#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the QuicksightDashboard to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_quicksight_dashboard", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/quicksight_dashboard aws_quicksight_dashboard} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options QuicksightDashboardConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_quicksight_dashboard',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // dashboard_publish_options - computed: false, optional: true, required: false
        this._dashboardPublishOptions = new QuicksightDashboardDashboardPublishOptionsOutputReference(this, "dashboard_publish_options");
        // parameters - computed: false, optional: true, required: false
        this._parameters = new QuicksightDashboardParametersOutputReference(this, "parameters");
        // permissions - computed: false, optional: true, required: false
        this._permissions = new QuicksightDashboardPermissionsList(this, "permissions", true);
        // source_entity - computed: false, optional: true, required: false
        this._sourceEntity = new QuicksightDashboardSourceEntityOutputReference(this, "source_entity");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new QuicksightDashboardTimeoutsOutputReference(this, "timeouts");
        this._awsAccountId = config.awsAccountId;
        this._dashboardId = config.dashboardId;
        this._id = config.id;
        this._name = config.name;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._themeArn = config.themeArn;
        this._versionDescription = config.versionDescription;
        this._dashboardPublishOptions.internalValue = config.dashboardPublishOptions;
        this._definition = config.definition;
        this._parameters.internalValue = config.parameters;
        this._permissions.internalValue = config.permissions;
        this._sourceEntity.internalValue = config.sourceEntity;
        this._timeouts.internalValue = config.timeouts;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get awsAccountId() {
        return this.getStringAttribute('aws_account_id');
    }
    set awsAccountId(value) {
        this._awsAccountId = value;
    }
    resetAwsAccountId() {
        this._awsAccountId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get awsAccountIdInput() {
        return this._awsAccountId;
    }
    // created_time - computed: true, optional: false, required: false
    get createdTime() {
        return this.getStringAttribute('created_time');
    }
    get dashboardId() {
        return this.getStringAttribute('dashboard_id');
    }
    set dashboardId(value) {
        this._dashboardId = value;
    }
    // Temporarily expose input value. Use with caution.
    get dashboardIdInput() {
        return this._dashboardId;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // last_published_time - computed: true, optional: false, required: false
    get lastPublishedTime() {
        return this.getStringAttribute('last_published_time');
    }
    // last_updated_time - computed: true, optional: false, required: false
    get lastUpdatedTime() {
        return this.getStringAttribute('last_updated_time');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    // source_entity_arn - computed: true, optional: false, required: false
    get sourceEntityArn() {
        return this.getStringAttribute('source_entity_arn');
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.getStringAttribute('status');
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get themeArn() {
        return this.getStringAttribute('theme_arn');
    }
    set themeArn(value) {
        this._themeArn = value;
    }
    resetThemeArn() {
        this._themeArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get themeArnInput() {
        return this._themeArn;
    }
    get versionDescription() {
        return this.getStringAttribute('version_description');
    }
    set versionDescription(value) {
        this._versionDescription = value;
    }
    // Temporarily expose input value. Use with caution.
    get versionDescriptionInput() {
        return this._versionDescription;
    }
    // version_number - computed: true, optional: false, required: false
    get versionNumber() {
        return this.getNumberAttribute('version_number');
    }
    get dashboardPublishOptions() {
        return this._dashboardPublishOptions;
    }
    putDashboardPublishOptions(value) {
        this._dashboardPublishOptions.internalValue = value;
    }
    resetDashboardPublishOptions() {
        this._dashboardPublishOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dashboardPublishOptionsInput() {
        return this._dashboardPublishOptions.internalValue;
    }
    get definition() {
        return this.interpolationForAttribute('definition');
    }
    set definition(value) {
        this._definition = value;
    }
    resetDefinition() {
        this._definition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get definitionInput() {
        return this._definition;
    }
    get parameters() {
        return this._parameters;
    }
    putParameters(value) {
        this._parameters.internalValue = value;
    }
    resetParameters() {
        this._parameters.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parametersInput() {
        return this._parameters.internalValue;
    }
    get permissions() {
        return this._permissions;
    }
    putPermissions(value) {
        this._permissions.internalValue = value;
    }
    resetPermissions() {
        this._permissions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get permissionsInput() {
        return this._permissions.internalValue;
    }
    get sourceEntity() {
        return this._sourceEntity;
    }
    putSourceEntity(value) {
        this._sourceEntity.internalValue = value;
    }
    resetSourceEntity() {
        this._sourceEntity.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourceEntityInput() {
        return this._sourceEntity.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            aws_account_id: cdktf.stringToTerraform(this._awsAccountId),
            dashboard_id: cdktf.stringToTerraform(this._dashboardId),
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            theme_arn: cdktf.stringToTerraform(this._themeArn),
            version_description: cdktf.stringToTerraform(this._versionDescription),
            dashboard_publish_options: quicksightDashboardDashboardPublishOptionsToTerraform(this._dashboardPublishOptions.internalValue),
            definition: cdktf.anyToTerraform(this._definition),
            parameters: quicksightDashboardParametersToTerraform(this._parameters.internalValue),
            permissions: cdktf.listMapper(quicksightDashboardPermissionsToTerraform, true)(this._permissions.internalValue),
            source_entity: quicksightDashboardSourceEntityToTerraform(this._sourceEntity.internalValue),
            timeouts: quicksightDashboardTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            aws_account_id: {
                value: cdktf.stringToHclTerraform(this._awsAccountId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            dashboard_id: {
                value: cdktf.stringToHclTerraform(this._dashboardId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            tags: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tags),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            tags_all: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tagsAll),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            theme_arn: {
                value: cdktf.stringToHclTerraform(this._themeArn),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            version_description: {
                value: cdktf.stringToHclTerraform(this._versionDescription),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            dashboard_publish_options: {
                value: quicksightDashboardDashboardPublishOptionsToHclTerraform(this._dashboardPublishOptions.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "QuicksightDashboardDashboardPublishOptionsList",
            },
            definition: {
                value: cdktf.anyToHclTerraform(this._definition),
                isBlock: false,
                type: "simple",
                storageClassType: "any",
            },
            parameters: {
                value: quicksightDashboardParametersToHclTerraform(this._parameters.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "QuicksightDashboardParametersList",
            },
            permissions: {
                value: cdktf.listMapperHcl(quicksightDashboardPermissionsToHclTerraform, true)(this._permissions.internalValue),
                isBlock: true,
                type: "set",
                storageClassType: "QuicksightDashboardPermissionsList",
            },
            source_entity: {
                value: quicksightDashboardSourceEntityToHclTerraform(this._sourceEntity.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "QuicksightDashboardSourceEntityList",
            },
            timeouts: {
                value: quicksightDashboardTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "QuicksightDashboardTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.QuicksightDashboard = QuicksightDashboard;
_3 = JSII_RTTI_SYMBOL_1;
QuicksightDashboard[_3] = { fqn: "@cdktf/provider-aws.quicksightDashboard.QuicksightDashboard", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
QuicksightDashboard.tfResourceType = "aws_quicksight_dashboard";
//# sourceMappingURL=data:application/json;base64,