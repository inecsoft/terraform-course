"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PinpointSmsChannel = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/pinpoint_sms_channel aws_pinpoint_sms_channel}
*/
class PinpointSmsChannel extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a PinpointSmsChannel resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the PinpointSmsChannel to import
    * @param importFromId The id of the existing PinpointSmsChannel that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/pinpoint_sms_channel#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the PinpointSmsChannel to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_pinpoint_sms_channel", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/pinpoint_sms_channel aws_pinpoint_sms_channel} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options PinpointSmsChannelConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_pinpoint_sms_channel',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        this._applicationId = config.applicationId;
        this._enabled = config.enabled;
        this._id = config.id;
        this._senderId = config.senderId;
        this._shortCode = config.shortCode;
    }
    get applicationId() {
        return this.getStringAttribute('application_id');
    }
    set applicationId(value) {
        this._applicationId = value;
    }
    // Temporarily expose input value. Use with caution.
    get applicationIdInput() {
        return this._applicationId;
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // promotional_messages_per_second - computed: true, optional: false, required: false
    get promotionalMessagesPerSecond() {
        return this.getNumberAttribute('promotional_messages_per_second');
    }
    get senderId() {
        return this.getStringAttribute('sender_id');
    }
    set senderId(value) {
        this._senderId = value;
    }
    resetSenderId() {
        this._senderId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get senderIdInput() {
        return this._senderId;
    }
    get shortCode() {
        return this.getStringAttribute('short_code');
    }
    set shortCode(value) {
        this._shortCode = value;
    }
    resetShortCode() {
        this._shortCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get shortCodeInput() {
        return this._shortCode;
    }
    // transactional_messages_per_second - computed: true, optional: false, required: false
    get transactionalMessagesPerSecond() {
        return this.getNumberAttribute('transactional_messages_per_second');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            application_id: cdktf.stringToTerraform(this._applicationId),
            enabled: cdktf.booleanToTerraform(this._enabled),
            id: cdktf.stringToTerraform(this._id),
            sender_id: cdktf.stringToTerraform(this._senderId),
            short_code: cdktf.stringToTerraform(this._shortCode),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            application_id: {
                value: cdktf.stringToHclTerraform(this._applicationId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            enabled: {
                value: cdktf.booleanToHclTerraform(this._enabled),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            sender_id: {
                value: cdktf.stringToHclTerraform(this._senderId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            short_code: {
                value: cdktf.stringToHclTerraform(this._shortCode),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.PinpointSmsChannel = PinpointSmsChannel;
_a = JSII_RTTI_SYMBOL_1;
PinpointSmsChannel[_a] = { fqn: "@cdktf/provider-aws.pinpointSmsChannel.PinpointSmsChannel", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
PinpointSmsChannel.tfResourceType = "aws_pinpoint_sms_channel";
//# sourceMappingURL=data:application/json;base64,