"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmrcontainersJobTemplate = exports.EmrcontainersJobTemplateTimeoutsOutputReference = exports.emrcontainersJobTemplateTimeoutsToHclTerraform = exports.emrcontainersJobTemplateTimeoutsToTerraform = exports.EmrcontainersJobTemplateJobTemplateDataOutputReference = exports.emrcontainersJobTemplateJobTemplateDataToHclTerraform = exports.emrcontainersJobTemplateJobTemplateDataToTerraform = exports.EmrcontainersJobTemplateJobTemplateDataJobDriverOutputReference = exports.emrcontainersJobTemplateJobTemplateDataJobDriverToHclTerraform = exports.emrcontainersJobTemplateJobTemplateDataJobDriverToTerraform = exports.EmrcontainersJobTemplateJobTemplateDataJobDriverSparkSubmitJobDriverOutputReference = exports.emrcontainersJobTemplateJobTemplateDataJobDriverSparkSubmitJobDriverToHclTerraform = exports.emrcontainersJobTemplateJobTemplateDataJobDriverSparkSubmitJobDriverToTerraform = exports.EmrcontainersJobTemplateJobTemplateDataJobDriverSparkSqlJobDriverOutputReference = exports.emrcontainersJobTemplateJobTemplateDataJobDriverSparkSqlJobDriverToHclTerraform = exports.emrcontainersJobTemplateJobTemplateDataJobDriverSparkSqlJobDriverToTerraform = exports.EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesOutputReference = exports.emrcontainersJobTemplateJobTemplateDataConfigurationOverridesToHclTerraform = exports.emrcontainersJobTemplateJobTemplateDataConfigurationOverridesToTerraform = exports.EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationOutputReference = exports.emrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationToHclTerraform = exports.emrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationToTerraform = exports.EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationS3MonitoringConfigurationOutputReference = exports.emrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationS3MonitoringConfigurationToHclTerraform = exports.emrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationS3MonitoringConfigurationToTerraform = exports.EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationCloudWatchMonitoringConfigurationOutputReference = exports.emrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationCloudWatchMonitoringConfigurationToHclTerraform = exports.emrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationCloudWatchMonitoringConfigurationToTerraform = exports.EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationList = exports.EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationOutputReference = exports.emrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationToHclTerraform = exports.emrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationToTerraform = exports.EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationConfigurationsList = exports.EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationConfigurationsOutputReference = exports.emrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationConfigurationsToHclTerraform = exports.emrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationConfigurationsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function emrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationConfigurationsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        classification: cdktf.stringToTerraform(struct.classification),
        properties: cdktf.hashMapper(cdktf.stringToTerraform)(struct.properties),
    };
}
exports.emrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationConfigurationsToTerraform = emrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationConfigurationsToTerraform;
function emrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationConfigurationsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        classification: {
            value: cdktf.stringToHclTerraform(struct.classification),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        properties: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.properties),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.emrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationConfigurationsToHclTerraform = emrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationConfigurationsToHclTerraform;
class EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationConfigurationsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._classification !== undefined) {
            hasAnyValues = true;
            internalValueResult.classification = this._classification;
        }
        if (this._properties !== undefined) {
            hasAnyValues = true;
            internalValueResult.properties = this._properties;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._classification = undefined;
            this._properties = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._classification = value.classification;
            this._properties = value.properties;
        }
    }
    get classification() {
        return this.getStringAttribute('classification');
    }
    set classification(value) {
        this._classification = value;
    }
    resetClassification() {
        this._classification = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get classificationInput() {
        return this._classification;
    }
    get properties() {
        return this.getStringMapAttribute('properties');
    }
    set properties(value) {
        this._properties = value;
    }
    resetProperties() {
        this._properties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get propertiesInput() {
        return this._properties;
    }
}
exports.EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationConfigurationsOutputReference = EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationConfigurationsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationConfigurationsOutputReference[_a] = { fqn: "@cdktf/provider-aws.emrcontainersJobTemplate.EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationConfigurationsOutputReference", version: "19.15.0" };
class EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationConfigurationsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationConfigurationsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationConfigurationsList = EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationConfigurationsList;
_b = JSII_RTTI_SYMBOL_1;
EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationConfigurationsList[_b] = { fqn: "@cdktf/provider-aws.emrcontainersJobTemplate.EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationConfigurationsList", version: "19.15.0" };
function emrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        classification: cdktf.stringToTerraform(struct.classification),
        properties: cdktf.hashMapper(cdktf.stringToTerraform)(struct.properties),
        configurations: cdktf.listMapper(emrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationConfigurationsToTerraform, true)(struct.configurations),
    };
}
exports.emrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationToTerraform = emrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationToTerraform;
function emrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        classification: {
            value: cdktf.stringToHclTerraform(struct.classification),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        properties: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.properties),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        configurations: {
            value: cdktf.listMapperHcl(emrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationConfigurationsToHclTerraform, true)(struct.configurations),
            isBlock: true,
            type: "list",
            storageClassType: "EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationConfigurationsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.emrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationToHclTerraform = emrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationToHclTerraform;
class EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // configurations - computed: false, optional: true, required: false
        this._configurations = new EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationConfigurationsList(this, "configurations", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._classification !== undefined) {
            hasAnyValues = true;
            internalValueResult.classification = this._classification;
        }
        if (this._properties !== undefined) {
            hasAnyValues = true;
            internalValueResult.properties = this._properties;
        }
        if (this._configurations?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.configurations = this._configurations?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._classification = undefined;
            this._properties = undefined;
            this._configurations.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._classification = value.classification;
            this._properties = value.properties;
            this._configurations.internalValue = value.configurations;
        }
    }
    get classification() {
        return this.getStringAttribute('classification');
    }
    set classification(value) {
        this._classification = value;
    }
    // Temporarily expose input value. Use with caution.
    get classificationInput() {
        return this._classification;
    }
    get properties() {
        return this.getStringMapAttribute('properties');
    }
    set properties(value) {
        this._properties = value;
    }
    resetProperties() {
        this._properties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get propertiesInput() {
        return this._properties;
    }
    get configurations() {
        return this._configurations;
    }
    putConfigurations(value) {
        this._configurations.internalValue = value;
    }
    resetConfigurations() {
        this._configurations.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get configurationsInput() {
        return this._configurations.internalValue;
    }
}
exports.EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationOutputReference = EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationOutputReference;
_c = JSII_RTTI_SYMBOL_1;
EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationOutputReference[_c] = { fqn: "@cdktf/provider-aws.emrcontainersJobTemplate.EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationOutputReference", version: "19.15.0" };
class EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationList = EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationList;
_d = JSII_RTTI_SYMBOL_1;
EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationList[_d] = { fqn: "@cdktf/provider-aws.emrcontainersJobTemplate.EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationList", version: "19.15.0" };
function emrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationCloudWatchMonitoringConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        log_group_name: cdktf.stringToTerraform(struct.logGroupName),
        log_stream_name_prefix: cdktf.stringToTerraform(struct.logStreamNamePrefix),
    };
}
exports.emrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationCloudWatchMonitoringConfigurationToTerraform = emrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationCloudWatchMonitoringConfigurationToTerraform;
function emrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationCloudWatchMonitoringConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        log_group_name: {
            value: cdktf.stringToHclTerraform(struct.logGroupName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        log_stream_name_prefix: {
            value: cdktf.stringToHclTerraform(struct.logStreamNamePrefix),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.emrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationCloudWatchMonitoringConfigurationToHclTerraform = emrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationCloudWatchMonitoringConfigurationToHclTerraform;
class EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationCloudWatchMonitoringConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._logGroupName !== undefined) {
            hasAnyValues = true;
            internalValueResult.logGroupName = this._logGroupName;
        }
        if (this._logStreamNamePrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.logStreamNamePrefix = this._logStreamNamePrefix;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._logGroupName = undefined;
            this._logStreamNamePrefix = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._logGroupName = value.logGroupName;
            this._logStreamNamePrefix = value.logStreamNamePrefix;
        }
    }
    get logGroupName() {
        return this.getStringAttribute('log_group_name');
    }
    set logGroupName(value) {
        this._logGroupName = value;
    }
    // Temporarily expose input value. Use with caution.
    get logGroupNameInput() {
        return this._logGroupName;
    }
    get logStreamNamePrefix() {
        return this.getStringAttribute('log_stream_name_prefix');
    }
    set logStreamNamePrefix(value) {
        this._logStreamNamePrefix = value;
    }
    resetLogStreamNamePrefix() {
        this._logStreamNamePrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logStreamNamePrefixInput() {
        return this._logStreamNamePrefix;
    }
}
exports.EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationCloudWatchMonitoringConfigurationOutputReference = EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationCloudWatchMonitoringConfigurationOutputReference;
_e = JSII_RTTI_SYMBOL_1;
EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationCloudWatchMonitoringConfigurationOutputReference[_e] = { fqn: "@cdktf/provider-aws.emrcontainersJobTemplate.EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationCloudWatchMonitoringConfigurationOutputReference", version: "19.15.0" };
function emrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationS3MonitoringConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        log_uri: cdktf.stringToTerraform(struct.logUri),
    };
}
exports.emrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationS3MonitoringConfigurationToTerraform = emrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationS3MonitoringConfigurationToTerraform;
function emrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationS3MonitoringConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        log_uri: {
            value: cdktf.stringToHclTerraform(struct.logUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.emrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationS3MonitoringConfigurationToHclTerraform = emrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationS3MonitoringConfigurationToHclTerraform;
class EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationS3MonitoringConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._logUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.logUri = this._logUri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._logUri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._logUri = value.logUri;
        }
    }
    get logUri() {
        return this.getStringAttribute('log_uri');
    }
    set logUri(value) {
        this._logUri = value;
    }
    // Temporarily expose input value. Use with caution.
    get logUriInput() {
        return this._logUri;
    }
}
exports.EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationS3MonitoringConfigurationOutputReference = EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationS3MonitoringConfigurationOutputReference;
_f = JSII_RTTI_SYMBOL_1;
EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationS3MonitoringConfigurationOutputReference[_f] = { fqn: "@cdktf/provider-aws.emrcontainersJobTemplate.EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationS3MonitoringConfigurationOutputReference", version: "19.15.0" };
function emrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        persistent_app_ui: cdktf.stringToTerraform(struct.persistentAppUi),
        cloud_watch_monitoring_configuration: emrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationCloudWatchMonitoringConfigurationToTerraform(struct.cloudWatchMonitoringConfiguration),
        s3_monitoring_configuration: emrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationS3MonitoringConfigurationToTerraform(struct.s3MonitoringConfiguration),
    };
}
exports.emrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationToTerraform = emrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationToTerraform;
function emrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        persistent_app_ui: {
            value: cdktf.stringToHclTerraform(struct.persistentAppUi),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cloud_watch_monitoring_configuration: {
            value: emrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationCloudWatchMonitoringConfigurationToHclTerraform(struct.cloudWatchMonitoringConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationCloudWatchMonitoringConfigurationList",
        },
        s3_monitoring_configuration: {
            value: emrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationS3MonitoringConfigurationToHclTerraform(struct.s3MonitoringConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationS3MonitoringConfigurationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.emrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationToHclTerraform = emrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationToHclTerraform;
class EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cloud_watch_monitoring_configuration - computed: false, optional: true, required: false
        this._cloudWatchMonitoringConfiguration = new EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationCloudWatchMonitoringConfigurationOutputReference(this, "cloud_watch_monitoring_configuration");
        // s3_monitoring_configuration - computed: false, optional: true, required: false
        this._s3MonitoringConfiguration = new EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationS3MonitoringConfigurationOutputReference(this, "s3_monitoring_configuration");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._persistentAppUi !== undefined) {
            hasAnyValues = true;
            internalValueResult.persistentAppUi = this._persistentAppUi;
        }
        if (this._cloudWatchMonitoringConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudWatchMonitoringConfiguration = this._cloudWatchMonitoringConfiguration?.internalValue;
        }
        if (this._s3MonitoringConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3MonitoringConfiguration = this._s3MonitoringConfiguration?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._persistentAppUi = undefined;
            this._cloudWatchMonitoringConfiguration.internalValue = undefined;
            this._s3MonitoringConfiguration.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._persistentAppUi = value.persistentAppUi;
            this._cloudWatchMonitoringConfiguration.internalValue = value.cloudWatchMonitoringConfiguration;
            this._s3MonitoringConfiguration.internalValue = value.s3MonitoringConfiguration;
        }
    }
    get persistentAppUi() {
        return this.getStringAttribute('persistent_app_ui');
    }
    set persistentAppUi(value) {
        this._persistentAppUi = value;
    }
    resetPersistentAppUi() {
        this._persistentAppUi = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get persistentAppUiInput() {
        return this._persistentAppUi;
    }
    get cloudWatchMonitoringConfiguration() {
        return this._cloudWatchMonitoringConfiguration;
    }
    putCloudWatchMonitoringConfiguration(value) {
        this._cloudWatchMonitoringConfiguration.internalValue = value;
    }
    resetCloudWatchMonitoringConfiguration() {
        this._cloudWatchMonitoringConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudWatchMonitoringConfigurationInput() {
        return this._cloudWatchMonitoringConfiguration.internalValue;
    }
    get s3MonitoringConfiguration() {
        return this._s3MonitoringConfiguration;
    }
    putS3MonitoringConfiguration(value) {
        this._s3MonitoringConfiguration.internalValue = value;
    }
    resetS3MonitoringConfiguration() {
        this._s3MonitoringConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3MonitoringConfigurationInput() {
        return this._s3MonitoringConfiguration.internalValue;
    }
}
exports.EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationOutputReference = EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationOutputReference;
_g = JSII_RTTI_SYMBOL_1;
EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationOutputReference[_g] = { fqn: "@cdktf/provider-aws.emrcontainersJobTemplate.EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationOutputReference", version: "19.15.0" };
function emrcontainersJobTemplateJobTemplateDataConfigurationOverridesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        application_configuration: cdktf.listMapper(emrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationToTerraform, true)(struct.applicationConfiguration),
        monitoring_configuration: emrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationToTerraform(struct.monitoringConfiguration),
    };
}
exports.emrcontainersJobTemplateJobTemplateDataConfigurationOverridesToTerraform = emrcontainersJobTemplateJobTemplateDataConfigurationOverridesToTerraform;
function emrcontainersJobTemplateJobTemplateDataConfigurationOverridesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        application_configuration: {
            value: cdktf.listMapperHcl(emrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationToHclTerraform, true)(struct.applicationConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationList",
        },
        monitoring_configuration: {
            value: emrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationToHclTerraform(struct.monitoringConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.emrcontainersJobTemplateJobTemplateDataConfigurationOverridesToHclTerraform = emrcontainersJobTemplateJobTemplateDataConfigurationOverridesToHclTerraform;
class EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // application_configuration - computed: false, optional: true, required: false
        this._applicationConfiguration = new EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesApplicationConfigurationList(this, "application_configuration", false);
        // monitoring_configuration - computed: false, optional: true, required: false
        this._monitoringConfiguration = new EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesMonitoringConfigurationOutputReference(this, "monitoring_configuration");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._applicationConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.applicationConfiguration = this._applicationConfiguration?.internalValue;
        }
        if (this._monitoringConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.monitoringConfiguration = this._monitoringConfiguration?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._applicationConfiguration.internalValue = undefined;
            this._monitoringConfiguration.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._applicationConfiguration.internalValue = value.applicationConfiguration;
            this._monitoringConfiguration.internalValue = value.monitoringConfiguration;
        }
    }
    get applicationConfiguration() {
        return this._applicationConfiguration;
    }
    putApplicationConfiguration(value) {
        this._applicationConfiguration.internalValue = value;
    }
    resetApplicationConfiguration() {
        this._applicationConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get applicationConfigurationInput() {
        return this._applicationConfiguration.internalValue;
    }
    get monitoringConfiguration() {
        return this._monitoringConfiguration;
    }
    putMonitoringConfiguration(value) {
        this._monitoringConfiguration.internalValue = value;
    }
    resetMonitoringConfiguration() {
        this._monitoringConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get monitoringConfigurationInput() {
        return this._monitoringConfiguration.internalValue;
    }
}
exports.EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesOutputReference = EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesOutputReference;
_h = JSII_RTTI_SYMBOL_1;
EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesOutputReference[_h] = { fqn: "@cdktf/provider-aws.emrcontainersJobTemplate.EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesOutputReference", version: "19.15.0" };
function emrcontainersJobTemplateJobTemplateDataJobDriverSparkSqlJobDriverToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        entry_point: cdktf.stringToTerraform(struct.entryPoint),
        spark_sql_parameters: cdktf.stringToTerraform(struct.sparkSqlParameters),
    };
}
exports.emrcontainersJobTemplateJobTemplateDataJobDriverSparkSqlJobDriverToTerraform = emrcontainersJobTemplateJobTemplateDataJobDriverSparkSqlJobDriverToTerraform;
function emrcontainersJobTemplateJobTemplateDataJobDriverSparkSqlJobDriverToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        entry_point: {
            value: cdktf.stringToHclTerraform(struct.entryPoint),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        spark_sql_parameters: {
            value: cdktf.stringToHclTerraform(struct.sparkSqlParameters),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.emrcontainersJobTemplateJobTemplateDataJobDriverSparkSqlJobDriverToHclTerraform = emrcontainersJobTemplateJobTemplateDataJobDriverSparkSqlJobDriverToHclTerraform;
class EmrcontainersJobTemplateJobTemplateDataJobDriverSparkSqlJobDriverOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._entryPoint !== undefined) {
            hasAnyValues = true;
            internalValueResult.entryPoint = this._entryPoint;
        }
        if (this._sparkSqlParameters !== undefined) {
            hasAnyValues = true;
            internalValueResult.sparkSqlParameters = this._sparkSqlParameters;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._entryPoint = undefined;
            this._sparkSqlParameters = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._entryPoint = value.entryPoint;
            this._sparkSqlParameters = value.sparkSqlParameters;
        }
    }
    get entryPoint() {
        return this.getStringAttribute('entry_point');
    }
    set entryPoint(value) {
        this._entryPoint = value;
    }
    resetEntryPoint() {
        this._entryPoint = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get entryPointInput() {
        return this._entryPoint;
    }
    get sparkSqlParameters() {
        return this.getStringAttribute('spark_sql_parameters');
    }
    set sparkSqlParameters(value) {
        this._sparkSqlParameters = value;
    }
    resetSparkSqlParameters() {
        this._sparkSqlParameters = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sparkSqlParametersInput() {
        return this._sparkSqlParameters;
    }
}
exports.EmrcontainersJobTemplateJobTemplateDataJobDriverSparkSqlJobDriverOutputReference = EmrcontainersJobTemplateJobTemplateDataJobDriverSparkSqlJobDriverOutputReference;
_j = JSII_RTTI_SYMBOL_1;
EmrcontainersJobTemplateJobTemplateDataJobDriverSparkSqlJobDriverOutputReference[_j] = { fqn: "@cdktf/provider-aws.emrcontainersJobTemplate.EmrcontainersJobTemplateJobTemplateDataJobDriverSparkSqlJobDriverOutputReference", version: "19.15.0" };
function emrcontainersJobTemplateJobTemplateDataJobDriverSparkSubmitJobDriverToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        entry_point: cdktf.stringToTerraform(struct.entryPoint),
        entry_point_arguments: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.entryPointArguments),
        spark_submit_parameters: cdktf.stringToTerraform(struct.sparkSubmitParameters),
    };
}
exports.emrcontainersJobTemplateJobTemplateDataJobDriverSparkSubmitJobDriverToTerraform = emrcontainersJobTemplateJobTemplateDataJobDriverSparkSubmitJobDriverToTerraform;
function emrcontainersJobTemplateJobTemplateDataJobDriverSparkSubmitJobDriverToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        entry_point: {
            value: cdktf.stringToHclTerraform(struct.entryPoint),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        entry_point_arguments: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.entryPointArguments),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        spark_submit_parameters: {
            value: cdktf.stringToHclTerraform(struct.sparkSubmitParameters),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.emrcontainersJobTemplateJobTemplateDataJobDriverSparkSubmitJobDriverToHclTerraform = emrcontainersJobTemplateJobTemplateDataJobDriverSparkSubmitJobDriverToHclTerraform;
class EmrcontainersJobTemplateJobTemplateDataJobDriverSparkSubmitJobDriverOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._entryPoint !== undefined) {
            hasAnyValues = true;
            internalValueResult.entryPoint = this._entryPoint;
        }
        if (this._entryPointArguments !== undefined) {
            hasAnyValues = true;
            internalValueResult.entryPointArguments = this._entryPointArguments;
        }
        if (this._sparkSubmitParameters !== undefined) {
            hasAnyValues = true;
            internalValueResult.sparkSubmitParameters = this._sparkSubmitParameters;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._entryPoint = undefined;
            this._entryPointArguments = undefined;
            this._sparkSubmitParameters = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._entryPoint = value.entryPoint;
            this._entryPointArguments = value.entryPointArguments;
            this._sparkSubmitParameters = value.sparkSubmitParameters;
        }
    }
    get entryPoint() {
        return this.getStringAttribute('entry_point');
    }
    set entryPoint(value) {
        this._entryPoint = value;
    }
    // Temporarily expose input value. Use with caution.
    get entryPointInput() {
        return this._entryPoint;
    }
    get entryPointArguments() {
        return cdktf.Fn.tolist(this.getListAttribute('entry_point_arguments'));
    }
    set entryPointArguments(value) {
        this._entryPointArguments = value;
    }
    resetEntryPointArguments() {
        this._entryPointArguments = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get entryPointArgumentsInput() {
        return this._entryPointArguments;
    }
    get sparkSubmitParameters() {
        return this.getStringAttribute('spark_submit_parameters');
    }
    set sparkSubmitParameters(value) {
        this._sparkSubmitParameters = value;
    }
    resetSparkSubmitParameters() {
        this._sparkSubmitParameters = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sparkSubmitParametersInput() {
        return this._sparkSubmitParameters;
    }
}
exports.EmrcontainersJobTemplateJobTemplateDataJobDriverSparkSubmitJobDriverOutputReference = EmrcontainersJobTemplateJobTemplateDataJobDriverSparkSubmitJobDriverOutputReference;
_k = JSII_RTTI_SYMBOL_1;
EmrcontainersJobTemplateJobTemplateDataJobDriverSparkSubmitJobDriverOutputReference[_k] = { fqn: "@cdktf/provider-aws.emrcontainersJobTemplate.EmrcontainersJobTemplateJobTemplateDataJobDriverSparkSubmitJobDriverOutputReference", version: "19.15.0" };
function emrcontainersJobTemplateJobTemplateDataJobDriverToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        spark_sql_job_driver: emrcontainersJobTemplateJobTemplateDataJobDriverSparkSqlJobDriverToTerraform(struct.sparkSqlJobDriver),
        spark_submit_job_driver: emrcontainersJobTemplateJobTemplateDataJobDriverSparkSubmitJobDriverToTerraform(struct.sparkSubmitJobDriver),
    };
}
exports.emrcontainersJobTemplateJobTemplateDataJobDriverToTerraform = emrcontainersJobTemplateJobTemplateDataJobDriverToTerraform;
function emrcontainersJobTemplateJobTemplateDataJobDriverToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        spark_sql_job_driver: {
            value: emrcontainersJobTemplateJobTemplateDataJobDriverSparkSqlJobDriverToHclTerraform(struct.sparkSqlJobDriver),
            isBlock: true,
            type: "list",
            storageClassType: "EmrcontainersJobTemplateJobTemplateDataJobDriverSparkSqlJobDriverList",
        },
        spark_submit_job_driver: {
            value: emrcontainersJobTemplateJobTemplateDataJobDriverSparkSubmitJobDriverToHclTerraform(struct.sparkSubmitJobDriver),
            isBlock: true,
            type: "list",
            storageClassType: "EmrcontainersJobTemplateJobTemplateDataJobDriverSparkSubmitJobDriverList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.emrcontainersJobTemplateJobTemplateDataJobDriverToHclTerraform = emrcontainersJobTemplateJobTemplateDataJobDriverToHclTerraform;
class EmrcontainersJobTemplateJobTemplateDataJobDriverOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // spark_sql_job_driver - computed: false, optional: true, required: false
        this._sparkSqlJobDriver = new EmrcontainersJobTemplateJobTemplateDataJobDriverSparkSqlJobDriverOutputReference(this, "spark_sql_job_driver");
        // spark_submit_job_driver - computed: false, optional: true, required: false
        this._sparkSubmitJobDriver = new EmrcontainersJobTemplateJobTemplateDataJobDriverSparkSubmitJobDriverOutputReference(this, "spark_submit_job_driver");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._sparkSqlJobDriver?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sparkSqlJobDriver = this._sparkSqlJobDriver?.internalValue;
        }
        if (this._sparkSubmitJobDriver?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sparkSubmitJobDriver = this._sparkSubmitJobDriver?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._sparkSqlJobDriver.internalValue = undefined;
            this._sparkSubmitJobDriver.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._sparkSqlJobDriver.internalValue = value.sparkSqlJobDriver;
            this._sparkSubmitJobDriver.internalValue = value.sparkSubmitJobDriver;
        }
    }
    get sparkSqlJobDriver() {
        return this._sparkSqlJobDriver;
    }
    putSparkSqlJobDriver(value) {
        this._sparkSqlJobDriver.internalValue = value;
    }
    resetSparkSqlJobDriver() {
        this._sparkSqlJobDriver.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sparkSqlJobDriverInput() {
        return this._sparkSqlJobDriver.internalValue;
    }
    get sparkSubmitJobDriver() {
        return this._sparkSubmitJobDriver;
    }
    putSparkSubmitJobDriver(value) {
        this._sparkSubmitJobDriver.internalValue = value;
    }
    resetSparkSubmitJobDriver() {
        this._sparkSubmitJobDriver.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sparkSubmitJobDriverInput() {
        return this._sparkSubmitJobDriver.internalValue;
    }
}
exports.EmrcontainersJobTemplateJobTemplateDataJobDriverOutputReference = EmrcontainersJobTemplateJobTemplateDataJobDriverOutputReference;
_l = JSII_RTTI_SYMBOL_1;
EmrcontainersJobTemplateJobTemplateDataJobDriverOutputReference[_l] = { fqn: "@cdktf/provider-aws.emrcontainersJobTemplate.EmrcontainersJobTemplateJobTemplateDataJobDriverOutputReference", version: "19.15.0" };
function emrcontainersJobTemplateJobTemplateDataToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        execution_role_arn: cdktf.stringToTerraform(struct.executionRoleArn),
        job_tags: cdktf.hashMapper(cdktf.stringToTerraform)(struct.jobTags),
        release_label: cdktf.stringToTerraform(struct.releaseLabel),
        configuration_overrides: emrcontainersJobTemplateJobTemplateDataConfigurationOverridesToTerraform(struct.configurationOverrides),
        job_driver: emrcontainersJobTemplateJobTemplateDataJobDriverToTerraform(struct.jobDriver),
    };
}
exports.emrcontainersJobTemplateJobTemplateDataToTerraform = emrcontainersJobTemplateJobTemplateDataToTerraform;
function emrcontainersJobTemplateJobTemplateDataToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        execution_role_arn: {
            value: cdktf.stringToHclTerraform(struct.executionRoleArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        job_tags: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.jobTags),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        release_label: {
            value: cdktf.stringToHclTerraform(struct.releaseLabel),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        configuration_overrides: {
            value: emrcontainersJobTemplateJobTemplateDataConfigurationOverridesToHclTerraform(struct.configurationOverrides),
            isBlock: true,
            type: "list",
            storageClassType: "EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesList",
        },
        job_driver: {
            value: emrcontainersJobTemplateJobTemplateDataJobDriverToHclTerraform(struct.jobDriver),
            isBlock: true,
            type: "list",
            storageClassType: "EmrcontainersJobTemplateJobTemplateDataJobDriverList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.emrcontainersJobTemplateJobTemplateDataToHclTerraform = emrcontainersJobTemplateJobTemplateDataToHclTerraform;
class EmrcontainersJobTemplateJobTemplateDataOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // configuration_overrides - computed: false, optional: true, required: false
        this._configurationOverrides = new EmrcontainersJobTemplateJobTemplateDataConfigurationOverridesOutputReference(this, "configuration_overrides");
        // job_driver - computed: false, optional: false, required: true
        this._jobDriver = new EmrcontainersJobTemplateJobTemplateDataJobDriverOutputReference(this, "job_driver");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._executionRoleArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.executionRoleArn = this._executionRoleArn;
        }
        if (this._jobTags !== undefined) {
            hasAnyValues = true;
            internalValueResult.jobTags = this._jobTags;
        }
        if (this._releaseLabel !== undefined) {
            hasAnyValues = true;
            internalValueResult.releaseLabel = this._releaseLabel;
        }
        if (this._configurationOverrides?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.configurationOverrides = this._configurationOverrides?.internalValue;
        }
        if (this._jobDriver?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.jobDriver = this._jobDriver?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._executionRoleArn = undefined;
            this._jobTags = undefined;
            this._releaseLabel = undefined;
            this._configurationOverrides.internalValue = undefined;
            this._jobDriver.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._executionRoleArn = value.executionRoleArn;
            this._jobTags = value.jobTags;
            this._releaseLabel = value.releaseLabel;
            this._configurationOverrides.internalValue = value.configurationOverrides;
            this._jobDriver.internalValue = value.jobDriver;
        }
    }
    get executionRoleArn() {
        return this.getStringAttribute('execution_role_arn');
    }
    set executionRoleArn(value) {
        this._executionRoleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get executionRoleArnInput() {
        return this._executionRoleArn;
    }
    get jobTags() {
        return this.getStringMapAttribute('job_tags');
    }
    set jobTags(value) {
        this._jobTags = value;
    }
    resetJobTags() {
        this._jobTags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jobTagsInput() {
        return this._jobTags;
    }
    get releaseLabel() {
        return this.getStringAttribute('release_label');
    }
    set releaseLabel(value) {
        this._releaseLabel = value;
    }
    // Temporarily expose input value. Use with caution.
    get releaseLabelInput() {
        return this._releaseLabel;
    }
    get configurationOverrides() {
        return this._configurationOverrides;
    }
    putConfigurationOverrides(value) {
        this._configurationOverrides.internalValue = value;
    }
    resetConfigurationOverrides() {
        this._configurationOverrides.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get configurationOverridesInput() {
        return this._configurationOverrides.internalValue;
    }
    get jobDriver() {
        return this._jobDriver;
    }
    putJobDriver(value) {
        this._jobDriver.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get jobDriverInput() {
        return this._jobDriver.internalValue;
    }
}
exports.EmrcontainersJobTemplateJobTemplateDataOutputReference = EmrcontainersJobTemplateJobTemplateDataOutputReference;
_m = JSII_RTTI_SYMBOL_1;
EmrcontainersJobTemplateJobTemplateDataOutputReference[_m] = { fqn: "@cdktf/provider-aws.emrcontainersJobTemplate.EmrcontainersJobTemplateJobTemplateDataOutputReference", version: "19.15.0" };
function emrcontainersJobTemplateTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        delete: cdktf.stringToTerraform(struct.delete),
    };
}
exports.emrcontainersJobTemplateTimeoutsToTerraform = emrcontainersJobTemplateTimeoutsToTerraform;
function emrcontainersJobTemplateTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.emrcontainersJobTemplateTimeoutsToHclTerraform = emrcontainersJobTemplateTimeoutsToHclTerraform;
class EmrcontainersJobTemplateTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._delete = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._delete = value.delete;
        }
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
}
exports.EmrcontainersJobTemplateTimeoutsOutputReference = EmrcontainersJobTemplateTimeoutsOutputReference;
_o = JSII_RTTI_SYMBOL_1;
EmrcontainersJobTemplateTimeoutsOutputReference[_o] = { fqn: "@cdktf/provider-aws.emrcontainersJobTemplate.EmrcontainersJobTemplateTimeoutsOutputReference", version: "19.15.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/emrcontainers_job_template aws_emrcontainers_job_template}
*/
class EmrcontainersJobTemplate extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a EmrcontainersJobTemplate resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the EmrcontainersJobTemplate to import
    * @param importFromId The id of the existing EmrcontainersJobTemplate that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/emrcontainers_job_template#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the EmrcontainersJobTemplate to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_emrcontainers_job_template", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/emrcontainers_job_template aws_emrcontainers_job_template} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options EmrcontainersJobTemplateConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_emrcontainers_job_template',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // job_template_data - computed: false, optional: false, required: true
        this._jobTemplateData = new EmrcontainersJobTemplateJobTemplateDataOutputReference(this, "job_template_data");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new EmrcontainersJobTemplateTimeoutsOutputReference(this, "timeouts");
        this._id = config.id;
        this._kmsKeyArn = config.kmsKeyArn;
        this._name = config.name;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._jobTemplateData.internalValue = config.jobTemplateData;
        this._timeouts.internalValue = config.timeouts;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get kmsKeyArn() {
        return this.getStringAttribute('kms_key_arn');
    }
    set kmsKeyArn(value) {
        this._kmsKeyArn = value;
    }
    resetKmsKeyArn() {
        this._kmsKeyArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyArnInput() {
        return this._kmsKeyArn;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get jobTemplateData() {
        return this._jobTemplateData;
    }
    putJobTemplateData(value) {
        this._jobTemplateData.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get jobTemplateDataInput() {
        return this._jobTemplateData.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
            kms_key_arn: cdktf.stringToTerraform(this._kmsKeyArn),
            name: cdktf.stringToTerraform(this._name),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            job_template_data: emrcontainersJobTemplateJobTemplateDataToTerraform(this._jobTemplateData.internalValue),
            timeouts: emrcontainersJobTemplateTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            kms_key_arn: {
                value: cdktf.stringToHclTerraform(this._kmsKeyArn),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            tags: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tags),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            tags_all: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tagsAll),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            job_template_data: {
                value: emrcontainersJobTemplateJobTemplateDataToHclTerraform(this._jobTemplateData.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "EmrcontainersJobTemplateJobTemplateDataList",
            },
            timeouts: {
                value: emrcontainersJobTemplateTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "EmrcontainersJobTemplateTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.EmrcontainersJobTemplate = EmrcontainersJobTemplate;
_p = JSII_RTTI_SYMBOL_1;
EmrcontainersJobTemplate[_p] = { fqn: "@cdktf/provider-aws.emrcontainersJobTemplate.EmrcontainersJobTemplate", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
EmrcontainersJobTemplate.tfResourceType = "aws_emrcontainers_job_template";
//# sourceMappingURL=data:application/json;base64,