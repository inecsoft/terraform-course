"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlueCrawler = exports.GlueCrawlerSchemaChangePolicyOutputReference = exports.glueCrawlerSchemaChangePolicyToHclTerraform = exports.glueCrawlerSchemaChangePolicyToTerraform = exports.GlueCrawlerS3TargetList = exports.GlueCrawlerS3TargetOutputReference = exports.glueCrawlerS3TargetToHclTerraform = exports.glueCrawlerS3TargetToTerraform = exports.GlueCrawlerRecrawlPolicyOutputReference = exports.glueCrawlerRecrawlPolicyToHclTerraform = exports.glueCrawlerRecrawlPolicyToTerraform = exports.GlueCrawlerMongodbTargetList = exports.GlueCrawlerMongodbTargetOutputReference = exports.glueCrawlerMongodbTargetToHclTerraform = exports.glueCrawlerMongodbTargetToTerraform = exports.GlueCrawlerLineageConfigurationOutputReference = exports.glueCrawlerLineageConfigurationToHclTerraform = exports.glueCrawlerLineageConfigurationToTerraform = exports.GlueCrawlerLakeFormationConfigurationOutputReference = exports.glueCrawlerLakeFormationConfigurationToHclTerraform = exports.glueCrawlerLakeFormationConfigurationToTerraform = exports.GlueCrawlerJdbcTargetList = exports.GlueCrawlerJdbcTargetOutputReference = exports.glueCrawlerJdbcTargetToHclTerraform = exports.glueCrawlerJdbcTargetToTerraform = exports.GlueCrawlerIcebergTargetList = exports.GlueCrawlerIcebergTargetOutputReference = exports.glueCrawlerIcebergTargetToHclTerraform = exports.glueCrawlerIcebergTargetToTerraform = exports.GlueCrawlerHudiTargetList = exports.GlueCrawlerHudiTargetOutputReference = exports.glueCrawlerHudiTargetToHclTerraform = exports.glueCrawlerHudiTargetToTerraform = exports.GlueCrawlerDynamodbTargetList = exports.GlueCrawlerDynamodbTargetOutputReference = exports.glueCrawlerDynamodbTargetToHclTerraform = exports.glueCrawlerDynamodbTargetToTerraform = exports.GlueCrawlerDeltaTargetList = exports.GlueCrawlerDeltaTargetOutputReference = exports.glueCrawlerDeltaTargetToHclTerraform = exports.glueCrawlerDeltaTargetToTerraform = exports.GlueCrawlerCatalogTargetList = exports.GlueCrawlerCatalogTargetOutputReference = exports.glueCrawlerCatalogTargetToHclTerraform = exports.glueCrawlerCatalogTargetToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function glueCrawlerCatalogTargetToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        connection_name: cdktf.stringToTerraform(struct.connectionName),
        database_name: cdktf.stringToTerraform(struct.databaseName),
        dlq_event_queue_arn: cdktf.stringToTerraform(struct.dlqEventQueueArn),
        event_queue_arn: cdktf.stringToTerraform(struct.eventQueueArn),
        tables: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.tables),
    };
}
exports.glueCrawlerCatalogTargetToTerraform = glueCrawlerCatalogTargetToTerraform;
function glueCrawlerCatalogTargetToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        connection_name: {
            value: cdktf.stringToHclTerraform(struct.connectionName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        database_name: {
            value: cdktf.stringToHclTerraform(struct.databaseName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        dlq_event_queue_arn: {
            value: cdktf.stringToHclTerraform(struct.dlqEventQueueArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        event_queue_arn: {
            value: cdktf.stringToHclTerraform(struct.eventQueueArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        tables: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.tables),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.glueCrawlerCatalogTargetToHclTerraform = glueCrawlerCatalogTargetToHclTerraform;
class GlueCrawlerCatalogTargetOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._connectionName !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectionName = this._connectionName;
        }
        if (this._databaseName !== undefined) {
            hasAnyValues = true;
            internalValueResult.databaseName = this._databaseName;
        }
        if (this._dlqEventQueueArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.dlqEventQueueArn = this._dlqEventQueueArn;
        }
        if (this._eventQueueArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.eventQueueArn = this._eventQueueArn;
        }
        if (this._tables !== undefined) {
            hasAnyValues = true;
            internalValueResult.tables = this._tables;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._connectionName = undefined;
            this._databaseName = undefined;
            this._dlqEventQueueArn = undefined;
            this._eventQueueArn = undefined;
            this._tables = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._connectionName = value.connectionName;
            this._databaseName = value.databaseName;
            this._dlqEventQueueArn = value.dlqEventQueueArn;
            this._eventQueueArn = value.eventQueueArn;
            this._tables = value.tables;
        }
    }
    get connectionName() {
        return this.getStringAttribute('connection_name');
    }
    set connectionName(value) {
        this._connectionName = value;
    }
    resetConnectionName() {
        this._connectionName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionNameInput() {
        return this._connectionName;
    }
    get databaseName() {
        return this.getStringAttribute('database_name');
    }
    set databaseName(value) {
        this._databaseName = value;
    }
    // Temporarily expose input value. Use with caution.
    get databaseNameInput() {
        return this._databaseName;
    }
    get dlqEventQueueArn() {
        return this.getStringAttribute('dlq_event_queue_arn');
    }
    set dlqEventQueueArn(value) {
        this._dlqEventQueueArn = value;
    }
    resetDlqEventQueueArn() {
        this._dlqEventQueueArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dlqEventQueueArnInput() {
        return this._dlqEventQueueArn;
    }
    get eventQueueArn() {
        return this.getStringAttribute('event_queue_arn');
    }
    set eventQueueArn(value) {
        this._eventQueueArn = value;
    }
    resetEventQueueArn() {
        this._eventQueueArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get eventQueueArnInput() {
        return this._eventQueueArn;
    }
    get tables() {
        return this.getListAttribute('tables');
    }
    set tables(value) {
        this._tables = value;
    }
    // Temporarily expose input value. Use with caution.
    get tablesInput() {
        return this._tables;
    }
}
exports.GlueCrawlerCatalogTargetOutputReference = GlueCrawlerCatalogTargetOutputReference;
_a = JSII_RTTI_SYMBOL_1;
GlueCrawlerCatalogTargetOutputReference[_a] = { fqn: "@cdktf/provider-aws.glueCrawler.GlueCrawlerCatalogTargetOutputReference", version: "19.15.0" };
class GlueCrawlerCatalogTargetList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GlueCrawlerCatalogTargetOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GlueCrawlerCatalogTargetList = GlueCrawlerCatalogTargetList;
_b = JSII_RTTI_SYMBOL_1;
GlueCrawlerCatalogTargetList[_b] = { fqn: "@cdktf/provider-aws.glueCrawler.GlueCrawlerCatalogTargetList", version: "19.15.0" };
function glueCrawlerDeltaTargetToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        connection_name: cdktf.stringToTerraform(struct.connectionName),
        create_native_delta_table: cdktf.booleanToTerraform(struct.createNativeDeltaTable),
        delta_tables: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.deltaTables),
        write_manifest: cdktf.booleanToTerraform(struct.writeManifest),
    };
}
exports.glueCrawlerDeltaTargetToTerraform = glueCrawlerDeltaTargetToTerraform;
function glueCrawlerDeltaTargetToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        connection_name: {
            value: cdktf.stringToHclTerraform(struct.connectionName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        create_native_delta_table: {
            value: cdktf.booleanToHclTerraform(struct.createNativeDeltaTable),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        delta_tables: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.deltaTables),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        write_manifest: {
            value: cdktf.booleanToHclTerraform(struct.writeManifest),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.glueCrawlerDeltaTargetToHclTerraform = glueCrawlerDeltaTargetToHclTerraform;
class GlueCrawlerDeltaTargetOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._connectionName !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectionName = this._connectionName;
        }
        if (this._createNativeDeltaTable !== undefined) {
            hasAnyValues = true;
            internalValueResult.createNativeDeltaTable = this._createNativeDeltaTable;
        }
        if (this._deltaTables !== undefined) {
            hasAnyValues = true;
            internalValueResult.deltaTables = this._deltaTables;
        }
        if (this._writeManifest !== undefined) {
            hasAnyValues = true;
            internalValueResult.writeManifest = this._writeManifest;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._connectionName = undefined;
            this._createNativeDeltaTable = undefined;
            this._deltaTables = undefined;
            this._writeManifest = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._connectionName = value.connectionName;
            this._createNativeDeltaTable = value.createNativeDeltaTable;
            this._deltaTables = value.deltaTables;
            this._writeManifest = value.writeManifest;
        }
    }
    get connectionName() {
        return this.getStringAttribute('connection_name');
    }
    set connectionName(value) {
        this._connectionName = value;
    }
    resetConnectionName() {
        this._connectionName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionNameInput() {
        return this._connectionName;
    }
    get createNativeDeltaTable() {
        return this.getBooleanAttribute('create_native_delta_table');
    }
    set createNativeDeltaTable(value) {
        this._createNativeDeltaTable = value;
    }
    resetCreateNativeDeltaTable() {
        this._createNativeDeltaTable = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createNativeDeltaTableInput() {
        return this._createNativeDeltaTable;
    }
    get deltaTables() {
        return cdktf.Fn.tolist(this.getListAttribute('delta_tables'));
    }
    set deltaTables(value) {
        this._deltaTables = value;
    }
    // Temporarily expose input value. Use with caution.
    get deltaTablesInput() {
        return this._deltaTables;
    }
    get writeManifest() {
        return this.getBooleanAttribute('write_manifest');
    }
    set writeManifest(value) {
        this._writeManifest = value;
    }
    // Temporarily expose input value. Use with caution.
    get writeManifestInput() {
        return this._writeManifest;
    }
}
exports.GlueCrawlerDeltaTargetOutputReference = GlueCrawlerDeltaTargetOutputReference;
_c = JSII_RTTI_SYMBOL_1;
GlueCrawlerDeltaTargetOutputReference[_c] = { fqn: "@cdktf/provider-aws.glueCrawler.GlueCrawlerDeltaTargetOutputReference", version: "19.15.0" };
class GlueCrawlerDeltaTargetList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GlueCrawlerDeltaTargetOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GlueCrawlerDeltaTargetList = GlueCrawlerDeltaTargetList;
_d = JSII_RTTI_SYMBOL_1;
GlueCrawlerDeltaTargetList[_d] = { fqn: "@cdktf/provider-aws.glueCrawler.GlueCrawlerDeltaTargetList", version: "19.15.0" };
function glueCrawlerDynamodbTargetToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        path: cdktf.stringToTerraform(struct.path),
        scan_all: cdktf.booleanToTerraform(struct.scanAll),
        scan_rate: cdktf.numberToTerraform(struct.scanRate),
    };
}
exports.glueCrawlerDynamodbTargetToTerraform = glueCrawlerDynamodbTargetToTerraform;
function glueCrawlerDynamodbTargetToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        path: {
            value: cdktf.stringToHclTerraform(struct.path),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        scan_all: {
            value: cdktf.booleanToHclTerraform(struct.scanAll),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        scan_rate: {
            value: cdktf.numberToHclTerraform(struct.scanRate),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.glueCrawlerDynamodbTargetToHclTerraform = glueCrawlerDynamodbTargetToHclTerraform;
class GlueCrawlerDynamodbTargetOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._path !== undefined) {
            hasAnyValues = true;
            internalValueResult.path = this._path;
        }
        if (this._scanAll !== undefined) {
            hasAnyValues = true;
            internalValueResult.scanAll = this._scanAll;
        }
        if (this._scanRate !== undefined) {
            hasAnyValues = true;
            internalValueResult.scanRate = this._scanRate;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._path = undefined;
            this._scanAll = undefined;
            this._scanRate = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._path = value.path;
            this._scanAll = value.scanAll;
            this._scanRate = value.scanRate;
        }
    }
    get path() {
        return this.getStringAttribute('path');
    }
    set path(value) {
        this._path = value;
    }
    // Temporarily expose input value. Use with caution.
    get pathInput() {
        return this._path;
    }
    get scanAll() {
        return this.getBooleanAttribute('scan_all');
    }
    set scanAll(value) {
        this._scanAll = value;
    }
    resetScanAll() {
        this._scanAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scanAllInput() {
        return this._scanAll;
    }
    get scanRate() {
        return this.getNumberAttribute('scan_rate');
    }
    set scanRate(value) {
        this._scanRate = value;
    }
    resetScanRate() {
        this._scanRate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scanRateInput() {
        return this._scanRate;
    }
}
exports.GlueCrawlerDynamodbTargetOutputReference = GlueCrawlerDynamodbTargetOutputReference;
_e = JSII_RTTI_SYMBOL_1;
GlueCrawlerDynamodbTargetOutputReference[_e] = { fqn: "@cdktf/provider-aws.glueCrawler.GlueCrawlerDynamodbTargetOutputReference", version: "19.15.0" };
class GlueCrawlerDynamodbTargetList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GlueCrawlerDynamodbTargetOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GlueCrawlerDynamodbTargetList = GlueCrawlerDynamodbTargetList;
_f = JSII_RTTI_SYMBOL_1;
GlueCrawlerDynamodbTargetList[_f] = { fqn: "@cdktf/provider-aws.glueCrawler.GlueCrawlerDynamodbTargetList", version: "19.15.0" };
function glueCrawlerHudiTargetToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        connection_name: cdktf.stringToTerraform(struct.connectionName),
        exclusions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.exclusions),
        maximum_traversal_depth: cdktf.numberToTerraform(struct.maximumTraversalDepth),
        paths: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.paths),
    };
}
exports.glueCrawlerHudiTargetToTerraform = glueCrawlerHudiTargetToTerraform;
function glueCrawlerHudiTargetToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        connection_name: {
            value: cdktf.stringToHclTerraform(struct.connectionName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        exclusions: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.exclusions),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        maximum_traversal_depth: {
            value: cdktf.numberToHclTerraform(struct.maximumTraversalDepth),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        paths: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.paths),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.glueCrawlerHudiTargetToHclTerraform = glueCrawlerHudiTargetToHclTerraform;
class GlueCrawlerHudiTargetOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._connectionName !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectionName = this._connectionName;
        }
        if (this._exclusions !== undefined) {
            hasAnyValues = true;
            internalValueResult.exclusions = this._exclusions;
        }
        if (this._maximumTraversalDepth !== undefined) {
            hasAnyValues = true;
            internalValueResult.maximumTraversalDepth = this._maximumTraversalDepth;
        }
        if (this._paths !== undefined) {
            hasAnyValues = true;
            internalValueResult.paths = this._paths;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._connectionName = undefined;
            this._exclusions = undefined;
            this._maximumTraversalDepth = undefined;
            this._paths = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._connectionName = value.connectionName;
            this._exclusions = value.exclusions;
            this._maximumTraversalDepth = value.maximumTraversalDepth;
            this._paths = value.paths;
        }
    }
    get connectionName() {
        return this.getStringAttribute('connection_name');
    }
    set connectionName(value) {
        this._connectionName = value;
    }
    resetConnectionName() {
        this._connectionName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionNameInput() {
        return this._connectionName;
    }
    get exclusions() {
        return this.getListAttribute('exclusions');
    }
    set exclusions(value) {
        this._exclusions = value;
    }
    resetExclusions() {
        this._exclusions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exclusionsInput() {
        return this._exclusions;
    }
    get maximumTraversalDepth() {
        return this.getNumberAttribute('maximum_traversal_depth');
    }
    set maximumTraversalDepth(value) {
        this._maximumTraversalDepth = value;
    }
    // Temporarily expose input value. Use with caution.
    get maximumTraversalDepthInput() {
        return this._maximumTraversalDepth;
    }
    get paths() {
        return cdktf.Fn.tolist(this.getListAttribute('paths'));
    }
    set paths(value) {
        this._paths = value;
    }
    // Temporarily expose input value. Use with caution.
    get pathsInput() {
        return this._paths;
    }
}
exports.GlueCrawlerHudiTargetOutputReference = GlueCrawlerHudiTargetOutputReference;
_g = JSII_RTTI_SYMBOL_1;
GlueCrawlerHudiTargetOutputReference[_g] = { fqn: "@cdktf/provider-aws.glueCrawler.GlueCrawlerHudiTargetOutputReference", version: "19.15.0" };
class GlueCrawlerHudiTargetList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GlueCrawlerHudiTargetOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GlueCrawlerHudiTargetList = GlueCrawlerHudiTargetList;
_h = JSII_RTTI_SYMBOL_1;
GlueCrawlerHudiTargetList[_h] = { fqn: "@cdktf/provider-aws.glueCrawler.GlueCrawlerHudiTargetList", version: "19.15.0" };
function glueCrawlerIcebergTargetToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        connection_name: cdktf.stringToTerraform(struct.connectionName),
        exclusions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.exclusions),
        maximum_traversal_depth: cdktf.numberToTerraform(struct.maximumTraversalDepth),
        paths: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.paths),
    };
}
exports.glueCrawlerIcebergTargetToTerraform = glueCrawlerIcebergTargetToTerraform;
function glueCrawlerIcebergTargetToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        connection_name: {
            value: cdktf.stringToHclTerraform(struct.connectionName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        exclusions: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.exclusions),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        maximum_traversal_depth: {
            value: cdktf.numberToHclTerraform(struct.maximumTraversalDepth),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        paths: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.paths),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.glueCrawlerIcebergTargetToHclTerraform = glueCrawlerIcebergTargetToHclTerraform;
class GlueCrawlerIcebergTargetOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._connectionName !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectionName = this._connectionName;
        }
        if (this._exclusions !== undefined) {
            hasAnyValues = true;
            internalValueResult.exclusions = this._exclusions;
        }
        if (this._maximumTraversalDepth !== undefined) {
            hasAnyValues = true;
            internalValueResult.maximumTraversalDepth = this._maximumTraversalDepth;
        }
        if (this._paths !== undefined) {
            hasAnyValues = true;
            internalValueResult.paths = this._paths;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._connectionName = undefined;
            this._exclusions = undefined;
            this._maximumTraversalDepth = undefined;
            this._paths = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._connectionName = value.connectionName;
            this._exclusions = value.exclusions;
            this._maximumTraversalDepth = value.maximumTraversalDepth;
            this._paths = value.paths;
        }
    }
    get connectionName() {
        return this.getStringAttribute('connection_name');
    }
    set connectionName(value) {
        this._connectionName = value;
    }
    resetConnectionName() {
        this._connectionName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionNameInput() {
        return this._connectionName;
    }
    get exclusions() {
        return this.getListAttribute('exclusions');
    }
    set exclusions(value) {
        this._exclusions = value;
    }
    resetExclusions() {
        this._exclusions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exclusionsInput() {
        return this._exclusions;
    }
    get maximumTraversalDepth() {
        return this.getNumberAttribute('maximum_traversal_depth');
    }
    set maximumTraversalDepth(value) {
        this._maximumTraversalDepth = value;
    }
    // Temporarily expose input value. Use with caution.
    get maximumTraversalDepthInput() {
        return this._maximumTraversalDepth;
    }
    get paths() {
        return cdktf.Fn.tolist(this.getListAttribute('paths'));
    }
    set paths(value) {
        this._paths = value;
    }
    // Temporarily expose input value. Use with caution.
    get pathsInput() {
        return this._paths;
    }
}
exports.GlueCrawlerIcebergTargetOutputReference = GlueCrawlerIcebergTargetOutputReference;
_j = JSII_RTTI_SYMBOL_1;
GlueCrawlerIcebergTargetOutputReference[_j] = { fqn: "@cdktf/provider-aws.glueCrawler.GlueCrawlerIcebergTargetOutputReference", version: "19.15.0" };
class GlueCrawlerIcebergTargetList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GlueCrawlerIcebergTargetOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GlueCrawlerIcebergTargetList = GlueCrawlerIcebergTargetList;
_k = JSII_RTTI_SYMBOL_1;
GlueCrawlerIcebergTargetList[_k] = { fqn: "@cdktf/provider-aws.glueCrawler.GlueCrawlerIcebergTargetList", version: "19.15.0" };
function glueCrawlerJdbcTargetToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        connection_name: cdktf.stringToTerraform(struct.connectionName),
        enable_additional_metadata: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.enableAdditionalMetadata),
        exclusions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.exclusions),
        path: cdktf.stringToTerraform(struct.path),
    };
}
exports.glueCrawlerJdbcTargetToTerraform = glueCrawlerJdbcTargetToTerraform;
function glueCrawlerJdbcTargetToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        connection_name: {
            value: cdktf.stringToHclTerraform(struct.connectionName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        enable_additional_metadata: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.enableAdditionalMetadata),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        exclusions: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.exclusions),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        path: {
            value: cdktf.stringToHclTerraform(struct.path),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.glueCrawlerJdbcTargetToHclTerraform = glueCrawlerJdbcTargetToHclTerraform;
class GlueCrawlerJdbcTargetOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._connectionName !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectionName = this._connectionName;
        }
        if (this._enableAdditionalMetadata !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableAdditionalMetadata = this._enableAdditionalMetadata;
        }
        if (this._exclusions !== undefined) {
            hasAnyValues = true;
            internalValueResult.exclusions = this._exclusions;
        }
        if (this._path !== undefined) {
            hasAnyValues = true;
            internalValueResult.path = this._path;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._connectionName = undefined;
            this._enableAdditionalMetadata = undefined;
            this._exclusions = undefined;
            this._path = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._connectionName = value.connectionName;
            this._enableAdditionalMetadata = value.enableAdditionalMetadata;
            this._exclusions = value.exclusions;
            this._path = value.path;
        }
    }
    get connectionName() {
        return this.getStringAttribute('connection_name');
    }
    set connectionName(value) {
        this._connectionName = value;
    }
    // Temporarily expose input value. Use with caution.
    get connectionNameInput() {
        return this._connectionName;
    }
    get enableAdditionalMetadata() {
        return this.getListAttribute('enable_additional_metadata');
    }
    set enableAdditionalMetadata(value) {
        this._enableAdditionalMetadata = value;
    }
    resetEnableAdditionalMetadata() {
        this._enableAdditionalMetadata = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableAdditionalMetadataInput() {
        return this._enableAdditionalMetadata;
    }
    get exclusions() {
        return this.getListAttribute('exclusions');
    }
    set exclusions(value) {
        this._exclusions = value;
    }
    resetExclusions() {
        this._exclusions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exclusionsInput() {
        return this._exclusions;
    }
    get path() {
        return this.getStringAttribute('path');
    }
    set path(value) {
        this._path = value;
    }
    // Temporarily expose input value. Use with caution.
    get pathInput() {
        return this._path;
    }
}
exports.GlueCrawlerJdbcTargetOutputReference = GlueCrawlerJdbcTargetOutputReference;
_l = JSII_RTTI_SYMBOL_1;
GlueCrawlerJdbcTargetOutputReference[_l] = { fqn: "@cdktf/provider-aws.glueCrawler.GlueCrawlerJdbcTargetOutputReference", version: "19.15.0" };
class GlueCrawlerJdbcTargetList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GlueCrawlerJdbcTargetOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GlueCrawlerJdbcTargetList = GlueCrawlerJdbcTargetList;
_m = JSII_RTTI_SYMBOL_1;
GlueCrawlerJdbcTargetList[_m] = { fqn: "@cdktf/provider-aws.glueCrawler.GlueCrawlerJdbcTargetList", version: "19.15.0" };
function glueCrawlerLakeFormationConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        account_id: cdktf.stringToTerraform(struct.accountId),
        use_lake_formation_credentials: cdktf.booleanToTerraform(struct.useLakeFormationCredentials),
    };
}
exports.glueCrawlerLakeFormationConfigurationToTerraform = glueCrawlerLakeFormationConfigurationToTerraform;
function glueCrawlerLakeFormationConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        account_id: {
            value: cdktf.stringToHclTerraform(struct.accountId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        use_lake_formation_credentials: {
            value: cdktf.booleanToHclTerraform(struct.useLakeFormationCredentials),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.glueCrawlerLakeFormationConfigurationToHclTerraform = glueCrawlerLakeFormationConfigurationToHclTerraform;
class GlueCrawlerLakeFormationConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._accountId !== undefined) {
            hasAnyValues = true;
            internalValueResult.accountId = this._accountId;
        }
        if (this._useLakeFormationCredentials !== undefined) {
            hasAnyValues = true;
            internalValueResult.useLakeFormationCredentials = this._useLakeFormationCredentials;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._accountId = undefined;
            this._useLakeFormationCredentials = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._accountId = value.accountId;
            this._useLakeFormationCredentials = value.useLakeFormationCredentials;
        }
    }
    get accountId() {
        return this.getStringAttribute('account_id');
    }
    set accountId(value) {
        this._accountId = value;
    }
    resetAccountId() {
        this._accountId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accountIdInput() {
        return this._accountId;
    }
    get useLakeFormationCredentials() {
        return this.getBooleanAttribute('use_lake_formation_credentials');
    }
    set useLakeFormationCredentials(value) {
        this._useLakeFormationCredentials = value;
    }
    resetUseLakeFormationCredentials() {
        this._useLakeFormationCredentials = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get useLakeFormationCredentialsInput() {
        return this._useLakeFormationCredentials;
    }
}
exports.GlueCrawlerLakeFormationConfigurationOutputReference = GlueCrawlerLakeFormationConfigurationOutputReference;
_o = JSII_RTTI_SYMBOL_1;
GlueCrawlerLakeFormationConfigurationOutputReference[_o] = { fqn: "@cdktf/provider-aws.glueCrawler.GlueCrawlerLakeFormationConfigurationOutputReference", version: "19.15.0" };
function glueCrawlerLineageConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        crawler_lineage_settings: cdktf.stringToTerraform(struct.crawlerLineageSettings),
    };
}
exports.glueCrawlerLineageConfigurationToTerraform = glueCrawlerLineageConfigurationToTerraform;
function glueCrawlerLineageConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        crawler_lineage_settings: {
            value: cdktf.stringToHclTerraform(struct.crawlerLineageSettings),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.glueCrawlerLineageConfigurationToHclTerraform = glueCrawlerLineageConfigurationToHclTerraform;
class GlueCrawlerLineageConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._crawlerLineageSettings !== undefined) {
            hasAnyValues = true;
            internalValueResult.crawlerLineageSettings = this._crawlerLineageSettings;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._crawlerLineageSettings = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._crawlerLineageSettings = value.crawlerLineageSettings;
        }
    }
    get crawlerLineageSettings() {
        return this.getStringAttribute('crawler_lineage_settings');
    }
    set crawlerLineageSettings(value) {
        this._crawlerLineageSettings = value;
    }
    resetCrawlerLineageSettings() {
        this._crawlerLineageSettings = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get crawlerLineageSettingsInput() {
        return this._crawlerLineageSettings;
    }
}
exports.GlueCrawlerLineageConfigurationOutputReference = GlueCrawlerLineageConfigurationOutputReference;
_p = JSII_RTTI_SYMBOL_1;
GlueCrawlerLineageConfigurationOutputReference[_p] = { fqn: "@cdktf/provider-aws.glueCrawler.GlueCrawlerLineageConfigurationOutputReference", version: "19.15.0" };
function glueCrawlerMongodbTargetToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        connection_name: cdktf.stringToTerraform(struct.connectionName),
        path: cdktf.stringToTerraform(struct.path),
        scan_all: cdktf.booleanToTerraform(struct.scanAll),
    };
}
exports.glueCrawlerMongodbTargetToTerraform = glueCrawlerMongodbTargetToTerraform;
function glueCrawlerMongodbTargetToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        connection_name: {
            value: cdktf.stringToHclTerraform(struct.connectionName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        path: {
            value: cdktf.stringToHclTerraform(struct.path),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        scan_all: {
            value: cdktf.booleanToHclTerraform(struct.scanAll),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.glueCrawlerMongodbTargetToHclTerraform = glueCrawlerMongodbTargetToHclTerraform;
class GlueCrawlerMongodbTargetOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._connectionName !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectionName = this._connectionName;
        }
        if (this._path !== undefined) {
            hasAnyValues = true;
            internalValueResult.path = this._path;
        }
        if (this._scanAll !== undefined) {
            hasAnyValues = true;
            internalValueResult.scanAll = this._scanAll;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._connectionName = undefined;
            this._path = undefined;
            this._scanAll = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._connectionName = value.connectionName;
            this._path = value.path;
            this._scanAll = value.scanAll;
        }
    }
    get connectionName() {
        return this.getStringAttribute('connection_name');
    }
    set connectionName(value) {
        this._connectionName = value;
    }
    // Temporarily expose input value. Use with caution.
    get connectionNameInput() {
        return this._connectionName;
    }
    get path() {
        return this.getStringAttribute('path');
    }
    set path(value) {
        this._path = value;
    }
    // Temporarily expose input value. Use with caution.
    get pathInput() {
        return this._path;
    }
    get scanAll() {
        return this.getBooleanAttribute('scan_all');
    }
    set scanAll(value) {
        this._scanAll = value;
    }
    resetScanAll() {
        this._scanAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scanAllInput() {
        return this._scanAll;
    }
}
exports.GlueCrawlerMongodbTargetOutputReference = GlueCrawlerMongodbTargetOutputReference;
_q = JSII_RTTI_SYMBOL_1;
GlueCrawlerMongodbTargetOutputReference[_q] = { fqn: "@cdktf/provider-aws.glueCrawler.GlueCrawlerMongodbTargetOutputReference", version: "19.15.0" };
class GlueCrawlerMongodbTargetList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GlueCrawlerMongodbTargetOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GlueCrawlerMongodbTargetList = GlueCrawlerMongodbTargetList;
_r = JSII_RTTI_SYMBOL_1;
GlueCrawlerMongodbTargetList[_r] = { fqn: "@cdktf/provider-aws.glueCrawler.GlueCrawlerMongodbTargetList", version: "19.15.0" };
function glueCrawlerRecrawlPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        recrawl_behavior: cdktf.stringToTerraform(struct.recrawlBehavior),
    };
}
exports.glueCrawlerRecrawlPolicyToTerraform = glueCrawlerRecrawlPolicyToTerraform;
function glueCrawlerRecrawlPolicyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        recrawl_behavior: {
            value: cdktf.stringToHclTerraform(struct.recrawlBehavior),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.glueCrawlerRecrawlPolicyToHclTerraform = glueCrawlerRecrawlPolicyToHclTerraform;
class GlueCrawlerRecrawlPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._recrawlBehavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.recrawlBehavior = this._recrawlBehavior;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._recrawlBehavior = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._recrawlBehavior = value.recrawlBehavior;
        }
    }
    get recrawlBehavior() {
        return this.getStringAttribute('recrawl_behavior');
    }
    set recrawlBehavior(value) {
        this._recrawlBehavior = value;
    }
    resetRecrawlBehavior() {
        this._recrawlBehavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get recrawlBehaviorInput() {
        return this._recrawlBehavior;
    }
}
exports.GlueCrawlerRecrawlPolicyOutputReference = GlueCrawlerRecrawlPolicyOutputReference;
_s = JSII_RTTI_SYMBOL_1;
GlueCrawlerRecrawlPolicyOutputReference[_s] = { fqn: "@cdktf/provider-aws.glueCrawler.GlueCrawlerRecrawlPolicyOutputReference", version: "19.15.0" };
function glueCrawlerS3TargetToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        connection_name: cdktf.stringToTerraform(struct.connectionName),
        dlq_event_queue_arn: cdktf.stringToTerraform(struct.dlqEventQueueArn),
        event_queue_arn: cdktf.stringToTerraform(struct.eventQueueArn),
        exclusions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.exclusions),
        path: cdktf.stringToTerraform(struct.path),
        sample_size: cdktf.numberToTerraform(struct.sampleSize),
    };
}
exports.glueCrawlerS3TargetToTerraform = glueCrawlerS3TargetToTerraform;
function glueCrawlerS3TargetToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        connection_name: {
            value: cdktf.stringToHclTerraform(struct.connectionName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        dlq_event_queue_arn: {
            value: cdktf.stringToHclTerraform(struct.dlqEventQueueArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        event_queue_arn: {
            value: cdktf.stringToHclTerraform(struct.eventQueueArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        exclusions: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.exclusions),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        path: {
            value: cdktf.stringToHclTerraform(struct.path),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sample_size: {
            value: cdktf.numberToHclTerraform(struct.sampleSize),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.glueCrawlerS3TargetToHclTerraform = glueCrawlerS3TargetToHclTerraform;
class GlueCrawlerS3TargetOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._connectionName !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectionName = this._connectionName;
        }
        if (this._dlqEventQueueArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.dlqEventQueueArn = this._dlqEventQueueArn;
        }
        if (this._eventQueueArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.eventQueueArn = this._eventQueueArn;
        }
        if (this._exclusions !== undefined) {
            hasAnyValues = true;
            internalValueResult.exclusions = this._exclusions;
        }
        if (this._path !== undefined) {
            hasAnyValues = true;
            internalValueResult.path = this._path;
        }
        if (this._sampleSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.sampleSize = this._sampleSize;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._connectionName = undefined;
            this._dlqEventQueueArn = undefined;
            this._eventQueueArn = undefined;
            this._exclusions = undefined;
            this._path = undefined;
            this._sampleSize = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._connectionName = value.connectionName;
            this._dlqEventQueueArn = value.dlqEventQueueArn;
            this._eventQueueArn = value.eventQueueArn;
            this._exclusions = value.exclusions;
            this._path = value.path;
            this._sampleSize = value.sampleSize;
        }
    }
    get connectionName() {
        return this.getStringAttribute('connection_name');
    }
    set connectionName(value) {
        this._connectionName = value;
    }
    resetConnectionName() {
        this._connectionName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionNameInput() {
        return this._connectionName;
    }
    get dlqEventQueueArn() {
        return this.getStringAttribute('dlq_event_queue_arn');
    }
    set dlqEventQueueArn(value) {
        this._dlqEventQueueArn = value;
    }
    resetDlqEventQueueArn() {
        this._dlqEventQueueArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dlqEventQueueArnInput() {
        return this._dlqEventQueueArn;
    }
    get eventQueueArn() {
        return this.getStringAttribute('event_queue_arn');
    }
    set eventQueueArn(value) {
        this._eventQueueArn = value;
    }
    resetEventQueueArn() {
        this._eventQueueArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get eventQueueArnInput() {
        return this._eventQueueArn;
    }
    get exclusions() {
        return this.getListAttribute('exclusions');
    }
    set exclusions(value) {
        this._exclusions = value;
    }
    resetExclusions() {
        this._exclusions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exclusionsInput() {
        return this._exclusions;
    }
    get path() {
        return this.getStringAttribute('path');
    }
    set path(value) {
        this._path = value;
    }
    // Temporarily expose input value. Use with caution.
    get pathInput() {
        return this._path;
    }
    get sampleSize() {
        return this.getNumberAttribute('sample_size');
    }
    set sampleSize(value) {
        this._sampleSize = value;
    }
    resetSampleSize() {
        this._sampleSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sampleSizeInput() {
        return this._sampleSize;
    }
}
exports.GlueCrawlerS3TargetOutputReference = GlueCrawlerS3TargetOutputReference;
_t = JSII_RTTI_SYMBOL_1;
GlueCrawlerS3TargetOutputReference[_t] = { fqn: "@cdktf/provider-aws.glueCrawler.GlueCrawlerS3TargetOutputReference", version: "19.15.0" };
class GlueCrawlerS3TargetList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GlueCrawlerS3TargetOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GlueCrawlerS3TargetList = GlueCrawlerS3TargetList;
_u = JSII_RTTI_SYMBOL_1;
GlueCrawlerS3TargetList[_u] = { fqn: "@cdktf/provider-aws.glueCrawler.GlueCrawlerS3TargetList", version: "19.15.0" };
function glueCrawlerSchemaChangePolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        delete_behavior: cdktf.stringToTerraform(struct.deleteBehavior),
        update_behavior: cdktf.stringToTerraform(struct.updateBehavior),
    };
}
exports.glueCrawlerSchemaChangePolicyToTerraform = glueCrawlerSchemaChangePolicyToTerraform;
function glueCrawlerSchemaChangePolicyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        delete_behavior: {
            value: cdktf.stringToHclTerraform(struct.deleteBehavior),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update_behavior: {
            value: cdktf.stringToHclTerraform(struct.updateBehavior),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.glueCrawlerSchemaChangePolicyToHclTerraform = glueCrawlerSchemaChangePolicyToHclTerraform;
class GlueCrawlerSchemaChangePolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._deleteBehavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.deleteBehavior = this._deleteBehavior;
        }
        if (this._updateBehavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.updateBehavior = this._updateBehavior;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._deleteBehavior = undefined;
            this._updateBehavior = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._deleteBehavior = value.deleteBehavior;
            this._updateBehavior = value.updateBehavior;
        }
    }
    get deleteBehavior() {
        return this.getStringAttribute('delete_behavior');
    }
    set deleteBehavior(value) {
        this._deleteBehavior = value;
    }
    resetDeleteBehavior() {
        this._deleteBehavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteBehaviorInput() {
        return this._deleteBehavior;
    }
    get updateBehavior() {
        return this.getStringAttribute('update_behavior');
    }
    set updateBehavior(value) {
        this._updateBehavior = value;
    }
    resetUpdateBehavior() {
        this._updateBehavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateBehaviorInput() {
        return this._updateBehavior;
    }
}
exports.GlueCrawlerSchemaChangePolicyOutputReference = GlueCrawlerSchemaChangePolicyOutputReference;
_v = JSII_RTTI_SYMBOL_1;
GlueCrawlerSchemaChangePolicyOutputReference[_v] = { fqn: "@cdktf/provider-aws.glueCrawler.GlueCrawlerSchemaChangePolicyOutputReference", version: "19.15.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/glue_crawler aws_glue_crawler}
*/
class GlueCrawler extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a GlueCrawler resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the GlueCrawler to import
    * @param importFromId The id of the existing GlueCrawler that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/glue_crawler#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the GlueCrawler to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_glue_crawler", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/glue_crawler aws_glue_crawler} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options GlueCrawlerConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_glue_crawler',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // catalog_target - computed: false, optional: true, required: false
        this._catalogTarget = new GlueCrawlerCatalogTargetList(this, "catalog_target", false);
        // delta_target - computed: false, optional: true, required: false
        this._deltaTarget = new GlueCrawlerDeltaTargetList(this, "delta_target", false);
        // dynamodb_target - computed: false, optional: true, required: false
        this._dynamodbTarget = new GlueCrawlerDynamodbTargetList(this, "dynamodb_target", false);
        // hudi_target - computed: false, optional: true, required: false
        this._hudiTarget = new GlueCrawlerHudiTargetList(this, "hudi_target", false);
        // iceberg_target - computed: false, optional: true, required: false
        this._icebergTarget = new GlueCrawlerIcebergTargetList(this, "iceberg_target", false);
        // jdbc_target - computed: false, optional: true, required: false
        this._jdbcTarget = new GlueCrawlerJdbcTargetList(this, "jdbc_target", false);
        // lake_formation_configuration - computed: false, optional: true, required: false
        this._lakeFormationConfiguration = new GlueCrawlerLakeFormationConfigurationOutputReference(this, "lake_formation_configuration");
        // lineage_configuration - computed: false, optional: true, required: false
        this._lineageConfiguration = new GlueCrawlerLineageConfigurationOutputReference(this, "lineage_configuration");
        // mongodb_target - computed: false, optional: true, required: false
        this._mongodbTarget = new GlueCrawlerMongodbTargetList(this, "mongodb_target", false);
        // recrawl_policy - computed: false, optional: true, required: false
        this._recrawlPolicy = new GlueCrawlerRecrawlPolicyOutputReference(this, "recrawl_policy");
        // s3_target - computed: false, optional: true, required: false
        this._s3Target = new GlueCrawlerS3TargetList(this, "s3_target", false);
        // schema_change_policy - computed: false, optional: true, required: false
        this._schemaChangePolicy = new GlueCrawlerSchemaChangePolicyOutputReference(this, "schema_change_policy");
        this._classifiers = config.classifiers;
        this._configuration = config.configuration;
        this._databaseName = config.databaseName;
        this._description = config.description;
        this._id = config.id;
        this._name = config.name;
        this._role = config.role;
        this._schedule = config.schedule;
        this._securityConfiguration = config.securityConfiguration;
        this._tablePrefix = config.tablePrefix;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._catalogTarget.internalValue = config.catalogTarget;
        this._deltaTarget.internalValue = config.deltaTarget;
        this._dynamodbTarget.internalValue = config.dynamodbTarget;
        this._hudiTarget.internalValue = config.hudiTarget;
        this._icebergTarget.internalValue = config.icebergTarget;
        this._jdbcTarget.internalValue = config.jdbcTarget;
        this._lakeFormationConfiguration.internalValue = config.lakeFormationConfiguration;
        this._lineageConfiguration.internalValue = config.lineageConfiguration;
        this._mongodbTarget.internalValue = config.mongodbTarget;
        this._recrawlPolicy.internalValue = config.recrawlPolicy;
        this._s3Target.internalValue = config.s3Target;
        this._schemaChangePolicy.internalValue = config.schemaChangePolicy;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get classifiers() {
        return this.getListAttribute('classifiers');
    }
    set classifiers(value) {
        this._classifiers = value;
    }
    resetClassifiers() {
        this._classifiers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get classifiersInput() {
        return this._classifiers;
    }
    get configuration() {
        return this.getStringAttribute('configuration');
    }
    set configuration(value) {
        this._configuration = value;
    }
    resetConfiguration() {
        this._configuration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get configurationInput() {
        return this._configuration;
    }
    get databaseName() {
        return this.getStringAttribute('database_name');
    }
    set databaseName(value) {
        this._databaseName = value;
    }
    // Temporarily expose input value. Use with caution.
    get databaseNameInput() {
        return this._databaseName;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get role() {
        return this.getStringAttribute('role');
    }
    set role(value) {
        this._role = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleInput() {
        return this._role;
    }
    get schedule() {
        return this.getStringAttribute('schedule');
    }
    set schedule(value) {
        this._schedule = value;
    }
    resetSchedule() {
        this._schedule = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scheduleInput() {
        return this._schedule;
    }
    get securityConfiguration() {
        return this.getStringAttribute('security_configuration');
    }
    set securityConfiguration(value) {
        this._securityConfiguration = value;
    }
    resetSecurityConfiguration() {
        this._securityConfiguration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityConfigurationInput() {
        return this._securityConfiguration;
    }
    get tablePrefix() {
        return this.getStringAttribute('table_prefix');
    }
    set tablePrefix(value) {
        this._tablePrefix = value;
    }
    resetTablePrefix() {
        this._tablePrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tablePrefixInput() {
        return this._tablePrefix;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get catalogTarget() {
        return this._catalogTarget;
    }
    putCatalogTarget(value) {
        this._catalogTarget.internalValue = value;
    }
    resetCatalogTarget() {
        this._catalogTarget.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get catalogTargetInput() {
        return this._catalogTarget.internalValue;
    }
    get deltaTarget() {
        return this._deltaTarget;
    }
    putDeltaTarget(value) {
        this._deltaTarget.internalValue = value;
    }
    resetDeltaTarget() {
        this._deltaTarget.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deltaTargetInput() {
        return this._deltaTarget.internalValue;
    }
    get dynamodbTarget() {
        return this._dynamodbTarget;
    }
    putDynamodbTarget(value) {
        this._dynamodbTarget.internalValue = value;
    }
    resetDynamodbTarget() {
        this._dynamodbTarget.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dynamodbTargetInput() {
        return this._dynamodbTarget.internalValue;
    }
    get hudiTarget() {
        return this._hudiTarget;
    }
    putHudiTarget(value) {
        this._hudiTarget.internalValue = value;
    }
    resetHudiTarget() {
        this._hudiTarget.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hudiTargetInput() {
        return this._hudiTarget.internalValue;
    }
    get icebergTarget() {
        return this._icebergTarget;
    }
    putIcebergTarget(value) {
        this._icebergTarget.internalValue = value;
    }
    resetIcebergTarget() {
        this._icebergTarget.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get icebergTargetInput() {
        return this._icebergTarget.internalValue;
    }
    get jdbcTarget() {
        return this._jdbcTarget;
    }
    putJdbcTarget(value) {
        this._jdbcTarget.internalValue = value;
    }
    resetJdbcTarget() {
        this._jdbcTarget.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jdbcTargetInput() {
        return this._jdbcTarget.internalValue;
    }
    get lakeFormationConfiguration() {
        return this._lakeFormationConfiguration;
    }
    putLakeFormationConfiguration(value) {
        this._lakeFormationConfiguration.internalValue = value;
    }
    resetLakeFormationConfiguration() {
        this._lakeFormationConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lakeFormationConfigurationInput() {
        return this._lakeFormationConfiguration.internalValue;
    }
    get lineageConfiguration() {
        return this._lineageConfiguration;
    }
    putLineageConfiguration(value) {
        this._lineageConfiguration.internalValue = value;
    }
    resetLineageConfiguration() {
        this._lineageConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lineageConfigurationInput() {
        return this._lineageConfiguration.internalValue;
    }
    get mongodbTarget() {
        return this._mongodbTarget;
    }
    putMongodbTarget(value) {
        this._mongodbTarget.internalValue = value;
    }
    resetMongodbTarget() {
        this._mongodbTarget.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mongodbTargetInput() {
        return this._mongodbTarget.internalValue;
    }
    get recrawlPolicy() {
        return this._recrawlPolicy;
    }
    putRecrawlPolicy(value) {
        this._recrawlPolicy.internalValue = value;
    }
    resetRecrawlPolicy() {
        this._recrawlPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get recrawlPolicyInput() {
        return this._recrawlPolicy.internalValue;
    }
    get s3Target() {
        return this._s3Target;
    }
    putS3Target(value) {
        this._s3Target.internalValue = value;
    }
    resetS3Target() {
        this._s3Target.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3TargetInput() {
        return this._s3Target.internalValue;
    }
    get schemaChangePolicy() {
        return this._schemaChangePolicy;
    }
    putSchemaChangePolicy(value) {
        this._schemaChangePolicy.internalValue = value;
    }
    resetSchemaChangePolicy() {
        this._schemaChangePolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get schemaChangePolicyInput() {
        return this._schemaChangePolicy.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            classifiers: cdktf.listMapper(cdktf.stringToTerraform, false)(this._classifiers),
            configuration: cdktf.stringToTerraform(this._configuration),
            database_name: cdktf.stringToTerraform(this._databaseName),
            description: cdktf.stringToTerraform(this._description),
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            role: cdktf.stringToTerraform(this._role),
            schedule: cdktf.stringToTerraform(this._schedule),
            security_configuration: cdktf.stringToTerraform(this._securityConfiguration),
            table_prefix: cdktf.stringToTerraform(this._tablePrefix),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            catalog_target: cdktf.listMapper(glueCrawlerCatalogTargetToTerraform, true)(this._catalogTarget.internalValue),
            delta_target: cdktf.listMapper(glueCrawlerDeltaTargetToTerraform, true)(this._deltaTarget.internalValue),
            dynamodb_target: cdktf.listMapper(glueCrawlerDynamodbTargetToTerraform, true)(this._dynamodbTarget.internalValue),
            hudi_target: cdktf.listMapper(glueCrawlerHudiTargetToTerraform, true)(this._hudiTarget.internalValue),
            iceberg_target: cdktf.listMapper(glueCrawlerIcebergTargetToTerraform, true)(this._icebergTarget.internalValue),
            jdbc_target: cdktf.listMapper(glueCrawlerJdbcTargetToTerraform, true)(this._jdbcTarget.internalValue),
            lake_formation_configuration: glueCrawlerLakeFormationConfigurationToTerraform(this._lakeFormationConfiguration.internalValue),
            lineage_configuration: glueCrawlerLineageConfigurationToTerraform(this._lineageConfiguration.internalValue),
            mongodb_target: cdktf.listMapper(glueCrawlerMongodbTargetToTerraform, true)(this._mongodbTarget.internalValue),
            recrawl_policy: glueCrawlerRecrawlPolicyToTerraform(this._recrawlPolicy.internalValue),
            s3_target: cdktf.listMapper(glueCrawlerS3TargetToTerraform, true)(this._s3Target.internalValue),
            schema_change_policy: glueCrawlerSchemaChangePolicyToTerraform(this._schemaChangePolicy.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            classifiers: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._classifiers),
                isBlock: false,
                type: "list",
                storageClassType: "stringList",
            },
            configuration: {
                value: cdktf.stringToHclTerraform(this._configuration),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            database_name: {
                value: cdktf.stringToHclTerraform(this._databaseName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            description: {
                value: cdktf.stringToHclTerraform(this._description),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            role: {
                value: cdktf.stringToHclTerraform(this._role),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            schedule: {
                value: cdktf.stringToHclTerraform(this._schedule),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            security_configuration: {
                value: cdktf.stringToHclTerraform(this._securityConfiguration),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            table_prefix: {
                value: cdktf.stringToHclTerraform(this._tablePrefix),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            tags: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tags),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            tags_all: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tagsAll),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            catalog_target: {
                value: cdktf.listMapperHcl(glueCrawlerCatalogTargetToHclTerraform, true)(this._catalogTarget.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "GlueCrawlerCatalogTargetList",
            },
            delta_target: {
                value: cdktf.listMapperHcl(glueCrawlerDeltaTargetToHclTerraform, true)(this._deltaTarget.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "GlueCrawlerDeltaTargetList",
            },
            dynamodb_target: {
                value: cdktf.listMapperHcl(glueCrawlerDynamodbTargetToHclTerraform, true)(this._dynamodbTarget.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "GlueCrawlerDynamodbTargetList",
            },
            hudi_target: {
                value: cdktf.listMapperHcl(glueCrawlerHudiTargetToHclTerraform, true)(this._hudiTarget.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "GlueCrawlerHudiTargetList",
            },
            iceberg_target: {
                value: cdktf.listMapperHcl(glueCrawlerIcebergTargetToHclTerraform, true)(this._icebergTarget.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "GlueCrawlerIcebergTargetList",
            },
            jdbc_target: {
                value: cdktf.listMapperHcl(glueCrawlerJdbcTargetToHclTerraform, true)(this._jdbcTarget.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "GlueCrawlerJdbcTargetList",
            },
            lake_formation_configuration: {
                value: glueCrawlerLakeFormationConfigurationToHclTerraform(this._lakeFormationConfiguration.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "GlueCrawlerLakeFormationConfigurationList",
            },
            lineage_configuration: {
                value: glueCrawlerLineageConfigurationToHclTerraform(this._lineageConfiguration.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "GlueCrawlerLineageConfigurationList",
            },
            mongodb_target: {
                value: cdktf.listMapperHcl(glueCrawlerMongodbTargetToHclTerraform, true)(this._mongodbTarget.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "GlueCrawlerMongodbTargetList",
            },
            recrawl_policy: {
                value: glueCrawlerRecrawlPolicyToHclTerraform(this._recrawlPolicy.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "GlueCrawlerRecrawlPolicyList",
            },
            s3_target: {
                value: cdktf.listMapperHcl(glueCrawlerS3TargetToHclTerraform, true)(this._s3Target.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "GlueCrawlerS3TargetList",
            },
            schema_change_policy: {
                value: glueCrawlerSchemaChangePolicyToHclTerraform(this._schemaChangePolicy.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "GlueCrawlerSchemaChangePolicyList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.GlueCrawler = GlueCrawler;
_w = JSII_RTTI_SYMBOL_1;
GlueCrawler[_w] = { fqn: "@cdktf/provider-aws.glueCrawler.GlueCrawler", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
GlueCrawler.tfResourceType = "aws_glue_crawler";
//# sourceMappingURL=data:application/json;base64,