"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SsoadminApplicationAssignment = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/ssoadmin_application_assignment aws_ssoadmin_application_assignment}
*/
class SsoadminApplicationAssignment extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a SsoadminApplicationAssignment resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the SsoadminApplicationAssignment to import
    * @param importFromId The id of the existing SsoadminApplicationAssignment that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/ssoadmin_application_assignment#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the SsoadminApplicationAssignment to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_ssoadmin_application_assignment", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/ssoadmin_application_assignment aws_ssoadmin_application_assignment} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SsoadminApplicationAssignmentConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_ssoadmin_application_assignment',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        this._applicationArn = config.applicationArn;
        this._principalId = config.principalId;
        this._principalType = config.principalType;
    }
    get applicationArn() {
        return this.getStringAttribute('application_arn');
    }
    set applicationArn(value) {
        this._applicationArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get applicationArnInput() {
        return this._applicationArn;
    }
    // id - computed: true, optional: false, required: false
    get id() {
        return this.getStringAttribute('id');
    }
    get principalId() {
        return this.getStringAttribute('principal_id');
    }
    set principalId(value) {
        this._principalId = value;
    }
    // Temporarily expose input value. Use with caution.
    get principalIdInput() {
        return this._principalId;
    }
    get principalType() {
        return this.getStringAttribute('principal_type');
    }
    set principalType(value) {
        this._principalType = value;
    }
    // Temporarily expose input value. Use with caution.
    get principalTypeInput() {
        return this._principalType;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            application_arn: cdktf.stringToTerraform(this._applicationArn),
            principal_id: cdktf.stringToTerraform(this._principalId),
            principal_type: cdktf.stringToTerraform(this._principalType),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            application_arn: {
                value: cdktf.stringToHclTerraform(this._applicationArn),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            principal_id: {
                value: cdktf.stringToHclTerraform(this._principalId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            principal_type: {
                value: cdktf.stringToHclTerraform(this._principalType),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.SsoadminApplicationAssignment = SsoadminApplicationAssignment;
_a = JSII_RTTI_SYMBOL_1;
SsoadminApplicationAssignment[_a] = { fqn: "@cdktf/provider-aws.ssoadminApplicationAssignment.SsoadminApplicationAssignment", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
SsoadminApplicationAssignment.tfResourceType = "aws_ssoadmin_application_assignment";
//# sourceMappingURL=data:application/json;base64,