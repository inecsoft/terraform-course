"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Route53RecoveryreadinessResourceSet = exports.Route53RecoveryreadinessResourceSetTimeoutsOutputReference = exports.route53RecoveryreadinessResourceSetTimeoutsToHclTerraform = exports.route53RecoveryreadinessResourceSetTimeoutsToTerraform = exports.Route53RecoveryreadinessResourceSetResourcesList = exports.Route53RecoveryreadinessResourceSetResourcesOutputReference = exports.route53RecoveryreadinessResourceSetResourcesToHclTerraform = exports.route53RecoveryreadinessResourceSetResourcesToTerraform = exports.Route53RecoveryreadinessResourceSetResourcesDnsTargetResourceOutputReference = exports.route53RecoveryreadinessResourceSetResourcesDnsTargetResourceToHclTerraform = exports.route53RecoveryreadinessResourceSetResourcesDnsTargetResourceToTerraform = exports.Route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceOutputReference = exports.route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceToHclTerraform = exports.route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceToTerraform = exports.Route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceR53ResourceOutputReference = exports.route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceR53ResourceToHclTerraform = exports.route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceR53ResourceToTerraform = exports.Route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceNlbResourceOutputReference = exports.route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceNlbResourceToHclTerraform = exports.route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceNlbResourceToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceNlbResourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        arn: cdktf.stringToTerraform(struct.arn),
    };
}
exports.route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceNlbResourceToTerraform = route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceNlbResourceToTerraform;
function route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceNlbResourceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        arn: {
            value: cdktf.stringToHclTerraform(struct.arn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceNlbResourceToHclTerraform = route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceNlbResourceToHclTerraform;
class Route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceNlbResourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._arn !== undefined) {
            hasAnyValues = true;
            internalValueResult.arn = this._arn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._arn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._arn = value.arn;
        }
    }
    get arn() {
        return this.getStringAttribute('arn');
    }
    set arn(value) {
        this._arn = value;
    }
    resetArn() {
        this._arn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get arnInput() {
        return this._arn;
    }
}
exports.Route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceNlbResourceOutputReference = Route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceNlbResourceOutputReference;
_a = JSII_RTTI_SYMBOL_1;
Route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceNlbResourceOutputReference[_a] = { fqn: "@cdktf/provider-aws.route53RecoveryreadinessResourceSet.Route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceNlbResourceOutputReference", version: "19.15.0" };
function route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceR53ResourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        domain_name: cdktf.stringToTerraform(struct.domainName),
        record_set_id: cdktf.stringToTerraform(struct.recordSetId),
    };
}
exports.route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceR53ResourceToTerraform = route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceR53ResourceToTerraform;
function route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceR53ResourceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        domain_name: {
            value: cdktf.stringToHclTerraform(struct.domainName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        record_set_id: {
            value: cdktf.stringToHclTerraform(struct.recordSetId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceR53ResourceToHclTerraform = route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceR53ResourceToHclTerraform;
class Route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceR53ResourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._domainName !== undefined) {
            hasAnyValues = true;
            internalValueResult.domainName = this._domainName;
        }
        if (this._recordSetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.recordSetId = this._recordSetId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._domainName = undefined;
            this._recordSetId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._domainName = value.domainName;
            this._recordSetId = value.recordSetId;
        }
    }
    get domainName() {
        return this.getStringAttribute('domain_name');
    }
    set domainName(value) {
        this._domainName = value;
    }
    resetDomainName() {
        this._domainName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get domainNameInput() {
        return this._domainName;
    }
    get recordSetId() {
        return this.getStringAttribute('record_set_id');
    }
    set recordSetId(value) {
        this._recordSetId = value;
    }
    resetRecordSetId() {
        this._recordSetId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get recordSetIdInput() {
        return this._recordSetId;
    }
}
exports.Route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceR53ResourceOutputReference = Route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceR53ResourceOutputReference;
_b = JSII_RTTI_SYMBOL_1;
Route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceR53ResourceOutputReference[_b] = { fqn: "@cdktf/provider-aws.route53RecoveryreadinessResourceSet.Route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceR53ResourceOutputReference", version: "19.15.0" };
function route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        nlb_resource: route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceNlbResourceToTerraform(struct.nlbResource),
        r53_resource: route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceR53ResourceToTerraform(struct.r53Resource),
    };
}
exports.route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceToTerraform = route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceToTerraform;
function route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        nlb_resource: {
            value: route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceNlbResourceToHclTerraform(struct.nlbResource),
            isBlock: true,
            type: "list",
            storageClassType: "Route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceNlbResourceList",
        },
        r53_resource: {
            value: route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceR53ResourceToHclTerraform(struct.r53Resource),
            isBlock: true,
            type: "list",
            storageClassType: "Route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceR53ResourceList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceToHclTerraform = route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceToHclTerraform;
class Route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // nlb_resource - computed: false, optional: true, required: false
        this._nlbResource = new Route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceNlbResourceOutputReference(this, "nlb_resource");
        // r53_resource - computed: false, optional: true, required: false
        this._r53Resource = new Route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceR53ResourceOutputReference(this, "r53_resource");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nlbResource?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.nlbResource = this._nlbResource?.internalValue;
        }
        if (this._r53Resource?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.r53Resource = this._r53Resource?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nlbResource.internalValue = undefined;
            this._r53Resource.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nlbResource.internalValue = value.nlbResource;
            this._r53Resource.internalValue = value.r53Resource;
        }
    }
    get nlbResource() {
        return this._nlbResource;
    }
    putNlbResource(value) {
        this._nlbResource.internalValue = value;
    }
    resetNlbResource() {
        this._nlbResource.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nlbResourceInput() {
        return this._nlbResource.internalValue;
    }
    get r53Resource() {
        return this._r53Resource;
    }
    putR53Resource(value) {
        this._r53Resource.internalValue = value;
    }
    resetR53Resource() {
        this._r53Resource.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get r53ResourceInput() {
        return this._r53Resource.internalValue;
    }
}
exports.Route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceOutputReference = Route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceOutputReference;
_c = JSII_RTTI_SYMBOL_1;
Route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceOutputReference[_c] = { fqn: "@cdktf/provider-aws.route53RecoveryreadinessResourceSet.Route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceOutputReference", version: "19.15.0" };
function route53RecoveryreadinessResourceSetResourcesDnsTargetResourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        domain_name: cdktf.stringToTerraform(struct.domainName),
        hosted_zone_arn: cdktf.stringToTerraform(struct.hostedZoneArn),
        record_set_id: cdktf.stringToTerraform(struct.recordSetId),
        record_type: cdktf.stringToTerraform(struct.recordType),
        target_resource: route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceToTerraform(struct.targetResource),
    };
}
exports.route53RecoveryreadinessResourceSetResourcesDnsTargetResourceToTerraform = route53RecoveryreadinessResourceSetResourcesDnsTargetResourceToTerraform;
function route53RecoveryreadinessResourceSetResourcesDnsTargetResourceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        domain_name: {
            value: cdktf.stringToHclTerraform(struct.domainName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        hosted_zone_arn: {
            value: cdktf.stringToHclTerraform(struct.hostedZoneArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        record_set_id: {
            value: cdktf.stringToHclTerraform(struct.recordSetId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        record_type: {
            value: cdktf.stringToHclTerraform(struct.recordType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        target_resource: {
            value: route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceToHclTerraform(struct.targetResource),
            isBlock: true,
            type: "list",
            storageClassType: "Route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.route53RecoveryreadinessResourceSetResourcesDnsTargetResourceToHclTerraform = route53RecoveryreadinessResourceSetResourcesDnsTargetResourceToHclTerraform;
class Route53RecoveryreadinessResourceSetResourcesDnsTargetResourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // target_resource - computed: false, optional: true, required: false
        this._targetResource = new Route53RecoveryreadinessResourceSetResourcesDnsTargetResourceTargetResourceOutputReference(this, "target_resource");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._domainName !== undefined) {
            hasAnyValues = true;
            internalValueResult.domainName = this._domainName;
        }
        if (this._hostedZoneArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.hostedZoneArn = this._hostedZoneArn;
        }
        if (this._recordSetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.recordSetId = this._recordSetId;
        }
        if (this._recordType !== undefined) {
            hasAnyValues = true;
            internalValueResult.recordType = this._recordType;
        }
        if (this._targetResource?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetResource = this._targetResource?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._domainName = undefined;
            this._hostedZoneArn = undefined;
            this._recordSetId = undefined;
            this._recordType = undefined;
            this._targetResource.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._domainName = value.domainName;
            this._hostedZoneArn = value.hostedZoneArn;
            this._recordSetId = value.recordSetId;
            this._recordType = value.recordType;
            this._targetResource.internalValue = value.targetResource;
        }
    }
    get domainName() {
        return this.getStringAttribute('domain_name');
    }
    set domainName(value) {
        this._domainName = value;
    }
    // Temporarily expose input value. Use with caution.
    get domainNameInput() {
        return this._domainName;
    }
    get hostedZoneArn() {
        return this.getStringAttribute('hosted_zone_arn');
    }
    set hostedZoneArn(value) {
        this._hostedZoneArn = value;
    }
    resetHostedZoneArn() {
        this._hostedZoneArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostedZoneArnInput() {
        return this._hostedZoneArn;
    }
    get recordSetId() {
        return this.getStringAttribute('record_set_id');
    }
    set recordSetId(value) {
        this._recordSetId = value;
    }
    resetRecordSetId() {
        this._recordSetId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get recordSetIdInput() {
        return this._recordSetId;
    }
    get recordType() {
        return this.getStringAttribute('record_type');
    }
    set recordType(value) {
        this._recordType = value;
    }
    resetRecordType() {
        this._recordType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get recordTypeInput() {
        return this._recordType;
    }
    get targetResource() {
        return this._targetResource;
    }
    putTargetResource(value) {
        this._targetResource.internalValue = value;
    }
    resetTargetResource() {
        this._targetResource.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetResourceInput() {
        return this._targetResource.internalValue;
    }
}
exports.Route53RecoveryreadinessResourceSetResourcesDnsTargetResourceOutputReference = Route53RecoveryreadinessResourceSetResourcesDnsTargetResourceOutputReference;
_d = JSII_RTTI_SYMBOL_1;
Route53RecoveryreadinessResourceSetResourcesDnsTargetResourceOutputReference[_d] = { fqn: "@cdktf/provider-aws.route53RecoveryreadinessResourceSet.Route53RecoveryreadinessResourceSetResourcesDnsTargetResourceOutputReference", version: "19.15.0" };
function route53RecoveryreadinessResourceSetResourcesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        readiness_scopes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.readinessScopes),
        resource_arn: cdktf.stringToTerraform(struct.resourceArn),
        dns_target_resource: route53RecoveryreadinessResourceSetResourcesDnsTargetResourceToTerraform(struct.dnsTargetResource),
    };
}
exports.route53RecoveryreadinessResourceSetResourcesToTerraform = route53RecoveryreadinessResourceSetResourcesToTerraform;
function route53RecoveryreadinessResourceSetResourcesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        readiness_scopes: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.readinessScopes),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        resource_arn: {
            value: cdktf.stringToHclTerraform(struct.resourceArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        dns_target_resource: {
            value: route53RecoveryreadinessResourceSetResourcesDnsTargetResourceToHclTerraform(struct.dnsTargetResource),
            isBlock: true,
            type: "list",
            storageClassType: "Route53RecoveryreadinessResourceSetResourcesDnsTargetResourceList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.route53RecoveryreadinessResourceSetResourcesToHclTerraform = route53RecoveryreadinessResourceSetResourcesToHclTerraform;
class Route53RecoveryreadinessResourceSetResourcesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // dns_target_resource - computed: false, optional: true, required: false
        this._dnsTargetResource = new Route53RecoveryreadinessResourceSetResourcesDnsTargetResourceOutputReference(this, "dns_target_resource");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._readinessScopes !== undefined) {
            hasAnyValues = true;
            internalValueResult.readinessScopes = this._readinessScopes;
        }
        if (this._resourceArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourceArn = this._resourceArn;
        }
        if (this._dnsTargetResource?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dnsTargetResource = this._dnsTargetResource?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._readinessScopes = undefined;
            this._resourceArn = undefined;
            this._dnsTargetResource.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._readinessScopes = value.readinessScopes;
            this._resourceArn = value.resourceArn;
            this._dnsTargetResource.internalValue = value.dnsTargetResource;
        }
    }
    // component_id - computed: true, optional: false, required: false
    get componentId() {
        return this.getStringAttribute('component_id');
    }
    get readinessScopes() {
        return this.getListAttribute('readiness_scopes');
    }
    set readinessScopes(value) {
        this._readinessScopes = value;
    }
    resetReadinessScopes() {
        this._readinessScopes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get readinessScopesInput() {
        return this._readinessScopes;
    }
    get resourceArn() {
        return this.getStringAttribute('resource_arn');
    }
    set resourceArn(value) {
        this._resourceArn = value;
    }
    resetResourceArn() {
        this._resourceArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceArnInput() {
        return this._resourceArn;
    }
    get dnsTargetResource() {
        return this._dnsTargetResource;
    }
    putDnsTargetResource(value) {
        this._dnsTargetResource.internalValue = value;
    }
    resetDnsTargetResource() {
        this._dnsTargetResource.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dnsTargetResourceInput() {
        return this._dnsTargetResource.internalValue;
    }
}
exports.Route53RecoveryreadinessResourceSetResourcesOutputReference = Route53RecoveryreadinessResourceSetResourcesOutputReference;
_e = JSII_RTTI_SYMBOL_1;
Route53RecoveryreadinessResourceSetResourcesOutputReference[_e] = { fqn: "@cdktf/provider-aws.route53RecoveryreadinessResourceSet.Route53RecoveryreadinessResourceSetResourcesOutputReference", version: "19.15.0" };
class Route53RecoveryreadinessResourceSetResourcesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Route53RecoveryreadinessResourceSetResourcesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Route53RecoveryreadinessResourceSetResourcesList = Route53RecoveryreadinessResourceSetResourcesList;
_f = JSII_RTTI_SYMBOL_1;
Route53RecoveryreadinessResourceSetResourcesList[_f] = { fqn: "@cdktf/provider-aws.route53RecoveryreadinessResourceSet.Route53RecoveryreadinessResourceSetResourcesList", version: "19.15.0" };
function route53RecoveryreadinessResourceSetTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        delete: cdktf.stringToTerraform(struct.delete),
    };
}
exports.route53RecoveryreadinessResourceSetTimeoutsToTerraform = route53RecoveryreadinessResourceSetTimeoutsToTerraform;
function route53RecoveryreadinessResourceSetTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.route53RecoveryreadinessResourceSetTimeoutsToHclTerraform = route53RecoveryreadinessResourceSetTimeoutsToHclTerraform;
class Route53RecoveryreadinessResourceSetTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._delete = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._delete = value.delete;
        }
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
}
exports.Route53RecoveryreadinessResourceSetTimeoutsOutputReference = Route53RecoveryreadinessResourceSetTimeoutsOutputReference;
_g = JSII_RTTI_SYMBOL_1;
Route53RecoveryreadinessResourceSetTimeoutsOutputReference[_g] = { fqn: "@cdktf/provider-aws.route53RecoveryreadinessResourceSet.Route53RecoveryreadinessResourceSetTimeoutsOutputReference", version: "19.15.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/route53recoveryreadiness_resource_set aws_route53recoveryreadiness_resource_set}
*/
class Route53RecoveryreadinessResourceSet extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a Route53RecoveryreadinessResourceSet resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the Route53RecoveryreadinessResourceSet to import
    * @param importFromId The id of the existing Route53RecoveryreadinessResourceSet that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/route53recoveryreadiness_resource_set#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the Route53RecoveryreadinessResourceSet to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_route53recoveryreadiness_resource_set", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/route53recoveryreadiness_resource_set aws_route53recoveryreadiness_resource_set} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options Route53RecoveryreadinessResourceSetConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_route53recoveryreadiness_resource_set',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // resources - computed: false, optional: false, required: true
        this._resources = new Route53RecoveryreadinessResourceSetResourcesList(this, "resources", false);
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new Route53RecoveryreadinessResourceSetTimeoutsOutputReference(this, "timeouts");
        this._id = config.id;
        this._resourceSetName = config.resourceSetName;
        this._resourceSetType = config.resourceSetType;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._resources.internalValue = config.resources;
        this._timeouts.internalValue = config.timeouts;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get resourceSetName() {
        return this.getStringAttribute('resource_set_name');
    }
    set resourceSetName(value) {
        this._resourceSetName = value;
    }
    // Temporarily expose input value. Use with caution.
    get resourceSetNameInput() {
        return this._resourceSetName;
    }
    get resourceSetType() {
        return this.getStringAttribute('resource_set_type');
    }
    set resourceSetType(value) {
        this._resourceSetType = value;
    }
    // Temporarily expose input value. Use with caution.
    get resourceSetTypeInput() {
        return this._resourceSetType;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get resources() {
        return this._resources;
    }
    putResources(value) {
        this._resources.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get resourcesInput() {
        return this._resources.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
            resource_set_name: cdktf.stringToTerraform(this._resourceSetName),
            resource_set_type: cdktf.stringToTerraform(this._resourceSetType),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            resources: cdktf.listMapper(route53RecoveryreadinessResourceSetResourcesToTerraform, true)(this._resources.internalValue),
            timeouts: route53RecoveryreadinessResourceSetTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            resource_set_name: {
                value: cdktf.stringToHclTerraform(this._resourceSetName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            resource_set_type: {
                value: cdktf.stringToHclTerraform(this._resourceSetType),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            tags: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tags),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            tags_all: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tagsAll),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            resources: {
                value: cdktf.listMapperHcl(route53RecoveryreadinessResourceSetResourcesToHclTerraform, true)(this._resources.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "Route53RecoveryreadinessResourceSetResourcesList",
            },
            timeouts: {
                value: route53RecoveryreadinessResourceSetTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "Route53RecoveryreadinessResourceSetTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.Route53RecoveryreadinessResourceSet = Route53RecoveryreadinessResourceSet;
_h = JSII_RTTI_SYMBOL_1;
Route53RecoveryreadinessResourceSet[_h] = { fqn: "@cdktf/provider-aws.route53RecoveryreadinessResourceSet.Route53RecoveryreadinessResourceSet", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
Route53RecoveryreadinessResourceSet.tfResourceType = "aws_route53recoveryreadiness_resource_set";
//# sourceMappingURL=data:application/json;base64,