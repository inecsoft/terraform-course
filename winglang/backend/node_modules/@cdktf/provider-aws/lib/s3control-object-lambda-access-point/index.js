"use strict";
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.S3ControlObjectLambdaAccessPoint = exports.S3ControlObjectLambdaAccessPointConfigurationOutputReference = exports.s3ControlObjectLambdaAccessPointConfigurationToHclTerraform = exports.s3ControlObjectLambdaAccessPointConfigurationToTerraform = exports.S3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationList = exports.S3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationOutputReference = exports.s3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationToHclTerraform = exports.s3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationToTerraform = exports.S3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationOutputReference = exports.s3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationToHclTerraform = exports.s3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationToTerraform = exports.S3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationAwsLambdaOutputReference = exports.s3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationAwsLambdaToHclTerraform = exports.s3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationAwsLambdaToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function s3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationAwsLambdaToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        function_arn: cdktf.stringToTerraform(struct.functionArn),
        function_payload: cdktf.stringToTerraform(struct.functionPayload),
    };
}
exports.s3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationAwsLambdaToTerraform = s3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationAwsLambdaToTerraform;
function s3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationAwsLambdaToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        function_arn: {
            value: cdktf.stringToHclTerraform(struct.functionArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        function_payload: {
            value: cdktf.stringToHclTerraform(struct.functionPayload),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.s3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationAwsLambdaToHclTerraform = s3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationAwsLambdaToHclTerraform;
class S3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationAwsLambdaOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._functionArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.functionArn = this._functionArn;
        }
        if (this._functionPayload !== undefined) {
            hasAnyValues = true;
            internalValueResult.functionPayload = this._functionPayload;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._functionArn = undefined;
            this._functionPayload = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._functionArn = value.functionArn;
            this._functionPayload = value.functionPayload;
        }
    }
    get functionArn() {
        return this.getStringAttribute('function_arn');
    }
    set functionArn(value) {
        this._functionArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get functionArnInput() {
        return this._functionArn;
    }
    get functionPayload() {
        return this.getStringAttribute('function_payload');
    }
    set functionPayload(value) {
        this._functionPayload = value;
    }
    resetFunctionPayload() {
        this._functionPayload = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get functionPayloadInput() {
        return this._functionPayload;
    }
}
exports.S3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationAwsLambdaOutputReference = S3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationAwsLambdaOutputReference;
_a = JSII_RTTI_SYMBOL_1;
S3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationAwsLambdaOutputReference[_a] = { fqn: "@cdktf/provider-aws.s3ControlObjectLambdaAccessPoint.S3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationAwsLambdaOutputReference", version: "19.15.0" };
function s3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        aws_lambda: s3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationAwsLambdaToTerraform(struct.awsLambda),
    };
}
exports.s3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationToTerraform = s3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationToTerraform;
function s3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        aws_lambda: {
            value: s3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationAwsLambdaToHclTerraform(struct.awsLambda),
            isBlock: true,
            type: "list",
            storageClassType: "S3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationAwsLambdaList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.s3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationToHclTerraform = s3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationToHclTerraform;
class S3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // aws_lambda - computed: false, optional: false, required: true
        this._awsLambda = new S3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationAwsLambdaOutputReference(this, "aws_lambda");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._awsLambda?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.awsLambda = this._awsLambda?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._awsLambda.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._awsLambda.internalValue = value.awsLambda;
        }
    }
    get awsLambda() {
        return this._awsLambda;
    }
    putAwsLambda(value) {
        this._awsLambda.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get awsLambdaInput() {
        return this._awsLambda.internalValue;
    }
}
exports.S3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationOutputReference = S3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationOutputReference;
_b = JSII_RTTI_SYMBOL_1;
S3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationOutputReference[_b] = { fqn: "@cdktf/provider-aws.s3ControlObjectLambdaAccessPoint.S3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationOutputReference", version: "19.15.0" };
function s3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        actions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.actions),
        content_transformation: s3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationToTerraform(struct.contentTransformation),
    };
}
exports.s3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationToTerraform = s3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationToTerraform;
function s3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        actions: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.actions),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        content_transformation: {
            value: s3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationToHclTerraform(struct.contentTransformation),
            isBlock: true,
            type: "list",
            storageClassType: "S3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.s3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationToHclTerraform = s3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationToHclTerraform;
class S3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // content_transformation - computed: false, optional: false, required: true
        this._contentTransformation = new S3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationContentTransformationOutputReference(this, "content_transformation");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._actions !== undefined) {
            hasAnyValues = true;
            internalValueResult.actions = this._actions;
        }
        if (this._contentTransformation?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.contentTransformation = this._contentTransformation?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._actions = undefined;
            this._contentTransformation.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._actions = value.actions;
            this._contentTransformation.internalValue = value.contentTransformation;
        }
    }
    get actions() {
        return cdktf.Fn.tolist(this.getListAttribute('actions'));
    }
    set actions(value) {
        this._actions = value;
    }
    // Temporarily expose input value. Use with caution.
    get actionsInput() {
        return this._actions;
    }
    get contentTransformation() {
        return this._contentTransformation;
    }
    putContentTransformation(value) {
        this._contentTransformation.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get contentTransformationInput() {
        return this._contentTransformation.internalValue;
    }
}
exports.S3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationOutputReference = S3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationOutputReference;
_c = JSII_RTTI_SYMBOL_1;
S3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationOutputReference[_c] = { fqn: "@cdktf/provider-aws.s3ControlObjectLambdaAccessPoint.S3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationOutputReference", version: "19.15.0" };
class S3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new S3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.S3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationList = S3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationList;
_d = JSII_RTTI_SYMBOL_1;
S3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationList[_d] = { fqn: "@cdktf/provider-aws.s3ControlObjectLambdaAccessPoint.S3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationList", version: "19.15.0" };
function s3ControlObjectLambdaAccessPointConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allowed_features: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowedFeatures),
        cloud_watch_metrics_enabled: cdktf.booleanToTerraform(struct.cloudWatchMetricsEnabled),
        supporting_access_point: cdktf.stringToTerraform(struct.supportingAccessPoint),
        transformation_configuration: cdktf.listMapper(s3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationToTerraform, true)(struct.transformationConfiguration),
    };
}
exports.s3ControlObjectLambdaAccessPointConfigurationToTerraform = s3ControlObjectLambdaAccessPointConfigurationToTerraform;
function s3ControlObjectLambdaAccessPointConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allowed_features: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.allowedFeatures),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        cloud_watch_metrics_enabled: {
            value: cdktf.booleanToHclTerraform(struct.cloudWatchMetricsEnabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        supporting_access_point: {
            value: cdktf.stringToHclTerraform(struct.supportingAccessPoint),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        transformation_configuration: {
            value: cdktf.listMapperHcl(s3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationToHclTerraform, true)(struct.transformationConfiguration),
            isBlock: true,
            type: "set",
            storageClassType: "S3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.s3ControlObjectLambdaAccessPointConfigurationToHclTerraform = s3ControlObjectLambdaAccessPointConfigurationToHclTerraform;
class S3ControlObjectLambdaAccessPointConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // transformation_configuration - computed: false, optional: false, required: true
        this._transformationConfiguration = new S3ControlObjectLambdaAccessPointConfigurationTransformationConfigurationList(this, "transformation_configuration", true);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowedFeatures !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedFeatures = this._allowedFeatures;
        }
        if (this._cloudWatchMetricsEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudWatchMetricsEnabled = this._cloudWatchMetricsEnabled;
        }
        if (this._supportingAccessPoint !== undefined) {
            hasAnyValues = true;
            internalValueResult.supportingAccessPoint = this._supportingAccessPoint;
        }
        if (this._transformationConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.transformationConfiguration = this._transformationConfiguration?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowedFeatures = undefined;
            this._cloudWatchMetricsEnabled = undefined;
            this._supportingAccessPoint = undefined;
            this._transformationConfiguration.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowedFeatures = value.allowedFeatures;
            this._cloudWatchMetricsEnabled = value.cloudWatchMetricsEnabled;
            this._supportingAccessPoint = value.supportingAccessPoint;
            this._transformationConfiguration.internalValue = value.transformationConfiguration;
        }
    }
    get allowedFeatures() {
        return cdktf.Fn.tolist(this.getListAttribute('allowed_features'));
    }
    set allowedFeatures(value) {
        this._allowedFeatures = value;
    }
    resetAllowedFeatures() {
        this._allowedFeatures = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedFeaturesInput() {
        return this._allowedFeatures;
    }
    get cloudWatchMetricsEnabled() {
        return this.getBooleanAttribute('cloud_watch_metrics_enabled');
    }
    set cloudWatchMetricsEnabled(value) {
        this._cloudWatchMetricsEnabled = value;
    }
    resetCloudWatchMetricsEnabled() {
        this._cloudWatchMetricsEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudWatchMetricsEnabledInput() {
        return this._cloudWatchMetricsEnabled;
    }
    get supportingAccessPoint() {
        return this.getStringAttribute('supporting_access_point');
    }
    set supportingAccessPoint(value) {
        this._supportingAccessPoint = value;
    }
    // Temporarily expose input value. Use with caution.
    get supportingAccessPointInput() {
        return this._supportingAccessPoint;
    }
    get transformationConfiguration() {
        return this._transformationConfiguration;
    }
    putTransformationConfiguration(value) {
        this._transformationConfiguration.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get transformationConfigurationInput() {
        return this._transformationConfiguration.internalValue;
    }
}
exports.S3ControlObjectLambdaAccessPointConfigurationOutputReference = S3ControlObjectLambdaAccessPointConfigurationOutputReference;
_e = JSII_RTTI_SYMBOL_1;
S3ControlObjectLambdaAccessPointConfigurationOutputReference[_e] = { fqn: "@cdktf/provider-aws.s3ControlObjectLambdaAccessPoint.S3ControlObjectLambdaAccessPointConfigurationOutputReference", version: "19.15.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/s3control_object_lambda_access_point aws_s3control_object_lambda_access_point}
*/
class S3ControlObjectLambdaAccessPoint extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a S3ControlObjectLambdaAccessPoint resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the S3ControlObjectLambdaAccessPoint to import
    * @param importFromId The id of the existing S3ControlObjectLambdaAccessPoint that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/s3control_object_lambda_access_point#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the S3ControlObjectLambdaAccessPoint to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_s3control_object_lambda_access_point", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/s3control_object_lambda_access_point aws_s3control_object_lambda_access_point} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options S3ControlObjectLambdaAccessPointConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_s3control_object_lambda_access_point',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // configuration - computed: false, optional: false, required: true
        this._configuration = new S3ControlObjectLambdaAccessPointConfigurationOutputReference(this, "configuration");
        this._accountId = config.accountId;
        this._id = config.id;
        this._name = config.name;
        this._configuration.internalValue = config.configuration;
    }
    get accountId() {
        return this.getStringAttribute('account_id');
    }
    set accountId(value) {
        this._accountId = value;
    }
    resetAccountId() {
        this._accountId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accountIdInput() {
        return this._accountId;
    }
    // alias - computed: true, optional: false, required: false
    get alias() {
        return this.getStringAttribute('alias');
    }
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get configuration() {
        return this._configuration;
    }
    putConfiguration(value) {
        this._configuration.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get configurationInput() {
        return this._configuration.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            account_id: cdktf.stringToTerraform(this._accountId),
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            configuration: s3ControlObjectLambdaAccessPointConfigurationToTerraform(this._configuration.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            account_id: {
                value: cdktf.stringToHclTerraform(this._accountId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            configuration: {
                value: s3ControlObjectLambdaAccessPointConfigurationToHclTerraform(this._configuration.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "S3ControlObjectLambdaAccessPointConfigurationList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.S3ControlObjectLambdaAccessPoint = S3ControlObjectLambdaAccessPoint;
_f = JSII_RTTI_SYMBOL_1;
S3ControlObjectLambdaAccessPoint[_f] = { fqn: "@cdktf/provider-aws.s3ControlObjectLambdaAccessPoint.S3ControlObjectLambdaAccessPoint", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
S3ControlObjectLambdaAccessPoint.tfResourceType = "aws_s3control_object_lambda_access_point";
//# sourceMappingURL=data:application/json;base64,