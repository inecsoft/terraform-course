"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
Object.defineProperty(exports, "__esModule", { value: true });
exports.sagemakerDataQualityJobDefinitionNetworkConfigToHclTerraform = exports.sagemakerDataQualityJobDefinitionNetworkConfigToTerraform = exports.SagemakerDataQualityJobDefinitionNetworkConfigVpcConfigOutputReference = exports.sagemakerDataQualityJobDefinitionNetworkConfigVpcConfigToHclTerraform = exports.sagemakerDataQualityJobDefinitionNetworkConfigVpcConfigToTerraform = exports.SagemakerDataQualityJobDefinitionJobResourcesOutputReference = exports.sagemakerDataQualityJobDefinitionJobResourcesToHclTerraform = exports.sagemakerDataQualityJobDefinitionJobResourcesToTerraform = exports.SagemakerDataQualityJobDefinitionJobResourcesClusterConfigOutputReference = exports.sagemakerDataQualityJobDefinitionJobResourcesClusterConfigToHclTerraform = exports.sagemakerDataQualityJobDefinitionJobResourcesClusterConfigToTerraform = exports.SagemakerDataQualityJobDefinitionDataQualityJobOutputConfigOutputReference = exports.sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigToHclTerraform = exports.sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigToTerraform = exports.SagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsOutputReference = exports.sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsToHclTerraform = exports.sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsToTerraform = exports.SagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputOutputReference = exports.sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputToHclTerraform = exports.sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputToTerraform = exports.SagemakerDataQualityJobDefinitionDataQualityJobInputOutputReference = exports.sagemakerDataQualityJobDefinitionDataQualityJobInputToHclTerraform = exports.sagemakerDataQualityJobDefinitionDataQualityJobInputToTerraform = exports.SagemakerDataQualityJobDefinitionDataQualityJobInputEndpointInputOutputReference = exports.sagemakerDataQualityJobDefinitionDataQualityJobInputEndpointInputToHclTerraform = exports.sagemakerDataQualityJobDefinitionDataQualityJobInputEndpointInputToTerraform = exports.SagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputOutputReference = exports.sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputToHclTerraform = exports.sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputToTerraform = exports.SagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatOutputReference = exports.sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatToHclTerraform = exports.sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatToTerraform = exports.SagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatJsonOutputReference = exports.sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatJsonToHclTerraform = exports.sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatJsonToTerraform = exports.SagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatCsvOutputReference = exports.sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatCsvToHclTerraform = exports.sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatCsvToTerraform = exports.SagemakerDataQualityJobDefinitionDataQualityBaselineConfigOutputReference = exports.sagemakerDataQualityJobDefinitionDataQualityBaselineConfigToHclTerraform = exports.sagemakerDataQualityJobDefinitionDataQualityBaselineConfigToTerraform = exports.SagemakerDataQualityJobDefinitionDataQualityBaselineConfigStatisticsResourceOutputReference = exports.sagemakerDataQualityJobDefinitionDataQualityBaselineConfigStatisticsResourceToHclTerraform = exports.sagemakerDataQualityJobDefinitionDataQualityBaselineConfigStatisticsResourceToTerraform = exports.SagemakerDataQualityJobDefinitionDataQualityBaselineConfigConstraintsResourceOutputReference = exports.sagemakerDataQualityJobDefinitionDataQualityBaselineConfigConstraintsResourceToHclTerraform = exports.sagemakerDataQualityJobDefinitionDataQualityBaselineConfigConstraintsResourceToTerraform = exports.SagemakerDataQualityJobDefinitionDataQualityAppSpecificationOutputReference = exports.sagemakerDataQualityJobDefinitionDataQualityAppSpecificationToHclTerraform = exports.sagemakerDataQualityJobDefinitionDataQualityAppSpecificationToTerraform = void 0;
exports.SagemakerDataQualityJobDefinition = exports.SagemakerDataQualityJobDefinitionStoppingConditionOutputReference = exports.sagemakerDataQualityJobDefinitionStoppingConditionToHclTerraform = exports.sagemakerDataQualityJobDefinitionStoppingConditionToTerraform = exports.SagemakerDataQualityJobDefinitionNetworkConfigOutputReference = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function sagemakerDataQualityJobDefinitionDataQualityAppSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        environment: cdktf.hashMapper(cdktf.stringToTerraform)(struct.environment),
        image_uri: cdktf.stringToTerraform(struct.imageUri),
        post_analytics_processor_source_uri: cdktf.stringToTerraform(struct.postAnalyticsProcessorSourceUri),
        record_preprocessor_source_uri: cdktf.stringToTerraform(struct.recordPreprocessorSourceUri),
    };
}
exports.sagemakerDataQualityJobDefinitionDataQualityAppSpecificationToTerraform = sagemakerDataQualityJobDefinitionDataQualityAppSpecificationToTerraform;
function sagemakerDataQualityJobDefinitionDataQualityAppSpecificationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        environment: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.environment),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        image_uri: {
            value: cdktf.stringToHclTerraform(struct.imageUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        post_analytics_processor_source_uri: {
            value: cdktf.stringToHclTerraform(struct.postAnalyticsProcessorSourceUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        record_preprocessor_source_uri: {
            value: cdktf.stringToHclTerraform(struct.recordPreprocessorSourceUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDataQualityJobDefinitionDataQualityAppSpecificationToHclTerraform = sagemakerDataQualityJobDefinitionDataQualityAppSpecificationToHclTerraform;
class SagemakerDataQualityJobDefinitionDataQualityAppSpecificationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._environment !== undefined) {
            hasAnyValues = true;
            internalValueResult.environment = this._environment;
        }
        if (this._imageUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageUri = this._imageUri;
        }
        if (this._postAnalyticsProcessorSourceUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.postAnalyticsProcessorSourceUri = this._postAnalyticsProcessorSourceUri;
        }
        if (this._recordPreprocessorSourceUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.recordPreprocessorSourceUri = this._recordPreprocessorSourceUri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._environment = undefined;
            this._imageUri = undefined;
            this._postAnalyticsProcessorSourceUri = undefined;
            this._recordPreprocessorSourceUri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._environment = value.environment;
            this._imageUri = value.imageUri;
            this._postAnalyticsProcessorSourceUri = value.postAnalyticsProcessorSourceUri;
            this._recordPreprocessorSourceUri = value.recordPreprocessorSourceUri;
        }
    }
    get environment() {
        return this.getStringMapAttribute('environment');
    }
    set environment(value) {
        this._environment = value;
    }
    resetEnvironment() {
        this._environment = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get environmentInput() {
        return this._environment;
    }
    get imageUri() {
        return this.getStringAttribute('image_uri');
    }
    set imageUri(value) {
        this._imageUri = value;
    }
    // Temporarily expose input value. Use with caution.
    get imageUriInput() {
        return this._imageUri;
    }
    get postAnalyticsProcessorSourceUri() {
        return this.getStringAttribute('post_analytics_processor_source_uri');
    }
    set postAnalyticsProcessorSourceUri(value) {
        this._postAnalyticsProcessorSourceUri = value;
    }
    resetPostAnalyticsProcessorSourceUri() {
        this._postAnalyticsProcessorSourceUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get postAnalyticsProcessorSourceUriInput() {
        return this._postAnalyticsProcessorSourceUri;
    }
    get recordPreprocessorSourceUri() {
        return this.getStringAttribute('record_preprocessor_source_uri');
    }
    set recordPreprocessorSourceUri(value) {
        this._recordPreprocessorSourceUri = value;
    }
    resetRecordPreprocessorSourceUri() {
        this._recordPreprocessorSourceUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get recordPreprocessorSourceUriInput() {
        return this._recordPreprocessorSourceUri;
    }
}
exports.SagemakerDataQualityJobDefinitionDataQualityAppSpecificationOutputReference = SagemakerDataQualityJobDefinitionDataQualityAppSpecificationOutputReference;
_a = JSII_RTTI_SYMBOL_1;
SagemakerDataQualityJobDefinitionDataQualityAppSpecificationOutputReference[_a] = { fqn: "@cdktf/provider-aws.sagemakerDataQualityJobDefinition.SagemakerDataQualityJobDefinitionDataQualityAppSpecificationOutputReference", version: "19.15.0" };
function sagemakerDataQualityJobDefinitionDataQualityBaselineConfigConstraintsResourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        s3_uri: cdktf.stringToTerraform(struct.s3Uri),
    };
}
exports.sagemakerDataQualityJobDefinitionDataQualityBaselineConfigConstraintsResourceToTerraform = sagemakerDataQualityJobDefinitionDataQualityBaselineConfigConstraintsResourceToTerraform;
function sagemakerDataQualityJobDefinitionDataQualityBaselineConfigConstraintsResourceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        s3_uri: {
            value: cdktf.stringToHclTerraform(struct.s3Uri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDataQualityJobDefinitionDataQualityBaselineConfigConstraintsResourceToHclTerraform = sagemakerDataQualityJobDefinitionDataQualityBaselineConfigConstraintsResourceToHclTerraform;
class SagemakerDataQualityJobDefinitionDataQualityBaselineConfigConstraintsResourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._s3Uri !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3Uri = this._s3Uri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._s3Uri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._s3Uri = value.s3Uri;
        }
    }
    get s3Uri() {
        return this.getStringAttribute('s3_uri');
    }
    set s3Uri(value) {
        this._s3Uri = value;
    }
    resetS3Uri() {
        this._s3Uri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3UriInput() {
        return this._s3Uri;
    }
}
exports.SagemakerDataQualityJobDefinitionDataQualityBaselineConfigConstraintsResourceOutputReference = SagemakerDataQualityJobDefinitionDataQualityBaselineConfigConstraintsResourceOutputReference;
_b = JSII_RTTI_SYMBOL_1;
SagemakerDataQualityJobDefinitionDataQualityBaselineConfigConstraintsResourceOutputReference[_b] = { fqn: "@cdktf/provider-aws.sagemakerDataQualityJobDefinition.SagemakerDataQualityJobDefinitionDataQualityBaselineConfigConstraintsResourceOutputReference", version: "19.15.0" };
function sagemakerDataQualityJobDefinitionDataQualityBaselineConfigStatisticsResourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        s3_uri: cdktf.stringToTerraform(struct.s3Uri),
    };
}
exports.sagemakerDataQualityJobDefinitionDataQualityBaselineConfigStatisticsResourceToTerraform = sagemakerDataQualityJobDefinitionDataQualityBaselineConfigStatisticsResourceToTerraform;
function sagemakerDataQualityJobDefinitionDataQualityBaselineConfigStatisticsResourceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        s3_uri: {
            value: cdktf.stringToHclTerraform(struct.s3Uri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDataQualityJobDefinitionDataQualityBaselineConfigStatisticsResourceToHclTerraform = sagemakerDataQualityJobDefinitionDataQualityBaselineConfigStatisticsResourceToHclTerraform;
class SagemakerDataQualityJobDefinitionDataQualityBaselineConfigStatisticsResourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._s3Uri !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3Uri = this._s3Uri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._s3Uri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._s3Uri = value.s3Uri;
        }
    }
    get s3Uri() {
        return this.getStringAttribute('s3_uri');
    }
    set s3Uri(value) {
        this._s3Uri = value;
    }
    resetS3Uri() {
        this._s3Uri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3UriInput() {
        return this._s3Uri;
    }
}
exports.SagemakerDataQualityJobDefinitionDataQualityBaselineConfigStatisticsResourceOutputReference = SagemakerDataQualityJobDefinitionDataQualityBaselineConfigStatisticsResourceOutputReference;
_c = JSII_RTTI_SYMBOL_1;
SagemakerDataQualityJobDefinitionDataQualityBaselineConfigStatisticsResourceOutputReference[_c] = { fqn: "@cdktf/provider-aws.sagemakerDataQualityJobDefinition.SagemakerDataQualityJobDefinitionDataQualityBaselineConfigStatisticsResourceOutputReference", version: "19.15.0" };
function sagemakerDataQualityJobDefinitionDataQualityBaselineConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        constraints_resource: sagemakerDataQualityJobDefinitionDataQualityBaselineConfigConstraintsResourceToTerraform(struct.constraintsResource),
        statistics_resource: sagemakerDataQualityJobDefinitionDataQualityBaselineConfigStatisticsResourceToTerraform(struct.statisticsResource),
    };
}
exports.sagemakerDataQualityJobDefinitionDataQualityBaselineConfigToTerraform = sagemakerDataQualityJobDefinitionDataQualityBaselineConfigToTerraform;
function sagemakerDataQualityJobDefinitionDataQualityBaselineConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        constraints_resource: {
            value: sagemakerDataQualityJobDefinitionDataQualityBaselineConfigConstraintsResourceToHclTerraform(struct.constraintsResource),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDataQualityJobDefinitionDataQualityBaselineConfigConstraintsResourceList",
        },
        statistics_resource: {
            value: sagemakerDataQualityJobDefinitionDataQualityBaselineConfigStatisticsResourceToHclTerraform(struct.statisticsResource),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDataQualityJobDefinitionDataQualityBaselineConfigStatisticsResourceList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDataQualityJobDefinitionDataQualityBaselineConfigToHclTerraform = sagemakerDataQualityJobDefinitionDataQualityBaselineConfigToHclTerraform;
class SagemakerDataQualityJobDefinitionDataQualityBaselineConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // constraints_resource - computed: false, optional: true, required: false
        this._constraintsResource = new SagemakerDataQualityJobDefinitionDataQualityBaselineConfigConstraintsResourceOutputReference(this, "constraints_resource");
        // statistics_resource - computed: false, optional: true, required: false
        this._statisticsResource = new SagemakerDataQualityJobDefinitionDataQualityBaselineConfigStatisticsResourceOutputReference(this, "statistics_resource");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._constraintsResource?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.constraintsResource = this._constraintsResource?.internalValue;
        }
        if (this._statisticsResource?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.statisticsResource = this._statisticsResource?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._constraintsResource.internalValue = undefined;
            this._statisticsResource.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._constraintsResource.internalValue = value.constraintsResource;
            this._statisticsResource.internalValue = value.statisticsResource;
        }
    }
    get constraintsResource() {
        return this._constraintsResource;
    }
    putConstraintsResource(value) {
        this._constraintsResource.internalValue = value;
    }
    resetConstraintsResource() {
        this._constraintsResource.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get constraintsResourceInput() {
        return this._constraintsResource.internalValue;
    }
    get statisticsResource() {
        return this._statisticsResource;
    }
    putStatisticsResource(value) {
        this._statisticsResource.internalValue = value;
    }
    resetStatisticsResource() {
        this._statisticsResource.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get statisticsResourceInput() {
        return this._statisticsResource.internalValue;
    }
}
exports.SagemakerDataQualityJobDefinitionDataQualityBaselineConfigOutputReference = SagemakerDataQualityJobDefinitionDataQualityBaselineConfigOutputReference;
_d = JSII_RTTI_SYMBOL_1;
SagemakerDataQualityJobDefinitionDataQualityBaselineConfigOutputReference[_d] = { fqn: "@cdktf/provider-aws.sagemakerDataQualityJobDefinition.SagemakerDataQualityJobDefinitionDataQualityBaselineConfigOutputReference", version: "19.15.0" };
function sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatCsvToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        header: cdktf.booleanToTerraform(struct.header),
    };
}
exports.sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatCsvToTerraform = sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatCsvToTerraform;
function sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatCsvToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        header: {
            value: cdktf.booleanToHclTerraform(struct.header),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatCsvToHclTerraform = sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatCsvToHclTerraform;
class SagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatCsvOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._header !== undefined) {
            hasAnyValues = true;
            internalValueResult.header = this._header;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._header = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._header = value.header;
        }
    }
    get header() {
        return this.getBooleanAttribute('header');
    }
    set header(value) {
        this._header = value;
    }
    resetHeader() {
        this._header = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get headerInput() {
        return this._header;
    }
}
exports.SagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatCsvOutputReference = SagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatCsvOutputReference;
_e = JSII_RTTI_SYMBOL_1;
SagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatCsvOutputReference[_e] = { fqn: "@cdktf/provider-aws.sagemakerDataQualityJobDefinition.SagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatCsvOutputReference", version: "19.15.0" };
function sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatJsonToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        line: cdktf.booleanToTerraform(struct.line),
    };
}
exports.sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatJsonToTerraform = sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatJsonToTerraform;
function sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatJsonToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        line: {
            value: cdktf.booleanToHclTerraform(struct.line),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatJsonToHclTerraform = sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatJsonToHclTerraform;
class SagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatJsonOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._line !== undefined) {
            hasAnyValues = true;
            internalValueResult.line = this._line;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._line = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._line = value.line;
        }
    }
    get line() {
        return this.getBooleanAttribute('line');
    }
    set line(value) {
        this._line = value;
    }
    resetLine() {
        this._line = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lineInput() {
        return this._line;
    }
}
exports.SagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatJsonOutputReference = SagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatJsonOutputReference;
_f = JSII_RTTI_SYMBOL_1;
SagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatJsonOutputReference[_f] = { fqn: "@cdktf/provider-aws.sagemakerDataQualityJobDefinition.SagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatJsonOutputReference", version: "19.15.0" };
function sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        csv: sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatCsvToTerraform(struct.csv),
        json: sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatJsonToTerraform(struct.json),
    };
}
exports.sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatToTerraform = sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatToTerraform;
function sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        csv: {
            value: sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatCsvToHclTerraform(struct.csv),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatCsvList",
        },
        json: {
            value: sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatJsonToHclTerraform(struct.json),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatJsonList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatToHclTerraform = sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatToHclTerraform;
class SagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // csv - computed: false, optional: true, required: false
        this._csv = new SagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatCsvOutputReference(this, "csv");
        // json - computed: false, optional: true, required: false
        this._json = new SagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatJsonOutputReference(this, "json");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._csv?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.csv = this._csv?.internalValue;
        }
        if (this._json?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.json = this._json?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._csv.internalValue = undefined;
            this._json.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._csv.internalValue = value.csv;
            this._json.internalValue = value.json;
        }
    }
    get csv() {
        return this._csv;
    }
    putCsv(value) {
        this._csv.internalValue = value;
    }
    resetCsv() {
        this._csv.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get csvInput() {
        return this._csv.internalValue;
    }
    get json() {
        return this._json;
    }
    putJson(value) {
        this._json.internalValue = value;
    }
    resetJson() {
        this._json.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jsonInput() {
        return this._json.internalValue;
    }
}
exports.SagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatOutputReference = SagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatOutputReference;
_g = JSII_RTTI_SYMBOL_1;
SagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatOutputReference[_g] = { fqn: "@cdktf/provider-aws.sagemakerDataQualityJobDefinition.SagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatOutputReference", version: "19.15.0" };
function sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        data_captured_destination_s3_uri: cdktf.stringToTerraform(struct.dataCapturedDestinationS3Uri),
        local_path: cdktf.stringToTerraform(struct.localPath),
        s3_data_distribution_type: cdktf.stringToTerraform(struct.s3DataDistributionType),
        s3_input_mode: cdktf.stringToTerraform(struct.s3InputMode),
        dataset_format: sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatToTerraform(struct.datasetFormat),
    };
}
exports.sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputToTerraform = sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputToTerraform;
function sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        data_captured_destination_s3_uri: {
            value: cdktf.stringToHclTerraform(struct.dataCapturedDestinationS3Uri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        local_path: {
            value: cdktf.stringToHclTerraform(struct.localPath),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        s3_data_distribution_type: {
            value: cdktf.stringToHclTerraform(struct.s3DataDistributionType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        s3_input_mode: {
            value: cdktf.stringToHclTerraform(struct.s3InputMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        dataset_format: {
            value: sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatToHclTerraform(struct.datasetFormat),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputToHclTerraform = sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputToHclTerraform;
class SagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // dataset_format - computed: false, optional: false, required: true
        this._datasetFormat = new SagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatOutputReference(this, "dataset_format");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dataCapturedDestinationS3Uri !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataCapturedDestinationS3Uri = this._dataCapturedDestinationS3Uri;
        }
        if (this._localPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.localPath = this._localPath;
        }
        if (this._s3DataDistributionType !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3DataDistributionType = this._s3DataDistributionType;
        }
        if (this._s3InputMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3InputMode = this._s3InputMode;
        }
        if (this._datasetFormat?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.datasetFormat = this._datasetFormat?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dataCapturedDestinationS3Uri = undefined;
            this._localPath = undefined;
            this._s3DataDistributionType = undefined;
            this._s3InputMode = undefined;
            this._datasetFormat.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dataCapturedDestinationS3Uri = value.dataCapturedDestinationS3Uri;
            this._localPath = value.localPath;
            this._s3DataDistributionType = value.s3DataDistributionType;
            this._s3InputMode = value.s3InputMode;
            this._datasetFormat.internalValue = value.datasetFormat;
        }
    }
    get dataCapturedDestinationS3Uri() {
        return this.getStringAttribute('data_captured_destination_s3_uri');
    }
    set dataCapturedDestinationS3Uri(value) {
        this._dataCapturedDestinationS3Uri = value;
    }
    // Temporarily expose input value. Use with caution.
    get dataCapturedDestinationS3UriInput() {
        return this._dataCapturedDestinationS3Uri;
    }
    get localPath() {
        return this.getStringAttribute('local_path');
    }
    set localPath(value) {
        this._localPath = value;
    }
    resetLocalPath() {
        this._localPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localPathInput() {
        return this._localPath;
    }
    get s3DataDistributionType() {
        return this.getStringAttribute('s3_data_distribution_type');
    }
    set s3DataDistributionType(value) {
        this._s3DataDistributionType = value;
    }
    resetS3DataDistributionType() {
        this._s3DataDistributionType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3DataDistributionTypeInput() {
        return this._s3DataDistributionType;
    }
    get s3InputMode() {
        return this.getStringAttribute('s3_input_mode');
    }
    set s3InputMode(value) {
        this._s3InputMode = value;
    }
    resetS3InputMode() {
        this._s3InputMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3InputModeInput() {
        return this._s3InputMode;
    }
    get datasetFormat() {
        return this._datasetFormat;
    }
    putDatasetFormat(value) {
        this._datasetFormat.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get datasetFormatInput() {
        return this._datasetFormat.internalValue;
    }
}
exports.SagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputOutputReference = SagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputOutputReference;
_h = JSII_RTTI_SYMBOL_1;
SagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputOutputReference[_h] = { fqn: "@cdktf/provider-aws.sagemakerDataQualityJobDefinition.SagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputOutputReference", version: "19.15.0" };
function sagemakerDataQualityJobDefinitionDataQualityJobInputEndpointInputToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        endpoint_name: cdktf.stringToTerraform(struct.endpointName),
        local_path: cdktf.stringToTerraform(struct.localPath),
        s3_data_distribution_type: cdktf.stringToTerraform(struct.s3DataDistributionType),
        s3_input_mode: cdktf.stringToTerraform(struct.s3InputMode),
    };
}
exports.sagemakerDataQualityJobDefinitionDataQualityJobInputEndpointInputToTerraform = sagemakerDataQualityJobDefinitionDataQualityJobInputEndpointInputToTerraform;
function sagemakerDataQualityJobDefinitionDataQualityJobInputEndpointInputToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        endpoint_name: {
            value: cdktf.stringToHclTerraform(struct.endpointName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        local_path: {
            value: cdktf.stringToHclTerraform(struct.localPath),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        s3_data_distribution_type: {
            value: cdktf.stringToHclTerraform(struct.s3DataDistributionType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        s3_input_mode: {
            value: cdktf.stringToHclTerraform(struct.s3InputMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDataQualityJobDefinitionDataQualityJobInputEndpointInputToHclTerraform = sagemakerDataQualityJobDefinitionDataQualityJobInputEndpointInputToHclTerraform;
class SagemakerDataQualityJobDefinitionDataQualityJobInputEndpointInputOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._endpointName !== undefined) {
            hasAnyValues = true;
            internalValueResult.endpointName = this._endpointName;
        }
        if (this._localPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.localPath = this._localPath;
        }
        if (this._s3DataDistributionType !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3DataDistributionType = this._s3DataDistributionType;
        }
        if (this._s3InputMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3InputMode = this._s3InputMode;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._endpointName = undefined;
            this._localPath = undefined;
            this._s3DataDistributionType = undefined;
            this._s3InputMode = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._endpointName = value.endpointName;
            this._localPath = value.localPath;
            this._s3DataDistributionType = value.s3DataDistributionType;
            this._s3InputMode = value.s3InputMode;
        }
    }
    get endpointName() {
        return this.getStringAttribute('endpoint_name');
    }
    set endpointName(value) {
        this._endpointName = value;
    }
    // Temporarily expose input value. Use with caution.
    get endpointNameInput() {
        return this._endpointName;
    }
    get localPath() {
        return this.getStringAttribute('local_path');
    }
    set localPath(value) {
        this._localPath = value;
    }
    resetLocalPath() {
        this._localPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localPathInput() {
        return this._localPath;
    }
    get s3DataDistributionType() {
        return this.getStringAttribute('s3_data_distribution_type');
    }
    set s3DataDistributionType(value) {
        this._s3DataDistributionType = value;
    }
    resetS3DataDistributionType() {
        this._s3DataDistributionType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3DataDistributionTypeInput() {
        return this._s3DataDistributionType;
    }
    get s3InputMode() {
        return this.getStringAttribute('s3_input_mode');
    }
    set s3InputMode(value) {
        this._s3InputMode = value;
    }
    resetS3InputMode() {
        this._s3InputMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3InputModeInput() {
        return this._s3InputMode;
    }
}
exports.SagemakerDataQualityJobDefinitionDataQualityJobInputEndpointInputOutputReference = SagemakerDataQualityJobDefinitionDataQualityJobInputEndpointInputOutputReference;
_j = JSII_RTTI_SYMBOL_1;
SagemakerDataQualityJobDefinitionDataQualityJobInputEndpointInputOutputReference[_j] = { fqn: "@cdktf/provider-aws.sagemakerDataQualityJobDefinition.SagemakerDataQualityJobDefinitionDataQualityJobInputEndpointInputOutputReference", version: "19.15.0" };
function sagemakerDataQualityJobDefinitionDataQualityJobInputToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        batch_transform_input: sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputToTerraform(struct.batchTransformInput),
        endpoint_input: sagemakerDataQualityJobDefinitionDataQualityJobInputEndpointInputToTerraform(struct.endpointInput),
    };
}
exports.sagemakerDataQualityJobDefinitionDataQualityJobInputToTerraform = sagemakerDataQualityJobDefinitionDataQualityJobInputToTerraform;
function sagemakerDataQualityJobDefinitionDataQualityJobInputToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        batch_transform_input: {
            value: sagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputToHclTerraform(struct.batchTransformInput),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputList",
        },
        endpoint_input: {
            value: sagemakerDataQualityJobDefinitionDataQualityJobInputEndpointInputToHclTerraform(struct.endpointInput),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDataQualityJobDefinitionDataQualityJobInputEndpointInputList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDataQualityJobDefinitionDataQualityJobInputToHclTerraform = sagemakerDataQualityJobDefinitionDataQualityJobInputToHclTerraform;
class SagemakerDataQualityJobDefinitionDataQualityJobInputOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // batch_transform_input - computed: false, optional: true, required: false
        this._batchTransformInput = new SagemakerDataQualityJobDefinitionDataQualityJobInputBatchTransformInputOutputReference(this, "batch_transform_input");
        // endpoint_input - computed: false, optional: true, required: false
        this._endpointInput = new SagemakerDataQualityJobDefinitionDataQualityJobInputEndpointInputOutputReference(this, "endpoint_input");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._batchTransformInput?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.batchTransformInput = this._batchTransformInput?.internalValue;
        }
        if (this._endpointInput?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.endpointInput = this._endpointInput?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._batchTransformInput.internalValue = undefined;
            this._endpointInput.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._batchTransformInput.internalValue = value.batchTransformInput;
            this._endpointInput.internalValue = value.endpointInput;
        }
    }
    get batchTransformInput() {
        return this._batchTransformInput;
    }
    putBatchTransformInput(value) {
        this._batchTransformInput.internalValue = value;
    }
    resetBatchTransformInput() {
        this._batchTransformInput.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get batchTransformInputInput() {
        return this._batchTransformInput.internalValue;
    }
    get endpointInput() {
        return this._endpointInput;
    }
    putEndpointInput(value) {
        this._endpointInput.internalValue = value;
    }
    resetEndpointInput() {
        this._endpointInput.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get endpointInputInput() {
        return this._endpointInput.internalValue;
    }
}
exports.SagemakerDataQualityJobDefinitionDataQualityJobInputOutputReference = SagemakerDataQualityJobDefinitionDataQualityJobInputOutputReference;
_k = JSII_RTTI_SYMBOL_1;
SagemakerDataQualityJobDefinitionDataQualityJobInputOutputReference[_k] = { fqn: "@cdktf/provider-aws.sagemakerDataQualityJobDefinition.SagemakerDataQualityJobDefinitionDataQualityJobInputOutputReference", version: "19.15.0" };
function sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        local_path: cdktf.stringToTerraform(struct.localPath),
        s3_upload_mode: cdktf.stringToTerraform(struct.s3UploadMode),
        s3_uri: cdktf.stringToTerraform(struct.s3Uri),
    };
}
exports.sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputToTerraform = sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputToTerraform;
function sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        local_path: {
            value: cdktf.stringToHclTerraform(struct.localPath),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        s3_upload_mode: {
            value: cdktf.stringToHclTerraform(struct.s3UploadMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        s3_uri: {
            value: cdktf.stringToHclTerraform(struct.s3Uri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputToHclTerraform = sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputToHclTerraform;
class SagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._localPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.localPath = this._localPath;
        }
        if (this._s3UploadMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3UploadMode = this._s3UploadMode;
        }
        if (this._s3Uri !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3Uri = this._s3Uri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._localPath = undefined;
            this._s3UploadMode = undefined;
            this._s3Uri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._localPath = value.localPath;
            this._s3UploadMode = value.s3UploadMode;
            this._s3Uri = value.s3Uri;
        }
    }
    get localPath() {
        return this.getStringAttribute('local_path');
    }
    set localPath(value) {
        this._localPath = value;
    }
    resetLocalPath() {
        this._localPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localPathInput() {
        return this._localPath;
    }
    get s3UploadMode() {
        return this.getStringAttribute('s3_upload_mode');
    }
    set s3UploadMode(value) {
        this._s3UploadMode = value;
    }
    resetS3UploadMode() {
        this._s3UploadMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3UploadModeInput() {
        return this._s3UploadMode;
    }
    get s3Uri() {
        return this.getStringAttribute('s3_uri');
    }
    set s3Uri(value) {
        this._s3Uri = value;
    }
    // Temporarily expose input value. Use with caution.
    get s3UriInput() {
        return this._s3Uri;
    }
}
exports.SagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputOutputReference = SagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputOutputReference;
_l = JSII_RTTI_SYMBOL_1;
SagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputOutputReference[_l] = { fqn: "@cdktf/provider-aws.sagemakerDataQualityJobDefinition.SagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputOutputReference", version: "19.15.0" };
function sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        s3_output: sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputToTerraform(struct.s3Output),
    };
}
exports.sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsToTerraform = sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsToTerraform;
function sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        s3_output: {
            value: sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputToHclTerraform(struct.s3Output),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsToHclTerraform = sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsToHclTerraform;
class SagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // s3_output - computed: false, optional: false, required: true
        this._s3Output = new SagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputOutputReference(this, "s3_output");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._s3Output?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3Output = this._s3Output?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._s3Output.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._s3Output.internalValue = value.s3Output;
        }
    }
    get s3Output() {
        return this._s3Output;
    }
    putS3Output(value) {
        this._s3Output.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get s3OutputInput() {
        return this._s3Output.internalValue;
    }
}
exports.SagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsOutputReference = SagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsOutputReference;
_m = JSII_RTTI_SYMBOL_1;
SagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsOutputReference[_m] = { fqn: "@cdktf/provider-aws.sagemakerDataQualityJobDefinition.SagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsOutputReference", version: "19.15.0" };
function sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kms_key_id: cdktf.stringToTerraform(struct.kmsKeyId),
        monitoring_outputs: sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsToTerraform(struct.monitoringOutputs),
    };
}
exports.sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigToTerraform = sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigToTerraform;
function sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        kms_key_id: {
            value: cdktf.stringToHclTerraform(struct.kmsKeyId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        monitoring_outputs: {
            value: sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsToHclTerraform(struct.monitoringOutputs),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigToHclTerraform = sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigToHclTerraform;
class SagemakerDataQualityJobDefinitionDataQualityJobOutputConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // monitoring_outputs - computed: false, optional: false, required: true
        this._monitoringOutputs = new SagemakerDataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsOutputReference(this, "monitoring_outputs");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kmsKeyId !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyId = this._kmsKeyId;
        }
        if (this._monitoringOutputs?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.monitoringOutputs = this._monitoringOutputs?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kmsKeyId = undefined;
            this._monitoringOutputs.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kmsKeyId = value.kmsKeyId;
            this._monitoringOutputs.internalValue = value.monitoringOutputs;
        }
    }
    get kmsKeyId() {
        return this.getStringAttribute('kms_key_id');
    }
    set kmsKeyId(value) {
        this._kmsKeyId = value;
    }
    resetKmsKeyId() {
        this._kmsKeyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyIdInput() {
        return this._kmsKeyId;
    }
    get monitoringOutputs() {
        return this._monitoringOutputs;
    }
    putMonitoringOutputs(value) {
        this._monitoringOutputs.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get monitoringOutputsInput() {
        return this._monitoringOutputs.internalValue;
    }
}
exports.SagemakerDataQualityJobDefinitionDataQualityJobOutputConfigOutputReference = SagemakerDataQualityJobDefinitionDataQualityJobOutputConfigOutputReference;
_o = JSII_RTTI_SYMBOL_1;
SagemakerDataQualityJobDefinitionDataQualityJobOutputConfigOutputReference[_o] = { fqn: "@cdktf/provider-aws.sagemakerDataQualityJobDefinition.SagemakerDataQualityJobDefinitionDataQualityJobOutputConfigOutputReference", version: "19.15.0" };
function sagemakerDataQualityJobDefinitionJobResourcesClusterConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        instance_count: cdktf.numberToTerraform(struct.instanceCount),
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        volume_kms_key_id: cdktf.stringToTerraform(struct.volumeKmsKeyId),
        volume_size_in_gb: cdktf.numberToTerraform(struct.volumeSizeInGb),
    };
}
exports.sagemakerDataQualityJobDefinitionJobResourcesClusterConfigToTerraform = sagemakerDataQualityJobDefinitionJobResourcesClusterConfigToTerraform;
function sagemakerDataQualityJobDefinitionJobResourcesClusterConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        instance_count: {
            value: cdktf.numberToHclTerraform(struct.instanceCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        instance_type: {
            value: cdktf.stringToHclTerraform(struct.instanceType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        volume_kms_key_id: {
            value: cdktf.stringToHclTerraform(struct.volumeKmsKeyId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        volume_size_in_gb: {
            value: cdktf.numberToHclTerraform(struct.volumeSizeInGb),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDataQualityJobDefinitionJobResourcesClusterConfigToHclTerraform = sagemakerDataQualityJobDefinitionJobResourcesClusterConfigToHclTerraform;
class SagemakerDataQualityJobDefinitionJobResourcesClusterConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._instanceCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceCount = this._instanceCount;
        }
        if (this._instanceType !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceType = this._instanceType;
        }
        if (this._volumeKmsKeyId !== undefined) {
            hasAnyValues = true;
            internalValueResult.volumeKmsKeyId = this._volumeKmsKeyId;
        }
        if (this._volumeSizeInGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.volumeSizeInGb = this._volumeSizeInGb;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._instanceCount = undefined;
            this._instanceType = undefined;
            this._volumeKmsKeyId = undefined;
            this._volumeSizeInGb = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._instanceCount = value.instanceCount;
            this._instanceType = value.instanceType;
            this._volumeKmsKeyId = value.volumeKmsKeyId;
            this._volumeSizeInGb = value.volumeSizeInGb;
        }
    }
    get instanceCount() {
        return this.getNumberAttribute('instance_count');
    }
    set instanceCount(value) {
        this._instanceCount = value;
    }
    // Temporarily expose input value. Use with caution.
    get instanceCountInput() {
        return this._instanceCount;
    }
    get instanceType() {
        return this.getStringAttribute('instance_type');
    }
    set instanceType(value) {
        this._instanceType = value;
    }
    // Temporarily expose input value. Use with caution.
    get instanceTypeInput() {
        return this._instanceType;
    }
    get volumeKmsKeyId() {
        return this.getStringAttribute('volume_kms_key_id');
    }
    set volumeKmsKeyId(value) {
        this._volumeKmsKeyId = value;
    }
    resetVolumeKmsKeyId() {
        this._volumeKmsKeyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get volumeKmsKeyIdInput() {
        return this._volumeKmsKeyId;
    }
    get volumeSizeInGb() {
        return this.getNumberAttribute('volume_size_in_gb');
    }
    set volumeSizeInGb(value) {
        this._volumeSizeInGb = value;
    }
    // Temporarily expose input value. Use with caution.
    get volumeSizeInGbInput() {
        return this._volumeSizeInGb;
    }
}
exports.SagemakerDataQualityJobDefinitionJobResourcesClusterConfigOutputReference = SagemakerDataQualityJobDefinitionJobResourcesClusterConfigOutputReference;
_p = JSII_RTTI_SYMBOL_1;
SagemakerDataQualityJobDefinitionJobResourcesClusterConfigOutputReference[_p] = { fqn: "@cdktf/provider-aws.sagemakerDataQualityJobDefinition.SagemakerDataQualityJobDefinitionJobResourcesClusterConfigOutputReference", version: "19.15.0" };
function sagemakerDataQualityJobDefinitionJobResourcesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cluster_config: sagemakerDataQualityJobDefinitionJobResourcesClusterConfigToTerraform(struct.clusterConfig),
    };
}
exports.sagemakerDataQualityJobDefinitionJobResourcesToTerraform = sagemakerDataQualityJobDefinitionJobResourcesToTerraform;
function sagemakerDataQualityJobDefinitionJobResourcesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cluster_config: {
            value: sagemakerDataQualityJobDefinitionJobResourcesClusterConfigToHclTerraform(struct.clusterConfig),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDataQualityJobDefinitionJobResourcesClusterConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDataQualityJobDefinitionJobResourcesToHclTerraform = sagemakerDataQualityJobDefinitionJobResourcesToHclTerraform;
class SagemakerDataQualityJobDefinitionJobResourcesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cluster_config - computed: false, optional: false, required: true
        this._clusterConfig = new SagemakerDataQualityJobDefinitionJobResourcesClusterConfigOutputReference(this, "cluster_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clusterConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.clusterConfig = this._clusterConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._clusterConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._clusterConfig.internalValue = value.clusterConfig;
        }
    }
    get clusterConfig() {
        return this._clusterConfig;
    }
    putClusterConfig(value) {
        this._clusterConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get clusterConfigInput() {
        return this._clusterConfig.internalValue;
    }
}
exports.SagemakerDataQualityJobDefinitionJobResourcesOutputReference = SagemakerDataQualityJobDefinitionJobResourcesOutputReference;
_q = JSII_RTTI_SYMBOL_1;
SagemakerDataQualityJobDefinitionJobResourcesOutputReference[_q] = { fqn: "@cdktf/provider-aws.sagemakerDataQualityJobDefinition.SagemakerDataQualityJobDefinitionJobResourcesOutputReference", version: "19.15.0" };
function sagemakerDataQualityJobDefinitionNetworkConfigVpcConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        security_group_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.securityGroupIds),
        subnets: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.subnets),
    };
}
exports.sagemakerDataQualityJobDefinitionNetworkConfigVpcConfigToTerraform = sagemakerDataQualityJobDefinitionNetworkConfigVpcConfigToTerraform;
function sagemakerDataQualityJobDefinitionNetworkConfigVpcConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        security_group_ids: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.securityGroupIds),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        subnets: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.subnets),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDataQualityJobDefinitionNetworkConfigVpcConfigToHclTerraform = sagemakerDataQualityJobDefinitionNetworkConfigVpcConfigToHclTerraform;
class SagemakerDataQualityJobDefinitionNetworkConfigVpcConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._securityGroupIds !== undefined) {
            hasAnyValues = true;
            internalValueResult.securityGroupIds = this._securityGroupIds;
        }
        if (this._subnets !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnets = this._subnets;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._securityGroupIds = undefined;
            this._subnets = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._securityGroupIds = value.securityGroupIds;
            this._subnets = value.subnets;
        }
    }
    get securityGroupIds() {
        return cdktf.Fn.tolist(this.getListAttribute('security_group_ids'));
    }
    set securityGroupIds(value) {
        this._securityGroupIds = value;
    }
    // Temporarily expose input value. Use with caution.
    get securityGroupIdsInput() {
        return this._securityGroupIds;
    }
    get subnets() {
        return cdktf.Fn.tolist(this.getListAttribute('subnets'));
    }
    set subnets(value) {
        this._subnets = value;
    }
    // Temporarily expose input value. Use with caution.
    get subnetsInput() {
        return this._subnets;
    }
}
exports.SagemakerDataQualityJobDefinitionNetworkConfigVpcConfigOutputReference = SagemakerDataQualityJobDefinitionNetworkConfigVpcConfigOutputReference;
_r = JSII_RTTI_SYMBOL_1;
SagemakerDataQualityJobDefinitionNetworkConfigVpcConfigOutputReference[_r] = { fqn: "@cdktf/provider-aws.sagemakerDataQualityJobDefinition.SagemakerDataQualityJobDefinitionNetworkConfigVpcConfigOutputReference", version: "19.15.0" };
function sagemakerDataQualityJobDefinitionNetworkConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable_inter_container_traffic_encryption: cdktf.booleanToTerraform(struct.enableInterContainerTrafficEncryption),
        enable_network_isolation: cdktf.booleanToTerraform(struct.enableNetworkIsolation),
        vpc_config: sagemakerDataQualityJobDefinitionNetworkConfigVpcConfigToTerraform(struct.vpcConfig),
    };
}
exports.sagemakerDataQualityJobDefinitionNetworkConfigToTerraform = sagemakerDataQualityJobDefinitionNetworkConfigToTerraform;
function sagemakerDataQualityJobDefinitionNetworkConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enable_inter_container_traffic_encryption: {
            value: cdktf.booleanToHclTerraform(struct.enableInterContainerTrafficEncryption),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        enable_network_isolation: {
            value: cdktf.booleanToHclTerraform(struct.enableNetworkIsolation),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        vpc_config: {
            value: sagemakerDataQualityJobDefinitionNetworkConfigVpcConfigToHclTerraform(struct.vpcConfig),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerDataQualityJobDefinitionNetworkConfigVpcConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDataQualityJobDefinitionNetworkConfigToHclTerraform = sagemakerDataQualityJobDefinitionNetworkConfigToHclTerraform;
class SagemakerDataQualityJobDefinitionNetworkConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // vpc_config - computed: false, optional: true, required: false
        this._vpcConfig = new SagemakerDataQualityJobDefinitionNetworkConfigVpcConfigOutputReference(this, "vpc_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enableInterContainerTrafficEncryption !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableInterContainerTrafficEncryption = this._enableInterContainerTrafficEncryption;
        }
        if (this._enableNetworkIsolation !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableNetworkIsolation = this._enableNetworkIsolation;
        }
        if (this._vpcConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.vpcConfig = this._vpcConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enableInterContainerTrafficEncryption = undefined;
            this._enableNetworkIsolation = undefined;
            this._vpcConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enableInterContainerTrafficEncryption = value.enableInterContainerTrafficEncryption;
            this._enableNetworkIsolation = value.enableNetworkIsolation;
            this._vpcConfig.internalValue = value.vpcConfig;
        }
    }
    get enableInterContainerTrafficEncryption() {
        return this.getBooleanAttribute('enable_inter_container_traffic_encryption');
    }
    set enableInterContainerTrafficEncryption(value) {
        this._enableInterContainerTrafficEncryption = value;
    }
    resetEnableInterContainerTrafficEncryption() {
        this._enableInterContainerTrafficEncryption = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableInterContainerTrafficEncryptionInput() {
        return this._enableInterContainerTrafficEncryption;
    }
    get enableNetworkIsolation() {
        return this.getBooleanAttribute('enable_network_isolation');
    }
    set enableNetworkIsolation(value) {
        this._enableNetworkIsolation = value;
    }
    resetEnableNetworkIsolation() {
        this._enableNetworkIsolation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableNetworkIsolationInput() {
        return this._enableNetworkIsolation;
    }
    get vpcConfig() {
        return this._vpcConfig;
    }
    putVpcConfig(value) {
        this._vpcConfig.internalValue = value;
    }
    resetVpcConfig() {
        this._vpcConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vpcConfigInput() {
        return this._vpcConfig.internalValue;
    }
}
exports.SagemakerDataQualityJobDefinitionNetworkConfigOutputReference = SagemakerDataQualityJobDefinitionNetworkConfigOutputReference;
_s = JSII_RTTI_SYMBOL_1;
SagemakerDataQualityJobDefinitionNetworkConfigOutputReference[_s] = { fqn: "@cdktf/provider-aws.sagemakerDataQualityJobDefinition.SagemakerDataQualityJobDefinitionNetworkConfigOutputReference", version: "19.15.0" };
function sagemakerDataQualityJobDefinitionStoppingConditionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max_runtime_in_seconds: cdktf.numberToTerraform(struct.maxRuntimeInSeconds),
    };
}
exports.sagemakerDataQualityJobDefinitionStoppingConditionToTerraform = sagemakerDataQualityJobDefinitionStoppingConditionToTerraform;
function sagemakerDataQualityJobDefinitionStoppingConditionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        max_runtime_in_seconds: {
            value: cdktf.numberToHclTerraform(struct.maxRuntimeInSeconds),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerDataQualityJobDefinitionStoppingConditionToHclTerraform = sagemakerDataQualityJobDefinitionStoppingConditionToHclTerraform;
class SagemakerDataQualityJobDefinitionStoppingConditionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maxRuntimeInSeconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxRuntimeInSeconds = this._maxRuntimeInSeconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maxRuntimeInSeconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maxRuntimeInSeconds = value.maxRuntimeInSeconds;
        }
    }
    get maxRuntimeInSeconds() {
        return this.getNumberAttribute('max_runtime_in_seconds');
    }
    set maxRuntimeInSeconds(value) {
        this._maxRuntimeInSeconds = value;
    }
    resetMaxRuntimeInSeconds() {
        this._maxRuntimeInSeconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxRuntimeInSecondsInput() {
        return this._maxRuntimeInSeconds;
    }
}
exports.SagemakerDataQualityJobDefinitionStoppingConditionOutputReference = SagemakerDataQualityJobDefinitionStoppingConditionOutputReference;
_t = JSII_RTTI_SYMBOL_1;
SagemakerDataQualityJobDefinitionStoppingConditionOutputReference[_t] = { fqn: "@cdktf/provider-aws.sagemakerDataQualityJobDefinition.SagemakerDataQualityJobDefinitionStoppingConditionOutputReference", version: "19.15.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/sagemaker_data_quality_job_definition aws_sagemaker_data_quality_job_definition}
*/
class SagemakerDataQualityJobDefinition extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a SagemakerDataQualityJobDefinition resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the SagemakerDataQualityJobDefinition to import
    * @param importFromId The id of the existing SagemakerDataQualityJobDefinition that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/sagemaker_data_quality_job_definition#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the SagemakerDataQualityJobDefinition to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_sagemaker_data_quality_job_definition", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/sagemaker_data_quality_job_definition aws_sagemaker_data_quality_job_definition} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SagemakerDataQualityJobDefinitionConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_sagemaker_data_quality_job_definition',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // data_quality_app_specification - computed: false, optional: false, required: true
        this._dataQualityAppSpecification = new SagemakerDataQualityJobDefinitionDataQualityAppSpecificationOutputReference(this, "data_quality_app_specification");
        // data_quality_baseline_config - computed: false, optional: true, required: false
        this._dataQualityBaselineConfig = new SagemakerDataQualityJobDefinitionDataQualityBaselineConfigOutputReference(this, "data_quality_baseline_config");
        // data_quality_job_input - computed: false, optional: false, required: true
        this._dataQualityJobInput = new SagemakerDataQualityJobDefinitionDataQualityJobInputOutputReference(this, "data_quality_job_input");
        // data_quality_job_output_config - computed: false, optional: false, required: true
        this._dataQualityJobOutputConfig = new SagemakerDataQualityJobDefinitionDataQualityJobOutputConfigOutputReference(this, "data_quality_job_output_config");
        // job_resources - computed: false, optional: false, required: true
        this._jobResources = new SagemakerDataQualityJobDefinitionJobResourcesOutputReference(this, "job_resources");
        // network_config - computed: false, optional: true, required: false
        this._networkConfig = new SagemakerDataQualityJobDefinitionNetworkConfigOutputReference(this, "network_config");
        // stopping_condition - computed: false, optional: true, required: false
        this._stoppingCondition = new SagemakerDataQualityJobDefinitionStoppingConditionOutputReference(this, "stopping_condition");
        this._id = config.id;
        this._name = config.name;
        this._roleArn = config.roleArn;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._dataQualityAppSpecification.internalValue = config.dataQualityAppSpecification;
        this._dataQualityBaselineConfig.internalValue = config.dataQualityBaselineConfig;
        this._dataQualityJobInput.internalValue = config.dataQualityJobInput;
        this._dataQualityJobOutputConfig.internalValue = config.dataQualityJobOutputConfig;
        this._jobResources.internalValue = config.jobResources;
        this._networkConfig.internalValue = config.networkConfig;
        this._stoppingCondition.internalValue = config.stoppingCondition;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get dataQualityAppSpecification() {
        return this._dataQualityAppSpecification;
    }
    putDataQualityAppSpecification(value) {
        this._dataQualityAppSpecification.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get dataQualityAppSpecificationInput() {
        return this._dataQualityAppSpecification.internalValue;
    }
    get dataQualityBaselineConfig() {
        return this._dataQualityBaselineConfig;
    }
    putDataQualityBaselineConfig(value) {
        this._dataQualityBaselineConfig.internalValue = value;
    }
    resetDataQualityBaselineConfig() {
        this._dataQualityBaselineConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataQualityBaselineConfigInput() {
        return this._dataQualityBaselineConfig.internalValue;
    }
    get dataQualityJobInput() {
        return this._dataQualityJobInput;
    }
    putDataQualityJobInput(value) {
        this._dataQualityJobInput.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get dataQualityJobInputInput() {
        return this._dataQualityJobInput.internalValue;
    }
    get dataQualityJobOutputConfig() {
        return this._dataQualityJobOutputConfig;
    }
    putDataQualityJobOutputConfig(value) {
        this._dataQualityJobOutputConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get dataQualityJobOutputConfigInput() {
        return this._dataQualityJobOutputConfig.internalValue;
    }
    get jobResources() {
        return this._jobResources;
    }
    putJobResources(value) {
        this._jobResources.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get jobResourcesInput() {
        return this._jobResources.internalValue;
    }
    get networkConfig() {
        return this._networkConfig;
    }
    putNetworkConfig(value) {
        this._networkConfig.internalValue = value;
    }
    resetNetworkConfig() {
        this._networkConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkConfigInput() {
        return this._networkConfig.internalValue;
    }
    get stoppingCondition() {
        return this._stoppingCondition;
    }
    putStoppingCondition(value) {
        this._stoppingCondition.internalValue = value;
    }
    resetStoppingCondition() {
        this._stoppingCondition.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stoppingConditionInput() {
        return this._stoppingCondition.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            role_arn: cdktf.stringToTerraform(this._roleArn),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            data_quality_app_specification: sagemakerDataQualityJobDefinitionDataQualityAppSpecificationToTerraform(this._dataQualityAppSpecification.internalValue),
            data_quality_baseline_config: sagemakerDataQualityJobDefinitionDataQualityBaselineConfigToTerraform(this._dataQualityBaselineConfig.internalValue),
            data_quality_job_input: sagemakerDataQualityJobDefinitionDataQualityJobInputToTerraform(this._dataQualityJobInput.internalValue),
            data_quality_job_output_config: sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigToTerraform(this._dataQualityJobOutputConfig.internalValue),
            job_resources: sagemakerDataQualityJobDefinitionJobResourcesToTerraform(this._jobResources.internalValue),
            network_config: sagemakerDataQualityJobDefinitionNetworkConfigToTerraform(this._networkConfig.internalValue),
            stopping_condition: sagemakerDataQualityJobDefinitionStoppingConditionToTerraform(this._stoppingCondition.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            role_arn: {
                value: cdktf.stringToHclTerraform(this._roleArn),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            tags: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tags),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            tags_all: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tagsAll),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            data_quality_app_specification: {
                value: sagemakerDataQualityJobDefinitionDataQualityAppSpecificationToHclTerraform(this._dataQualityAppSpecification.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "SagemakerDataQualityJobDefinitionDataQualityAppSpecificationList",
            },
            data_quality_baseline_config: {
                value: sagemakerDataQualityJobDefinitionDataQualityBaselineConfigToHclTerraform(this._dataQualityBaselineConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "SagemakerDataQualityJobDefinitionDataQualityBaselineConfigList",
            },
            data_quality_job_input: {
                value: sagemakerDataQualityJobDefinitionDataQualityJobInputToHclTerraform(this._dataQualityJobInput.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "SagemakerDataQualityJobDefinitionDataQualityJobInputList",
            },
            data_quality_job_output_config: {
                value: sagemakerDataQualityJobDefinitionDataQualityJobOutputConfigToHclTerraform(this._dataQualityJobOutputConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "SagemakerDataQualityJobDefinitionDataQualityJobOutputConfigList",
            },
            job_resources: {
                value: sagemakerDataQualityJobDefinitionJobResourcesToHclTerraform(this._jobResources.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "SagemakerDataQualityJobDefinitionJobResourcesList",
            },
            network_config: {
                value: sagemakerDataQualityJobDefinitionNetworkConfigToHclTerraform(this._networkConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "SagemakerDataQualityJobDefinitionNetworkConfigList",
            },
            stopping_condition: {
                value: sagemakerDataQualityJobDefinitionStoppingConditionToHclTerraform(this._stoppingCondition.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "SagemakerDataQualityJobDefinitionStoppingConditionList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.SagemakerDataQualityJobDefinition = SagemakerDataQualityJobDefinition;
_u = JSII_RTTI_SYMBOL_1;
SagemakerDataQualityJobDefinition[_u] = { fqn: "@cdktf/provider-aws.sagemakerDataQualityJobDefinition.SagemakerDataQualityJobDefinition", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
SagemakerDataQualityJobDefinition.tfResourceType = "aws_sagemaker_data_quality_job_definition";
//# sourceMappingURL=data:application/json;base64,