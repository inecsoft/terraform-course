"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedshiftHsmConfiguration = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/redshift_hsm_configuration aws_redshift_hsm_configuration}
*/
class RedshiftHsmConfiguration extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a RedshiftHsmConfiguration resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the RedshiftHsmConfiguration to import
    * @param importFromId The id of the existing RedshiftHsmConfiguration that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/redshift_hsm_configuration#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the RedshiftHsmConfiguration to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_redshift_hsm_configuration", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/redshift_hsm_configuration aws_redshift_hsm_configuration} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options RedshiftHsmConfigurationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_redshift_hsm_configuration',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        this._description = config.description;
        this._hsmConfigurationIdentifier = config.hsmConfigurationIdentifier;
        this._hsmIpAddress = config.hsmIpAddress;
        this._hsmPartitionName = config.hsmPartitionName;
        this._hsmPartitionPassword = config.hsmPartitionPassword;
        this._hsmServerPublicCertificate = config.hsmServerPublicCertificate;
        this._id = config.id;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get hsmConfigurationIdentifier() {
        return this.getStringAttribute('hsm_configuration_identifier');
    }
    set hsmConfigurationIdentifier(value) {
        this._hsmConfigurationIdentifier = value;
    }
    // Temporarily expose input value. Use with caution.
    get hsmConfigurationIdentifierInput() {
        return this._hsmConfigurationIdentifier;
    }
    get hsmIpAddress() {
        return this.getStringAttribute('hsm_ip_address');
    }
    set hsmIpAddress(value) {
        this._hsmIpAddress = value;
    }
    // Temporarily expose input value. Use with caution.
    get hsmIpAddressInput() {
        return this._hsmIpAddress;
    }
    get hsmPartitionName() {
        return this.getStringAttribute('hsm_partition_name');
    }
    set hsmPartitionName(value) {
        this._hsmPartitionName = value;
    }
    // Temporarily expose input value. Use with caution.
    get hsmPartitionNameInput() {
        return this._hsmPartitionName;
    }
    get hsmPartitionPassword() {
        return this.getStringAttribute('hsm_partition_password');
    }
    set hsmPartitionPassword(value) {
        this._hsmPartitionPassword = value;
    }
    // Temporarily expose input value. Use with caution.
    get hsmPartitionPasswordInput() {
        return this._hsmPartitionPassword;
    }
    get hsmServerPublicCertificate() {
        return this.getStringAttribute('hsm_server_public_certificate');
    }
    set hsmServerPublicCertificate(value) {
        this._hsmServerPublicCertificate = value;
    }
    // Temporarily expose input value. Use with caution.
    get hsmServerPublicCertificateInput() {
        return this._hsmServerPublicCertificate;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            hsm_configuration_identifier: cdktf.stringToTerraform(this._hsmConfigurationIdentifier),
            hsm_ip_address: cdktf.stringToTerraform(this._hsmIpAddress),
            hsm_partition_name: cdktf.stringToTerraform(this._hsmPartitionName),
            hsm_partition_password: cdktf.stringToTerraform(this._hsmPartitionPassword),
            hsm_server_public_certificate: cdktf.stringToTerraform(this._hsmServerPublicCertificate),
            id: cdktf.stringToTerraform(this._id),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            description: {
                value: cdktf.stringToHclTerraform(this._description),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            hsm_configuration_identifier: {
                value: cdktf.stringToHclTerraform(this._hsmConfigurationIdentifier),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            hsm_ip_address: {
                value: cdktf.stringToHclTerraform(this._hsmIpAddress),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            hsm_partition_name: {
                value: cdktf.stringToHclTerraform(this._hsmPartitionName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            hsm_partition_password: {
                value: cdktf.stringToHclTerraform(this._hsmPartitionPassword),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            hsm_server_public_certificate: {
                value: cdktf.stringToHclTerraform(this._hsmServerPublicCertificate),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            tags: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tags),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            tags_all: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tagsAll),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.RedshiftHsmConfiguration = RedshiftHsmConfiguration;
_a = JSII_RTTI_SYMBOL_1;
RedshiftHsmConfiguration[_a] = { fqn: "@cdktf/provider-aws.redshiftHsmConfiguration.RedshiftHsmConfiguration", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
RedshiftHsmConfiguration.tfResourceType = "aws_redshift_hsm_configuration";
//# sourceMappingURL=data:application/json;base64,