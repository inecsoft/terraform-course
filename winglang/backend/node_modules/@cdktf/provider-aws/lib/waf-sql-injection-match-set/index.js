"use strict";
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.WafSqlInjectionMatchSet = exports.WafSqlInjectionMatchSetSqlInjectionMatchTuplesList = exports.WafSqlInjectionMatchSetSqlInjectionMatchTuplesOutputReference = exports.wafSqlInjectionMatchSetSqlInjectionMatchTuplesToHclTerraform = exports.wafSqlInjectionMatchSetSqlInjectionMatchTuplesToTerraform = exports.WafSqlInjectionMatchSetSqlInjectionMatchTuplesFieldToMatchOutputReference = exports.wafSqlInjectionMatchSetSqlInjectionMatchTuplesFieldToMatchToHclTerraform = exports.wafSqlInjectionMatchSetSqlInjectionMatchTuplesFieldToMatchToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function wafSqlInjectionMatchSetSqlInjectionMatchTuplesFieldToMatchToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        data: cdktf.stringToTerraform(struct.data),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.wafSqlInjectionMatchSetSqlInjectionMatchTuplesFieldToMatchToTerraform = wafSqlInjectionMatchSetSqlInjectionMatchTuplesFieldToMatchToTerraform;
function wafSqlInjectionMatchSetSqlInjectionMatchTuplesFieldToMatchToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        data: {
            value: cdktf.stringToHclTerraform(struct.data),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        type: {
            value: cdktf.stringToHclTerraform(struct.type),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.wafSqlInjectionMatchSetSqlInjectionMatchTuplesFieldToMatchToHclTerraform = wafSqlInjectionMatchSetSqlInjectionMatchTuplesFieldToMatchToHclTerraform;
class WafSqlInjectionMatchSetSqlInjectionMatchTuplesFieldToMatchOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._data !== undefined) {
            hasAnyValues = true;
            internalValueResult.data = this._data;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._data = undefined;
            this._type = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._data = value.data;
            this._type = value.type;
        }
    }
    get data() {
        return this.getStringAttribute('data');
    }
    set data(value) {
        this._data = value;
    }
    resetData() {
        this._data = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataInput() {
        return this._data;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
}
exports.WafSqlInjectionMatchSetSqlInjectionMatchTuplesFieldToMatchOutputReference = WafSqlInjectionMatchSetSqlInjectionMatchTuplesFieldToMatchOutputReference;
_a = JSII_RTTI_SYMBOL_1;
WafSqlInjectionMatchSetSqlInjectionMatchTuplesFieldToMatchOutputReference[_a] = { fqn: "@cdktf/provider-aws.wafSqlInjectionMatchSet.WafSqlInjectionMatchSetSqlInjectionMatchTuplesFieldToMatchOutputReference", version: "19.15.0" };
function wafSqlInjectionMatchSetSqlInjectionMatchTuplesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        text_transformation: cdktf.stringToTerraform(struct.textTransformation),
        field_to_match: wafSqlInjectionMatchSetSqlInjectionMatchTuplesFieldToMatchToTerraform(struct.fieldToMatch),
    };
}
exports.wafSqlInjectionMatchSetSqlInjectionMatchTuplesToTerraform = wafSqlInjectionMatchSetSqlInjectionMatchTuplesToTerraform;
function wafSqlInjectionMatchSetSqlInjectionMatchTuplesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        text_transformation: {
            value: cdktf.stringToHclTerraform(struct.textTransformation),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        field_to_match: {
            value: wafSqlInjectionMatchSetSqlInjectionMatchTuplesFieldToMatchToHclTerraform(struct.fieldToMatch),
            isBlock: true,
            type: "list",
            storageClassType: "WafSqlInjectionMatchSetSqlInjectionMatchTuplesFieldToMatchList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.wafSqlInjectionMatchSetSqlInjectionMatchTuplesToHclTerraform = wafSqlInjectionMatchSetSqlInjectionMatchTuplesToHclTerraform;
class WafSqlInjectionMatchSetSqlInjectionMatchTuplesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // field_to_match - computed: false, optional: false, required: true
        this._fieldToMatch = new WafSqlInjectionMatchSetSqlInjectionMatchTuplesFieldToMatchOutputReference(this, "field_to_match");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._textTransformation !== undefined) {
            hasAnyValues = true;
            internalValueResult.textTransformation = this._textTransformation;
        }
        if (this._fieldToMatch?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.fieldToMatch = this._fieldToMatch?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._textTransformation = undefined;
            this._fieldToMatch.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._textTransformation = value.textTransformation;
            this._fieldToMatch.internalValue = value.fieldToMatch;
        }
    }
    get textTransformation() {
        return this.getStringAttribute('text_transformation');
    }
    set textTransformation(value) {
        this._textTransformation = value;
    }
    // Temporarily expose input value. Use with caution.
    get textTransformationInput() {
        return this._textTransformation;
    }
    get fieldToMatch() {
        return this._fieldToMatch;
    }
    putFieldToMatch(value) {
        this._fieldToMatch.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get fieldToMatchInput() {
        return this._fieldToMatch.internalValue;
    }
}
exports.WafSqlInjectionMatchSetSqlInjectionMatchTuplesOutputReference = WafSqlInjectionMatchSetSqlInjectionMatchTuplesOutputReference;
_b = JSII_RTTI_SYMBOL_1;
WafSqlInjectionMatchSetSqlInjectionMatchTuplesOutputReference[_b] = { fqn: "@cdktf/provider-aws.wafSqlInjectionMatchSet.WafSqlInjectionMatchSetSqlInjectionMatchTuplesOutputReference", version: "19.15.0" };
class WafSqlInjectionMatchSetSqlInjectionMatchTuplesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new WafSqlInjectionMatchSetSqlInjectionMatchTuplesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.WafSqlInjectionMatchSetSqlInjectionMatchTuplesList = WafSqlInjectionMatchSetSqlInjectionMatchTuplesList;
_c = JSII_RTTI_SYMBOL_1;
WafSqlInjectionMatchSetSqlInjectionMatchTuplesList[_c] = { fqn: "@cdktf/provider-aws.wafSqlInjectionMatchSet.WafSqlInjectionMatchSetSqlInjectionMatchTuplesList", version: "19.15.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/waf_sql_injection_match_set aws_waf_sql_injection_match_set}
*/
class WafSqlInjectionMatchSet extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a WafSqlInjectionMatchSet resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the WafSqlInjectionMatchSet to import
    * @param importFromId The id of the existing WafSqlInjectionMatchSet that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/waf_sql_injection_match_set#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the WafSqlInjectionMatchSet to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_waf_sql_injection_match_set", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/waf_sql_injection_match_set aws_waf_sql_injection_match_set} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options WafSqlInjectionMatchSetConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_waf_sql_injection_match_set',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // sql_injection_match_tuples - computed: false, optional: true, required: false
        this._sqlInjectionMatchTuples = new WafSqlInjectionMatchSetSqlInjectionMatchTuplesList(this, "sql_injection_match_tuples", true);
        this._id = config.id;
        this._name = config.name;
        this._sqlInjectionMatchTuples.internalValue = config.sqlInjectionMatchTuples;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get sqlInjectionMatchTuples() {
        return this._sqlInjectionMatchTuples;
    }
    putSqlInjectionMatchTuples(value) {
        this._sqlInjectionMatchTuples.internalValue = value;
    }
    resetSqlInjectionMatchTuples() {
        this._sqlInjectionMatchTuples.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sqlInjectionMatchTuplesInput() {
        return this._sqlInjectionMatchTuples.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            sql_injection_match_tuples: cdktf.listMapper(wafSqlInjectionMatchSetSqlInjectionMatchTuplesToTerraform, true)(this._sqlInjectionMatchTuples.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            sql_injection_match_tuples: {
                value: cdktf.listMapperHcl(wafSqlInjectionMatchSetSqlInjectionMatchTuplesToHclTerraform, true)(this._sqlInjectionMatchTuples.internalValue),
                isBlock: true,
                type: "set",
                storageClassType: "WafSqlInjectionMatchSetSqlInjectionMatchTuplesList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.WafSqlInjectionMatchSet = WafSqlInjectionMatchSet;
_d = JSII_RTTI_SYMBOL_1;
WafSqlInjectionMatchSet[_d] = { fqn: "@cdktf/provider-aws.wafSqlInjectionMatchSet.WafSqlInjectionMatchSet", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
WafSqlInjectionMatchSet.tfResourceType = "aws_waf_sql_injection_match_set";
//# sourceMappingURL=data:application/json;base64,