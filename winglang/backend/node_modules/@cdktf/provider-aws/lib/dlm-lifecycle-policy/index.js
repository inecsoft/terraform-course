"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DlmLifecyclePolicyPolicyDetailsScheduleOutputReference = exports.dlmLifecyclePolicyPolicyDetailsScheduleToHclTerraform = exports.dlmLifecyclePolicyPolicyDetailsScheduleToTerraform = exports.DlmLifecyclePolicyPolicyDetailsScheduleShareRuleOutputReference = exports.dlmLifecyclePolicyPolicyDetailsScheduleShareRuleToHclTerraform = exports.dlmLifecyclePolicyPolicyDetailsScheduleShareRuleToTerraform = exports.DlmLifecyclePolicyPolicyDetailsScheduleRetainRuleOutputReference = exports.dlmLifecyclePolicyPolicyDetailsScheduleRetainRuleToHclTerraform = exports.dlmLifecyclePolicyPolicyDetailsScheduleRetainRuleToTerraform = exports.DlmLifecyclePolicyPolicyDetailsScheduleFastRestoreRuleOutputReference = exports.dlmLifecyclePolicyPolicyDetailsScheduleFastRestoreRuleToHclTerraform = exports.dlmLifecyclePolicyPolicyDetailsScheduleFastRestoreRuleToTerraform = exports.DlmLifecyclePolicyPolicyDetailsScheduleDeprecateRuleOutputReference = exports.dlmLifecyclePolicyPolicyDetailsScheduleDeprecateRuleToHclTerraform = exports.dlmLifecyclePolicyPolicyDetailsScheduleDeprecateRuleToTerraform = exports.DlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleList = exports.DlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleOutputReference = exports.dlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleToHclTerraform = exports.dlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleToTerraform = exports.DlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleOutputReference = exports.dlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleToHclTerraform = exports.dlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleToTerraform = exports.DlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleOutputReference = exports.dlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleToHclTerraform = exports.dlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleToTerraform = exports.DlmLifecyclePolicyPolicyDetailsScheduleCreateRuleOutputReference = exports.dlmLifecyclePolicyPolicyDetailsScheduleCreateRuleToHclTerraform = exports.dlmLifecyclePolicyPolicyDetailsScheduleCreateRuleToTerraform = exports.DlmLifecyclePolicyPolicyDetailsParametersOutputReference = exports.dlmLifecyclePolicyPolicyDetailsParametersToHclTerraform = exports.dlmLifecyclePolicyPolicyDetailsParametersToTerraform = exports.DlmLifecyclePolicyPolicyDetailsEventSourceOutputReference = exports.dlmLifecyclePolicyPolicyDetailsEventSourceToHclTerraform = exports.dlmLifecyclePolicyPolicyDetailsEventSourceToTerraform = exports.DlmLifecyclePolicyPolicyDetailsEventSourceParametersOutputReference = exports.dlmLifecyclePolicyPolicyDetailsEventSourceParametersToHclTerraform = exports.dlmLifecyclePolicyPolicyDetailsEventSourceParametersToTerraform = exports.DlmLifecyclePolicyPolicyDetailsActionOutputReference = exports.dlmLifecyclePolicyPolicyDetailsActionToHclTerraform = exports.dlmLifecyclePolicyPolicyDetailsActionToTerraform = exports.DlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyList = exports.DlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyOutputReference = exports.dlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyToHclTerraform = exports.dlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyToTerraform = exports.DlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleOutputReference = exports.dlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleToHclTerraform = exports.dlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleToTerraform = exports.DlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationOutputReference = exports.dlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationToHclTerraform = exports.dlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationToTerraform = void 0;
exports.DlmLifecyclePolicy = exports.DlmLifecyclePolicyPolicyDetailsOutputReference = exports.dlmLifecyclePolicyPolicyDetailsToHclTerraform = exports.dlmLifecyclePolicyPolicyDetailsToTerraform = exports.DlmLifecyclePolicyPolicyDetailsScheduleList = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function dlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cmk_arn: cdktf.stringToTerraform(struct.cmkArn),
        encrypted: cdktf.booleanToTerraform(struct.encrypted),
    };
}
exports.dlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationToTerraform = dlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationToTerraform;
function dlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cmk_arn: {
            value: cdktf.stringToHclTerraform(struct.cmkArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        encrypted: {
            value: cdktf.booleanToHclTerraform(struct.encrypted),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationToHclTerraform = dlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationToHclTerraform;
class DlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cmkArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.cmkArn = this._cmkArn;
        }
        if (this._encrypted !== undefined) {
            hasAnyValues = true;
            internalValueResult.encrypted = this._encrypted;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cmkArn = undefined;
            this._encrypted = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cmkArn = value.cmkArn;
            this._encrypted = value.encrypted;
        }
    }
    get cmkArn() {
        return this.getStringAttribute('cmk_arn');
    }
    set cmkArn(value) {
        this._cmkArn = value;
    }
    resetCmkArn() {
        this._cmkArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cmkArnInput() {
        return this._cmkArn;
    }
    get encrypted() {
        return this.getBooleanAttribute('encrypted');
    }
    set encrypted(value) {
        this._encrypted = value;
    }
    resetEncrypted() {
        this._encrypted = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptedInput() {
        return this._encrypted;
    }
}
exports.DlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationOutputReference = DlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationOutputReference;
_a = JSII_RTTI_SYMBOL_1;
DlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationOutputReference[_a] = { fqn: "@cdktf/provider-aws.dlmLifecyclePolicy.DlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationOutputReference", version: "19.15.0" };
function dlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        interval: cdktf.numberToTerraform(struct.interval),
        interval_unit: cdktf.stringToTerraform(struct.intervalUnit),
    };
}
exports.dlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleToTerraform = dlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleToTerraform;
function dlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        interval: {
            value: cdktf.numberToHclTerraform(struct.interval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        interval_unit: {
            value: cdktf.stringToHclTerraform(struct.intervalUnit),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleToHclTerraform = dlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleToHclTerraform;
class DlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._interval !== undefined) {
            hasAnyValues = true;
            internalValueResult.interval = this._interval;
        }
        if (this._intervalUnit !== undefined) {
            hasAnyValues = true;
            internalValueResult.intervalUnit = this._intervalUnit;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._interval = undefined;
            this._intervalUnit = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._interval = value.interval;
            this._intervalUnit = value.intervalUnit;
        }
    }
    get interval() {
        return this.getNumberAttribute('interval');
    }
    set interval(value) {
        this._interval = value;
    }
    // Temporarily expose input value. Use with caution.
    get intervalInput() {
        return this._interval;
    }
    get intervalUnit() {
        return this.getStringAttribute('interval_unit');
    }
    set intervalUnit(value) {
        this._intervalUnit = value;
    }
    // Temporarily expose input value. Use with caution.
    get intervalUnitInput() {
        return this._intervalUnit;
    }
}
exports.DlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleOutputReference = DlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleOutputReference;
_b = JSII_RTTI_SYMBOL_1;
DlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleOutputReference[_b] = { fqn: "@cdktf/provider-aws.dlmLifecyclePolicy.DlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleOutputReference", version: "19.15.0" };
function dlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        target: cdktf.stringToTerraform(struct.target),
        encryption_configuration: dlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationToTerraform(struct.encryptionConfiguration),
        retain_rule: dlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleToTerraform(struct.retainRule),
    };
}
exports.dlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyToTerraform = dlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyToTerraform;
function dlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        target: {
            value: cdktf.stringToHclTerraform(struct.target),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        encryption_configuration: {
            value: dlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationToHclTerraform(struct.encryptionConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "DlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationList",
        },
        retain_rule: {
            value: dlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleToHclTerraform(struct.retainRule),
            isBlock: true,
            type: "list",
            storageClassType: "DlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyToHclTerraform = dlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyToHclTerraform;
class DlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // encryption_configuration - computed: false, optional: false, required: true
        this._encryptionConfiguration = new DlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyEncryptionConfigurationOutputReference(this, "encryption_configuration");
        // retain_rule - computed: false, optional: true, required: false
        this._retainRule = new DlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyRetainRuleOutputReference(this, "retain_rule");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._target !== undefined) {
            hasAnyValues = true;
            internalValueResult.target = this._target;
        }
        if (this._encryptionConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.encryptionConfiguration = this._encryptionConfiguration?.internalValue;
        }
        if (this._retainRule?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.retainRule = this._retainRule?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._target = undefined;
            this._encryptionConfiguration.internalValue = undefined;
            this._retainRule.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._target = value.target;
            this._encryptionConfiguration.internalValue = value.encryptionConfiguration;
            this._retainRule.internalValue = value.retainRule;
        }
    }
    get target() {
        return this.getStringAttribute('target');
    }
    set target(value) {
        this._target = value;
    }
    // Temporarily expose input value. Use with caution.
    get targetInput() {
        return this._target;
    }
    get encryptionConfiguration() {
        return this._encryptionConfiguration;
    }
    putEncryptionConfiguration(value) {
        this._encryptionConfiguration.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionConfigurationInput() {
        return this._encryptionConfiguration.internalValue;
    }
    get retainRule() {
        return this._retainRule;
    }
    putRetainRule(value) {
        this._retainRule.internalValue = value;
    }
    resetRetainRule() {
        this._retainRule.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retainRuleInput() {
        return this._retainRule.internalValue;
    }
}
exports.DlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyOutputReference = DlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyOutputReference;
_c = JSII_RTTI_SYMBOL_1;
DlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyOutputReference[_c] = { fqn: "@cdktf/provider-aws.dlmLifecyclePolicy.DlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyOutputReference", version: "19.15.0" };
class DlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyList = DlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyList;
_d = JSII_RTTI_SYMBOL_1;
DlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyList[_d] = { fqn: "@cdktf/provider-aws.dlmLifecyclePolicy.DlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyList", version: "19.15.0" };
function dlmLifecyclePolicyPolicyDetailsActionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        cross_region_copy: cdktf.listMapper(dlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyToTerraform, true)(struct.crossRegionCopy),
    };
}
exports.dlmLifecyclePolicyPolicyDetailsActionToTerraform = dlmLifecyclePolicyPolicyDetailsActionToTerraform;
function dlmLifecyclePolicyPolicyDetailsActionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cross_region_copy: {
            value: cdktf.listMapperHcl(dlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyToHclTerraform, true)(struct.crossRegionCopy),
            isBlock: true,
            type: "set",
            storageClassType: "DlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dlmLifecyclePolicyPolicyDetailsActionToHclTerraform = dlmLifecyclePolicyPolicyDetailsActionToHclTerraform;
class DlmLifecyclePolicyPolicyDetailsActionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cross_region_copy - computed: false, optional: false, required: true
        this._crossRegionCopy = new DlmLifecyclePolicyPolicyDetailsActionCrossRegionCopyList(this, "cross_region_copy", true);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._crossRegionCopy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.crossRegionCopy = this._crossRegionCopy?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._name = undefined;
            this._crossRegionCopy.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._name = value.name;
            this._crossRegionCopy.internalValue = value.crossRegionCopy;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get crossRegionCopy() {
        return this._crossRegionCopy;
    }
    putCrossRegionCopy(value) {
        this._crossRegionCopy.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get crossRegionCopyInput() {
        return this._crossRegionCopy.internalValue;
    }
}
exports.DlmLifecyclePolicyPolicyDetailsActionOutputReference = DlmLifecyclePolicyPolicyDetailsActionOutputReference;
_e = JSII_RTTI_SYMBOL_1;
DlmLifecyclePolicyPolicyDetailsActionOutputReference[_e] = { fqn: "@cdktf/provider-aws.dlmLifecyclePolicy.DlmLifecyclePolicyPolicyDetailsActionOutputReference", version: "19.15.0" };
function dlmLifecyclePolicyPolicyDetailsEventSourceParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        description_regex: cdktf.stringToTerraform(struct.descriptionRegex),
        event_type: cdktf.stringToTerraform(struct.eventType),
        snapshot_owner: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.snapshotOwner),
    };
}
exports.dlmLifecyclePolicyPolicyDetailsEventSourceParametersToTerraform = dlmLifecyclePolicyPolicyDetailsEventSourceParametersToTerraform;
function dlmLifecyclePolicyPolicyDetailsEventSourceParametersToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        description_regex: {
            value: cdktf.stringToHclTerraform(struct.descriptionRegex),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        event_type: {
            value: cdktf.stringToHclTerraform(struct.eventType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        snapshot_owner: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.snapshotOwner),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dlmLifecyclePolicyPolicyDetailsEventSourceParametersToHclTerraform = dlmLifecyclePolicyPolicyDetailsEventSourceParametersToHclTerraform;
class DlmLifecyclePolicyPolicyDetailsEventSourceParametersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._descriptionRegex !== undefined) {
            hasAnyValues = true;
            internalValueResult.descriptionRegex = this._descriptionRegex;
        }
        if (this._eventType !== undefined) {
            hasAnyValues = true;
            internalValueResult.eventType = this._eventType;
        }
        if (this._snapshotOwner !== undefined) {
            hasAnyValues = true;
            internalValueResult.snapshotOwner = this._snapshotOwner;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._descriptionRegex = undefined;
            this._eventType = undefined;
            this._snapshotOwner = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._descriptionRegex = value.descriptionRegex;
            this._eventType = value.eventType;
            this._snapshotOwner = value.snapshotOwner;
        }
    }
    get descriptionRegex() {
        return this.getStringAttribute('description_regex');
    }
    set descriptionRegex(value) {
        this._descriptionRegex = value;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionRegexInput() {
        return this._descriptionRegex;
    }
    get eventType() {
        return this.getStringAttribute('event_type');
    }
    set eventType(value) {
        this._eventType = value;
    }
    // Temporarily expose input value. Use with caution.
    get eventTypeInput() {
        return this._eventType;
    }
    get snapshotOwner() {
        return cdktf.Fn.tolist(this.getListAttribute('snapshot_owner'));
    }
    set snapshotOwner(value) {
        this._snapshotOwner = value;
    }
    // Temporarily expose input value. Use with caution.
    get snapshotOwnerInput() {
        return this._snapshotOwner;
    }
}
exports.DlmLifecyclePolicyPolicyDetailsEventSourceParametersOutputReference = DlmLifecyclePolicyPolicyDetailsEventSourceParametersOutputReference;
_f = JSII_RTTI_SYMBOL_1;
DlmLifecyclePolicyPolicyDetailsEventSourceParametersOutputReference[_f] = { fqn: "@cdktf/provider-aws.dlmLifecyclePolicy.DlmLifecyclePolicyPolicyDetailsEventSourceParametersOutputReference", version: "19.15.0" };
function dlmLifecyclePolicyPolicyDetailsEventSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        type: cdktf.stringToTerraform(struct.type),
        parameters: dlmLifecyclePolicyPolicyDetailsEventSourceParametersToTerraform(struct.parameters),
    };
}
exports.dlmLifecyclePolicyPolicyDetailsEventSourceToTerraform = dlmLifecyclePolicyPolicyDetailsEventSourceToTerraform;
function dlmLifecyclePolicyPolicyDetailsEventSourceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        type: {
            value: cdktf.stringToHclTerraform(struct.type),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        parameters: {
            value: dlmLifecyclePolicyPolicyDetailsEventSourceParametersToHclTerraform(struct.parameters),
            isBlock: true,
            type: "list",
            storageClassType: "DlmLifecyclePolicyPolicyDetailsEventSourceParametersList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dlmLifecyclePolicyPolicyDetailsEventSourceToHclTerraform = dlmLifecyclePolicyPolicyDetailsEventSourceToHclTerraform;
class DlmLifecyclePolicyPolicyDetailsEventSourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // parameters - computed: false, optional: false, required: true
        this._parameters = new DlmLifecyclePolicyPolicyDetailsEventSourceParametersOutputReference(this, "parameters");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        if (this._parameters?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.parameters = this._parameters?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._type = undefined;
            this._parameters.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._type = value.type;
            this._parameters.internalValue = value.parameters;
        }
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get parameters() {
        return this._parameters;
    }
    putParameters(value) {
        this._parameters.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get parametersInput() {
        return this._parameters.internalValue;
    }
}
exports.DlmLifecyclePolicyPolicyDetailsEventSourceOutputReference = DlmLifecyclePolicyPolicyDetailsEventSourceOutputReference;
_g = JSII_RTTI_SYMBOL_1;
DlmLifecyclePolicyPolicyDetailsEventSourceOutputReference[_g] = { fqn: "@cdktf/provider-aws.dlmLifecyclePolicy.DlmLifecyclePolicyPolicyDetailsEventSourceOutputReference", version: "19.15.0" };
function dlmLifecyclePolicyPolicyDetailsParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        exclude_boot_volume: cdktf.booleanToTerraform(struct.excludeBootVolume),
        no_reboot: cdktf.booleanToTerraform(struct.noReboot),
    };
}
exports.dlmLifecyclePolicyPolicyDetailsParametersToTerraform = dlmLifecyclePolicyPolicyDetailsParametersToTerraform;
function dlmLifecyclePolicyPolicyDetailsParametersToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        exclude_boot_volume: {
            value: cdktf.booleanToHclTerraform(struct.excludeBootVolume),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        no_reboot: {
            value: cdktf.booleanToHclTerraform(struct.noReboot),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dlmLifecyclePolicyPolicyDetailsParametersToHclTerraform = dlmLifecyclePolicyPolicyDetailsParametersToHclTerraform;
class DlmLifecyclePolicyPolicyDetailsParametersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._excludeBootVolume !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludeBootVolume = this._excludeBootVolume;
        }
        if (this._noReboot !== undefined) {
            hasAnyValues = true;
            internalValueResult.noReboot = this._noReboot;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._excludeBootVolume = undefined;
            this._noReboot = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._excludeBootVolume = value.excludeBootVolume;
            this._noReboot = value.noReboot;
        }
    }
    get excludeBootVolume() {
        return this.getBooleanAttribute('exclude_boot_volume');
    }
    set excludeBootVolume(value) {
        this._excludeBootVolume = value;
    }
    resetExcludeBootVolume() {
        this._excludeBootVolume = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludeBootVolumeInput() {
        return this._excludeBootVolume;
    }
    get noReboot() {
        return this.getBooleanAttribute('no_reboot');
    }
    set noReboot(value) {
        this._noReboot = value;
    }
    resetNoReboot() {
        this._noReboot = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get noRebootInput() {
        return this._noReboot;
    }
}
exports.DlmLifecyclePolicyPolicyDetailsParametersOutputReference = DlmLifecyclePolicyPolicyDetailsParametersOutputReference;
_h = JSII_RTTI_SYMBOL_1;
DlmLifecyclePolicyPolicyDetailsParametersOutputReference[_h] = { fqn: "@cdktf/provider-aws.dlmLifecyclePolicy.DlmLifecyclePolicyPolicyDetailsParametersOutputReference", version: "19.15.0" };
function dlmLifecyclePolicyPolicyDetailsScheduleCreateRuleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cron_expression: cdktf.stringToTerraform(struct.cronExpression),
        interval: cdktf.numberToTerraform(struct.interval),
        interval_unit: cdktf.stringToTerraform(struct.intervalUnit),
        location: cdktf.stringToTerraform(struct.location),
        times: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.times),
    };
}
exports.dlmLifecyclePolicyPolicyDetailsScheduleCreateRuleToTerraform = dlmLifecyclePolicyPolicyDetailsScheduleCreateRuleToTerraform;
function dlmLifecyclePolicyPolicyDetailsScheduleCreateRuleToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cron_expression: {
            value: cdktf.stringToHclTerraform(struct.cronExpression),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        interval: {
            value: cdktf.numberToHclTerraform(struct.interval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        interval_unit: {
            value: cdktf.stringToHclTerraform(struct.intervalUnit),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        location: {
            value: cdktf.stringToHclTerraform(struct.location),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        times: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.times),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dlmLifecyclePolicyPolicyDetailsScheduleCreateRuleToHclTerraform = dlmLifecyclePolicyPolicyDetailsScheduleCreateRuleToHclTerraform;
class DlmLifecyclePolicyPolicyDetailsScheduleCreateRuleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cronExpression !== undefined) {
            hasAnyValues = true;
            internalValueResult.cronExpression = this._cronExpression;
        }
        if (this._interval !== undefined) {
            hasAnyValues = true;
            internalValueResult.interval = this._interval;
        }
        if (this._intervalUnit !== undefined) {
            hasAnyValues = true;
            internalValueResult.intervalUnit = this._intervalUnit;
        }
        if (this._location !== undefined) {
            hasAnyValues = true;
            internalValueResult.location = this._location;
        }
        if (this._times !== undefined) {
            hasAnyValues = true;
            internalValueResult.times = this._times;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cronExpression = undefined;
            this._interval = undefined;
            this._intervalUnit = undefined;
            this._location = undefined;
            this._times = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cronExpression = value.cronExpression;
            this._interval = value.interval;
            this._intervalUnit = value.intervalUnit;
            this._location = value.location;
            this._times = value.times;
        }
    }
    get cronExpression() {
        return this.getStringAttribute('cron_expression');
    }
    set cronExpression(value) {
        this._cronExpression = value;
    }
    resetCronExpression() {
        this._cronExpression = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cronExpressionInput() {
        return this._cronExpression;
    }
    get interval() {
        return this.getNumberAttribute('interval');
    }
    set interval(value) {
        this._interval = value;
    }
    resetInterval() {
        this._interval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get intervalInput() {
        return this._interval;
    }
    get intervalUnit() {
        return this.getStringAttribute('interval_unit');
    }
    set intervalUnit(value) {
        this._intervalUnit = value;
    }
    resetIntervalUnit() {
        this._intervalUnit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get intervalUnitInput() {
        return this._intervalUnit;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    resetLocation() {
        this._location = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get times() {
        return this.getListAttribute('times');
    }
    set times(value) {
        this._times = value;
    }
    resetTimes() {
        this._times = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timesInput() {
        return this._times;
    }
}
exports.DlmLifecyclePolicyPolicyDetailsScheduleCreateRuleOutputReference = DlmLifecyclePolicyPolicyDetailsScheduleCreateRuleOutputReference;
_j = JSII_RTTI_SYMBOL_1;
DlmLifecyclePolicyPolicyDetailsScheduleCreateRuleOutputReference[_j] = { fqn: "@cdktf/provider-aws.dlmLifecyclePolicy.DlmLifecyclePolicyPolicyDetailsScheduleCreateRuleOutputReference", version: "19.15.0" };
function dlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        interval: cdktf.numberToTerraform(struct.interval),
        interval_unit: cdktf.stringToTerraform(struct.intervalUnit),
    };
}
exports.dlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleToTerraform = dlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleToTerraform;
function dlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        interval: {
            value: cdktf.numberToHclTerraform(struct.interval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        interval_unit: {
            value: cdktf.stringToHclTerraform(struct.intervalUnit),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleToHclTerraform = dlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleToHclTerraform;
class DlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._interval !== undefined) {
            hasAnyValues = true;
            internalValueResult.interval = this._interval;
        }
        if (this._intervalUnit !== undefined) {
            hasAnyValues = true;
            internalValueResult.intervalUnit = this._intervalUnit;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._interval = undefined;
            this._intervalUnit = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._interval = value.interval;
            this._intervalUnit = value.intervalUnit;
        }
    }
    get interval() {
        return this.getNumberAttribute('interval');
    }
    set interval(value) {
        this._interval = value;
    }
    // Temporarily expose input value. Use with caution.
    get intervalInput() {
        return this._interval;
    }
    get intervalUnit() {
        return this.getStringAttribute('interval_unit');
    }
    set intervalUnit(value) {
        this._intervalUnit = value;
    }
    // Temporarily expose input value. Use with caution.
    get intervalUnitInput() {
        return this._intervalUnit;
    }
}
exports.DlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleOutputReference = DlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleOutputReference;
_k = JSII_RTTI_SYMBOL_1;
DlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleOutputReference[_k] = { fqn: "@cdktf/provider-aws.dlmLifecyclePolicy.DlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleOutputReference", version: "19.15.0" };
function dlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        interval: cdktf.numberToTerraform(struct.interval),
        interval_unit: cdktf.stringToTerraform(struct.intervalUnit),
    };
}
exports.dlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleToTerraform = dlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleToTerraform;
function dlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        interval: {
            value: cdktf.numberToHclTerraform(struct.interval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        interval_unit: {
            value: cdktf.stringToHclTerraform(struct.intervalUnit),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleToHclTerraform = dlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleToHclTerraform;
class DlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._interval !== undefined) {
            hasAnyValues = true;
            internalValueResult.interval = this._interval;
        }
        if (this._intervalUnit !== undefined) {
            hasAnyValues = true;
            internalValueResult.intervalUnit = this._intervalUnit;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._interval = undefined;
            this._intervalUnit = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._interval = value.interval;
            this._intervalUnit = value.intervalUnit;
        }
    }
    get interval() {
        return this.getNumberAttribute('interval');
    }
    set interval(value) {
        this._interval = value;
    }
    // Temporarily expose input value. Use with caution.
    get intervalInput() {
        return this._interval;
    }
    get intervalUnit() {
        return this.getStringAttribute('interval_unit');
    }
    set intervalUnit(value) {
        this._intervalUnit = value;
    }
    // Temporarily expose input value. Use with caution.
    get intervalUnitInput() {
        return this._intervalUnit;
    }
}
exports.DlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleOutputReference = DlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleOutputReference;
_l = JSII_RTTI_SYMBOL_1;
DlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleOutputReference[_l] = { fqn: "@cdktf/provider-aws.dlmLifecyclePolicy.DlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleOutputReference", version: "19.15.0" };
function dlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cmk_arn: cdktf.stringToTerraform(struct.cmkArn),
        copy_tags: cdktf.booleanToTerraform(struct.copyTags),
        encrypted: cdktf.booleanToTerraform(struct.encrypted),
        target: cdktf.stringToTerraform(struct.target),
        deprecate_rule: dlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleToTerraform(struct.deprecateRule),
        retain_rule: dlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleToTerraform(struct.retainRule),
    };
}
exports.dlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleToTerraform = dlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleToTerraform;
function dlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cmk_arn: {
            value: cdktf.stringToHclTerraform(struct.cmkArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        copy_tags: {
            value: cdktf.booleanToHclTerraform(struct.copyTags),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        encrypted: {
            value: cdktf.booleanToHclTerraform(struct.encrypted),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        target: {
            value: cdktf.stringToHclTerraform(struct.target),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        deprecate_rule: {
            value: dlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleToHclTerraform(struct.deprecateRule),
            isBlock: true,
            type: "list",
            storageClassType: "DlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleList",
        },
        retain_rule: {
            value: dlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleToHclTerraform(struct.retainRule),
            isBlock: true,
            type: "list",
            storageClassType: "DlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleToHclTerraform = dlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleToHclTerraform;
class DlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // deprecate_rule - computed: false, optional: true, required: false
        this._deprecateRule = new DlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleOutputReference(this, "deprecate_rule");
        // retain_rule - computed: false, optional: true, required: false
        this._retainRule = new DlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleRetainRuleOutputReference(this, "retain_rule");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cmkArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.cmkArn = this._cmkArn;
        }
        if (this._copyTags !== undefined) {
            hasAnyValues = true;
            internalValueResult.copyTags = this._copyTags;
        }
        if (this._encrypted !== undefined) {
            hasAnyValues = true;
            internalValueResult.encrypted = this._encrypted;
        }
        if (this._target !== undefined) {
            hasAnyValues = true;
            internalValueResult.target = this._target;
        }
        if (this._deprecateRule?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.deprecateRule = this._deprecateRule?.internalValue;
        }
        if (this._retainRule?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.retainRule = this._retainRule?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._cmkArn = undefined;
            this._copyTags = undefined;
            this._encrypted = undefined;
            this._target = undefined;
            this._deprecateRule.internalValue = undefined;
            this._retainRule.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._cmkArn = value.cmkArn;
            this._copyTags = value.copyTags;
            this._encrypted = value.encrypted;
            this._target = value.target;
            this._deprecateRule.internalValue = value.deprecateRule;
            this._retainRule.internalValue = value.retainRule;
        }
    }
    get cmkArn() {
        return this.getStringAttribute('cmk_arn');
    }
    set cmkArn(value) {
        this._cmkArn = value;
    }
    resetCmkArn() {
        this._cmkArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cmkArnInput() {
        return this._cmkArn;
    }
    get copyTags() {
        return this.getBooleanAttribute('copy_tags');
    }
    set copyTags(value) {
        this._copyTags = value;
    }
    resetCopyTags() {
        this._copyTags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get copyTagsInput() {
        return this._copyTags;
    }
    get encrypted() {
        return this.getBooleanAttribute('encrypted');
    }
    set encrypted(value) {
        this._encrypted = value;
    }
    // Temporarily expose input value. Use with caution.
    get encryptedInput() {
        return this._encrypted;
    }
    get target() {
        return this.getStringAttribute('target');
    }
    set target(value) {
        this._target = value;
    }
    // Temporarily expose input value. Use with caution.
    get targetInput() {
        return this._target;
    }
    get deprecateRule() {
        return this._deprecateRule;
    }
    putDeprecateRule(value) {
        this._deprecateRule.internalValue = value;
    }
    resetDeprecateRule() {
        this._deprecateRule.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deprecateRuleInput() {
        return this._deprecateRule.internalValue;
    }
    get retainRule() {
        return this._retainRule;
    }
    putRetainRule(value) {
        this._retainRule.internalValue = value;
    }
    resetRetainRule() {
        this._retainRule.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retainRuleInput() {
        return this._retainRule.internalValue;
    }
}
exports.DlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleOutputReference = DlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleOutputReference;
_m = JSII_RTTI_SYMBOL_1;
DlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleOutputReference[_m] = { fqn: "@cdktf/provider-aws.dlmLifecyclePolicy.DlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleOutputReference", version: "19.15.0" };
class DlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleList = DlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleList;
_o = JSII_RTTI_SYMBOL_1;
DlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleList[_o] = { fqn: "@cdktf/provider-aws.dlmLifecyclePolicy.DlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleList", version: "19.15.0" };
function dlmLifecyclePolicyPolicyDetailsScheduleDeprecateRuleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        count: cdktf.numberToTerraform(struct.count),
        interval: cdktf.numberToTerraform(struct.interval),
        interval_unit: cdktf.stringToTerraform(struct.intervalUnit),
    };
}
exports.dlmLifecyclePolicyPolicyDetailsScheduleDeprecateRuleToTerraform = dlmLifecyclePolicyPolicyDetailsScheduleDeprecateRuleToTerraform;
function dlmLifecyclePolicyPolicyDetailsScheduleDeprecateRuleToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        count: {
            value: cdktf.numberToHclTerraform(struct.count),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        interval: {
            value: cdktf.numberToHclTerraform(struct.interval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        interval_unit: {
            value: cdktf.stringToHclTerraform(struct.intervalUnit),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dlmLifecyclePolicyPolicyDetailsScheduleDeprecateRuleToHclTerraform = dlmLifecyclePolicyPolicyDetailsScheduleDeprecateRuleToHclTerraform;
class DlmLifecyclePolicyPolicyDetailsScheduleDeprecateRuleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._count !== undefined) {
            hasAnyValues = true;
            internalValueResult.count = this._count;
        }
        if (this._interval !== undefined) {
            hasAnyValues = true;
            internalValueResult.interval = this._interval;
        }
        if (this._intervalUnit !== undefined) {
            hasAnyValues = true;
            internalValueResult.intervalUnit = this._intervalUnit;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._count = undefined;
            this._interval = undefined;
            this._intervalUnit = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._count = value.count;
            this._interval = value.interval;
            this._intervalUnit = value.intervalUnit;
        }
    }
    get count() {
        return this.getNumberAttribute('count');
    }
    set count(value) {
        this._count = value;
    }
    resetCount() {
        this._count = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get countInput() {
        return this._count;
    }
    get interval() {
        return this.getNumberAttribute('interval');
    }
    set interval(value) {
        this._interval = value;
    }
    resetInterval() {
        this._interval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get intervalInput() {
        return this._interval;
    }
    get intervalUnit() {
        return this.getStringAttribute('interval_unit');
    }
    set intervalUnit(value) {
        this._intervalUnit = value;
    }
    resetIntervalUnit() {
        this._intervalUnit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get intervalUnitInput() {
        return this._intervalUnit;
    }
}
exports.DlmLifecyclePolicyPolicyDetailsScheduleDeprecateRuleOutputReference = DlmLifecyclePolicyPolicyDetailsScheduleDeprecateRuleOutputReference;
_p = JSII_RTTI_SYMBOL_1;
DlmLifecyclePolicyPolicyDetailsScheduleDeprecateRuleOutputReference[_p] = { fqn: "@cdktf/provider-aws.dlmLifecyclePolicy.DlmLifecyclePolicyPolicyDetailsScheduleDeprecateRuleOutputReference", version: "19.15.0" };
function dlmLifecyclePolicyPolicyDetailsScheduleFastRestoreRuleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        availability_zones: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.availabilityZones),
        count: cdktf.numberToTerraform(struct.count),
        interval: cdktf.numberToTerraform(struct.interval),
        interval_unit: cdktf.stringToTerraform(struct.intervalUnit),
    };
}
exports.dlmLifecyclePolicyPolicyDetailsScheduleFastRestoreRuleToTerraform = dlmLifecyclePolicyPolicyDetailsScheduleFastRestoreRuleToTerraform;
function dlmLifecyclePolicyPolicyDetailsScheduleFastRestoreRuleToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        availability_zones: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.availabilityZones),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        count: {
            value: cdktf.numberToHclTerraform(struct.count),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        interval: {
            value: cdktf.numberToHclTerraform(struct.interval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        interval_unit: {
            value: cdktf.stringToHclTerraform(struct.intervalUnit),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dlmLifecyclePolicyPolicyDetailsScheduleFastRestoreRuleToHclTerraform = dlmLifecyclePolicyPolicyDetailsScheduleFastRestoreRuleToHclTerraform;
class DlmLifecyclePolicyPolicyDetailsScheduleFastRestoreRuleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._availabilityZones !== undefined) {
            hasAnyValues = true;
            internalValueResult.availabilityZones = this._availabilityZones;
        }
        if (this._count !== undefined) {
            hasAnyValues = true;
            internalValueResult.count = this._count;
        }
        if (this._interval !== undefined) {
            hasAnyValues = true;
            internalValueResult.interval = this._interval;
        }
        if (this._intervalUnit !== undefined) {
            hasAnyValues = true;
            internalValueResult.intervalUnit = this._intervalUnit;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._availabilityZones = undefined;
            this._count = undefined;
            this._interval = undefined;
            this._intervalUnit = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._availabilityZones = value.availabilityZones;
            this._count = value.count;
            this._interval = value.interval;
            this._intervalUnit = value.intervalUnit;
        }
    }
    get availabilityZones() {
        return cdktf.Fn.tolist(this.getListAttribute('availability_zones'));
    }
    set availabilityZones(value) {
        this._availabilityZones = value;
    }
    // Temporarily expose input value. Use with caution.
    get availabilityZonesInput() {
        return this._availabilityZones;
    }
    get count() {
        return this.getNumberAttribute('count');
    }
    set count(value) {
        this._count = value;
    }
    resetCount() {
        this._count = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get countInput() {
        return this._count;
    }
    get interval() {
        return this.getNumberAttribute('interval');
    }
    set interval(value) {
        this._interval = value;
    }
    resetInterval() {
        this._interval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get intervalInput() {
        return this._interval;
    }
    get intervalUnit() {
        return this.getStringAttribute('interval_unit');
    }
    set intervalUnit(value) {
        this._intervalUnit = value;
    }
    resetIntervalUnit() {
        this._intervalUnit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get intervalUnitInput() {
        return this._intervalUnit;
    }
}
exports.DlmLifecyclePolicyPolicyDetailsScheduleFastRestoreRuleOutputReference = DlmLifecyclePolicyPolicyDetailsScheduleFastRestoreRuleOutputReference;
_q = JSII_RTTI_SYMBOL_1;
DlmLifecyclePolicyPolicyDetailsScheduleFastRestoreRuleOutputReference[_q] = { fqn: "@cdktf/provider-aws.dlmLifecyclePolicy.DlmLifecyclePolicyPolicyDetailsScheduleFastRestoreRuleOutputReference", version: "19.15.0" };
function dlmLifecyclePolicyPolicyDetailsScheduleRetainRuleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        count: cdktf.numberToTerraform(struct.count),
        interval: cdktf.numberToTerraform(struct.interval),
        interval_unit: cdktf.stringToTerraform(struct.intervalUnit),
    };
}
exports.dlmLifecyclePolicyPolicyDetailsScheduleRetainRuleToTerraform = dlmLifecyclePolicyPolicyDetailsScheduleRetainRuleToTerraform;
function dlmLifecyclePolicyPolicyDetailsScheduleRetainRuleToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        count: {
            value: cdktf.numberToHclTerraform(struct.count),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        interval: {
            value: cdktf.numberToHclTerraform(struct.interval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        interval_unit: {
            value: cdktf.stringToHclTerraform(struct.intervalUnit),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dlmLifecyclePolicyPolicyDetailsScheduleRetainRuleToHclTerraform = dlmLifecyclePolicyPolicyDetailsScheduleRetainRuleToHclTerraform;
class DlmLifecyclePolicyPolicyDetailsScheduleRetainRuleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._count !== undefined) {
            hasAnyValues = true;
            internalValueResult.count = this._count;
        }
        if (this._interval !== undefined) {
            hasAnyValues = true;
            internalValueResult.interval = this._interval;
        }
        if (this._intervalUnit !== undefined) {
            hasAnyValues = true;
            internalValueResult.intervalUnit = this._intervalUnit;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._count = undefined;
            this._interval = undefined;
            this._intervalUnit = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._count = value.count;
            this._interval = value.interval;
            this._intervalUnit = value.intervalUnit;
        }
    }
    get count() {
        return this.getNumberAttribute('count');
    }
    set count(value) {
        this._count = value;
    }
    resetCount() {
        this._count = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get countInput() {
        return this._count;
    }
    get interval() {
        return this.getNumberAttribute('interval');
    }
    set interval(value) {
        this._interval = value;
    }
    resetInterval() {
        this._interval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get intervalInput() {
        return this._interval;
    }
    get intervalUnit() {
        return this.getStringAttribute('interval_unit');
    }
    set intervalUnit(value) {
        this._intervalUnit = value;
    }
    resetIntervalUnit() {
        this._intervalUnit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get intervalUnitInput() {
        return this._intervalUnit;
    }
}
exports.DlmLifecyclePolicyPolicyDetailsScheduleRetainRuleOutputReference = DlmLifecyclePolicyPolicyDetailsScheduleRetainRuleOutputReference;
_r = JSII_RTTI_SYMBOL_1;
DlmLifecyclePolicyPolicyDetailsScheduleRetainRuleOutputReference[_r] = { fqn: "@cdktf/provider-aws.dlmLifecyclePolicy.DlmLifecyclePolicyPolicyDetailsScheduleRetainRuleOutputReference", version: "19.15.0" };
function dlmLifecyclePolicyPolicyDetailsScheduleShareRuleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        target_accounts: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.targetAccounts),
        unshare_interval: cdktf.numberToTerraform(struct.unshareInterval),
        unshare_interval_unit: cdktf.stringToTerraform(struct.unshareIntervalUnit),
    };
}
exports.dlmLifecyclePolicyPolicyDetailsScheduleShareRuleToTerraform = dlmLifecyclePolicyPolicyDetailsScheduleShareRuleToTerraform;
function dlmLifecyclePolicyPolicyDetailsScheduleShareRuleToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        target_accounts: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.targetAccounts),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        unshare_interval: {
            value: cdktf.numberToHclTerraform(struct.unshareInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        unshare_interval_unit: {
            value: cdktf.stringToHclTerraform(struct.unshareIntervalUnit),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dlmLifecyclePolicyPolicyDetailsScheduleShareRuleToHclTerraform = dlmLifecyclePolicyPolicyDetailsScheduleShareRuleToHclTerraform;
class DlmLifecyclePolicyPolicyDetailsScheduleShareRuleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._targetAccounts !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetAccounts = this._targetAccounts;
        }
        if (this._unshareInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.unshareInterval = this._unshareInterval;
        }
        if (this._unshareIntervalUnit !== undefined) {
            hasAnyValues = true;
            internalValueResult.unshareIntervalUnit = this._unshareIntervalUnit;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._targetAccounts = undefined;
            this._unshareInterval = undefined;
            this._unshareIntervalUnit = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._targetAccounts = value.targetAccounts;
            this._unshareInterval = value.unshareInterval;
            this._unshareIntervalUnit = value.unshareIntervalUnit;
        }
    }
    get targetAccounts() {
        return cdktf.Fn.tolist(this.getListAttribute('target_accounts'));
    }
    set targetAccounts(value) {
        this._targetAccounts = value;
    }
    // Temporarily expose input value. Use with caution.
    get targetAccountsInput() {
        return this._targetAccounts;
    }
    get unshareInterval() {
        return this.getNumberAttribute('unshare_interval');
    }
    set unshareInterval(value) {
        this._unshareInterval = value;
    }
    resetUnshareInterval() {
        this._unshareInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get unshareIntervalInput() {
        return this._unshareInterval;
    }
    get unshareIntervalUnit() {
        return this.getStringAttribute('unshare_interval_unit');
    }
    set unshareIntervalUnit(value) {
        this._unshareIntervalUnit = value;
    }
    resetUnshareIntervalUnit() {
        this._unshareIntervalUnit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get unshareIntervalUnitInput() {
        return this._unshareIntervalUnit;
    }
}
exports.DlmLifecyclePolicyPolicyDetailsScheduleShareRuleOutputReference = DlmLifecyclePolicyPolicyDetailsScheduleShareRuleOutputReference;
_s = JSII_RTTI_SYMBOL_1;
DlmLifecyclePolicyPolicyDetailsScheduleShareRuleOutputReference[_s] = { fqn: "@cdktf/provider-aws.dlmLifecyclePolicy.DlmLifecyclePolicyPolicyDetailsScheduleShareRuleOutputReference", version: "19.15.0" };
function dlmLifecyclePolicyPolicyDetailsScheduleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        copy_tags: cdktf.booleanToTerraform(struct.copyTags),
        name: cdktf.stringToTerraform(struct.name),
        tags_to_add: cdktf.hashMapper(cdktf.stringToTerraform)(struct.tagsToAdd),
        variable_tags: cdktf.hashMapper(cdktf.stringToTerraform)(struct.variableTags),
        create_rule: dlmLifecyclePolicyPolicyDetailsScheduleCreateRuleToTerraform(struct.createRule),
        cross_region_copy_rule: cdktf.listMapper(dlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleToTerraform, true)(struct.crossRegionCopyRule),
        deprecate_rule: dlmLifecyclePolicyPolicyDetailsScheduleDeprecateRuleToTerraform(struct.deprecateRule),
        fast_restore_rule: dlmLifecyclePolicyPolicyDetailsScheduleFastRestoreRuleToTerraform(struct.fastRestoreRule),
        retain_rule: dlmLifecyclePolicyPolicyDetailsScheduleRetainRuleToTerraform(struct.retainRule),
        share_rule: dlmLifecyclePolicyPolicyDetailsScheduleShareRuleToTerraform(struct.shareRule),
    };
}
exports.dlmLifecyclePolicyPolicyDetailsScheduleToTerraform = dlmLifecyclePolicyPolicyDetailsScheduleToTerraform;
function dlmLifecyclePolicyPolicyDetailsScheduleToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        copy_tags: {
            value: cdktf.booleanToHclTerraform(struct.copyTags),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        tags_to_add: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.tagsToAdd),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        variable_tags: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.variableTags),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        create_rule: {
            value: dlmLifecyclePolicyPolicyDetailsScheduleCreateRuleToHclTerraform(struct.createRule),
            isBlock: true,
            type: "list",
            storageClassType: "DlmLifecyclePolicyPolicyDetailsScheduleCreateRuleList",
        },
        cross_region_copy_rule: {
            value: cdktf.listMapperHcl(dlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleToHclTerraform, true)(struct.crossRegionCopyRule),
            isBlock: true,
            type: "set",
            storageClassType: "DlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleList",
        },
        deprecate_rule: {
            value: dlmLifecyclePolicyPolicyDetailsScheduleDeprecateRuleToHclTerraform(struct.deprecateRule),
            isBlock: true,
            type: "list",
            storageClassType: "DlmLifecyclePolicyPolicyDetailsScheduleDeprecateRuleList",
        },
        fast_restore_rule: {
            value: dlmLifecyclePolicyPolicyDetailsScheduleFastRestoreRuleToHclTerraform(struct.fastRestoreRule),
            isBlock: true,
            type: "list",
            storageClassType: "DlmLifecyclePolicyPolicyDetailsScheduleFastRestoreRuleList",
        },
        retain_rule: {
            value: dlmLifecyclePolicyPolicyDetailsScheduleRetainRuleToHclTerraform(struct.retainRule),
            isBlock: true,
            type: "list",
            storageClassType: "DlmLifecyclePolicyPolicyDetailsScheduleRetainRuleList",
        },
        share_rule: {
            value: dlmLifecyclePolicyPolicyDetailsScheduleShareRuleToHclTerraform(struct.shareRule),
            isBlock: true,
            type: "list",
            storageClassType: "DlmLifecyclePolicyPolicyDetailsScheduleShareRuleList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dlmLifecyclePolicyPolicyDetailsScheduleToHclTerraform = dlmLifecyclePolicyPolicyDetailsScheduleToHclTerraform;
class DlmLifecyclePolicyPolicyDetailsScheduleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // create_rule - computed: false, optional: false, required: true
        this._createRule = new DlmLifecyclePolicyPolicyDetailsScheduleCreateRuleOutputReference(this, "create_rule");
        // cross_region_copy_rule - computed: false, optional: true, required: false
        this._crossRegionCopyRule = new DlmLifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleList(this, "cross_region_copy_rule", true);
        // deprecate_rule - computed: false, optional: true, required: false
        this._deprecateRule = new DlmLifecyclePolicyPolicyDetailsScheduleDeprecateRuleOutputReference(this, "deprecate_rule");
        // fast_restore_rule - computed: false, optional: true, required: false
        this._fastRestoreRule = new DlmLifecyclePolicyPolicyDetailsScheduleFastRestoreRuleOutputReference(this, "fast_restore_rule");
        // retain_rule - computed: false, optional: false, required: true
        this._retainRule = new DlmLifecyclePolicyPolicyDetailsScheduleRetainRuleOutputReference(this, "retain_rule");
        // share_rule - computed: false, optional: true, required: false
        this._shareRule = new DlmLifecyclePolicyPolicyDetailsScheduleShareRuleOutputReference(this, "share_rule");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._copyTags !== undefined) {
            hasAnyValues = true;
            internalValueResult.copyTags = this._copyTags;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._tagsToAdd !== undefined) {
            hasAnyValues = true;
            internalValueResult.tagsToAdd = this._tagsToAdd;
        }
        if (this._variableTags !== undefined) {
            hasAnyValues = true;
            internalValueResult.variableTags = this._variableTags;
        }
        if (this._createRule?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.createRule = this._createRule?.internalValue;
        }
        if (this._crossRegionCopyRule?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.crossRegionCopyRule = this._crossRegionCopyRule?.internalValue;
        }
        if (this._deprecateRule?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.deprecateRule = this._deprecateRule?.internalValue;
        }
        if (this._fastRestoreRule?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.fastRestoreRule = this._fastRestoreRule?.internalValue;
        }
        if (this._retainRule?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.retainRule = this._retainRule?.internalValue;
        }
        if (this._shareRule?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.shareRule = this._shareRule?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._copyTags = undefined;
            this._name = undefined;
            this._tagsToAdd = undefined;
            this._variableTags = undefined;
            this._createRule.internalValue = undefined;
            this._crossRegionCopyRule.internalValue = undefined;
            this._deprecateRule.internalValue = undefined;
            this._fastRestoreRule.internalValue = undefined;
            this._retainRule.internalValue = undefined;
            this._shareRule.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._copyTags = value.copyTags;
            this._name = value.name;
            this._tagsToAdd = value.tagsToAdd;
            this._variableTags = value.variableTags;
            this._createRule.internalValue = value.createRule;
            this._crossRegionCopyRule.internalValue = value.crossRegionCopyRule;
            this._deprecateRule.internalValue = value.deprecateRule;
            this._fastRestoreRule.internalValue = value.fastRestoreRule;
            this._retainRule.internalValue = value.retainRule;
            this._shareRule.internalValue = value.shareRule;
        }
    }
    get copyTags() {
        return this.getBooleanAttribute('copy_tags');
    }
    set copyTags(value) {
        this._copyTags = value;
    }
    resetCopyTags() {
        this._copyTags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get copyTagsInput() {
        return this._copyTags;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get tagsToAdd() {
        return this.getStringMapAttribute('tags_to_add');
    }
    set tagsToAdd(value) {
        this._tagsToAdd = value;
    }
    resetTagsToAdd() {
        this._tagsToAdd = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsToAddInput() {
        return this._tagsToAdd;
    }
    get variableTags() {
        return this.getStringMapAttribute('variable_tags');
    }
    set variableTags(value) {
        this._variableTags = value;
    }
    resetVariableTags() {
        this._variableTags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get variableTagsInput() {
        return this._variableTags;
    }
    get createRule() {
        return this._createRule;
    }
    putCreateRule(value) {
        this._createRule.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get createRuleInput() {
        return this._createRule.internalValue;
    }
    get crossRegionCopyRule() {
        return this._crossRegionCopyRule;
    }
    putCrossRegionCopyRule(value) {
        this._crossRegionCopyRule.internalValue = value;
    }
    resetCrossRegionCopyRule() {
        this._crossRegionCopyRule.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get crossRegionCopyRuleInput() {
        return this._crossRegionCopyRule.internalValue;
    }
    get deprecateRule() {
        return this._deprecateRule;
    }
    putDeprecateRule(value) {
        this._deprecateRule.internalValue = value;
    }
    resetDeprecateRule() {
        this._deprecateRule.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deprecateRuleInput() {
        return this._deprecateRule.internalValue;
    }
    get fastRestoreRule() {
        return this._fastRestoreRule;
    }
    putFastRestoreRule(value) {
        this._fastRestoreRule.internalValue = value;
    }
    resetFastRestoreRule() {
        this._fastRestoreRule.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fastRestoreRuleInput() {
        return this._fastRestoreRule.internalValue;
    }
    get retainRule() {
        return this._retainRule;
    }
    putRetainRule(value) {
        this._retainRule.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get retainRuleInput() {
        return this._retainRule.internalValue;
    }
    get shareRule() {
        return this._shareRule;
    }
    putShareRule(value) {
        this._shareRule.internalValue = value;
    }
    resetShareRule() {
        this._shareRule.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get shareRuleInput() {
        return this._shareRule.internalValue;
    }
}
exports.DlmLifecyclePolicyPolicyDetailsScheduleOutputReference = DlmLifecyclePolicyPolicyDetailsScheduleOutputReference;
_t = JSII_RTTI_SYMBOL_1;
DlmLifecyclePolicyPolicyDetailsScheduleOutputReference[_t] = { fqn: "@cdktf/provider-aws.dlmLifecyclePolicy.DlmLifecyclePolicyPolicyDetailsScheduleOutputReference", version: "19.15.0" };
class DlmLifecyclePolicyPolicyDetailsScheduleList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DlmLifecyclePolicyPolicyDetailsScheduleOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DlmLifecyclePolicyPolicyDetailsScheduleList = DlmLifecyclePolicyPolicyDetailsScheduleList;
_u = JSII_RTTI_SYMBOL_1;
DlmLifecyclePolicyPolicyDetailsScheduleList[_u] = { fqn: "@cdktf/provider-aws.dlmLifecyclePolicy.DlmLifecyclePolicyPolicyDetailsScheduleList", version: "19.15.0" };
function dlmLifecyclePolicyPolicyDetailsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        policy_type: cdktf.stringToTerraform(struct.policyType),
        resource_locations: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.resourceLocations),
        resource_types: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.resourceTypes),
        target_tags: cdktf.hashMapper(cdktf.stringToTerraform)(struct.targetTags),
        action: dlmLifecyclePolicyPolicyDetailsActionToTerraform(struct.action),
        event_source: dlmLifecyclePolicyPolicyDetailsEventSourceToTerraform(struct.eventSource),
        parameters: dlmLifecyclePolicyPolicyDetailsParametersToTerraform(struct.parameters),
        schedule: cdktf.listMapper(dlmLifecyclePolicyPolicyDetailsScheduleToTerraform, true)(struct.schedule),
    };
}
exports.dlmLifecyclePolicyPolicyDetailsToTerraform = dlmLifecyclePolicyPolicyDetailsToTerraform;
function dlmLifecyclePolicyPolicyDetailsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        policy_type: {
            value: cdktf.stringToHclTerraform(struct.policyType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        resource_locations: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.resourceLocations),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        resource_types: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.resourceTypes),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        target_tags: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.targetTags),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        action: {
            value: dlmLifecyclePolicyPolicyDetailsActionToHclTerraform(struct.action),
            isBlock: true,
            type: "list",
            storageClassType: "DlmLifecyclePolicyPolicyDetailsActionList",
        },
        event_source: {
            value: dlmLifecyclePolicyPolicyDetailsEventSourceToHclTerraform(struct.eventSource),
            isBlock: true,
            type: "list",
            storageClassType: "DlmLifecyclePolicyPolicyDetailsEventSourceList",
        },
        parameters: {
            value: dlmLifecyclePolicyPolicyDetailsParametersToHclTerraform(struct.parameters),
            isBlock: true,
            type: "list",
            storageClassType: "DlmLifecyclePolicyPolicyDetailsParametersList",
        },
        schedule: {
            value: cdktf.listMapperHcl(dlmLifecyclePolicyPolicyDetailsScheduleToHclTerraform, true)(struct.schedule),
            isBlock: true,
            type: "list",
            storageClassType: "DlmLifecyclePolicyPolicyDetailsScheduleList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dlmLifecyclePolicyPolicyDetailsToHclTerraform = dlmLifecyclePolicyPolicyDetailsToHclTerraform;
class DlmLifecyclePolicyPolicyDetailsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // action - computed: false, optional: true, required: false
        this._action = new DlmLifecyclePolicyPolicyDetailsActionOutputReference(this, "action");
        // event_source - computed: false, optional: true, required: false
        this._eventSource = new DlmLifecyclePolicyPolicyDetailsEventSourceOutputReference(this, "event_source");
        // parameters - computed: false, optional: true, required: false
        this._parameters = new DlmLifecyclePolicyPolicyDetailsParametersOutputReference(this, "parameters");
        // schedule - computed: false, optional: true, required: false
        this._schedule = new DlmLifecyclePolicyPolicyDetailsScheduleList(this, "schedule", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._policyType !== undefined) {
            hasAnyValues = true;
            internalValueResult.policyType = this._policyType;
        }
        if (this._resourceLocations !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourceLocations = this._resourceLocations;
        }
        if (this._resourceTypes !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourceTypes = this._resourceTypes;
        }
        if (this._targetTags !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetTags = this._targetTags;
        }
        if (this._action?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.action = this._action?.internalValue;
        }
        if (this._eventSource?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.eventSource = this._eventSource?.internalValue;
        }
        if (this._parameters?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.parameters = this._parameters?.internalValue;
        }
        if (this._schedule?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.schedule = this._schedule?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._policyType = undefined;
            this._resourceLocations = undefined;
            this._resourceTypes = undefined;
            this._targetTags = undefined;
            this._action.internalValue = undefined;
            this._eventSource.internalValue = undefined;
            this._parameters.internalValue = undefined;
            this._schedule.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._policyType = value.policyType;
            this._resourceLocations = value.resourceLocations;
            this._resourceTypes = value.resourceTypes;
            this._targetTags = value.targetTags;
            this._action.internalValue = value.action;
            this._eventSource.internalValue = value.eventSource;
            this._parameters.internalValue = value.parameters;
            this._schedule.internalValue = value.schedule;
        }
    }
    get policyType() {
        return this.getStringAttribute('policy_type');
    }
    set policyType(value) {
        this._policyType = value;
    }
    resetPolicyType() {
        this._policyType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get policyTypeInput() {
        return this._policyType;
    }
    get resourceLocations() {
        return this.getListAttribute('resource_locations');
    }
    set resourceLocations(value) {
        this._resourceLocations = value;
    }
    resetResourceLocations() {
        this._resourceLocations = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceLocationsInput() {
        return this._resourceLocations;
    }
    get resourceTypes() {
        return this.getListAttribute('resource_types');
    }
    set resourceTypes(value) {
        this._resourceTypes = value;
    }
    resetResourceTypes() {
        this._resourceTypes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceTypesInput() {
        return this._resourceTypes;
    }
    get targetTags() {
        return this.getStringMapAttribute('target_tags');
    }
    set targetTags(value) {
        this._targetTags = value;
    }
    resetTargetTags() {
        this._targetTags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetTagsInput() {
        return this._targetTags;
    }
    get action() {
        return this._action;
    }
    putAction(value) {
        this._action.internalValue = value;
    }
    resetAction() {
        this._action.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get actionInput() {
        return this._action.internalValue;
    }
    get eventSource() {
        return this._eventSource;
    }
    putEventSource(value) {
        this._eventSource.internalValue = value;
    }
    resetEventSource() {
        this._eventSource.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get eventSourceInput() {
        return this._eventSource.internalValue;
    }
    get parameters() {
        return this._parameters;
    }
    putParameters(value) {
        this._parameters.internalValue = value;
    }
    resetParameters() {
        this._parameters.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parametersInput() {
        return this._parameters.internalValue;
    }
    get schedule() {
        return this._schedule;
    }
    putSchedule(value) {
        this._schedule.internalValue = value;
    }
    resetSchedule() {
        this._schedule.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scheduleInput() {
        return this._schedule.internalValue;
    }
}
exports.DlmLifecyclePolicyPolicyDetailsOutputReference = DlmLifecyclePolicyPolicyDetailsOutputReference;
_v = JSII_RTTI_SYMBOL_1;
DlmLifecyclePolicyPolicyDetailsOutputReference[_v] = { fqn: "@cdktf/provider-aws.dlmLifecyclePolicy.DlmLifecyclePolicyPolicyDetailsOutputReference", version: "19.15.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/dlm_lifecycle_policy aws_dlm_lifecycle_policy}
*/
class DlmLifecyclePolicy extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a DlmLifecyclePolicy resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the DlmLifecyclePolicy to import
    * @param importFromId The id of the existing DlmLifecyclePolicy that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/dlm_lifecycle_policy#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the DlmLifecyclePolicy to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_dlm_lifecycle_policy", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/dlm_lifecycle_policy aws_dlm_lifecycle_policy} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DlmLifecyclePolicyConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_dlm_lifecycle_policy',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // policy_details - computed: false, optional: false, required: true
        this._policyDetails = new DlmLifecyclePolicyPolicyDetailsOutputReference(this, "policy_details");
        this._description = config.description;
        this._executionRoleArn = config.executionRoleArn;
        this._id = config.id;
        this._state = config.state;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._policyDetails.internalValue = config.policyDetails;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get executionRoleArn() {
        return this.getStringAttribute('execution_role_arn');
    }
    set executionRoleArn(value) {
        this._executionRoleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get executionRoleArnInput() {
        return this._executionRoleArn;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get state() {
        return this.getStringAttribute('state');
    }
    set state(value) {
        this._state = value;
    }
    resetState() {
        this._state = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stateInput() {
        return this._state;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get policyDetails() {
        return this._policyDetails;
    }
    putPolicyDetails(value) {
        this._policyDetails.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get policyDetailsInput() {
        return this._policyDetails.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            execution_role_arn: cdktf.stringToTerraform(this._executionRoleArn),
            id: cdktf.stringToTerraform(this._id),
            state: cdktf.stringToTerraform(this._state),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            policy_details: dlmLifecyclePolicyPolicyDetailsToTerraform(this._policyDetails.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            description: {
                value: cdktf.stringToHclTerraform(this._description),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            execution_role_arn: {
                value: cdktf.stringToHclTerraform(this._executionRoleArn),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            state: {
                value: cdktf.stringToHclTerraform(this._state),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            tags: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tags),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            tags_all: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tagsAll),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            policy_details: {
                value: dlmLifecyclePolicyPolicyDetailsToHclTerraform(this._policyDetails.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DlmLifecyclePolicyPolicyDetailsList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.DlmLifecyclePolicy = DlmLifecyclePolicy;
_w = JSII_RTTI_SYMBOL_1;
DlmLifecyclePolicy[_w] = { fqn: "@cdktf/provider-aws.dlmLifecyclePolicy.DlmLifecyclePolicy", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
DlmLifecyclePolicy.tfResourceType = "aws_dlm_lifecycle_policy";
//# sourceMappingURL=data:application/json;base64,