"use strict";
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkspacesDirectory = exports.WorkspacesDirectoryWorkspaceCreationPropertiesOutputReference = exports.workspacesDirectoryWorkspaceCreationPropertiesToHclTerraform = exports.workspacesDirectoryWorkspaceCreationPropertiesToTerraform = exports.WorkspacesDirectoryWorkspaceAccessPropertiesOutputReference = exports.workspacesDirectoryWorkspaceAccessPropertiesToHclTerraform = exports.workspacesDirectoryWorkspaceAccessPropertiesToTerraform = exports.WorkspacesDirectorySelfServicePermissionsOutputReference = exports.workspacesDirectorySelfServicePermissionsToHclTerraform = exports.workspacesDirectorySelfServicePermissionsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function workspacesDirectorySelfServicePermissionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        change_compute_type: cdktf.booleanToTerraform(struct.changeComputeType),
        increase_volume_size: cdktf.booleanToTerraform(struct.increaseVolumeSize),
        rebuild_workspace: cdktf.booleanToTerraform(struct.rebuildWorkspace),
        restart_workspace: cdktf.booleanToTerraform(struct.restartWorkspace),
        switch_running_mode: cdktf.booleanToTerraform(struct.switchRunningMode),
    };
}
exports.workspacesDirectorySelfServicePermissionsToTerraform = workspacesDirectorySelfServicePermissionsToTerraform;
function workspacesDirectorySelfServicePermissionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        change_compute_type: {
            value: cdktf.booleanToHclTerraform(struct.changeComputeType),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        increase_volume_size: {
            value: cdktf.booleanToHclTerraform(struct.increaseVolumeSize),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        rebuild_workspace: {
            value: cdktf.booleanToHclTerraform(struct.rebuildWorkspace),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        restart_workspace: {
            value: cdktf.booleanToHclTerraform(struct.restartWorkspace),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        switch_running_mode: {
            value: cdktf.booleanToHclTerraform(struct.switchRunningMode),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.workspacesDirectorySelfServicePermissionsToHclTerraform = workspacesDirectorySelfServicePermissionsToHclTerraform;
class WorkspacesDirectorySelfServicePermissionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._changeComputeType !== undefined) {
            hasAnyValues = true;
            internalValueResult.changeComputeType = this._changeComputeType;
        }
        if (this._increaseVolumeSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.increaseVolumeSize = this._increaseVolumeSize;
        }
        if (this._rebuildWorkspace !== undefined) {
            hasAnyValues = true;
            internalValueResult.rebuildWorkspace = this._rebuildWorkspace;
        }
        if (this._restartWorkspace !== undefined) {
            hasAnyValues = true;
            internalValueResult.restartWorkspace = this._restartWorkspace;
        }
        if (this._switchRunningMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.switchRunningMode = this._switchRunningMode;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._changeComputeType = undefined;
            this._increaseVolumeSize = undefined;
            this._rebuildWorkspace = undefined;
            this._restartWorkspace = undefined;
            this._switchRunningMode = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._changeComputeType = value.changeComputeType;
            this._increaseVolumeSize = value.increaseVolumeSize;
            this._rebuildWorkspace = value.rebuildWorkspace;
            this._restartWorkspace = value.restartWorkspace;
            this._switchRunningMode = value.switchRunningMode;
        }
    }
    get changeComputeType() {
        return this.getBooleanAttribute('change_compute_type');
    }
    set changeComputeType(value) {
        this._changeComputeType = value;
    }
    resetChangeComputeType() {
        this._changeComputeType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get changeComputeTypeInput() {
        return this._changeComputeType;
    }
    get increaseVolumeSize() {
        return this.getBooleanAttribute('increase_volume_size');
    }
    set increaseVolumeSize(value) {
        this._increaseVolumeSize = value;
    }
    resetIncreaseVolumeSize() {
        this._increaseVolumeSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get increaseVolumeSizeInput() {
        return this._increaseVolumeSize;
    }
    get rebuildWorkspace() {
        return this.getBooleanAttribute('rebuild_workspace');
    }
    set rebuildWorkspace(value) {
        this._rebuildWorkspace = value;
    }
    resetRebuildWorkspace() {
        this._rebuildWorkspace = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rebuildWorkspaceInput() {
        return this._rebuildWorkspace;
    }
    get restartWorkspace() {
        return this.getBooleanAttribute('restart_workspace');
    }
    set restartWorkspace(value) {
        this._restartWorkspace = value;
    }
    resetRestartWorkspace() {
        this._restartWorkspace = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get restartWorkspaceInput() {
        return this._restartWorkspace;
    }
    get switchRunningMode() {
        return this.getBooleanAttribute('switch_running_mode');
    }
    set switchRunningMode(value) {
        this._switchRunningMode = value;
    }
    resetSwitchRunningMode() {
        this._switchRunningMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get switchRunningModeInput() {
        return this._switchRunningMode;
    }
}
exports.WorkspacesDirectorySelfServicePermissionsOutputReference = WorkspacesDirectorySelfServicePermissionsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
WorkspacesDirectorySelfServicePermissionsOutputReference[_a] = { fqn: "@cdktf/provider-aws.workspacesDirectory.WorkspacesDirectorySelfServicePermissionsOutputReference", version: "19.15.0" };
function workspacesDirectoryWorkspaceAccessPropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        device_type_android: cdktf.stringToTerraform(struct.deviceTypeAndroid),
        device_type_chromeos: cdktf.stringToTerraform(struct.deviceTypeChromeos),
        device_type_ios: cdktf.stringToTerraform(struct.deviceTypeIos),
        device_type_linux: cdktf.stringToTerraform(struct.deviceTypeLinux),
        device_type_osx: cdktf.stringToTerraform(struct.deviceTypeOsx),
        device_type_web: cdktf.stringToTerraform(struct.deviceTypeWeb),
        device_type_windows: cdktf.stringToTerraform(struct.deviceTypeWindows),
        device_type_zeroclient: cdktf.stringToTerraform(struct.deviceTypeZeroclient),
    };
}
exports.workspacesDirectoryWorkspaceAccessPropertiesToTerraform = workspacesDirectoryWorkspaceAccessPropertiesToTerraform;
function workspacesDirectoryWorkspaceAccessPropertiesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        device_type_android: {
            value: cdktf.stringToHclTerraform(struct.deviceTypeAndroid),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        device_type_chromeos: {
            value: cdktf.stringToHclTerraform(struct.deviceTypeChromeos),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        device_type_ios: {
            value: cdktf.stringToHclTerraform(struct.deviceTypeIos),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        device_type_linux: {
            value: cdktf.stringToHclTerraform(struct.deviceTypeLinux),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        device_type_osx: {
            value: cdktf.stringToHclTerraform(struct.deviceTypeOsx),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        device_type_web: {
            value: cdktf.stringToHclTerraform(struct.deviceTypeWeb),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        device_type_windows: {
            value: cdktf.stringToHclTerraform(struct.deviceTypeWindows),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        device_type_zeroclient: {
            value: cdktf.stringToHclTerraform(struct.deviceTypeZeroclient),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.workspacesDirectoryWorkspaceAccessPropertiesToHclTerraform = workspacesDirectoryWorkspaceAccessPropertiesToHclTerraform;
class WorkspacesDirectoryWorkspaceAccessPropertiesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._deviceTypeAndroid !== undefined) {
            hasAnyValues = true;
            internalValueResult.deviceTypeAndroid = this._deviceTypeAndroid;
        }
        if (this._deviceTypeChromeos !== undefined) {
            hasAnyValues = true;
            internalValueResult.deviceTypeChromeos = this._deviceTypeChromeos;
        }
        if (this._deviceTypeIos !== undefined) {
            hasAnyValues = true;
            internalValueResult.deviceTypeIos = this._deviceTypeIos;
        }
        if (this._deviceTypeLinux !== undefined) {
            hasAnyValues = true;
            internalValueResult.deviceTypeLinux = this._deviceTypeLinux;
        }
        if (this._deviceTypeOsx !== undefined) {
            hasAnyValues = true;
            internalValueResult.deviceTypeOsx = this._deviceTypeOsx;
        }
        if (this._deviceTypeWeb !== undefined) {
            hasAnyValues = true;
            internalValueResult.deviceTypeWeb = this._deviceTypeWeb;
        }
        if (this._deviceTypeWindows !== undefined) {
            hasAnyValues = true;
            internalValueResult.deviceTypeWindows = this._deviceTypeWindows;
        }
        if (this._deviceTypeZeroclient !== undefined) {
            hasAnyValues = true;
            internalValueResult.deviceTypeZeroclient = this._deviceTypeZeroclient;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._deviceTypeAndroid = undefined;
            this._deviceTypeChromeos = undefined;
            this._deviceTypeIos = undefined;
            this._deviceTypeLinux = undefined;
            this._deviceTypeOsx = undefined;
            this._deviceTypeWeb = undefined;
            this._deviceTypeWindows = undefined;
            this._deviceTypeZeroclient = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._deviceTypeAndroid = value.deviceTypeAndroid;
            this._deviceTypeChromeos = value.deviceTypeChromeos;
            this._deviceTypeIos = value.deviceTypeIos;
            this._deviceTypeLinux = value.deviceTypeLinux;
            this._deviceTypeOsx = value.deviceTypeOsx;
            this._deviceTypeWeb = value.deviceTypeWeb;
            this._deviceTypeWindows = value.deviceTypeWindows;
            this._deviceTypeZeroclient = value.deviceTypeZeroclient;
        }
    }
    get deviceTypeAndroid() {
        return this.getStringAttribute('device_type_android');
    }
    set deviceTypeAndroid(value) {
        this._deviceTypeAndroid = value;
    }
    resetDeviceTypeAndroid() {
        this._deviceTypeAndroid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deviceTypeAndroidInput() {
        return this._deviceTypeAndroid;
    }
    get deviceTypeChromeos() {
        return this.getStringAttribute('device_type_chromeos');
    }
    set deviceTypeChromeos(value) {
        this._deviceTypeChromeos = value;
    }
    resetDeviceTypeChromeos() {
        this._deviceTypeChromeos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deviceTypeChromeosInput() {
        return this._deviceTypeChromeos;
    }
    get deviceTypeIos() {
        return this.getStringAttribute('device_type_ios');
    }
    set deviceTypeIos(value) {
        this._deviceTypeIos = value;
    }
    resetDeviceTypeIos() {
        this._deviceTypeIos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deviceTypeIosInput() {
        return this._deviceTypeIos;
    }
    get deviceTypeLinux() {
        return this.getStringAttribute('device_type_linux');
    }
    set deviceTypeLinux(value) {
        this._deviceTypeLinux = value;
    }
    resetDeviceTypeLinux() {
        this._deviceTypeLinux = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deviceTypeLinuxInput() {
        return this._deviceTypeLinux;
    }
    get deviceTypeOsx() {
        return this.getStringAttribute('device_type_osx');
    }
    set deviceTypeOsx(value) {
        this._deviceTypeOsx = value;
    }
    resetDeviceTypeOsx() {
        this._deviceTypeOsx = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deviceTypeOsxInput() {
        return this._deviceTypeOsx;
    }
    get deviceTypeWeb() {
        return this.getStringAttribute('device_type_web');
    }
    set deviceTypeWeb(value) {
        this._deviceTypeWeb = value;
    }
    resetDeviceTypeWeb() {
        this._deviceTypeWeb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deviceTypeWebInput() {
        return this._deviceTypeWeb;
    }
    get deviceTypeWindows() {
        return this.getStringAttribute('device_type_windows');
    }
    set deviceTypeWindows(value) {
        this._deviceTypeWindows = value;
    }
    resetDeviceTypeWindows() {
        this._deviceTypeWindows = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deviceTypeWindowsInput() {
        return this._deviceTypeWindows;
    }
    get deviceTypeZeroclient() {
        return this.getStringAttribute('device_type_zeroclient');
    }
    set deviceTypeZeroclient(value) {
        this._deviceTypeZeroclient = value;
    }
    resetDeviceTypeZeroclient() {
        this._deviceTypeZeroclient = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deviceTypeZeroclientInput() {
        return this._deviceTypeZeroclient;
    }
}
exports.WorkspacesDirectoryWorkspaceAccessPropertiesOutputReference = WorkspacesDirectoryWorkspaceAccessPropertiesOutputReference;
_b = JSII_RTTI_SYMBOL_1;
WorkspacesDirectoryWorkspaceAccessPropertiesOutputReference[_b] = { fqn: "@cdktf/provider-aws.workspacesDirectory.WorkspacesDirectoryWorkspaceAccessPropertiesOutputReference", version: "19.15.0" };
function workspacesDirectoryWorkspaceCreationPropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        custom_security_group_id: cdktf.stringToTerraform(struct.customSecurityGroupId),
        default_ou: cdktf.stringToTerraform(struct.defaultOu),
        enable_internet_access: cdktf.booleanToTerraform(struct.enableInternetAccess),
        enable_maintenance_mode: cdktf.booleanToTerraform(struct.enableMaintenanceMode),
        user_enabled_as_local_administrator: cdktf.booleanToTerraform(struct.userEnabledAsLocalAdministrator),
    };
}
exports.workspacesDirectoryWorkspaceCreationPropertiesToTerraform = workspacesDirectoryWorkspaceCreationPropertiesToTerraform;
function workspacesDirectoryWorkspaceCreationPropertiesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        custom_security_group_id: {
            value: cdktf.stringToHclTerraform(struct.customSecurityGroupId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        default_ou: {
            value: cdktf.stringToHclTerraform(struct.defaultOu),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        enable_internet_access: {
            value: cdktf.booleanToHclTerraform(struct.enableInternetAccess),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        enable_maintenance_mode: {
            value: cdktf.booleanToHclTerraform(struct.enableMaintenanceMode),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        user_enabled_as_local_administrator: {
            value: cdktf.booleanToHclTerraform(struct.userEnabledAsLocalAdministrator),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.workspacesDirectoryWorkspaceCreationPropertiesToHclTerraform = workspacesDirectoryWorkspaceCreationPropertiesToHclTerraform;
class WorkspacesDirectoryWorkspaceCreationPropertiesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._customSecurityGroupId !== undefined) {
            hasAnyValues = true;
            internalValueResult.customSecurityGroupId = this._customSecurityGroupId;
        }
        if (this._defaultOu !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultOu = this._defaultOu;
        }
        if (this._enableInternetAccess !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableInternetAccess = this._enableInternetAccess;
        }
        if (this._enableMaintenanceMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableMaintenanceMode = this._enableMaintenanceMode;
        }
        if (this._userEnabledAsLocalAdministrator !== undefined) {
            hasAnyValues = true;
            internalValueResult.userEnabledAsLocalAdministrator = this._userEnabledAsLocalAdministrator;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._customSecurityGroupId = undefined;
            this._defaultOu = undefined;
            this._enableInternetAccess = undefined;
            this._enableMaintenanceMode = undefined;
            this._userEnabledAsLocalAdministrator = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._customSecurityGroupId = value.customSecurityGroupId;
            this._defaultOu = value.defaultOu;
            this._enableInternetAccess = value.enableInternetAccess;
            this._enableMaintenanceMode = value.enableMaintenanceMode;
            this._userEnabledAsLocalAdministrator = value.userEnabledAsLocalAdministrator;
        }
    }
    get customSecurityGroupId() {
        return this.getStringAttribute('custom_security_group_id');
    }
    set customSecurityGroupId(value) {
        this._customSecurityGroupId = value;
    }
    resetCustomSecurityGroupId() {
        this._customSecurityGroupId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customSecurityGroupIdInput() {
        return this._customSecurityGroupId;
    }
    get defaultOu() {
        return this.getStringAttribute('default_ou');
    }
    set defaultOu(value) {
        this._defaultOu = value;
    }
    resetDefaultOu() {
        this._defaultOu = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultOuInput() {
        return this._defaultOu;
    }
    get enableInternetAccess() {
        return this.getBooleanAttribute('enable_internet_access');
    }
    set enableInternetAccess(value) {
        this._enableInternetAccess = value;
    }
    resetEnableInternetAccess() {
        this._enableInternetAccess = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableInternetAccessInput() {
        return this._enableInternetAccess;
    }
    get enableMaintenanceMode() {
        return this.getBooleanAttribute('enable_maintenance_mode');
    }
    set enableMaintenanceMode(value) {
        this._enableMaintenanceMode = value;
    }
    resetEnableMaintenanceMode() {
        this._enableMaintenanceMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableMaintenanceModeInput() {
        return this._enableMaintenanceMode;
    }
    get userEnabledAsLocalAdministrator() {
        return this.getBooleanAttribute('user_enabled_as_local_administrator');
    }
    set userEnabledAsLocalAdministrator(value) {
        this._userEnabledAsLocalAdministrator = value;
    }
    resetUserEnabledAsLocalAdministrator() {
        this._userEnabledAsLocalAdministrator = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userEnabledAsLocalAdministratorInput() {
        return this._userEnabledAsLocalAdministrator;
    }
}
exports.WorkspacesDirectoryWorkspaceCreationPropertiesOutputReference = WorkspacesDirectoryWorkspaceCreationPropertiesOutputReference;
_c = JSII_RTTI_SYMBOL_1;
WorkspacesDirectoryWorkspaceCreationPropertiesOutputReference[_c] = { fqn: "@cdktf/provider-aws.workspacesDirectory.WorkspacesDirectoryWorkspaceCreationPropertiesOutputReference", version: "19.15.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/workspaces_directory aws_workspaces_directory}
*/
class WorkspacesDirectory extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a WorkspacesDirectory resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the WorkspacesDirectory to import
    * @param importFromId The id of the existing WorkspacesDirectory that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/workspaces_directory#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the WorkspacesDirectory to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_workspaces_directory", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/workspaces_directory aws_workspaces_directory} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options WorkspacesDirectoryConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_workspaces_directory',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // self_service_permissions - computed: false, optional: true, required: false
        this._selfServicePermissions = new WorkspacesDirectorySelfServicePermissionsOutputReference(this, "self_service_permissions");
        // workspace_access_properties - computed: false, optional: true, required: false
        this._workspaceAccessProperties = new WorkspacesDirectoryWorkspaceAccessPropertiesOutputReference(this, "workspace_access_properties");
        // workspace_creation_properties - computed: false, optional: true, required: false
        this._workspaceCreationProperties = new WorkspacesDirectoryWorkspaceCreationPropertiesOutputReference(this, "workspace_creation_properties");
        this._directoryId = config.directoryId;
        this._id = config.id;
        this._ipGroupIds = config.ipGroupIds;
        this._subnetIds = config.subnetIds;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._selfServicePermissions.internalValue = config.selfServicePermissions;
        this._workspaceAccessProperties.internalValue = config.workspaceAccessProperties;
        this._workspaceCreationProperties.internalValue = config.workspaceCreationProperties;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // alias - computed: true, optional: false, required: false
    get alias() {
        return this.getStringAttribute('alias');
    }
    // customer_user_name - computed: true, optional: false, required: false
    get customerUserName() {
        return this.getStringAttribute('customer_user_name');
    }
    get directoryId() {
        return this.getStringAttribute('directory_id');
    }
    set directoryId(value) {
        this._directoryId = value;
    }
    // Temporarily expose input value. Use with caution.
    get directoryIdInput() {
        return this._directoryId;
    }
    // directory_name - computed: true, optional: false, required: false
    get directoryName() {
        return this.getStringAttribute('directory_name');
    }
    // directory_type - computed: true, optional: false, required: false
    get directoryType() {
        return this.getStringAttribute('directory_type');
    }
    // dns_ip_addresses - computed: true, optional: false, required: false
    get dnsIpAddresses() {
        return cdktf.Fn.tolist(this.getListAttribute('dns_ip_addresses'));
    }
    // iam_role_id - computed: true, optional: false, required: false
    get iamRoleId() {
        return this.getStringAttribute('iam_role_id');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get ipGroupIds() {
        return cdktf.Fn.tolist(this.getListAttribute('ip_group_ids'));
    }
    set ipGroupIds(value) {
        this._ipGroupIds = value;
    }
    resetIpGroupIds() {
        this._ipGroupIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipGroupIdsInput() {
        return this._ipGroupIds;
    }
    // registration_code - computed: true, optional: false, required: false
    get registrationCode() {
        return this.getStringAttribute('registration_code');
    }
    get subnetIds() {
        return cdktf.Fn.tolist(this.getListAttribute('subnet_ids'));
    }
    set subnetIds(value) {
        this._subnetIds = value;
    }
    resetSubnetIds() {
        this._subnetIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subnetIdsInput() {
        return this._subnetIds;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    // workspace_security_group_id - computed: true, optional: false, required: false
    get workspaceSecurityGroupId() {
        return this.getStringAttribute('workspace_security_group_id');
    }
    get selfServicePermissions() {
        return this._selfServicePermissions;
    }
    putSelfServicePermissions(value) {
        this._selfServicePermissions.internalValue = value;
    }
    resetSelfServicePermissions() {
        this._selfServicePermissions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get selfServicePermissionsInput() {
        return this._selfServicePermissions.internalValue;
    }
    get workspaceAccessProperties() {
        return this._workspaceAccessProperties;
    }
    putWorkspaceAccessProperties(value) {
        this._workspaceAccessProperties.internalValue = value;
    }
    resetWorkspaceAccessProperties() {
        this._workspaceAccessProperties.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get workspaceAccessPropertiesInput() {
        return this._workspaceAccessProperties.internalValue;
    }
    get workspaceCreationProperties() {
        return this._workspaceCreationProperties;
    }
    putWorkspaceCreationProperties(value) {
        this._workspaceCreationProperties.internalValue = value;
    }
    resetWorkspaceCreationProperties() {
        this._workspaceCreationProperties.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get workspaceCreationPropertiesInput() {
        return this._workspaceCreationProperties.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            directory_id: cdktf.stringToTerraform(this._directoryId),
            id: cdktf.stringToTerraform(this._id),
            ip_group_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(this._ipGroupIds),
            subnet_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(this._subnetIds),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            self_service_permissions: workspacesDirectorySelfServicePermissionsToTerraform(this._selfServicePermissions.internalValue),
            workspace_access_properties: workspacesDirectoryWorkspaceAccessPropertiesToTerraform(this._workspaceAccessProperties.internalValue),
            workspace_creation_properties: workspacesDirectoryWorkspaceCreationPropertiesToTerraform(this._workspaceCreationProperties.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            directory_id: {
                value: cdktf.stringToHclTerraform(this._directoryId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            ip_group_ids: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._ipGroupIds),
                isBlock: false,
                type: "set",
                storageClassType: "stringList",
            },
            subnet_ids: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._subnetIds),
                isBlock: false,
                type: "set",
                storageClassType: "stringList",
            },
            tags: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tags),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            tags_all: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tagsAll),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            self_service_permissions: {
                value: workspacesDirectorySelfServicePermissionsToHclTerraform(this._selfServicePermissions.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "WorkspacesDirectorySelfServicePermissionsList",
            },
            workspace_access_properties: {
                value: workspacesDirectoryWorkspaceAccessPropertiesToHclTerraform(this._workspaceAccessProperties.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "WorkspacesDirectoryWorkspaceAccessPropertiesList",
            },
            workspace_creation_properties: {
                value: workspacesDirectoryWorkspaceCreationPropertiesToHclTerraform(this._workspaceCreationProperties.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "WorkspacesDirectoryWorkspaceCreationPropertiesList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.WorkspacesDirectory = WorkspacesDirectory;
_d = JSII_RTTI_SYMBOL_1;
WorkspacesDirectory[_d] = { fqn: "@cdktf/provider-aws.workspacesDirectory.WorkspacesDirectory", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
WorkspacesDirectory.tfResourceType = "aws_workspaces_directory";
//# sourceMappingURL=data:application/json;base64,