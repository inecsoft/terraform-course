"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppsyncGraphqlApi = exports.AppsyncGraphqlApiUserPoolConfigOutputReference = exports.appsyncGraphqlApiUserPoolConfigToHclTerraform = exports.appsyncGraphqlApiUserPoolConfigToTerraform = exports.AppsyncGraphqlApiOpenidConnectConfigOutputReference = exports.appsyncGraphqlApiOpenidConnectConfigToHclTerraform = exports.appsyncGraphqlApiOpenidConnectConfigToTerraform = exports.AppsyncGraphqlApiLogConfigOutputReference = exports.appsyncGraphqlApiLogConfigToHclTerraform = exports.appsyncGraphqlApiLogConfigToTerraform = exports.AppsyncGraphqlApiLambdaAuthorizerConfigOutputReference = exports.appsyncGraphqlApiLambdaAuthorizerConfigToHclTerraform = exports.appsyncGraphqlApiLambdaAuthorizerConfigToTerraform = exports.AppsyncGraphqlApiAdditionalAuthenticationProviderList = exports.AppsyncGraphqlApiAdditionalAuthenticationProviderOutputReference = exports.appsyncGraphqlApiAdditionalAuthenticationProviderToHclTerraform = exports.appsyncGraphqlApiAdditionalAuthenticationProviderToTerraform = exports.AppsyncGraphqlApiAdditionalAuthenticationProviderUserPoolConfigOutputReference = exports.appsyncGraphqlApiAdditionalAuthenticationProviderUserPoolConfigToHclTerraform = exports.appsyncGraphqlApiAdditionalAuthenticationProviderUserPoolConfigToTerraform = exports.AppsyncGraphqlApiAdditionalAuthenticationProviderOpenidConnectConfigOutputReference = exports.appsyncGraphqlApiAdditionalAuthenticationProviderOpenidConnectConfigToHclTerraform = exports.appsyncGraphqlApiAdditionalAuthenticationProviderOpenidConnectConfigToTerraform = exports.AppsyncGraphqlApiAdditionalAuthenticationProviderLambdaAuthorizerConfigOutputReference = exports.appsyncGraphqlApiAdditionalAuthenticationProviderLambdaAuthorizerConfigToHclTerraform = exports.appsyncGraphqlApiAdditionalAuthenticationProviderLambdaAuthorizerConfigToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function appsyncGraphqlApiAdditionalAuthenticationProviderLambdaAuthorizerConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        authorizer_result_ttl_in_seconds: cdktf.numberToTerraform(struct.authorizerResultTtlInSeconds),
        authorizer_uri: cdktf.stringToTerraform(struct.authorizerUri),
        identity_validation_expression: cdktf.stringToTerraform(struct.identityValidationExpression),
    };
}
exports.appsyncGraphqlApiAdditionalAuthenticationProviderLambdaAuthorizerConfigToTerraform = appsyncGraphqlApiAdditionalAuthenticationProviderLambdaAuthorizerConfigToTerraform;
function appsyncGraphqlApiAdditionalAuthenticationProviderLambdaAuthorizerConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        authorizer_result_ttl_in_seconds: {
            value: cdktf.numberToHclTerraform(struct.authorizerResultTtlInSeconds),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        authorizer_uri: {
            value: cdktf.stringToHclTerraform(struct.authorizerUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        identity_validation_expression: {
            value: cdktf.stringToHclTerraform(struct.identityValidationExpression),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appsyncGraphqlApiAdditionalAuthenticationProviderLambdaAuthorizerConfigToHclTerraform = appsyncGraphqlApiAdditionalAuthenticationProviderLambdaAuthorizerConfigToHclTerraform;
class AppsyncGraphqlApiAdditionalAuthenticationProviderLambdaAuthorizerConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._authorizerResultTtlInSeconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.authorizerResultTtlInSeconds = this._authorizerResultTtlInSeconds;
        }
        if (this._authorizerUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.authorizerUri = this._authorizerUri;
        }
        if (this._identityValidationExpression !== undefined) {
            hasAnyValues = true;
            internalValueResult.identityValidationExpression = this._identityValidationExpression;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._authorizerResultTtlInSeconds = undefined;
            this._authorizerUri = undefined;
            this._identityValidationExpression = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._authorizerResultTtlInSeconds = value.authorizerResultTtlInSeconds;
            this._authorizerUri = value.authorizerUri;
            this._identityValidationExpression = value.identityValidationExpression;
        }
    }
    get authorizerResultTtlInSeconds() {
        return this.getNumberAttribute('authorizer_result_ttl_in_seconds');
    }
    set authorizerResultTtlInSeconds(value) {
        this._authorizerResultTtlInSeconds = value;
    }
    resetAuthorizerResultTtlInSeconds() {
        this._authorizerResultTtlInSeconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authorizerResultTtlInSecondsInput() {
        return this._authorizerResultTtlInSeconds;
    }
    get authorizerUri() {
        return this.getStringAttribute('authorizer_uri');
    }
    set authorizerUri(value) {
        this._authorizerUri = value;
    }
    // Temporarily expose input value. Use with caution.
    get authorizerUriInput() {
        return this._authorizerUri;
    }
    get identityValidationExpression() {
        return this.getStringAttribute('identity_validation_expression');
    }
    set identityValidationExpression(value) {
        this._identityValidationExpression = value;
    }
    resetIdentityValidationExpression() {
        this._identityValidationExpression = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get identityValidationExpressionInput() {
        return this._identityValidationExpression;
    }
}
exports.AppsyncGraphqlApiAdditionalAuthenticationProviderLambdaAuthorizerConfigOutputReference = AppsyncGraphqlApiAdditionalAuthenticationProviderLambdaAuthorizerConfigOutputReference;
_a = JSII_RTTI_SYMBOL_1;
AppsyncGraphqlApiAdditionalAuthenticationProviderLambdaAuthorizerConfigOutputReference[_a] = { fqn: "@cdktf/provider-aws.appsyncGraphqlApi.AppsyncGraphqlApiAdditionalAuthenticationProviderLambdaAuthorizerConfigOutputReference", version: "19.15.0" };
function appsyncGraphqlApiAdditionalAuthenticationProviderOpenidConnectConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auth_ttl: cdktf.numberToTerraform(struct.authTtl),
        client_id: cdktf.stringToTerraform(struct.clientId),
        iat_ttl: cdktf.numberToTerraform(struct.iatTtl),
        issuer: cdktf.stringToTerraform(struct.issuer),
    };
}
exports.appsyncGraphqlApiAdditionalAuthenticationProviderOpenidConnectConfigToTerraform = appsyncGraphqlApiAdditionalAuthenticationProviderOpenidConnectConfigToTerraform;
function appsyncGraphqlApiAdditionalAuthenticationProviderOpenidConnectConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        auth_ttl: {
            value: cdktf.numberToHclTerraform(struct.authTtl),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        client_id: {
            value: cdktf.stringToHclTerraform(struct.clientId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        iat_ttl: {
            value: cdktf.numberToHclTerraform(struct.iatTtl),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        issuer: {
            value: cdktf.stringToHclTerraform(struct.issuer),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appsyncGraphqlApiAdditionalAuthenticationProviderOpenidConnectConfigToHclTerraform = appsyncGraphqlApiAdditionalAuthenticationProviderOpenidConnectConfigToHclTerraform;
class AppsyncGraphqlApiAdditionalAuthenticationProviderOpenidConnectConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._authTtl !== undefined) {
            hasAnyValues = true;
            internalValueResult.authTtl = this._authTtl;
        }
        if (this._clientId !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientId = this._clientId;
        }
        if (this._iatTtl !== undefined) {
            hasAnyValues = true;
            internalValueResult.iatTtl = this._iatTtl;
        }
        if (this._issuer !== undefined) {
            hasAnyValues = true;
            internalValueResult.issuer = this._issuer;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._authTtl = undefined;
            this._clientId = undefined;
            this._iatTtl = undefined;
            this._issuer = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._authTtl = value.authTtl;
            this._clientId = value.clientId;
            this._iatTtl = value.iatTtl;
            this._issuer = value.issuer;
        }
    }
    get authTtl() {
        return this.getNumberAttribute('auth_ttl');
    }
    set authTtl(value) {
        this._authTtl = value;
    }
    resetAuthTtl() {
        this._authTtl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authTtlInput() {
        return this._authTtl;
    }
    get clientId() {
        return this.getStringAttribute('client_id');
    }
    set clientId(value) {
        this._clientId = value;
    }
    resetClientId() {
        this._clientId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientIdInput() {
        return this._clientId;
    }
    get iatTtl() {
        return this.getNumberAttribute('iat_ttl');
    }
    set iatTtl(value) {
        this._iatTtl = value;
    }
    resetIatTtl() {
        this._iatTtl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get iatTtlInput() {
        return this._iatTtl;
    }
    get issuer() {
        return this.getStringAttribute('issuer');
    }
    set issuer(value) {
        this._issuer = value;
    }
    // Temporarily expose input value. Use with caution.
    get issuerInput() {
        return this._issuer;
    }
}
exports.AppsyncGraphqlApiAdditionalAuthenticationProviderOpenidConnectConfigOutputReference = AppsyncGraphqlApiAdditionalAuthenticationProviderOpenidConnectConfigOutputReference;
_b = JSII_RTTI_SYMBOL_1;
AppsyncGraphqlApiAdditionalAuthenticationProviderOpenidConnectConfigOutputReference[_b] = { fqn: "@cdktf/provider-aws.appsyncGraphqlApi.AppsyncGraphqlApiAdditionalAuthenticationProviderOpenidConnectConfigOutputReference", version: "19.15.0" };
function appsyncGraphqlApiAdditionalAuthenticationProviderUserPoolConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        app_id_client_regex: cdktf.stringToTerraform(struct.appIdClientRegex),
        aws_region: cdktf.stringToTerraform(struct.awsRegion),
        user_pool_id: cdktf.stringToTerraform(struct.userPoolId),
    };
}
exports.appsyncGraphqlApiAdditionalAuthenticationProviderUserPoolConfigToTerraform = appsyncGraphqlApiAdditionalAuthenticationProviderUserPoolConfigToTerraform;
function appsyncGraphqlApiAdditionalAuthenticationProviderUserPoolConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        app_id_client_regex: {
            value: cdktf.stringToHclTerraform(struct.appIdClientRegex),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        aws_region: {
            value: cdktf.stringToHclTerraform(struct.awsRegion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        user_pool_id: {
            value: cdktf.stringToHclTerraform(struct.userPoolId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appsyncGraphqlApiAdditionalAuthenticationProviderUserPoolConfigToHclTerraform = appsyncGraphqlApiAdditionalAuthenticationProviderUserPoolConfigToHclTerraform;
class AppsyncGraphqlApiAdditionalAuthenticationProviderUserPoolConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._appIdClientRegex !== undefined) {
            hasAnyValues = true;
            internalValueResult.appIdClientRegex = this._appIdClientRegex;
        }
        if (this._awsRegion !== undefined) {
            hasAnyValues = true;
            internalValueResult.awsRegion = this._awsRegion;
        }
        if (this._userPoolId !== undefined) {
            hasAnyValues = true;
            internalValueResult.userPoolId = this._userPoolId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._appIdClientRegex = undefined;
            this._awsRegion = undefined;
            this._userPoolId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._appIdClientRegex = value.appIdClientRegex;
            this._awsRegion = value.awsRegion;
            this._userPoolId = value.userPoolId;
        }
    }
    get appIdClientRegex() {
        return this.getStringAttribute('app_id_client_regex');
    }
    set appIdClientRegex(value) {
        this._appIdClientRegex = value;
    }
    resetAppIdClientRegex() {
        this._appIdClientRegex = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get appIdClientRegexInput() {
        return this._appIdClientRegex;
    }
    get awsRegion() {
        return this.getStringAttribute('aws_region');
    }
    set awsRegion(value) {
        this._awsRegion = value;
    }
    resetAwsRegion() {
        this._awsRegion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get awsRegionInput() {
        return this._awsRegion;
    }
    get userPoolId() {
        return this.getStringAttribute('user_pool_id');
    }
    set userPoolId(value) {
        this._userPoolId = value;
    }
    // Temporarily expose input value. Use with caution.
    get userPoolIdInput() {
        return this._userPoolId;
    }
}
exports.AppsyncGraphqlApiAdditionalAuthenticationProviderUserPoolConfigOutputReference = AppsyncGraphqlApiAdditionalAuthenticationProviderUserPoolConfigOutputReference;
_c = JSII_RTTI_SYMBOL_1;
AppsyncGraphqlApiAdditionalAuthenticationProviderUserPoolConfigOutputReference[_c] = { fqn: "@cdktf/provider-aws.appsyncGraphqlApi.AppsyncGraphqlApiAdditionalAuthenticationProviderUserPoolConfigOutputReference", version: "19.15.0" };
function appsyncGraphqlApiAdditionalAuthenticationProviderToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        authentication_type: cdktf.stringToTerraform(struct.authenticationType),
        lambda_authorizer_config: appsyncGraphqlApiAdditionalAuthenticationProviderLambdaAuthorizerConfigToTerraform(struct.lambdaAuthorizerConfig),
        openid_connect_config: appsyncGraphqlApiAdditionalAuthenticationProviderOpenidConnectConfigToTerraform(struct.openidConnectConfig),
        user_pool_config: appsyncGraphqlApiAdditionalAuthenticationProviderUserPoolConfigToTerraform(struct.userPoolConfig),
    };
}
exports.appsyncGraphqlApiAdditionalAuthenticationProviderToTerraform = appsyncGraphqlApiAdditionalAuthenticationProviderToTerraform;
function appsyncGraphqlApiAdditionalAuthenticationProviderToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        authentication_type: {
            value: cdktf.stringToHclTerraform(struct.authenticationType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        lambda_authorizer_config: {
            value: appsyncGraphqlApiAdditionalAuthenticationProviderLambdaAuthorizerConfigToHclTerraform(struct.lambdaAuthorizerConfig),
            isBlock: true,
            type: "list",
            storageClassType: "AppsyncGraphqlApiAdditionalAuthenticationProviderLambdaAuthorizerConfigList",
        },
        openid_connect_config: {
            value: appsyncGraphqlApiAdditionalAuthenticationProviderOpenidConnectConfigToHclTerraform(struct.openidConnectConfig),
            isBlock: true,
            type: "list",
            storageClassType: "AppsyncGraphqlApiAdditionalAuthenticationProviderOpenidConnectConfigList",
        },
        user_pool_config: {
            value: appsyncGraphqlApiAdditionalAuthenticationProviderUserPoolConfigToHclTerraform(struct.userPoolConfig),
            isBlock: true,
            type: "list",
            storageClassType: "AppsyncGraphqlApiAdditionalAuthenticationProviderUserPoolConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appsyncGraphqlApiAdditionalAuthenticationProviderToHclTerraform = appsyncGraphqlApiAdditionalAuthenticationProviderToHclTerraform;
class AppsyncGraphqlApiAdditionalAuthenticationProviderOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // lambda_authorizer_config - computed: false, optional: true, required: false
        this._lambdaAuthorizerConfig = new AppsyncGraphqlApiAdditionalAuthenticationProviderLambdaAuthorizerConfigOutputReference(this, "lambda_authorizer_config");
        // openid_connect_config - computed: false, optional: true, required: false
        this._openidConnectConfig = new AppsyncGraphqlApiAdditionalAuthenticationProviderOpenidConnectConfigOutputReference(this, "openid_connect_config");
        // user_pool_config - computed: false, optional: true, required: false
        this._userPoolConfig = new AppsyncGraphqlApiAdditionalAuthenticationProviderUserPoolConfigOutputReference(this, "user_pool_config");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._authenticationType !== undefined) {
            hasAnyValues = true;
            internalValueResult.authenticationType = this._authenticationType;
        }
        if (this._lambdaAuthorizerConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.lambdaAuthorizerConfig = this._lambdaAuthorizerConfig?.internalValue;
        }
        if (this._openidConnectConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.openidConnectConfig = this._openidConnectConfig?.internalValue;
        }
        if (this._userPoolConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.userPoolConfig = this._userPoolConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._authenticationType = undefined;
            this._lambdaAuthorizerConfig.internalValue = undefined;
            this._openidConnectConfig.internalValue = undefined;
            this._userPoolConfig.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._authenticationType = value.authenticationType;
            this._lambdaAuthorizerConfig.internalValue = value.lambdaAuthorizerConfig;
            this._openidConnectConfig.internalValue = value.openidConnectConfig;
            this._userPoolConfig.internalValue = value.userPoolConfig;
        }
    }
    get authenticationType() {
        return this.getStringAttribute('authentication_type');
    }
    set authenticationType(value) {
        this._authenticationType = value;
    }
    // Temporarily expose input value. Use with caution.
    get authenticationTypeInput() {
        return this._authenticationType;
    }
    get lambdaAuthorizerConfig() {
        return this._lambdaAuthorizerConfig;
    }
    putLambdaAuthorizerConfig(value) {
        this._lambdaAuthorizerConfig.internalValue = value;
    }
    resetLambdaAuthorizerConfig() {
        this._lambdaAuthorizerConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lambdaAuthorizerConfigInput() {
        return this._lambdaAuthorizerConfig.internalValue;
    }
    get openidConnectConfig() {
        return this._openidConnectConfig;
    }
    putOpenidConnectConfig(value) {
        this._openidConnectConfig.internalValue = value;
    }
    resetOpenidConnectConfig() {
        this._openidConnectConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get openidConnectConfigInput() {
        return this._openidConnectConfig.internalValue;
    }
    get userPoolConfig() {
        return this._userPoolConfig;
    }
    putUserPoolConfig(value) {
        this._userPoolConfig.internalValue = value;
    }
    resetUserPoolConfig() {
        this._userPoolConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userPoolConfigInput() {
        return this._userPoolConfig.internalValue;
    }
}
exports.AppsyncGraphqlApiAdditionalAuthenticationProviderOutputReference = AppsyncGraphqlApiAdditionalAuthenticationProviderOutputReference;
_d = JSII_RTTI_SYMBOL_1;
AppsyncGraphqlApiAdditionalAuthenticationProviderOutputReference[_d] = { fqn: "@cdktf/provider-aws.appsyncGraphqlApi.AppsyncGraphqlApiAdditionalAuthenticationProviderOutputReference", version: "19.15.0" };
class AppsyncGraphqlApiAdditionalAuthenticationProviderList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AppsyncGraphqlApiAdditionalAuthenticationProviderOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AppsyncGraphqlApiAdditionalAuthenticationProviderList = AppsyncGraphqlApiAdditionalAuthenticationProviderList;
_e = JSII_RTTI_SYMBOL_1;
AppsyncGraphqlApiAdditionalAuthenticationProviderList[_e] = { fqn: "@cdktf/provider-aws.appsyncGraphqlApi.AppsyncGraphqlApiAdditionalAuthenticationProviderList", version: "19.15.0" };
function appsyncGraphqlApiLambdaAuthorizerConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        authorizer_result_ttl_in_seconds: cdktf.numberToTerraform(struct.authorizerResultTtlInSeconds),
        authorizer_uri: cdktf.stringToTerraform(struct.authorizerUri),
        identity_validation_expression: cdktf.stringToTerraform(struct.identityValidationExpression),
    };
}
exports.appsyncGraphqlApiLambdaAuthorizerConfigToTerraform = appsyncGraphqlApiLambdaAuthorizerConfigToTerraform;
function appsyncGraphqlApiLambdaAuthorizerConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        authorizer_result_ttl_in_seconds: {
            value: cdktf.numberToHclTerraform(struct.authorizerResultTtlInSeconds),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        authorizer_uri: {
            value: cdktf.stringToHclTerraform(struct.authorizerUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        identity_validation_expression: {
            value: cdktf.stringToHclTerraform(struct.identityValidationExpression),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appsyncGraphqlApiLambdaAuthorizerConfigToHclTerraform = appsyncGraphqlApiLambdaAuthorizerConfigToHclTerraform;
class AppsyncGraphqlApiLambdaAuthorizerConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._authorizerResultTtlInSeconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.authorizerResultTtlInSeconds = this._authorizerResultTtlInSeconds;
        }
        if (this._authorizerUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.authorizerUri = this._authorizerUri;
        }
        if (this._identityValidationExpression !== undefined) {
            hasAnyValues = true;
            internalValueResult.identityValidationExpression = this._identityValidationExpression;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._authorizerResultTtlInSeconds = undefined;
            this._authorizerUri = undefined;
            this._identityValidationExpression = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._authorizerResultTtlInSeconds = value.authorizerResultTtlInSeconds;
            this._authorizerUri = value.authorizerUri;
            this._identityValidationExpression = value.identityValidationExpression;
        }
    }
    get authorizerResultTtlInSeconds() {
        return this.getNumberAttribute('authorizer_result_ttl_in_seconds');
    }
    set authorizerResultTtlInSeconds(value) {
        this._authorizerResultTtlInSeconds = value;
    }
    resetAuthorizerResultTtlInSeconds() {
        this._authorizerResultTtlInSeconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authorizerResultTtlInSecondsInput() {
        return this._authorizerResultTtlInSeconds;
    }
    get authorizerUri() {
        return this.getStringAttribute('authorizer_uri');
    }
    set authorizerUri(value) {
        this._authorizerUri = value;
    }
    // Temporarily expose input value. Use with caution.
    get authorizerUriInput() {
        return this._authorizerUri;
    }
    get identityValidationExpression() {
        return this.getStringAttribute('identity_validation_expression');
    }
    set identityValidationExpression(value) {
        this._identityValidationExpression = value;
    }
    resetIdentityValidationExpression() {
        this._identityValidationExpression = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get identityValidationExpressionInput() {
        return this._identityValidationExpression;
    }
}
exports.AppsyncGraphqlApiLambdaAuthorizerConfigOutputReference = AppsyncGraphqlApiLambdaAuthorizerConfigOutputReference;
_f = JSII_RTTI_SYMBOL_1;
AppsyncGraphqlApiLambdaAuthorizerConfigOutputReference[_f] = { fqn: "@cdktf/provider-aws.appsyncGraphqlApi.AppsyncGraphqlApiLambdaAuthorizerConfigOutputReference", version: "19.15.0" };
function appsyncGraphqlApiLogConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cloudwatch_logs_role_arn: cdktf.stringToTerraform(struct.cloudwatchLogsRoleArn),
        exclude_verbose_content: cdktf.booleanToTerraform(struct.excludeVerboseContent),
        field_log_level: cdktf.stringToTerraform(struct.fieldLogLevel),
    };
}
exports.appsyncGraphqlApiLogConfigToTerraform = appsyncGraphqlApiLogConfigToTerraform;
function appsyncGraphqlApiLogConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cloudwatch_logs_role_arn: {
            value: cdktf.stringToHclTerraform(struct.cloudwatchLogsRoleArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        exclude_verbose_content: {
            value: cdktf.booleanToHclTerraform(struct.excludeVerboseContent),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        field_log_level: {
            value: cdktf.stringToHclTerraform(struct.fieldLogLevel),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appsyncGraphqlApiLogConfigToHclTerraform = appsyncGraphqlApiLogConfigToHclTerraform;
class AppsyncGraphqlApiLogConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cloudwatchLogsRoleArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudwatchLogsRoleArn = this._cloudwatchLogsRoleArn;
        }
        if (this._excludeVerboseContent !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludeVerboseContent = this._excludeVerboseContent;
        }
        if (this._fieldLogLevel !== undefined) {
            hasAnyValues = true;
            internalValueResult.fieldLogLevel = this._fieldLogLevel;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cloudwatchLogsRoleArn = undefined;
            this._excludeVerboseContent = undefined;
            this._fieldLogLevel = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cloudwatchLogsRoleArn = value.cloudwatchLogsRoleArn;
            this._excludeVerboseContent = value.excludeVerboseContent;
            this._fieldLogLevel = value.fieldLogLevel;
        }
    }
    get cloudwatchLogsRoleArn() {
        return this.getStringAttribute('cloudwatch_logs_role_arn');
    }
    set cloudwatchLogsRoleArn(value) {
        this._cloudwatchLogsRoleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get cloudwatchLogsRoleArnInput() {
        return this._cloudwatchLogsRoleArn;
    }
    get excludeVerboseContent() {
        return this.getBooleanAttribute('exclude_verbose_content');
    }
    set excludeVerboseContent(value) {
        this._excludeVerboseContent = value;
    }
    resetExcludeVerboseContent() {
        this._excludeVerboseContent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludeVerboseContentInput() {
        return this._excludeVerboseContent;
    }
    get fieldLogLevel() {
        return this.getStringAttribute('field_log_level');
    }
    set fieldLogLevel(value) {
        this._fieldLogLevel = value;
    }
    // Temporarily expose input value. Use with caution.
    get fieldLogLevelInput() {
        return this._fieldLogLevel;
    }
}
exports.AppsyncGraphqlApiLogConfigOutputReference = AppsyncGraphqlApiLogConfigOutputReference;
_g = JSII_RTTI_SYMBOL_1;
AppsyncGraphqlApiLogConfigOutputReference[_g] = { fqn: "@cdktf/provider-aws.appsyncGraphqlApi.AppsyncGraphqlApiLogConfigOutputReference", version: "19.15.0" };
function appsyncGraphqlApiOpenidConnectConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auth_ttl: cdktf.numberToTerraform(struct.authTtl),
        client_id: cdktf.stringToTerraform(struct.clientId),
        iat_ttl: cdktf.numberToTerraform(struct.iatTtl),
        issuer: cdktf.stringToTerraform(struct.issuer),
    };
}
exports.appsyncGraphqlApiOpenidConnectConfigToTerraform = appsyncGraphqlApiOpenidConnectConfigToTerraform;
function appsyncGraphqlApiOpenidConnectConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        auth_ttl: {
            value: cdktf.numberToHclTerraform(struct.authTtl),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        client_id: {
            value: cdktf.stringToHclTerraform(struct.clientId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        iat_ttl: {
            value: cdktf.numberToHclTerraform(struct.iatTtl),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        issuer: {
            value: cdktf.stringToHclTerraform(struct.issuer),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appsyncGraphqlApiOpenidConnectConfigToHclTerraform = appsyncGraphqlApiOpenidConnectConfigToHclTerraform;
class AppsyncGraphqlApiOpenidConnectConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._authTtl !== undefined) {
            hasAnyValues = true;
            internalValueResult.authTtl = this._authTtl;
        }
        if (this._clientId !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientId = this._clientId;
        }
        if (this._iatTtl !== undefined) {
            hasAnyValues = true;
            internalValueResult.iatTtl = this._iatTtl;
        }
        if (this._issuer !== undefined) {
            hasAnyValues = true;
            internalValueResult.issuer = this._issuer;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._authTtl = undefined;
            this._clientId = undefined;
            this._iatTtl = undefined;
            this._issuer = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._authTtl = value.authTtl;
            this._clientId = value.clientId;
            this._iatTtl = value.iatTtl;
            this._issuer = value.issuer;
        }
    }
    get authTtl() {
        return this.getNumberAttribute('auth_ttl');
    }
    set authTtl(value) {
        this._authTtl = value;
    }
    resetAuthTtl() {
        this._authTtl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authTtlInput() {
        return this._authTtl;
    }
    get clientId() {
        return this.getStringAttribute('client_id');
    }
    set clientId(value) {
        this._clientId = value;
    }
    resetClientId() {
        this._clientId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientIdInput() {
        return this._clientId;
    }
    get iatTtl() {
        return this.getNumberAttribute('iat_ttl');
    }
    set iatTtl(value) {
        this._iatTtl = value;
    }
    resetIatTtl() {
        this._iatTtl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get iatTtlInput() {
        return this._iatTtl;
    }
    get issuer() {
        return this.getStringAttribute('issuer');
    }
    set issuer(value) {
        this._issuer = value;
    }
    // Temporarily expose input value. Use with caution.
    get issuerInput() {
        return this._issuer;
    }
}
exports.AppsyncGraphqlApiOpenidConnectConfigOutputReference = AppsyncGraphqlApiOpenidConnectConfigOutputReference;
_h = JSII_RTTI_SYMBOL_1;
AppsyncGraphqlApiOpenidConnectConfigOutputReference[_h] = { fqn: "@cdktf/provider-aws.appsyncGraphqlApi.AppsyncGraphqlApiOpenidConnectConfigOutputReference", version: "19.15.0" };
function appsyncGraphqlApiUserPoolConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        app_id_client_regex: cdktf.stringToTerraform(struct.appIdClientRegex),
        aws_region: cdktf.stringToTerraform(struct.awsRegion),
        default_action: cdktf.stringToTerraform(struct.defaultAction),
        user_pool_id: cdktf.stringToTerraform(struct.userPoolId),
    };
}
exports.appsyncGraphqlApiUserPoolConfigToTerraform = appsyncGraphqlApiUserPoolConfigToTerraform;
function appsyncGraphqlApiUserPoolConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        app_id_client_regex: {
            value: cdktf.stringToHclTerraform(struct.appIdClientRegex),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        aws_region: {
            value: cdktf.stringToHclTerraform(struct.awsRegion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        default_action: {
            value: cdktf.stringToHclTerraform(struct.defaultAction),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        user_pool_id: {
            value: cdktf.stringToHclTerraform(struct.userPoolId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appsyncGraphqlApiUserPoolConfigToHclTerraform = appsyncGraphqlApiUserPoolConfigToHclTerraform;
class AppsyncGraphqlApiUserPoolConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._appIdClientRegex !== undefined) {
            hasAnyValues = true;
            internalValueResult.appIdClientRegex = this._appIdClientRegex;
        }
        if (this._awsRegion !== undefined) {
            hasAnyValues = true;
            internalValueResult.awsRegion = this._awsRegion;
        }
        if (this._defaultAction !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultAction = this._defaultAction;
        }
        if (this._userPoolId !== undefined) {
            hasAnyValues = true;
            internalValueResult.userPoolId = this._userPoolId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._appIdClientRegex = undefined;
            this._awsRegion = undefined;
            this._defaultAction = undefined;
            this._userPoolId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._appIdClientRegex = value.appIdClientRegex;
            this._awsRegion = value.awsRegion;
            this._defaultAction = value.defaultAction;
            this._userPoolId = value.userPoolId;
        }
    }
    get appIdClientRegex() {
        return this.getStringAttribute('app_id_client_regex');
    }
    set appIdClientRegex(value) {
        this._appIdClientRegex = value;
    }
    resetAppIdClientRegex() {
        this._appIdClientRegex = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get appIdClientRegexInput() {
        return this._appIdClientRegex;
    }
    get awsRegion() {
        return this.getStringAttribute('aws_region');
    }
    set awsRegion(value) {
        this._awsRegion = value;
    }
    resetAwsRegion() {
        this._awsRegion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get awsRegionInput() {
        return this._awsRegion;
    }
    get defaultAction() {
        return this.getStringAttribute('default_action');
    }
    set defaultAction(value) {
        this._defaultAction = value;
    }
    // Temporarily expose input value. Use with caution.
    get defaultActionInput() {
        return this._defaultAction;
    }
    get userPoolId() {
        return this.getStringAttribute('user_pool_id');
    }
    set userPoolId(value) {
        this._userPoolId = value;
    }
    // Temporarily expose input value. Use with caution.
    get userPoolIdInput() {
        return this._userPoolId;
    }
}
exports.AppsyncGraphqlApiUserPoolConfigOutputReference = AppsyncGraphqlApiUserPoolConfigOutputReference;
_j = JSII_RTTI_SYMBOL_1;
AppsyncGraphqlApiUserPoolConfigOutputReference[_j] = { fqn: "@cdktf/provider-aws.appsyncGraphqlApi.AppsyncGraphqlApiUserPoolConfigOutputReference", version: "19.15.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/appsync_graphql_api aws_appsync_graphql_api}
*/
class AppsyncGraphqlApi extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a AppsyncGraphqlApi resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the AppsyncGraphqlApi to import
    * @param importFromId The id of the existing AppsyncGraphqlApi that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/appsync_graphql_api#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the AppsyncGraphqlApi to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_appsync_graphql_api", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/appsync_graphql_api aws_appsync_graphql_api} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options AppsyncGraphqlApiConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_appsync_graphql_api',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // uris - computed: true, optional: false, required: false
        this._uris = new cdktf.StringMap(this, "uris");
        // additional_authentication_provider - computed: false, optional: true, required: false
        this._additionalAuthenticationProvider = new AppsyncGraphqlApiAdditionalAuthenticationProviderList(this, "additional_authentication_provider", false);
        // lambda_authorizer_config - computed: false, optional: true, required: false
        this._lambdaAuthorizerConfig = new AppsyncGraphqlApiLambdaAuthorizerConfigOutputReference(this, "lambda_authorizer_config");
        // log_config - computed: false, optional: true, required: false
        this._logConfig = new AppsyncGraphqlApiLogConfigOutputReference(this, "log_config");
        // openid_connect_config - computed: false, optional: true, required: false
        this._openidConnectConfig = new AppsyncGraphqlApiOpenidConnectConfigOutputReference(this, "openid_connect_config");
        // user_pool_config - computed: false, optional: true, required: false
        this._userPoolConfig = new AppsyncGraphqlApiUserPoolConfigOutputReference(this, "user_pool_config");
        this._authenticationType = config.authenticationType;
        this._id = config.id;
        this._introspectionConfig = config.introspectionConfig;
        this._name = config.name;
        this._queryDepthLimit = config.queryDepthLimit;
        this._resolverCountLimit = config.resolverCountLimit;
        this._schema = config.schema;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._visibility = config.visibility;
        this._xrayEnabled = config.xrayEnabled;
        this._additionalAuthenticationProvider.internalValue = config.additionalAuthenticationProvider;
        this._lambdaAuthorizerConfig.internalValue = config.lambdaAuthorizerConfig;
        this._logConfig.internalValue = config.logConfig;
        this._openidConnectConfig.internalValue = config.openidConnectConfig;
        this._userPoolConfig.internalValue = config.userPoolConfig;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get authenticationType() {
        return this.getStringAttribute('authentication_type');
    }
    set authenticationType(value) {
        this._authenticationType = value;
    }
    // Temporarily expose input value. Use with caution.
    get authenticationTypeInput() {
        return this._authenticationType;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get introspectionConfig() {
        return this.getStringAttribute('introspection_config');
    }
    set introspectionConfig(value) {
        this._introspectionConfig = value;
    }
    resetIntrospectionConfig() {
        this._introspectionConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get introspectionConfigInput() {
        return this._introspectionConfig;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get queryDepthLimit() {
        return this.getNumberAttribute('query_depth_limit');
    }
    set queryDepthLimit(value) {
        this._queryDepthLimit = value;
    }
    resetQueryDepthLimit() {
        this._queryDepthLimit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queryDepthLimitInput() {
        return this._queryDepthLimit;
    }
    get resolverCountLimit() {
        return this.getNumberAttribute('resolver_count_limit');
    }
    set resolverCountLimit(value) {
        this._resolverCountLimit = value;
    }
    resetResolverCountLimit() {
        this._resolverCountLimit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resolverCountLimitInput() {
        return this._resolverCountLimit;
    }
    get schema() {
        return this.getStringAttribute('schema');
    }
    set schema(value) {
        this._schema = value;
    }
    resetSchema() {
        this._schema = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get schemaInput() {
        return this._schema;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get uris() {
        return this._uris;
    }
    get visibility() {
        return this.getStringAttribute('visibility');
    }
    set visibility(value) {
        this._visibility = value;
    }
    resetVisibility() {
        this._visibility = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get visibilityInput() {
        return this._visibility;
    }
    get xrayEnabled() {
        return this.getBooleanAttribute('xray_enabled');
    }
    set xrayEnabled(value) {
        this._xrayEnabled = value;
    }
    resetXrayEnabled() {
        this._xrayEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get xrayEnabledInput() {
        return this._xrayEnabled;
    }
    get additionalAuthenticationProvider() {
        return this._additionalAuthenticationProvider;
    }
    putAdditionalAuthenticationProvider(value) {
        this._additionalAuthenticationProvider.internalValue = value;
    }
    resetAdditionalAuthenticationProvider() {
        this._additionalAuthenticationProvider.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get additionalAuthenticationProviderInput() {
        return this._additionalAuthenticationProvider.internalValue;
    }
    get lambdaAuthorizerConfig() {
        return this._lambdaAuthorizerConfig;
    }
    putLambdaAuthorizerConfig(value) {
        this._lambdaAuthorizerConfig.internalValue = value;
    }
    resetLambdaAuthorizerConfig() {
        this._lambdaAuthorizerConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lambdaAuthorizerConfigInput() {
        return this._lambdaAuthorizerConfig.internalValue;
    }
    get logConfig() {
        return this._logConfig;
    }
    putLogConfig(value) {
        this._logConfig.internalValue = value;
    }
    resetLogConfig() {
        this._logConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logConfigInput() {
        return this._logConfig.internalValue;
    }
    get openidConnectConfig() {
        return this._openidConnectConfig;
    }
    putOpenidConnectConfig(value) {
        this._openidConnectConfig.internalValue = value;
    }
    resetOpenidConnectConfig() {
        this._openidConnectConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get openidConnectConfigInput() {
        return this._openidConnectConfig.internalValue;
    }
    get userPoolConfig() {
        return this._userPoolConfig;
    }
    putUserPoolConfig(value) {
        this._userPoolConfig.internalValue = value;
    }
    resetUserPoolConfig() {
        this._userPoolConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userPoolConfigInput() {
        return this._userPoolConfig.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            authentication_type: cdktf.stringToTerraform(this._authenticationType),
            id: cdktf.stringToTerraform(this._id),
            introspection_config: cdktf.stringToTerraform(this._introspectionConfig),
            name: cdktf.stringToTerraform(this._name),
            query_depth_limit: cdktf.numberToTerraform(this._queryDepthLimit),
            resolver_count_limit: cdktf.numberToTerraform(this._resolverCountLimit),
            schema: cdktf.stringToTerraform(this._schema),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            visibility: cdktf.stringToTerraform(this._visibility),
            xray_enabled: cdktf.booleanToTerraform(this._xrayEnabled),
            additional_authentication_provider: cdktf.listMapper(appsyncGraphqlApiAdditionalAuthenticationProviderToTerraform, true)(this._additionalAuthenticationProvider.internalValue),
            lambda_authorizer_config: appsyncGraphqlApiLambdaAuthorizerConfigToTerraform(this._lambdaAuthorizerConfig.internalValue),
            log_config: appsyncGraphqlApiLogConfigToTerraform(this._logConfig.internalValue),
            openid_connect_config: appsyncGraphqlApiOpenidConnectConfigToTerraform(this._openidConnectConfig.internalValue),
            user_pool_config: appsyncGraphqlApiUserPoolConfigToTerraform(this._userPoolConfig.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            authentication_type: {
                value: cdktf.stringToHclTerraform(this._authenticationType),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            introspection_config: {
                value: cdktf.stringToHclTerraform(this._introspectionConfig),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            query_depth_limit: {
                value: cdktf.numberToHclTerraform(this._queryDepthLimit),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            resolver_count_limit: {
                value: cdktf.numberToHclTerraform(this._resolverCountLimit),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            schema: {
                value: cdktf.stringToHclTerraform(this._schema),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            tags: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tags),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            tags_all: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tagsAll),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            visibility: {
                value: cdktf.stringToHclTerraform(this._visibility),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            xray_enabled: {
                value: cdktf.booleanToHclTerraform(this._xrayEnabled),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            additional_authentication_provider: {
                value: cdktf.listMapperHcl(appsyncGraphqlApiAdditionalAuthenticationProviderToHclTerraform, true)(this._additionalAuthenticationProvider.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "AppsyncGraphqlApiAdditionalAuthenticationProviderList",
            },
            lambda_authorizer_config: {
                value: appsyncGraphqlApiLambdaAuthorizerConfigToHclTerraform(this._lambdaAuthorizerConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "AppsyncGraphqlApiLambdaAuthorizerConfigList",
            },
            log_config: {
                value: appsyncGraphqlApiLogConfigToHclTerraform(this._logConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "AppsyncGraphqlApiLogConfigList",
            },
            openid_connect_config: {
                value: appsyncGraphqlApiOpenidConnectConfigToHclTerraform(this._openidConnectConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "AppsyncGraphqlApiOpenidConnectConfigList",
            },
            user_pool_config: {
                value: appsyncGraphqlApiUserPoolConfigToHclTerraform(this._userPoolConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "AppsyncGraphqlApiUserPoolConfigList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.AppsyncGraphqlApi = AppsyncGraphqlApi;
_k = JSII_RTTI_SYMBOL_1;
AppsyncGraphqlApi[_k] = { fqn: "@cdktf/provider-aws.appsyncGraphqlApi.AppsyncGraphqlApi", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
AppsyncGraphqlApi.tfResourceType = "aws_appsync_graphql_api";
//# sourceMappingURL=data:application/json;base64,