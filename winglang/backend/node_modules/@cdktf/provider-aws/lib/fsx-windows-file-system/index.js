"use strict";
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FsxWindowsFileSystem = exports.FsxWindowsFileSystemTimeoutsOutputReference = exports.fsxWindowsFileSystemTimeoutsToHclTerraform = exports.fsxWindowsFileSystemTimeoutsToTerraform = exports.FsxWindowsFileSystemSelfManagedActiveDirectoryOutputReference = exports.fsxWindowsFileSystemSelfManagedActiveDirectoryToHclTerraform = exports.fsxWindowsFileSystemSelfManagedActiveDirectoryToTerraform = exports.FsxWindowsFileSystemDiskIopsConfigurationOutputReference = exports.fsxWindowsFileSystemDiskIopsConfigurationToHclTerraform = exports.fsxWindowsFileSystemDiskIopsConfigurationToTerraform = exports.FsxWindowsFileSystemAuditLogConfigurationOutputReference = exports.fsxWindowsFileSystemAuditLogConfigurationToHclTerraform = exports.fsxWindowsFileSystemAuditLogConfigurationToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function fsxWindowsFileSystemAuditLogConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        audit_log_destination: cdktf.stringToTerraform(struct.auditLogDestination),
        file_access_audit_log_level: cdktf.stringToTerraform(struct.fileAccessAuditLogLevel),
        file_share_access_audit_log_level: cdktf.stringToTerraform(struct.fileShareAccessAuditLogLevel),
    };
}
exports.fsxWindowsFileSystemAuditLogConfigurationToTerraform = fsxWindowsFileSystemAuditLogConfigurationToTerraform;
function fsxWindowsFileSystemAuditLogConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        audit_log_destination: {
            value: cdktf.stringToHclTerraform(struct.auditLogDestination),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        file_access_audit_log_level: {
            value: cdktf.stringToHclTerraform(struct.fileAccessAuditLogLevel),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        file_share_access_audit_log_level: {
            value: cdktf.stringToHclTerraform(struct.fileShareAccessAuditLogLevel),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.fsxWindowsFileSystemAuditLogConfigurationToHclTerraform = fsxWindowsFileSystemAuditLogConfigurationToHclTerraform;
class FsxWindowsFileSystemAuditLogConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._auditLogDestination !== undefined) {
            hasAnyValues = true;
            internalValueResult.auditLogDestination = this._auditLogDestination;
        }
        if (this._fileAccessAuditLogLevel !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileAccessAuditLogLevel = this._fileAccessAuditLogLevel;
        }
        if (this._fileShareAccessAuditLogLevel !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileShareAccessAuditLogLevel = this._fileShareAccessAuditLogLevel;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._auditLogDestination = undefined;
            this._fileAccessAuditLogLevel = undefined;
            this._fileShareAccessAuditLogLevel = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._auditLogDestination = value.auditLogDestination;
            this._fileAccessAuditLogLevel = value.fileAccessAuditLogLevel;
            this._fileShareAccessAuditLogLevel = value.fileShareAccessAuditLogLevel;
        }
    }
    get auditLogDestination() {
        return this.getStringAttribute('audit_log_destination');
    }
    set auditLogDestination(value) {
        this._auditLogDestination = value;
    }
    resetAuditLogDestination() {
        this._auditLogDestination = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get auditLogDestinationInput() {
        return this._auditLogDestination;
    }
    get fileAccessAuditLogLevel() {
        return this.getStringAttribute('file_access_audit_log_level');
    }
    set fileAccessAuditLogLevel(value) {
        this._fileAccessAuditLogLevel = value;
    }
    resetFileAccessAuditLogLevel() {
        this._fileAccessAuditLogLevel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileAccessAuditLogLevelInput() {
        return this._fileAccessAuditLogLevel;
    }
    get fileShareAccessAuditLogLevel() {
        return this.getStringAttribute('file_share_access_audit_log_level');
    }
    set fileShareAccessAuditLogLevel(value) {
        this._fileShareAccessAuditLogLevel = value;
    }
    resetFileShareAccessAuditLogLevel() {
        this._fileShareAccessAuditLogLevel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileShareAccessAuditLogLevelInput() {
        return this._fileShareAccessAuditLogLevel;
    }
}
exports.FsxWindowsFileSystemAuditLogConfigurationOutputReference = FsxWindowsFileSystemAuditLogConfigurationOutputReference;
_a = JSII_RTTI_SYMBOL_1;
FsxWindowsFileSystemAuditLogConfigurationOutputReference[_a] = { fqn: "@cdktf/provider-aws.fsxWindowsFileSystem.FsxWindowsFileSystemAuditLogConfigurationOutputReference", version: "19.15.0" };
function fsxWindowsFileSystemDiskIopsConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        iops: cdktf.numberToTerraform(struct.iops),
        mode: cdktf.stringToTerraform(struct.mode),
    };
}
exports.fsxWindowsFileSystemDiskIopsConfigurationToTerraform = fsxWindowsFileSystemDiskIopsConfigurationToTerraform;
function fsxWindowsFileSystemDiskIopsConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        iops: {
            value: cdktf.numberToHclTerraform(struct.iops),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        mode: {
            value: cdktf.stringToHclTerraform(struct.mode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.fsxWindowsFileSystemDiskIopsConfigurationToHclTerraform = fsxWindowsFileSystemDiskIopsConfigurationToHclTerraform;
class FsxWindowsFileSystemDiskIopsConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._iops !== undefined) {
            hasAnyValues = true;
            internalValueResult.iops = this._iops;
        }
        if (this._mode !== undefined) {
            hasAnyValues = true;
            internalValueResult.mode = this._mode;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._iops = undefined;
            this._mode = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._iops = value.iops;
            this._mode = value.mode;
        }
    }
    get iops() {
        return this.getNumberAttribute('iops');
    }
    set iops(value) {
        this._iops = value;
    }
    resetIops() {
        this._iops = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get iopsInput() {
        return this._iops;
    }
    get mode() {
        return this.getStringAttribute('mode');
    }
    set mode(value) {
        this._mode = value;
    }
    resetMode() {
        this._mode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get modeInput() {
        return this._mode;
    }
}
exports.FsxWindowsFileSystemDiskIopsConfigurationOutputReference = FsxWindowsFileSystemDiskIopsConfigurationOutputReference;
_b = JSII_RTTI_SYMBOL_1;
FsxWindowsFileSystemDiskIopsConfigurationOutputReference[_b] = { fqn: "@cdktf/provider-aws.fsxWindowsFileSystem.FsxWindowsFileSystemDiskIopsConfigurationOutputReference", version: "19.15.0" };
function fsxWindowsFileSystemSelfManagedActiveDirectoryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dns_ips: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.dnsIps),
        domain_name: cdktf.stringToTerraform(struct.domainName),
        file_system_administrators_group: cdktf.stringToTerraform(struct.fileSystemAdministratorsGroup),
        organizational_unit_distinguished_name: cdktf.stringToTerraform(struct.organizationalUnitDistinguishedName),
        password: cdktf.stringToTerraform(struct.password),
        username: cdktf.stringToTerraform(struct.username),
    };
}
exports.fsxWindowsFileSystemSelfManagedActiveDirectoryToTerraform = fsxWindowsFileSystemSelfManagedActiveDirectoryToTerraform;
function fsxWindowsFileSystemSelfManagedActiveDirectoryToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        dns_ips: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.dnsIps),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        domain_name: {
            value: cdktf.stringToHclTerraform(struct.domainName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        file_system_administrators_group: {
            value: cdktf.stringToHclTerraform(struct.fileSystemAdministratorsGroup),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        organizational_unit_distinguished_name: {
            value: cdktf.stringToHclTerraform(struct.organizationalUnitDistinguishedName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        password: {
            value: cdktf.stringToHclTerraform(struct.password),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        username: {
            value: cdktf.stringToHclTerraform(struct.username),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.fsxWindowsFileSystemSelfManagedActiveDirectoryToHclTerraform = fsxWindowsFileSystemSelfManagedActiveDirectoryToHclTerraform;
class FsxWindowsFileSystemSelfManagedActiveDirectoryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dnsIps !== undefined) {
            hasAnyValues = true;
            internalValueResult.dnsIps = this._dnsIps;
        }
        if (this._domainName !== undefined) {
            hasAnyValues = true;
            internalValueResult.domainName = this._domainName;
        }
        if (this._fileSystemAdministratorsGroup !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileSystemAdministratorsGroup = this._fileSystemAdministratorsGroup;
        }
        if (this._organizationalUnitDistinguishedName !== undefined) {
            hasAnyValues = true;
            internalValueResult.organizationalUnitDistinguishedName = this._organizationalUnitDistinguishedName;
        }
        if (this._password !== undefined) {
            hasAnyValues = true;
            internalValueResult.password = this._password;
        }
        if (this._username !== undefined) {
            hasAnyValues = true;
            internalValueResult.username = this._username;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dnsIps = undefined;
            this._domainName = undefined;
            this._fileSystemAdministratorsGroup = undefined;
            this._organizationalUnitDistinguishedName = undefined;
            this._password = undefined;
            this._username = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dnsIps = value.dnsIps;
            this._domainName = value.domainName;
            this._fileSystemAdministratorsGroup = value.fileSystemAdministratorsGroup;
            this._organizationalUnitDistinguishedName = value.organizationalUnitDistinguishedName;
            this._password = value.password;
            this._username = value.username;
        }
    }
    get dnsIps() {
        return cdktf.Fn.tolist(this.getListAttribute('dns_ips'));
    }
    set dnsIps(value) {
        this._dnsIps = value;
    }
    // Temporarily expose input value. Use with caution.
    get dnsIpsInput() {
        return this._dnsIps;
    }
    get domainName() {
        return this.getStringAttribute('domain_name');
    }
    set domainName(value) {
        this._domainName = value;
    }
    // Temporarily expose input value. Use with caution.
    get domainNameInput() {
        return this._domainName;
    }
    get fileSystemAdministratorsGroup() {
        return this.getStringAttribute('file_system_administrators_group');
    }
    set fileSystemAdministratorsGroup(value) {
        this._fileSystemAdministratorsGroup = value;
    }
    resetFileSystemAdministratorsGroup() {
        this._fileSystemAdministratorsGroup = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileSystemAdministratorsGroupInput() {
        return this._fileSystemAdministratorsGroup;
    }
    get organizationalUnitDistinguishedName() {
        return this.getStringAttribute('organizational_unit_distinguished_name');
    }
    set organizationalUnitDistinguishedName(value) {
        this._organizationalUnitDistinguishedName = value;
    }
    resetOrganizationalUnitDistinguishedName() {
        this._organizationalUnitDistinguishedName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get organizationalUnitDistinguishedNameInput() {
        return this._organizationalUnitDistinguishedName;
    }
    get password() {
        return this.getStringAttribute('password');
    }
    set password(value) {
        this._password = value;
    }
    // Temporarily expose input value. Use with caution.
    get passwordInput() {
        return this._password;
    }
    get username() {
        return this.getStringAttribute('username');
    }
    set username(value) {
        this._username = value;
    }
    // Temporarily expose input value. Use with caution.
    get usernameInput() {
        return this._username;
    }
}
exports.FsxWindowsFileSystemSelfManagedActiveDirectoryOutputReference = FsxWindowsFileSystemSelfManagedActiveDirectoryOutputReference;
_c = JSII_RTTI_SYMBOL_1;
FsxWindowsFileSystemSelfManagedActiveDirectoryOutputReference[_c] = { fqn: "@cdktf/provider-aws.fsxWindowsFileSystem.FsxWindowsFileSystemSelfManagedActiveDirectoryOutputReference", version: "19.15.0" };
function fsxWindowsFileSystemTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.fsxWindowsFileSystemTimeoutsToTerraform = fsxWindowsFileSystemTimeoutsToTerraform;
function fsxWindowsFileSystemTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.fsxWindowsFileSystemTimeoutsToHclTerraform = fsxWindowsFileSystemTimeoutsToHclTerraform;
class FsxWindowsFileSystemTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.FsxWindowsFileSystemTimeoutsOutputReference = FsxWindowsFileSystemTimeoutsOutputReference;
_d = JSII_RTTI_SYMBOL_1;
FsxWindowsFileSystemTimeoutsOutputReference[_d] = { fqn: "@cdktf/provider-aws.fsxWindowsFileSystem.FsxWindowsFileSystemTimeoutsOutputReference", version: "19.15.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/fsx_windows_file_system aws_fsx_windows_file_system}
*/
class FsxWindowsFileSystem extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a FsxWindowsFileSystem resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the FsxWindowsFileSystem to import
    * @param importFromId The id of the existing FsxWindowsFileSystem that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/fsx_windows_file_system#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the FsxWindowsFileSystem to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_fsx_windows_file_system", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/fsx_windows_file_system aws_fsx_windows_file_system} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options FsxWindowsFileSystemConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_fsx_windows_file_system',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // audit_log_configuration - computed: false, optional: true, required: false
        this._auditLogConfiguration = new FsxWindowsFileSystemAuditLogConfigurationOutputReference(this, "audit_log_configuration");
        // disk_iops_configuration - computed: false, optional: true, required: false
        this._diskIopsConfiguration = new FsxWindowsFileSystemDiskIopsConfigurationOutputReference(this, "disk_iops_configuration");
        // self_managed_active_directory - computed: false, optional: true, required: false
        this._selfManagedActiveDirectory = new FsxWindowsFileSystemSelfManagedActiveDirectoryOutputReference(this, "self_managed_active_directory");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new FsxWindowsFileSystemTimeoutsOutputReference(this, "timeouts");
        this._activeDirectoryId = config.activeDirectoryId;
        this._aliases = config.aliases;
        this._automaticBackupRetentionDays = config.automaticBackupRetentionDays;
        this._backupId = config.backupId;
        this._copyTagsToBackups = config.copyTagsToBackups;
        this._dailyAutomaticBackupStartTime = config.dailyAutomaticBackupStartTime;
        this._deploymentType = config.deploymentType;
        this._id = config.id;
        this._kmsKeyId = config.kmsKeyId;
        this._preferredSubnetId = config.preferredSubnetId;
        this._securityGroupIds = config.securityGroupIds;
        this._skipFinalBackup = config.skipFinalBackup;
        this._storageCapacity = config.storageCapacity;
        this._storageType = config.storageType;
        this._subnetIds = config.subnetIds;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._throughputCapacity = config.throughputCapacity;
        this._weeklyMaintenanceStartTime = config.weeklyMaintenanceStartTime;
        this._auditLogConfiguration.internalValue = config.auditLogConfiguration;
        this._diskIopsConfiguration.internalValue = config.diskIopsConfiguration;
        this._selfManagedActiveDirectory.internalValue = config.selfManagedActiveDirectory;
        this._timeouts.internalValue = config.timeouts;
    }
    get activeDirectoryId() {
        return this.getStringAttribute('active_directory_id');
    }
    set activeDirectoryId(value) {
        this._activeDirectoryId = value;
    }
    resetActiveDirectoryId() {
        this._activeDirectoryId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get activeDirectoryIdInput() {
        return this._activeDirectoryId;
    }
    get aliases() {
        return cdktf.Fn.tolist(this.getListAttribute('aliases'));
    }
    set aliases(value) {
        this._aliases = value;
    }
    resetAliases() {
        this._aliases = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aliasesInput() {
        return this._aliases;
    }
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get automaticBackupRetentionDays() {
        return this.getNumberAttribute('automatic_backup_retention_days');
    }
    set automaticBackupRetentionDays(value) {
        this._automaticBackupRetentionDays = value;
    }
    resetAutomaticBackupRetentionDays() {
        this._automaticBackupRetentionDays = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get automaticBackupRetentionDaysInput() {
        return this._automaticBackupRetentionDays;
    }
    get backupId() {
        return this.getStringAttribute('backup_id');
    }
    set backupId(value) {
        this._backupId = value;
    }
    resetBackupId() {
        this._backupId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backupIdInput() {
        return this._backupId;
    }
    get copyTagsToBackups() {
        return this.getBooleanAttribute('copy_tags_to_backups');
    }
    set copyTagsToBackups(value) {
        this._copyTagsToBackups = value;
    }
    resetCopyTagsToBackups() {
        this._copyTagsToBackups = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get copyTagsToBackupsInput() {
        return this._copyTagsToBackups;
    }
    get dailyAutomaticBackupStartTime() {
        return this.getStringAttribute('daily_automatic_backup_start_time');
    }
    set dailyAutomaticBackupStartTime(value) {
        this._dailyAutomaticBackupStartTime = value;
    }
    resetDailyAutomaticBackupStartTime() {
        this._dailyAutomaticBackupStartTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dailyAutomaticBackupStartTimeInput() {
        return this._dailyAutomaticBackupStartTime;
    }
    get deploymentType() {
        return this.getStringAttribute('deployment_type');
    }
    set deploymentType(value) {
        this._deploymentType = value;
    }
    resetDeploymentType() {
        this._deploymentType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deploymentTypeInput() {
        return this._deploymentType;
    }
    // dns_name - computed: true, optional: false, required: false
    get dnsName() {
        return this.getStringAttribute('dns_name');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get kmsKeyId() {
        return this.getStringAttribute('kms_key_id');
    }
    set kmsKeyId(value) {
        this._kmsKeyId = value;
    }
    resetKmsKeyId() {
        this._kmsKeyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyIdInput() {
        return this._kmsKeyId;
    }
    // network_interface_ids - computed: true, optional: false, required: false
    get networkInterfaceIds() {
        return cdktf.Fn.tolist(this.getListAttribute('network_interface_ids'));
    }
    // owner_id - computed: true, optional: false, required: false
    get ownerId() {
        return this.getStringAttribute('owner_id');
    }
    // preferred_file_server_ip - computed: true, optional: false, required: false
    get preferredFileServerIp() {
        return this.getStringAttribute('preferred_file_server_ip');
    }
    get preferredSubnetId() {
        return this.getStringAttribute('preferred_subnet_id');
    }
    set preferredSubnetId(value) {
        this._preferredSubnetId = value;
    }
    resetPreferredSubnetId() {
        this._preferredSubnetId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get preferredSubnetIdInput() {
        return this._preferredSubnetId;
    }
    // remote_administration_endpoint - computed: true, optional: false, required: false
    get remoteAdministrationEndpoint() {
        return this.getStringAttribute('remote_administration_endpoint');
    }
    get securityGroupIds() {
        return cdktf.Fn.tolist(this.getListAttribute('security_group_ids'));
    }
    set securityGroupIds(value) {
        this._securityGroupIds = value;
    }
    resetSecurityGroupIds() {
        this._securityGroupIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityGroupIdsInput() {
        return this._securityGroupIds;
    }
    get skipFinalBackup() {
        return this.getBooleanAttribute('skip_final_backup');
    }
    set skipFinalBackup(value) {
        this._skipFinalBackup = value;
    }
    resetSkipFinalBackup() {
        this._skipFinalBackup = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get skipFinalBackupInput() {
        return this._skipFinalBackup;
    }
    get storageCapacity() {
        return this.getNumberAttribute('storage_capacity');
    }
    set storageCapacity(value) {
        this._storageCapacity = value;
    }
    resetStorageCapacity() {
        this._storageCapacity = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storageCapacityInput() {
        return this._storageCapacity;
    }
    get storageType() {
        return this.getStringAttribute('storage_type');
    }
    set storageType(value) {
        this._storageType = value;
    }
    resetStorageType() {
        this._storageType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storageTypeInput() {
        return this._storageType;
    }
    get subnetIds() {
        return this.getListAttribute('subnet_ids');
    }
    set subnetIds(value) {
        this._subnetIds = value;
    }
    // Temporarily expose input value. Use with caution.
    get subnetIdsInput() {
        return this._subnetIds;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get throughputCapacity() {
        return this.getNumberAttribute('throughput_capacity');
    }
    set throughputCapacity(value) {
        this._throughputCapacity = value;
    }
    // Temporarily expose input value. Use with caution.
    get throughputCapacityInput() {
        return this._throughputCapacity;
    }
    // vpc_id - computed: true, optional: false, required: false
    get vpcId() {
        return this.getStringAttribute('vpc_id');
    }
    get weeklyMaintenanceStartTime() {
        return this.getStringAttribute('weekly_maintenance_start_time');
    }
    set weeklyMaintenanceStartTime(value) {
        this._weeklyMaintenanceStartTime = value;
    }
    resetWeeklyMaintenanceStartTime() {
        this._weeklyMaintenanceStartTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get weeklyMaintenanceStartTimeInput() {
        return this._weeklyMaintenanceStartTime;
    }
    get auditLogConfiguration() {
        return this._auditLogConfiguration;
    }
    putAuditLogConfiguration(value) {
        this._auditLogConfiguration.internalValue = value;
    }
    resetAuditLogConfiguration() {
        this._auditLogConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get auditLogConfigurationInput() {
        return this._auditLogConfiguration.internalValue;
    }
    get diskIopsConfiguration() {
        return this._diskIopsConfiguration;
    }
    putDiskIopsConfiguration(value) {
        this._diskIopsConfiguration.internalValue = value;
    }
    resetDiskIopsConfiguration() {
        this._diskIopsConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get diskIopsConfigurationInput() {
        return this._diskIopsConfiguration.internalValue;
    }
    get selfManagedActiveDirectory() {
        return this._selfManagedActiveDirectory;
    }
    putSelfManagedActiveDirectory(value) {
        this._selfManagedActiveDirectory.internalValue = value;
    }
    resetSelfManagedActiveDirectory() {
        this._selfManagedActiveDirectory.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get selfManagedActiveDirectoryInput() {
        return this._selfManagedActiveDirectory.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            active_directory_id: cdktf.stringToTerraform(this._activeDirectoryId),
            aliases: cdktf.listMapper(cdktf.stringToTerraform, false)(this._aliases),
            automatic_backup_retention_days: cdktf.numberToTerraform(this._automaticBackupRetentionDays),
            backup_id: cdktf.stringToTerraform(this._backupId),
            copy_tags_to_backups: cdktf.booleanToTerraform(this._copyTagsToBackups),
            daily_automatic_backup_start_time: cdktf.stringToTerraform(this._dailyAutomaticBackupStartTime),
            deployment_type: cdktf.stringToTerraform(this._deploymentType),
            id: cdktf.stringToTerraform(this._id),
            kms_key_id: cdktf.stringToTerraform(this._kmsKeyId),
            preferred_subnet_id: cdktf.stringToTerraform(this._preferredSubnetId),
            security_group_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(this._securityGroupIds),
            skip_final_backup: cdktf.booleanToTerraform(this._skipFinalBackup),
            storage_capacity: cdktf.numberToTerraform(this._storageCapacity),
            storage_type: cdktf.stringToTerraform(this._storageType),
            subnet_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(this._subnetIds),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            throughput_capacity: cdktf.numberToTerraform(this._throughputCapacity),
            weekly_maintenance_start_time: cdktf.stringToTerraform(this._weeklyMaintenanceStartTime),
            audit_log_configuration: fsxWindowsFileSystemAuditLogConfigurationToTerraform(this._auditLogConfiguration.internalValue),
            disk_iops_configuration: fsxWindowsFileSystemDiskIopsConfigurationToTerraform(this._diskIopsConfiguration.internalValue),
            self_managed_active_directory: fsxWindowsFileSystemSelfManagedActiveDirectoryToTerraform(this._selfManagedActiveDirectory.internalValue),
            timeouts: fsxWindowsFileSystemTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            active_directory_id: {
                value: cdktf.stringToHclTerraform(this._activeDirectoryId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            aliases: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._aliases),
                isBlock: false,
                type: "set",
                storageClassType: "stringList",
            },
            automatic_backup_retention_days: {
                value: cdktf.numberToHclTerraform(this._automaticBackupRetentionDays),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            backup_id: {
                value: cdktf.stringToHclTerraform(this._backupId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            copy_tags_to_backups: {
                value: cdktf.booleanToHclTerraform(this._copyTagsToBackups),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            daily_automatic_backup_start_time: {
                value: cdktf.stringToHclTerraform(this._dailyAutomaticBackupStartTime),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            deployment_type: {
                value: cdktf.stringToHclTerraform(this._deploymentType),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            kms_key_id: {
                value: cdktf.stringToHclTerraform(this._kmsKeyId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            preferred_subnet_id: {
                value: cdktf.stringToHclTerraform(this._preferredSubnetId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            security_group_ids: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._securityGroupIds),
                isBlock: false,
                type: "set",
                storageClassType: "stringList",
            },
            skip_final_backup: {
                value: cdktf.booleanToHclTerraform(this._skipFinalBackup),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            storage_capacity: {
                value: cdktf.numberToHclTerraform(this._storageCapacity),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            storage_type: {
                value: cdktf.stringToHclTerraform(this._storageType),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            subnet_ids: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._subnetIds),
                isBlock: false,
                type: "list",
                storageClassType: "stringList",
            },
            tags: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tags),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            tags_all: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tagsAll),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            throughput_capacity: {
                value: cdktf.numberToHclTerraform(this._throughputCapacity),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            weekly_maintenance_start_time: {
                value: cdktf.stringToHclTerraform(this._weeklyMaintenanceStartTime),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            audit_log_configuration: {
                value: fsxWindowsFileSystemAuditLogConfigurationToHclTerraform(this._auditLogConfiguration.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "FsxWindowsFileSystemAuditLogConfigurationList",
            },
            disk_iops_configuration: {
                value: fsxWindowsFileSystemDiskIopsConfigurationToHclTerraform(this._diskIopsConfiguration.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "FsxWindowsFileSystemDiskIopsConfigurationList",
            },
            self_managed_active_directory: {
                value: fsxWindowsFileSystemSelfManagedActiveDirectoryToHclTerraform(this._selfManagedActiveDirectory.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "FsxWindowsFileSystemSelfManagedActiveDirectoryList",
            },
            timeouts: {
                value: fsxWindowsFileSystemTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "FsxWindowsFileSystemTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.FsxWindowsFileSystem = FsxWindowsFileSystem;
_e = JSII_RTTI_SYMBOL_1;
FsxWindowsFileSystem[_e] = { fqn: "@cdktf/provider-aws.fsxWindowsFileSystem.FsxWindowsFileSystem", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
FsxWindowsFileSystem.tfResourceType = "aws_fsx_windows_file_system";
//# sourceMappingURL=data:application/json;base64,