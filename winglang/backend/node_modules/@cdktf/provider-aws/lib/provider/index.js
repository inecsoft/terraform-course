"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AwsProvider = exports.awsProviderIgnoreTagsToHclTerraform = exports.awsProviderIgnoreTagsToTerraform = exports.awsProviderEndpointsToHclTerraform = exports.awsProviderEndpointsToTerraform = exports.awsProviderDefaultTagsToHclTerraform = exports.awsProviderDefaultTagsToTerraform = exports.awsProviderAssumeRoleWithWebIdentityToHclTerraform = exports.awsProviderAssumeRoleWithWebIdentityToTerraform = exports.awsProviderAssumeRoleToHclTerraform = exports.awsProviderAssumeRoleToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function awsProviderAssumeRoleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        duration: cdktf.stringToTerraform(struct.duration),
        external_id: cdktf.stringToTerraform(struct.externalId),
        policy: cdktf.stringToTerraform(struct.policy),
        policy_arns: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.policyArns),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        session_name: cdktf.stringToTerraform(struct.sessionName),
        source_identity: cdktf.stringToTerraform(struct.sourceIdentity),
        tags: cdktf.hashMapper(cdktf.stringToTerraform)(struct.tags),
        transitive_tag_keys: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.transitiveTagKeys),
    };
}
exports.awsProviderAssumeRoleToTerraform = awsProviderAssumeRoleToTerraform;
function awsProviderAssumeRoleToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        duration: {
            value: cdktf.stringToHclTerraform(struct.duration),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        external_id: {
            value: cdktf.stringToHclTerraform(struct.externalId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        policy: {
            value: cdktf.stringToHclTerraform(struct.policy),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        policy_arns: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.policyArns),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        role_arn: {
            value: cdktf.stringToHclTerraform(struct.roleArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        session_name: {
            value: cdktf.stringToHclTerraform(struct.sessionName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        source_identity: {
            value: cdktf.stringToHclTerraform(struct.sourceIdentity),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        tags: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.tags),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        transitive_tag_keys: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.transitiveTagKeys),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.awsProviderAssumeRoleToHclTerraform = awsProviderAssumeRoleToHclTerraform;
function awsProviderAssumeRoleWithWebIdentityToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        duration: cdktf.stringToTerraform(struct.duration),
        policy: cdktf.stringToTerraform(struct.policy),
        policy_arns: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.policyArns),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        session_name: cdktf.stringToTerraform(struct.sessionName),
        web_identity_token: cdktf.stringToTerraform(struct.webIdentityToken),
        web_identity_token_file: cdktf.stringToTerraform(struct.webIdentityTokenFile),
    };
}
exports.awsProviderAssumeRoleWithWebIdentityToTerraform = awsProviderAssumeRoleWithWebIdentityToTerraform;
function awsProviderAssumeRoleWithWebIdentityToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        duration: {
            value: cdktf.stringToHclTerraform(struct.duration),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        policy: {
            value: cdktf.stringToHclTerraform(struct.policy),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        policy_arns: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.policyArns),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        role_arn: {
            value: cdktf.stringToHclTerraform(struct.roleArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        session_name: {
            value: cdktf.stringToHclTerraform(struct.sessionName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        web_identity_token: {
            value: cdktf.stringToHclTerraform(struct.webIdentityToken),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        web_identity_token_file: {
            value: cdktf.stringToHclTerraform(struct.webIdentityTokenFile),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.awsProviderAssumeRoleWithWebIdentityToHclTerraform = awsProviderAssumeRoleWithWebIdentityToHclTerraform;
function awsProviderDefaultTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        tags: cdktf.hashMapper(cdktf.stringToTerraform)(struct.tags),
    };
}
exports.awsProviderDefaultTagsToTerraform = awsProviderDefaultTagsToTerraform;
function awsProviderDefaultTagsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        tags: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.tags),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.awsProviderDefaultTagsToHclTerraform = awsProviderDefaultTagsToHclTerraform;
function awsProviderEndpointsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        accessanalyzer: cdktf.stringToTerraform(struct.accessanalyzer),
        account: cdktf.stringToTerraform(struct.account),
        acm: cdktf.stringToTerraform(struct.acm),
        acmpca: cdktf.stringToTerraform(struct.acmpca),
        amg: cdktf.stringToTerraform(struct.amg),
        amp: cdktf.stringToTerraform(struct.amp),
        amplify: cdktf.stringToTerraform(struct.amplify),
        apigateway: cdktf.stringToTerraform(struct.apigateway),
        apigatewayv2: cdktf.stringToTerraform(struct.apigatewayv2),
        appautoscaling: cdktf.stringToTerraform(struct.appautoscaling),
        appconfig: cdktf.stringToTerraform(struct.appconfig),
        appfabric: cdktf.stringToTerraform(struct.appfabric),
        appflow: cdktf.stringToTerraform(struct.appflow),
        appintegrations: cdktf.stringToTerraform(struct.appintegrations),
        appintegrationsservice: cdktf.stringToTerraform(struct.appintegrationsservice),
        applicationautoscaling: cdktf.stringToTerraform(struct.applicationautoscaling),
        applicationinsights: cdktf.stringToTerraform(struct.applicationinsights),
        appmesh: cdktf.stringToTerraform(struct.appmesh),
        appregistry: cdktf.stringToTerraform(struct.appregistry),
        apprunner: cdktf.stringToTerraform(struct.apprunner),
        appstream: cdktf.stringToTerraform(struct.appstream),
        appsync: cdktf.stringToTerraform(struct.appsync),
        athena: cdktf.stringToTerraform(struct.athena),
        auditmanager: cdktf.stringToTerraform(struct.auditmanager),
        autoscaling: cdktf.stringToTerraform(struct.autoscaling),
        autoscalingplans: cdktf.stringToTerraform(struct.autoscalingplans),
        backup: cdktf.stringToTerraform(struct.backup),
        batch: cdktf.stringToTerraform(struct.batch),
        bcmdataexports: cdktf.stringToTerraform(struct.bcmdataexports),
        beanstalk: cdktf.stringToTerraform(struct.beanstalk),
        bedrock: cdktf.stringToTerraform(struct.bedrock),
        bedrockagent: cdktf.stringToTerraform(struct.bedrockagent),
        budgets: cdktf.stringToTerraform(struct.budgets),
        ce: cdktf.stringToTerraform(struct.ce),
        chime: cdktf.stringToTerraform(struct.chime),
        chimesdkmediapipelines: cdktf.stringToTerraform(struct.chimesdkmediapipelines),
        chimesdkvoice: cdktf.stringToTerraform(struct.chimesdkvoice),
        cleanrooms: cdktf.stringToTerraform(struct.cleanrooms),
        cloud9: cdktf.stringToTerraform(struct.cloud9),
        cloudcontrol: cdktf.stringToTerraform(struct.cloudcontrol),
        cloudcontrolapi: cdktf.stringToTerraform(struct.cloudcontrolapi),
        cloudformation: cdktf.stringToTerraform(struct.cloudformation),
        cloudfront: cdktf.stringToTerraform(struct.cloudfront),
        cloudfrontkeyvaluestore: cdktf.stringToTerraform(struct.cloudfrontkeyvaluestore),
        cloudhsm: cdktf.stringToTerraform(struct.cloudhsm),
        cloudhsmv2: cdktf.stringToTerraform(struct.cloudhsmv2),
        cloudsearch: cdktf.stringToTerraform(struct.cloudsearch),
        cloudtrail: cdktf.stringToTerraform(struct.cloudtrail),
        cloudwatch: cdktf.stringToTerraform(struct.cloudwatch),
        cloudwatchevents: cdktf.stringToTerraform(struct.cloudwatchevents),
        cloudwatchevidently: cdktf.stringToTerraform(struct.cloudwatchevidently),
        cloudwatchlog: cdktf.stringToTerraform(struct.cloudwatchlog),
        cloudwatchlogs: cdktf.stringToTerraform(struct.cloudwatchlogs),
        cloudwatchobservabilityaccessmanager: cdktf.stringToTerraform(struct.cloudwatchobservabilityaccessmanager),
        cloudwatchrum: cdktf.stringToTerraform(struct.cloudwatchrum),
        codeartifact: cdktf.stringToTerraform(struct.codeartifact),
        codebuild: cdktf.stringToTerraform(struct.codebuild),
        codecatalyst: cdktf.stringToTerraform(struct.codecatalyst),
        codecommit: cdktf.stringToTerraform(struct.codecommit),
        codedeploy: cdktf.stringToTerraform(struct.codedeploy),
        codeguruprofiler: cdktf.stringToTerraform(struct.codeguruprofiler),
        codegurureviewer: cdktf.stringToTerraform(struct.codegurureviewer),
        codepipeline: cdktf.stringToTerraform(struct.codepipeline),
        codestarconnections: cdktf.stringToTerraform(struct.codestarconnections),
        codestarnotifications: cdktf.stringToTerraform(struct.codestarnotifications),
        cognitoidentity: cdktf.stringToTerraform(struct.cognitoidentity),
        cognitoidentityprovider: cdktf.stringToTerraform(struct.cognitoidentityprovider),
        cognitoidp: cdktf.stringToTerraform(struct.cognitoidp),
        comprehend: cdktf.stringToTerraform(struct.comprehend),
        computeoptimizer: cdktf.stringToTerraform(struct.computeoptimizer),
        config: cdktf.stringToTerraform(struct.config),
        configservice: cdktf.stringToTerraform(struct.configservice),
        connect: cdktf.stringToTerraform(struct.connect),
        connectcases: cdktf.stringToTerraform(struct.connectcases),
        controltower: cdktf.stringToTerraform(struct.controltower),
        costandusagereportservice: cdktf.stringToTerraform(struct.costandusagereportservice),
        costexplorer: cdktf.stringToTerraform(struct.costexplorer),
        costoptimizationhub: cdktf.stringToTerraform(struct.costoptimizationhub),
        cur: cdktf.stringToTerraform(struct.cur),
        customerprofiles: cdktf.stringToTerraform(struct.customerprofiles),
        databasemigration: cdktf.stringToTerraform(struct.databasemigration),
        databasemigrationservice: cdktf.stringToTerraform(struct.databasemigrationservice),
        dataexchange: cdktf.stringToTerraform(struct.dataexchange),
        datapipeline: cdktf.stringToTerraform(struct.datapipeline),
        datasync: cdktf.stringToTerraform(struct.datasync),
        datazone: cdktf.stringToTerraform(struct.datazone),
        dax: cdktf.stringToTerraform(struct.dax),
        deploy: cdktf.stringToTerraform(struct.deploy),
        detective: cdktf.stringToTerraform(struct.detective),
        devicefarm: cdktf.stringToTerraform(struct.devicefarm),
        devopsguru: cdktf.stringToTerraform(struct.devopsguru),
        directconnect: cdktf.stringToTerraform(struct.directconnect),
        directoryservice: cdktf.stringToTerraform(struct.directoryservice),
        dlm: cdktf.stringToTerraform(struct.dlm),
        dms: cdktf.stringToTerraform(struct.dms),
        docdb: cdktf.stringToTerraform(struct.docdb),
        docdbelastic: cdktf.stringToTerraform(struct.docdbelastic),
        ds: cdktf.stringToTerraform(struct.ds),
        dynamodb: cdktf.stringToTerraform(struct.dynamodb),
        ec2: cdktf.stringToTerraform(struct.ec2),
        ecr: cdktf.stringToTerraform(struct.ecr),
        ecrpublic: cdktf.stringToTerraform(struct.ecrpublic),
        ecs: cdktf.stringToTerraform(struct.ecs),
        efs: cdktf.stringToTerraform(struct.efs),
        eks: cdktf.stringToTerraform(struct.eks),
        elasticache: cdktf.stringToTerraform(struct.elasticache),
        elasticbeanstalk: cdktf.stringToTerraform(struct.elasticbeanstalk),
        elasticloadbalancing: cdktf.stringToTerraform(struct.elasticloadbalancing),
        elasticloadbalancingv2: cdktf.stringToTerraform(struct.elasticloadbalancingv2),
        elasticsearch: cdktf.stringToTerraform(struct.elasticsearch),
        elasticsearchservice: cdktf.stringToTerraform(struct.elasticsearchservice),
        elastictranscoder: cdktf.stringToTerraform(struct.elastictranscoder),
        elb: cdktf.stringToTerraform(struct.elb),
        elbv2: cdktf.stringToTerraform(struct.elbv2),
        emr: cdktf.stringToTerraform(struct.emr),
        emrcontainers: cdktf.stringToTerraform(struct.emrcontainers),
        emrserverless: cdktf.stringToTerraform(struct.emrserverless),
        es: cdktf.stringToTerraform(struct.es),
        eventbridge: cdktf.stringToTerraform(struct.eventbridge),
        events: cdktf.stringToTerraform(struct.events),
        evidently: cdktf.stringToTerraform(struct.evidently),
        finspace: cdktf.stringToTerraform(struct.finspace),
        firehose: cdktf.stringToTerraform(struct.firehose),
        fis: cdktf.stringToTerraform(struct.fis),
        fms: cdktf.stringToTerraform(struct.fms),
        fsx: cdktf.stringToTerraform(struct.fsx),
        gamelift: cdktf.stringToTerraform(struct.gamelift),
        glacier: cdktf.stringToTerraform(struct.glacier),
        globalaccelerator: cdktf.stringToTerraform(struct.globalaccelerator),
        glue: cdktf.stringToTerraform(struct.glue),
        grafana: cdktf.stringToTerraform(struct.grafana),
        greengrass: cdktf.stringToTerraform(struct.greengrass),
        groundstation: cdktf.stringToTerraform(struct.groundstation),
        guardduty: cdktf.stringToTerraform(struct.guardduty),
        healthlake: cdktf.stringToTerraform(struct.healthlake),
        iam: cdktf.stringToTerraform(struct.iam),
        identitystore: cdktf.stringToTerraform(struct.identitystore),
        imagebuilder: cdktf.stringToTerraform(struct.imagebuilder),
        inspector: cdktf.stringToTerraform(struct.inspector),
        inspector2: cdktf.stringToTerraform(struct.inspector2),
        inspectorv2: cdktf.stringToTerraform(struct.inspectorv2),
        internetmonitor: cdktf.stringToTerraform(struct.internetmonitor),
        iot: cdktf.stringToTerraform(struct.iot),
        iotanalytics: cdktf.stringToTerraform(struct.iotanalytics),
        iotevents: cdktf.stringToTerraform(struct.iotevents),
        ivs: cdktf.stringToTerraform(struct.ivs),
        ivschat: cdktf.stringToTerraform(struct.ivschat),
        kafka: cdktf.stringToTerraform(struct.kafka),
        kafkaconnect: cdktf.stringToTerraform(struct.kafkaconnect),
        kendra: cdktf.stringToTerraform(struct.kendra),
        keyspaces: cdktf.stringToTerraform(struct.keyspaces),
        kinesis: cdktf.stringToTerraform(struct.kinesis),
        kinesisanalytics: cdktf.stringToTerraform(struct.kinesisanalytics),
        kinesisanalyticsv2: cdktf.stringToTerraform(struct.kinesisanalyticsv2),
        kinesisvideo: cdktf.stringToTerraform(struct.kinesisvideo),
        kms: cdktf.stringToTerraform(struct.kms),
        lakeformation: cdktf.stringToTerraform(struct.lakeformation),
        lambda: cdktf.stringToTerraform(struct.lambda),
        launchwizard: cdktf.stringToTerraform(struct.launchwizard),
        lex: cdktf.stringToTerraform(struct.lex),
        lexmodelbuilding: cdktf.stringToTerraform(struct.lexmodelbuilding),
        lexmodelbuildingservice: cdktf.stringToTerraform(struct.lexmodelbuildingservice),
        lexmodels: cdktf.stringToTerraform(struct.lexmodels),
        lexmodelsv2: cdktf.stringToTerraform(struct.lexmodelsv2),
        lexv2models: cdktf.stringToTerraform(struct.lexv2Models),
        licensemanager: cdktf.stringToTerraform(struct.licensemanager),
        lightsail: cdktf.stringToTerraform(struct.lightsail),
        location: cdktf.stringToTerraform(struct.location),
        locationservice: cdktf.stringToTerraform(struct.locationservice),
        logs: cdktf.stringToTerraform(struct.logs),
        lookoutmetrics: cdktf.stringToTerraform(struct.lookoutmetrics),
        m2: cdktf.stringToTerraform(struct.m2),
        macie2: cdktf.stringToTerraform(struct.macie2),
        managedgrafana: cdktf.stringToTerraform(struct.managedgrafana),
        mediaconnect: cdktf.stringToTerraform(struct.mediaconnect),
        mediaconvert: cdktf.stringToTerraform(struct.mediaconvert),
        medialive: cdktf.stringToTerraform(struct.medialive),
        mediapackage: cdktf.stringToTerraform(struct.mediapackage),
        mediapackagev2: cdktf.stringToTerraform(struct.mediapackagev2),
        mediastore: cdktf.stringToTerraform(struct.mediastore),
        memorydb: cdktf.stringToTerraform(struct.memorydb),
        mq: cdktf.stringToTerraform(struct.mq),
        msk: cdktf.stringToTerraform(struct.msk),
        mwaa: cdktf.stringToTerraform(struct.mwaa),
        neptune: cdktf.stringToTerraform(struct.neptune),
        neptunegraph: cdktf.stringToTerraform(struct.neptunegraph),
        networkfirewall: cdktf.stringToTerraform(struct.networkfirewall),
        networkmanager: cdktf.stringToTerraform(struct.networkmanager),
        oam: cdktf.stringToTerraform(struct.oam),
        opensearch: cdktf.stringToTerraform(struct.opensearch),
        opensearchingestion: cdktf.stringToTerraform(struct.opensearchingestion),
        opensearchserverless: cdktf.stringToTerraform(struct.opensearchserverless),
        opensearchservice: cdktf.stringToTerraform(struct.opensearchservice),
        opsworks: cdktf.stringToTerraform(struct.opsworks),
        organizations: cdktf.stringToTerraform(struct.organizations),
        osis: cdktf.stringToTerraform(struct.osis),
        outposts: cdktf.stringToTerraform(struct.outposts),
        paymentcryptography: cdktf.stringToTerraform(struct.paymentcryptography),
        pcaconnectorad: cdktf.stringToTerraform(struct.pcaconnectorad),
        pinpoint: cdktf.stringToTerraform(struct.pinpoint),
        pipes: cdktf.stringToTerraform(struct.pipes),
        polly: cdktf.stringToTerraform(struct.polly),
        pricing: cdktf.stringToTerraform(struct.pricing),
        prometheus: cdktf.stringToTerraform(struct.prometheus),
        prometheusservice: cdktf.stringToTerraform(struct.prometheusservice),
        qbusiness: cdktf.stringToTerraform(struct.qbusiness),
        qldb: cdktf.stringToTerraform(struct.qldb),
        quicksight: cdktf.stringToTerraform(struct.quicksight),
        ram: cdktf.stringToTerraform(struct.ram),
        rbin: cdktf.stringToTerraform(struct.rbin),
        rds: cdktf.stringToTerraform(struct.rds),
        recyclebin: cdktf.stringToTerraform(struct.recyclebin),
        redshift: cdktf.stringToTerraform(struct.redshift),
        redshiftdata: cdktf.stringToTerraform(struct.redshiftdata),
        redshiftdataapiservice: cdktf.stringToTerraform(struct.redshiftdataapiservice),
        redshiftserverless: cdktf.stringToTerraform(struct.redshiftserverless),
        rekognition: cdktf.stringToTerraform(struct.rekognition),
        resourceexplorer2: cdktf.stringToTerraform(struct.resourceexplorer2),
        resourcegroups: cdktf.stringToTerraform(struct.resourcegroups),
        resourcegroupstagging: cdktf.stringToTerraform(struct.resourcegroupstagging),
        resourcegroupstaggingapi: cdktf.stringToTerraform(struct.resourcegroupstaggingapi),
        rolesanywhere: cdktf.stringToTerraform(struct.rolesanywhere),
        route53: cdktf.stringToTerraform(struct.route53),
        route53domains: cdktf.stringToTerraform(struct.route53Domains),
        route53recoverycontrolconfig: cdktf.stringToTerraform(struct.route53Recoverycontrolconfig),
        route53recoveryreadiness: cdktf.stringToTerraform(struct.route53Recoveryreadiness),
        route53resolver: cdktf.stringToTerraform(struct.route53Resolver),
        rum: cdktf.stringToTerraform(struct.rum),
        s3: cdktf.stringToTerraform(struct.s3),
        s3api: cdktf.stringToTerraform(struct.s3Api),
        s3control: cdktf.stringToTerraform(struct.s3Control),
        s3outposts: cdktf.stringToTerraform(struct.s3Outposts),
        sagemaker: cdktf.stringToTerraform(struct.sagemaker),
        scheduler: cdktf.stringToTerraform(struct.scheduler),
        schemas: cdktf.stringToTerraform(struct.schemas),
        sdb: cdktf.stringToTerraform(struct.sdb),
        secretsmanager: cdktf.stringToTerraform(struct.secretsmanager),
        securityhub: cdktf.stringToTerraform(struct.securityhub),
        securitylake: cdktf.stringToTerraform(struct.securitylake),
        serverlessapplicationrepository: cdktf.stringToTerraform(struct.serverlessapplicationrepository),
        serverlessapprepo: cdktf.stringToTerraform(struct.serverlessapprepo),
        serverlessrepo: cdktf.stringToTerraform(struct.serverlessrepo),
        servicecatalog: cdktf.stringToTerraform(struct.servicecatalog),
        servicecatalogappregistry: cdktf.stringToTerraform(struct.servicecatalogappregistry),
        servicediscovery: cdktf.stringToTerraform(struct.servicediscovery),
        servicequotas: cdktf.stringToTerraform(struct.servicequotas),
        ses: cdktf.stringToTerraform(struct.ses),
        sesv2: cdktf.stringToTerraform(struct.sesv2),
        sfn: cdktf.stringToTerraform(struct.sfn),
        shield: cdktf.stringToTerraform(struct.shield),
        signer: cdktf.stringToTerraform(struct.signer),
        simpledb: cdktf.stringToTerraform(struct.simpledb),
        sns: cdktf.stringToTerraform(struct.sns),
        sqs: cdktf.stringToTerraform(struct.sqs),
        ssm: cdktf.stringToTerraform(struct.ssm),
        ssmcontacts: cdktf.stringToTerraform(struct.ssmcontacts),
        ssmincidents: cdktf.stringToTerraform(struct.ssmincidents),
        ssmsap: cdktf.stringToTerraform(struct.ssmsap),
        sso: cdktf.stringToTerraform(struct.sso),
        ssoadmin: cdktf.stringToTerraform(struct.ssoadmin),
        stepfunctions: cdktf.stringToTerraform(struct.stepfunctions),
        storagegateway: cdktf.stringToTerraform(struct.storagegateway),
        sts: cdktf.stringToTerraform(struct.sts),
        swf: cdktf.stringToTerraform(struct.swf),
        synthetics: cdktf.stringToTerraform(struct.synthetics),
        timestreamwrite: cdktf.stringToTerraform(struct.timestreamwrite),
        transcribe: cdktf.stringToTerraform(struct.transcribe),
        transcribeservice: cdktf.stringToTerraform(struct.transcribeservice),
        transfer: cdktf.stringToTerraform(struct.transfer),
        verifiedpermissions: cdktf.stringToTerraform(struct.verifiedpermissions),
        vpclattice: cdktf.stringToTerraform(struct.vpclattice),
        waf: cdktf.stringToTerraform(struct.waf),
        wafregional: cdktf.stringToTerraform(struct.wafregional),
        wafv2: cdktf.stringToTerraform(struct.wafv2),
        wellarchitected: cdktf.stringToTerraform(struct.wellarchitected),
        worklink: cdktf.stringToTerraform(struct.worklink),
        workspaces: cdktf.stringToTerraform(struct.workspaces),
        xray: cdktf.stringToTerraform(struct.xray),
    };
}
exports.awsProviderEndpointsToTerraform = awsProviderEndpointsToTerraform;
function awsProviderEndpointsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        accessanalyzer: {
            value: cdktf.stringToHclTerraform(struct.accessanalyzer),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        account: {
            value: cdktf.stringToHclTerraform(struct.account),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        acm: {
            value: cdktf.stringToHclTerraform(struct.acm),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        acmpca: {
            value: cdktf.stringToHclTerraform(struct.acmpca),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        amg: {
            value: cdktf.stringToHclTerraform(struct.amg),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        amp: {
            value: cdktf.stringToHclTerraform(struct.amp),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        amplify: {
            value: cdktf.stringToHclTerraform(struct.amplify),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        apigateway: {
            value: cdktf.stringToHclTerraform(struct.apigateway),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        apigatewayv2: {
            value: cdktf.stringToHclTerraform(struct.apigatewayv2),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        appautoscaling: {
            value: cdktf.stringToHclTerraform(struct.appautoscaling),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        appconfig: {
            value: cdktf.stringToHclTerraform(struct.appconfig),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        appfabric: {
            value: cdktf.stringToHclTerraform(struct.appfabric),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        appflow: {
            value: cdktf.stringToHclTerraform(struct.appflow),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        appintegrations: {
            value: cdktf.stringToHclTerraform(struct.appintegrations),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        appintegrationsservice: {
            value: cdktf.stringToHclTerraform(struct.appintegrationsservice),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        applicationautoscaling: {
            value: cdktf.stringToHclTerraform(struct.applicationautoscaling),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        applicationinsights: {
            value: cdktf.stringToHclTerraform(struct.applicationinsights),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        appmesh: {
            value: cdktf.stringToHclTerraform(struct.appmesh),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        appregistry: {
            value: cdktf.stringToHclTerraform(struct.appregistry),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        apprunner: {
            value: cdktf.stringToHclTerraform(struct.apprunner),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        appstream: {
            value: cdktf.stringToHclTerraform(struct.appstream),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        appsync: {
            value: cdktf.stringToHclTerraform(struct.appsync),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        athena: {
            value: cdktf.stringToHclTerraform(struct.athena),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        auditmanager: {
            value: cdktf.stringToHclTerraform(struct.auditmanager),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        autoscaling: {
            value: cdktf.stringToHclTerraform(struct.autoscaling),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        autoscalingplans: {
            value: cdktf.stringToHclTerraform(struct.autoscalingplans),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        backup: {
            value: cdktf.stringToHclTerraform(struct.backup),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        batch: {
            value: cdktf.stringToHclTerraform(struct.batch),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        bcmdataexports: {
            value: cdktf.stringToHclTerraform(struct.bcmdataexports),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        beanstalk: {
            value: cdktf.stringToHclTerraform(struct.beanstalk),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        bedrock: {
            value: cdktf.stringToHclTerraform(struct.bedrock),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        bedrockagent: {
            value: cdktf.stringToHclTerraform(struct.bedrockagent),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        budgets: {
            value: cdktf.stringToHclTerraform(struct.budgets),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ce: {
            value: cdktf.stringToHclTerraform(struct.ce),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        chime: {
            value: cdktf.stringToHclTerraform(struct.chime),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        chimesdkmediapipelines: {
            value: cdktf.stringToHclTerraform(struct.chimesdkmediapipelines),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        chimesdkvoice: {
            value: cdktf.stringToHclTerraform(struct.chimesdkvoice),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cleanrooms: {
            value: cdktf.stringToHclTerraform(struct.cleanrooms),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cloud9: {
            value: cdktf.stringToHclTerraform(struct.cloud9),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cloudcontrol: {
            value: cdktf.stringToHclTerraform(struct.cloudcontrol),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cloudcontrolapi: {
            value: cdktf.stringToHclTerraform(struct.cloudcontrolapi),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cloudformation: {
            value: cdktf.stringToHclTerraform(struct.cloudformation),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cloudfront: {
            value: cdktf.stringToHclTerraform(struct.cloudfront),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cloudfrontkeyvaluestore: {
            value: cdktf.stringToHclTerraform(struct.cloudfrontkeyvaluestore),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cloudhsm: {
            value: cdktf.stringToHclTerraform(struct.cloudhsm),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cloudhsmv2: {
            value: cdktf.stringToHclTerraform(struct.cloudhsmv2),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cloudsearch: {
            value: cdktf.stringToHclTerraform(struct.cloudsearch),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cloudtrail: {
            value: cdktf.stringToHclTerraform(struct.cloudtrail),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cloudwatch: {
            value: cdktf.stringToHclTerraform(struct.cloudwatch),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cloudwatchevents: {
            value: cdktf.stringToHclTerraform(struct.cloudwatchevents),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cloudwatchevidently: {
            value: cdktf.stringToHclTerraform(struct.cloudwatchevidently),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cloudwatchlog: {
            value: cdktf.stringToHclTerraform(struct.cloudwatchlog),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cloudwatchlogs: {
            value: cdktf.stringToHclTerraform(struct.cloudwatchlogs),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cloudwatchobservabilityaccessmanager: {
            value: cdktf.stringToHclTerraform(struct.cloudwatchobservabilityaccessmanager),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cloudwatchrum: {
            value: cdktf.stringToHclTerraform(struct.cloudwatchrum),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        codeartifact: {
            value: cdktf.stringToHclTerraform(struct.codeartifact),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        codebuild: {
            value: cdktf.stringToHclTerraform(struct.codebuild),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        codecatalyst: {
            value: cdktf.stringToHclTerraform(struct.codecatalyst),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        codecommit: {
            value: cdktf.stringToHclTerraform(struct.codecommit),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        codedeploy: {
            value: cdktf.stringToHclTerraform(struct.codedeploy),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        codeguruprofiler: {
            value: cdktf.stringToHclTerraform(struct.codeguruprofiler),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        codegurureviewer: {
            value: cdktf.stringToHclTerraform(struct.codegurureviewer),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        codepipeline: {
            value: cdktf.stringToHclTerraform(struct.codepipeline),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        codestarconnections: {
            value: cdktf.stringToHclTerraform(struct.codestarconnections),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        codestarnotifications: {
            value: cdktf.stringToHclTerraform(struct.codestarnotifications),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cognitoidentity: {
            value: cdktf.stringToHclTerraform(struct.cognitoidentity),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cognitoidentityprovider: {
            value: cdktf.stringToHclTerraform(struct.cognitoidentityprovider),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cognitoidp: {
            value: cdktf.stringToHclTerraform(struct.cognitoidp),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        comprehend: {
            value: cdktf.stringToHclTerraform(struct.comprehend),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        computeoptimizer: {
            value: cdktf.stringToHclTerraform(struct.computeoptimizer),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        config: {
            value: cdktf.stringToHclTerraform(struct.config),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        configservice: {
            value: cdktf.stringToHclTerraform(struct.configservice),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        connect: {
            value: cdktf.stringToHclTerraform(struct.connect),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        connectcases: {
            value: cdktf.stringToHclTerraform(struct.connectcases),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        controltower: {
            value: cdktf.stringToHclTerraform(struct.controltower),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        costandusagereportservice: {
            value: cdktf.stringToHclTerraform(struct.costandusagereportservice),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        costexplorer: {
            value: cdktf.stringToHclTerraform(struct.costexplorer),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        costoptimizationhub: {
            value: cdktf.stringToHclTerraform(struct.costoptimizationhub),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cur: {
            value: cdktf.stringToHclTerraform(struct.cur),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        customerprofiles: {
            value: cdktf.stringToHclTerraform(struct.customerprofiles),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        databasemigration: {
            value: cdktf.stringToHclTerraform(struct.databasemigration),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        databasemigrationservice: {
            value: cdktf.stringToHclTerraform(struct.databasemigrationservice),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        dataexchange: {
            value: cdktf.stringToHclTerraform(struct.dataexchange),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        datapipeline: {
            value: cdktf.stringToHclTerraform(struct.datapipeline),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        datasync: {
            value: cdktf.stringToHclTerraform(struct.datasync),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        datazone: {
            value: cdktf.stringToHclTerraform(struct.datazone),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        dax: {
            value: cdktf.stringToHclTerraform(struct.dax),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        deploy: {
            value: cdktf.stringToHclTerraform(struct.deploy),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        detective: {
            value: cdktf.stringToHclTerraform(struct.detective),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        devicefarm: {
            value: cdktf.stringToHclTerraform(struct.devicefarm),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        devopsguru: {
            value: cdktf.stringToHclTerraform(struct.devopsguru),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        directconnect: {
            value: cdktf.stringToHclTerraform(struct.directconnect),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        directoryservice: {
            value: cdktf.stringToHclTerraform(struct.directoryservice),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        dlm: {
            value: cdktf.stringToHclTerraform(struct.dlm),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        dms: {
            value: cdktf.stringToHclTerraform(struct.dms),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        docdb: {
            value: cdktf.stringToHclTerraform(struct.docdb),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        docdbelastic: {
            value: cdktf.stringToHclTerraform(struct.docdbelastic),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ds: {
            value: cdktf.stringToHclTerraform(struct.ds),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        dynamodb: {
            value: cdktf.stringToHclTerraform(struct.dynamodb),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ec2: {
            value: cdktf.stringToHclTerraform(struct.ec2),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ecr: {
            value: cdktf.stringToHclTerraform(struct.ecr),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ecrpublic: {
            value: cdktf.stringToHclTerraform(struct.ecrpublic),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ecs: {
            value: cdktf.stringToHclTerraform(struct.ecs),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        efs: {
            value: cdktf.stringToHclTerraform(struct.efs),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        eks: {
            value: cdktf.stringToHclTerraform(struct.eks),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        elasticache: {
            value: cdktf.stringToHclTerraform(struct.elasticache),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        elasticbeanstalk: {
            value: cdktf.stringToHclTerraform(struct.elasticbeanstalk),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        elasticloadbalancing: {
            value: cdktf.stringToHclTerraform(struct.elasticloadbalancing),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        elasticloadbalancingv2: {
            value: cdktf.stringToHclTerraform(struct.elasticloadbalancingv2),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        elasticsearch: {
            value: cdktf.stringToHclTerraform(struct.elasticsearch),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        elasticsearchservice: {
            value: cdktf.stringToHclTerraform(struct.elasticsearchservice),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        elastictranscoder: {
            value: cdktf.stringToHclTerraform(struct.elastictranscoder),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        elb: {
            value: cdktf.stringToHclTerraform(struct.elb),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        elbv2: {
            value: cdktf.stringToHclTerraform(struct.elbv2),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        emr: {
            value: cdktf.stringToHclTerraform(struct.emr),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        emrcontainers: {
            value: cdktf.stringToHclTerraform(struct.emrcontainers),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        emrserverless: {
            value: cdktf.stringToHclTerraform(struct.emrserverless),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        es: {
            value: cdktf.stringToHclTerraform(struct.es),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        eventbridge: {
            value: cdktf.stringToHclTerraform(struct.eventbridge),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        events: {
            value: cdktf.stringToHclTerraform(struct.events),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        evidently: {
            value: cdktf.stringToHclTerraform(struct.evidently),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        finspace: {
            value: cdktf.stringToHclTerraform(struct.finspace),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        firehose: {
            value: cdktf.stringToHclTerraform(struct.firehose),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        fis: {
            value: cdktf.stringToHclTerraform(struct.fis),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        fms: {
            value: cdktf.stringToHclTerraform(struct.fms),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        fsx: {
            value: cdktf.stringToHclTerraform(struct.fsx),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        gamelift: {
            value: cdktf.stringToHclTerraform(struct.gamelift),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        glacier: {
            value: cdktf.stringToHclTerraform(struct.glacier),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        globalaccelerator: {
            value: cdktf.stringToHclTerraform(struct.globalaccelerator),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        glue: {
            value: cdktf.stringToHclTerraform(struct.glue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        grafana: {
            value: cdktf.stringToHclTerraform(struct.grafana),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        greengrass: {
            value: cdktf.stringToHclTerraform(struct.greengrass),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        groundstation: {
            value: cdktf.stringToHclTerraform(struct.groundstation),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        guardduty: {
            value: cdktf.stringToHclTerraform(struct.guardduty),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        healthlake: {
            value: cdktf.stringToHclTerraform(struct.healthlake),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        iam: {
            value: cdktf.stringToHclTerraform(struct.iam),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        identitystore: {
            value: cdktf.stringToHclTerraform(struct.identitystore),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        imagebuilder: {
            value: cdktf.stringToHclTerraform(struct.imagebuilder),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        inspector: {
            value: cdktf.stringToHclTerraform(struct.inspector),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        inspector2: {
            value: cdktf.stringToHclTerraform(struct.inspector2),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        inspectorv2: {
            value: cdktf.stringToHclTerraform(struct.inspectorv2),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        internetmonitor: {
            value: cdktf.stringToHclTerraform(struct.internetmonitor),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        iot: {
            value: cdktf.stringToHclTerraform(struct.iot),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        iotanalytics: {
            value: cdktf.stringToHclTerraform(struct.iotanalytics),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        iotevents: {
            value: cdktf.stringToHclTerraform(struct.iotevents),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ivs: {
            value: cdktf.stringToHclTerraform(struct.ivs),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ivschat: {
            value: cdktf.stringToHclTerraform(struct.ivschat),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        kafka: {
            value: cdktf.stringToHclTerraform(struct.kafka),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        kafkaconnect: {
            value: cdktf.stringToHclTerraform(struct.kafkaconnect),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        kendra: {
            value: cdktf.stringToHclTerraform(struct.kendra),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        keyspaces: {
            value: cdktf.stringToHclTerraform(struct.keyspaces),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        kinesis: {
            value: cdktf.stringToHclTerraform(struct.kinesis),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        kinesisanalytics: {
            value: cdktf.stringToHclTerraform(struct.kinesisanalytics),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        kinesisanalyticsv2: {
            value: cdktf.stringToHclTerraform(struct.kinesisanalyticsv2),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        kinesisvideo: {
            value: cdktf.stringToHclTerraform(struct.kinesisvideo),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        kms: {
            value: cdktf.stringToHclTerraform(struct.kms),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        lakeformation: {
            value: cdktf.stringToHclTerraform(struct.lakeformation),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        lambda: {
            value: cdktf.stringToHclTerraform(struct.lambda),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        launchwizard: {
            value: cdktf.stringToHclTerraform(struct.launchwizard),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        lex: {
            value: cdktf.stringToHclTerraform(struct.lex),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        lexmodelbuilding: {
            value: cdktf.stringToHclTerraform(struct.lexmodelbuilding),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        lexmodelbuildingservice: {
            value: cdktf.stringToHclTerraform(struct.lexmodelbuildingservice),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        lexmodels: {
            value: cdktf.stringToHclTerraform(struct.lexmodels),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        lexmodelsv2: {
            value: cdktf.stringToHclTerraform(struct.lexmodelsv2),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        lexv2models: {
            value: cdktf.stringToHclTerraform(struct.lexv2Models),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        licensemanager: {
            value: cdktf.stringToHclTerraform(struct.licensemanager),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        lightsail: {
            value: cdktf.stringToHclTerraform(struct.lightsail),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        location: {
            value: cdktf.stringToHclTerraform(struct.location),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        locationservice: {
            value: cdktf.stringToHclTerraform(struct.locationservice),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        logs: {
            value: cdktf.stringToHclTerraform(struct.logs),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        lookoutmetrics: {
            value: cdktf.stringToHclTerraform(struct.lookoutmetrics),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        m2: {
            value: cdktf.stringToHclTerraform(struct.m2),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        macie2: {
            value: cdktf.stringToHclTerraform(struct.macie2),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        managedgrafana: {
            value: cdktf.stringToHclTerraform(struct.managedgrafana),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        mediaconnect: {
            value: cdktf.stringToHclTerraform(struct.mediaconnect),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        mediaconvert: {
            value: cdktf.stringToHclTerraform(struct.mediaconvert),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        medialive: {
            value: cdktf.stringToHclTerraform(struct.medialive),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        mediapackage: {
            value: cdktf.stringToHclTerraform(struct.mediapackage),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        mediapackagev2: {
            value: cdktf.stringToHclTerraform(struct.mediapackagev2),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        mediastore: {
            value: cdktf.stringToHclTerraform(struct.mediastore),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        memorydb: {
            value: cdktf.stringToHclTerraform(struct.memorydb),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        mq: {
            value: cdktf.stringToHclTerraform(struct.mq),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        msk: {
            value: cdktf.stringToHclTerraform(struct.msk),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        mwaa: {
            value: cdktf.stringToHclTerraform(struct.mwaa),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        neptune: {
            value: cdktf.stringToHclTerraform(struct.neptune),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        neptunegraph: {
            value: cdktf.stringToHclTerraform(struct.neptunegraph),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        networkfirewall: {
            value: cdktf.stringToHclTerraform(struct.networkfirewall),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        networkmanager: {
            value: cdktf.stringToHclTerraform(struct.networkmanager),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        oam: {
            value: cdktf.stringToHclTerraform(struct.oam),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        opensearch: {
            value: cdktf.stringToHclTerraform(struct.opensearch),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        opensearchingestion: {
            value: cdktf.stringToHclTerraform(struct.opensearchingestion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        opensearchserverless: {
            value: cdktf.stringToHclTerraform(struct.opensearchserverless),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        opensearchservice: {
            value: cdktf.stringToHclTerraform(struct.opensearchservice),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        opsworks: {
            value: cdktf.stringToHclTerraform(struct.opsworks),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        organizations: {
            value: cdktf.stringToHclTerraform(struct.organizations),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        osis: {
            value: cdktf.stringToHclTerraform(struct.osis),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        outposts: {
            value: cdktf.stringToHclTerraform(struct.outposts),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        paymentcryptography: {
            value: cdktf.stringToHclTerraform(struct.paymentcryptography),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        pcaconnectorad: {
            value: cdktf.stringToHclTerraform(struct.pcaconnectorad),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        pinpoint: {
            value: cdktf.stringToHclTerraform(struct.pinpoint),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        pipes: {
            value: cdktf.stringToHclTerraform(struct.pipes),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        polly: {
            value: cdktf.stringToHclTerraform(struct.polly),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        pricing: {
            value: cdktf.stringToHclTerraform(struct.pricing),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        prometheus: {
            value: cdktf.stringToHclTerraform(struct.prometheus),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        prometheusservice: {
            value: cdktf.stringToHclTerraform(struct.prometheusservice),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        qbusiness: {
            value: cdktf.stringToHclTerraform(struct.qbusiness),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        qldb: {
            value: cdktf.stringToHclTerraform(struct.qldb),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        quicksight: {
            value: cdktf.stringToHclTerraform(struct.quicksight),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ram: {
            value: cdktf.stringToHclTerraform(struct.ram),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        rbin: {
            value: cdktf.stringToHclTerraform(struct.rbin),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        rds: {
            value: cdktf.stringToHclTerraform(struct.rds),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        recyclebin: {
            value: cdktf.stringToHclTerraform(struct.recyclebin),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        redshift: {
            value: cdktf.stringToHclTerraform(struct.redshift),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        redshiftdata: {
            value: cdktf.stringToHclTerraform(struct.redshiftdata),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        redshiftdataapiservice: {
            value: cdktf.stringToHclTerraform(struct.redshiftdataapiservice),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        redshiftserverless: {
            value: cdktf.stringToHclTerraform(struct.redshiftserverless),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        rekognition: {
            value: cdktf.stringToHclTerraform(struct.rekognition),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        resourceexplorer2: {
            value: cdktf.stringToHclTerraform(struct.resourceexplorer2),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        resourcegroups: {
            value: cdktf.stringToHclTerraform(struct.resourcegroups),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        resourcegroupstagging: {
            value: cdktf.stringToHclTerraform(struct.resourcegroupstagging),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        resourcegroupstaggingapi: {
            value: cdktf.stringToHclTerraform(struct.resourcegroupstaggingapi),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        rolesanywhere: {
            value: cdktf.stringToHclTerraform(struct.rolesanywhere),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        route53: {
            value: cdktf.stringToHclTerraform(struct.route53),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        route53domains: {
            value: cdktf.stringToHclTerraform(struct.route53Domains),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        route53recoverycontrolconfig: {
            value: cdktf.stringToHclTerraform(struct.route53Recoverycontrolconfig),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        route53recoveryreadiness: {
            value: cdktf.stringToHclTerraform(struct.route53Recoveryreadiness),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        route53resolver: {
            value: cdktf.stringToHclTerraform(struct.route53Resolver),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        rum: {
            value: cdktf.stringToHclTerraform(struct.rum),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        s3: {
            value: cdktf.stringToHclTerraform(struct.s3),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        s3api: {
            value: cdktf.stringToHclTerraform(struct.s3Api),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        s3control: {
            value: cdktf.stringToHclTerraform(struct.s3Control),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        s3outposts: {
            value: cdktf.stringToHclTerraform(struct.s3Outposts),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sagemaker: {
            value: cdktf.stringToHclTerraform(struct.sagemaker),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        scheduler: {
            value: cdktf.stringToHclTerraform(struct.scheduler),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        schemas: {
            value: cdktf.stringToHclTerraform(struct.schemas),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sdb: {
            value: cdktf.stringToHclTerraform(struct.sdb),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        secretsmanager: {
            value: cdktf.stringToHclTerraform(struct.secretsmanager),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        securityhub: {
            value: cdktf.stringToHclTerraform(struct.securityhub),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        securitylake: {
            value: cdktf.stringToHclTerraform(struct.securitylake),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        serverlessapplicationrepository: {
            value: cdktf.stringToHclTerraform(struct.serverlessapplicationrepository),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        serverlessapprepo: {
            value: cdktf.stringToHclTerraform(struct.serverlessapprepo),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        serverlessrepo: {
            value: cdktf.stringToHclTerraform(struct.serverlessrepo),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        servicecatalog: {
            value: cdktf.stringToHclTerraform(struct.servicecatalog),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        servicecatalogappregistry: {
            value: cdktf.stringToHclTerraform(struct.servicecatalogappregistry),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        servicediscovery: {
            value: cdktf.stringToHclTerraform(struct.servicediscovery),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        servicequotas: {
            value: cdktf.stringToHclTerraform(struct.servicequotas),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ses: {
            value: cdktf.stringToHclTerraform(struct.ses),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sesv2: {
            value: cdktf.stringToHclTerraform(struct.sesv2),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sfn: {
            value: cdktf.stringToHclTerraform(struct.sfn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        shield: {
            value: cdktf.stringToHclTerraform(struct.shield),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        signer: {
            value: cdktf.stringToHclTerraform(struct.signer),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        simpledb: {
            value: cdktf.stringToHclTerraform(struct.simpledb),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sns: {
            value: cdktf.stringToHclTerraform(struct.sns),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sqs: {
            value: cdktf.stringToHclTerraform(struct.sqs),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ssm: {
            value: cdktf.stringToHclTerraform(struct.ssm),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ssmcontacts: {
            value: cdktf.stringToHclTerraform(struct.ssmcontacts),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ssmincidents: {
            value: cdktf.stringToHclTerraform(struct.ssmincidents),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ssmsap: {
            value: cdktf.stringToHclTerraform(struct.ssmsap),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sso: {
            value: cdktf.stringToHclTerraform(struct.sso),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ssoadmin: {
            value: cdktf.stringToHclTerraform(struct.ssoadmin),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        stepfunctions: {
            value: cdktf.stringToHclTerraform(struct.stepfunctions),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        storagegateway: {
            value: cdktf.stringToHclTerraform(struct.storagegateway),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sts: {
            value: cdktf.stringToHclTerraform(struct.sts),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        swf: {
            value: cdktf.stringToHclTerraform(struct.swf),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        synthetics: {
            value: cdktf.stringToHclTerraform(struct.synthetics),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        timestreamwrite: {
            value: cdktf.stringToHclTerraform(struct.timestreamwrite),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        transcribe: {
            value: cdktf.stringToHclTerraform(struct.transcribe),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        transcribeservice: {
            value: cdktf.stringToHclTerraform(struct.transcribeservice),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        transfer: {
            value: cdktf.stringToHclTerraform(struct.transfer),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        verifiedpermissions: {
            value: cdktf.stringToHclTerraform(struct.verifiedpermissions),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        vpclattice: {
            value: cdktf.stringToHclTerraform(struct.vpclattice),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        waf: {
            value: cdktf.stringToHclTerraform(struct.waf),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        wafregional: {
            value: cdktf.stringToHclTerraform(struct.wafregional),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        wafv2: {
            value: cdktf.stringToHclTerraform(struct.wafv2),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        wellarchitected: {
            value: cdktf.stringToHclTerraform(struct.wellarchitected),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        worklink: {
            value: cdktf.stringToHclTerraform(struct.worklink),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        workspaces: {
            value: cdktf.stringToHclTerraform(struct.workspaces),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        xray: {
            value: cdktf.stringToHclTerraform(struct.xray),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.awsProviderEndpointsToHclTerraform = awsProviderEndpointsToHclTerraform;
function awsProviderIgnoreTagsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key_prefixes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.keyPrefixes),
        keys: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.keys),
    };
}
exports.awsProviderIgnoreTagsToTerraform = awsProviderIgnoreTagsToTerraform;
function awsProviderIgnoreTagsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        key_prefixes: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.keyPrefixes),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        keys: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.keys),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.awsProviderIgnoreTagsToHclTerraform = awsProviderIgnoreTagsToHclTerraform;
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs aws}
*/
class AwsProvider extends cdktf.TerraformProvider {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a AwsProvider resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the AwsProvider to import
    * @param importFromId The id of the existing AwsProvider that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the AwsProvider to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs aws} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options AwsProviderConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'aws',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            terraformProviderSource: 'aws'
        });
        this._accessKey = config.accessKey;
        this._allowedAccountIds = config.allowedAccountIds;
        this._customCaBundle = config.customCaBundle;
        this._ec2MetadataServiceEndpoint = config.ec2MetadataServiceEndpoint;
        this._ec2MetadataServiceEndpointMode = config.ec2MetadataServiceEndpointMode;
        this._forbiddenAccountIds = config.forbiddenAccountIds;
        this._httpProxy = config.httpProxy;
        this._httpsProxy = config.httpsProxy;
        this._insecure = config.insecure;
        this._maxRetries = config.maxRetries;
        this._noProxy = config.noProxy;
        this._profile = config.profile;
        this._region = config.region;
        this._retryMode = config.retryMode;
        this._s3UsEast1RegionalEndpoint = config.s3UsEast1RegionalEndpoint;
        this._s3UsePathStyle = config.s3UsePathStyle;
        this._secretKey = config.secretKey;
        this._sharedConfigFiles = config.sharedConfigFiles;
        this._sharedCredentialsFiles = config.sharedCredentialsFiles;
        this._skipCredentialsValidation = config.skipCredentialsValidation;
        this._skipMetadataApiCheck = config.skipMetadataApiCheck;
        this._skipRegionValidation = config.skipRegionValidation;
        this._skipRequestingAccountId = config.skipRequestingAccountId;
        this._stsRegion = config.stsRegion;
        this._token = config.token;
        this._tokenBucketRateLimiterCapacity = config.tokenBucketRateLimiterCapacity;
        this._useDualstackEndpoint = config.useDualstackEndpoint;
        this._useFipsEndpoint = config.useFipsEndpoint;
        this._alias = config.alias;
        this._assumeRole = config.assumeRole;
        this._assumeRoleWithWebIdentity = config.assumeRoleWithWebIdentity;
        this._defaultTags = config.defaultTags;
        this._endpoints = config.endpoints;
        this._ignoreTags = config.ignoreTags;
    }
    get accessKey() {
        return this._accessKey;
    }
    set accessKey(value) {
        this._accessKey = value;
    }
    resetAccessKey() {
        this._accessKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessKeyInput() {
        return this._accessKey;
    }
    get allowedAccountIds() {
        return this._allowedAccountIds;
    }
    set allowedAccountIds(value) {
        this._allowedAccountIds = value;
    }
    resetAllowedAccountIds() {
        this._allowedAccountIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedAccountIdsInput() {
        return this._allowedAccountIds;
    }
    get customCaBundle() {
        return this._customCaBundle;
    }
    set customCaBundle(value) {
        this._customCaBundle = value;
    }
    resetCustomCaBundle() {
        this._customCaBundle = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customCaBundleInput() {
        return this._customCaBundle;
    }
    get ec2MetadataServiceEndpoint() {
        return this._ec2MetadataServiceEndpoint;
    }
    set ec2MetadataServiceEndpoint(value) {
        this._ec2MetadataServiceEndpoint = value;
    }
    resetEc2MetadataServiceEndpoint() {
        this._ec2MetadataServiceEndpoint = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ec2MetadataServiceEndpointInput() {
        return this._ec2MetadataServiceEndpoint;
    }
    get ec2MetadataServiceEndpointMode() {
        return this._ec2MetadataServiceEndpointMode;
    }
    set ec2MetadataServiceEndpointMode(value) {
        this._ec2MetadataServiceEndpointMode = value;
    }
    resetEc2MetadataServiceEndpointMode() {
        this._ec2MetadataServiceEndpointMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ec2MetadataServiceEndpointModeInput() {
        return this._ec2MetadataServiceEndpointMode;
    }
    get forbiddenAccountIds() {
        return this._forbiddenAccountIds;
    }
    set forbiddenAccountIds(value) {
        this._forbiddenAccountIds = value;
    }
    resetForbiddenAccountIds() {
        this._forbiddenAccountIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get forbiddenAccountIdsInput() {
        return this._forbiddenAccountIds;
    }
    get httpProxy() {
        return this._httpProxy;
    }
    set httpProxy(value) {
        this._httpProxy = value;
    }
    resetHttpProxy() {
        this._httpProxy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpProxyInput() {
        return this._httpProxy;
    }
    get httpsProxy() {
        return this._httpsProxy;
    }
    set httpsProxy(value) {
        this._httpsProxy = value;
    }
    resetHttpsProxy() {
        this._httpsProxy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpsProxyInput() {
        return this._httpsProxy;
    }
    get insecure() {
        return this._insecure;
    }
    set insecure(value) {
        this._insecure = value;
    }
    resetInsecure() {
        this._insecure = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get insecureInput() {
        return this._insecure;
    }
    get maxRetries() {
        return this._maxRetries;
    }
    set maxRetries(value) {
        this._maxRetries = value;
    }
    resetMaxRetries() {
        this._maxRetries = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxRetriesInput() {
        return this._maxRetries;
    }
    get noProxy() {
        return this._noProxy;
    }
    set noProxy(value) {
        this._noProxy = value;
    }
    resetNoProxy() {
        this._noProxy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get noProxyInput() {
        return this._noProxy;
    }
    get profile() {
        return this._profile;
    }
    set profile(value) {
        this._profile = value;
    }
    resetProfile() {
        this._profile = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get profileInput() {
        return this._profile;
    }
    get region() {
        return this._region;
    }
    set region(value) {
        this._region = value;
    }
    resetRegion() {
        this._region = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regionInput() {
        return this._region;
    }
    get retryMode() {
        return this._retryMode;
    }
    set retryMode(value) {
        this._retryMode = value;
    }
    resetRetryMode() {
        this._retryMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retryModeInput() {
        return this._retryMode;
    }
    get s3UsEast1RegionalEndpoint() {
        return this._s3UsEast1RegionalEndpoint;
    }
    set s3UsEast1RegionalEndpoint(value) {
        this._s3UsEast1RegionalEndpoint = value;
    }
    resetS3UsEast1RegionalEndpoint() {
        this._s3UsEast1RegionalEndpoint = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3UsEast1RegionalEndpointInput() {
        return this._s3UsEast1RegionalEndpoint;
    }
    get s3UsePathStyle() {
        return this._s3UsePathStyle;
    }
    set s3UsePathStyle(value) {
        this._s3UsePathStyle = value;
    }
    resetS3UsePathStyle() {
        this._s3UsePathStyle = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get s3UsePathStyleInput() {
        return this._s3UsePathStyle;
    }
    get secretKey() {
        return this._secretKey;
    }
    set secretKey(value) {
        this._secretKey = value;
    }
    resetSecretKey() {
        this._secretKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secretKeyInput() {
        return this._secretKey;
    }
    get sharedConfigFiles() {
        return this._sharedConfigFiles;
    }
    set sharedConfigFiles(value) {
        this._sharedConfigFiles = value;
    }
    resetSharedConfigFiles() {
        this._sharedConfigFiles = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sharedConfigFilesInput() {
        return this._sharedConfigFiles;
    }
    get sharedCredentialsFiles() {
        return this._sharedCredentialsFiles;
    }
    set sharedCredentialsFiles(value) {
        this._sharedCredentialsFiles = value;
    }
    resetSharedCredentialsFiles() {
        this._sharedCredentialsFiles = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sharedCredentialsFilesInput() {
        return this._sharedCredentialsFiles;
    }
    get skipCredentialsValidation() {
        return this._skipCredentialsValidation;
    }
    set skipCredentialsValidation(value) {
        this._skipCredentialsValidation = value;
    }
    resetSkipCredentialsValidation() {
        this._skipCredentialsValidation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get skipCredentialsValidationInput() {
        return this._skipCredentialsValidation;
    }
    get skipMetadataApiCheck() {
        return this._skipMetadataApiCheck;
    }
    set skipMetadataApiCheck(value) {
        this._skipMetadataApiCheck = value;
    }
    resetSkipMetadataApiCheck() {
        this._skipMetadataApiCheck = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get skipMetadataApiCheckInput() {
        return this._skipMetadataApiCheck;
    }
    get skipRegionValidation() {
        return this._skipRegionValidation;
    }
    set skipRegionValidation(value) {
        this._skipRegionValidation = value;
    }
    resetSkipRegionValidation() {
        this._skipRegionValidation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get skipRegionValidationInput() {
        return this._skipRegionValidation;
    }
    get skipRequestingAccountId() {
        return this._skipRequestingAccountId;
    }
    set skipRequestingAccountId(value) {
        this._skipRequestingAccountId = value;
    }
    resetSkipRequestingAccountId() {
        this._skipRequestingAccountId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get skipRequestingAccountIdInput() {
        return this._skipRequestingAccountId;
    }
    get stsRegion() {
        return this._stsRegion;
    }
    set stsRegion(value) {
        this._stsRegion = value;
    }
    resetStsRegion() {
        this._stsRegion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stsRegionInput() {
        return this._stsRegion;
    }
    get token() {
        return this._token;
    }
    set token(value) {
        this._token = value;
    }
    resetToken() {
        this._token = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tokenInput() {
        return this._token;
    }
    get tokenBucketRateLimiterCapacity() {
        return this._tokenBucketRateLimiterCapacity;
    }
    set tokenBucketRateLimiterCapacity(value) {
        this._tokenBucketRateLimiterCapacity = value;
    }
    resetTokenBucketRateLimiterCapacity() {
        this._tokenBucketRateLimiterCapacity = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tokenBucketRateLimiterCapacityInput() {
        return this._tokenBucketRateLimiterCapacity;
    }
    get useDualstackEndpoint() {
        return this._useDualstackEndpoint;
    }
    set useDualstackEndpoint(value) {
        this._useDualstackEndpoint = value;
    }
    resetUseDualstackEndpoint() {
        this._useDualstackEndpoint = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get useDualstackEndpointInput() {
        return this._useDualstackEndpoint;
    }
    get useFipsEndpoint() {
        return this._useFipsEndpoint;
    }
    set useFipsEndpoint(value) {
        this._useFipsEndpoint = value;
    }
    resetUseFipsEndpoint() {
        this._useFipsEndpoint = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get useFipsEndpointInput() {
        return this._useFipsEndpoint;
    }
    get alias() {
        return this._alias;
    }
    set alias(value) {
        this._alias = value;
    }
    resetAlias() {
        this._alias = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aliasInput() {
        return this._alias;
    }
    get assumeRole() {
        return this._assumeRole;
    }
    set assumeRole(value) {
        this._assumeRole = value;
    }
    resetAssumeRole() {
        this._assumeRole = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get assumeRoleInput() {
        return this._assumeRole;
    }
    get assumeRoleWithWebIdentity() {
        return this._assumeRoleWithWebIdentity;
    }
    set assumeRoleWithWebIdentity(value) {
        this._assumeRoleWithWebIdentity = value;
    }
    resetAssumeRoleWithWebIdentity() {
        this._assumeRoleWithWebIdentity = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get assumeRoleWithWebIdentityInput() {
        return this._assumeRoleWithWebIdentity;
    }
    get defaultTags() {
        return this._defaultTags;
    }
    set defaultTags(value) {
        this._defaultTags = value;
    }
    resetDefaultTags() {
        this._defaultTags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultTagsInput() {
        return this._defaultTags;
    }
    get endpoints() {
        return this._endpoints;
    }
    set endpoints(value) {
        this._endpoints = value;
    }
    resetEndpoints() {
        this._endpoints = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get endpointsInput() {
        return this._endpoints;
    }
    get ignoreTags() {
        return this._ignoreTags;
    }
    set ignoreTags(value) {
        this._ignoreTags = value;
    }
    resetIgnoreTags() {
        this._ignoreTags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ignoreTagsInput() {
        return this._ignoreTags;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            access_key: cdktf.stringToTerraform(this._accessKey),
            allowed_account_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(this._allowedAccountIds),
            custom_ca_bundle: cdktf.stringToTerraform(this._customCaBundle),
            ec2_metadata_service_endpoint: cdktf.stringToTerraform(this._ec2MetadataServiceEndpoint),
            ec2_metadata_service_endpoint_mode: cdktf.stringToTerraform(this._ec2MetadataServiceEndpointMode),
            forbidden_account_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(this._forbiddenAccountIds),
            http_proxy: cdktf.stringToTerraform(this._httpProxy),
            https_proxy: cdktf.stringToTerraform(this._httpsProxy),
            insecure: cdktf.booleanToTerraform(this._insecure),
            max_retries: cdktf.numberToTerraform(this._maxRetries),
            no_proxy: cdktf.stringToTerraform(this._noProxy),
            profile: cdktf.stringToTerraform(this._profile),
            region: cdktf.stringToTerraform(this._region),
            retry_mode: cdktf.stringToTerraform(this._retryMode),
            s3_us_east_1_regional_endpoint: cdktf.stringToTerraform(this._s3UsEast1RegionalEndpoint),
            s3_use_path_style: cdktf.booleanToTerraform(this._s3UsePathStyle),
            secret_key: cdktf.stringToTerraform(this._secretKey),
            shared_config_files: cdktf.listMapper(cdktf.stringToTerraform, false)(this._sharedConfigFiles),
            shared_credentials_files: cdktf.listMapper(cdktf.stringToTerraform, false)(this._sharedCredentialsFiles),
            skip_credentials_validation: cdktf.booleanToTerraform(this._skipCredentialsValidation),
            skip_metadata_api_check: cdktf.stringToTerraform(this._skipMetadataApiCheck),
            skip_region_validation: cdktf.booleanToTerraform(this._skipRegionValidation),
            skip_requesting_account_id: cdktf.booleanToTerraform(this._skipRequestingAccountId),
            sts_region: cdktf.stringToTerraform(this._stsRegion),
            token: cdktf.stringToTerraform(this._token),
            token_bucket_rate_limiter_capacity: cdktf.numberToTerraform(this._tokenBucketRateLimiterCapacity),
            use_dualstack_endpoint: cdktf.booleanToTerraform(this._useDualstackEndpoint),
            use_fips_endpoint: cdktf.booleanToTerraform(this._useFipsEndpoint),
            alias: cdktf.stringToTerraform(this._alias),
            assume_role: cdktf.listMapper(awsProviderAssumeRoleToTerraform, true)(this._assumeRole),
            assume_role_with_web_identity: cdktf.listMapper(awsProviderAssumeRoleWithWebIdentityToTerraform, true)(this._assumeRoleWithWebIdentity),
            default_tags: cdktf.listMapper(awsProviderDefaultTagsToTerraform, true)(this._defaultTags),
            endpoints: cdktf.listMapper(awsProviderEndpointsToTerraform, true)(this._endpoints),
            ignore_tags: cdktf.listMapper(awsProviderIgnoreTagsToTerraform, true)(this._ignoreTags),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            access_key: {
                value: cdktf.stringToHclTerraform(this._accessKey),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            allowed_account_ids: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._allowedAccountIds),
                isBlock: false,
                type: "set",
                storageClassType: "stringList",
            },
            custom_ca_bundle: {
                value: cdktf.stringToHclTerraform(this._customCaBundle),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            ec2_metadata_service_endpoint: {
                value: cdktf.stringToHclTerraform(this._ec2MetadataServiceEndpoint),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            ec2_metadata_service_endpoint_mode: {
                value: cdktf.stringToHclTerraform(this._ec2MetadataServiceEndpointMode),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            forbidden_account_ids: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._forbiddenAccountIds),
                isBlock: false,
                type: "set",
                storageClassType: "stringList",
            },
            http_proxy: {
                value: cdktf.stringToHclTerraform(this._httpProxy),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            https_proxy: {
                value: cdktf.stringToHclTerraform(this._httpsProxy),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            insecure: {
                value: cdktf.booleanToHclTerraform(this._insecure),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            max_retries: {
                value: cdktf.numberToHclTerraform(this._maxRetries),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            no_proxy: {
                value: cdktf.stringToHclTerraform(this._noProxy),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            profile: {
                value: cdktf.stringToHclTerraform(this._profile),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            region: {
                value: cdktf.stringToHclTerraform(this._region),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            retry_mode: {
                value: cdktf.stringToHclTerraform(this._retryMode),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            s3_us_east_1_regional_endpoint: {
                value: cdktf.stringToHclTerraform(this._s3UsEast1RegionalEndpoint),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            s3_use_path_style: {
                value: cdktf.booleanToHclTerraform(this._s3UsePathStyle),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            secret_key: {
                value: cdktf.stringToHclTerraform(this._secretKey),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            shared_config_files: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._sharedConfigFiles),
                isBlock: false,
                type: "list",
                storageClassType: "stringList",
            },
            shared_credentials_files: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._sharedCredentialsFiles),
                isBlock: false,
                type: "list",
                storageClassType: "stringList",
            },
            skip_credentials_validation: {
                value: cdktf.booleanToHclTerraform(this._skipCredentialsValidation),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            skip_metadata_api_check: {
                value: cdktf.stringToHclTerraform(this._skipMetadataApiCheck),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            skip_region_validation: {
                value: cdktf.booleanToHclTerraform(this._skipRegionValidation),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            skip_requesting_account_id: {
                value: cdktf.booleanToHclTerraform(this._skipRequestingAccountId),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            sts_region: {
                value: cdktf.stringToHclTerraform(this._stsRegion),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            token: {
                value: cdktf.stringToHclTerraform(this._token),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            token_bucket_rate_limiter_capacity: {
                value: cdktf.numberToHclTerraform(this._tokenBucketRateLimiterCapacity),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            use_dualstack_endpoint: {
                value: cdktf.booleanToHclTerraform(this._useDualstackEndpoint),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            use_fips_endpoint: {
                value: cdktf.booleanToHclTerraform(this._useFipsEndpoint),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            alias: {
                value: cdktf.stringToHclTerraform(this._alias),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            assume_role: {
                value: cdktf.listMapperHcl(awsProviderAssumeRoleToHclTerraform, true)(this._assumeRole),
                isBlock: true,
                type: "list",
                storageClassType: "AwsProviderAssumeRoleList",
            },
            assume_role_with_web_identity: {
                value: cdktf.listMapperHcl(awsProviderAssumeRoleWithWebIdentityToHclTerraform, true)(this._assumeRoleWithWebIdentity),
                isBlock: true,
                type: "list",
                storageClassType: "AwsProviderAssumeRoleWithWebIdentityList",
            },
            default_tags: {
                value: cdktf.listMapperHcl(awsProviderDefaultTagsToHclTerraform, true)(this._defaultTags),
                isBlock: true,
                type: "list",
                storageClassType: "AwsProviderDefaultTagsList",
            },
            endpoints: {
                value: cdktf.listMapperHcl(awsProviderEndpointsToHclTerraform, true)(this._endpoints),
                isBlock: true,
                type: "set",
                storageClassType: "AwsProviderEndpointsList",
            },
            ignore_tags: {
                value: cdktf.listMapperHcl(awsProviderIgnoreTagsToHclTerraform, true)(this._ignoreTags),
                isBlock: true,
                type: "list",
                storageClassType: "AwsProviderIgnoreTagsList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.AwsProvider = AwsProvider;
_a = JSII_RTTI_SYMBOL_1;
AwsProvider[_a] = { fqn: "@cdktf/provider-aws.provider.AwsProvider", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
AwsProvider.tfResourceType = "aws";
//# sourceMappingURL=data:application/json;base64,