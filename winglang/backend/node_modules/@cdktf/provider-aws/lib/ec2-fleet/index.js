"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ec2FleetSpotOptionsMaintenanceStrategiesCapacityRebalanceToHclTerraform = exports.ec2FleetSpotOptionsMaintenanceStrategiesCapacityRebalanceToTerraform = exports.Ec2FleetOnDemandOptionsOutputReference = exports.ec2FleetOnDemandOptionsToHclTerraform = exports.ec2FleetOnDemandOptionsToTerraform = exports.Ec2FleetLaunchTemplateConfigList = exports.Ec2FleetLaunchTemplateConfigOutputReference = exports.ec2FleetLaunchTemplateConfigToHclTerraform = exports.ec2FleetLaunchTemplateConfigToTerraform = exports.Ec2FleetLaunchTemplateConfigOverrideList = exports.Ec2FleetLaunchTemplateConfigOverrideOutputReference = exports.ec2FleetLaunchTemplateConfigOverrideToHclTerraform = exports.ec2FleetLaunchTemplateConfigOverrideToTerraform = exports.Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsOutputReference = exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsToHclTerraform = exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsToTerraform = exports.Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsVcpuCountOutputReference = exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsVcpuCountToHclTerraform = exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsVcpuCountToTerraform = exports.Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsTotalLocalStorageGbOutputReference = exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsTotalLocalStorageGbToHclTerraform = exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsTotalLocalStorageGbToTerraform = exports.Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsNetworkInterfaceCountOutputReference = exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsNetworkInterfaceCountToHclTerraform = exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsNetworkInterfaceCountToTerraform = exports.Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsNetworkBandwidthGbpsOutputReference = exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsNetworkBandwidthGbpsToHclTerraform = exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsNetworkBandwidthGbpsToTerraform = exports.Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsMemoryMibOutputReference = exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsMemoryMibToHclTerraform = exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsMemoryMibToTerraform = exports.Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsMemoryGibPerVcpuOutputReference = exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsMemoryGibPerVcpuToHclTerraform = exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsMemoryGibPerVcpuToTerraform = exports.Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsBaselineEbsBandwidthMbpsOutputReference = exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsBaselineEbsBandwidthMbpsToHclTerraform = exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsBaselineEbsBandwidthMbpsToTerraform = exports.Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorTotalMemoryMibOutputReference = exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorTotalMemoryMibToHclTerraform = exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorTotalMemoryMibToTerraform = exports.Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorCountOutputReference = exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorCountToHclTerraform = exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorCountToTerraform = exports.Ec2FleetLaunchTemplateConfigLaunchTemplateSpecificationOutputReference = exports.ec2FleetLaunchTemplateConfigLaunchTemplateSpecificationToHclTerraform = exports.ec2FleetLaunchTemplateConfigLaunchTemplateSpecificationToTerraform = exports.Ec2FleetFleetInstanceSetList = exports.Ec2FleetFleetInstanceSetOutputReference = exports.ec2FleetFleetInstanceSetToHclTerraform = exports.ec2FleetFleetInstanceSetToTerraform = void 0;
exports.Ec2Fleet = exports.Ec2FleetTimeoutsOutputReference = exports.ec2FleetTimeoutsToHclTerraform = exports.ec2FleetTimeoutsToTerraform = exports.Ec2FleetTargetCapacitySpecificationOutputReference = exports.ec2FleetTargetCapacitySpecificationToHclTerraform = exports.ec2FleetTargetCapacitySpecificationToTerraform = exports.Ec2FleetSpotOptionsOutputReference = exports.ec2FleetSpotOptionsToHclTerraform = exports.ec2FleetSpotOptionsToTerraform = exports.Ec2FleetSpotOptionsMaintenanceStrategiesOutputReference = exports.ec2FleetSpotOptionsMaintenanceStrategiesToHclTerraform = exports.ec2FleetSpotOptionsMaintenanceStrategiesToTerraform = exports.Ec2FleetSpotOptionsMaintenanceStrategiesCapacityRebalanceOutputReference = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function ec2FleetFleetInstanceSetToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        instance_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.instanceIds),
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        lifecycle: cdktf.stringToTerraform(struct.lifecycle),
        platform: cdktf.stringToTerraform(struct.platform),
    };
}
exports.ec2FleetFleetInstanceSetToTerraform = ec2FleetFleetInstanceSetToTerraform;
function ec2FleetFleetInstanceSetToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        instance_ids: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.instanceIds),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        instance_type: {
            value: cdktf.stringToHclTerraform(struct.instanceType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        lifecycle: {
            value: cdktf.stringToHclTerraform(struct.lifecycle),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        platform: {
            value: cdktf.stringToHclTerraform(struct.platform),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.ec2FleetFleetInstanceSetToHclTerraform = ec2FleetFleetInstanceSetToHclTerraform;
class Ec2FleetFleetInstanceSetOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._instanceIds !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceIds = this._instanceIds;
        }
        if (this._instanceType !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceType = this._instanceType;
        }
        if (this._lifecycle !== undefined) {
            hasAnyValues = true;
            internalValueResult.lifecycle = this._lifecycle;
        }
        if (this._platform !== undefined) {
            hasAnyValues = true;
            internalValueResult.platform = this._platform;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._instanceIds = undefined;
            this._instanceType = undefined;
            this._lifecycle = undefined;
            this._platform = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._instanceIds = value.instanceIds;
            this._instanceType = value.instanceType;
            this._lifecycle = value.lifecycle;
            this._platform = value.platform;
        }
    }
    get instanceIds() {
        return this.getListAttribute('instance_ids');
    }
    set instanceIds(value) {
        this._instanceIds = value;
    }
    resetInstanceIds() {
        this._instanceIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceIdsInput() {
        return this._instanceIds;
    }
    get instanceType() {
        return this.getStringAttribute('instance_type');
    }
    set instanceType(value) {
        this._instanceType = value;
    }
    resetInstanceType() {
        this._instanceType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceTypeInput() {
        return this._instanceType;
    }
    get lifecycle() {
        return this.getStringAttribute('lifecycle');
    }
    set lifecycle(value) {
        this._lifecycle = value;
    }
    resetLifecycle() {
        this._lifecycle = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifecycleInput() {
        return this._lifecycle;
    }
    get platform() {
        return this.getStringAttribute('platform');
    }
    set platform(value) {
        this._platform = value;
    }
    resetPlatform() {
        this._platform = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get platformInput() {
        return this._platform;
    }
}
exports.Ec2FleetFleetInstanceSetOutputReference = Ec2FleetFleetInstanceSetOutputReference;
_a = JSII_RTTI_SYMBOL_1;
Ec2FleetFleetInstanceSetOutputReference[_a] = { fqn: "@cdktf/provider-aws.ec2Fleet.Ec2FleetFleetInstanceSetOutputReference", version: "19.15.0" };
class Ec2FleetFleetInstanceSetList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Ec2FleetFleetInstanceSetOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Ec2FleetFleetInstanceSetList = Ec2FleetFleetInstanceSetList;
_b = JSII_RTTI_SYMBOL_1;
Ec2FleetFleetInstanceSetList[_b] = { fqn: "@cdktf/provider-aws.ec2Fleet.Ec2FleetFleetInstanceSetList", version: "19.15.0" };
function ec2FleetLaunchTemplateConfigLaunchTemplateSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        launch_template_id: cdktf.stringToTerraform(struct.launchTemplateId),
        launch_template_name: cdktf.stringToTerraform(struct.launchTemplateName),
        version: cdktf.stringToTerraform(struct.version),
    };
}
exports.ec2FleetLaunchTemplateConfigLaunchTemplateSpecificationToTerraform = ec2FleetLaunchTemplateConfigLaunchTemplateSpecificationToTerraform;
function ec2FleetLaunchTemplateConfigLaunchTemplateSpecificationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        launch_template_id: {
            value: cdktf.stringToHclTerraform(struct.launchTemplateId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        launch_template_name: {
            value: cdktf.stringToHclTerraform(struct.launchTemplateName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        version: {
            value: cdktf.stringToHclTerraform(struct.version),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.ec2FleetLaunchTemplateConfigLaunchTemplateSpecificationToHclTerraform = ec2FleetLaunchTemplateConfigLaunchTemplateSpecificationToHclTerraform;
class Ec2FleetLaunchTemplateConfigLaunchTemplateSpecificationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._launchTemplateId !== undefined) {
            hasAnyValues = true;
            internalValueResult.launchTemplateId = this._launchTemplateId;
        }
        if (this._launchTemplateName !== undefined) {
            hasAnyValues = true;
            internalValueResult.launchTemplateName = this._launchTemplateName;
        }
        if (this._version !== undefined) {
            hasAnyValues = true;
            internalValueResult.version = this._version;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._launchTemplateId = undefined;
            this._launchTemplateName = undefined;
            this._version = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._launchTemplateId = value.launchTemplateId;
            this._launchTemplateName = value.launchTemplateName;
            this._version = value.version;
        }
    }
    get launchTemplateId() {
        return this.getStringAttribute('launch_template_id');
    }
    set launchTemplateId(value) {
        this._launchTemplateId = value;
    }
    resetLaunchTemplateId() {
        this._launchTemplateId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get launchTemplateIdInput() {
        return this._launchTemplateId;
    }
    get launchTemplateName() {
        return this.getStringAttribute('launch_template_name');
    }
    set launchTemplateName(value) {
        this._launchTemplateName = value;
    }
    resetLaunchTemplateName() {
        this._launchTemplateName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get launchTemplateNameInput() {
        return this._launchTemplateName;
    }
    get version() {
        return this.getStringAttribute('version');
    }
    set version(value) {
        this._version = value;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
}
exports.Ec2FleetLaunchTemplateConfigLaunchTemplateSpecificationOutputReference = Ec2FleetLaunchTemplateConfigLaunchTemplateSpecificationOutputReference;
_c = JSII_RTTI_SYMBOL_1;
Ec2FleetLaunchTemplateConfigLaunchTemplateSpecificationOutputReference[_c] = { fqn: "@cdktf/provider-aws.ec2Fleet.Ec2FleetLaunchTemplateConfigLaunchTemplateSpecificationOutputReference", version: "19.15.0" };
function ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorCountToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max: cdktf.numberToTerraform(struct.max),
        min: cdktf.numberToTerraform(struct.min),
    };
}
exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorCountToTerraform = ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorCountToTerraform;
function ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorCountToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        max: {
            value: cdktf.numberToHclTerraform(struct.max),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        min: {
            value: cdktf.numberToHclTerraform(struct.min),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorCountToHclTerraform = ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorCountToHclTerraform;
class Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorCountOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._max !== undefined) {
            hasAnyValues = true;
            internalValueResult.max = this._max;
        }
        if (this._min !== undefined) {
            hasAnyValues = true;
            internalValueResult.min = this._min;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._max = undefined;
            this._min = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._max = value.max;
            this._min = value.min;
        }
    }
    get max() {
        return this.getNumberAttribute('max');
    }
    set max(value) {
        this._max = value;
    }
    resetMax() {
        this._max = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxInput() {
        return this._max;
    }
    get min() {
        return this.getNumberAttribute('min');
    }
    set min(value) {
        this._min = value;
    }
    resetMin() {
        this._min = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minInput() {
        return this._min;
    }
}
exports.Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorCountOutputReference = Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorCountOutputReference;
_d = JSII_RTTI_SYMBOL_1;
Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorCountOutputReference[_d] = { fqn: "@cdktf/provider-aws.ec2Fleet.Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorCountOutputReference", version: "19.15.0" };
function ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorTotalMemoryMibToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max: cdktf.numberToTerraform(struct.max),
        min: cdktf.numberToTerraform(struct.min),
    };
}
exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorTotalMemoryMibToTerraform = ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorTotalMemoryMibToTerraform;
function ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorTotalMemoryMibToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        max: {
            value: cdktf.numberToHclTerraform(struct.max),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        min: {
            value: cdktf.numberToHclTerraform(struct.min),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorTotalMemoryMibToHclTerraform = ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorTotalMemoryMibToHclTerraform;
class Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorTotalMemoryMibOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._max !== undefined) {
            hasAnyValues = true;
            internalValueResult.max = this._max;
        }
        if (this._min !== undefined) {
            hasAnyValues = true;
            internalValueResult.min = this._min;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._max = undefined;
            this._min = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._max = value.max;
            this._min = value.min;
        }
    }
    get max() {
        return this.getNumberAttribute('max');
    }
    set max(value) {
        this._max = value;
    }
    resetMax() {
        this._max = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxInput() {
        return this._max;
    }
    get min() {
        return this.getNumberAttribute('min');
    }
    set min(value) {
        this._min = value;
    }
    resetMin() {
        this._min = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minInput() {
        return this._min;
    }
}
exports.Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorTotalMemoryMibOutputReference = Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorTotalMemoryMibOutputReference;
_e = JSII_RTTI_SYMBOL_1;
Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorTotalMemoryMibOutputReference[_e] = { fqn: "@cdktf/provider-aws.ec2Fleet.Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorTotalMemoryMibOutputReference", version: "19.15.0" };
function ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsBaselineEbsBandwidthMbpsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max: cdktf.numberToTerraform(struct.max),
        min: cdktf.numberToTerraform(struct.min),
    };
}
exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsBaselineEbsBandwidthMbpsToTerraform = ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsBaselineEbsBandwidthMbpsToTerraform;
function ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsBaselineEbsBandwidthMbpsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        max: {
            value: cdktf.numberToHclTerraform(struct.max),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        min: {
            value: cdktf.numberToHclTerraform(struct.min),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsBaselineEbsBandwidthMbpsToHclTerraform = ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsBaselineEbsBandwidthMbpsToHclTerraform;
class Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsBaselineEbsBandwidthMbpsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._max !== undefined) {
            hasAnyValues = true;
            internalValueResult.max = this._max;
        }
        if (this._min !== undefined) {
            hasAnyValues = true;
            internalValueResult.min = this._min;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._max = undefined;
            this._min = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._max = value.max;
            this._min = value.min;
        }
    }
    get max() {
        return this.getNumberAttribute('max');
    }
    set max(value) {
        this._max = value;
    }
    resetMax() {
        this._max = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxInput() {
        return this._max;
    }
    get min() {
        return this.getNumberAttribute('min');
    }
    set min(value) {
        this._min = value;
    }
    resetMin() {
        this._min = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minInput() {
        return this._min;
    }
}
exports.Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsBaselineEbsBandwidthMbpsOutputReference = Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsBaselineEbsBandwidthMbpsOutputReference;
_f = JSII_RTTI_SYMBOL_1;
Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsBaselineEbsBandwidthMbpsOutputReference[_f] = { fqn: "@cdktf/provider-aws.ec2Fleet.Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsBaselineEbsBandwidthMbpsOutputReference", version: "19.15.0" };
function ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsMemoryGibPerVcpuToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max: cdktf.numberToTerraform(struct.max),
        min: cdktf.numberToTerraform(struct.min),
    };
}
exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsMemoryGibPerVcpuToTerraform = ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsMemoryGibPerVcpuToTerraform;
function ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsMemoryGibPerVcpuToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        max: {
            value: cdktf.numberToHclTerraform(struct.max),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        min: {
            value: cdktf.numberToHclTerraform(struct.min),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsMemoryGibPerVcpuToHclTerraform = ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsMemoryGibPerVcpuToHclTerraform;
class Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsMemoryGibPerVcpuOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._max !== undefined) {
            hasAnyValues = true;
            internalValueResult.max = this._max;
        }
        if (this._min !== undefined) {
            hasAnyValues = true;
            internalValueResult.min = this._min;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._max = undefined;
            this._min = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._max = value.max;
            this._min = value.min;
        }
    }
    get max() {
        return this.getNumberAttribute('max');
    }
    set max(value) {
        this._max = value;
    }
    resetMax() {
        this._max = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxInput() {
        return this._max;
    }
    get min() {
        return this.getNumberAttribute('min');
    }
    set min(value) {
        this._min = value;
    }
    resetMin() {
        this._min = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minInput() {
        return this._min;
    }
}
exports.Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsMemoryGibPerVcpuOutputReference = Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsMemoryGibPerVcpuOutputReference;
_g = JSII_RTTI_SYMBOL_1;
Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsMemoryGibPerVcpuOutputReference[_g] = { fqn: "@cdktf/provider-aws.ec2Fleet.Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsMemoryGibPerVcpuOutputReference", version: "19.15.0" };
function ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsMemoryMibToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max: cdktf.numberToTerraform(struct.max),
        min: cdktf.numberToTerraform(struct.min),
    };
}
exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsMemoryMibToTerraform = ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsMemoryMibToTerraform;
function ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsMemoryMibToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        max: {
            value: cdktf.numberToHclTerraform(struct.max),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        min: {
            value: cdktf.numberToHclTerraform(struct.min),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsMemoryMibToHclTerraform = ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsMemoryMibToHclTerraform;
class Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsMemoryMibOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._max !== undefined) {
            hasAnyValues = true;
            internalValueResult.max = this._max;
        }
        if (this._min !== undefined) {
            hasAnyValues = true;
            internalValueResult.min = this._min;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._max = undefined;
            this._min = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._max = value.max;
            this._min = value.min;
        }
    }
    get max() {
        return this.getNumberAttribute('max');
    }
    set max(value) {
        this._max = value;
    }
    resetMax() {
        this._max = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxInput() {
        return this._max;
    }
    get min() {
        return this.getNumberAttribute('min');
    }
    set min(value) {
        this._min = value;
    }
    // Temporarily expose input value. Use with caution.
    get minInput() {
        return this._min;
    }
}
exports.Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsMemoryMibOutputReference = Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsMemoryMibOutputReference;
_h = JSII_RTTI_SYMBOL_1;
Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsMemoryMibOutputReference[_h] = { fqn: "@cdktf/provider-aws.ec2Fleet.Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsMemoryMibOutputReference", version: "19.15.0" };
function ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsNetworkBandwidthGbpsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max: cdktf.numberToTerraform(struct.max),
        min: cdktf.numberToTerraform(struct.min),
    };
}
exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsNetworkBandwidthGbpsToTerraform = ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsNetworkBandwidthGbpsToTerraform;
function ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsNetworkBandwidthGbpsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        max: {
            value: cdktf.numberToHclTerraform(struct.max),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        min: {
            value: cdktf.numberToHclTerraform(struct.min),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsNetworkBandwidthGbpsToHclTerraform = ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsNetworkBandwidthGbpsToHclTerraform;
class Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsNetworkBandwidthGbpsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._max !== undefined) {
            hasAnyValues = true;
            internalValueResult.max = this._max;
        }
        if (this._min !== undefined) {
            hasAnyValues = true;
            internalValueResult.min = this._min;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._max = undefined;
            this._min = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._max = value.max;
            this._min = value.min;
        }
    }
    get max() {
        return this.getNumberAttribute('max');
    }
    set max(value) {
        this._max = value;
    }
    resetMax() {
        this._max = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxInput() {
        return this._max;
    }
    get min() {
        return this.getNumberAttribute('min');
    }
    set min(value) {
        this._min = value;
    }
    resetMin() {
        this._min = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minInput() {
        return this._min;
    }
}
exports.Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsNetworkBandwidthGbpsOutputReference = Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsNetworkBandwidthGbpsOutputReference;
_j = JSII_RTTI_SYMBOL_1;
Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsNetworkBandwidthGbpsOutputReference[_j] = { fqn: "@cdktf/provider-aws.ec2Fleet.Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsNetworkBandwidthGbpsOutputReference", version: "19.15.0" };
function ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsNetworkInterfaceCountToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max: cdktf.numberToTerraform(struct.max),
        min: cdktf.numberToTerraform(struct.min),
    };
}
exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsNetworkInterfaceCountToTerraform = ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsNetworkInterfaceCountToTerraform;
function ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsNetworkInterfaceCountToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        max: {
            value: cdktf.numberToHclTerraform(struct.max),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        min: {
            value: cdktf.numberToHclTerraform(struct.min),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsNetworkInterfaceCountToHclTerraform = ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsNetworkInterfaceCountToHclTerraform;
class Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsNetworkInterfaceCountOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._max !== undefined) {
            hasAnyValues = true;
            internalValueResult.max = this._max;
        }
        if (this._min !== undefined) {
            hasAnyValues = true;
            internalValueResult.min = this._min;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._max = undefined;
            this._min = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._max = value.max;
            this._min = value.min;
        }
    }
    get max() {
        return this.getNumberAttribute('max');
    }
    set max(value) {
        this._max = value;
    }
    resetMax() {
        this._max = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxInput() {
        return this._max;
    }
    get min() {
        return this.getNumberAttribute('min');
    }
    set min(value) {
        this._min = value;
    }
    resetMin() {
        this._min = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minInput() {
        return this._min;
    }
}
exports.Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsNetworkInterfaceCountOutputReference = Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsNetworkInterfaceCountOutputReference;
_k = JSII_RTTI_SYMBOL_1;
Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsNetworkInterfaceCountOutputReference[_k] = { fqn: "@cdktf/provider-aws.ec2Fleet.Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsNetworkInterfaceCountOutputReference", version: "19.15.0" };
function ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsTotalLocalStorageGbToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max: cdktf.numberToTerraform(struct.max),
        min: cdktf.numberToTerraform(struct.min),
    };
}
exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsTotalLocalStorageGbToTerraform = ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsTotalLocalStorageGbToTerraform;
function ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsTotalLocalStorageGbToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        max: {
            value: cdktf.numberToHclTerraform(struct.max),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        min: {
            value: cdktf.numberToHclTerraform(struct.min),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsTotalLocalStorageGbToHclTerraform = ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsTotalLocalStorageGbToHclTerraform;
class Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsTotalLocalStorageGbOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._max !== undefined) {
            hasAnyValues = true;
            internalValueResult.max = this._max;
        }
        if (this._min !== undefined) {
            hasAnyValues = true;
            internalValueResult.min = this._min;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._max = undefined;
            this._min = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._max = value.max;
            this._min = value.min;
        }
    }
    get max() {
        return this.getNumberAttribute('max');
    }
    set max(value) {
        this._max = value;
    }
    resetMax() {
        this._max = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxInput() {
        return this._max;
    }
    get min() {
        return this.getNumberAttribute('min');
    }
    set min(value) {
        this._min = value;
    }
    resetMin() {
        this._min = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minInput() {
        return this._min;
    }
}
exports.Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsTotalLocalStorageGbOutputReference = Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsTotalLocalStorageGbOutputReference;
_l = JSII_RTTI_SYMBOL_1;
Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsTotalLocalStorageGbOutputReference[_l] = { fqn: "@cdktf/provider-aws.ec2Fleet.Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsTotalLocalStorageGbOutputReference", version: "19.15.0" };
function ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsVcpuCountToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max: cdktf.numberToTerraform(struct.max),
        min: cdktf.numberToTerraform(struct.min),
    };
}
exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsVcpuCountToTerraform = ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsVcpuCountToTerraform;
function ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsVcpuCountToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        max: {
            value: cdktf.numberToHclTerraform(struct.max),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        min: {
            value: cdktf.numberToHclTerraform(struct.min),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsVcpuCountToHclTerraform = ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsVcpuCountToHclTerraform;
class Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsVcpuCountOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._max !== undefined) {
            hasAnyValues = true;
            internalValueResult.max = this._max;
        }
        if (this._min !== undefined) {
            hasAnyValues = true;
            internalValueResult.min = this._min;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._max = undefined;
            this._min = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._max = value.max;
            this._min = value.min;
        }
    }
    get max() {
        return this.getNumberAttribute('max');
    }
    set max(value) {
        this._max = value;
    }
    resetMax() {
        this._max = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxInput() {
        return this._max;
    }
    get min() {
        return this.getNumberAttribute('min');
    }
    set min(value) {
        this._min = value;
    }
    // Temporarily expose input value. Use with caution.
    get minInput() {
        return this._min;
    }
}
exports.Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsVcpuCountOutputReference = Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsVcpuCountOutputReference;
_m = JSII_RTTI_SYMBOL_1;
Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsVcpuCountOutputReference[_m] = { fqn: "@cdktf/provider-aws.ec2Fleet.Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsVcpuCountOutputReference", version: "19.15.0" };
function ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        accelerator_manufacturers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.acceleratorManufacturers),
        accelerator_names: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.acceleratorNames),
        accelerator_types: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.acceleratorTypes),
        allowed_instance_types: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowedInstanceTypes),
        bare_metal: cdktf.stringToTerraform(struct.bareMetal),
        burstable_performance: cdktf.stringToTerraform(struct.burstablePerformance),
        cpu_manufacturers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.cpuManufacturers),
        excluded_instance_types: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.excludedInstanceTypes),
        instance_generations: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.instanceGenerations),
        local_storage: cdktf.stringToTerraform(struct.localStorage),
        local_storage_types: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.localStorageTypes),
        on_demand_max_price_percentage_over_lowest_price: cdktf.numberToTerraform(struct.onDemandMaxPricePercentageOverLowestPrice),
        require_hibernate_support: cdktf.booleanToTerraform(struct.requireHibernateSupport),
        spot_max_price_percentage_over_lowest_price: cdktf.numberToTerraform(struct.spotMaxPricePercentageOverLowestPrice),
        accelerator_count: ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorCountToTerraform(struct.acceleratorCount),
        accelerator_total_memory_mib: ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorTotalMemoryMibToTerraform(struct.acceleratorTotalMemoryMib),
        baseline_ebs_bandwidth_mbps: ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsBaselineEbsBandwidthMbpsToTerraform(struct.baselineEbsBandwidthMbps),
        memory_gib_per_vcpu: ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsMemoryGibPerVcpuToTerraform(struct.memoryGibPerVcpu),
        memory_mib: ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsMemoryMibToTerraform(struct.memoryMib),
        network_bandwidth_gbps: ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsNetworkBandwidthGbpsToTerraform(struct.networkBandwidthGbps),
        network_interface_count: ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsNetworkInterfaceCountToTerraform(struct.networkInterfaceCount),
        total_local_storage_gb: ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsTotalLocalStorageGbToTerraform(struct.totalLocalStorageGb),
        vcpu_count: ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsVcpuCountToTerraform(struct.vcpuCount),
    };
}
exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsToTerraform = ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsToTerraform;
function ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        accelerator_manufacturers: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.acceleratorManufacturers),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        accelerator_names: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.acceleratorNames),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        accelerator_types: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.acceleratorTypes),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        allowed_instance_types: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.allowedInstanceTypes),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        bare_metal: {
            value: cdktf.stringToHclTerraform(struct.bareMetal),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        burstable_performance: {
            value: cdktf.stringToHclTerraform(struct.burstablePerformance),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cpu_manufacturers: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.cpuManufacturers),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        excluded_instance_types: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.excludedInstanceTypes),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        instance_generations: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.instanceGenerations),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        local_storage: {
            value: cdktf.stringToHclTerraform(struct.localStorage),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        local_storage_types: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.localStorageTypes),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        on_demand_max_price_percentage_over_lowest_price: {
            value: cdktf.numberToHclTerraform(struct.onDemandMaxPricePercentageOverLowestPrice),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        require_hibernate_support: {
            value: cdktf.booleanToHclTerraform(struct.requireHibernateSupport),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        spot_max_price_percentage_over_lowest_price: {
            value: cdktf.numberToHclTerraform(struct.spotMaxPricePercentageOverLowestPrice),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        accelerator_count: {
            value: ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorCountToHclTerraform(struct.acceleratorCount),
            isBlock: true,
            type: "list",
            storageClassType: "Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorCountList",
        },
        accelerator_total_memory_mib: {
            value: ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorTotalMemoryMibToHclTerraform(struct.acceleratorTotalMemoryMib),
            isBlock: true,
            type: "list",
            storageClassType: "Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorTotalMemoryMibList",
        },
        baseline_ebs_bandwidth_mbps: {
            value: ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsBaselineEbsBandwidthMbpsToHclTerraform(struct.baselineEbsBandwidthMbps),
            isBlock: true,
            type: "list",
            storageClassType: "Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsBaselineEbsBandwidthMbpsList",
        },
        memory_gib_per_vcpu: {
            value: ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsMemoryGibPerVcpuToHclTerraform(struct.memoryGibPerVcpu),
            isBlock: true,
            type: "list",
            storageClassType: "Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsMemoryGibPerVcpuList",
        },
        memory_mib: {
            value: ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsMemoryMibToHclTerraform(struct.memoryMib),
            isBlock: true,
            type: "list",
            storageClassType: "Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsMemoryMibList",
        },
        network_bandwidth_gbps: {
            value: ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsNetworkBandwidthGbpsToHclTerraform(struct.networkBandwidthGbps),
            isBlock: true,
            type: "list",
            storageClassType: "Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsNetworkBandwidthGbpsList",
        },
        network_interface_count: {
            value: ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsNetworkInterfaceCountToHclTerraform(struct.networkInterfaceCount),
            isBlock: true,
            type: "list",
            storageClassType: "Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsNetworkInterfaceCountList",
        },
        total_local_storage_gb: {
            value: ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsTotalLocalStorageGbToHclTerraform(struct.totalLocalStorageGb),
            isBlock: true,
            type: "list",
            storageClassType: "Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsTotalLocalStorageGbList",
        },
        vcpu_count: {
            value: ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsVcpuCountToHclTerraform(struct.vcpuCount),
            isBlock: true,
            type: "list",
            storageClassType: "Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsVcpuCountList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsToHclTerraform = ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsToHclTerraform;
class Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // accelerator_count - computed: false, optional: true, required: false
        this._acceleratorCount = new Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorCountOutputReference(this, "accelerator_count");
        // accelerator_total_memory_mib - computed: false, optional: true, required: false
        this._acceleratorTotalMemoryMib = new Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsAcceleratorTotalMemoryMibOutputReference(this, "accelerator_total_memory_mib");
        // baseline_ebs_bandwidth_mbps - computed: false, optional: true, required: false
        this._baselineEbsBandwidthMbps = new Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsBaselineEbsBandwidthMbpsOutputReference(this, "baseline_ebs_bandwidth_mbps");
        // memory_gib_per_vcpu - computed: false, optional: true, required: false
        this._memoryGibPerVcpu = new Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsMemoryGibPerVcpuOutputReference(this, "memory_gib_per_vcpu");
        // memory_mib - computed: false, optional: false, required: true
        this._memoryMib = new Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsMemoryMibOutputReference(this, "memory_mib");
        // network_bandwidth_gbps - computed: false, optional: true, required: false
        this._networkBandwidthGbps = new Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsNetworkBandwidthGbpsOutputReference(this, "network_bandwidth_gbps");
        // network_interface_count - computed: false, optional: true, required: false
        this._networkInterfaceCount = new Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsNetworkInterfaceCountOutputReference(this, "network_interface_count");
        // total_local_storage_gb - computed: false, optional: true, required: false
        this._totalLocalStorageGb = new Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsTotalLocalStorageGbOutputReference(this, "total_local_storage_gb");
        // vcpu_count - computed: false, optional: false, required: true
        this._vcpuCount = new Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsVcpuCountOutputReference(this, "vcpu_count");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._acceleratorManufacturers !== undefined) {
            hasAnyValues = true;
            internalValueResult.acceleratorManufacturers = this._acceleratorManufacturers;
        }
        if (this._acceleratorNames !== undefined) {
            hasAnyValues = true;
            internalValueResult.acceleratorNames = this._acceleratorNames;
        }
        if (this._acceleratorTypes !== undefined) {
            hasAnyValues = true;
            internalValueResult.acceleratorTypes = this._acceleratorTypes;
        }
        if (this._allowedInstanceTypes !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedInstanceTypes = this._allowedInstanceTypes;
        }
        if (this._bareMetal !== undefined) {
            hasAnyValues = true;
            internalValueResult.bareMetal = this._bareMetal;
        }
        if (this._burstablePerformance !== undefined) {
            hasAnyValues = true;
            internalValueResult.burstablePerformance = this._burstablePerformance;
        }
        if (this._cpuManufacturers !== undefined) {
            hasAnyValues = true;
            internalValueResult.cpuManufacturers = this._cpuManufacturers;
        }
        if (this._excludedInstanceTypes !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludedInstanceTypes = this._excludedInstanceTypes;
        }
        if (this._instanceGenerations !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceGenerations = this._instanceGenerations;
        }
        if (this._localStorage !== undefined) {
            hasAnyValues = true;
            internalValueResult.localStorage = this._localStorage;
        }
        if (this._localStorageTypes !== undefined) {
            hasAnyValues = true;
            internalValueResult.localStorageTypes = this._localStorageTypes;
        }
        if (this._onDemandMaxPricePercentageOverLowestPrice !== undefined) {
            hasAnyValues = true;
            internalValueResult.onDemandMaxPricePercentageOverLowestPrice = this._onDemandMaxPricePercentageOverLowestPrice;
        }
        if (this._requireHibernateSupport !== undefined) {
            hasAnyValues = true;
            internalValueResult.requireHibernateSupport = this._requireHibernateSupport;
        }
        if (this._spotMaxPricePercentageOverLowestPrice !== undefined) {
            hasAnyValues = true;
            internalValueResult.spotMaxPricePercentageOverLowestPrice = this._spotMaxPricePercentageOverLowestPrice;
        }
        if (this._acceleratorCount?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.acceleratorCount = this._acceleratorCount?.internalValue;
        }
        if (this._acceleratorTotalMemoryMib?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.acceleratorTotalMemoryMib = this._acceleratorTotalMemoryMib?.internalValue;
        }
        if (this._baselineEbsBandwidthMbps?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.baselineEbsBandwidthMbps = this._baselineEbsBandwidthMbps?.internalValue;
        }
        if (this._memoryGibPerVcpu?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.memoryGibPerVcpu = this._memoryGibPerVcpu?.internalValue;
        }
        if (this._memoryMib?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.memoryMib = this._memoryMib?.internalValue;
        }
        if (this._networkBandwidthGbps?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.networkBandwidthGbps = this._networkBandwidthGbps?.internalValue;
        }
        if (this._networkInterfaceCount?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.networkInterfaceCount = this._networkInterfaceCount?.internalValue;
        }
        if (this._totalLocalStorageGb?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.totalLocalStorageGb = this._totalLocalStorageGb?.internalValue;
        }
        if (this._vcpuCount?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.vcpuCount = this._vcpuCount?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._acceleratorManufacturers = undefined;
            this._acceleratorNames = undefined;
            this._acceleratorTypes = undefined;
            this._allowedInstanceTypes = undefined;
            this._bareMetal = undefined;
            this._burstablePerformance = undefined;
            this._cpuManufacturers = undefined;
            this._excludedInstanceTypes = undefined;
            this._instanceGenerations = undefined;
            this._localStorage = undefined;
            this._localStorageTypes = undefined;
            this._onDemandMaxPricePercentageOverLowestPrice = undefined;
            this._requireHibernateSupport = undefined;
            this._spotMaxPricePercentageOverLowestPrice = undefined;
            this._acceleratorCount.internalValue = undefined;
            this._acceleratorTotalMemoryMib.internalValue = undefined;
            this._baselineEbsBandwidthMbps.internalValue = undefined;
            this._memoryGibPerVcpu.internalValue = undefined;
            this._memoryMib.internalValue = undefined;
            this._networkBandwidthGbps.internalValue = undefined;
            this._networkInterfaceCount.internalValue = undefined;
            this._totalLocalStorageGb.internalValue = undefined;
            this._vcpuCount.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._acceleratorManufacturers = value.acceleratorManufacturers;
            this._acceleratorNames = value.acceleratorNames;
            this._acceleratorTypes = value.acceleratorTypes;
            this._allowedInstanceTypes = value.allowedInstanceTypes;
            this._bareMetal = value.bareMetal;
            this._burstablePerformance = value.burstablePerformance;
            this._cpuManufacturers = value.cpuManufacturers;
            this._excludedInstanceTypes = value.excludedInstanceTypes;
            this._instanceGenerations = value.instanceGenerations;
            this._localStorage = value.localStorage;
            this._localStorageTypes = value.localStorageTypes;
            this._onDemandMaxPricePercentageOverLowestPrice = value.onDemandMaxPricePercentageOverLowestPrice;
            this._requireHibernateSupport = value.requireHibernateSupport;
            this._spotMaxPricePercentageOverLowestPrice = value.spotMaxPricePercentageOverLowestPrice;
            this._acceleratorCount.internalValue = value.acceleratorCount;
            this._acceleratorTotalMemoryMib.internalValue = value.acceleratorTotalMemoryMib;
            this._baselineEbsBandwidthMbps.internalValue = value.baselineEbsBandwidthMbps;
            this._memoryGibPerVcpu.internalValue = value.memoryGibPerVcpu;
            this._memoryMib.internalValue = value.memoryMib;
            this._networkBandwidthGbps.internalValue = value.networkBandwidthGbps;
            this._networkInterfaceCount.internalValue = value.networkInterfaceCount;
            this._totalLocalStorageGb.internalValue = value.totalLocalStorageGb;
            this._vcpuCount.internalValue = value.vcpuCount;
        }
    }
    get acceleratorManufacturers() {
        return cdktf.Fn.tolist(this.getListAttribute('accelerator_manufacturers'));
    }
    set acceleratorManufacturers(value) {
        this._acceleratorManufacturers = value;
    }
    resetAcceleratorManufacturers() {
        this._acceleratorManufacturers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get acceleratorManufacturersInput() {
        return this._acceleratorManufacturers;
    }
    get acceleratorNames() {
        return cdktf.Fn.tolist(this.getListAttribute('accelerator_names'));
    }
    set acceleratorNames(value) {
        this._acceleratorNames = value;
    }
    resetAcceleratorNames() {
        this._acceleratorNames = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get acceleratorNamesInput() {
        return this._acceleratorNames;
    }
    get acceleratorTypes() {
        return cdktf.Fn.tolist(this.getListAttribute('accelerator_types'));
    }
    set acceleratorTypes(value) {
        this._acceleratorTypes = value;
    }
    resetAcceleratorTypes() {
        this._acceleratorTypes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get acceleratorTypesInput() {
        return this._acceleratorTypes;
    }
    get allowedInstanceTypes() {
        return cdktf.Fn.tolist(this.getListAttribute('allowed_instance_types'));
    }
    set allowedInstanceTypes(value) {
        this._allowedInstanceTypes = value;
    }
    resetAllowedInstanceTypes() {
        this._allowedInstanceTypes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedInstanceTypesInput() {
        return this._allowedInstanceTypes;
    }
    get bareMetal() {
        return this.getStringAttribute('bare_metal');
    }
    set bareMetal(value) {
        this._bareMetal = value;
    }
    resetBareMetal() {
        this._bareMetal = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bareMetalInput() {
        return this._bareMetal;
    }
    get burstablePerformance() {
        return this.getStringAttribute('burstable_performance');
    }
    set burstablePerformance(value) {
        this._burstablePerformance = value;
    }
    resetBurstablePerformance() {
        this._burstablePerformance = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get burstablePerformanceInput() {
        return this._burstablePerformance;
    }
    get cpuManufacturers() {
        return cdktf.Fn.tolist(this.getListAttribute('cpu_manufacturers'));
    }
    set cpuManufacturers(value) {
        this._cpuManufacturers = value;
    }
    resetCpuManufacturers() {
        this._cpuManufacturers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cpuManufacturersInput() {
        return this._cpuManufacturers;
    }
    get excludedInstanceTypes() {
        return cdktf.Fn.tolist(this.getListAttribute('excluded_instance_types'));
    }
    set excludedInstanceTypes(value) {
        this._excludedInstanceTypes = value;
    }
    resetExcludedInstanceTypes() {
        this._excludedInstanceTypes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludedInstanceTypesInput() {
        return this._excludedInstanceTypes;
    }
    get instanceGenerations() {
        return cdktf.Fn.tolist(this.getListAttribute('instance_generations'));
    }
    set instanceGenerations(value) {
        this._instanceGenerations = value;
    }
    resetInstanceGenerations() {
        this._instanceGenerations = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceGenerationsInput() {
        return this._instanceGenerations;
    }
    get localStorage() {
        return this.getStringAttribute('local_storage');
    }
    set localStorage(value) {
        this._localStorage = value;
    }
    resetLocalStorage() {
        this._localStorage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localStorageInput() {
        return this._localStorage;
    }
    get localStorageTypes() {
        return cdktf.Fn.tolist(this.getListAttribute('local_storage_types'));
    }
    set localStorageTypes(value) {
        this._localStorageTypes = value;
    }
    resetLocalStorageTypes() {
        this._localStorageTypes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localStorageTypesInput() {
        return this._localStorageTypes;
    }
    get onDemandMaxPricePercentageOverLowestPrice() {
        return this.getNumberAttribute('on_demand_max_price_percentage_over_lowest_price');
    }
    set onDemandMaxPricePercentageOverLowestPrice(value) {
        this._onDemandMaxPricePercentageOverLowestPrice = value;
    }
    resetOnDemandMaxPricePercentageOverLowestPrice() {
        this._onDemandMaxPricePercentageOverLowestPrice = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get onDemandMaxPricePercentageOverLowestPriceInput() {
        return this._onDemandMaxPricePercentageOverLowestPrice;
    }
    get requireHibernateSupport() {
        return this.getBooleanAttribute('require_hibernate_support');
    }
    set requireHibernateSupport(value) {
        this._requireHibernateSupport = value;
    }
    resetRequireHibernateSupport() {
        this._requireHibernateSupport = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requireHibernateSupportInput() {
        return this._requireHibernateSupport;
    }
    get spotMaxPricePercentageOverLowestPrice() {
        return this.getNumberAttribute('spot_max_price_percentage_over_lowest_price');
    }
    set spotMaxPricePercentageOverLowestPrice(value) {
        this._spotMaxPricePercentageOverLowestPrice = value;
    }
    resetSpotMaxPricePercentageOverLowestPrice() {
        this._spotMaxPricePercentageOverLowestPrice = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get spotMaxPricePercentageOverLowestPriceInput() {
        return this._spotMaxPricePercentageOverLowestPrice;
    }
    get acceleratorCount() {
        return this._acceleratorCount;
    }
    putAcceleratorCount(value) {
        this._acceleratorCount.internalValue = value;
    }
    resetAcceleratorCount() {
        this._acceleratorCount.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get acceleratorCountInput() {
        return this._acceleratorCount.internalValue;
    }
    get acceleratorTotalMemoryMib() {
        return this._acceleratorTotalMemoryMib;
    }
    putAcceleratorTotalMemoryMib(value) {
        this._acceleratorTotalMemoryMib.internalValue = value;
    }
    resetAcceleratorTotalMemoryMib() {
        this._acceleratorTotalMemoryMib.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get acceleratorTotalMemoryMibInput() {
        return this._acceleratorTotalMemoryMib.internalValue;
    }
    get baselineEbsBandwidthMbps() {
        return this._baselineEbsBandwidthMbps;
    }
    putBaselineEbsBandwidthMbps(value) {
        this._baselineEbsBandwidthMbps.internalValue = value;
    }
    resetBaselineEbsBandwidthMbps() {
        this._baselineEbsBandwidthMbps.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get baselineEbsBandwidthMbpsInput() {
        return this._baselineEbsBandwidthMbps.internalValue;
    }
    get memoryGibPerVcpu() {
        return this._memoryGibPerVcpu;
    }
    putMemoryGibPerVcpu(value) {
        this._memoryGibPerVcpu.internalValue = value;
    }
    resetMemoryGibPerVcpu() {
        this._memoryGibPerVcpu.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get memoryGibPerVcpuInput() {
        return this._memoryGibPerVcpu.internalValue;
    }
    get memoryMib() {
        return this._memoryMib;
    }
    putMemoryMib(value) {
        this._memoryMib.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get memoryMibInput() {
        return this._memoryMib.internalValue;
    }
    get networkBandwidthGbps() {
        return this._networkBandwidthGbps;
    }
    putNetworkBandwidthGbps(value) {
        this._networkBandwidthGbps.internalValue = value;
    }
    resetNetworkBandwidthGbps() {
        this._networkBandwidthGbps.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkBandwidthGbpsInput() {
        return this._networkBandwidthGbps.internalValue;
    }
    get networkInterfaceCount() {
        return this._networkInterfaceCount;
    }
    putNetworkInterfaceCount(value) {
        this._networkInterfaceCount.internalValue = value;
    }
    resetNetworkInterfaceCount() {
        this._networkInterfaceCount.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkInterfaceCountInput() {
        return this._networkInterfaceCount.internalValue;
    }
    get totalLocalStorageGb() {
        return this._totalLocalStorageGb;
    }
    putTotalLocalStorageGb(value) {
        this._totalLocalStorageGb.internalValue = value;
    }
    resetTotalLocalStorageGb() {
        this._totalLocalStorageGb.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get totalLocalStorageGbInput() {
        return this._totalLocalStorageGb.internalValue;
    }
    get vcpuCount() {
        return this._vcpuCount;
    }
    putVcpuCount(value) {
        this._vcpuCount.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get vcpuCountInput() {
        return this._vcpuCount.internalValue;
    }
}
exports.Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsOutputReference = Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsOutputReference;
_o = JSII_RTTI_SYMBOL_1;
Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsOutputReference[_o] = { fqn: "@cdktf/provider-aws.ec2Fleet.Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsOutputReference", version: "19.15.0" };
function ec2FleetLaunchTemplateConfigOverrideToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        availability_zone: cdktf.stringToTerraform(struct.availabilityZone),
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        max_price: cdktf.stringToTerraform(struct.maxPrice),
        priority: cdktf.numberToTerraform(struct.priority),
        subnet_id: cdktf.stringToTerraform(struct.subnetId),
        weighted_capacity: cdktf.numberToTerraform(struct.weightedCapacity),
        instance_requirements: ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsToTerraform(struct.instanceRequirements),
    };
}
exports.ec2FleetLaunchTemplateConfigOverrideToTerraform = ec2FleetLaunchTemplateConfigOverrideToTerraform;
function ec2FleetLaunchTemplateConfigOverrideToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        availability_zone: {
            value: cdktf.stringToHclTerraform(struct.availabilityZone),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        instance_type: {
            value: cdktf.stringToHclTerraform(struct.instanceType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        max_price: {
            value: cdktf.stringToHclTerraform(struct.maxPrice),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        priority: {
            value: cdktf.numberToHclTerraform(struct.priority),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        subnet_id: {
            value: cdktf.stringToHclTerraform(struct.subnetId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        weighted_capacity: {
            value: cdktf.numberToHclTerraform(struct.weightedCapacity),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        instance_requirements: {
            value: ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsToHclTerraform(struct.instanceRequirements),
            isBlock: true,
            type: "list",
            storageClassType: "Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.ec2FleetLaunchTemplateConfigOverrideToHclTerraform = ec2FleetLaunchTemplateConfigOverrideToHclTerraform;
class Ec2FleetLaunchTemplateConfigOverrideOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // instance_requirements - computed: false, optional: true, required: false
        this._instanceRequirements = new Ec2FleetLaunchTemplateConfigOverrideInstanceRequirementsOutputReference(this, "instance_requirements");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._availabilityZone !== undefined) {
            hasAnyValues = true;
            internalValueResult.availabilityZone = this._availabilityZone;
        }
        if (this._instanceType !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceType = this._instanceType;
        }
        if (this._maxPrice !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxPrice = this._maxPrice;
        }
        if (this._priority !== undefined) {
            hasAnyValues = true;
            internalValueResult.priority = this._priority;
        }
        if (this._subnetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnetId = this._subnetId;
        }
        if (this._weightedCapacity !== undefined) {
            hasAnyValues = true;
            internalValueResult.weightedCapacity = this._weightedCapacity;
        }
        if (this._instanceRequirements?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceRequirements = this._instanceRequirements?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._availabilityZone = undefined;
            this._instanceType = undefined;
            this._maxPrice = undefined;
            this._priority = undefined;
            this._subnetId = undefined;
            this._weightedCapacity = undefined;
            this._instanceRequirements.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._availabilityZone = value.availabilityZone;
            this._instanceType = value.instanceType;
            this._maxPrice = value.maxPrice;
            this._priority = value.priority;
            this._subnetId = value.subnetId;
            this._weightedCapacity = value.weightedCapacity;
            this._instanceRequirements.internalValue = value.instanceRequirements;
        }
    }
    get availabilityZone() {
        return this.getStringAttribute('availability_zone');
    }
    set availabilityZone(value) {
        this._availabilityZone = value;
    }
    resetAvailabilityZone() {
        this._availabilityZone = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get availabilityZoneInput() {
        return this._availabilityZone;
    }
    get instanceType() {
        return this.getStringAttribute('instance_type');
    }
    set instanceType(value) {
        this._instanceType = value;
    }
    resetInstanceType() {
        this._instanceType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceTypeInput() {
        return this._instanceType;
    }
    get maxPrice() {
        return this.getStringAttribute('max_price');
    }
    set maxPrice(value) {
        this._maxPrice = value;
    }
    resetMaxPrice() {
        this._maxPrice = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxPriceInput() {
        return this._maxPrice;
    }
    get priority() {
        return this.getNumberAttribute('priority');
    }
    set priority(value) {
        this._priority = value;
    }
    resetPriority() {
        this._priority = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get priorityInput() {
        return this._priority;
    }
    get subnetId() {
        return this.getStringAttribute('subnet_id');
    }
    set subnetId(value) {
        this._subnetId = value;
    }
    resetSubnetId() {
        this._subnetId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subnetIdInput() {
        return this._subnetId;
    }
    get weightedCapacity() {
        return this.getNumberAttribute('weighted_capacity');
    }
    set weightedCapacity(value) {
        this._weightedCapacity = value;
    }
    resetWeightedCapacity() {
        this._weightedCapacity = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get weightedCapacityInput() {
        return this._weightedCapacity;
    }
    get instanceRequirements() {
        return this._instanceRequirements;
    }
    putInstanceRequirements(value) {
        this._instanceRequirements.internalValue = value;
    }
    resetInstanceRequirements() {
        this._instanceRequirements.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceRequirementsInput() {
        return this._instanceRequirements.internalValue;
    }
}
exports.Ec2FleetLaunchTemplateConfigOverrideOutputReference = Ec2FleetLaunchTemplateConfigOverrideOutputReference;
_p = JSII_RTTI_SYMBOL_1;
Ec2FleetLaunchTemplateConfigOverrideOutputReference[_p] = { fqn: "@cdktf/provider-aws.ec2Fleet.Ec2FleetLaunchTemplateConfigOverrideOutputReference", version: "19.15.0" };
class Ec2FleetLaunchTemplateConfigOverrideList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Ec2FleetLaunchTemplateConfigOverrideOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Ec2FleetLaunchTemplateConfigOverrideList = Ec2FleetLaunchTemplateConfigOverrideList;
_q = JSII_RTTI_SYMBOL_1;
Ec2FleetLaunchTemplateConfigOverrideList[_q] = { fqn: "@cdktf/provider-aws.ec2Fleet.Ec2FleetLaunchTemplateConfigOverrideList", version: "19.15.0" };
function ec2FleetLaunchTemplateConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        launch_template_specification: ec2FleetLaunchTemplateConfigLaunchTemplateSpecificationToTerraform(struct.launchTemplateSpecification),
        override: cdktf.listMapper(ec2FleetLaunchTemplateConfigOverrideToTerraform, true)(struct.override),
    };
}
exports.ec2FleetLaunchTemplateConfigToTerraform = ec2FleetLaunchTemplateConfigToTerraform;
function ec2FleetLaunchTemplateConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        launch_template_specification: {
            value: ec2FleetLaunchTemplateConfigLaunchTemplateSpecificationToHclTerraform(struct.launchTemplateSpecification),
            isBlock: true,
            type: "list",
            storageClassType: "Ec2FleetLaunchTemplateConfigLaunchTemplateSpecificationList",
        },
        override: {
            value: cdktf.listMapperHcl(ec2FleetLaunchTemplateConfigOverrideToHclTerraform, true)(struct.override),
            isBlock: true,
            type: "list",
            storageClassType: "Ec2FleetLaunchTemplateConfigOverrideList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.ec2FleetLaunchTemplateConfigToHclTerraform = ec2FleetLaunchTemplateConfigToHclTerraform;
class Ec2FleetLaunchTemplateConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // launch_template_specification - computed: false, optional: true, required: false
        this._launchTemplateSpecification = new Ec2FleetLaunchTemplateConfigLaunchTemplateSpecificationOutputReference(this, "launch_template_specification");
        // override - computed: false, optional: true, required: false
        this._override = new Ec2FleetLaunchTemplateConfigOverrideList(this, "override", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._launchTemplateSpecification?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.launchTemplateSpecification = this._launchTemplateSpecification?.internalValue;
        }
        if (this._override?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.override = this._override?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._launchTemplateSpecification.internalValue = undefined;
            this._override.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._launchTemplateSpecification.internalValue = value.launchTemplateSpecification;
            this._override.internalValue = value.override;
        }
    }
    get launchTemplateSpecification() {
        return this._launchTemplateSpecification;
    }
    putLaunchTemplateSpecification(value) {
        this._launchTemplateSpecification.internalValue = value;
    }
    resetLaunchTemplateSpecification() {
        this._launchTemplateSpecification.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get launchTemplateSpecificationInput() {
        return this._launchTemplateSpecification.internalValue;
    }
    get override() {
        return this._override;
    }
    putOverride(value) {
        this._override.internalValue = value;
    }
    resetOverride() {
        this._override.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get overrideInput() {
        return this._override.internalValue;
    }
}
exports.Ec2FleetLaunchTemplateConfigOutputReference = Ec2FleetLaunchTemplateConfigOutputReference;
_r = JSII_RTTI_SYMBOL_1;
Ec2FleetLaunchTemplateConfigOutputReference[_r] = { fqn: "@cdktf/provider-aws.ec2Fleet.Ec2FleetLaunchTemplateConfigOutputReference", version: "19.15.0" };
class Ec2FleetLaunchTemplateConfigList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Ec2FleetLaunchTemplateConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Ec2FleetLaunchTemplateConfigList = Ec2FleetLaunchTemplateConfigList;
_s = JSII_RTTI_SYMBOL_1;
Ec2FleetLaunchTemplateConfigList[_s] = { fqn: "@cdktf/provider-aws.ec2Fleet.Ec2FleetLaunchTemplateConfigList", version: "19.15.0" };
function ec2FleetOnDemandOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allocation_strategy: cdktf.stringToTerraform(struct.allocationStrategy),
        max_total_price: cdktf.stringToTerraform(struct.maxTotalPrice),
        min_target_capacity: cdktf.numberToTerraform(struct.minTargetCapacity),
        single_availability_zone: cdktf.booleanToTerraform(struct.singleAvailabilityZone),
        single_instance_type: cdktf.booleanToTerraform(struct.singleInstanceType),
    };
}
exports.ec2FleetOnDemandOptionsToTerraform = ec2FleetOnDemandOptionsToTerraform;
function ec2FleetOnDemandOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allocation_strategy: {
            value: cdktf.stringToHclTerraform(struct.allocationStrategy),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        max_total_price: {
            value: cdktf.stringToHclTerraform(struct.maxTotalPrice),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        min_target_capacity: {
            value: cdktf.numberToHclTerraform(struct.minTargetCapacity),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        single_availability_zone: {
            value: cdktf.booleanToHclTerraform(struct.singleAvailabilityZone),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        single_instance_type: {
            value: cdktf.booleanToHclTerraform(struct.singleInstanceType),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.ec2FleetOnDemandOptionsToHclTerraform = ec2FleetOnDemandOptionsToHclTerraform;
class Ec2FleetOnDemandOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allocationStrategy !== undefined) {
            hasAnyValues = true;
            internalValueResult.allocationStrategy = this._allocationStrategy;
        }
        if (this._maxTotalPrice !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxTotalPrice = this._maxTotalPrice;
        }
        if (this._minTargetCapacity !== undefined) {
            hasAnyValues = true;
            internalValueResult.minTargetCapacity = this._minTargetCapacity;
        }
        if (this._singleAvailabilityZone !== undefined) {
            hasAnyValues = true;
            internalValueResult.singleAvailabilityZone = this._singleAvailabilityZone;
        }
        if (this._singleInstanceType !== undefined) {
            hasAnyValues = true;
            internalValueResult.singleInstanceType = this._singleInstanceType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allocationStrategy = undefined;
            this._maxTotalPrice = undefined;
            this._minTargetCapacity = undefined;
            this._singleAvailabilityZone = undefined;
            this._singleInstanceType = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allocationStrategy = value.allocationStrategy;
            this._maxTotalPrice = value.maxTotalPrice;
            this._minTargetCapacity = value.minTargetCapacity;
            this._singleAvailabilityZone = value.singleAvailabilityZone;
            this._singleInstanceType = value.singleInstanceType;
        }
    }
    get allocationStrategy() {
        return this.getStringAttribute('allocation_strategy');
    }
    set allocationStrategy(value) {
        this._allocationStrategy = value;
    }
    resetAllocationStrategy() {
        this._allocationStrategy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allocationStrategyInput() {
        return this._allocationStrategy;
    }
    get maxTotalPrice() {
        return this.getStringAttribute('max_total_price');
    }
    set maxTotalPrice(value) {
        this._maxTotalPrice = value;
    }
    resetMaxTotalPrice() {
        this._maxTotalPrice = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxTotalPriceInput() {
        return this._maxTotalPrice;
    }
    get minTargetCapacity() {
        return this.getNumberAttribute('min_target_capacity');
    }
    set minTargetCapacity(value) {
        this._minTargetCapacity = value;
    }
    resetMinTargetCapacity() {
        this._minTargetCapacity = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minTargetCapacityInput() {
        return this._minTargetCapacity;
    }
    get singleAvailabilityZone() {
        return this.getBooleanAttribute('single_availability_zone');
    }
    set singleAvailabilityZone(value) {
        this._singleAvailabilityZone = value;
    }
    resetSingleAvailabilityZone() {
        this._singleAvailabilityZone = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get singleAvailabilityZoneInput() {
        return this._singleAvailabilityZone;
    }
    get singleInstanceType() {
        return this.getBooleanAttribute('single_instance_type');
    }
    set singleInstanceType(value) {
        this._singleInstanceType = value;
    }
    resetSingleInstanceType() {
        this._singleInstanceType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get singleInstanceTypeInput() {
        return this._singleInstanceType;
    }
}
exports.Ec2FleetOnDemandOptionsOutputReference = Ec2FleetOnDemandOptionsOutputReference;
_t = JSII_RTTI_SYMBOL_1;
Ec2FleetOnDemandOptionsOutputReference[_t] = { fqn: "@cdktf/provider-aws.ec2Fleet.Ec2FleetOnDemandOptionsOutputReference", version: "19.15.0" };
function ec2FleetSpotOptionsMaintenanceStrategiesCapacityRebalanceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        replacement_strategy: cdktf.stringToTerraform(struct.replacementStrategy),
        termination_delay: cdktf.numberToTerraform(struct.terminationDelay),
    };
}
exports.ec2FleetSpotOptionsMaintenanceStrategiesCapacityRebalanceToTerraform = ec2FleetSpotOptionsMaintenanceStrategiesCapacityRebalanceToTerraform;
function ec2FleetSpotOptionsMaintenanceStrategiesCapacityRebalanceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        replacement_strategy: {
            value: cdktf.stringToHclTerraform(struct.replacementStrategy),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        termination_delay: {
            value: cdktf.numberToHclTerraform(struct.terminationDelay),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.ec2FleetSpotOptionsMaintenanceStrategiesCapacityRebalanceToHclTerraform = ec2FleetSpotOptionsMaintenanceStrategiesCapacityRebalanceToHclTerraform;
class Ec2FleetSpotOptionsMaintenanceStrategiesCapacityRebalanceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._replacementStrategy !== undefined) {
            hasAnyValues = true;
            internalValueResult.replacementStrategy = this._replacementStrategy;
        }
        if (this._terminationDelay !== undefined) {
            hasAnyValues = true;
            internalValueResult.terminationDelay = this._terminationDelay;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._replacementStrategy = undefined;
            this._terminationDelay = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._replacementStrategy = value.replacementStrategy;
            this._terminationDelay = value.terminationDelay;
        }
    }
    get replacementStrategy() {
        return this.getStringAttribute('replacement_strategy');
    }
    set replacementStrategy(value) {
        this._replacementStrategy = value;
    }
    resetReplacementStrategy() {
        this._replacementStrategy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replacementStrategyInput() {
        return this._replacementStrategy;
    }
    get terminationDelay() {
        return this.getNumberAttribute('termination_delay');
    }
    set terminationDelay(value) {
        this._terminationDelay = value;
    }
    resetTerminationDelay() {
        this._terminationDelay = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get terminationDelayInput() {
        return this._terminationDelay;
    }
}
exports.Ec2FleetSpotOptionsMaintenanceStrategiesCapacityRebalanceOutputReference = Ec2FleetSpotOptionsMaintenanceStrategiesCapacityRebalanceOutputReference;
_u = JSII_RTTI_SYMBOL_1;
Ec2FleetSpotOptionsMaintenanceStrategiesCapacityRebalanceOutputReference[_u] = { fqn: "@cdktf/provider-aws.ec2Fleet.Ec2FleetSpotOptionsMaintenanceStrategiesCapacityRebalanceOutputReference", version: "19.15.0" };
function ec2FleetSpotOptionsMaintenanceStrategiesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        capacity_rebalance: ec2FleetSpotOptionsMaintenanceStrategiesCapacityRebalanceToTerraform(struct.capacityRebalance),
    };
}
exports.ec2FleetSpotOptionsMaintenanceStrategiesToTerraform = ec2FleetSpotOptionsMaintenanceStrategiesToTerraform;
function ec2FleetSpotOptionsMaintenanceStrategiesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        capacity_rebalance: {
            value: ec2FleetSpotOptionsMaintenanceStrategiesCapacityRebalanceToHclTerraform(struct.capacityRebalance),
            isBlock: true,
            type: "list",
            storageClassType: "Ec2FleetSpotOptionsMaintenanceStrategiesCapacityRebalanceList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.ec2FleetSpotOptionsMaintenanceStrategiesToHclTerraform = ec2FleetSpotOptionsMaintenanceStrategiesToHclTerraform;
class Ec2FleetSpotOptionsMaintenanceStrategiesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // capacity_rebalance - computed: false, optional: true, required: false
        this._capacityRebalance = new Ec2FleetSpotOptionsMaintenanceStrategiesCapacityRebalanceOutputReference(this, "capacity_rebalance");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._capacityRebalance?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.capacityRebalance = this._capacityRebalance?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._capacityRebalance.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._capacityRebalance.internalValue = value.capacityRebalance;
        }
    }
    get capacityRebalance() {
        return this._capacityRebalance;
    }
    putCapacityRebalance(value) {
        this._capacityRebalance.internalValue = value;
    }
    resetCapacityRebalance() {
        this._capacityRebalance.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get capacityRebalanceInput() {
        return this._capacityRebalance.internalValue;
    }
}
exports.Ec2FleetSpotOptionsMaintenanceStrategiesOutputReference = Ec2FleetSpotOptionsMaintenanceStrategiesOutputReference;
_v = JSII_RTTI_SYMBOL_1;
Ec2FleetSpotOptionsMaintenanceStrategiesOutputReference[_v] = { fqn: "@cdktf/provider-aws.ec2Fleet.Ec2FleetSpotOptionsMaintenanceStrategiesOutputReference", version: "19.15.0" };
function ec2FleetSpotOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allocation_strategy: cdktf.stringToTerraform(struct.allocationStrategy),
        instance_interruption_behavior: cdktf.stringToTerraform(struct.instanceInterruptionBehavior),
        instance_pools_to_use_count: cdktf.numberToTerraform(struct.instancePoolsToUseCount),
        maintenance_strategies: ec2FleetSpotOptionsMaintenanceStrategiesToTerraform(struct.maintenanceStrategies),
    };
}
exports.ec2FleetSpotOptionsToTerraform = ec2FleetSpotOptionsToTerraform;
function ec2FleetSpotOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allocation_strategy: {
            value: cdktf.stringToHclTerraform(struct.allocationStrategy),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        instance_interruption_behavior: {
            value: cdktf.stringToHclTerraform(struct.instanceInterruptionBehavior),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        instance_pools_to_use_count: {
            value: cdktf.numberToHclTerraform(struct.instancePoolsToUseCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        maintenance_strategies: {
            value: ec2FleetSpotOptionsMaintenanceStrategiesToHclTerraform(struct.maintenanceStrategies),
            isBlock: true,
            type: "list",
            storageClassType: "Ec2FleetSpotOptionsMaintenanceStrategiesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.ec2FleetSpotOptionsToHclTerraform = ec2FleetSpotOptionsToHclTerraform;
class Ec2FleetSpotOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // maintenance_strategies - computed: false, optional: true, required: false
        this._maintenanceStrategies = new Ec2FleetSpotOptionsMaintenanceStrategiesOutputReference(this, "maintenance_strategies");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allocationStrategy !== undefined) {
            hasAnyValues = true;
            internalValueResult.allocationStrategy = this._allocationStrategy;
        }
        if (this._instanceInterruptionBehavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceInterruptionBehavior = this._instanceInterruptionBehavior;
        }
        if (this._instancePoolsToUseCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.instancePoolsToUseCount = this._instancePoolsToUseCount;
        }
        if (this._maintenanceStrategies?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.maintenanceStrategies = this._maintenanceStrategies?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allocationStrategy = undefined;
            this._instanceInterruptionBehavior = undefined;
            this._instancePoolsToUseCount = undefined;
            this._maintenanceStrategies.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allocationStrategy = value.allocationStrategy;
            this._instanceInterruptionBehavior = value.instanceInterruptionBehavior;
            this._instancePoolsToUseCount = value.instancePoolsToUseCount;
            this._maintenanceStrategies.internalValue = value.maintenanceStrategies;
        }
    }
    get allocationStrategy() {
        return this.getStringAttribute('allocation_strategy');
    }
    set allocationStrategy(value) {
        this._allocationStrategy = value;
    }
    resetAllocationStrategy() {
        this._allocationStrategy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allocationStrategyInput() {
        return this._allocationStrategy;
    }
    get instanceInterruptionBehavior() {
        return this.getStringAttribute('instance_interruption_behavior');
    }
    set instanceInterruptionBehavior(value) {
        this._instanceInterruptionBehavior = value;
    }
    resetInstanceInterruptionBehavior() {
        this._instanceInterruptionBehavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceInterruptionBehaviorInput() {
        return this._instanceInterruptionBehavior;
    }
    get instancePoolsToUseCount() {
        return this.getNumberAttribute('instance_pools_to_use_count');
    }
    set instancePoolsToUseCount(value) {
        this._instancePoolsToUseCount = value;
    }
    resetInstancePoolsToUseCount() {
        this._instancePoolsToUseCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instancePoolsToUseCountInput() {
        return this._instancePoolsToUseCount;
    }
    get maintenanceStrategies() {
        return this._maintenanceStrategies;
    }
    putMaintenanceStrategies(value) {
        this._maintenanceStrategies.internalValue = value;
    }
    resetMaintenanceStrategies() {
        this._maintenanceStrategies.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maintenanceStrategiesInput() {
        return this._maintenanceStrategies.internalValue;
    }
}
exports.Ec2FleetSpotOptionsOutputReference = Ec2FleetSpotOptionsOutputReference;
_w = JSII_RTTI_SYMBOL_1;
Ec2FleetSpotOptionsOutputReference[_w] = { fqn: "@cdktf/provider-aws.ec2Fleet.Ec2FleetSpotOptionsOutputReference", version: "19.15.0" };
function ec2FleetTargetCapacitySpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        default_target_capacity_type: cdktf.stringToTerraform(struct.defaultTargetCapacityType),
        on_demand_target_capacity: cdktf.numberToTerraform(struct.onDemandTargetCapacity),
        spot_target_capacity: cdktf.numberToTerraform(struct.spotTargetCapacity),
        target_capacity_unit_type: cdktf.stringToTerraform(struct.targetCapacityUnitType),
        total_target_capacity: cdktf.numberToTerraform(struct.totalTargetCapacity),
    };
}
exports.ec2FleetTargetCapacitySpecificationToTerraform = ec2FleetTargetCapacitySpecificationToTerraform;
function ec2FleetTargetCapacitySpecificationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        default_target_capacity_type: {
            value: cdktf.stringToHclTerraform(struct.defaultTargetCapacityType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        on_demand_target_capacity: {
            value: cdktf.numberToHclTerraform(struct.onDemandTargetCapacity),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        spot_target_capacity: {
            value: cdktf.numberToHclTerraform(struct.spotTargetCapacity),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        target_capacity_unit_type: {
            value: cdktf.stringToHclTerraform(struct.targetCapacityUnitType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        total_target_capacity: {
            value: cdktf.numberToHclTerraform(struct.totalTargetCapacity),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.ec2FleetTargetCapacitySpecificationToHclTerraform = ec2FleetTargetCapacitySpecificationToHclTerraform;
class Ec2FleetTargetCapacitySpecificationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._defaultTargetCapacityType !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultTargetCapacityType = this._defaultTargetCapacityType;
        }
        if (this._onDemandTargetCapacity !== undefined) {
            hasAnyValues = true;
            internalValueResult.onDemandTargetCapacity = this._onDemandTargetCapacity;
        }
        if (this._spotTargetCapacity !== undefined) {
            hasAnyValues = true;
            internalValueResult.spotTargetCapacity = this._spotTargetCapacity;
        }
        if (this._targetCapacityUnitType !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetCapacityUnitType = this._targetCapacityUnitType;
        }
        if (this._totalTargetCapacity !== undefined) {
            hasAnyValues = true;
            internalValueResult.totalTargetCapacity = this._totalTargetCapacity;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._defaultTargetCapacityType = undefined;
            this._onDemandTargetCapacity = undefined;
            this._spotTargetCapacity = undefined;
            this._targetCapacityUnitType = undefined;
            this._totalTargetCapacity = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._defaultTargetCapacityType = value.defaultTargetCapacityType;
            this._onDemandTargetCapacity = value.onDemandTargetCapacity;
            this._spotTargetCapacity = value.spotTargetCapacity;
            this._targetCapacityUnitType = value.targetCapacityUnitType;
            this._totalTargetCapacity = value.totalTargetCapacity;
        }
    }
    get defaultTargetCapacityType() {
        return this.getStringAttribute('default_target_capacity_type');
    }
    set defaultTargetCapacityType(value) {
        this._defaultTargetCapacityType = value;
    }
    // Temporarily expose input value. Use with caution.
    get defaultTargetCapacityTypeInput() {
        return this._defaultTargetCapacityType;
    }
    get onDemandTargetCapacity() {
        return this.getNumberAttribute('on_demand_target_capacity');
    }
    set onDemandTargetCapacity(value) {
        this._onDemandTargetCapacity = value;
    }
    resetOnDemandTargetCapacity() {
        this._onDemandTargetCapacity = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get onDemandTargetCapacityInput() {
        return this._onDemandTargetCapacity;
    }
    get spotTargetCapacity() {
        return this.getNumberAttribute('spot_target_capacity');
    }
    set spotTargetCapacity(value) {
        this._spotTargetCapacity = value;
    }
    resetSpotTargetCapacity() {
        this._spotTargetCapacity = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get spotTargetCapacityInput() {
        return this._spotTargetCapacity;
    }
    get targetCapacityUnitType() {
        return this.getStringAttribute('target_capacity_unit_type');
    }
    set targetCapacityUnitType(value) {
        this._targetCapacityUnitType = value;
    }
    resetTargetCapacityUnitType() {
        this._targetCapacityUnitType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetCapacityUnitTypeInput() {
        return this._targetCapacityUnitType;
    }
    get totalTargetCapacity() {
        return this.getNumberAttribute('total_target_capacity');
    }
    set totalTargetCapacity(value) {
        this._totalTargetCapacity = value;
    }
    // Temporarily expose input value. Use with caution.
    get totalTargetCapacityInput() {
        return this._totalTargetCapacity;
    }
}
exports.Ec2FleetTargetCapacitySpecificationOutputReference = Ec2FleetTargetCapacitySpecificationOutputReference;
_x = JSII_RTTI_SYMBOL_1;
Ec2FleetTargetCapacitySpecificationOutputReference[_x] = { fqn: "@cdktf/provider-aws.ec2Fleet.Ec2FleetTargetCapacitySpecificationOutputReference", version: "19.15.0" };
function ec2FleetTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.ec2FleetTimeoutsToTerraform = ec2FleetTimeoutsToTerraform;
function ec2FleetTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.ec2FleetTimeoutsToHclTerraform = ec2FleetTimeoutsToHclTerraform;
class Ec2FleetTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.Ec2FleetTimeoutsOutputReference = Ec2FleetTimeoutsOutputReference;
_y = JSII_RTTI_SYMBOL_1;
Ec2FleetTimeoutsOutputReference[_y] = { fqn: "@cdktf/provider-aws.ec2Fleet.Ec2FleetTimeoutsOutputReference", version: "19.15.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/ec2_fleet aws_ec2_fleet}
*/
class Ec2Fleet extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a Ec2Fleet resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the Ec2Fleet to import
    * @param importFromId The id of the existing Ec2Fleet that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/ec2_fleet#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the Ec2Fleet to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_ec2_fleet", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/ec2_fleet aws_ec2_fleet} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options Ec2FleetConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_ec2_fleet',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // fleet_instance_set - computed: false, optional: true, required: false
        this._fleetInstanceSet = new Ec2FleetFleetInstanceSetList(this, "fleet_instance_set", false);
        // launch_template_config - computed: false, optional: false, required: true
        this._launchTemplateConfig = new Ec2FleetLaunchTemplateConfigList(this, "launch_template_config", false);
        // on_demand_options - computed: false, optional: true, required: false
        this._onDemandOptions = new Ec2FleetOnDemandOptionsOutputReference(this, "on_demand_options");
        // spot_options - computed: false, optional: true, required: false
        this._spotOptions = new Ec2FleetSpotOptionsOutputReference(this, "spot_options");
        // target_capacity_specification - computed: false, optional: false, required: true
        this._targetCapacitySpecification = new Ec2FleetTargetCapacitySpecificationOutputReference(this, "target_capacity_specification");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new Ec2FleetTimeoutsOutputReference(this, "timeouts");
        this._context = config.context;
        this._excessCapacityTerminationPolicy = config.excessCapacityTerminationPolicy;
        this._fleetState = config.fleetState;
        this._fulfilledCapacity = config.fulfilledCapacity;
        this._fulfilledOnDemandCapacity = config.fulfilledOnDemandCapacity;
        this._id = config.id;
        this._replaceUnhealthyInstances = config.replaceUnhealthyInstances;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._terminateInstances = config.terminateInstances;
        this._terminateInstancesWithExpiration = config.terminateInstancesWithExpiration;
        this._type = config.type;
        this._validFrom = config.validFrom;
        this._validUntil = config.validUntil;
        this._fleetInstanceSet.internalValue = config.fleetInstanceSet;
        this._launchTemplateConfig.internalValue = config.launchTemplateConfig;
        this._onDemandOptions.internalValue = config.onDemandOptions;
        this._spotOptions.internalValue = config.spotOptions;
        this._targetCapacitySpecification.internalValue = config.targetCapacitySpecification;
        this._timeouts.internalValue = config.timeouts;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get context() {
        return this.getStringAttribute('context');
    }
    set context(value) {
        this._context = value;
    }
    resetContext() {
        this._context = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get contextInput() {
        return this._context;
    }
    get excessCapacityTerminationPolicy() {
        return this.getStringAttribute('excess_capacity_termination_policy');
    }
    set excessCapacityTerminationPolicy(value) {
        this._excessCapacityTerminationPolicy = value;
    }
    resetExcessCapacityTerminationPolicy() {
        this._excessCapacityTerminationPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excessCapacityTerminationPolicyInput() {
        return this._excessCapacityTerminationPolicy;
    }
    get fleetState() {
        return this.getStringAttribute('fleet_state');
    }
    set fleetState(value) {
        this._fleetState = value;
    }
    resetFleetState() {
        this._fleetState = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fleetStateInput() {
        return this._fleetState;
    }
    get fulfilledCapacity() {
        return this.getNumberAttribute('fulfilled_capacity');
    }
    set fulfilledCapacity(value) {
        this._fulfilledCapacity = value;
    }
    resetFulfilledCapacity() {
        this._fulfilledCapacity = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fulfilledCapacityInput() {
        return this._fulfilledCapacity;
    }
    get fulfilledOnDemandCapacity() {
        return this.getNumberAttribute('fulfilled_on_demand_capacity');
    }
    set fulfilledOnDemandCapacity(value) {
        this._fulfilledOnDemandCapacity = value;
    }
    resetFulfilledOnDemandCapacity() {
        this._fulfilledOnDemandCapacity = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fulfilledOnDemandCapacityInput() {
        return this._fulfilledOnDemandCapacity;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get replaceUnhealthyInstances() {
        return this.getBooleanAttribute('replace_unhealthy_instances');
    }
    set replaceUnhealthyInstances(value) {
        this._replaceUnhealthyInstances = value;
    }
    resetReplaceUnhealthyInstances() {
        this._replaceUnhealthyInstances = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replaceUnhealthyInstancesInput() {
        return this._replaceUnhealthyInstances;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get terminateInstances() {
        return this.getBooleanAttribute('terminate_instances');
    }
    set terminateInstances(value) {
        this._terminateInstances = value;
    }
    resetTerminateInstances() {
        this._terminateInstances = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get terminateInstancesInput() {
        return this._terminateInstances;
    }
    get terminateInstancesWithExpiration() {
        return this.getBooleanAttribute('terminate_instances_with_expiration');
    }
    set terminateInstancesWithExpiration(value) {
        this._terminateInstancesWithExpiration = value;
    }
    resetTerminateInstancesWithExpiration() {
        this._terminateInstancesWithExpiration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get terminateInstancesWithExpirationInput() {
        return this._terminateInstancesWithExpiration;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    resetType() {
        this._type = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get validFrom() {
        return this.getStringAttribute('valid_from');
    }
    set validFrom(value) {
        this._validFrom = value;
    }
    resetValidFrom() {
        this._validFrom = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get validFromInput() {
        return this._validFrom;
    }
    get validUntil() {
        return this.getStringAttribute('valid_until');
    }
    set validUntil(value) {
        this._validUntil = value;
    }
    resetValidUntil() {
        this._validUntil = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get validUntilInput() {
        return this._validUntil;
    }
    get fleetInstanceSet() {
        return this._fleetInstanceSet;
    }
    putFleetInstanceSet(value) {
        this._fleetInstanceSet.internalValue = value;
    }
    resetFleetInstanceSet() {
        this._fleetInstanceSet.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fleetInstanceSetInput() {
        return this._fleetInstanceSet.internalValue;
    }
    get launchTemplateConfig() {
        return this._launchTemplateConfig;
    }
    putLaunchTemplateConfig(value) {
        this._launchTemplateConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get launchTemplateConfigInput() {
        return this._launchTemplateConfig.internalValue;
    }
    get onDemandOptions() {
        return this._onDemandOptions;
    }
    putOnDemandOptions(value) {
        this._onDemandOptions.internalValue = value;
    }
    resetOnDemandOptions() {
        this._onDemandOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get onDemandOptionsInput() {
        return this._onDemandOptions.internalValue;
    }
    get spotOptions() {
        return this._spotOptions;
    }
    putSpotOptions(value) {
        this._spotOptions.internalValue = value;
    }
    resetSpotOptions() {
        this._spotOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get spotOptionsInput() {
        return this._spotOptions.internalValue;
    }
    get targetCapacitySpecification() {
        return this._targetCapacitySpecification;
    }
    putTargetCapacitySpecification(value) {
        this._targetCapacitySpecification.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get targetCapacitySpecificationInput() {
        return this._targetCapacitySpecification.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            context: cdktf.stringToTerraform(this._context),
            excess_capacity_termination_policy: cdktf.stringToTerraform(this._excessCapacityTerminationPolicy),
            fleet_state: cdktf.stringToTerraform(this._fleetState),
            fulfilled_capacity: cdktf.numberToTerraform(this._fulfilledCapacity),
            fulfilled_on_demand_capacity: cdktf.numberToTerraform(this._fulfilledOnDemandCapacity),
            id: cdktf.stringToTerraform(this._id),
            replace_unhealthy_instances: cdktf.booleanToTerraform(this._replaceUnhealthyInstances),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            terminate_instances: cdktf.booleanToTerraform(this._terminateInstances),
            terminate_instances_with_expiration: cdktf.booleanToTerraform(this._terminateInstancesWithExpiration),
            type: cdktf.stringToTerraform(this._type),
            valid_from: cdktf.stringToTerraform(this._validFrom),
            valid_until: cdktf.stringToTerraform(this._validUntil),
            fleet_instance_set: cdktf.listMapper(ec2FleetFleetInstanceSetToTerraform, true)(this._fleetInstanceSet.internalValue),
            launch_template_config: cdktf.listMapper(ec2FleetLaunchTemplateConfigToTerraform, true)(this._launchTemplateConfig.internalValue),
            on_demand_options: ec2FleetOnDemandOptionsToTerraform(this._onDemandOptions.internalValue),
            spot_options: ec2FleetSpotOptionsToTerraform(this._spotOptions.internalValue),
            target_capacity_specification: ec2FleetTargetCapacitySpecificationToTerraform(this._targetCapacitySpecification.internalValue),
            timeouts: ec2FleetTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            context: {
                value: cdktf.stringToHclTerraform(this._context),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            excess_capacity_termination_policy: {
                value: cdktf.stringToHclTerraform(this._excessCapacityTerminationPolicy),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            fleet_state: {
                value: cdktf.stringToHclTerraform(this._fleetState),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            fulfilled_capacity: {
                value: cdktf.numberToHclTerraform(this._fulfilledCapacity),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            fulfilled_on_demand_capacity: {
                value: cdktf.numberToHclTerraform(this._fulfilledOnDemandCapacity),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            replace_unhealthy_instances: {
                value: cdktf.booleanToHclTerraform(this._replaceUnhealthyInstances),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            tags: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tags),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            tags_all: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tagsAll),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            terminate_instances: {
                value: cdktf.booleanToHclTerraform(this._terminateInstances),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            terminate_instances_with_expiration: {
                value: cdktf.booleanToHclTerraform(this._terminateInstancesWithExpiration),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            type: {
                value: cdktf.stringToHclTerraform(this._type),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            valid_from: {
                value: cdktf.stringToHclTerraform(this._validFrom),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            valid_until: {
                value: cdktf.stringToHclTerraform(this._validUntil),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            fleet_instance_set: {
                value: cdktf.listMapperHcl(ec2FleetFleetInstanceSetToHclTerraform, true)(this._fleetInstanceSet.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "Ec2FleetFleetInstanceSetList",
            },
            launch_template_config: {
                value: cdktf.listMapperHcl(ec2FleetLaunchTemplateConfigToHclTerraform, true)(this._launchTemplateConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "Ec2FleetLaunchTemplateConfigList",
            },
            on_demand_options: {
                value: ec2FleetOnDemandOptionsToHclTerraform(this._onDemandOptions.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "Ec2FleetOnDemandOptionsList",
            },
            spot_options: {
                value: ec2FleetSpotOptionsToHclTerraform(this._spotOptions.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "Ec2FleetSpotOptionsList",
            },
            target_capacity_specification: {
                value: ec2FleetTargetCapacitySpecificationToHclTerraform(this._targetCapacitySpecification.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "Ec2FleetTargetCapacitySpecificationList",
            },
            timeouts: {
                value: ec2FleetTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "Ec2FleetTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.Ec2Fleet = Ec2Fleet;
_z = JSII_RTTI_SYMBOL_1;
Ec2Fleet[_z] = { fqn: "@cdktf/provider-aws.ec2Fleet.Ec2Fleet", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
Ec2Fleet.tfResourceType = "aws_ec2_fleet";
//# sourceMappingURL=data:application/json;base64,