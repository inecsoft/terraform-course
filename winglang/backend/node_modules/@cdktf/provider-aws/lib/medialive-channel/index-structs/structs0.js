"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92, _93, _94, _95, _96, _97, _98, _99, _100, _101, _102, _103, _104, _105, _106, _107, _108, _109, _110, _111, _112, _113, _114, _115, _116, _117, _118;
Object.defineProperty(exports, "__esModule", { value: true });
exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettingsToTerraform = exports.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsOutputReference = exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsToHclTerraform = exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsToTerraform = exports.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsOutputReference = exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsToHclTerraform = exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsToTerraform = exports.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettingsOutputReference = exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettingsToTerraform = exports.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsOutputReference = exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsToHclTerraform = exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsToTerraform = exports.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsOutputReference = exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsToTerraform = exports.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsOutputReference = exports.medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsToTerraform = exports.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsOutputReference = exports.medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsToTerraform = exports.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsList = exports.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsOutputReference = exports.medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsToTerraform = exports.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutputReference = exports.medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsToTerraform = exports.MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsOutputReference = exports.medialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsToTerraform = exports.MedialiveChannelDestinationsList = exports.MedialiveChannelDestinationsOutputReference = exports.medialiveChannelDestinationsToHclTerraform = exports.medialiveChannelDestinationsToTerraform = exports.MedialiveChannelDestinationsSettingsList = exports.MedialiveChannelDestinationsSettingsOutputReference = exports.medialiveChannelDestinationsSettingsToHclTerraform = exports.medialiveChannelDestinationsSettingsToTerraform = exports.MedialiveChannelDestinationsMultiplexSettingsOutputReference = exports.medialiveChannelDestinationsMultiplexSettingsToHclTerraform = exports.medialiveChannelDestinationsMultiplexSettingsToTerraform = exports.MedialiveChannelDestinationsMediaPackageSettingsList = exports.MedialiveChannelDestinationsMediaPackageSettingsOutputReference = exports.medialiveChannelDestinationsMediaPackageSettingsToHclTerraform = exports.medialiveChannelDestinationsMediaPackageSettingsToTerraform = exports.MedialiveChannelCdiInputSpecificationOutputReference = exports.medialiveChannelCdiInputSpecificationToHclTerraform = exports.medialiveChannelCdiInputSpecificationToTerraform = void 0;
exports.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettingsOutputReference = exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettingsToTerraform = exports.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettingsOutputReference = exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettingsToTerraform = exports.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsOutputReference = exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsToTerraform = exports.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFontOutputReference = exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFontToHclTerraform = exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFontToTerraform = exports.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsOutputReference = exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsToTerraform = exports.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFontOutputReference = exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFontToHclTerraform = exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFontToTerraform = exports.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettingsOutputReference = exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettingsToTerraform = exports.MedialiveChannelEncoderSettingsAvailBlankingOutputReference = exports.medialiveChannelEncoderSettingsAvailBlankingToHclTerraform = exports.medialiveChannelEncoderSettingsAvailBlankingToTerraform = exports.MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImageOutputReference = exports.medialiveChannelEncoderSettingsAvailBlankingAvailBlankingImageToHclTerraform = exports.medialiveChannelEncoderSettingsAvailBlankingAvailBlankingImageToTerraform = exports.MedialiveChannelEncoderSettingsAudioDescriptionsList = exports.MedialiveChannelEncoderSettingsAudioDescriptionsOutputReference = exports.medialiveChannelEncoderSettingsAudioDescriptionsToHclTerraform = exports.medialiveChannelEncoderSettingsAudioDescriptionsToTerraform = exports.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsOutputReference = exports.medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsToTerraform = exports.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsList = exports.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsOutputReference = exports.medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsToHclTerraform = exports.medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsToTerraform = exports.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsList = exports.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsOutputReference = exports.medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsToHclTerraform = exports.medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsToTerraform = exports.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsOutputReference = exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsToTerraform = exports.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsOutputReference = exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsToTerraform = exports.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettingsOutputReference = exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettingsToHclTerraform = void 0;
exports.medialiveChannelEncoderSettingsNielsenConfigurationToTerraform = exports.MedialiveChannelEncoderSettingsMotionGraphicsConfigurationOutputReference = exports.medialiveChannelEncoderSettingsMotionGraphicsConfigurationToHclTerraform = exports.medialiveChannelEncoderSettingsMotionGraphicsConfigurationToTerraform = exports.MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsOutputReference = exports.medialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsToTerraform = exports.MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsOutputReference = exports.medialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsToTerraform = exports.MedialiveChannelEncoderSettingsGlobalConfigurationOutputReference = exports.medialiveChannelEncoderSettingsGlobalConfigurationToHclTerraform = exports.medialiveChannelEncoderSettingsGlobalConfigurationToTerraform = exports.MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorOutputReference = exports.medialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorToHclTerraform = exports.medialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorToTerraform = exports.MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateOutputReference = exports.medialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateToHclTerraform = exports.medialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateToTerraform = exports.MedialiveChannelEncoderSettingsCaptionDescriptionsList = exports.MedialiveChannelEncoderSettingsCaptionDescriptionsOutputReference = exports.medialiveChannelEncoderSettingsCaptionDescriptionsToHclTerraform = exports.medialiveChannelEncoderSettingsCaptionDescriptionsToTerraform = exports.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsOutputReference = exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsToTerraform = exports.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettingsOutputReference = exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettingsToTerraform = exports.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettingsOutputReference = exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettingsToTerraform = exports.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettingsOutputReference = exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettingsToTerraform = exports.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettingsOutputReference = exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettingsToTerraform = exports.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettingsOutputReference = exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettingsToTerraform = exports.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettingsOutputReference = exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettingsToTerraform = exports.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettingsOutputReference = exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettingsToTerraform = exports.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettingsOutputReference = exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettingsToTerraform = void 0;
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsList = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsList = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsToTerraform = exports.MedialiveChannelEncoderSettingsNielsenConfigurationOutputReference = exports.medialiveChannelEncoderSettingsNielsenConfigurationToHclTerraform = void 0;
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsList = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServerOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServerToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServerToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsList = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsToHclTerraform = void 0;
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsToHclTerraform = void 0;
exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutputReference = exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsToTerraform = exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsOutputReference = exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsToTerraform = exports.MedialiveChannelEncoderSettingsTimecodeConfigOutputReference = exports.medialiveChannelEncoderSettingsTimecodeConfigToHclTerraform = exports.medialiveChannelEncoderSettingsTimecodeConfigToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsList = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsList = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationOutputReference = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationToHclTerraform = exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationToTerraform = void 0;
exports.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutputReference = exports.medialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsToHclTerraform = exports.medialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsToTerraform = exports.MedialiveChannelEncoderSettingsOutputReference = exports.medialiveChannelEncoderSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsToTerraform = exports.MedialiveChannelEncoderSettingsVideoDescriptionsList = exports.MedialiveChannelEncoderSettingsVideoDescriptionsOutputReference = exports.medialiveChannelEncoderSettingsVideoDescriptionsToHclTerraform = exports.medialiveChannelEncoderSettingsVideoDescriptionsToTerraform = exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsOutputReference = exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsToTerraform = exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsOutputReference = exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsToHclTerraform = exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsToTerraform = exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettingsOutputReference = exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettingsToTerraform = exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsOutputReference = exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsToTerraform = exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsOutputReference = exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsToTerraform = exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsOutputReference = exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsToTerraform = exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsOutputReference = exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsToHclTerraform = exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsToTerraform = exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsOutputReference = exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsToHclTerraform = exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsToTerraform = exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsOutputReference = exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsToHclTerraform = exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsToTerraform = exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsOutputReference = exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsToHclTerraform = exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsToTerraform = exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsOutputReference = exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsToTerraform = exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsOutputReference = exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsToHclTerraform = exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsToTerraform = exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsOutputReference = exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsToHclTerraform = exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */
const cdktf = require("cdktf");
function medialiveChannelCdiInputSpecificationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        resolution: cdktf.stringToTerraform(struct.resolution),
    };
}
exports.medialiveChannelCdiInputSpecificationToTerraform = medialiveChannelCdiInputSpecificationToTerraform;
function medialiveChannelCdiInputSpecificationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        resolution: {
            value: cdktf.stringToHclTerraform(struct.resolution),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelCdiInputSpecificationToHclTerraform = medialiveChannelCdiInputSpecificationToHclTerraform;
class MedialiveChannelCdiInputSpecificationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._resolution !== undefined) {
            hasAnyValues = true;
            internalValueResult.resolution = this._resolution;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._resolution = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._resolution = value.resolution;
        }
    }
    get resolution() {
        return this.getStringAttribute('resolution');
    }
    set resolution(value) {
        this._resolution = value;
    }
    // Temporarily expose input value. Use with caution.
    get resolutionInput() {
        return this._resolution;
    }
}
exports.MedialiveChannelCdiInputSpecificationOutputReference = MedialiveChannelCdiInputSpecificationOutputReference;
_a = JSII_RTTI_SYMBOL_1;
MedialiveChannelCdiInputSpecificationOutputReference[_a] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelCdiInputSpecificationOutputReference", version: "19.15.0" };
function medialiveChannelDestinationsMediaPackageSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        channel_id: cdktf.stringToTerraform(struct.channelId),
    };
}
exports.medialiveChannelDestinationsMediaPackageSettingsToTerraform = medialiveChannelDestinationsMediaPackageSettingsToTerraform;
function medialiveChannelDestinationsMediaPackageSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        channel_id: {
            value: cdktf.stringToHclTerraform(struct.channelId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelDestinationsMediaPackageSettingsToHclTerraform = medialiveChannelDestinationsMediaPackageSettingsToHclTerraform;
class MedialiveChannelDestinationsMediaPackageSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._channelId !== undefined) {
            hasAnyValues = true;
            internalValueResult.channelId = this._channelId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._channelId = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._channelId = value.channelId;
        }
    }
    get channelId() {
        return this.getStringAttribute('channel_id');
    }
    set channelId(value) {
        this._channelId = value;
    }
    // Temporarily expose input value. Use with caution.
    get channelIdInput() {
        return this._channelId;
    }
}
exports.MedialiveChannelDestinationsMediaPackageSettingsOutputReference = MedialiveChannelDestinationsMediaPackageSettingsOutputReference;
_b = JSII_RTTI_SYMBOL_1;
MedialiveChannelDestinationsMediaPackageSettingsOutputReference[_b] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelDestinationsMediaPackageSettingsOutputReference", version: "19.15.0" };
class MedialiveChannelDestinationsMediaPackageSettingsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MedialiveChannelDestinationsMediaPackageSettingsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MedialiveChannelDestinationsMediaPackageSettingsList = MedialiveChannelDestinationsMediaPackageSettingsList;
_c = JSII_RTTI_SYMBOL_1;
MedialiveChannelDestinationsMediaPackageSettingsList[_c] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelDestinationsMediaPackageSettingsList", version: "19.15.0" };
function medialiveChannelDestinationsMultiplexSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        multiplex_id: cdktf.stringToTerraform(struct.multiplexId),
        program_name: cdktf.stringToTerraform(struct.programName),
    };
}
exports.medialiveChannelDestinationsMultiplexSettingsToTerraform = medialiveChannelDestinationsMultiplexSettingsToTerraform;
function medialiveChannelDestinationsMultiplexSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        multiplex_id: {
            value: cdktf.stringToHclTerraform(struct.multiplexId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        program_name: {
            value: cdktf.stringToHclTerraform(struct.programName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelDestinationsMultiplexSettingsToHclTerraform = medialiveChannelDestinationsMultiplexSettingsToHclTerraform;
class MedialiveChannelDestinationsMultiplexSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._multiplexId !== undefined) {
            hasAnyValues = true;
            internalValueResult.multiplexId = this._multiplexId;
        }
        if (this._programName !== undefined) {
            hasAnyValues = true;
            internalValueResult.programName = this._programName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._multiplexId = undefined;
            this._programName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._multiplexId = value.multiplexId;
            this._programName = value.programName;
        }
    }
    get multiplexId() {
        return this.getStringAttribute('multiplex_id');
    }
    set multiplexId(value) {
        this._multiplexId = value;
    }
    // Temporarily expose input value. Use with caution.
    get multiplexIdInput() {
        return this._multiplexId;
    }
    get programName() {
        return this.getStringAttribute('program_name');
    }
    set programName(value) {
        this._programName = value;
    }
    // Temporarily expose input value. Use with caution.
    get programNameInput() {
        return this._programName;
    }
}
exports.MedialiveChannelDestinationsMultiplexSettingsOutputReference = MedialiveChannelDestinationsMultiplexSettingsOutputReference;
_d = JSII_RTTI_SYMBOL_1;
MedialiveChannelDestinationsMultiplexSettingsOutputReference[_d] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelDestinationsMultiplexSettingsOutputReference", version: "19.15.0" };
function medialiveChannelDestinationsSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        password_param: cdktf.stringToTerraform(struct.passwordParam),
        stream_name: cdktf.stringToTerraform(struct.streamName),
        url: cdktf.stringToTerraform(struct.url),
        username: cdktf.stringToTerraform(struct.username),
    };
}
exports.medialiveChannelDestinationsSettingsToTerraform = medialiveChannelDestinationsSettingsToTerraform;
function medialiveChannelDestinationsSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        password_param: {
            value: cdktf.stringToHclTerraform(struct.passwordParam),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        stream_name: {
            value: cdktf.stringToHclTerraform(struct.streamName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        url: {
            value: cdktf.stringToHclTerraform(struct.url),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        username: {
            value: cdktf.stringToHclTerraform(struct.username),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelDestinationsSettingsToHclTerraform = medialiveChannelDestinationsSettingsToHclTerraform;
class MedialiveChannelDestinationsSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._passwordParam !== undefined) {
            hasAnyValues = true;
            internalValueResult.passwordParam = this._passwordParam;
        }
        if (this._streamName !== undefined) {
            hasAnyValues = true;
            internalValueResult.streamName = this._streamName;
        }
        if (this._url !== undefined) {
            hasAnyValues = true;
            internalValueResult.url = this._url;
        }
        if (this._username !== undefined) {
            hasAnyValues = true;
            internalValueResult.username = this._username;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._passwordParam = undefined;
            this._streamName = undefined;
            this._url = undefined;
            this._username = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._passwordParam = value.passwordParam;
            this._streamName = value.streamName;
            this._url = value.url;
            this._username = value.username;
        }
    }
    get passwordParam() {
        return this.getStringAttribute('password_param');
    }
    set passwordParam(value) {
        this._passwordParam = value;
    }
    resetPasswordParam() {
        this._passwordParam = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passwordParamInput() {
        return this._passwordParam;
    }
    get streamName() {
        return this.getStringAttribute('stream_name');
    }
    set streamName(value) {
        this._streamName = value;
    }
    resetStreamName() {
        this._streamName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get streamNameInput() {
        return this._streamName;
    }
    get url() {
        return this.getStringAttribute('url');
    }
    set url(value) {
        this._url = value;
    }
    resetUrl() {
        this._url = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get urlInput() {
        return this._url;
    }
    get username() {
        return this.getStringAttribute('username');
    }
    set username(value) {
        this._username = value;
    }
    resetUsername() {
        this._username = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get usernameInput() {
        return this._username;
    }
}
exports.MedialiveChannelDestinationsSettingsOutputReference = MedialiveChannelDestinationsSettingsOutputReference;
_e = JSII_RTTI_SYMBOL_1;
MedialiveChannelDestinationsSettingsOutputReference[_e] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelDestinationsSettingsOutputReference", version: "19.15.0" };
class MedialiveChannelDestinationsSettingsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MedialiveChannelDestinationsSettingsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MedialiveChannelDestinationsSettingsList = MedialiveChannelDestinationsSettingsList;
_f = JSII_RTTI_SYMBOL_1;
MedialiveChannelDestinationsSettingsList[_f] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelDestinationsSettingsList", version: "19.15.0" };
function medialiveChannelDestinationsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        id: cdktf.stringToTerraform(struct.id),
        media_package_settings: cdktf.listMapper(medialiveChannelDestinationsMediaPackageSettingsToTerraform, true)(struct.mediaPackageSettings),
        multiplex_settings: medialiveChannelDestinationsMultiplexSettingsToTerraform(struct.multiplexSettings),
        settings: cdktf.listMapper(medialiveChannelDestinationsSettingsToTerraform, true)(struct.settings),
    };
}
exports.medialiveChannelDestinationsToTerraform = medialiveChannelDestinationsToTerraform;
function medialiveChannelDestinationsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        id: {
            value: cdktf.stringToHclTerraform(struct.id),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        media_package_settings: {
            value: cdktf.listMapperHcl(medialiveChannelDestinationsMediaPackageSettingsToHclTerraform, true)(struct.mediaPackageSettings),
            isBlock: true,
            type: "set",
            storageClassType: "MedialiveChannelDestinationsMediaPackageSettingsList",
        },
        multiplex_settings: {
            value: medialiveChannelDestinationsMultiplexSettingsToHclTerraform(struct.multiplexSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelDestinationsMultiplexSettingsList",
        },
        settings: {
            value: cdktf.listMapperHcl(medialiveChannelDestinationsSettingsToHclTerraform, true)(struct.settings),
            isBlock: true,
            type: "set",
            storageClassType: "MedialiveChannelDestinationsSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelDestinationsToHclTerraform = medialiveChannelDestinationsToHclTerraform;
class MedialiveChannelDestinationsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // media_package_settings - computed: false, optional: true, required: false
        this._mediaPackageSettings = new MedialiveChannelDestinationsMediaPackageSettingsList(this, "media_package_settings", true);
        // multiplex_settings - computed: false, optional: true, required: false
        this._multiplexSettings = new MedialiveChannelDestinationsMultiplexSettingsOutputReference(this, "multiplex_settings");
        // settings - computed: false, optional: true, required: false
        this._settings = new MedialiveChannelDestinationsSettingsList(this, "settings", true);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._id !== undefined) {
            hasAnyValues = true;
            internalValueResult.id = this._id;
        }
        if (this._mediaPackageSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mediaPackageSettings = this._mediaPackageSettings?.internalValue;
        }
        if (this._multiplexSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.multiplexSettings = this._multiplexSettings?.internalValue;
        }
        if (this._settings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.settings = this._settings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._id = undefined;
            this._mediaPackageSettings.internalValue = undefined;
            this._multiplexSettings.internalValue = undefined;
            this._settings.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._id = value.id;
            this._mediaPackageSettings.internalValue = value.mediaPackageSettings;
            this._multiplexSettings.internalValue = value.multiplexSettings;
            this._settings.internalValue = value.settings;
        }
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get mediaPackageSettings() {
        return this._mediaPackageSettings;
    }
    putMediaPackageSettings(value) {
        this._mediaPackageSettings.internalValue = value;
    }
    resetMediaPackageSettings() {
        this._mediaPackageSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mediaPackageSettingsInput() {
        return this._mediaPackageSettings.internalValue;
    }
    get multiplexSettings() {
        return this._multiplexSettings;
    }
    putMultiplexSettings(value) {
        this._multiplexSettings.internalValue = value;
    }
    resetMultiplexSettings() {
        this._multiplexSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get multiplexSettingsInput() {
        return this._multiplexSettings.internalValue;
    }
    get settings() {
        return this._settings;
    }
    putSettings(value) {
        this._settings.internalValue = value;
    }
    resetSettings() {
        this._settings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get settingsInput() {
        return this._settings.internalValue;
    }
}
exports.MedialiveChannelDestinationsOutputReference = MedialiveChannelDestinationsOutputReference;
_g = JSII_RTTI_SYMBOL_1;
MedialiveChannelDestinationsOutputReference[_g] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelDestinationsOutputReference", version: "19.15.0" };
class MedialiveChannelDestinationsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MedialiveChannelDestinationsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MedialiveChannelDestinationsList = MedialiveChannelDestinationsList;
_h = JSII_RTTI_SYMBOL_1;
MedialiveChannelDestinationsList[_h] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelDestinationsList", version: "19.15.0" };
function medialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        algorithm: cdktf.stringToTerraform(struct.algorithm),
        algorithm_control: cdktf.stringToTerraform(struct.algorithmControl),
        target_lkfs: cdktf.numberToTerraform(struct.targetLkfs),
    };
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsToTerraform = medialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsToTerraform;
function medialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        algorithm: {
            value: cdktf.stringToHclTerraform(struct.algorithm),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        algorithm_control: {
            value: cdktf.stringToHclTerraform(struct.algorithmControl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        target_lkfs: {
            value: cdktf.numberToHclTerraform(struct.targetLkfs),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsToHclTerraform = medialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._algorithm !== undefined) {
            hasAnyValues = true;
            internalValueResult.algorithm = this._algorithm;
        }
        if (this._algorithmControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.algorithmControl = this._algorithmControl;
        }
        if (this._targetLkfs !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetLkfs = this._targetLkfs;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._algorithm = undefined;
            this._algorithmControl = undefined;
            this._targetLkfs = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._algorithm = value.algorithm;
            this._algorithmControl = value.algorithmControl;
            this._targetLkfs = value.targetLkfs;
        }
    }
    get algorithm() {
        return this.getStringAttribute('algorithm');
    }
    set algorithm(value) {
        this._algorithm = value;
    }
    resetAlgorithm() {
        this._algorithm = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get algorithmInput() {
        return this._algorithm;
    }
    get algorithmControl() {
        return this.getStringAttribute('algorithm_control');
    }
    set algorithmControl(value) {
        this._algorithmControl = value;
    }
    resetAlgorithmControl() {
        this._algorithmControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get algorithmControlInput() {
        return this._algorithmControl;
    }
    get targetLkfs() {
        return this.getNumberAttribute('target_lkfs');
    }
    set targetLkfs(value) {
        this._targetLkfs = value;
    }
    resetTargetLkfs() {
        this._targetLkfs = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetLkfsInput() {
        return this._targetLkfs;
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsOutputReference = MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsOutputReference;
_j = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsOutputReference[_j] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cbet_check_digit_string: cdktf.stringToTerraform(struct.cbetCheckDigitString),
        cbet_stepaside: cdktf.stringToTerraform(struct.cbetStepaside),
        csid: cdktf.stringToTerraform(struct.csid),
    };
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsToTerraform = medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsToTerraform;
function medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cbet_check_digit_string: {
            value: cdktf.stringToHclTerraform(struct.cbetCheckDigitString),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cbet_stepaside: {
            value: cdktf.stringToHclTerraform(struct.cbetStepaside),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        csid: {
            value: cdktf.stringToHclTerraform(struct.csid),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsToHclTerraform = medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cbetCheckDigitString !== undefined) {
            hasAnyValues = true;
            internalValueResult.cbetCheckDigitString = this._cbetCheckDigitString;
        }
        if (this._cbetStepaside !== undefined) {
            hasAnyValues = true;
            internalValueResult.cbetStepaside = this._cbetStepaside;
        }
        if (this._csid !== undefined) {
            hasAnyValues = true;
            internalValueResult.csid = this._csid;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cbetCheckDigitString = undefined;
            this._cbetStepaside = undefined;
            this._csid = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cbetCheckDigitString = value.cbetCheckDigitString;
            this._cbetStepaside = value.cbetStepaside;
            this._csid = value.csid;
        }
    }
    get cbetCheckDigitString() {
        return this.getStringAttribute('cbet_check_digit_string');
    }
    set cbetCheckDigitString(value) {
        this._cbetCheckDigitString = value;
    }
    // Temporarily expose input value. Use with caution.
    get cbetCheckDigitStringInput() {
        return this._cbetCheckDigitString;
    }
    get cbetStepaside() {
        return this.getStringAttribute('cbet_stepaside');
    }
    set cbetStepaside(value) {
        this._cbetStepaside = value;
    }
    // Temporarily expose input value. Use with caution.
    get cbetStepasideInput() {
        return this._cbetStepaside;
    }
    get csid() {
        return this.getStringAttribute('csid');
    }
    set csid(value) {
        this._csid = value;
    }
    // Temporarily expose input value. Use with caution.
    get csidInput() {
        return this._csid;
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutputReference = MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutputReference;
_k = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutputReference[_k] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        check_digit_string: cdktf.stringToTerraform(struct.checkDigitString),
        sid: cdktf.numberToTerraform(struct.sid),
    };
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsToTerraform = medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsToTerraform;
function medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        check_digit_string: {
            value: cdktf.stringToHclTerraform(struct.checkDigitString),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sid: {
            value: cdktf.numberToHclTerraform(struct.sid),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsToHclTerraform = medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._checkDigitString !== undefined) {
            hasAnyValues = true;
            internalValueResult.checkDigitString = this._checkDigitString;
        }
        if (this._sid !== undefined) {
            hasAnyValues = true;
            internalValueResult.sid = this._sid;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._checkDigitString = undefined;
            this._sid = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._checkDigitString = value.checkDigitString;
            this._sid = value.sid;
        }
    }
    get checkDigitString() {
        return this.getStringAttribute('check_digit_string');
    }
    set checkDigitString(value) {
        this._checkDigitString = value;
    }
    // Temporarily expose input value. Use with caution.
    get checkDigitStringInput() {
        return this._checkDigitString;
    }
    get sid() {
        return this.getNumberAttribute('sid');
    }
    set sid(value) {
        this._sid = value;
    }
    // Temporarily expose input value. Use with caution.
    get sidInput() {
        return this._sid;
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsOutputReference = MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsOutputReference;
_l = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsOutputReference[_l] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsOutputReference", version: "19.15.0" };
class MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsList = MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsList;
_m = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsList[_m] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsList", version: "19.15.0" };
function medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        nielsen_distribution_type: cdktf.stringToTerraform(struct.nielsenDistributionType),
        nielsen_cbet_settings: medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsToTerraform(struct.nielsenCbetSettings),
        nielsen_naes_ii_nw_settings: cdktf.listMapper(medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsToTerraform, true)(struct.nielsenNaesIiNwSettings),
    };
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsToTerraform = medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsToTerraform;
function medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        nielsen_distribution_type: {
            value: cdktf.stringToHclTerraform(struct.nielsenDistributionType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        nielsen_cbet_settings: {
            value: medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsToHclTerraform(struct.nielsenCbetSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsList",
        },
        nielsen_naes_ii_nw_settings: {
            value: cdktf.listMapperHcl(medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsToHclTerraform, true)(struct.nielsenNaesIiNwSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsToHclTerraform = medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // nielsen_cbet_settings - computed: false, optional: true, required: false
        this._nielsenCbetSettings = new MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutputReference(this, "nielsen_cbet_settings");
        // nielsen_naes_ii_nw_settings - computed: false, optional: true, required: false
        this._nielsenNaesIiNwSettings = new MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsList(this, "nielsen_naes_ii_nw_settings", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nielsenDistributionType !== undefined) {
            hasAnyValues = true;
            internalValueResult.nielsenDistributionType = this._nielsenDistributionType;
        }
        if (this._nielsenCbetSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.nielsenCbetSettings = this._nielsenCbetSettings?.internalValue;
        }
        if (this._nielsenNaesIiNwSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.nielsenNaesIiNwSettings = this._nielsenNaesIiNwSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nielsenDistributionType = undefined;
            this._nielsenCbetSettings.internalValue = undefined;
            this._nielsenNaesIiNwSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nielsenDistributionType = value.nielsenDistributionType;
            this._nielsenCbetSettings.internalValue = value.nielsenCbetSettings;
            this._nielsenNaesIiNwSettings.internalValue = value.nielsenNaesIiNwSettings;
        }
    }
    get nielsenDistributionType() {
        return this.getStringAttribute('nielsen_distribution_type');
    }
    set nielsenDistributionType(value) {
        this._nielsenDistributionType = value;
    }
    resetNielsenDistributionType() {
        this._nielsenDistributionType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nielsenDistributionTypeInput() {
        return this._nielsenDistributionType;
    }
    get nielsenCbetSettings() {
        return this._nielsenCbetSettings;
    }
    putNielsenCbetSettings(value) {
        this._nielsenCbetSettings.internalValue = value;
    }
    resetNielsenCbetSettings() {
        this._nielsenCbetSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nielsenCbetSettingsInput() {
        return this._nielsenCbetSettings.internalValue;
    }
    get nielsenNaesIiNwSettings() {
        return this._nielsenNaesIiNwSettings;
    }
    putNielsenNaesIiNwSettings(value) {
        this._nielsenNaesIiNwSettings.internalValue = value;
    }
    resetNielsenNaesIiNwSettings() {
        this._nielsenNaesIiNwSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nielsenNaesIiNwSettingsInput() {
        return this._nielsenNaesIiNwSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsOutputReference = MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsOutputReference;
_o = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsOutputReference[_o] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        nielsen_watermarks_settings: medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsToTerraform(struct.nielsenWatermarksSettings),
    };
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsToTerraform = medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsToTerraform;
function medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        nielsen_watermarks_settings: {
            value: medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsToHclTerraform(struct.nielsenWatermarksSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsToHclTerraform = medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // nielsen_watermarks_settings - computed: false, optional: true, required: false
        this._nielsenWatermarksSettings = new MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsOutputReference(this, "nielsen_watermarks_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nielsenWatermarksSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.nielsenWatermarksSettings = this._nielsenWatermarksSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nielsenWatermarksSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nielsenWatermarksSettings.internalValue = value.nielsenWatermarksSettings;
        }
    }
    get nielsenWatermarksSettings() {
        return this._nielsenWatermarksSettings;
    }
    putNielsenWatermarksSettings(value) {
        this._nielsenWatermarksSettings.internalValue = value;
    }
    resetNielsenWatermarksSettings() {
        this._nielsenWatermarksSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nielsenWatermarksSettingsInput() {
        return this._nielsenWatermarksSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsOutputReference = MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsOutputReference;
_p = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsOutputReference[_p] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bitrate: cdktf.numberToTerraform(struct.bitrate),
        coding_mode: cdktf.stringToTerraform(struct.codingMode),
        input_type: cdktf.stringToTerraform(struct.inputType),
        profile: cdktf.stringToTerraform(struct.profile),
        rate_control_mode: cdktf.stringToTerraform(struct.rateControlMode),
        raw_format: cdktf.stringToTerraform(struct.rawFormat),
        sample_rate: cdktf.numberToTerraform(struct.sampleRate),
        spec: cdktf.stringToTerraform(struct.spec),
        vbr_quality: cdktf.stringToTerraform(struct.vbrQuality),
    };
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsToTerraform = medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsToTerraform;
function medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bitrate: {
            value: cdktf.numberToHclTerraform(struct.bitrate),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        coding_mode: {
            value: cdktf.stringToHclTerraform(struct.codingMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        input_type: {
            value: cdktf.stringToHclTerraform(struct.inputType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        profile: {
            value: cdktf.stringToHclTerraform(struct.profile),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        rate_control_mode: {
            value: cdktf.stringToHclTerraform(struct.rateControlMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        raw_format: {
            value: cdktf.stringToHclTerraform(struct.rawFormat),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sample_rate: {
            value: cdktf.numberToHclTerraform(struct.sampleRate),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        spec: {
            value: cdktf.stringToHclTerraform(struct.spec),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        vbr_quality: {
            value: cdktf.stringToHclTerraform(struct.vbrQuality),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsToHclTerraform = medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bitrate !== undefined) {
            hasAnyValues = true;
            internalValueResult.bitrate = this._bitrate;
        }
        if (this._codingMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.codingMode = this._codingMode;
        }
        if (this._inputType !== undefined) {
            hasAnyValues = true;
            internalValueResult.inputType = this._inputType;
        }
        if (this._profile !== undefined) {
            hasAnyValues = true;
            internalValueResult.profile = this._profile;
        }
        if (this._rateControlMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.rateControlMode = this._rateControlMode;
        }
        if (this._rawFormat !== undefined) {
            hasAnyValues = true;
            internalValueResult.rawFormat = this._rawFormat;
        }
        if (this._sampleRate !== undefined) {
            hasAnyValues = true;
            internalValueResult.sampleRate = this._sampleRate;
        }
        if (this._spec !== undefined) {
            hasAnyValues = true;
            internalValueResult.spec = this._spec;
        }
        if (this._vbrQuality !== undefined) {
            hasAnyValues = true;
            internalValueResult.vbrQuality = this._vbrQuality;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bitrate = undefined;
            this._codingMode = undefined;
            this._inputType = undefined;
            this._profile = undefined;
            this._rateControlMode = undefined;
            this._rawFormat = undefined;
            this._sampleRate = undefined;
            this._spec = undefined;
            this._vbrQuality = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bitrate = value.bitrate;
            this._codingMode = value.codingMode;
            this._inputType = value.inputType;
            this._profile = value.profile;
            this._rateControlMode = value.rateControlMode;
            this._rawFormat = value.rawFormat;
            this._sampleRate = value.sampleRate;
            this._spec = value.spec;
            this._vbrQuality = value.vbrQuality;
        }
    }
    get bitrate() {
        return this.getNumberAttribute('bitrate');
    }
    set bitrate(value) {
        this._bitrate = value;
    }
    resetBitrate() {
        this._bitrate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bitrateInput() {
        return this._bitrate;
    }
    get codingMode() {
        return this.getStringAttribute('coding_mode');
    }
    set codingMode(value) {
        this._codingMode = value;
    }
    resetCodingMode() {
        this._codingMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get codingModeInput() {
        return this._codingMode;
    }
    get inputType() {
        return this.getStringAttribute('input_type');
    }
    set inputType(value) {
        this._inputType = value;
    }
    resetInputType() {
        this._inputType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inputTypeInput() {
        return this._inputType;
    }
    get profile() {
        return this.getStringAttribute('profile');
    }
    set profile(value) {
        this._profile = value;
    }
    resetProfile() {
        this._profile = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get profileInput() {
        return this._profile;
    }
    get rateControlMode() {
        return this.getStringAttribute('rate_control_mode');
    }
    set rateControlMode(value) {
        this._rateControlMode = value;
    }
    resetRateControlMode() {
        this._rateControlMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rateControlModeInput() {
        return this._rateControlMode;
    }
    get rawFormat() {
        return this.getStringAttribute('raw_format');
    }
    set rawFormat(value) {
        this._rawFormat = value;
    }
    resetRawFormat() {
        this._rawFormat = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rawFormatInput() {
        return this._rawFormat;
    }
    get sampleRate() {
        return this.getNumberAttribute('sample_rate');
    }
    set sampleRate(value) {
        this._sampleRate = value;
    }
    resetSampleRate() {
        this._sampleRate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sampleRateInput() {
        return this._sampleRate;
    }
    get spec() {
        return this.getStringAttribute('spec');
    }
    set spec(value) {
        this._spec = value;
    }
    resetSpec() {
        this._spec = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get specInput() {
        return this._spec;
    }
    get vbrQuality() {
        return this.getStringAttribute('vbr_quality');
    }
    set vbrQuality(value) {
        this._vbrQuality = value;
    }
    resetVbrQuality() {
        this._vbrQuality = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vbrQualityInput() {
        return this._vbrQuality;
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsOutputReference = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsOutputReference;
_q = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsOutputReference[_q] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bitrate: cdktf.numberToTerraform(struct.bitrate),
        bitstream_mode: cdktf.stringToTerraform(struct.bitstreamMode),
        coding_mode: cdktf.stringToTerraform(struct.codingMode),
        dialnorm: cdktf.numberToTerraform(struct.dialnorm),
        drc_profile: cdktf.stringToTerraform(struct.drcProfile),
        lfe_filter: cdktf.stringToTerraform(struct.lfeFilter),
        metadata_control: cdktf.stringToTerraform(struct.metadataControl),
    };
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsToTerraform = medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsToTerraform;
function medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bitrate: {
            value: cdktf.numberToHclTerraform(struct.bitrate),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        bitstream_mode: {
            value: cdktf.stringToHclTerraform(struct.bitstreamMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        coding_mode: {
            value: cdktf.stringToHclTerraform(struct.codingMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        dialnorm: {
            value: cdktf.numberToHclTerraform(struct.dialnorm),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        drc_profile: {
            value: cdktf.stringToHclTerraform(struct.drcProfile),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        lfe_filter: {
            value: cdktf.stringToHclTerraform(struct.lfeFilter),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        metadata_control: {
            value: cdktf.stringToHclTerraform(struct.metadataControl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsToHclTerraform = medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsToHclTerraform;
class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bitrate !== undefined) {
            hasAnyValues = true;
            internalValueResult.bitrate = this._bitrate;
        }
        if (this._bitstreamMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.bitstreamMode = this._bitstreamMode;
        }
        if (this._codingMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.codingMode = this._codingMode;
        }
        if (this._dialnorm !== undefined) {
            hasAnyValues = true;
            internalValueResult.dialnorm = this._dialnorm;
        }
        if (this._drcProfile !== undefined) {
            hasAnyValues = true;
            internalValueResult.drcProfile = this._drcProfile;
        }
        if (this._lfeFilter !== undefined) {
            hasAnyValues = true;
            internalValueResult.lfeFilter = this._lfeFilter;
        }
        if (this._metadataControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.metadataControl = this._metadataControl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bitrate = undefined;
            this._bitstreamMode = undefined;
            this._codingMode = undefined;
            this._dialnorm = undefined;
            this._drcProfile = undefined;
            this._lfeFilter = undefined;
            this._metadataControl = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bitrate = value.bitrate;
            this._bitstreamMode = value.bitstreamMode;
            this._codingMode = value.codingMode;
            this._dialnorm = value.dialnorm;
            this._drcProfile = value.drcProfile;
            this._lfeFilter = value.lfeFilter;
            this._metadataControl = value.metadataControl;
        }
    }
    get bitrate() {
        return this.getNumberAttribute('bitrate');
    }
    set bitrate(value) {
        this._bitrate = value;
    }
    resetBitrate() {
        this._bitrate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bitrateInput() {
        return this._bitrate;
    }
    get bitstreamMode() {
        return this.getStringAttribute('bitstream_mode');
    }
    set bitstreamMode(value) {
        this._bitstreamMode = value;
    }
    resetBitstreamMode() {
        this._bitstreamMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bitstreamModeInput() {
        return this._bitstreamMode;
    }
    get codingMode() {
        return this.getStringAttribute('coding_mode');
    }
    set codingMode(value) {
        this._codingMode = value;
    }
    resetCodingMode() {
        this._codingMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get codingModeInput() {
        return this._codingMode;
    }
    get dialnorm() {
        return this.getNumberAttribute('dialnorm');
    }
    set dialnorm(value) {
        this._dialnorm = value;
    }
    resetDialnorm() {
        this._dialnorm = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dialnormInput() {
        return this._dialnorm;
    }
    get drcProfile() {
        return this.getStringAttribute('drc_profile');
    }
    set drcProfile(value) {
        this._drcProfile = value;
    }
    resetDrcProfile() {
        this._drcProfile = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get drcProfileInput() {
        return this._drcProfile;
    }
    get lfeFilter() {
        return this.getStringAttribute('lfe_filter');
    }
    set lfeFilter(value) {
        this._lfeFilter = value;
    }
    resetLfeFilter() {
        this._lfeFilter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lfeFilterInput() {
        return this._lfeFilter;
    }
    get metadataControl() {
        return this.getStringAttribute('metadata_control');
    }
    set metadataControl(value) {
        this._metadataControl = value;
    }
    resetMetadataControl() {
        this._metadataControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metadataControlInput() {
        return this._metadataControl;
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsOutputReference = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsOutputReference;
_r = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsOutputReference[_r] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bitrate: cdktf.numberToTerraform(struct.bitrate),
        coding_mode: cdktf.stringToTerraform(struct.codingMode),
        dialnorm: cdktf.numberToTerraform(struct.dialnorm),
        drc_line: cdktf.stringToTerraform(struct.drcLine),
        drc_rf: cdktf.stringToTerraform(struct.drcRf),
        height_trim: cdktf.numberToTerraform(struct.heightTrim),
        surround_trim: cdktf.numberToTerraform(struct.surroundTrim),
    };
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettingsToTerraform = medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettingsToTerraform;
function medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bitrate: {
            value: cdktf.numberToHclTerraform(struct.bitrate),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        coding_mode: {
            value: cdktf.stringToHclTerraform(struct.codingMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        dialnorm: {
            value: cdktf.numberToHclTerraform(struct.dialnorm),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        drc_line: {
            value: cdktf.stringToHclTerraform(struct.drcLine),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        drc_rf: {
            value: cdktf.stringToHclTerraform(struct.drcRf),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        height_trim: {
            value: cdktf.numberToHclTerraform(struct.heightTrim),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        surround_trim: {
            value: cdktf.numberToHclTerraform(struct.surroundTrim),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettingsToHclTerraform = medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bitrate !== undefined) {
            hasAnyValues = true;
            internalValueResult.bitrate = this._bitrate;
        }
        if (this._codingMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.codingMode = this._codingMode;
        }
        if (this._dialnorm !== undefined) {
            hasAnyValues = true;
            internalValueResult.dialnorm = this._dialnorm;
        }
        if (this._drcLine !== undefined) {
            hasAnyValues = true;
            internalValueResult.drcLine = this._drcLine;
        }
        if (this._drcRf !== undefined) {
            hasAnyValues = true;
            internalValueResult.drcRf = this._drcRf;
        }
        if (this._heightTrim !== undefined) {
            hasAnyValues = true;
            internalValueResult.heightTrim = this._heightTrim;
        }
        if (this._surroundTrim !== undefined) {
            hasAnyValues = true;
            internalValueResult.surroundTrim = this._surroundTrim;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bitrate = undefined;
            this._codingMode = undefined;
            this._dialnorm = undefined;
            this._drcLine = undefined;
            this._drcRf = undefined;
            this._heightTrim = undefined;
            this._surroundTrim = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bitrate = value.bitrate;
            this._codingMode = value.codingMode;
            this._dialnorm = value.dialnorm;
            this._drcLine = value.drcLine;
            this._drcRf = value.drcRf;
            this._heightTrim = value.heightTrim;
            this._surroundTrim = value.surroundTrim;
        }
    }
    get bitrate() {
        return this.getNumberAttribute('bitrate');
    }
    set bitrate(value) {
        this._bitrate = value;
    }
    resetBitrate() {
        this._bitrate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bitrateInput() {
        return this._bitrate;
    }
    get codingMode() {
        return this.getStringAttribute('coding_mode');
    }
    set codingMode(value) {
        this._codingMode = value;
    }
    resetCodingMode() {
        this._codingMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get codingModeInput() {
        return this._codingMode;
    }
    get dialnorm() {
        return this.getNumberAttribute('dialnorm');
    }
    set dialnorm(value) {
        this._dialnorm = value;
    }
    resetDialnorm() {
        this._dialnorm = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dialnormInput() {
        return this._dialnorm;
    }
    get drcLine() {
        return this.getStringAttribute('drc_line');
    }
    set drcLine(value) {
        this._drcLine = value;
    }
    resetDrcLine() {
        this._drcLine = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get drcLineInput() {
        return this._drcLine;
    }
    get drcRf() {
        return this.getStringAttribute('drc_rf');
    }
    set drcRf(value) {
        this._drcRf = value;
    }
    resetDrcRf() {
        this._drcRf = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get drcRfInput() {
        return this._drcRf;
    }
    get heightTrim() {
        return this.getNumberAttribute('height_trim');
    }
    set heightTrim(value) {
        this._heightTrim = value;
    }
    resetHeightTrim() {
        this._heightTrim = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get heightTrimInput() {
        return this._heightTrim;
    }
    get surroundTrim() {
        return this.getNumberAttribute('surround_trim');
    }
    set surroundTrim(value) {
        this._surroundTrim = value;
    }
    resetSurroundTrim() {
        this._surroundTrim = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get surroundTrimInput() {
        return this._surroundTrim;
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettingsOutputReference = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettingsOutputReference;
_s = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettingsOutputReference[_s] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        attenuation_control: cdktf.stringToTerraform(struct.attenuationControl),
        bitrate: cdktf.numberToTerraform(struct.bitrate),
        bitstream_mode: cdktf.stringToTerraform(struct.bitstreamMode),
        coding_mode: cdktf.stringToTerraform(struct.codingMode),
        dc_filter: cdktf.stringToTerraform(struct.dcFilter),
        dialnorm: cdktf.numberToTerraform(struct.dialnorm),
        drc_line: cdktf.stringToTerraform(struct.drcLine),
        drc_rf: cdktf.stringToTerraform(struct.drcRf),
        lfe_control: cdktf.stringToTerraform(struct.lfeControl),
        lfe_filter: cdktf.stringToTerraform(struct.lfeFilter),
        lo_ro_center_mix_level: cdktf.numberToTerraform(struct.loRoCenterMixLevel),
        lo_ro_surround_mix_level: cdktf.numberToTerraform(struct.loRoSurroundMixLevel),
        lt_rt_center_mix_level: cdktf.numberToTerraform(struct.ltRtCenterMixLevel),
        lt_rt_surround_mix_level: cdktf.numberToTerraform(struct.ltRtSurroundMixLevel),
        metadata_control: cdktf.stringToTerraform(struct.metadataControl),
        passthrough_control: cdktf.stringToTerraform(struct.passthroughControl),
        phase_control: cdktf.stringToTerraform(struct.phaseControl),
        stereo_downmix: cdktf.stringToTerraform(struct.stereoDownmix),
        surround_ex_mode: cdktf.stringToTerraform(struct.surroundExMode),
        surround_mode: cdktf.stringToTerraform(struct.surroundMode),
    };
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsToTerraform = medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsToTerraform;
function medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        attenuation_control: {
            value: cdktf.stringToHclTerraform(struct.attenuationControl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        bitrate: {
            value: cdktf.numberToHclTerraform(struct.bitrate),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        bitstream_mode: {
            value: cdktf.stringToHclTerraform(struct.bitstreamMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        coding_mode: {
            value: cdktf.stringToHclTerraform(struct.codingMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        dc_filter: {
            value: cdktf.stringToHclTerraform(struct.dcFilter),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        dialnorm: {
            value: cdktf.numberToHclTerraform(struct.dialnorm),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        drc_line: {
            value: cdktf.stringToHclTerraform(struct.drcLine),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        drc_rf: {
            value: cdktf.stringToHclTerraform(struct.drcRf),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        lfe_control: {
            value: cdktf.stringToHclTerraform(struct.lfeControl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        lfe_filter: {
            value: cdktf.stringToHclTerraform(struct.lfeFilter),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        lo_ro_center_mix_level: {
            value: cdktf.numberToHclTerraform(struct.loRoCenterMixLevel),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        lo_ro_surround_mix_level: {
            value: cdktf.numberToHclTerraform(struct.loRoSurroundMixLevel),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        lt_rt_center_mix_level: {
            value: cdktf.numberToHclTerraform(struct.ltRtCenterMixLevel),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        lt_rt_surround_mix_level: {
            value: cdktf.numberToHclTerraform(struct.ltRtSurroundMixLevel),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        metadata_control: {
            value: cdktf.stringToHclTerraform(struct.metadataControl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        passthrough_control: {
            value: cdktf.stringToHclTerraform(struct.passthroughControl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        phase_control: {
            value: cdktf.stringToHclTerraform(struct.phaseControl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        stereo_downmix: {
            value: cdktf.stringToHclTerraform(struct.stereoDownmix),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        surround_ex_mode: {
            value: cdktf.stringToHclTerraform(struct.surroundExMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        surround_mode: {
            value: cdktf.stringToHclTerraform(struct.surroundMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsToHclTerraform = medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsToHclTerraform;
class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._attenuationControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.attenuationControl = this._attenuationControl;
        }
        if (this._bitrate !== undefined) {
            hasAnyValues = true;
            internalValueResult.bitrate = this._bitrate;
        }
        if (this._bitstreamMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.bitstreamMode = this._bitstreamMode;
        }
        if (this._codingMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.codingMode = this._codingMode;
        }
        if (this._dcFilter !== undefined) {
            hasAnyValues = true;
            internalValueResult.dcFilter = this._dcFilter;
        }
        if (this._dialnorm !== undefined) {
            hasAnyValues = true;
            internalValueResult.dialnorm = this._dialnorm;
        }
        if (this._drcLine !== undefined) {
            hasAnyValues = true;
            internalValueResult.drcLine = this._drcLine;
        }
        if (this._drcRf !== undefined) {
            hasAnyValues = true;
            internalValueResult.drcRf = this._drcRf;
        }
        if (this._lfeControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.lfeControl = this._lfeControl;
        }
        if (this._lfeFilter !== undefined) {
            hasAnyValues = true;
            internalValueResult.lfeFilter = this._lfeFilter;
        }
        if (this._loRoCenterMixLevel !== undefined) {
            hasAnyValues = true;
            internalValueResult.loRoCenterMixLevel = this._loRoCenterMixLevel;
        }
        if (this._loRoSurroundMixLevel !== undefined) {
            hasAnyValues = true;
            internalValueResult.loRoSurroundMixLevel = this._loRoSurroundMixLevel;
        }
        if (this._ltRtCenterMixLevel !== undefined) {
            hasAnyValues = true;
            internalValueResult.ltRtCenterMixLevel = this._ltRtCenterMixLevel;
        }
        if (this._ltRtSurroundMixLevel !== undefined) {
            hasAnyValues = true;
            internalValueResult.ltRtSurroundMixLevel = this._ltRtSurroundMixLevel;
        }
        if (this._metadataControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.metadataControl = this._metadataControl;
        }
        if (this._passthroughControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.passthroughControl = this._passthroughControl;
        }
        if (this._phaseControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.phaseControl = this._phaseControl;
        }
        if (this._stereoDownmix !== undefined) {
            hasAnyValues = true;
            internalValueResult.stereoDownmix = this._stereoDownmix;
        }
        if (this._surroundExMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.surroundExMode = this._surroundExMode;
        }
        if (this._surroundMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.surroundMode = this._surroundMode;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._attenuationControl = undefined;
            this._bitrate = undefined;
            this._bitstreamMode = undefined;
            this._codingMode = undefined;
            this._dcFilter = undefined;
            this._dialnorm = undefined;
            this._drcLine = undefined;
            this._drcRf = undefined;
            this._lfeControl = undefined;
            this._lfeFilter = undefined;
            this._loRoCenterMixLevel = undefined;
            this._loRoSurroundMixLevel = undefined;
            this._ltRtCenterMixLevel = undefined;
            this._ltRtSurroundMixLevel = undefined;
            this._metadataControl = undefined;
            this._passthroughControl = undefined;
            this._phaseControl = undefined;
            this._stereoDownmix = undefined;
            this._surroundExMode = undefined;
            this._surroundMode = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._attenuationControl = value.attenuationControl;
            this._bitrate = value.bitrate;
            this._bitstreamMode = value.bitstreamMode;
            this._codingMode = value.codingMode;
            this._dcFilter = value.dcFilter;
            this._dialnorm = value.dialnorm;
            this._drcLine = value.drcLine;
            this._drcRf = value.drcRf;
            this._lfeControl = value.lfeControl;
            this._lfeFilter = value.lfeFilter;
            this._loRoCenterMixLevel = value.loRoCenterMixLevel;
            this._loRoSurroundMixLevel = value.loRoSurroundMixLevel;
            this._ltRtCenterMixLevel = value.ltRtCenterMixLevel;
            this._ltRtSurroundMixLevel = value.ltRtSurroundMixLevel;
            this._metadataControl = value.metadataControl;
            this._passthroughControl = value.passthroughControl;
            this._phaseControl = value.phaseControl;
            this._stereoDownmix = value.stereoDownmix;
            this._surroundExMode = value.surroundExMode;
            this._surroundMode = value.surroundMode;
        }
    }
    get attenuationControl() {
        return this.getStringAttribute('attenuation_control');
    }
    set attenuationControl(value) {
        this._attenuationControl = value;
    }
    resetAttenuationControl() {
        this._attenuationControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get attenuationControlInput() {
        return this._attenuationControl;
    }
    get bitrate() {
        return this.getNumberAttribute('bitrate');
    }
    set bitrate(value) {
        this._bitrate = value;
    }
    resetBitrate() {
        this._bitrate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bitrateInput() {
        return this._bitrate;
    }
    get bitstreamMode() {
        return this.getStringAttribute('bitstream_mode');
    }
    set bitstreamMode(value) {
        this._bitstreamMode = value;
    }
    resetBitstreamMode() {
        this._bitstreamMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bitstreamModeInput() {
        return this._bitstreamMode;
    }
    get codingMode() {
        return this.getStringAttribute('coding_mode');
    }
    set codingMode(value) {
        this._codingMode = value;
    }
    resetCodingMode() {
        this._codingMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get codingModeInput() {
        return this._codingMode;
    }
    get dcFilter() {
        return this.getStringAttribute('dc_filter');
    }
    set dcFilter(value) {
        this._dcFilter = value;
    }
    resetDcFilter() {
        this._dcFilter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dcFilterInput() {
        return this._dcFilter;
    }
    get dialnorm() {
        return this.getNumberAttribute('dialnorm');
    }
    set dialnorm(value) {
        this._dialnorm = value;
    }
    resetDialnorm() {
        this._dialnorm = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dialnormInput() {
        return this._dialnorm;
    }
    get drcLine() {
        return this.getStringAttribute('drc_line');
    }
    set drcLine(value) {
        this._drcLine = value;
    }
    resetDrcLine() {
        this._drcLine = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get drcLineInput() {
        return this._drcLine;
    }
    get drcRf() {
        return this.getStringAttribute('drc_rf');
    }
    set drcRf(value) {
        this._drcRf = value;
    }
    resetDrcRf() {
        this._drcRf = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get drcRfInput() {
        return this._drcRf;
    }
    get lfeControl() {
        return this.getStringAttribute('lfe_control');
    }
    set lfeControl(value) {
        this._lfeControl = value;
    }
    resetLfeControl() {
        this._lfeControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lfeControlInput() {
        return this._lfeControl;
    }
    get lfeFilter() {
        return this.getStringAttribute('lfe_filter');
    }
    set lfeFilter(value) {
        this._lfeFilter = value;
    }
    resetLfeFilter() {
        this._lfeFilter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lfeFilterInput() {
        return this._lfeFilter;
    }
    get loRoCenterMixLevel() {
        return this.getNumberAttribute('lo_ro_center_mix_level');
    }
    set loRoCenterMixLevel(value) {
        this._loRoCenterMixLevel = value;
    }
    resetLoRoCenterMixLevel() {
        this._loRoCenterMixLevel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loRoCenterMixLevelInput() {
        return this._loRoCenterMixLevel;
    }
    get loRoSurroundMixLevel() {
        return this.getNumberAttribute('lo_ro_surround_mix_level');
    }
    set loRoSurroundMixLevel(value) {
        this._loRoSurroundMixLevel = value;
    }
    resetLoRoSurroundMixLevel() {
        this._loRoSurroundMixLevel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loRoSurroundMixLevelInput() {
        return this._loRoSurroundMixLevel;
    }
    get ltRtCenterMixLevel() {
        return this.getNumberAttribute('lt_rt_center_mix_level');
    }
    set ltRtCenterMixLevel(value) {
        this._ltRtCenterMixLevel = value;
    }
    resetLtRtCenterMixLevel() {
        this._ltRtCenterMixLevel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ltRtCenterMixLevelInput() {
        return this._ltRtCenterMixLevel;
    }
    get ltRtSurroundMixLevel() {
        return this.getNumberAttribute('lt_rt_surround_mix_level');
    }
    set ltRtSurroundMixLevel(value) {
        this._ltRtSurroundMixLevel = value;
    }
    resetLtRtSurroundMixLevel() {
        this._ltRtSurroundMixLevel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ltRtSurroundMixLevelInput() {
        return this._ltRtSurroundMixLevel;
    }
    get metadataControl() {
        return this.getStringAttribute('metadata_control');
    }
    set metadataControl(value) {
        this._metadataControl = value;
    }
    resetMetadataControl() {
        this._metadataControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metadataControlInput() {
        return this._metadataControl;
    }
    get passthroughControl() {
        return this.getStringAttribute('passthrough_control');
    }
    set passthroughControl(value) {
        this._passthroughControl = value;
    }
    resetPassthroughControl() {
        this._passthroughControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passthroughControlInput() {
        return this._passthroughControl;
    }
    get phaseControl() {
        return this.getStringAttribute('phase_control');
    }
    set phaseControl(value) {
        this._phaseControl = value;
    }
    resetPhaseControl() {
        this._phaseControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get phaseControlInput() {
        return this._phaseControl;
    }
    get stereoDownmix() {
        return this.getStringAttribute('stereo_downmix');
    }
    set stereoDownmix(value) {
        this._stereoDownmix = value;
    }
    resetStereoDownmix() {
        this._stereoDownmix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stereoDownmixInput() {
        return this._stereoDownmix;
    }
    get surroundExMode() {
        return this.getStringAttribute('surround_ex_mode');
    }
    set surroundExMode(value) {
        this._surroundExMode = value;
    }
    resetSurroundExMode() {
        this._surroundExMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get surroundExModeInput() {
        return this._surroundExMode;
    }
    get surroundMode() {
        return this.getStringAttribute('surround_mode');
    }
    set surroundMode(value) {
        this._surroundMode = value;
    }
    resetSurroundMode() {
        this._surroundMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get surroundModeInput() {
        return this._surroundMode;
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsOutputReference = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsOutputReference;
_t = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsOutputReference[_t] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bitrate: cdktf.numberToTerraform(struct.bitrate),
        coding_mode: cdktf.stringToTerraform(struct.codingMode),
        sample_rate: cdktf.numberToTerraform(struct.sampleRate),
    };
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsToTerraform = medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsToTerraform;
function medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bitrate: {
            value: cdktf.numberToHclTerraform(struct.bitrate),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        coding_mode: {
            value: cdktf.stringToHclTerraform(struct.codingMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sample_rate: {
            value: cdktf.numberToHclTerraform(struct.sampleRate),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsToHclTerraform = medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsToHclTerraform;
class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bitrate !== undefined) {
            hasAnyValues = true;
            internalValueResult.bitrate = this._bitrate;
        }
        if (this._codingMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.codingMode = this._codingMode;
        }
        if (this._sampleRate !== undefined) {
            hasAnyValues = true;
            internalValueResult.sampleRate = this._sampleRate;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bitrate = undefined;
            this._codingMode = undefined;
            this._sampleRate = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bitrate = value.bitrate;
            this._codingMode = value.codingMode;
            this._sampleRate = value.sampleRate;
        }
    }
    get bitrate() {
        return this.getNumberAttribute('bitrate');
    }
    set bitrate(value) {
        this._bitrate = value;
    }
    resetBitrate() {
        this._bitrate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bitrateInput() {
        return this._bitrate;
    }
    get codingMode() {
        return this.getStringAttribute('coding_mode');
    }
    set codingMode(value) {
        this._codingMode = value;
    }
    resetCodingMode() {
        this._codingMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get codingModeInput() {
        return this._codingMode;
    }
    get sampleRate() {
        return this.getNumberAttribute('sample_rate');
    }
    set sampleRate(value) {
        this._sampleRate = value;
    }
    resetSampleRate() {
        this._sampleRate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sampleRateInput() {
        return this._sampleRate;
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsOutputReference = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsOutputReference;
_u = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsOutputReference[_u] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettingsToTerraform = medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettingsToTerraform;
function medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettingsToHclTerraform = medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettingsOutputReference = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettingsOutputReference;
_v = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettingsOutputReference[_v] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bit_depth: cdktf.numberToTerraform(struct.bitDepth),
        coding_mode: cdktf.stringToTerraform(struct.codingMode),
        sample_rate: cdktf.numberToTerraform(struct.sampleRate),
    };
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsToTerraform = medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsToTerraform;
function medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bit_depth: {
            value: cdktf.numberToHclTerraform(struct.bitDepth),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        coding_mode: {
            value: cdktf.stringToHclTerraform(struct.codingMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sample_rate: {
            value: cdktf.numberToHclTerraform(struct.sampleRate),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsToHclTerraform = medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bitDepth !== undefined) {
            hasAnyValues = true;
            internalValueResult.bitDepth = this._bitDepth;
        }
        if (this._codingMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.codingMode = this._codingMode;
        }
        if (this._sampleRate !== undefined) {
            hasAnyValues = true;
            internalValueResult.sampleRate = this._sampleRate;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bitDepth = undefined;
            this._codingMode = undefined;
            this._sampleRate = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bitDepth = value.bitDepth;
            this._codingMode = value.codingMode;
            this._sampleRate = value.sampleRate;
        }
    }
    get bitDepth() {
        return this.getNumberAttribute('bit_depth');
    }
    set bitDepth(value) {
        this._bitDepth = value;
    }
    resetBitDepth() {
        this._bitDepth = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bitDepthInput() {
        return this._bitDepth;
    }
    get codingMode() {
        return this.getStringAttribute('coding_mode');
    }
    set codingMode(value) {
        this._codingMode = value;
    }
    resetCodingMode() {
        this._codingMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get codingModeInput() {
        return this._codingMode;
    }
    get sampleRate() {
        return this.getNumberAttribute('sample_rate');
    }
    set sampleRate(value) {
        this._sampleRate = value;
    }
    resetSampleRate() {
        this._sampleRate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sampleRateInput() {
        return this._sampleRate;
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsOutputReference = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsOutputReference;
_w = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsOutputReference[_w] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        aac_settings: medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsToTerraform(struct.aacSettings),
        ac3_settings: medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsToTerraform(struct.ac3Settings),
        eac3_atmos_settings: medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettingsToTerraform(struct.eac3AtmosSettings),
        eac3_settings: medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsToTerraform(struct.eac3Settings),
        mp2_settings: medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsToTerraform(struct.mp2Settings),
        pass_through_settings: medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettingsToTerraform(struct.passThroughSettings),
        wav_settings: medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsToTerraform(struct.wavSettings),
    };
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsToTerraform = medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsToTerraform;
function medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        aac_settings: {
            value: medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsToHclTerraform(struct.aacSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsList",
        },
        ac3_settings: {
            value: medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsToHclTerraform(struct.ac3Settings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsList",
        },
        eac3_atmos_settings: {
            value: medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettingsToHclTerraform(struct.eac3AtmosSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettingsList",
        },
        eac3_settings: {
            value: medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsToHclTerraform(struct.eac3Settings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsList",
        },
        mp2_settings: {
            value: medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsToHclTerraform(struct.mp2Settings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsList",
        },
        pass_through_settings: {
            value: medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettingsToHclTerraform(struct.passThroughSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettingsList",
        },
        wav_settings: {
            value: medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsToHclTerraform(struct.wavSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsToHclTerraform = medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // aac_settings - computed: false, optional: true, required: false
        this._aacSettings = new MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsOutputReference(this, "aac_settings");
        // ac3_settings - computed: false, optional: true, required: false
        this._ac3Settings = new MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsOutputReference(this, "ac3_settings");
        // eac3_atmos_settings - computed: false, optional: true, required: false
        this._eac3AtmosSettings = new MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettingsOutputReference(this, "eac3_atmos_settings");
        // eac3_settings - computed: false, optional: true, required: false
        this._eac3Settings = new MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsOutputReference(this, "eac3_settings");
        // mp2_settings - computed: false, optional: true, required: false
        this._mp2Settings = new MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsOutputReference(this, "mp2_settings");
        // pass_through_settings - computed: false, optional: true, required: false
        this._passThroughSettings = new MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettingsOutputReference(this, "pass_through_settings");
        // wav_settings - computed: false, optional: true, required: false
        this._wavSettings = new MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsOutputReference(this, "wav_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._aacSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.aacSettings = this._aacSettings?.internalValue;
        }
        if (this._ac3Settings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ac3Settings = this._ac3Settings?.internalValue;
        }
        if (this._eac3AtmosSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.eac3AtmosSettings = this._eac3AtmosSettings?.internalValue;
        }
        if (this._eac3Settings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.eac3Settings = this._eac3Settings?.internalValue;
        }
        if (this._mp2Settings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mp2Settings = this._mp2Settings?.internalValue;
        }
        if (this._passThroughSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.passThroughSettings = this._passThroughSettings?.internalValue;
        }
        if (this._wavSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.wavSettings = this._wavSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._aacSettings.internalValue = undefined;
            this._ac3Settings.internalValue = undefined;
            this._eac3AtmosSettings.internalValue = undefined;
            this._eac3Settings.internalValue = undefined;
            this._mp2Settings.internalValue = undefined;
            this._passThroughSettings.internalValue = undefined;
            this._wavSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._aacSettings.internalValue = value.aacSettings;
            this._ac3Settings.internalValue = value.ac3Settings;
            this._eac3AtmosSettings.internalValue = value.eac3AtmosSettings;
            this._eac3Settings.internalValue = value.eac3Settings;
            this._mp2Settings.internalValue = value.mp2Settings;
            this._passThroughSettings.internalValue = value.passThroughSettings;
            this._wavSettings.internalValue = value.wavSettings;
        }
    }
    get aacSettings() {
        return this._aacSettings;
    }
    putAacSettings(value) {
        this._aacSettings.internalValue = value;
    }
    resetAacSettings() {
        this._aacSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aacSettingsInput() {
        return this._aacSettings.internalValue;
    }
    get ac3Settings() {
        return this._ac3Settings;
    }
    putAc3Settings(value) {
        this._ac3Settings.internalValue = value;
    }
    resetAc3Settings() {
        this._ac3Settings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ac3SettingsInput() {
        return this._ac3Settings.internalValue;
    }
    get eac3AtmosSettings() {
        return this._eac3AtmosSettings;
    }
    putEac3AtmosSettings(value) {
        this._eac3AtmosSettings.internalValue = value;
    }
    resetEac3AtmosSettings() {
        this._eac3AtmosSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get eac3AtmosSettingsInput() {
        return this._eac3AtmosSettings.internalValue;
    }
    get eac3Settings() {
        return this._eac3Settings;
    }
    putEac3Settings(value) {
        this._eac3Settings.internalValue = value;
    }
    resetEac3Settings() {
        this._eac3Settings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get eac3SettingsInput() {
        return this._eac3Settings.internalValue;
    }
    get mp2Settings() {
        return this._mp2Settings;
    }
    putMp2Settings(value) {
        this._mp2Settings.internalValue = value;
    }
    resetMp2Settings() {
        this._mp2Settings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mp2SettingsInput() {
        return this._mp2Settings.internalValue;
    }
    get passThroughSettings() {
        return this._passThroughSettings;
    }
    putPassThroughSettings(value) {
        this._passThroughSettings.internalValue = value;
    }
    resetPassThroughSettings() {
        this._passThroughSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passThroughSettingsInput() {
        return this._passThroughSettings.internalValue;
    }
    get wavSettings() {
        return this._wavSettings;
    }
    putWavSettings(value) {
        this._wavSettings.internalValue = value;
    }
    resetWavSettings() {
        this._wavSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get wavSettingsInput() {
        return this._wavSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsOutputReference = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsOutputReference;
_x = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsOutputReference[_x] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        gain: cdktf.numberToTerraform(struct.gain),
        input_channel: cdktf.numberToTerraform(struct.inputChannel),
    };
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsToTerraform = medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsToTerraform;
function medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        gain: {
            value: cdktf.numberToHclTerraform(struct.gain),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        input_channel: {
            value: cdktf.numberToHclTerraform(struct.inputChannel),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsToHclTerraform = medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsToHclTerraform;
class MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._gain !== undefined) {
            hasAnyValues = true;
            internalValueResult.gain = this._gain;
        }
        if (this._inputChannel !== undefined) {
            hasAnyValues = true;
            internalValueResult.inputChannel = this._inputChannel;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._gain = undefined;
            this._inputChannel = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._gain = value.gain;
            this._inputChannel = value.inputChannel;
        }
    }
    get gain() {
        return this.getNumberAttribute('gain');
    }
    set gain(value) {
        this._gain = value;
    }
    // Temporarily expose input value. Use with caution.
    get gainInput() {
        return this._gain;
    }
    get inputChannel() {
        return this.getNumberAttribute('input_channel');
    }
    set inputChannel(value) {
        this._inputChannel = value;
    }
    // Temporarily expose input value. Use with caution.
    get inputChannelInput() {
        return this._inputChannel;
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsOutputReference = MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsOutputReference;
_y = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsOutputReference[_y] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsOutputReference", version: "19.15.0" };
class MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsList = MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsList;
_z = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsList[_z] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsList", version: "19.15.0" };
function medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        output_channel: cdktf.numberToTerraform(struct.outputChannel),
        input_channel_levels: cdktf.listMapper(medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsToTerraform, true)(struct.inputChannelLevels),
    };
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsToTerraform = medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsToTerraform;
function medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        output_channel: {
            value: cdktf.numberToHclTerraform(struct.outputChannel),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        input_channel_levels: {
            value: cdktf.listMapperHcl(medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsToHclTerraform, true)(struct.inputChannelLevels),
            isBlock: true,
            type: "set",
            storageClassType: "MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsToHclTerraform = medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsToHclTerraform;
class MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // input_channel_levels - computed: false, optional: false, required: true
        this._inputChannelLevels = new MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsList(this, "input_channel_levels", true);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._outputChannel !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputChannel = this._outputChannel;
        }
        if (this._inputChannelLevels?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.inputChannelLevels = this._inputChannelLevels?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._outputChannel = undefined;
            this._inputChannelLevels.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._outputChannel = value.outputChannel;
            this._inputChannelLevels.internalValue = value.inputChannelLevels;
        }
    }
    get outputChannel() {
        return this.getNumberAttribute('output_channel');
    }
    set outputChannel(value) {
        this._outputChannel = value;
    }
    // Temporarily expose input value. Use with caution.
    get outputChannelInput() {
        return this._outputChannel;
    }
    get inputChannelLevels() {
        return this._inputChannelLevels;
    }
    putInputChannelLevels(value) {
        this._inputChannelLevels.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get inputChannelLevelsInput() {
        return this._inputChannelLevels.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsOutputReference = MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsOutputReference[_0] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsOutputReference", version: "19.15.0" };
class MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsList = MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsList;
_1 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsList[_1] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsList", version: "19.15.0" };
function medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        channels_in: cdktf.numberToTerraform(struct.channelsIn),
        channels_out: cdktf.numberToTerraform(struct.channelsOut),
        channel_mappings: cdktf.listMapper(medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsToTerraform, true)(struct.channelMappings),
    };
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsToTerraform = medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsToTerraform;
function medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        channels_in: {
            value: cdktf.numberToHclTerraform(struct.channelsIn),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        channels_out: {
            value: cdktf.numberToHclTerraform(struct.channelsOut),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        channel_mappings: {
            value: cdktf.listMapperHcl(medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsToHclTerraform, true)(struct.channelMappings),
            isBlock: true,
            type: "set",
            storageClassType: "MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsToHclTerraform = medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // channel_mappings - computed: false, optional: false, required: true
        this._channelMappings = new MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsList(this, "channel_mappings", true);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._channelsIn !== undefined) {
            hasAnyValues = true;
            internalValueResult.channelsIn = this._channelsIn;
        }
        if (this._channelsOut !== undefined) {
            hasAnyValues = true;
            internalValueResult.channelsOut = this._channelsOut;
        }
        if (this._channelMappings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.channelMappings = this._channelMappings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._channelsIn = undefined;
            this._channelsOut = undefined;
            this._channelMappings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._channelsIn = value.channelsIn;
            this._channelsOut = value.channelsOut;
            this._channelMappings.internalValue = value.channelMappings;
        }
    }
    get channelsIn() {
        return this.getNumberAttribute('channels_in');
    }
    set channelsIn(value) {
        this._channelsIn = value;
    }
    resetChannelsIn() {
        this._channelsIn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get channelsInInput() {
        return this._channelsIn;
    }
    get channelsOut() {
        return this.getNumberAttribute('channels_out');
    }
    set channelsOut(value) {
        this._channelsOut = value;
    }
    resetChannelsOut() {
        this._channelsOut = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get channelsOutInput() {
        return this._channelsOut;
    }
    get channelMappings() {
        return this._channelMappings;
    }
    putChannelMappings(value) {
        this._channelMappings.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get channelMappingsInput() {
        return this._channelMappings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsOutputReference = MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsOutputReference[_2] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsAudioDescriptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        audio_selector_name: cdktf.stringToTerraform(struct.audioSelectorName),
        audio_type: cdktf.stringToTerraform(struct.audioType),
        audio_type_control: cdktf.stringToTerraform(struct.audioTypeControl),
        language_code: cdktf.stringToTerraform(struct.languageCode),
        language_code_control: cdktf.stringToTerraform(struct.languageCodeControl),
        name: cdktf.stringToTerraform(struct.name),
        stream_name: cdktf.stringToTerraform(struct.streamName),
        audio_normalization_settings: medialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsToTerraform(struct.audioNormalizationSettings),
        audio_watermark_settings: medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsToTerraform(struct.audioWatermarkSettings),
        codec_settings: medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsToTerraform(struct.codecSettings),
        remix_settings: medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsToTerraform(struct.remixSettings),
    };
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsToTerraform = medialiveChannelEncoderSettingsAudioDescriptionsToTerraform;
function medialiveChannelEncoderSettingsAudioDescriptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        audio_selector_name: {
            value: cdktf.stringToHclTerraform(struct.audioSelectorName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        audio_type: {
            value: cdktf.stringToHclTerraform(struct.audioType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        audio_type_control: {
            value: cdktf.stringToHclTerraform(struct.audioTypeControl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        language_code: {
            value: cdktf.stringToHclTerraform(struct.languageCode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        language_code_control: {
            value: cdktf.stringToHclTerraform(struct.languageCodeControl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        stream_name: {
            value: cdktf.stringToHclTerraform(struct.streamName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        audio_normalization_settings: {
            value: medialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsToHclTerraform(struct.audioNormalizationSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsList",
        },
        audio_watermark_settings: {
            value: medialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsToHclTerraform(struct.audioWatermarkSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsList",
        },
        codec_settings: {
            value: medialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsToHclTerraform(struct.codecSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsList",
        },
        remix_settings: {
            value: medialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsToHclTerraform(struct.remixSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsAudioDescriptionsToHclTerraform = medialiveChannelEncoderSettingsAudioDescriptionsToHclTerraform;
class MedialiveChannelEncoderSettingsAudioDescriptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // audio_normalization_settings - computed: false, optional: true, required: false
        this._audioNormalizationSettings = new MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsOutputReference(this, "audio_normalization_settings");
        // audio_watermark_settings - computed: false, optional: true, required: false
        this._audioWatermarkSettings = new MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsOutputReference(this, "audio_watermark_settings");
        // codec_settings - computed: false, optional: true, required: false
        this._codecSettings = new MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsOutputReference(this, "codec_settings");
        // remix_settings - computed: false, optional: true, required: false
        this._remixSettings = new MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsOutputReference(this, "remix_settings");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._audioSelectorName !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioSelectorName = this._audioSelectorName;
        }
        if (this._audioType !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioType = this._audioType;
        }
        if (this._audioTypeControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioTypeControl = this._audioTypeControl;
        }
        if (this._languageCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.languageCode = this._languageCode;
        }
        if (this._languageCodeControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.languageCodeControl = this._languageCodeControl;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._streamName !== undefined) {
            hasAnyValues = true;
            internalValueResult.streamName = this._streamName;
        }
        if (this._audioNormalizationSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioNormalizationSettings = this._audioNormalizationSettings?.internalValue;
        }
        if (this._audioWatermarkSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioWatermarkSettings = this._audioWatermarkSettings?.internalValue;
        }
        if (this._codecSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.codecSettings = this._codecSettings?.internalValue;
        }
        if (this._remixSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.remixSettings = this._remixSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._audioSelectorName = undefined;
            this._audioType = undefined;
            this._audioTypeControl = undefined;
            this._languageCode = undefined;
            this._languageCodeControl = undefined;
            this._name = undefined;
            this._streamName = undefined;
            this._audioNormalizationSettings.internalValue = undefined;
            this._audioWatermarkSettings.internalValue = undefined;
            this._codecSettings.internalValue = undefined;
            this._remixSettings.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._audioSelectorName = value.audioSelectorName;
            this._audioType = value.audioType;
            this._audioTypeControl = value.audioTypeControl;
            this._languageCode = value.languageCode;
            this._languageCodeControl = value.languageCodeControl;
            this._name = value.name;
            this._streamName = value.streamName;
            this._audioNormalizationSettings.internalValue = value.audioNormalizationSettings;
            this._audioWatermarkSettings.internalValue = value.audioWatermarkSettings;
            this._codecSettings.internalValue = value.codecSettings;
            this._remixSettings.internalValue = value.remixSettings;
        }
    }
    get audioSelectorName() {
        return this.getStringAttribute('audio_selector_name');
    }
    set audioSelectorName(value) {
        this._audioSelectorName = value;
    }
    // Temporarily expose input value. Use with caution.
    get audioSelectorNameInput() {
        return this._audioSelectorName;
    }
    get audioType() {
        return this.getStringAttribute('audio_type');
    }
    set audioType(value) {
        this._audioType = value;
    }
    resetAudioType() {
        this._audioType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioTypeInput() {
        return this._audioType;
    }
    get audioTypeControl() {
        return this.getStringAttribute('audio_type_control');
    }
    set audioTypeControl(value) {
        this._audioTypeControl = value;
    }
    resetAudioTypeControl() {
        this._audioTypeControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioTypeControlInput() {
        return this._audioTypeControl;
    }
    get languageCode() {
        return this.getStringAttribute('language_code');
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    resetLanguageCode() {
        this._languageCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get languageCodeInput() {
        return this._languageCode;
    }
    get languageCodeControl() {
        return this.getStringAttribute('language_code_control');
    }
    set languageCodeControl(value) {
        this._languageCodeControl = value;
    }
    resetLanguageCodeControl() {
        this._languageCodeControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get languageCodeControlInput() {
        return this._languageCodeControl;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get streamName() {
        return this.getStringAttribute('stream_name');
    }
    set streamName(value) {
        this._streamName = value;
    }
    resetStreamName() {
        this._streamName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get streamNameInput() {
        return this._streamName;
    }
    get audioNormalizationSettings() {
        return this._audioNormalizationSettings;
    }
    putAudioNormalizationSettings(value) {
        this._audioNormalizationSettings.internalValue = value;
    }
    resetAudioNormalizationSettings() {
        this._audioNormalizationSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioNormalizationSettingsInput() {
        return this._audioNormalizationSettings.internalValue;
    }
    get audioWatermarkSettings() {
        return this._audioWatermarkSettings;
    }
    putAudioWatermarkSettings(value) {
        this._audioWatermarkSettings.internalValue = value;
    }
    resetAudioWatermarkSettings() {
        this._audioWatermarkSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioWatermarkSettingsInput() {
        return this._audioWatermarkSettings.internalValue;
    }
    get codecSettings() {
        return this._codecSettings;
    }
    putCodecSettings(value) {
        this._codecSettings.internalValue = value;
    }
    resetCodecSettings() {
        this._codecSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get codecSettingsInput() {
        return this._codecSettings.internalValue;
    }
    get remixSettings() {
        return this._remixSettings;
    }
    putRemixSettings(value) {
        this._remixSettings.internalValue = value;
    }
    resetRemixSettings() {
        this._remixSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get remixSettingsInput() {
        return this._remixSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsOutputReference = MedialiveChannelEncoderSettingsAudioDescriptionsOutputReference;
_3 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsOutputReference[_3] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsOutputReference", version: "19.15.0" };
class MedialiveChannelEncoderSettingsAudioDescriptionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MedialiveChannelEncoderSettingsAudioDescriptionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MedialiveChannelEncoderSettingsAudioDescriptionsList = MedialiveChannelEncoderSettingsAudioDescriptionsList;
_4 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAudioDescriptionsList[_4] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsList", version: "19.15.0" };
function medialiveChannelEncoderSettingsAvailBlankingAvailBlankingImageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        password_param: cdktf.stringToTerraform(struct.passwordParam),
        uri: cdktf.stringToTerraform(struct.uri),
        username: cdktf.stringToTerraform(struct.username),
    };
}
exports.medialiveChannelEncoderSettingsAvailBlankingAvailBlankingImageToTerraform = medialiveChannelEncoderSettingsAvailBlankingAvailBlankingImageToTerraform;
function medialiveChannelEncoderSettingsAvailBlankingAvailBlankingImageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        password_param: {
            value: cdktf.stringToHclTerraform(struct.passwordParam),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        uri: {
            value: cdktf.stringToHclTerraform(struct.uri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        username: {
            value: cdktf.stringToHclTerraform(struct.username),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsAvailBlankingAvailBlankingImageToHclTerraform = medialiveChannelEncoderSettingsAvailBlankingAvailBlankingImageToHclTerraform;
class MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._passwordParam !== undefined) {
            hasAnyValues = true;
            internalValueResult.passwordParam = this._passwordParam;
        }
        if (this._uri !== undefined) {
            hasAnyValues = true;
            internalValueResult.uri = this._uri;
        }
        if (this._username !== undefined) {
            hasAnyValues = true;
            internalValueResult.username = this._username;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._passwordParam = undefined;
            this._uri = undefined;
            this._username = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._passwordParam = value.passwordParam;
            this._uri = value.uri;
            this._username = value.username;
        }
    }
    get passwordParam() {
        return this.getStringAttribute('password_param');
    }
    set passwordParam(value) {
        this._passwordParam = value;
    }
    resetPasswordParam() {
        this._passwordParam = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passwordParamInput() {
        return this._passwordParam;
    }
    get uri() {
        return this.getStringAttribute('uri');
    }
    set uri(value) {
        this._uri = value;
    }
    // Temporarily expose input value. Use with caution.
    get uriInput() {
        return this._uri;
    }
    get username() {
        return this.getStringAttribute('username');
    }
    set username(value) {
        this._username = value;
    }
    resetUsername() {
        this._username = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get usernameInput() {
        return this._username;
    }
}
exports.MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImageOutputReference = MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImageOutputReference;
_5 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImageOutputReference[_5] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImageOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsAvailBlankingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        state: cdktf.stringToTerraform(struct.state),
        avail_blanking_image: medialiveChannelEncoderSettingsAvailBlankingAvailBlankingImageToTerraform(struct.availBlankingImage),
    };
}
exports.medialiveChannelEncoderSettingsAvailBlankingToTerraform = medialiveChannelEncoderSettingsAvailBlankingToTerraform;
function medialiveChannelEncoderSettingsAvailBlankingToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        state: {
            value: cdktf.stringToHclTerraform(struct.state),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        avail_blanking_image: {
            value: medialiveChannelEncoderSettingsAvailBlankingAvailBlankingImageToHclTerraform(struct.availBlankingImage),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImageList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsAvailBlankingToHclTerraform = medialiveChannelEncoderSettingsAvailBlankingToHclTerraform;
class MedialiveChannelEncoderSettingsAvailBlankingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // avail_blanking_image - computed: false, optional: true, required: false
        this._availBlankingImage = new MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImageOutputReference(this, "avail_blanking_image");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._state !== undefined) {
            hasAnyValues = true;
            internalValueResult.state = this._state;
        }
        if (this._availBlankingImage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.availBlankingImage = this._availBlankingImage?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._state = undefined;
            this._availBlankingImage.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._state = value.state;
            this._availBlankingImage.internalValue = value.availBlankingImage;
        }
    }
    get state() {
        return this.getStringAttribute('state');
    }
    set state(value) {
        this._state = value;
    }
    resetState() {
        this._state = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stateInput() {
        return this._state;
    }
    get availBlankingImage() {
        return this._availBlankingImage;
    }
    putAvailBlankingImage(value) {
        this._availBlankingImage.internalValue = value;
    }
    resetAvailBlankingImage() {
        this._availBlankingImage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get availBlankingImageInput() {
        return this._availBlankingImage.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsAvailBlankingOutputReference = MedialiveChannelEncoderSettingsAvailBlankingOutputReference;
_6 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsAvailBlankingOutputReference[_6] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAvailBlankingOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettingsToTerraform = medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettingsToTerraform;
function medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettingsToHclTerraform = medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettingsOutputReference = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettingsOutputReference;
_7 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettingsOutputReference[_7] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFontToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        password_param: cdktf.stringToTerraform(struct.passwordParam),
        uri: cdktf.stringToTerraform(struct.uri),
        username: cdktf.stringToTerraform(struct.username),
    };
}
exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFontToTerraform = medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFontToTerraform;
function medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFontToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        password_param: {
            value: cdktf.stringToHclTerraform(struct.passwordParam),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        uri: {
            value: cdktf.stringToHclTerraform(struct.uri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        username: {
            value: cdktf.stringToHclTerraform(struct.username),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFontToHclTerraform = medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFontToHclTerraform;
class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFontOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._passwordParam !== undefined) {
            hasAnyValues = true;
            internalValueResult.passwordParam = this._passwordParam;
        }
        if (this._uri !== undefined) {
            hasAnyValues = true;
            internalValueResult.uri = this._uri;
        }
        if (this._username !== undefined) {
            hasAnyValues = true;
            internalValueResult.username = this._username;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._passwordParam = undefined;
            this._uri = undefined;
            this._username = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._passwordParam = value.passwordParam;
            this._uri = value.uri;
            this._username = value.username;
        }
    }
    get passwordParam() {
        return this.getStringAttribute('password_param');
    }
    set passwordParam(value) {
        this._passwordParam = value;
    }
    resetPasswordParam() {
        this._passwordParam = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passwordParamInput() {
        return this._passwordParam;
    }
    get uri() {
        return this.getStringAttribute('uri');
    }
    set uri(value) {
        this._uri = value;
    }
    // Temporarily expose input value. Use with caution.
    get uriInput() {
        return this._uri;
    }
    get username() {
        return this.getStringAttribute('username');
    }
    set username(value) {
        this._username = value;
    }
    resetUsername() {
        this._username = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get usernameInput() {
        return this._username;
    }
}
exports.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFontOutputReference = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFontOutputReference;
_8 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFontOutputReference[_8] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFontOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        alignment: cdktf.stringToTerraform(struct.alignment),
        background_color: cdktf.stringToTerraform(struct.backgroundColor),
        background_opacity: cdktf.numberToTerraform(struct.backgroundOpacity),
        font_color: cdktf.stringToTerraform(struct.fontColor),
        font_opacity: cdktf.numberToTerraform(struct.fontOpacity),
        font_resolution: cdktf.numberToTerraform(struct.fontResolution),
        font_size: cdktf.stringToTerraform(struct.fontSize),
        outline_color: cdktf.stringToTerraform(struct.outlineColor),
        outline_size: cdktf.numberToTerraform(struct.outlineSize),
        shadow_color: cdktf.stringToTerraform(struct.shadowColor),
        shadow_opacity: cdktf.numberToTerraform(struct.shadowOpacity),
        shadow_x_offset: cdktf.numberToTerraform(struct.shadowXOffset),
        shadow_y_offset: cdktf.numberToTerraform(struct.shadowYOffset),
        teletext_grid_control: cdktf.stringToTerraform(struct.teletextGridControl),
        x_position: cdktf.numberToTerraform(struct.xPosition),
        y_position: cdktf.numberToTerraform(struct.yPosition),
        font: medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFontToTerraform(struct.font),
    };
}
exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsToTerraform = medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsToTerraform;
function medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        alignment: {
            value: cdktf.stringToHclTerraform(struct.alignment),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        background_color: {
            value: cdktf.stringToHclTerraform(struct.backgroundColor),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        background_opacity: {
            value: cdktf.numberToHclTerraform(struct.backgroundOpacity),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        font_color: {
            value: cdktf.stringToHclTerraform(struct.fontColor),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        font_opacity: {
            value: cdktf.numberToHclTerraform(struct.fontOpacity),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        font_resolution: {
            value: cdktf.numberToHclTerraform(struct.fontResolution),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        font_size: {
            value: cdktf.stringToHclTerraform(struct.fontSize),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        outline_color: {
            value: cdktf.stringToHclTerraform(struct.outlineColor),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        outline_size: {
            value: cdktf.numberToHclTerraform(struct.outlineSize),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        shadow_color: {
            value: cdktf.stringToHclTerraform(struct.shadowColor),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        shadow_opacity: {
            value: cdktf.numberToHclTerraform(struct.shadowOpacity),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        shadow_x_offset: {
            value: cdktf.numberToHclTerraform(struct.shadowXOffset),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        shadow_y_offset: {
            value: cdktf.numberToHclTerraform(struct.shadowYOffset),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        teletext_grid_control: {
            value: cdktf.stringToHclTerraform(struct.teletextGridControl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        x_position: {
            value: cdktf.numberToHclTerraform(struct.xPosition),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        y_position: {
            value: cdktf.numberToHclTerraform(struct.yPosition),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        font: {
            value: medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFontToHclTerraform(struct.font),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFontList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsToHclTerraform = medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // font - computed: false, optional: true, required: false
        this._font = new MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFontOutputReference(this, "font");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._alignment !== undefined) {
            hasAnyValues = true;
            internalValueResult.alignment = this._alignment;
        }
        if (this._backgroundColor !== undefined) {
            hasAnyValues = true;
            internalValueResult.backgroundColor = this._backgroundColor;
        }
        if (this._backgroundOpacity !== undefined) {
            hasAnyValues = true;
            internalValueResult.backgroundOpacity = this._backgroundOpacity;
        }
        if (this._fontColor !== undefined) {
            hasAnyValues = true;
            internalValueResult.fontColor = this._fontColor;
        }
        if (this._fontOpacity !== undefined) {
            hasAnyValues = true;
            internalValueResult.fontOpacity = this._fontOpacity;
        }
        if (this._fontResolution !== undefined) {
            hasAnyValues = true;
            internalValueResult.fontResolution = this._fontResolution;
        }
        if (this._fontSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.fontSize = this._fontSize;
        }
        if (this._outlineColor !== undefined) {
            hasAnyValues = true;
            internalValueResult.outlineColor = this._outlineColor;
        }
        if (this._outlineSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.outlineSize = this._outlineSize;
        }
        if (this._shadowColor !== undefined) {
            hasAnyValues = true;
            internalValueResult.shadowColor = this._shadowColor;
        }
        if (this._shadowOpacity !== undefined) {
            hasAnyValues = true;
            internalValueResult.shadowOpacity = this._shadowOpacity;
        }
        if (this._shadowXOffset !== undefined) {
            hasAnyValues = true;
            internalValueResult.shadowXOffset = this._shadowXOffset;
        }
        if (this._shadowYOffset !== undefined) {
            hasAnyValues = true;
            internalValueResult.shadowYOffset = this._shadowYOffset;
        }
        if (this._teletextGridControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.teletextGridControl = this._teletextGridControl;
        }
        if (this._xPosition !== undefined) {
            hasAnyValues = true;
            internalValueResult.xPosition = this._xPosition;
        }
        if (this._yPosition !== undefined) {
            hasAnyValues = true;
            internalValueResult.yPosition = this._yPosition;
        }
        if (this._font?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.font = this._font?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._alignment = undefined;
            this._backgroundColor = undefined;
            this._backgroundOpacity = undefined;
            this._fontColor = undefined;
            this._fontOpacity = undefined;
            this._fontResolution = undefined;
            this._fontSize = undefined;
            this._outlineColor = undefined;
            this._outlineSize = undefined;
            this._shadowColor = undefined;
            this._shadowOpacity = undefined;
            this._shadowXOffset = undefined;
            this._shadowYOffset = undefined;
            this._teletextGridControl = undefined;
            this._xPosition = undefined;
            this._yPosition = undefined;
            this._font.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._alignment = value.alignment;
            this._backgroundColor = value.backgroundColor;
            this._backgroundOpacity = value.backgroundOpacity;
            this._fontColor = value.fontColor;
            this._fontOpacity = value.fontOpacity;
            this._fontResolution = value.fontResolution;
            this._fontSize = value.fontSize;
            this._outlineColor = value.outlineColor;
            this._outlineSize = value.outlineSize;
            this._shadowColor = value.shadowColor;
            this._shadowOpacity = value.shadowOpacity;
            this._shadowXOffset = value.shadowXOffset;
            this._shadowYOffset = value.shadowYOffset;
            this._teletextGridControl = value.teletextGridControl;
            this._xPosition = value.xPosition;
            this._yPosition = value.yPosition;
            this._font.internalValue = value.font;
        }
    }
    get alignment() {
        return this.getStringAttribute('alignment');
    }
    set alignment(value) {
        this._alignment = value;
    }
    resetAlignment() {
        this._alignment = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get alignmentInput() {
        return this._alignment;
    }
    get backgroundColor() {
        return this.getStringAttribute('background_color');
    }
    set backgroundColor(value) {
        this._backgroundColor = value;
    }
    resetBackgroundColor() {
        this._backgroundColor = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backgroundColorInput() {
        return this._backgroundColor;
    }
    get backgroundOpacity() {
        return this.getNumberAttribute('background_opacity');
    }
    set backgroundOpacity(value) {
        this._backgroundOpacity = value;
    }
    resetBackgroundOpacity() {
        this._backgroundOpacity = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backgroundOpacityInput() {
        return this._backgroundOpacity;
    }
    get fontColor() {
        return this.getStringAttribute('font_color');
    }
    set fontColor(value) {
        this._fontColor = value;
    }
    resetFontColor() {
        this._fontColor = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fontColorInput() {
        return this._fontColor;
    }
    get fontOpacity() {
        return this.getNumberAttribute('font_opacity');
    }
    set fontOpacity(value) {
        this._fontOpacity = value;
    }
    resetFontOpacity() {
        this._fontOpacity = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fontOpacityInput() {
        return this._fontOpacity;
    }
    get fontResolution() {
        return this.getNumberAttribute('font_resolution');
    }
    set fontResolution(value) {
        this._fontResolution = value;
    }
    resetFontResolution() {
        this._fontResolution = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fontResolutionInput() {
        return this._fontResolution;
    }
    get fontSize() {
        return this.getStringAttribute('font_size');
    }
    set fontSize(value) {
        this._fontSize = value;
    }
    resetFontSize() {
        this._fontSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fontSizeInput() {
        return this._fontSize;
    }
    get outlineColor() {
        return this.getStringAttribute('outline_color');
    }
    set outlineColor(value) {
        this._outlineColor = value;
    }
    // Temporarily expose input value. Use with caution.
    get outlineColorInput() {
        return this._outlineColor;
    }
    get outlineSize() {
        return this.getNumberAttribute('outline_size');
    }
    set outlineSize(value) {
        this._outlineSize = value;
    }
    resetOutlineSize() {
        this._outlineSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get outlineSizeInput() {
        return this._outlineSize;
    }
    get shadowColor() {
        return this.getStringAttribute('shadow_color');
    }
    set shadowColor(value) {
        this._shadowColor = value;
    }
    resetShadowColor() {
        this._shadowColor = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get shadowColorInput() {
        return this._shadowColor;
    }
    get shadowOpacity() {
        return this.getNumberAttribute('shadow_opacity');
    }
    set shadowOpacity(value) {
        this._shadowOpacity = value;
    }
    resetShadowOpacity() {
        this._shadowOpacity = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get shadowOpacityInput() {
        return this._shadowOpacity;
    }
    get shadowXOffset() {
        return this.getNumberAttribute('shadow_x_offset');
    }
    set shadowXOffset(value) {
        this._shadowXOffset = value;
    }
    resetShadowXOffset() {
        this._shadowXOffset = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get shadowXOffsetInput() {
        return this._shadowXOffset;
    }
    get shadowYOffset() {
        return this.getNumberAttribute('shadow_y_offset');
    }
    set shadowYOffset(value) {
        this._shadowYOffset = value;
    }
    resetShadowYOffset() {
        this._shadowYOffset = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get shadowYOffsetInput() {
        return this._shadowYOffset;
    }
    get teletextGridControl() {
        return this.getStringAttribute('teletext_grid_control');
    }
    set teletextGridControl(value) {
        this._teletextGridControl = value;
    }
    // Temporarily expose input value. Use with caution.
    get teletextGridControlInput() {
        return this._teletextGridControl;
    }
    get xPosition() {
        return this.getNumberAttribute('x_position');
    }
    set xPosition(value) {
        this._xPosition = value;
    }
    resetXPosition() {
        this._xPosition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get xPositionInput() {
        return this._xPosition;
    }
    get yPosition() {
        return this.getNumberAttribute('y_position');
    }
    set yPosition(value) {
        this._yPosition = value;
    }
    resetYPosition() {
        this._yPosition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get yPositionInput() {
        return this._yPosition;
    }
    get font() {
        return this._font;
    }
    putFont(value) {
        this._font.internalValue = value;
    }
    resetFont() {
        this._font.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fontInput() {
        return this._font.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsOutputReference = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsOutputReference;
_9 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsOutputReference[_9] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFontToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        password_param: cdktf.stringToTerraform(struct.passwordParam),
        uri: cdktf.stringToTerraform(struct.uri),
        username: cdktf.stringToTerraform(struct.username),
    };
}
exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFontToTerraform = medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFontToTerraform;
function medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFontToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        password_param: {
            value: cdktf.stringToHclTerraform(struct.passwordParam),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        uri: {
            value: cdktf.stringToHclTerraform(struct.uri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        username: {
            value: cdktf.stringToHclTerraform(struct.username),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFontToHclTerraform = medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFontToHclTerraform;
class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFontOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._passwordParam !== undefined) {
            hasAnyValues = true;
            internalValueResult.passwordParam = this._passwordParam;
        }
        if (this._uri !== undefined) {
            hasAnyValues = true;
            internalValueResult.uri = this._uri;
        }
        if (this._username !== undefined) {
            hasAnyValues = true;
            internalValueResult.username = this._username;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._passwordParam = undefined;
            this._uri = undefined;
            this._username = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._passwordParam = value.passwordParam;
            this._uri = value.uri;
            this._username = value.username;
        }
    }
    get passwordParam() {
        return this.getStringAttribute('password_param');
    }
    set passwordParam(value) {
        this._passwordParam = value;
    }
    resetPasswordParam() {
        this._passwordParam = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passwordParamInput() {
        return this._passwordParam;
    }
    get uri() {
        return this.getStringAttribute('uri');
    }
    set uri(value) {
        this._uri = value;
    }
    // Temporarily expose input value. Use with caution.
    get uriInput() {
        return this._uri;
    }
    get username() {
        return this.getStringAttribute('username');
    }
    set username(value) {
        this._username = value;
    }
    resetUsername() {
        this._username = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get usernameInput() {
        return this._username;
    }
}
exports.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFontOutputReference = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFontOutputReference;
_10 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFontOutputReference[_10] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFontOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        alignment: cdktf.stringToTerraform(struct.alignment),
        background_color: cdktf.stringToTerraform(struct.backgroundColor),
        background_opacity: cdktf.numberToTerraform(struct.backgroundOpacity),
        font_color: cdktf.stringToTerraform(struct.fontColor),
        font_opacity: cdktf.numberToTerraform(struct.fontOpacity),
        font_resolution: cdktf.numberToTerraform(struct.fontResolution),
        font_size: cdktf.stringToTerraform(struct.fontSize),
        outline_color: cdktf.stringToTerraform(struct.outlineColor),
        outline_size: cdktf.numberToTerraform(struct.outlineSize),
        shadow_color: cdktf.stringToTerraform(struct.shadowColor),
        shadow_opacity: cdktf.numberToTerraform(struct.shadowOpacity),
        shadow_x_offset: cdktf.numberToTerraform(struct.shadowXOffset),
        shadow_y_offset: cdktf.numberToTerraform(struct.shadowYOffset),
        teletext_grid_control: cdktf.stringToTerraform(struct.teletextGridControl),
        x_position: cdktf.numberToTerraform(struct.xPosition),
        y_position: cdktf.numberToTerraform(struct.yPosition),
        font: medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFontToTerraform(struct.font),
    };
}
exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsToTerraform = medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsToTerraform;
function medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        alignment: {
            value: cdktf.stringToHclTerraform(struct.alignment),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        background_color: {
            value: cdktf.stringToHclTerraform(struct.backgroundColor),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        background_opacity: {
            value: cdktf.numberToHclTerraform(struct.backgroundOpacity),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        font_color: {
            value: cdktf.stringToHclTerraform(struct.fontColor),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        font_opacity: {
            value: cdktf.numberToHclTerraform(struct.fontOpacity),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        font_resolution: {
            value: cdktf.numberToHclTerraform(struct.fontResolution),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        font_size: {
            value: cdktf.stringToHclTerraform(struct.fontSize),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        outline_color: {
            value: cdktf.stringToHclTerraform(struct.outlineColor),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        outline_size: {
            value: cdktf.numberToHclTerraform(struct.outlineSize),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        shadow_color: {
            value: cdktf.stringToHclTerraform(struct.shadowColor),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        shadow_opacity: {
            value: cdktf.numberToHclTerraform(struct.shadowOpacity),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        shadow_x_offset: {
            value: cdktf.numberToHclTerraform(struct.shadowXOffset),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        shadow_y_offset: {
            value: cdktf.numberToHclTerraform(struct.shadowYOffset),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        teletext_grid_control: {
            value: cdktf.stringToHclTerraform(struct.teletextGridControl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        x_position: {
            value: cdktf.numberToHclTerraform(struct.xPosition),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        y_position: {
            value: cdktf.numberToHclTerraform(struct.yPosition),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        font: {
            value: medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFontToHclTerraform(struct.font),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFontList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsToHclTerraform = medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // font - computed: false, optional: true, required: false
        this._font = new MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFontOutputReference(this, "font");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._alignment !== undefined) {
            hasAnyValues = true;
            internalValueResult.alignment = this._alignment;
        }
        if (this._backgroundColor !== undefined) {
            hasAnyValues = true;
            internalValueResult.backgroundColor = this._backgroundColor;
        }
        if (this._backgroundOpacity !== undefined) {
            hasAnyValues = true;
            internalValueResult.backgroundOpacity = this._backgroundOpacity;
        }
        if (this._fontColor !== undefined) {
            hasAnyValues = true;
            internalValueResult.fontColor = this._fontColor;
        }
        if (this._fontOpacity !== undefined) {
            hasAnyValues = true;
            internalValueResult.fontOpacity = this._fontOpacity;
        }
        if (this._fontResolution !== undefined) {
            hasAnyValues = true;
            internalValueResult.fontResolution = this._fontResolution;
        }
        if (this._fontSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.fontSize = this._fontSize;
        }
        if (this._outlineColor !== undefined) {
            hasAnyValues = true;
            internalValueResult.outlineColor = this._outlineColor;
        }
        if (this._outlineSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.outlineSize = this._outlineSize;
        }
        if (this._shadowColor !== undefined) {
            hasAnyValues = true;
            internalValueResult.shadowColor = this._shadowColor;
        }
        if (this._shadowOpacity !== undefined) {
            hasAnyValues = true;
            internalValueResult.shadowOpacity = this._shadowOpacity;
        }
        if (this._shadowXOffset !== undefined) {
            hasAnyValues = true;
            internalValueResult.shadowXOffset = this._shadowXOffset;
        }
        if (this._shadowYOffset !== undefined) {
            hasAnyValues = true;
            internalValueResult.shadowYOffset = this._shadowYOffset;
        }
        if (this._teletextGridControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.teletextGridControl = this._teletextGridControl;
        }
        if (this._xPosition !== undefined) {
            hasAnyValues = true;
            internalValueResult.xPosition = this._xPosition;
        }
        if (this._yPosition !== undefined) {
            hasAnyValues = true;
            internalValueResult.yPosition = this._yPosition;
        }
        if (this._font?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.font = this._font?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._alignment = undefined;
            this._backgroundColor = undefined;
            this._backgroundOpacity = undefined;
            this._fontColor = undefined;
            this._fontOpacity = undefined;
            this._fontResolution = undefined;
            this._fontSize = undefined;
            this._outlineColor = undefined;
            this._outlineSize = undefined;
            this._shadowColor = undefined;
            this._shadowOpacity = undefined;
            this._shadowXOffset = undefined;
            this._shadowYOffset = undefined;
            this._teletextGridControl = undefined;
            this._xPosition = undefined;
            this._yPosition = undefined;
            this._font.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._alignment = value.alignment;
            this._backgroundColor = value.backgroundColor;
            this._backgroundOpacity = value.backgroundOpacity;
            this._fontColor = value.fontColor;
            this._fontOpacity = value.fontOpacity;
            this._fontResolution = value.fontResolution;
            this._fontSize = value.fontSize;
            this._outlineColor = value.outlineColor;
            this._outlineSize = value.outlineSize;
            this._shadowColor = value.shadowColor;
            this._shadowOpacity = value.shadowOpacity;
            this._shadowXOffset = value.shadowXOffset;
            this._shadowYOffset = value.shadowYOffset;
            this._teletextGridControl = value.teletextGridControl;
            this._xPosition = value.xPosition;
            this._yPosition = value.yPosition;
            this._font.internalValue = value.font;
        }
    }
    get alignment() {
        return this.getStringAttribute('alignment');
    }
    set alignment(value) {
        this._alignment = value;
    }
    resetAlignment() {
        this._alignment = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get alignmentInput() {
        return this._alignment;
    }
    get backgroundColor() {
        return this.getStringAttribute('background_color');
    }
    set backgroundColor(value) {
        this._backgroundColor = value;
    }
    resetBackgroundColor() {
        this._backgroundColor = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backgroundColorInput() {
        return this._backgroundColor;
    }
    get backgroundOpacity() {
        return this.getNumberAttribute('background_opacity');
    }
    set backgroundOpacity(value) {
        this._backgroundOpacity = value;
    }
    resetBackgroundOpacity() {
        this._backgroundOpacity = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backgroundOpacityInput() {
        return this._backgroundOpacity;
    }
    get fontColor() {
        return this.getStringAttribute('font_color');
    }
    set fontColor(value) {
        this._fontColor = value;
    }
    resetFontColor() {
        this._fontColor = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fontColorInput() {
        return this._fontColor;
    }
    get fontOpacity() {
        return this.getNumberAttribute('font_opacity');
    }
    set fontOpacity(value) {
        this._fontOpacity = value;
    }
    resetFontOpacity() {
        this._fontOpacity = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fontOpacityInput() {
        return this._fontOpacity;
    }
    get fontResolution() {
        return this.getNumberAttribute('font_resolution');
    }
    set fontResolution(value) {
        this._fontResolution = value;
    }
    resetFontResolution() {
        this._fontResolution = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fontResolutionInput() {
        return this._fontResolution;
    }
    get fontSize() {
        return this.getStringAttribute('font_size');
    }
    set fontSize(value) {
        this._fontSize = value;
    }
    resetFontSize() {
        this._fontSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fontSizeInput() {
        return this._fontSize;
    }
    get outlineColor() {
        return this.getStringAttribute('outline_color');
    }
    set outlineColor(value) {
        this._outlineColor = value;
    }
    resetOutlineColor() {
        this._outlineColor = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get outlineColorInput() {
        return this._outlineColor;
    }
    get outlineSize() {
        return this.getNumberAttribute('outline_size');
    }
    set outlineSize(value) {
        this._outlineSize = value;
    }
    resetOutlineSize() {
        this._outlineSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get outlineSizeInput() {
        return this._outlineSize;
    }
    get shadowColor() {
        return this.getStringAttribute('shadow_color');
    }
    set shadowColor(value) {
        this._shadowColor = value;
    }
    resetShadowColor() {
        this._shadowColor = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get shadowColorInput() {
        return this._shadowColor;
    }
    get shadowOpacity() {
        return this.getNumberAttribute('shadow_opacity');
    }
    set shadowOpacity(value) {
        this._shadowOpacity = value;
    }
    resetShadowOpacity() {
        this._shadowOpacity = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get shadowOpacityInput() {
        return this._shadowOpacity;
    }
    get shadowXOffset() {
        return this.getNumberAttribute('shadow_x_offset');
    }
    set shadowXOffset(value) {
        this._shadowXOffset = value;
    }
    resetShadowXOffset() {
        this._shadowXOffset = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get shadowXOffsetInput() {
        return this._shadowXOffset;
    }
    get shadowYOffset() {
        return this.getNumberAttribute('shadow_y_offset');
    }
    set shadowYOffset(value) {
        this._shadowYOffset = value;
    }
    resetShadowYOffset() {
        this._shadowYOffset = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get shadowYOffsetInput() {
        return this._shadowYOffset;
    }
    get teletextGridControl() {
        return this.getStringAttribute('teletext_grid_control');
    }
    set teletextGridControl(value) {
        this._teletextGridControl = value;
    }
    resetTeletextGridControl() {
        this._teletextGridControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get teletextGridControlInput() {
        return this._teletextGridControl;
    }
    get xPosition() {
        return this.getNumberAttribute('x_position');
    }
    set xPosition(value) {
        this._xPosition = value;
    }
    resetXPosition() {
        this._xPosition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get xPositionInput() {
        return this._xPosition;
    }
    get yPosition() {
        return this.getNumberAttribute('y_position');
    }
    set yPosition(value) {
        this._yPosition = value;
    }
    resetYPosition() {
        this._yPosition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get yPositionInput() {
        return this._yPosition;
    }
    get font() {
        return this._font;
    }
    putFont(value) {
        this._font.internalValue = value;
    }
    resetFont() {
        this._font.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fontInput() {
        return this._font.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsOutputReference = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsOutputReference;
_11 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsOutputReference[_11] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        copyright_holder: cdktf.stringToTerraform(struct.copyrightHolder),
        fill_line_gap: cdktf.stringToTerraform(struct.fillLineGap),
        font_family: cdktf.stringToTerraform(struct.fontFamily),
        style_control: cdktf.stringToTerraform(struct.styleControl),
    };
}
exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettingsToTerraform = medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettingsToTerraform;
function medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        copyright_holder: {
            value: cdktf.stringToHclTerraform(struct.copyrightHolder),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        fill_line_gap: {
            value: cdktf.stringToHclTerraform(struct.fillLineGap),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        font_family: {
            value: cdktf.stringToHclTerraform(struct.fontFamily),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        style_control: {
            value: cdktf.stringToHclTerraform(struct.styleControl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettingsToHclTerraform = medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._copyrightHolder !== undefined) {
            hasAnyValues = true;
            internalValueResult.copyrightHolder = this._copyrightHolder;
        }
        if (this._fillLineGap !== undefined) {
            hasAnyValues = true;
            internalValueResult.fillLineGap = this._fillLineGap;
        }
        if (this._fontFamily !== undefined) {
            hasAnyValues = true;
            internalValueResult.fontFamily = this._fontFamily;
        }
        if (this._styleControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.styleControl = this._styleControl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._copyrightHolder = undefined;
            this._fillLineGap = undefined;
            this._fontFamily = undefined;
            this._styleControl = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._copyrightHolder = value.copyrightHolder;
            this._fillLineGap = value.fillLineGap;
            this._fontFamily = value.fontFamily;
            this._styleControl = value.styleControl;
        }
    }
    get copyrightHolder() {
        return this.getStringAttribute('copyright_holder');
    }
    set copyrightHolder(value) {
        this._copyrightHolder = value;
    }
    resetCopyrightHolder() {
        this._copyrightHolder = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get copyrightHolderInput() {
        return this._copyrightHolder;
    }
    get fillLineGap() {
        return this.getStringAttribute('fill_line_gap');
    }
    set fillLineGap(value) {
        this._fillLineGap = value;
    }
    resetFillLineGap() {
        this._fillLineGap = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fillLineGapInput() {
        return this._fillLineGap;
    }
    get fontFamily() {
        return this.getStringAttribute('font_family');
    }
    set fontFamily(value) {
        this._fontFamily = value;
    }
    resetFontFamily() {
        this._fontFamily = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fontFamilyInput() {
        return this._fontFamily;
    }
    get styleControl() {
        return this.getStringAttribute('style_control');
    }
    set styleControl(value) {
        this._styleControl = value;
    }
    resetStyleControl() {
        this._styleControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get styleControlInput() {
        return this._styleControl;
    }
}
exports.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettingsOutputReference = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettingsOutputReference;
_12 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettingsOutputReference[_12] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettingsToTerraform = medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettingsToTerraform;
function medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettingsToHclTerraform = medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettingsOutputReference = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettingsOutputReference;
_13 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettingsOutputReference[_13] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettingsToTerraform = medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettingsToTerraform;
function medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettingsToHclTerraform = medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettingsOutputReference = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettingsOutputReference;
_14 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettingsOutputReference[_14] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettingsToTerraform = medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettingsToTerraform;
function medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettingsToHclTerraform = medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettingsOutputReference = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettingsOutputReference;
_15 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettingsOutputReference[_15] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettingsToTerraform = medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettingsToTerraform;
function medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettingsToHclTerraform = medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettingsOutputReference = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettingsOutputReference;
_16 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettingsOutputReference[_16] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettingsToTerraform = medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettingsToTerraform;
function medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettingsToHclTerraform = medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettingsOutputReference = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettingsOutputReference;
_17 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettingsOutputReference[_17] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettingsToTerraform = medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettingsToTerraform;
function medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettingsToHclTerraform = medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettingsOutputReference = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettingsOutputReference;
_18 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettingsOutputReference[_18] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettingsToTerraform = medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettingsToTerraform;
function medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettingsToHclTerraform = medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettingsOutputReference = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettingsOutputReference;
_19 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettingsOutputReference[_19] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        style_control: cdktf.stringToTerraform(struct.styleControl),
    };
}
exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettingsToTerraform = medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettingsToTerraform;
function medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        style_control: {
            value: cdktf.stringToHclTerraform(struct.styleControl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettingsToHclTerraform = medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._styleControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.styleControl = this._styleControl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._styleControl = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._styleControl = value.styleControl;
        }
    }
    get styleControl() {
        return this.getStringAttribute('style_control');
    }
    set styleControl(value) {
        this._styleControl = value;
    }
    // Temporarily expose input value. Use with caution.
    get styleControlInput() {
        return this._styleControl;
    }
}
exports.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettingsOutputReference = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettingsOutputReference;
_20 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettingsOutputReference[_20] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        style_control: cdktf.stringToTerraform(struct.styleControl),
    };
}
exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettingsToTerraform = medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettingsToTerraform;
function medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        style_control: {
            value: cdktf.stringToHclTerraform(struct.styleControl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettingsToHclTerraform = medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._styleControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.styleControl = this._styleControl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._styleControl = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._styleControl = value.styleControl;
        }
    }
    get styleControl() {
        return this.getStringAttribute('style_control');
    }
    set styleControl(value) {
        this._styleControl = value;
    }
    // Temporarily expose input value. Use with caution.
    get styleControlInput() {
        return this._styleControl;
    }
}
exports.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettingsOutputReference = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettingsOutputReference;
_21 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettingsOutputReference[_21] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        arib_destination_settings: medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettingsToTerraform(struct.aribDestinationSettings),
        burn_in_destination_settings: medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsToTerraform(struct.burnInDestinationSettings),
        dvb_sub_destination_settings: medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsToTerraform(struct.dvbSubDestinationSettings),
        ebu_tt_d_destination_settings: medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettingsToTerraform(struct.ebuTtDDestinationSettings),
        embedded_destination_settings: medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettingsToTerraform(struct.embeddedDestinationSettings),
        embedded_plus_scte20_destination_settings: medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettingsToTerraform(struct.embeddedPlusScte20DestinationSettings),
        rtmp_caption_info_destination_settings: medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettingsToTerraform(struct.rtmpCaptionInfoDestinationSettings),
        scte20_plus_embedded_destination_settings: medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettingsToTerraform(struct.scte20PlusEmbeddedDestinationSettings),
        scte27_destination_settings: medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettingsToTerraform(struct.scte27DestinationSettings),
        smpte_tt_destination_settings: medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettingsToTerraform(struct.smpteTtDestinationSettings),
        teletext_destination_settings: medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettingsToTerraform(struct.teletextDestinationSettings),
        ttml_destination_settings: medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettingsToTerraform(struct.ttmlDestinationSettings),
        webvtt_destination_settings: medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettingsToTerraform(struct.webvttDestinationSettings),
    };
}
exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsToTerraform = medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsToTerraform;
function medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        arib_destination_settings: {
            value: medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettingsToHclTerraform(struct.aribDestinationSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettingsList",
        },
        burn_in_destination_settings: {
            value: medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsToHclTerraform(struct.burnInDestinationSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsList",
        },
        dvb_sub_destination_settings: {
            value: medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsToHclTerraform(struct.dvbSubDestinationSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsList",
        },
        ebu_tt_d_destination_settings: {
            value: medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettingsToHclTerraform(struct.ebuTtDDestinationSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettingsList",
        },
        embedded_destination_settings: {
            value: medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettingsToHclTerraform(struct.embeddedDestinationSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettingsList",
        },
        embedded_plus_scte20_destination_settings: {
            value: medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettingsToHclTerraform(struct.embeddedPlusScte20DestinationSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettingsList",
        },
        rtmp_caption_info_destination_settings: {
            value: medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettingsToHclTerraform(struct.rtmpCaptionInfoDestinationSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettingsList",
        },
        scte20_plus_embedded_destination_settings: {
            value: medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettingsToHclTerraform(struct.scte20PlusEmbeddedDestinationSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettingsList",
        },
        scte27_destination_settings: {
            value: medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettingsToHclTerraform(struct.scte27DestinationSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettingsList",
        },
        smpte_tt_destination_settings: {
            value: medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettingsToHclTerraform(struct.smpteTtDestinationSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettingsList",
        },
        teletext_destination_settings: {
            value: medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettingsToHclTerraform(struct.teletextDestinationSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettingsList",
        },
        ttml_destination_settings: {
            value: medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettingsToHclTerraform(struct.ttmlDestinationSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettingsList",
        },
        webvtt_destination_settings: {
            value: medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettingsToHclTerraform(struct.webvttDestinationSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsToHclTerraform = medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // arib_destination_settings - computed: false, optional: true, required: false
        this._aribDestinationSettings = new MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettingsOutputReference(this, "arib_destination_settings");
        // burn_in_destination_settings - computed: false, optional: true, required: false
        this._burnInDestinationSettings = new MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsOutputReference(this, "burn_in_destination_settings");
        // dvb_sub_destination_settings - computed: false, optional: true, required: false
        this._dvbSubDestinationSettings = new MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsOutputReference(this, "dvb_sub_destination_settings");
        // ebu_tt_d_destination_settings - computed: false, optional: true, required: false
        this._ebuTtDDestinationSettings = new MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettingsOutputReference(this, "ebu_tt_d_destination_settings");
        // embedded_destination_settings - computed: false, optional: true, required: false
        this._embeddedDestinationSettings = new MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettingsOutputReference(this, "embedded_destination_settings");
        // embedded_plus_scte20_destination_settings - computed: false, optional: true, required: false
        this._embeddedPlusScte20DestinationSettings = new MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettingsOutputReference(this, "embedded_plus_scte20_destination_settings");
        // rtmp_caption_info_destination_settings - computed: false, optional: true, required: false
        this._rtmpCaptionInfoDestinationSettings = new MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettingsOutputReference(this, "rtmp_caption_info_destination_settings");
        // scte20_plus_embedded_destination_settings - computed: false, optional: true, required: false
        this._scte20PlusEmbeddedDestinationSettings = new MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettingsOutputReference(this, "scte20_plus_embedded_destination_settings");
        // scte27_destination_settings - computed: false, optional: true, required: false
        this._scte27DestinationSettings = new MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettingsOutputReference(this, "scte27_destination_settings");
        // smpte_tt_destination_settings - computed: false, optional: true, required: false
        this._smpteTtDestinationSettings = new MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettingsOutputReference(this, "smpte_tt_destination_settings");
        // teletext_destination_settings - computed: false, optional: true, required: false
        this._teletextDestinationSettings = new MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettingsOutputReference(this, "teletext_destination_settings");
        // ttml_destination_settings - computed: false, optional: true, required: false
        this._ttmlDestinationSettings = new MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettingsOutputReference(this, "ttml_destination_settings");
        // webvtt_destination_settings - computed: false, optional: true, required: false
        this._webvttDestinationSettings = new MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettingsOutputReference(this, "webvtt_destination_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._aribDestinationSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.aribDestinationSettings = this._aribDestinationSettings?.internalValue;
        }
        if (this._burnInDestinationSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.burnInDestinationSettings = this._burnInDestinationSettings?.internalValue;
        }
        if (this._dvbSubDestinationSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dvbSubDestinationSettings = this._dvbSubDestinationSettings?.internalValue;
        }
        if (this._ebuTtDDestinationSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ebuTtDDestinationSettings = this._ebuTtDDestinationSettings?.internalValue;
        }
        if (this._embeddedDestinationSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.embeddedDestinationSettings = this._embeddedDestinationSettings?.internalValue;
        }
        if (this._embeddedPlusScte20DestinationSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.embeddedPlusScte20DestinationSettings = this._embeddedPlusScte20DestinationSettings?.internalValue;
        }
        if (this._rtmpCaptionInfoDestinationSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.rtmpCaptionInfoDestinationSettings = this._rtmpCaptionInfoDestinationSettings?.internalValue;
        }
        if (this._scte20PlusEmbeddedDestinationSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.scte20PlusEmbeddedDestinationSettings = this._scte20PlusEmbeddedDestinationSettings?.internalValue;
        }
        if (this._scte27DestinationSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.scte27DestinationSettings = this._scte27DestinationSettings?.internalValue;
        }
        if (this._smpteTtDestinationSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.smpteTtDestinationSettings = this._smpteTtDestinationSettings?.internalValue;
        }
        if (this._teletextDestinationSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.teletextDestinationSettings = this._teletextDestinationSettings?.internalValue;
        }
        if (this._ttmlDestinationSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ttmlDestinationSettings = this._ttmlDestinationSettings?.internalValue;
        }
        if (this._webvttDestinationSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.webvttDestinationSettings = this._webvttDestinationSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._aribDestinationSettings.internalValue = undefined;
            this._burnInDestinationSettings.internalValue = undefined;
            this._dvbSubDestinationSettings.internalValue = undefined;
            this._ebuTtDDestinationSettings.internalValue = undefined;
            this._embeddedDestinationSettings.internalValue = undefined;
            this._embeddedPlusScte20DestinationSettings.internalValue = undefined;
            this._rtmpCaptionInfoDestinationSettings.internalValue = undefined;
            this._scte20PlusEmbeddedDestinationSettings.internalValue = undefined;
            this._scte27DestinationSettings.internalValue = undefined;
            this._smpteTtDestinationSettings.internalValue = undefined;
            this._teletextDestinationSettings.internalValue = undefined;
            this._ttmlDestinationSettings.internalValue = undefined;
            this._webvttDestinationSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._aribDestinationSettings.internalValue = value.aribDestinationSettings;
            this._burnInDestinationSettings.internalValue = value.burnInDestinationSettings;
            this._dvbSubDestinationSettings.internalValue = value.dvbSubDestinationSettings;
            this._ebuTtDDestinationSettings.internalValue = value.ebuTtDDestinationSettings;
            this._embeddedDestinationSettings.internalValue = value.embeddedDestinationSettings;
            this._embeddedPlusScte20DestinationSettings.internalValue = value.embeddedPlusScte20DestinationSettings;
            this._rtmpCaptionInfoDestinationSettings.internalValue = value.rtmpCaptionInfoDestinationSettings;
            this._scte20PlusEmbeddedDestinationSettings.internalValue = value.scte20PlusEmbeddedDestinationSettings;
            this._scte27DestinationSettings.internalValue = value.scte27DestinationSettings;
            this._smpteTtDestinationSettings.internalValue = value.smpteTtDestinationSettings;
            this._teletextDestinationSettings.internalValue = value.teletextDestinationSettings;
            this._ttmlDestinationSettings.internalValue = value.ttmlDestinationSettings;
            this._webvttDestinationSettings.internalValue = value.webvttDestinationSettings;
        }
    }
    get aribDestinationSettings() {
        return this._aribDestinationSettings;
    }
    putAribDestinationSettings(value) {
        this._aribDestinationSettings.internalValue = value;
    }
    resetAribDestinationSettings() {
        this._aribDestinationSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aribDestinationSettingsInput() {
        return this._aribDestinationSettings.internalValue;
    }
    get burnInDestinationSettings() {
        return this._burnInDestinationSettings;
    }
    putBurnInDestinationSettings(value) {
        this._burnInDestinationSettings.internalValue = value;
    }
    resetBurnInDestinationSettings() {
        this._burnInDestinationSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get burnInDestinationSettingsInput() {
        return this._burnInDestinationSettings.internalValue;
    }
    get dvbSubDestinationSettings() {
        return this._dvbSubDestinationSettings;
    }
    putDvbSubDestinationSettings(value) {
        this._dvbSubDestinationSettings.internalValue = value;
    }
    resetDvbSubDestinationSettings() {
        this._dvbSubDestinationSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dvbSubDestinationSettingsInput() {
        return this._dvbSubDestinationSettings.internalValue;
    }
    get ebuTtDDestinationSettings() {
        return this._ebuTtDDestinationSettings;
    }
    putEbuTtDDestinationSettings(value) {
        this._ebuTtDDestinationSettings.internalValue = value;
    }
    resetEbuTtDDestinationSettings() {
        this._ebuTtDDestinationSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ebuTtDDestinationSettingsInput() {
        return this._ebuTtDDestinationSettings.internalValue;
    }
    get embeddedDestinationSettings() {
        return this._embeddedDestinationSettings;
    }
    putEmbeddedDestinationSettings(value) {
        this._embeddedDestinationSettings.internalValue = value;
    }
    resetEmbeddedDestinationSettings() {
        this._embeddedDestinationSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get embeddedDestinationSettingsInput() {
        return this._embeddedDestinationSettings.internalValue;
    }
    get embeddedPlusScte20DestinationSettings() {
        return this._embeddedPlusScte20DestinationSettings;
    }
    putEmbeddedPlusScte20DestinationSettings(value) {
        this._embeddedPlusScte20DestinationSettings.internalValue = value;
    }
    resetEmbeddedPlusScte20DestinationSettings() {
        this._embeddedPlusScte20DestinationSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get embeddedPlusScte20DestinationSettingsInput() {
        return this._embeddedPlusScte20DestinationSettings.internalValue;
    }
    get rtmpCaptionInfoDestinationSettings() {
        return this._rtmpCaptionInfoDestinationSettings;
    }
    putRtmpCaptionInfoDestinationSettings(value) {
        this._rtmpCaptionInfoDestinationSettings.internalValue = value;
    }
    resetRtmpCaptionInfoDestinationSettings() {
        this._rtmpCaptionInfoDestinationSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rtmpCaptionInfoDestinationSettingsInput() {
        return this._rtmpCaptionInfoDestinationSettings.internalValue;
    }
    get scte20PlusEmbeddedDestinationSettings() {
        return this._scte20PlusEmbeddedDestinationSettings;
    }
    putScte20PlusEmbeddedDestinationSettings(value) {
        this._scte20PlusEmbeddedDestinationSettings.internalValue = value;
    }
    resetScte20PlusEmbeddedDestinationSettings() {
        this._scte20PlusEmbeddedDestinationSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scte20PlusEmbeddedDestinationSettingsInput() {
        return this._scte20PlusEmbeddedDestinationSettings.internalValue;
    }
    get scte27DestinationSettings() {
        return this._scte27DestinationSettings;
    }
    putScte27DestinationSettings(value) {
        this._scte27DestinationSettings.internalValue = value;
    }
    resetScte27DestinationSettings() {
        this._scte27DestinationSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scte27DestinationSettingsInput() {
        return this._scte27DestinationSettings.internalValue;
    }
    get smpteTtDestinationSettings() {
        return this._smpteTtDestinationSettings;
    }
    putSmpteTtDestinationSettings(value) {
        this._smpteTtDestinationSettings.internalValue = value;
    }
    resetSmpteTtDestinationSettings() {
        this._smpteTtDestinationSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get smpteTtDestinationSettingsInput() {
        return this._smpteTtDestinationSettings.internalValue;
    }
    get teletextDestinationSettings() {
        return this._teletextDestinationSettings;
    }
    putTeletextDestinationSettings(value) {
        this._teletextDestinationSettings.internalValue = value;
    }
    resetTeletextDestinationSettings() {
        this._teletextDestinationSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get teletextDestinationSettingsInput() {
        return this._teletextDestinationSettings.internalValue;
    }
    get ttmlDestinationSettings() {
        return this._ttmlDestinationSettings;
    }
    putTtmlDestinationSettings(value) {
        this._ttmlDestinationSettings.internalValue = value;
    }
    resetTtmlDestinationSettings() {
        this._ttmlDestinationSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ttmlDestinationSettingsInput() {
        return this._ttmlDestinationSettings.internalValue;
    }
    get webvttDestinationSettings() {
        return this._webvttDestinationSettings;
    }
    putWebvttDestinationSettings(value) {
        this._webvttDestinationSettings.internalValue = value;
    }
    resetWebvttDestinationSettings() {
        this._webvttDestinationSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get webvttDestinationSettingsInput() {
        return this._webvttDestinationSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsOutputReference = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsOutputReference;
_22 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsOutputReference[_22] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsCaptionDescriptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        accessibility: cdktf.stringToTerraform(struct.accessibility),
        caption_selector_name: cdktf.stringToTerraform(struct.captionSelectorName),
        language_code: cdktf.stringToTerraform(struct.languageCode),
        language_description: cdktf.stringToTerraform(struct.languageDescription),
        name: cdktf.stringToTerraform(struct.name),
        destination_settings: medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsToTerraform(struct.destinationSettings),
    };
}
exports.medialiveChannelEncoderSettingsCaptionDescriptionsToTerraform = medialiveChannelEncoderSettingsCaptionDescriptionsToTerraform;
function medialiveChannelEncoderSettingsCaptionDescriptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        accessibility: {
            value: cdktf.stringToHclTerraform(struct.accessibility),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        caption_selector_name: {
            value: cdktf.stringToHclTerraform(struct.captionSelectorName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        language_code: {
            value: cdktf.stringToHclTerraform(struct.languageCode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        language_description: {
            value: cdktf.stringToHclTerraform(struct.languageDescription),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        destination_settings: {
            value: medialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsToHclTerraform(struct.destinationSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsCaptionDescriptionsToHclTerraform = medialiveChannelEncoderSettingsCaptionDescriptionsToHclTerraform;
class MedialiveChannelEncoderSettingsCaptionDescriptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // destination_settings - computed: false, optional: true, required: false
        this._destinationSettings = new MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsOutputReference(this, "destination_settings");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._accessibility !== undefined) {
            hasAnyValues = true;
            internalValueResult.accessibility = this._accessibility;
        }
        if (this._captionSelectorName !== undefined) {
            hasAnyValues = true;
            internalValueResult.captionSelectorName = this._captionSelectorName;
        }
        if (this._languageCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.languageCode = this._languageCode;
        }
        if (this._languageDescription !== undefined) {
            hasAnyValues = true;
            internalValueResult.languageDescription = this._languageDescription;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._destinationSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.destinationSettings = this._destinationSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._accessibility = undefined;
            this._captionSelectorName = undefined;
            this._languageCode = undefined;
            this._languageDescription = undefined;
            this._name = undefined;
            this._destinationSettings.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._accessibility = value.accessibility;
            this._captionSelectorName = value.captionSelectorName;
            this._languageCode = value.languageCode;
            this._languageDescription = value.languageDescription;
            this._name = value.name;
            this._destinationSettings.internalValue = value.destinationSettings;
        }
    }
    get accessibility() {
        return this.getStringAttribute('accessibility');
    }
    set accessibility(value) {
        this._accessibility = value;
    }
    resetAccessibility() {
        this._accessibility = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessibilityInput() {
        return this._accessibility;
    }
    get captionSelectorName() {
        return this.getStringAttribute('caption_selector_name');
    }
    set captionSelectorName(value) {
        this._captionSelectorName = value;
    }
    // Temporarily expose input value. Use with caution.
    get captionSelectorNameInput() {
        return this._captionSelectorName;
    }
    get languageCode() {
        return this.getStringAttribute('language_code');
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    resetLanguageCode() {
        this._languageCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get languageCodeInput() {
        return this._languageCode;
    }
    get languageDescription() {
        return this.getStringAttribute('language_description');
    }
    set languageDescription(value) {
        this._languageDescription = value;
    }
    resetLanguageDescription() {
        this._languageDescription = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get languageDescriptionInput() {
        return this._languageDescription;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get destinationSettings() {
        return this._destinationSettings;
    }
    putDestinationSettings(value) {
        this._destinationSettings.internalValue = value;
    }
    resetDestinationSettings() {
        this._destinationSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get destinationSettingsInput() {
        return this._destinationSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsCaptionDescriptionsOutputReference = MedialiveChannelEncoderSettingsCaptionDescriptionsOutputReference;
_23 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsCaptionDescriptionsOutputReference[_23] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsOutputReference", version: "19.15.0" };
class MedialiveChannelEncoderSettingsCaptionDescriptionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MedialiveChannelEncoderSettingsCaptionDescriptionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MedialiveChannelEncoderSettingsCaptionDescriptionsList = MedialiveChannelEncoderSettingsCaptionDescriptionsList;
_24 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsCaptionDescriptionsList[_24] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsList", version: "19.15.0" };
function medialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        password_param: cdktf.stringToTerraform(struct.passwordParam),
        uri: cdktf.stringToTerraform(struct.uri),
        username: cdktf.stringToTerraform(struct.username),
    };
}
exports.medialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateToTerraform = medialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateToTerraform;
function medialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        password_param: {
            value: cdktf.stringToHclTerraform(struct.passwordParam),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        uri: {
            value: cdktf.stringToHclTerraform(struct.uri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        username: {
            value: cdktf.stringToHclTerraform(struct.username),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateToHclTerraform = medialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateToHclTerraform;
class MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._passwordParam !== undefined) {
            hasAnyValues = true;
            internalValueResult.passwordParam = this._passwordParam;
        }
        if (this._uri !== undefined) {
            hasAnyValues = true;
            internalValueResult.uri = this._uri;
        }
        if (this._username !== undefined) {
            hasAnyValues = true;
            internalValueResult.username = this._username;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._passwordParam = undefined;
            this._uri = undefined;
            this._username = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._passwordParam = value.passwordParam;
            this._uri = value.uri;
            this._username = value.username;
        }
    }
    get passwordParam() {
        return this.getStringAttribute('password_param');
    }
    set passwordParam(value) {
        this._passwordParam = value;
    }
    resetPasswordParam() {
        this._passwordParam = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passwordParamInput() {
        return this._passwordParam;
    }
    get uri() {
        return this.getStringAttribute('uri');
    }
    set uri(value) {
        this._uri = value;
    }
    // Temporarily expose input value. Use with caution.
    get uriInput() {
        return this._uri;
    }
    get username() {
        return this.getStringAttribute('username');
    }
    set username(value) {
        this._username = value;
    }
    resetUsername() {
        this._username = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get usernameInput() {
        return this._username;
    }
}
exports.MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateOutputReference = MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateOutputReference;
_25 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateOutputReference[_25] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        black_frame_msec: cdktf.numberToTerraform(struct.blackFrameMsec),
        input_loss_image_color: cdktf.stringToTerraform(struct.inputLossImageColor),
        input_loss_image_type: cdktf.stringToTerraform(struct.inputLossImageType),
        repeat_frame_msec: cdktf.numberToTerraform(struct.repeatFrameMsec),
        input_loss_image_slate: medialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateToTerraform(struct.inputLossImageSlate),
    };
}
exports.medialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorToTerraform = medialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorToTerraform;
function medialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        black_frame_msec: {
            value: cdktf.numberToHclTerraform(struct.blackFrameMsec),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        input_loss_image_color: {
            value: cdktf.stringToHclTerraform(struct.inputLossImageColor),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        input_loss_image_type: {
            value: cdktf.stringToHclTerraform(struct.inputLossImageType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        repeat_frame_msec: {
            value: cdktf.numberToHclTerraform(struct.repeatFrameMsec),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        input_loss_image_slate: {
            value: medialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateToHclTerraform(struct.inputLossImageSlate),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorToHclTerraform = medialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorToHclTerraform;
class MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // input_loss_image_slate - computed: false, optional: true, required: false
        this._inputLossImageSlate = new MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateOutputReference(this, "input_loss_image_slate");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._blackFrameMsec !== undefined) {
            hasAnyValues = true;
            internalValueResult.blackFrameMsec = this._blackFrameMsec;
        }
        if (this._inputLossImageColor !== undefined) {
            hasAnyValues = true;
            internalValueResult.inputLossImageColor = this._inputLossImageColor;
        }
        if (this._inputLossImageType !== undefined) {
            hasAnyValues = true;
            internalValueResult.inputLossImageType = this._inputLossImageType;
        }
        if (this._repeatFrameMsec !== undefined) {
            hasAnyValues = true;
            internalValueResult.repeatFrameMsec = this._repeatFrameMsec;
        }
        if (this._inputLossImageSlate?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.inputLossImageSlate = this._inputLossImageSlate?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._blackFrameMsec = undefined;
            this._inputLossImageColor = undefined;
            this._inputLossImageType = undefined;
            this._repeatFrameMsec = undefined;
            this._inputLossImageSlate.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._blackFrameMsec = value.blackFrameMsec;
            this._inputLossImageColor = value.inputLossImageColor;
            this._inputLossImageType = value.inputLossImageType;
            this._repeatFrameMsec = value.repeatFrameMsec;
            this._inputLossImageSlate.internalValue = value.inputLossImageSlate;
        }
    }
    get blackFrameMsec() {
        return this.getNumberAttribute('black_frame_msec');
    }
    set blackFrameMsec(value) {
        this._blackFrameMsec = value;
    }
    resetBlackFrameMsec() {
        this._blackFrameMsec = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get blackFrameMsecInput() {
        return this._blackFrameMsec;
    }
    get inputLossImageColor() {
        return this.getStringAttribute('input_loss_image_color');
    }
    set inputLossImageColor(value) {
        this._inputLossImageColor = value;
    }
    resetInputLossImageColor() {
        this._inputLossImageColor = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inputLossImageColorInput() {
        return this._inputLossImageColor;
    }
    get inputLossImageType() {
        return this.getStringAttribute('input_loss_image_type');
    }
    set inputLossImageType(value) {
        this._inputLossImageType = value;
    }
    resetInputLossImageType() {
        this._inputLossImageType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inputLossImageTypeInput() {
        return this._inputLossImageType;
    }
    get repeatFrameMsec() {
        return this.getNumberAttribute('repeat_frame_msec');
    }
    set repeatFrameMsec(value) {
        this._repeatFrameMsec = value;
    }
    resetRepeatFrameMsec() {
        this._repeatFrameMsec = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get repeatFrameMsecInput() {
        return this._repeatFrameMsec;
    }
    get inputLossImageSlate() {
        return this._inputLossImageSlate;
    }
    putInputLossImageSlate(value) {
        this._inputLossImageSlate.internalValue = value;
    }
    resetInputLossImageSlate() {
        this._inputLossImageSlate.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inputLossImageSlateInput() {
        return this._inputLossImageSlate.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorOutputReference = MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorOutputReference;
_26 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorOutputReference[_26] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsGlobalConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        initial_audio_gain: cdktf.numberToTerraform(struct.initialAudioGain),
        input_end_action: cdktf.stringToTerraform(struct.inputEndAction),
        output_locking_mode: cdktf.stringToTerraform(struct.outputLockingMode),
        output_timing_source: cdktf.stringToTerraform(struct.outputTimingSource),
        support_low_framerate_inputs: cdktf.stringToTerraform(struct.supportLowFramerateInputs),
        input_loss_behavior: medialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorToTerraform(struct.inputLossBehavior),
    };
}
exports.medialiveChannelEncoderSettingsGlobalConfigurationToTerraform = medialiveChannelEncoderSettingsGlobalConfigurationToTerraform;
function medialiveChannelEncoderSettingsGlobalConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        initial_audio_gain: {
            value: cdktf.numberToHclTerraform(struct.initialAudioGain),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        input_end_action: {
            value: cdktf.stringToHclTerraform(struct.inputEndAction),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        output_locking_mode: {
            value: cdktf.stringToHclTerraform(struct.outputLockingMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        output_timing_source: {
            value: cdktf.stringToHclTerraform(struct.outputTimingSource),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        support_low_framerate_inputs: {
            value: cdktf.stringToHclTerraform(struct.supportLowFramerateInputs),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        input_loss_behavior: {
            value: medialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorToHclTerraform(struct.inputLossBehavior),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsGlobalConfigurationToHclTerraform = medialiveChannelEncoderSettingsGlobalConfigurationToHclTerraform;
class MedialiveChannelEncoderSettingsGlobalConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // input_loss_behavior - computed: false, optional: true, required: false
        this._inputLossBehavior = new MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorOutputReference(this, "input_loss_behavior");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._initialAudioGain !== undefined) {
            hasAnyValues = true;
            internalValueResult.initialAudioGain = this._initialAudioGain;
        }
        if (this._inputEndAction !== undefined) {
            hasAnyValues = true;
            internalValueResult.inputEndAction = this._inputEndAction;
        }
        if (this._outputLockingMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputLockingMode = this._outputLockingMode;
        }
        if (this._outputTimingSource !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputTimingSource = this._outputTimingSource;
        }
        if (this._supportLowFramerateInputs !== undefined) {
            hasAnyValues = true;
            internalValueResult.supportLowFramerateInputs = this._supportLowFramerateInputs;
        }
        if (this._inputLossBehavior?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.inputLossBehavior = this._inputLossBehavior?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._initialAudioGain = undefined;
            this._inputEndAction = undefined;
            this._outputLockingMode = undefined;
            this._outputTimingSource = undefined;
            this._supportLowFramerateInputs = undefined;
            this._inputLossBehavior.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._initialAudioGain = value.initialAudioGain;
            this._inputEndAction = value.inputEndAction;
            this._outputLockingMode = value.outputLockingMode;
            this._outputTimingSource = value.outputTimingSource;
            this._supportLowFramerateInputs = value.supportLowFramerateInputs;
            this._inputLossBehavior.internalValue = value.inputLossBehavior;
        }
    }
    get initialAudioGain() {
        return this.getNumberAttribute('initial_audio_gain');
    }
    set initialAudioGain(value) {
        this._initialAudioGain = value;
    }
    resetInitialAudioGain() {
        this._initialAudioGain = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get initialAudioGainInput() {
        return this._initialAudioGain;
    }
    get inputEndAction() {
        return this.getStringAttribute('input_end_action');
    }
    set inputEndAction(value) {
        this._inputEndAction = value;
    }
    resetInputEndAction() {
        this._inputEndAction = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inputEndActionInput() {
        return this._inputEndAction;
    }
    get outputLockingMode() {
        return this.getStringAttribute('output_locking_mode');
    }
    set outputLockingMode(value) {
        this._outputLockingMode = value;
    }
    resetOutputLockingMode() {
        this._outputLockingMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get outputLockingModeInput() {
        return this._outputLockingMode;
    }
    get outputTimingSource() {
        return this.getStringAttribute('output_timing_source');
    }
    set outputTimingSource(value) {
        this._outputTimingSource = value;
    }
    resetOutputTimingSource() {
        this._outputTimingSource = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get outputTimingSourceInput() {
        return this._outputTimingSource;
    }
    get supportLowFramerateInputs() {
        return this.getStringAttribute('support_low_framerate_inputs');
    }
    set supportLowFramerateInputs(value) {
        this._supportLowFramerateInputs = value;
    }
    resetSupportLowFramerateInputs() {
        this._supportLowFramerateInputs = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get supportLowFramerateInputsInput() {
        return this._supportLowFramerateInputs;
    }
    get inputLossBehavior() {
        return this._inputLossBehavior;
    }
    putInputLossBehavior(value) {
        this._inputLossBehavior.internalValue = value;
    }
    resetInputLossBehavior() {
        this._inputLossBehavior.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inputLossBehaviorInput() {
        return this._inputLossBehavior.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsGlobalConfigurationOutputReference = MedialiveChannelEncoderSettingsGlobalConfigurationOutputReference;
_27 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsGlobalConfigurationOutputReference[_27] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsGlobalConfigurationOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.medialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsToTerraform = medialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsToTerraform;
function medialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.medialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsToHclTerraform = medialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsOutputReference = MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsOutputReference;
_28 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsOutputReference[_28] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        html_motion_graphics_settings: medialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsToTerraform(struct.htmlMotionGraphicsSettings),
    };
}
exports.medialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsToTerraform = medialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsToTerraform;
function medialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        html_motion_graphics_settings: {
            value: medialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsToHclTerraform(struct.htmlMotionGraphicsSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsToHclTerraform = medialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // html_motion_graphics_settings - computed: false, optional: true, required: false
        this._htmlMotionGraphicsSettings = new MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsOutputReference(this, "html_motion_graphics_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._htmlMotionGraphicsSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.htmlMotionGraphicsSettings = this._htmlMotionGraphicsSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._htmlMotionGraphicsSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._htmlMotionGraphicsSettings.internalValue = value.htmlMotionGraphicsSettings;
        }
    }
    get htmlMotionGraphicsSettings() {
        return this._htmlMotionGraphicsSettings;
    }
    putHtmlMotionGraphicsSettings(value) {
        this._htmlMotionGraphicsSettings.internalValue = value;
    }
    resetHtmlMotionGraphicsSettings() {
        this._htmlMotionGraphicsSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get htmlMotionGraphicsSettingsInput() {
        return this._htmlMotionGraphicsSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsOutputReference = MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsOutputReference;
_29 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsOutputReference[_29] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsMotionGraphicsConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        motion_graphics_insertion: cdktf.stringToTerraform(struct.motionGraphicsInsertion),
        motion_graphics_settings: medialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsToTerraform(struct.motionGraphicsSettings),
    };
}
exports.medialiveChannelEncoderSettingsMotionGraphicsConfigurationToTerraform = medialiveChannelEncoderSettingsMotionGraphicsConfigurationToTerraform;
function medialiveChannelEncoderSettingsMotionGraphicsConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        motion_graphics_insertion: {
            value: cdktf.stringToHclTerraform(struct.motionGraphicsInsertion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        motion_graphics_settings: {
            value: medialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsToHclTerraform(struct.motionGraphicsSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsMotionGraphicsConfigurationToHclTerraform = medialiveChannelEncoderSettingsMotionGraphicsConfigurationToHclTerraform;
class MedialiveChannelEncoderSettingsMotionGraphicsConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // motion_graphics_settings - computed: false, optional: false, required: true
        this._motionGraphicsSettings = new MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsOutputReference(this, "motion_graphics_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._motionGraphicsInsertion !== undefined) {
            hasAnyValues = true;
            internalValueResult.motionGraphicsInsertion = this._motionGraphicsInsertion;
        }
        if (this._motionGraphicsSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.motionGraphicsSettings = this._motionGraphicsSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._motionGraphicsInsertion = undefined;
            this._motionGraphicsSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._motionGraphicsInsertion = value.motionGraphicsInsertion;
            this._motionGraphicsSettings.internalValue = value.motionGraphicsSettings;
        }
    }
    get motionGraphicsInsertion() {
        return this.getStringAttribute('motion_graphics_insertion');
    }
    set motionGraphicsInsertion(value) {
        this._motionGraphicsInsertion = value;
    }
    resetMotionGraphicsInsertion() {
        this._motionGraphicsInsertion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get motionGraphicsInsertionInput() {
        return this._motionGraphicsInsertion;
    }
    get motionGraphicsSettings() {
        return this._motionGraphicsSettings;
    }
    putMotionGraphicsSettings(value) {
        this._motionGraphicsSettings.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get motionGraphicsSettingsInput() {
        return this._motionGraphicsSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsMotionGraphicsConfigurationOutputReference = MedialiveChannelEncoderSettingsMotionGraphicsConfigurationOutputReference;
_30 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsMotionGraphicsConfigurationOutputReference[_30] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsMotionGraphicsConfigurationOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsNielsenConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        distributor_id: cdktf.stringToTerraform(struct.distributorId),
        nielsen_pcm_to_id3_tagging: cdktf.stringToTerraform(struct.nielsenPcmToId3Tagging),
    };
}
exports.medialiveChannelEncoderSettingsNielsenConfigurationToTerraform = medialiveChannelEncoderSettingsNielsenConfigurationToTerraform;
function medialiveChannelEncoderSettingsNielsenConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        distributor_id: {
            value: cdktf.stringToHclTerraform(struct.distributorId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        nielsen_pcm_to_id3_tagging: {
            value: cdktf.stringToHclTerraform(struct.nielsenPcmToId3Tagging),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsNielsenConfigurationToHclTerraform = medialiveChannelEncoderSettingsNielsenConfigurationToHclTerraform;
class MedialiveChannelEncoderSettingsNielsenConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._distributorId !== undefined) {
            hasAnyValues = true;
            internalValueResult.distributorId = this._distributorId;
        }
        if (this._nielsenPcmToId3Tagging !== undefined) {
            hasAnyValues = true;
            internalValueResult.nielsenPcmToId3Tagging = this._nielsenPcmToId3Tagging;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._distributorId = undefined;
            this._nielsenPcmToId3Tagging = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._distributorId = value.distributorId;
            this._nielsenPcmToId3Tagging = value.nielsenPcmToId3Tagging;
        }
    }
    get distributorId() {
        return this.getStringAttribute('distributor_id');
    }
    set distributorId(value) {
        this._distributorId = value;
    }
    resetDistributorId() {
        this._distributorId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get distributorIdInput() {
        return this._distributorId;
    }
    get nielsenPcmToId3Tagging() {
        return this.getStringAttribute('nielsen_pcm_to_id3_tagging');
    }
    set nielsenPcmToId3Tagging(value) {
        this._nielsenPcmToId3Tagging = value;
    }
    resetNielsenPcmToId3Tagging() {
        this._nielsenPcmToId3Tagging = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nielsenPcmToId3TaggingInput() {
        return this._nielsenPcmToId3Tagging;
    }
}
exports.MedialiveChannelEncoderSettingsNielsenConfigurationOutputReference = MedialiveChannelEncoderSettingsNielsenConfigurationOutputReference;
_31 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsNielsenConfigurationOutputReference[_31] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsNielsenConfigurationOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        canned_acl: cdktf.stringToTerraform(struct.cannedAcl),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        canned_acl: {
            value: cdktf.stringToHclTerraform(struct.cannedAcl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cannedAcl !== undefined) {
            hasAnyValues = true;
            internalValueResult.cannedAcl = this._cannedAcl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cannedAcl = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cannedAcl = value.cannedAcl;
        }
    }
    get cannedAcl() {
        return this.getStringAttribute('canned_acl');
    }
    set cannedAcl(value) {
        this._cannedAcl = value;
    }
    resetCannedAcl() {
        this._cannedAcl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cannedAclInput() {
        return this._cannedAcl;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsOutputReference;
_32 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsOutputReference[_32] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        archive_s3_settings: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsToTerraform(struct.archiveS3Settings),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        archive_s3_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsToHclTerraform(struct.archiveS3Settings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // archive_s3_settings - computed: false, optional: true, required: false
        this._archiveS3Settings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsOutputReference(this, "archive_s3_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._archiveS3Settings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.archiveS3Settings = this._archiveS3Settings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._archiveS3Settings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._archiveS3Settings.internalValue = value.archiveS3Settings;
        }
    }
    get archiveS3Settings() {
        return this._archiveS3Settings;
    }
    putArchiveS3Settings(value) {
        this._archiveS3Settings.internalValue = value;
    }
    resetArchiveS3Settings() {
        this._archiveS3Settings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get archiveS3SettingsInput() {
        return this._archiveS3Settings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsOutputReference;
_33 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsOutputReference[_33] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        destination_ref_id: cdktf.stringToTerraform(struct.destinationRefId),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        destination_ref_id: {
            value: cdktf.stringToHclTerraform(struct.destinationRefId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._destinationRefId !== undefined) {
            hasAnyValues = true;
            internalValueResult.destinationRefId = this._destinationRefId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._destinationRefId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._destinationRefId = value.destinationRefId;
        }
    }
    get destinationRefId() {
        return this.getStringAttribute('destination_ref_id');
    }
    set destinationRefId(value) {
        this._destinationRefId = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationRefIdInput() {
        return this._destinationRefId;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationOutputReference;
_34 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationOutputReference[_34] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        rollover_interval: cdktf.numberToTerraform(struct.rolloverInterval),
        archive_cdn_settings: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsToTerraform(struct.archiveCdnSettings),
        destination: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationToTerraform(struct.destination),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        rollover_interval: {
            value: cdktf.numberToHclTerraform(struct.rolloverInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        archive_cdn_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsToHclTerraform(struct.archiveCdnSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsList",
        },
        destination: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationToHclTerraform(struct.destination),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // archive_cdn_settings - computed: false, optional: true, required: false
        this._archiveCdnSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsOutputReference(this, "archive_cdn_settings");
        // destination - computed: false, optional: false, required: true
        this._destination = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationOutputReference(this, "destination");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._rolloverInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.rolloverInterval = this._rolloverInterval;
        }
        if (this._archiveCdnSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.archiveCdnSettings = this._archiveCdnSettings?.internalValue;
        }
        if (this._destination?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.destination = this._destination?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._rolloverInterval = undefined;
            this._archiveCdnSettings.internalValue = undefined;
            this._destination.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._rolloverInterval = value.rolloverInterval;
            this._archiveCdnSettings.internalValue = value.archiveCdnSettings;
            this._destination.internalValue = value.destination;
        }
    }
    get rolloverInterval() {
        return this.getNumberAttribute('rollover_interval');
    }
    set rolloverInterval(value) {
        this._rolloverInterval = value;
    }
    resetRolloverInterval() {
        this._rolloverInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rolloverIntervalInput() {
        return this._rolloverInterval;
    }
    get archiveCdnSettings() {
        return this._archiveCdnSettings;
    }
    putArchiveCdnSettings(value) {
        this._archiveCdnSettings.internalValue = value;
    }
    resetArchiveCdnSettings() {
        this._archiveCdnSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get archiveCdnSettingsInput() {
        return this._archiveCdnSettings.internalValue;
    }
    get destination() {
        return this._destination;
    }
    putDestination(value) {
        this._destination.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationInput() {
        return this._destination.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsOutputReference;
_35 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsOutputReference[_35] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsOutputReference", version: "19.15.0" };
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsList = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsList;
_36 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsList[_36] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsList", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        destination_ref_id: cdktf.stringToTerraform(struct.destinationRefId),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        destination_ref_id: {
            value: cdktf.stringToHclTerraform(struct.destinationRefId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._destinationRefId !== undefined) {
            hasAnyValues = true;
            internalValueResult.destinationRefId = this._destinationRefId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._destinationRefId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._destinationRefId = value.destinationRefId;
        }
    }
    get destinationRefId() {
        return this.getStringAttribute('destination_ref_id');
    }
    set destinationRefId(value) {
        this._destinationRefId = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationRefIdInput() {
        return this._destinationRefId;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutputReference;
_37 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutputReference[_37] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        canned_acl: cdktf.stringToTerraform(struct.cannedAcl),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        canned_acl: {
            value: cdktf.stringToHclTerraform(struct.cannedAcl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cannedAcl !== undefined) {
            hasAnyValues = true;
            internalValueResult.cannedAcl = this._cannedAcl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cannedAcl = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cannedAcl = value.cannedAcl;
        }
    }
    get cannedAcl() {
        return this.getStringAttribute('canned_acl');
    }
    set cannedAcl(value) {
        this._cannedAcl = value;
    }
    resetCannedAcl() {
        this._cannedAcl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cannedAclInput() {
        return this._cannedAcl;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutputReference;
_38 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutputReference[_38] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        frame_capture_s3_settings: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsToTerraform(struct.frameCaptureS3Settings),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        frame_capture_s3_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsToHclTerraform(struct.frameCaptureS3Settings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // frame_capture_s3_settings - computed: false, optional: true, required: false
        this._frameCaptureS3Settings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutputReference(this, "frame_capture_s3_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._frameCaptureS3Settings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.frameCaptureS3Settings = this._frameCaptureS3Settings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._frameCaptureS3Settings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._frameCaptureS3Settings.internalValue = value.frameCaptureS3Settings;
        }
    }
    get frameCaptureS3Settings() {
        return this._frameCaptureS3Settings;
    }
    putFrameCaptureS3Settings(value) {
        this._frameCaptureS3Settings.internalValue = value;
    }
    resetFrameCaptureS3Settings() {
        this._frameCaptureS3Settings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get frameCaptureS3SettingsInput() {
        return this._frameCaptureS3Settings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutputReference;
_39 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutputReference[_39] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        destination: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationToTerraform(struct.destination),
        frame_capture_cdn_settings: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsToTerraform(struct.frameCaptureCdnSettings),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        destination: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationToHclTerraform(struct.destination),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationList",
        },
        frame_capture_cdn_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsToHclTerraform(struct.frameCaptureCdnSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // destination - computed: false, optional: false, required: true
        this._destination = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutputReference(this, "destination");
        // frame_capture_cdn_settings - computed: false, optional: true, required: false
        this._frameCaptureCdnSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutputReference(this, "frame_capture_cdn_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._destination?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.destination = this._destination?.internalValue;
        }
        if (this._frameCaptureCdnSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.frameCaptureCdnSettings = this._frameCaptureCdnSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._destination.internalValue = undefined;
            this._frameCaptureCdnSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._destination.internalValue = value.destination;
            this._frameCaptureCdnSettings.internalValue = value.frameCaptureCdnSettings;
        }
    }
    get destination() {
        return this._destination;
    }
    putDestination(value) {
        this._destination.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationInput() {
        return this._destination.internalValue;
    }
    get frameCaptureCdnSettings() {
        return this._frameCaptureCdnSettings;
    }
    putFrameCaptureCdnSettings(value) {
        this._frameCaptureCdnSettings.internalValue = value;
    }
    resetFrameCaptureCdnSettings() {
        this._frameCaptureCdnSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get frameCaptureCdnSettingsInput() {
        return this._frameCaptureCdnSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsOutputReference;
_40 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsOutputReference[_40] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        caption_channel: cdktf.numberToTerraform(struct.captionChannel),
        language_code: cdktf.stringToTerraform(struct.languageCode),
        language_description: cdktf.stringToTerraform(struct.languageDescription),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        caption_channel: {
            value: cdktf.numberToHclTerraform(struct.captionChannel),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        language_code: {
            value: cdktf.stringToHclTerraform(struct.languageCode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        language_description: {
            value: cdktf.stringToHclTerraform(struct.languageDescription),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._captionChannel !== undefined) {
            hasAnyValues = true;
            internalValueResult.captionChannel = this._captionChannel;
        }
        if (this._languageCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.languageCode = this._languageCode;
        }
        if (this._languageDescription !== undefined) {
            hasAnyValues = true;
            internalValueResult.languageDescription = this._languageDescription;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._captionChannel = undefined;
            this._languageCode = undefined;
            this._languageDescription = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._captionChannel = value.captionChannel;
            this._languageCode = value.languageCode;
            this._languageDescription = value.languageDescription;
        }
    }
    get captionChannel() {
        return this.getNumberAttribute('caption_channel');
    }
    set captionChannel(value) {
        this._captionChannel = value;
    }
    // Temporarily expose input value. Use with caution.
    get captionChannelInput() {
        return this._captionChannel;
    }
    get languageCode() {
        return this.getStringAttribute('language_code');
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    // Temporarily expose input value. Use with caution.
    get languageCodeInput() {
        return this._languageCode;
    }
    get languageDescription() {
        return this.getStringAttribute('language_description');
    }
    set languageDescription(value) {
        this._languageDescription = value;
    }
    // Temporarily expose input value. Use with caution.
    get languageDescriptionInput() {
        return this._languageDescription;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsOutputReference;
_41 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsOutputReference[_41] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsOutputReference", version: "19.15.0" };
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsList = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsList;
_42 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsList[_42] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsList", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        destination_ref_id: cdktf.stringToTerraform(struct.destinationRefId),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        destination_ref_id: {
            value: cdktf.stringToHclTerraform(struct.destinationRefId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._destinationRefId !== undefined) {
            hasAnyValues = true;
            internalValueResult.destinationRefId = this._destinationRefId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._destinationRefId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._destinationRefId = value.destinationRefId;
        }
    }
    get destinationRefId() {
        return this.getStringAttribute('destination_ref_id');
    }
    set destinationRefId(value) {
        this._destinationRefId = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationRefIdInput() {
        return this._destinationRefId;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationOutputReference;
_43 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationOutputReference[_43] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        connection_retry_interval: cdktf.numberToTerraform(struct.connectionRetryInterval),
        filecache_duration: cdktf.numberToTerraform(struct.filecacheDuration),
        http_transfer_mode: cdktf.stringToTerraform(struct.httpTransferMode),
        num_retries: cdktf.numberToTerraform(struct.numRetries),
        restart_delay: cdktf.numberToTerraform(struct.restartDelay),
        salt: cdktf.stringToTerraform(struct.salt),
        token: cdktf.stringToTerraform(struct.token),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        connection_retry_interval: {
            value: cdktf.numberToHclTerraform(struct.connectionRetryInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        filecache_duration: {
            value: cdktf.numberToHclTerraform(struct.filecacheDuration),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        http_transfer_mode: {
            value: cdktf.stringToHclTerraform(struct.httpTransferMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        num_retries: {
            value: cdktf.numberToHclTerraform(struct.numRetries),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        restart_delay: {
            value: cdktf.numberToHclTerraform(struct.restartDelay),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        salt: {
            value: cdktf.stringToHclTerraform(struct.salt),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        token: {
            value: cdktf.stringToHclTerraform(struct.token),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._connectionRetryInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectionRetryInterval = this._connectionRetryInterval;
        }
        if (this._filecacheDuration !== undefined) {
            hasAnyValues = true;
            internalValueResult.filecacheDuration = this._filecacheDuration;
        }
        if (this._httpTransferMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpTransferMode = this._httpTransferMode;
        }
        if (this._numRetries !== undefined) {
            hasAnyValues = true;
            internalValueResult.numRetries = this._numRetries;
        }
        if (this._restartDelay !== undefined) {
            hasAnyValues = true;
            internalValueResult.restartDelay = this._restartDelay;
        }
        if (this._salt !== undefined) {
            hasAnyValues = true;
            internalValueResult.salt = this._salt;
        }
        if (this._token !== undefined) {
            hasAnyValues = true;
            internalValueResult.token = this._token;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._connectionRetryInterval = undefined;
            this._filecacheDuration = undefined;
            this._httpTransferMode = undefined;
            this._numRetries = undefined;
            this._restartDelay = undefined;
            this._salt = undefined;
            this._token = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._connectionRetryInterval = value.connectionRetryInterval;
            this._filecacheDuration = value.filecacheDuration;
            this._httpTransferMode = value.httpTransferMode;
            this._numRetries = value.numRetries;
            this._restartDelay = value.restartDelay;
            this._salt = value.salt;
            this._token = value.token;
        }
    }
    get connectionRetryInterval() {
        return this.getNumberAttribute('connection_retry_interval');
    }
    set connectionRetryInterval(value) {
        this._connectionRetryInterval = value;
    }
    resetConnectionRetryInterval() {
        this._connectionRetryInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionRetryIntervalInput() {
        return this._connectionRetryInterval;
    }
    get filecacheDuration() {
        return this.getNumberAttribute('filecache_duration');
    }
    set filecacheDuration(value) {
        this._filecacheDuration = value;
    }
    resetFilecacheDuration() {
        this._filecacheDuration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get filecacheDurationInput() {
        return this._filecacheDuration;
    }
    get httpTransferMode() {
        return this.getStringAttribute('http_transfer_mode');
    }
    set httpTransferMode(value) {
        this._httpTransferMode = value;
    }
    resetHttpTransferMode() {
        this._httpTransferMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpTransferModeInput() {
        return this._httpTransferMode;
    }
    get numRetries() {
        return this.getNumberAttribute('num_retries');
    }
    set numRetries(value) {
        this._numRetries = value;
    }
    resetNumRetries() {
        this._numRetries = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numRetriesInput() {
        return this._numRetries;
    }
    get restartDelay() {
        return this.getNumberAttribute('restart_delay');
    }
    set restartDelay(value) {
        this._restartDelay = value;
    }
    resetRestartDelay() {
        this._restartDelay = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get restartDelayInput() {
        return this._restartDelay;
    }
    get salt() {
        return this.getStringAttribute('salt');
    }
    set salt(value) {
        this._salt = value;
    }
    resetSalt() {
        this._salt = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get saltInput() {
        return this._salt;
    }
    get token() {
        return this.getStringAttribute('token');
    }
    set token(value) {
        this._token = value;
    }
    resetToken() {
        this._token = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tokenInput() {
        return this._token;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsOutputReference;
_44 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsOutputReference[_44] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        connection_retry_interval: cdktf.numberToTerraform(struct.connectionRetryInterval),
        filecache_duration: cdktf.numberToTerraform(struct.filecacheDuration),
        num_retries: cdktf.numberToTerraform(struct.numRetries),
        restart_delay: cdktf.numberToTerraform(struct.restartDelay),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        connection_retry_interval: {
            value: cdktf.numberToHclTerraform(struct.connectionRetryInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        filecache_duration: {
            value: cdktf.numberToHclTerraform(struct.filecacheDuration),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        num_retries: {
            value: cdktf.numberToHclTerraform(struct.numRetries),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        restart_delay: {
            value: cdktf.numberToHclTerraform(struct.restartDelay),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._connectionRetryInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectionRetryInterval = this._connectionRetryInterval;
        }
        if (this._filecacheDuration !== undefined) {
            hasAnyValues = true;
            internalValueResult.filecacheDuration = this._filecacheDuration;
        }
        if (this._numRetries !== undefined) {
            hasAnyValues = true;
            internalValueResult.numRetries = this._numRetries;
        }
        if (this._restartDelay !== undefined) {
            hasAnyValues = true;
            internalValueResult.restartDelay = this._restartDelay;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._connectionRetryInterval = undefined;
            this._filecacheDuration = undefined;
            this._numRetries = undefined;
            this._restartDelay = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._connectionRetryInterval = value.connectionRetryInterval;
            this._filecacheDuration = value.filecacheDuration;
            this._numRetries = value.numRetries;
            this._restartDelay = value.restartDelay;
        }
    }
    get connectionRetryInterval() {
        return this.getNumberAttribute('connection_retry_interval');
    }
    set connectionRetryInterval(value) {
        this._connectionRetryInterval = value;
    }
    resetConnectionRetryInterval() {
        this._connectionRetryInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionRetryIntervalInput() {
        return this._connectionRetryInterval;
    }
    get filecacheDuration() {
        return this.getNumberAttribute('filecache_duration');
    }
    set filecacheDuration(value) {
        this._filecacheDuration = value;
    }
    resetFilecacheDuration() {
        this._filecacheDuration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get filecacheDurationInput() {
        return this._filecacheDuration;
    }
    get numRetries() {
        return this.getNumberAttribute('num_retries');
    }
    set numRetries(value) {
        this._numRetries = value;
    }
    resetNumRetries() {
        this._numRetries = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numRetriesInput() {
        return this._numRetries;
    }
    get restartDelay() {
        return this.getNumberAttribute('restart_delay');
    }
    set restartDelay(value) {
        this._restartDelay = value;
    }
    resetRestartDelay() {
        this._restartDelay = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get restartDelayInput() {
        return this._restartDelay;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsOutputReference;
_45 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsOutputReference[_45] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        connection_retry_interval: cdktf.numberToTerraform(struct.connectionRetryInterval),
        filecache_duration: cdktf.numberToTerraform(struct.filecacheDuration),
        media_store_storage_class: cdktf.stringToTerraform(struct.mediaStoreStorageClass),
        num_retries: cdktf.numberToTerraform(struct.numRetries),
        restart_delay: cdktf.numberToTerraform(struct.restartDelay),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        connection_retry_interval: {
            value: cdktf.numberToHclTerraform(struct.connectionRetryInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        filecache_duration: {
            value: cdktf.numberToHclTerraform(struct.filecacheDuration),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        media_store_storage_class: {
            value: cdktf.stringToHclTerraform(struct.mediaStoreStorageClass),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        num_retries: {
            value: cdktf.numberToHclTerraform(struct.numRetries),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        restart_delay: {
            value: cdktf.numberToHclTerraform(struct.restartDelay),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._connectionRetryInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectionRetryInterval = this._connectionRetryInterval;
        }
        if (this._filecacheDuration !== undefined) {
            hasAnyValues = true;
            internalValueResult.filecacheDuration = this._filecacheDuration;
        }
        if (this._mediaStoreStorageClass !== undefined) {
            hasAnyValues = true;
            internalValueResult.mediaStoreStorageClass = this._mediaStoreStorageClass;
        }
        if (this._numRetries !== undefined) {
            hasAnyValues = true;
            internalValueResult.numRetries = this._numRetries;
        }
        if (this._restartDelay !== undefined) {
            hasAnyValues = true;
            internalValueResult.restartDelay = this._restartDelay;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._connectionRetryInterval = undefined;
            this._filecacheDuration = undefined;
            this._mediaStoreStorageClass = undefined;
            this._numRetries = undefined;
            this._restartDelay = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._connectionRetryInterval = value.connectionRetryInterval;
            this._filecacheDuration = value.filecacheDuration;
            this._mediaStoreStorageClass = value.mediaStoreStorageClass;
            this._numRetries = value.numRetries;
            this._restartDelay = value.restartDelay;
        }
    }
    get connectionRetryInterval() {
        return this.getNumberAttribute('connection_retry_interval');
    }
    set connectionRetryInterval(value) {
        this._connectionRetryInterval = value;
    }
    resetConnectionRetryInterval() {
        this._connectionRetryInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionRetryIntervalInput() {
        return this._connectionRetryInterval;
    }
    get filecacheDuration() {
        return this.getNumberAttribute('filecache_duration');
    }
    set filecacheDuration(value) {
        this._filecacheDuration = value;
    }
    resetFilecacheDuration() {
        this._filecacheDuration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get filecacheDurationInput() {
        return this._filecacheDuration;
    }
    get mediaStoreStorageClass() {
        return this.getStringAttribute('media_store_storage_class');
    }
    set mediaStoreStorageClass(value) {
        this._mediaStoreStorageClass = value;
    }
    resetMediaStoreStorageClass() {
        this._mediaStoreStorageClass = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mediaStoreStorageClassInput() {
        return this._mediaStoreStorageClass;
    }
    get numRetries() {
        return this.getNumberAttribute('num_retries');
    }
    set numRetries(value) {
        this._numRetries = value;
    }
    resetNumRetries() {
        this._numRetries = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numRetriesInput() {
        return this._numRetries;
    }
    get restartDelay() {
        return this.getNumberAttribute('restart_delay');
    }
    set restartDelay(value) {
        this._restartDelay = value;
    }
    resetRestartDelay() {
        this._restartDelay = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get restartDelayInput() {
        return this._restartDelay;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsOutputReference;
_46 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsOutputReference[_46] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        canned_acl: cdktf.stringToTerraform(struct.cannedAcl),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        canned_acl: {
            value: cdktf.stringToHclTerraform(struct.cannedAcl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cannedAcl !== undefined) {
            hasAnyValues = true;
            internalValueResult.cannedAcl = this._cannedAcl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cannedAcl = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cannedAcl = value.cannedAcl;
        }
    }
    get cannedAcl() {
        return this.getStringAttribute('canned_acl');
    }
    set cannedAcl(value) {
        this._cannedAcl = value;
    }
    resetCannedAcl() {
        this._cannedAcl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cannedAclInput() {
        return this._cannedAcl;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsOutputReference;
_47 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsOutputReference[_47] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        connection_retry_interval: cdktf.numberToTerraform(struct.connectionRetryInterval),
        filecache_duration: cdktf.numberToTerraform(struct.filecacheDuration),
        http_transfer_mode: cdktf.stringToTerraform(struct.httpTransferMode),
        num_retries: cdktf.numberToTerraform(struct.numRetries),
        restart_delay: cdktf.numberToTerraform(struct.restartDelay),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        connection_retry_interval: {
            value: cdktf.numberToHclTerraform(struct.connectionRetryInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        filecache_duration: {
            value: cdktf.numberToHclTerraform(struct.filecacheDuration),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        http_transfer_mode: {
            value: cdktf.stringToHclTerraform(struct.httpTransferMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        num_retries: {
            value: cdktf.numberToHclTerraform(struct.numRetries),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        restart_delay: {
            value: cdktf.numberToHclTerraform(struct.restartDelay),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._connectionRetryInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectionRetryInterval = this._connectionRetryInterval;
        }
        if (this._filecacheDuration !== undefined) {
            hasAnyValues = true;
            internalValueResult.filecacheDuration = this._filecacheDuration;
        }
        if (this._httpTransferMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpTransferMode = this._httpTransferMode;
        }
        if (this._numRetries !== undefined) {
            hasAnyValues = true;
            internalValueResult.numRetries = this._numRetries;
        }
        if (this._restartDelay !== undefined) {
            hasAnyValues = true;
            internalValueResult.restartDelay = this._restartDelay;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._connectionRetryInterval = undefined;
            this._filecacheDuration = undefined;
            this._httpTransferMode = undefined;
            this._numRetries = undefined;
            this._restartDelay = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._connectionRetryInterval = value.connectionRetryInterval;
            this._filecacheDuration = value.filecacheDuration;
            this._httpTransferMode = value.httpTransferMode;
            this._numRetries = value.numRetries;
            this._restartDelay = value.restartDelay;
        }
    }
    get connectionRetryInterval() {
        return this.getNumberAttribute('connection_retry_interval');
    }
    set connectionRetryInterval(value) {
        this._connectionRetryInterval = value;
    }
    resetConnectionRetryInterval() {
        this._connectionRetryInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionRetryIntervalInput() {
        return this._connectionRetryInterval;
    }
    get filecacheDuration() {
        return this.getNumberAttribute('filecache_duration');
    }
    set filecacheDuration(value) {
        this._filecacheDuration = value;
    }
    resetFilecacheDuration() {
        this._filecacheDuration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get filecacheDurationInput() {
        return this._filecacheDuration;
    }
    get httpTransferMode() {
        return this.getStringAttribute('http_transfer_mode');
    }
    set httpTransferMode(value) {
        this._httpTransferMode = value;
    }
    resetHttpTransferMode() {
        this._httpTransferMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpTransferModeInput() {
        return this._httpTransferMode;
    }
    get numRetries() {
        return this.getNumberAttribute('num_retries');
    }
    set numRetries(value) {
        this._numRetries = value;
    }
    resetNumRetries() {
        this._numRetries = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numRetriesInput() {
        return this._numRetries;
    }
    get restartDelay() {
        return this.getNumberAttribute('restart_delay');
    }
    set restartDelay(value) {
        this._restartDelay = value;
    }
    resetRestartDelay() {
        this._restartDelay = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get restartDelayInput() {
        return this._restartDelay;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsOutputReference;
_48 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsOutputReference[_48] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        hls_akamai_settings: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsToTerraform(struct.hlsAkamaiSettings),
        hls_basic_put_settings: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsToTerraform(struct.hlsBasicPutSettings),
        hls_media_store_settings: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsToTerraform(struct.hlsMediaStoreSettings),
        hls_s3_settings: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsToTerraform(struct.hlsS3Settings),
        hls_webdav_settings: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsToTerraform(struct.hlsWebdavSettings),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        hls_akamai_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsToHclTerraform(struct.hlsAkamaiSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsList",
        },
        hls_basic_put_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsToHclTerraform(struct.hlsBasicPutSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsList",
        },
        hls_media_store_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsToHclTerraform(struct.hlsMediaStoreSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsList",
        },
        hls_s3_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsToHclTerraform(struct.hlsS3Settings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsList",
        },
        hls_webdav_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsToHclTerraform(struct.hlsWebdavSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // hls_akamai_settings - computed: false, optional: true, required: false
        this._hlsAkamaiSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsOutputReference(this, "hls_akamai_settings");
        // hls_basic_put_settings - computed: false, optional: true, required: false
        this._hlsBasicPutSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsOutputReference(this, "hls_basic_put_settings");
        // hls_media_store_settings - computed: false, optional: true, required: false
        this._hlsMediaStoreSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsOutputReference(this, "hls_media_store_settings");
        // hls_s3_settings - computed: false, optional: true, required: false
        this._hlsS3Settings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsOutputReference(this, "hls_s3_settings");
        // hls_webdav_settings - computed: false, optional: true, required: false
        this._hlsWebdavSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsOutputReference(this, "hls_webdav_settings");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hlsAkamaiSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.hlsAkamaiSettings = this._hlsAkamaiSettings?.internalValue;
        }
        if (this._hlsBasicPutSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.hlsBasicPutSettings = this._hlsBasicPutSettings?.internalValue;
        }
        if (this._hlsMediaStoreSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.hlsMediaStoreSettings = this._hlsMediaStoreSettings?.internalValue;
        }
        if (this._hlsS3Settings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.hlsS3Settings = this._hlsS3Settings?.internalValue;
        }
        if (this._hlsWebdavSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.hlsWebdavSettings = this._hlsWebdavSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._hlsAkamaiSettings.internalValue = undefined;
            this._hlsBasicPutSettings.internalValue = undefined;
            this._hlsMediaStoreSettings.internalValue = undefined;
            this._hlsS3Settings.internalValue = undefined;
            this._hlsWebdavSettings.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._hlsAkamaiSettings.internalValue = value.hlsAkamaiSettings;
            this._hlsBasicPutSettings.internalValue = value.hlsBasicPutSettings;
            this._hlsMediaStoreSettings.internalValue = value.hlsMediaStoreSettings;
            this._hlsS3Settings.internalValue = value.hlsS3Settings;
            this._hlsWebdavSettings.internalValue = value.hlsWebdavSettings;
        }
    }
    get hlsAkamaiSettings() {
        return this._hlsAkamaiSettings;
    }
    putHlsAkamaiSettings(value) {
        this._hlsAkamaiSettings.internalValue = value;
    }
    resetHlsAkamaiSettings() {
        this._hlsAkamaiSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hlsAkamaiSettingsInput() {
        return this._hlsAkamaiSettings.internalValue;
    }
    get hlsBasicPutSettings() {
        return this._hlsBasicPutSettings;
    }
    putHlsBasicPutSettings(value) {
        this._hlsBasicPutSettings.internalValue = value;
    }
    resetHlsBasicPutSettings() {
        this._hlsBasicPutSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hlsBasicPutSettingsInput() {
        return this._hlsBasicPutSettings.internalValue;
    }
    get hlsMediaStoreSettings() {
        return this._hlsMediaStoreSettings;
    }
    putHlsMediaStoreSettings(value) {
        this._hlsMediaStoreSettings.internalValue = value;
    }
    resetHlsMediaStoreSettings() {
        this._hlsMediaStoreSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hlsMediaStoreSettingsInput() {
        return this._hlsMediaStoreSettings.internalValue;
    }
    get hlsS3Settings() {
        return this._hlsS3Settings;
    }
    putHlsS3Settings(value) {
        this._hlsS3Settings.internalValue = value;
    }
    resetHlsS3Settings() {
        this._hlsS3Settings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hlsS3SettingsInput() {
        return this._hlsS3Settings.internalValue;
    }
    get hlsWebdavSettings() {
        return this._hlsWebdavSettings;
    }
    putHlsWebdavSettings(value) {
        this._hlsWebdavSettings.internalValue = value;
    }
    resetHlsWebdavSettings() {
        this._hlsWebdavSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hlsWebdavSettingsInput() {
        return this._hlsWebdavSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsOutputReference;
_49 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsOutputReference[_49] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsOutputReference", version: "19.15.0" };
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsList = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsList;
_50 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsList[_50] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsList", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServerToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        password_param: cdktf.stringToTerraform(struct.passwordParam),
        uri: cdktf.stringToTerraform(struct.uri),
        username: cdktf.stringToTerraform(struct.username),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServerToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServerToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServerToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        password_param: {
            value: cdktf.stringToHclTerraform(struct.passwordParam),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        uri: {
            value: cdktf.stringToHclTerraform(struct.uri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        username: {
            value: cdktf.stringToHclTerraform(struct.username),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServerToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServerToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServerOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._passwordParam !== undefined) {
            hasAnyValues = true;
            internalValueResult.passwordParam = this._passwordParam;
        }
        if (this._uri !== undefined) {
            hasAnyValues = true;
            internalValueResult.uri = this._uri;
        }
        if (this._username !== undefined) {
            hasAnyValues = true;
            internalValueResult.username = this._username;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._passwordParam = undefined;
            this._uri = undefined;
            this._username = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._passwordParam = value.passwordParam;
            this._uri = value.uri;
            this._username = value.username;
        }
    }
    get passwordParam() {
        return this.getStringAttribute('password_param');
    }
    set passwordParam(value) {
        this._passwordParam = value;
    }
    resetPasswordParam() {
        this._passwordParam = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passwordParamInput() {
        return this._passwordParam;
    }
    get uri() {
        return this.getStringAttribute('uri');
    }
    set uri(value) {
        this._uri = value;
    }
    // Temporarily expose input value. Use with caution.
    get uriInput() {
        return this._uri;
    }
    get username() {
        return this.getStringAttribute('username');
    }
    set username(value) {
        this._username = value;
    }
    resetUsername() {
        this._username = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get usernameInput() {
        return this._username;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServerOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServerOutputReference;
_51 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServerOutputReference[_51] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServerOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        static_key_value: cdktf.stringToTerraform(struct.staticKeyValue),
        key_provider_server: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServerToTerraform(struct.keyProviderServer),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        static_key_value: {
            value: cdktf.stringToHclTerraform(struct.staticKeyValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        key_provider_server: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServerToHclTerraform(struct.keyProviderServer),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServerList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // key_provider_server - computed: false, optional: true, required: false
        this._keyProviderServer = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServerOutputReference(this, "key_provider_server");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._staticKeyValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.staticKeyValue = this._staticKeyValue;
        }
        if (this._keyProviderServer?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.keyProviderServer = this._keyProviderServer?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._staticKeyValue = undefined;
            this._keyProviderServer.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._staticKeyValue = value.staticKeyValue;
            this._keyProviderServer.internalValue = value.keyProviderServer;
        }
    }
    get staticKeyValue() {
        return this.getStringAttribute('static_key_value');
    }
    set staticKeyValue(value) {
        this._staticKeyValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get staticKeyValueInput() {
        return this._staticKeyValue;
    }
    get keyProviderServer() {
        return this._keyProviderServer;
    }
    putKeyProviderServer(value) {
        this._keyProviderServer.internalValue = value;
    }
    resetKeyProviderServer() {
        this._keyProviderServer.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyProviderServerInput() {
        return this._keyProviderServer.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsOutputReference;
_52 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsOutputReference[_52] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsOutputReference", version: "19.15.0" };
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsList = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsList;
_53 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsList[_53] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsList", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        static_key_settings: cdktf.listMapper(medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsToTerraform, true)(struct.staticKeySettings),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        static_key_settings: {
            value: cdktf.listMapperHcl(medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsToHclTerraform, true)(struct.staticKeySettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // static_key_settings - computed: false, optional: true, required: false
        this._staticKeySettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsList(this, "static_key_settings", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._staticKeySettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.staticKeySettings = this._staticKeySettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._staticKeySettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._staticKeySettings.internalValue = value.staticKeySettings;
        }
    }
    get staticKeySettings() {
        return this._staticKeySettings;
    }
    putStaticKeySettings(value) {
        this._staticKeySettings.internalValue = value;
    }
    resetStaticKeySettings() {
        this._staticKeySettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get staticKeySettingsInput() {
        return this._staticKeySettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsOutputReference;
_54 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsOutputReference[_54] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ad_markers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.adMarkers),
        base_url_content: cdktf.stringToTerraform(struct.baseUrlContent),
        base_url_content1: cdktf.stringToTerraform(struct.baseUrlContent1),
        base_url_manifest: cdktf.stringToTerraform(struct.baseUrlManifest),
        base_url_manifest1: cdktf.stringToTerraform(struct.baseUrlManifest1),
        caption_language_setting: cdktf.stringToTerraform(struct.captionLanguageSetting),
        client_cache: cdktf.stringToTerraform(struct.clientCache),
        codec_specification: cdktf.stringToTerraform(struct.codecSpecification),
        constant_iv: cdktf.stringToTerraform(struct.constantIv),
        directory_structure: cdktf.stringToTerraform(struct.directoryStructure),
        discontinuity_tags: cdktf.stringToTerraform(struct.discontinuityTags),
        encryption_type: cdktf.stringToTerraform(struct.encryptionType),
        hls_id3_segment_tagging: cdktf.stringToTerraform(struct.hlsId3SegmentTagging),
        iframe_only_playlists: cdktf.stringToTerraform(struct.iframeOnlyPlaylists),
        incomplete_segment_behavior: cdktf.stringToTerraform(struct.incompleteSegmentBehavior),
        index_n_segments: cdktf.numberToTerraform(struct.indexNSegments),
        input_loss_action: cdktf.stringToTerraform(struct.inputLossAction),
        iv_in_manifest: cdktf.stringToTerraform(struct.ivInManifest),
        iv_source: cdktf.stringToTerraform(struct.ivSource),
        keep_segments: cdktf.numberToTerraform(struct.keepSegments),
        key_format: cdktf.stringToTerraform(struct.keyFormat),
        key_format_versions: cdktf.stringToTerraform(struct.keyFormatVersions),
        manifest_compression: cdktf.stringToTerraform(struct.manifestCompression),
        manifest_duration_format: cdktf.stringToTerraform(struct.manifestDurationFormat),
        min_segment_length: cdktf.numberToTerraform(struct.minSegmentLength),
        mode: cdktf.stringToTerraform(struct.mode),
        output_selection: cdktf.stringToTerraform(struct.outputSelection),
        program_date_time: cdktf.stringToTerraform(struct.programDateTime),
        program_date_time_clock: cdktf.stringToTerraform(struct.programDateTimeClock),
        program_date_time_period: cdktf.numberToTerraform(struct.programDateTimePeriod),
        redundant_manifest: cdktf.stringToTerraform(struct.redundantManifest),
        segment_length: cdktf.numberToTerraform(struct.segmentLength),
        segments_per_subdirectory: cdktf.numberToTerraform(struct.segmentsPerSubdirectory),
        stream_inf_resolution: cdktf.stringToTerraform(struct.streamInfResolution),
        timed_metadata_id3_frame: cdktf.stringToTerraform(struct.timedMetadataId3Frame),
        timed_metadata_id3_period: cdktf.numberToTerraform(struct.timedMetadataId3Period),
        timestamp_delta_milliseconds: cdktf.numberToTerraform(struct.timestampDeltaMilliseconds),
        ts_file_mode: cdktf.stringToTerraform(struct.tsFileMode),
        caption_language_mappings: cdktf.listMapper(medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsToTerraform, true)(struct.captionLanguageMappings),
        destination: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationToTerraform(struct.destination),
        hls_cdn_settings: cdktf.listMapper(medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsToTerraform, true)(struct.hlsCdnSettings),
        key_provider_settings: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsToTerraform(struct.keyProviderSettings),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        ad_markers: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.adMarkers),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        base_url_content: {
            value: cdktf.stringToHclTerraform(struct.baseUrlContent),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        base_url_content1: {
            value: cdktf.stringToHclTerraform(struct.baseUrlContent1),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        base_url_manifest: {
            value: cdktf.stringToHclTerraform(struct.baseUrlManifest),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        base_url_manifest1: {
            value: cdktf.stringToHclTerraform(struct.baseUrlManifest1),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        caption_language_setting: {
            value: cdktf.stringToHclTerraform(struct.captionLanguageSetting),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_cache: {
            value: cdktf.stringToHclTerraform(struct.clientCache),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        codec_specification: {
            value: cdktf.stringToHclTerraform(struct.codecSpecification),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        constant_iv: {
            value: cdktf.stringToHclTerraform(struct.constantIv),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        directory_structure: {
            value: cdktf.stringToHclTerraform(struct.directoryStructure),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        discontinuity_tags: {
            value: cdktf.stringToHclTerraform(struct.discontinuityTags),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        encryption_type: {
            value: cdktf.stringToHclTerraform(struct.encryptionType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        hls_id3_segment_tagging: {
            value: cdktf.stringToHclTerraform(struct.hlsId3SegmentTagging),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        iframe_only_playlists: {
            value: cdktf.stringToHclTerraform(struct.iframeOnlyPlaylists),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        incomplete_segment_behavior: {
            value: cdktf.stringToHclTerraform(struct.incompleteSegmentBehavior),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        index_n_segments: {
            value: cdktf.numberToHclTerraform(struct.indexNSegments),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        input_loss_action: {
            value: cdktf.stringToHclTerraform(struct.inputLossAction),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        iv_in_manifest: {
            value: cdktf.stringToHclTerraform(struct.ivInManifest),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        iv_source: {
            value: cdktf.stringToHclTerraform(struct.ivSource),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        keep_segments: {
            value: cdktf.numberToHclTerraform(struct.keepSegments),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        key_format: {
            value: cdktf.stringToHclTerraform(struct.keyFormat),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        key_format_versions: {
            value: cdktf.stringToHclTerraform(struct.keyFormatVersions),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        manifest_compression: {
            value: cdktf.stringToHclTerraform(struct.manifestCompression),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        manifest_duration_format: {
            value: cdktf.stringToHclTerraform(struct.manifestDurationFormat),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        min_segment_length: {
            value: cdktf.numberToHclTerraform(struct.minSegmentLength),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        mode: {
            value: cdktf.stringToHclTerraform(struct.mode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        output_selection: {
            value: cdktf.stringToHclTerraform(struct.outputSelection),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        program_date_time: {
            value: cdktf.stringToHclTerraform(struct.programDateTime),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        program_date_time_clock: {
            value: cdktf.stringToHclTerraform(struct.programDateTimeClock),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        program_date_time_period: {
            value: cdktf.numberToHclTerraform(struct.programDateTimePeriod),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        redundant_manifest: {
            value: cdktf.stringToHclTerraform(struct.redundantManifest),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        segment_length: {
            value: cdktf.numberToHclTerraform(struct.segmentLength),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        segments_per_subdirectory: {
            value: cdktf.numberToHclTerraform(struct.segmentsPerSubdirectory),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        stream_inf_resolution: {
            value: cdktf.stringToHclTerraform(struct.streamInfResolution),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        timed_metadata_id3_frame: {
            value: cdktf.stringToHclTerraform(struct.timedMetadataId3Frame),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        timed_metadata_id3_period: {
            value: cdktf.numberToHclTerraform(struct.timedMetadataId3Period),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        timestamp_delta_milliseconds: {
            value: cdktf.numberToHclTerraform(struct.timestampDeltaMilliseconds),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        ts_file_mode: {
            value: cdktf.stringToHclTerraform(struct.tsFileMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        caption_language_mappings: {
            value: cdktf.listMapperHcl(medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsToHclTerraform, true)(struct.captionLanguageMappings),
            isBlock: true,
            type: "set",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsList",
        },
        destination: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationToHclTerraform(struct.destination),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationList",
        },
        hls_cdn_settings: {
            value: cdktf.listMapperHcl(medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsToHclTerraform, true)(struct.hlsCdnSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsList",
        },
        key_provider_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsToHclTerraform(struct.keyProviderSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // caption_language_mappings - computed: false, optional: true, required: false
        this._captionLanguageMappings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsList(this, "caption_language_mappings", true);
        // destination - computed: false, optional: false, required: true
        this._destination = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationOutputReference(this, "destination");
        // hls_cdn_settings - computed: false, optional: true, required: false
        this._hlsCdnSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsList(this, "hls_cdn_settings", false);
        // key_provider_settings - computed: false, optional: true, required: false
        this._keyProviderSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsOutputReference(this, "key_provider_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._adMarkers !== undefined) {
            hasAnyValues = true;
            internalValueResult.adMarkers = this._adMarkers;
        }
        if (this._baseUrlContent !== undefined) {
            hasAnyValues = true;
            internalValueResult.baseUrlContent = this._baseUrlContent;
        }
        if (this._baseUrlContent1 !== undefined) {
            hasAnyValues = true;
            internalValueResult.baseUrlContent1 = this._baseUrlContent1;
        }
        if (this._baseUrlManifest !== undefined) {
            hasAnyValues = true;
            internalValueResult.baseUrlManifest = this._baseUrlManifest;
        }
        if (this._baseUrlManifest1 !== undefined) {
            hasAnyValues = true;
            internalValueResult.baseUrlManifest1 = this._baseUrlManifest1;
        }
        if (this._captionLanguageSetting !== undefined) {
            hasAnyValues = true;
            internalValueResult.captionLanguageSetting = this._captionLanguageSetting;
        }
        if (this._clientCache !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientCache = this._clientCache;
        }
        if (this._codecSpecification !== undefined) {
            hasAnyValues = true;
            internalValueResult.codecSpecification = this._codecSpecification;
        }
        if (this._constantIv !== undefined) {
            hasAnyValues = true;
            internalValueResult.constantIv = this._constantIv;
        }
        if (this._directoryStructure !== undefined) {
            hasAnyValues = true;
            internalValueResult.directoryStructure = this._directoryStructure;
        }
        if (this._discontinuityTags !== undefined) {
            hasAnyValues = true;
            internalValueResult.discontinuityTags = this._discontinuityTags;
        }
        if (this._encryptionType !== undefined) {
            hasAnyValues = true;
            internalValueResult.encryptionType = this._encryptionType;
        }
        if (this._hlsId3SegmentTagging !== undefined) {
            hasAnyValues = true;
            internalValueResult.hlsId3SegmentTagging = this._hlsId3SegmentTagging;
        }
        if (this._iframeOnlyPlaylists !== undefined) {
            hasAnyValues = true;
            internalValueResult.iframeOnlyPlaylists = this._iframeOnlyPlaylists;
        }
        if (this._incompleteSegmentBehavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.incompleteSegmentBehavior = this._incompleteSegmentBehavior;
        }
        if (this._indexNSegments !== undefined) {
            hasAnyValues = true;
            internalValueResult.indexNSegments = this._indexNSegments;
        }
        if (this._inputLossAction !== undefined) {
            hasAnyValues = true;
            internalValueResult.inputLossAction = this._inputLossAction;
        }
        if (this._ivInManifest !== undefined) {
            hasAnyValues = true;
            internalValueResult.ivInManifest = this._ivInManifest;
        }
        if (this._ivSource !== undefined) {
            hasAnyValues = true;
            internalValueResult.ivSource = this._ivSource;
        }
        if (this._keepSegments !== undefined) {
            hasAnyValues = true;
            internalValueResult.keepSegments = this._keepSegments;
        }
        if (this._keyFormat !== undefined) {
            hasAnyValues = true;
            internalValueResult.keyFormat = this._keyFormat;
        }
        if (this._keyFormatVersions !== undefined) {
            hasAnyValues = true;
            internalValueResult.keyFormatVersions = this._keyFormatVersions;
        }
        if (this._manifestCompression !== undefined) {
            hasAnyValues = true;
            internalValueResult.manifestCompression = this._manifestCompression;
        }
        if (this._manifestDurationFormat !== undefined) {
            hasAnyValues = true;
            internalValueResult.manifestDurationFormat = this._manifestDurationFormat;
        }
        if (this._minSegmentLength !== undefined) {
            hasAnyValues = true;
            internalValueResult.minSegmentLength = this._minSegmentLength;
        }
        if (this._mode !== undefined) {
            hasAnyValues = true;
            internalValueResult.mode = this._mode;
        }
        if (this._outputSelection !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputSelection = this._outputSelection;
        }
        if (this._programDateTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.programDateTime = this._programDateTime;
        }
        if (this._programDateTimeClock !== undefined) {
            hasAnyValues = true;
            internalValueResult.programDateTimeClock = this._programDateTimeClock;
        }
        if (this._programDateTimePeriod !== undefined) {
            hasAnyValues = true;
            internalValueResult.programDateTimePeriod = this._programDateTimePeriod;
        }
        if (this._redundantManifest !== undefined) {
            hasAnyValues = true;
            internalValueResult.redundantManifest = this._redundantManifest;
        }
        if (this._segmentLength !== undefined) {
            hasAnyValues = true;
            internalValueResult.segmentLength = this._segmentLength;
        }
        if (this._segmentsPerSubdirectory !== undefined) {
            hasAnyValues = true;
            internalValueResult.segmentsPerSubdirectory = this._segmentsPerSubdirectory;
        }
        if (this._streamInfResolution !== undefined) {
            hasAnyValues = true;
            internalValueResult.streamInfResolution = this._streamInfResolution;
        }
        if (this._timedMetadataId3Frame !== undefined) {
            hasAnyValues = true;
            internalValueResult.timedMetadataId3Frame = this._timedMetadataId3Frame;
        }
        if (this._timedMetadataId3Period !== undefined) {
            hasAnyValues = true;
            internalValueResult.timedMetadataId3Period = this._timedMetadataId3Period;
        }
        if (this._timestampDeltaMilliseconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.timestampDeltaMilliseconds = this._timestampDeltaMilliseconds;
        }
        if (this._tsFileMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.tsFileMode = this._tsFileMode;
        }
        if (this._captionLanguageMappings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.captionLanguageMappings = this._captionLanguageMappings?.internalValue;
        }
        if (this._destination?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.destination = this._destination?.internalValue;
        }
        if (this._hlsCdnSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.hlsCdnSettings = this._hlsCdnSettings?.internalValue;
        }
        if (this._keyProviderSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.keyProviderSettings = this._keyProviderSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._adMarkers = undefined;
            this._baseUrlContent = undefined;
            this._baseUrlContent1 = undefined;
            this._baseUrlManifest = undefined;
            this._baseUrlManifest1 = undefined;
            this._captionLanguageSetting = undefined;
            this._clientCache = undefined;
            this._codecSpecification = undefined;
            this._constantIv = undefined;
            this._directoryStructure = undefined;
            this._discontinuityTags = undefined;
            this._encryptionType = undefined;
            this._hlsId3SegmentTagging = undefined;
            this._iframeOnlyPlaylists = undefined;
            this._incompleteSegmentBehavior = undefined;
            this._indexNSegments = undefined;
            this._inputLossAction = undefined;
            this._ivInManifest = undefined;
            this._ivSource = undefined;
            this._keepSegments = undefined;
            this._keyFormat = undefined;
            this._keyFormatVersions = undefined;
            this._manifestCompression = undefined;
            this._manifestDurationFormat = undefined;
            this._minSegmentLength = undefined;
            this._mode = undefined;
            this._outputSelection = undefined;
            this._programDateTime = undefined;
            this._programDateTimeClock = undefined;
            this._programDateTimePeriod = undefined;
            this._redundantManifest = undefined;
            this._segmentLength = undefined;
            this._segmentsPerSubdirectory = undefined;
            this._streamInfResolution = undefined;
            this._timedMetadataId3Frame = undefined;
            this._timedMetadataId3Period = undefined;
            this._timestampDeltaMilliseconds = undefined;
            this._tsFileMode = undefined;
            this._captionLanguageMappings.internalValue = undefined;
            this._destination.internalValue = undefined;
            this._hlsCdnSettings.internalValue = undefined;
            this._keyProviderSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._adMarkers = value.adMarkers;
            this._baseUrlContent = value.baseUrlContent;
            this._baseUrlContent1 = value.baseUrlContent1;
            this._baseUrlManifest = value.baseUrlManifest;
            this._baseUrlManifest1 = value.baseUrlManifest1;
            this._captionLanguageSetting = value.captionLanguageSetting;
            this._clientCache = value.clientCache;
            this._codecSpecification = value.codecSpecification;
            this._constantIv = value.constantIv;
            this._directoryStructure = value.directoryStructure;
            this._discontinuityTags = value.discontinuityTags;
            this._encryptionType = value.encryptionType;
            this._hlsId3SegmentTagging = value.hlsId3SegmentTagging;
            this._iframeOnlyPlaylists = value.iframeOnlyPlaylists;
            this._incompleteSegmentBehavior = value.incompleteSegmentBehavior;
            this._indexNSegments = value.indexNSegments;
            this._inputLossAction = value.inputLossAction;
            this._ivInManifest = value.ivInManifest;
            this._ivSource = value.ivSource;
            this._keepSegments = value.keepSegments;
            this._keyFormat = value.keyFormat;
            this._keyFormatVersions = value.keyFormatVersions;
            this._manifestCompression = value.manifestCompression;
            this._manifestDurationFormat = value.manifestDurationFormat;
            this._minSegmentLength = value.minSegmentLength;
            this._mode = value.mode;
            this._outputSelection = value.outputSelection;
            this._programDateTime = value.programDateTime;
            this._programDateTimeClock = value.programDateTimeClock;
            this._programDateTimePeriod = value.programDateTimePeriod;
            this._redundantManifest = value.redundantManifest;
            this._segmentLength = value.segmentLength;
            this._segmentsPerSubdirectory = value.segmentsPerSubdirectory;
            this._streamInfResolution = value.streamInfResolution;
            this._timedMetadataId3Frame = value.timedMetadataId3Frame;
            this._timedMetadataId3Period = value.timedMetadataId3Period;
            this._timestampDeltaMilliseconds = value.timestampDeltaMilliseconds;
            this._tsFileMode = value.tsFileMode;
            this._captionLanguageMappings.internalValue = value.captionLanguageMappings;
            this._destination.internalValue = value.destination;
            this._hlsCdnSettings.internalValue = value.hlsCdnSettings;
            this._keyProviderSettings.internalValue = value.keyProviderSettings;
        }
    }
    get adMarkers() {
        return this.getListAttribute('ad_markers');
    }
    set adMarkers(value) {
        this._adMarkers = value;
    }
    resetAdMarkers() {
        this._adMarkers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get adMarkersInput() {
        return this._adMarkers;
    }
    get baseUrlContent() {
        return this.getStringAttribute('base_url_content');
    }
    set baseUrlContent(value) {
        this._baseUrlContent = value;
    }
    resetBaseUrlContent() {
        this._baseUrlContent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get baseUrlContentInput() {
        return this._baseUrlContent;
    }
    get baseUrlContent1() {
        return this.getStringAttribute('base_url_content1');
    }
    set baseUrlContent1(value) {
        this._baseUrlContent1 = value;
    }
    resetBaseUrlContent1() {
        this._baseUrlContent1 = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get baseUrlContent1Input() {
        return this._baseUrlContent1;
    }
    get baseUrlManifest() {
        return this.getStringAttribute('base_url_manifest');
    }
    set baseUrlManifest(value) {
        this._baseUrlManifest = value;
    }
    resetBaseUrlManifest() {
        this._baseUrlManifest = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get baseUrlManifestInput() {
        return this._baseUrlManifest;
    }
    get baseUrlManifest1() {
        return this.getStringAttribute('base_url_manifest1');
    }
    set baseUrlManifest1(value) {
        this._baseUrlManifest1 = value;
    }
    resetBaseUrlManifest1() {
        this._baseUrlManifest1 = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get baseUrlManifest1Input() {
        return this._baseUrlManifest1;
    }
    get captionLanguageSetting() {
        return this.getStringAttribute('caption_language_setting');
    }
    set captionLanguageSetting(value) {
        this._captionLanguageSetting = value;
    }
    resetCaptionLanguageSetting() {
        this._captionLanguageSetting = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get captionLanguageSettingInput() {
        return this._captionLanguageSetting;
    }
    get clientCache() {
        return this.getStringAttribute('client_cache');
    }
    set clientCache(value) {
        this._clientCache = value;
    }
    resetClientCache() {
        this._clientCache = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientCacheInput() {
        return this._clientCache;
    }
    get codecSpecification() {
        return this.getStringAttribute('codec_specification');
    }
    set codecSpecification(value) {
        this._codecSpecification = value;
    }
    resetCodecSpecification() {
        this._codecSpecification = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get codecSpecificationInput() {
        return this._codecSpecification;
    }
    get constantIv() {
        return this.getStringAttribute('constant_iv');
    }
    set constantIv(value) {
        this._constantIv = value;
    }
    resetConstantIv() {
        this._constantIv = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get constantIvInput() {
        return this._constantIv;
    }
    get directoryStructure() {
        return this.getStringAttribute('directory_structure');
    }
    set directoryStructure(value) {
        this._directoryStructure = value;
    }
    resetDirectoryStructure() {
        this._directoryStructure = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get directoryStructureInput() {
        return this._directoryStructure;
    }
    get discontinuityTags() {
        return this.getStringAttribute('discontinuity_tags');
    }
    set discontinuityTags(value) {
        this._discontinuityTags = value;
    }
    resetDiscontinuityTags() {
        this._discontinuityTags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get discontinuityTagsInput() {
        return this._discontinuityTags;
    }
    get encryptionType() {
        return this.getStringAttribute('encryption_type');
    }
    set encryptionType(value) {
        this._encryptionType = value;
    }
    resetEncryptionType() {
        this._encryptionType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionTypeInput() {
        return this._encryptionType;
    }
    get hlsId3SegmentTagging() {
        return this.getStringAttribute('hls_id3_segment_tagging');
    }
    set hlsId3SegmentTagging(value) {
        this._hlsId3SegmentTagging = value;
    }
    resetHlsId3SegmentTagging() {
        this._hlsId3SegmentTagging = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hlsId3SegmentTaggingInput() {
        return this._hlsId3SegmentTagging;
    }
    get iframeOnlyPlaylists() {
        return this.getStringAttribute('iframe_only_playlists');
    }
    set iframeOnlyPlaylists(value) {
        this._iframeOnlyPlaylists = value;
    }
    resetIframeOnlyPlaylists() {
        this._iframeOnlyPlaylists = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get iframeOnlyPlaylistsInput() {
        return this._iframeOnlyPlaylists;
    }
    get incompleteSegmentBehavior() {
        return this.getStringAttribute('incomplete_segment_behavior');
    }
    set incompleteSegmentBehavior(value) {
        this._incompleteSegmentBehavior = value;
    }
    resetIncompleteSegmentBehavior() {
        this._incompleteSegmentBehavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get incompleteSegmentBehaviorInput() {
        return this._incompleteSegmentBehavior;
    }
    get indexNSegments() {
        return this.getNumberAttribute('index_n_segments');
    }
    set indexNSegments(value) {
        this._indexNSegments = value;
    }
    resetIndexNSegments() {
        this._indexNSegments = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get indexNSegmentsInput() {
        return this._indexNSegments;
    }
    get inputLossAction() {
        return this.getStringAttribute('input_loss_action');
    }
    set inputLossAction(value) {
        this._inputLossAction = value;
    }
    resetInputLossAction() {
        this._inputLossAction = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inputLossActionInput() {
        return this._inputLossAction;
    }
    get ivInManifest() {
        return this.getStringAttribute('iv_in_manifest');
    }
    set ivInManifest(value) {
        this._ivInManifest = value;
    }
    resetIvInManifest() {
        this._ivInManifest = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ivInManifestInput() {
        return this._ivInManifest;
    }
    get ivSource() {
        return this.getStringAttribute('iv_source');
    }
    set ivSource(value) {
        this._ivSource = value;
    }
    resetIvSource() {
        this._ivSource = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ivSourceInput() {
        return this._ivSource;
    }
    get keepSegments() {
        return this.getNumberAttribute('keep_segments');
    }
    set keepSegments(value) {
        this._keepSegments = value;
    }
    resetKeepSegments() {
        this._keepSegments = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keepSegmentsInput() {
        return this._keepSegments;
    }
    get keyFormat() {
        return this.getStringAttribute('key_format');
    }
    set keyFormat(value) {
        this._keyFormat = value;
    }
    resetKeyFormat() {
        this._keyFormat = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyFormatInput() {
        return this._keyFormat;
    }
    get keyFormatVersions() {
        return this.getStringAttribute('key_format_versions');
    }
    set keyFormatVersions(value) {
        this._keyFormatVersions = value;
    }
    resetKeyFormatVersions() {
        this._keyFormatVersions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyFormatVersionsInput() {
        return this._keyFormatVersions;
    }
    get manifestCompression() {
        return this.getStringAttribute('manifest_compression');
    }
    set manifestCompression(value) {
        this._manifestCompression = value;
    }
    resetManifestCompression() {
        this._manifestCompression = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get manifestCompressionInput() {
        return this._manifestCompression;
    }
    get manifestDurationFormat() {
        return this.getStringAttribute('manifest_duration_format');
    }
    set manifestDurationFormat(value) {
        this._manifestDurationFormat = value;
    }
    resetManifestDurationFormat() {
        this._manifestDurationFormat = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get manifestDurationFormatInput() {
        return this._manifestDurationFormat;
    }
    get minSegmentLength() {
        return this.getNumberAttribute('min_segment_length');
    }
    set minSegmentLength(value) {
        this._minSegmentLength = value;
    }
    resetMinSegmentLength() {
        this._minSegmentLength = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minSegmentLengthInput() {
        return this._minSegmentLength;
    }
    get mode() {
        return this.getStringAttribute('mode');
    }
    set mode(value) {
        this._mode = value;
    }
    resetMode() {
        this._mode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get modeInput() {
        return this._mode;
    }
    get outputSelection() {
        return this.getStringAttribute('output_selection');
    }
    set outputSelection(value) {
        this._outputSelection = value;
    }
    resetOutputSelection() {
        this._outputSelection = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get outputSelectionInput() {
        return this._outputSelection;
    }
    get programDateTime() {
        return this.getStringAttribute('program_date_time');
    }
    set programDateTime(value) {
        this._programDateTime = value;
    }
    resetProgramDateTime() {
        this._programDateTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get programDateTimeInput() {
        return this._programDateTime;
    }
    get programDateTimeClock() {
        return this.getStringAttribute('program_date_time_clock');
    }
    set programDateTimeClock(value) {
        this._programDateTimeClock = value;
    }
    resetProgramDateTimeClock() {
        this._programDateTimeClock = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get programDateTimeClockInput() {
        return this._programDateTimeClock;
    }
    get programDateTimePeriod() {
        return this.getNumberAttribute('program_date_time_period');
    }
    set programDateTimePeriod(value) {
        this._programDateTimePeriod = value;
    }
    resetProgramDateTimePeriod() {
        this._programDateTimePeriod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get programDateTimePeriodInput() {
        return this._programDateTimePeriod;
    }
    get redundantManifest() {
        return this.getStringAttribute('redundant_manifest');
    }
    set redundantManifest(value) {
        this._redundantManifest = value;
    }
    resetRedundantManifest() {
        this._redundantManifest = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redundantManifestInput() {
        return this._redundantManifest;
    }
    get segmentLength() {
        return this.getNumberAttribute('segment_length');
    }
    set segmentLength(value) {
        this._segmentLength = value;
    }
    resetSegmentLength() {
        this._segmentLength = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get segmentLengthInput() {
        return this._segmentLength;
    }
    get segmentsPerSubdirectory() {
        return this.getNumberAttribute('segments_per_subdirectory');
    }
    set segmentsPerSubdirectory(value) {
        this._segmentsPerSubdirectory = value;
    }
    resetSegmentsPerSubdirectory() {
        this._segmentsPerSubdirectory = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get segmentsPerSubdirectoryInput() {
        return this._segmentsPerSubdirectory;
    }
    get streamInfResolution() {
        return this.getStringAttribute('stream_inf_resolution');
    }
    set streamInfResolution(value) {
        this._streamInfResolution = value;
    }
    resetStreamInfResolution() {
        this._streamInfResolution = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get streamInfResolutionInput() {
        return this._streamInfResolution;
    }
    get timedMetadataId3Frame() {
        return this.getStringAttribute('timed_metadata_id3_frame');
    }
    set timedMetadataId3Frame(value) {
        this._timedMetadataId3Frame = value;
    }
    resetTimedMetadataId3Frame() {
        this._timedMetadataId3Frame = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timedMetadataId3FrameInput() {
        return this._timedMetadataId3Frame;
    }
    get timedMetadataId3Period() {
        return this.getNumberAttribute('timed_metadata_id3_period');
    }
    set timedMetadataId3Period(value) {
        this._timedMetadataId3Period = value;
    }
    resetTimedMetadataId3Period() {
        this._timedMetadataId3Period = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timedMetadataId3PeriodInput() {
        return this._timedMetadataId3Period;
    }
    get timestampDeltaMilliseconds() {
        return this.getNumberAttribute('timestamp_delta_milliseconds');
    }
    set timestampDeltaMilliseconds(value) {
        this._timestampDeltaMilliseconds = value;
    }
    resetTimestampDeltaMilliseconds() {
        this._timestampDeltaMilliseconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timestampDeltaMillisecondsInput() {
        return this._timestampDeltaMilliseconds;
    }
    get tsFileMode() {
        return this.getStringAttribute('ts_file_mode');
    }
    set tsFileMode(value) {
        this._tsFileMode = value;
    }
    resetTsFileMode() {
        this._tsFileMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tsFileModeInput() {
        return this._tsFileMode;
    }
    get captionLanguageMappings() {
        return this._captionLanguageMappings;
    }
    putCaptionLanguageMappings(value) {
        this._captionLanguageMappings.internalValue = value;
    }
    resetCaptionLanguageMappings() {
        this._captionLanguageMappings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get captionLanguageMappingsInput() {
        return this._captionLanguageMappings.internalValue;
    }
    get destination() {
        return this._destination;
    }
    putDestination(value) {
        this._destination.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationInput() {
        return this._destination.internalValue;
    }
    get hlsCdnSettings() {
        return this._hlsCdnSettings;
    }
    putHlsCdnSettings(value) {
        this._hlsCdnSettings.internalValue = value;
    }
    resetHlsCdnSettings() {
        this._hlsCdnSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hlsCdnSettingsInput() {
        return this._hlsCdnSettings.internalValue;
    }
    get keyProviderSettings() {
        return this._keyProviderSettings;
    }
    putKeyProviderSettings(value) {
        this._keyProviderSettings.internalValue = value;
    }
    resetKeyProviderSettings() {
        this._keyProviderSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyProviderSettingsInput() {
        return this._keyProviderSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsOutputReference;
_55 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsOutputReference[_55] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        destination_ref_id: cdktf.stringToTerraform(struct.destinationRefId),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        destination_ref_id: {
            value: cdktf.stringToHclTerraform(struct.destinationRefId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._destinationRefId !== undefined) {
            hasAnyValues = true;
            internalValueResult.destinationRefId = this._destinationRefId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._destinationRefId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._destinationRefId = value.destinationRefId;
        }
    }
    get destinationRefId() {
        return this.getStringAttribute('destination_ref_id');
    }
    set destinationRefId(value) {
        this._destinationRefId = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationRefIdInput() {
        return this._destinationRefId;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationOutputReference;
_56 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationOutputReference[_56] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        destination: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationToTerraform(struct.destination),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        destination: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationToHclTerraform(struct.destination),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // destination - computed: false, optional: false, required: true
        this._destination = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationOutputReference(this, "destination");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._destination?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.destination = this._destination?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._destination.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._destination.internalValue = value.destination;
        }
    }
    get destination() {
        return this._destination;
    }
    putDestination(value) {
        this._destination.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationInput() {
        return this._destination.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsOutputReference;
_57 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsOutputReference[_57] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        destination_ref_id: cdktf.stringToTerraform(struct.destinationRefId),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        destination_ref_id: {
            value: cdktf.stringToHclTerraform(struct.destinationRefId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._destinationRefId !== undefined) {
            hasAnyValues = true;
            internalValueResult.destinationRefId = this._destinationRefId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._destinationRefId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._destinationRefId = value.destinationRefId;
        }
    }
    get destinationRefId() {
        return this.getStringAttribute('destination_ref_id');
    }
    set destinationRefId(value) {
        this._destinationRefId = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationRefIdInput() {
        return this._destinationRefId;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationOutputReference;
_58 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationOutputReference[_58] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        acquisition_point_id: cdktf.stringToTerraform(struct.acquisitionPointId),
        audio_only_timecode_control: cdktf.stringToTerraform(struct.audioOnlyTimecodeControl),
        certificate_mode: cdktf.stringToTerraform(struct.certificateMode),
        connection_retry_interval: cdktf.numberToTerraform(struct.connectionRetryInterval),
        event_id: cdktf.stringToTerraform(struct.eventId),
        event_id_mode: cdktf.stringToTerraform(struct.eventIdMode),
        event_stop_behavior: cdktf.stringToTerraform(struct.eventStopBehavior),
        filecache_duration: cdktf.numberToTerraform(struct.filecacheDuration),
        fragment_length: cdktf.numberToTerraform(struct.fragmentLength),
        input_loss_action: cdktf.stringToTerraform(struct.inputLossAction),
        num_retries: cdktf.numberToTerraform(struct.numRetries),
        restart_delay: cdktf.numberToTerraform(struct.restartDelay),
        segmentation_mode: cdktf.stringToTerraform(struct.segmentationMode),
        send_delay_ms: cdktf.numberToTerraform(struct.sendDelayMs),
        sparse_track_type: cdktf.stringToTerraform(struct.sparseTrackType),
        stream_manifest_behavior: cdktf.stringToTerraform(struct.streamManifestBehavior),
        timestamp_offset: cdktf.stringToTerraform(struct.timestampOffset),
        timestamp_offset_mode: cdktf.stringToTerraform(struct.timestampOffsetMode),
        destination: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationToTerraform(struct.destination),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        acquisition_point_id: {
            value: cdktf.stringToHclTerraform(struct.acquisitionPointId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        audio_only_timecode_control: {
            value: cdktf.stringToHclTerraform(struct.audioOnlyTimecodeControl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        certificate_mode: {
            value: cdktf.stringToHclTerraform(struct.certificateMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        connection_retry_interval: {
            value: cdktf.numberToHclTerraform(struct.connectionRetryInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        event_id: {
            value: cdktf.stringToHclTerraform(struct.eventId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        event_id_mode: {
            value: cdktf.stringToHclTerraform(struct.eventIdMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        event_stop_behavior: {
            value: cdktf.stringToHclTerraform(struct.eventStopBehavior),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        filecache_duration: {
            value: cdktf.numberToHclTerraform(struct.filecacheDuration),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        fragment_length: {
            value: cdktf.numberToHclTerraform(struct.fragmentLength),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        input_loss_action: {
            value: cdktf.stringToHclTerraform(struct.inputLossAction),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        num_retries: {
            value: cdktf.numberToHclTerraform(struct.numRetries),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        restart_delay: {
            value: cdktf.numberToHclTerraform(struct.restartDelay),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        segmentation_mode: {
            value: cdktf.stringToHclTerraform(struct.segmentationMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        send_delay_ms: {
            value: cdktf.numberToHclTerraform(struct.sendDelayMs),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        sparse_track_type: {
            value: cdktf.stringToHclTerraform(struct.sparseTrackType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        stream_manifest_behavior: {
            value: cdktf.stringToHclTerraform(struct.streamManifestBehavior),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        timestamp_offset: {
            value: cdktf.stringToHclTerraform(struct.timestampOffset),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        timestamp_offset_mode: {
            value: cdktf.stringToHclTerraform(struct.timestampOffsetMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        destination: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationToHclTerraform(struct.destination),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // destination - computed: false, optional: false, required: true
        this._destination = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationOutputReference(this, "destination");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._acquisitionPointId !== undefined) {
            hasAnyValues = true;
            internalValueResult.acquisitionPointId = this._acquisitionPointId;
        }
        if (this._audioOnlyTimecodeControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioOnlyTimecodeControl = this._audioOnlyTimecodeControl;
        }
        if (this._certificateMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.certificateMode = this._certificateMode;
        }
        if (this._connectionRetryInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectionRetryInterval = this._connectionRetryInterval;
        }
        if (this._eventId !== undefined) {
            hasAnyValues = true;
            internalValueResult.eventId = this._eventId;
        }
        if (this._eventIdMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.eventIdMode = this._eventIdMode;
        }
        if (this._eventStopBehavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.eventStopBehavior = this._eventStopBehavior;
        }
        if (this._filecacheDuration !== undefined) {
            hasAnyValues = true;
            internalValueResult.filecacheDuration = this._filecacheDuration;
        }
        if (this._fragmentLength !== undefined) {
            hasAnyValues = true;
            internalValueResult.fragmentLength = this._fragmentLength;
        }
        if (this._inputLossAction !== undefined) {
            hasAnyValues = true;
            internalValueResult.inputLossAction = this._inputLossAction;
        }
        if (this._numRetries !== undefined) {
            hasAnyValues = true;
            internalValueResult.numRetries = this._numRetries;
        }
        if (this._restartDelay !== undefined) {
            hasAnyValues = true;
            internalValueResult.restartDelay = this._restartDelay;
        }
        if (this._segmentationMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.segmentationMode = this._segmentationMode;
        }
        if (this._sendDelayMs !== undefined) {
            hasAnyValues = true;
            internalValueResult.sendDelayMs = this._sendDelayMs;
        }
        if (this._sparseTrackType !== undefined) {
            hasAnyValues = true;
            internalValueResult.sparseTrackType = this._sparseTrackType;
        }
        if (this._streamManifestBehavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.streamManifestBehavior = this._streamManifestBehavior;
        }
        if (this._timestampOffset !== undefined) {
            hasAnyValues = true;
            internalValueResult.timestampOffset = this._timestampOffset;
        }
        if (this._timestampOffsetMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.timestampOffsetMode = this._timestampOffsetMode;
        }
        if (this._destination?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.destination = this._destination?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._acquisitionPointId = undefined;
            this._audioOnlyTimecodeControl = undefined;
            this._certificateMode = undefined;
            this._connectionRetryInterval = undefined;
            this._eventId = undefined;
            this._eventIdMode = undefined;
            this._eventStopBehavior = undefined;
            this._filecacheDuration = undefined;
            this._fragmentLength = undefined;
            this._inputLossAction = undefined;
            this._numRetries = undefined;
            this._restartDelay = undefined;
            this._segmentationMode = undefined;
            this._sendDelayMs = undefined;
            this._sparseTrackType = undefined;
            this._streamManifestBehavior = undefined;
            this._timestampOffset = undefined;
            this._timestampOffsetMode = undefined;
            this._destination.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._acquisitionPointId = value.acquisitionPointId;
            this._audioOnlyTimecodeControl = value.audioOnlyTimecodeControl;
            this._certificateMode = value.certificateMode;
            this._connectionRetryInterval = value.connectionRetryInterval;
            this._eventId = value.eventId;
            this._eventIdMode = value.eventIdMode;
            this._eventStopBehavior = value.eventStopBehavior;
            this._filecacheDuration = value.filecacheDuration;
            this._fragmentLength = value.fragmentLength;
            this._inputLossAction = value.inputLossAction;
            this._numRetries = value.numRetries;
            this._restartDelay = value.restartDelay;
            this._segmentationMode = value.segmentationMode;
            this._sendDelayMs = value.sendDelayMs;
            this._sparseTrackType = value.sparseTrackType;
            this._streamManifestBehavior = value.streamManifestBehavior;
            this._timestampOffset = value.timestampOffset;
            this._timestampOffsetMode = value.timestampOffsetMode;
            this._destination.internalValue = value.destination;
        }
    }
    get acquisitionPointId() {
        return this.getStringAttribute('acquisition_point_id');
    }
    set acquisitionPointId(value) {
        this._acquisitionPointId = value;
    }
    resetAcquisitionPointId() {
        this._acquisitionPointId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get acquisitionPointIdInput() {
        return this._acquisitionPointId;
    }
    get audioOnlyTimecodeControl() {
        return this.getStringAttribute('audio_only_timecode_control');
    }
    set audioOnlyTimecodeControl(value) {
        this._audioOnlyTimecodeControl = value;
    }
    resetAudioOnlyTimecodeControl() {
        this._audioOnlyTimecodeControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioOnlyTimecodeControlInput() {
        return this._audioOnlyTimecodeControl;
    }
    get certificateMode() {
        return this.getStringAttribute('certificate_mode');
    }
    set certificateMode(value) {
        this._certificateMode = value;
    }
    resetCertificateMode() {
        this._certificateMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get certificateModeInput() {
        return this._certificateMode;
    }
    get connectionRetryInterval() {
        return this.getNumberAttribute('connection_retry_interval');
    }
    set connectionRetryInterval(value) {
        this._connectionRetryInterval = value;
    }
    resetConnectionRetryInterval() {
        this._connectionRetryInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionRetryIntervalInput() {
        return this._connectionRetryInterval;
    }
    get eventId() {
        return this.getStringAttribute('event_id');
    }
    set eventId(value) {
        this._eventId = value;
    }
    resetEventId() {
        this._eventId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get eventIdInput() {
        return this._eventId;
    }
    get eventIdMode() {
        return this.getStringAttribute('event_id_mode');
    }
    set eventIdMode(value) {
        this._eventIdMode = value;
    }
    resetEventIdMode() {
        this._eventIdMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get eventIdModeInput() {
        return this._eventIdMode;
    }
    get eventStopBehavior() {
        return this.getStringAttribute('event_stop_behavior');
    }
    set eventStopBehavior(value) {
        this._eventStopBehavior = value;
    }
    resetEventStopBehavior() {
        this._eventStopBehavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get eventStopBehaviorInput() {
        return this._eventStopBehavior;
    }
    get filecacheDuration() {
        return this.getNumberAttribute('filecache_duration');
    }
    set filecacheDuration(value) {
        this._filecacheDuration = value;
    }
    resetFilecacheDuration() {
        this._filecacheDuration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get filecacheDurationInput() {
        return this._filecacheDuration;
    }
    get fragmentLength() {
        return this.getNumberAttribute('fragment_length');
    }
    set fragmentLength(value) {
        this._fragmentLength = value;
    }
    resetFragmentLength() {
        this._fragmentLength = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fragmentLengthInput() {
        return this._fragmentLength;
    }
    get inputLossAction() {
        return this.getStringAttribute('input_loss_action');
    }
    set inputLossAction(value) {
        this._inputLossAction = value;
    }
    resetInputLossAction() {
        this._inputLossAction = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inputLossActionInput() {
        return this._inputLossAction;
    }
    get numRetries() {
        return this.getNumberAttribute('num_retries');
    }
    set numRetries(value) {
        this._numRetries = value;
    }
    resetNumRetries() {
        this._numRetries = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numRetriesInput() {
        return this._numRetries;
    }
    get restartDelay() {
        return this.getNumberAttribute('restart_delay');
    }
    set restartDelay(value) {
        this._restartDelay = value;
    }
    resetRestartDelay() {
        this._restartDelay = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get restartDelayInput() {
        return this._restartDelay;
    }
    get segmentationMode() {
        return this.getStringAttribute('segmentation_mode');
    }
    set segmentationMode(value) {
        this._segmentationMode = value;
    }
    resetSegmentationMode() {
        this._segmentationMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get segmentationModeInput() {
        return this._segmentationMode;
    }
    get sendDelayMs() {
        return this.getNumberAttribute('send_delay_ms');
    }
    set sendDelayMs(value) {
        this._sendDelayMs = value;
    }
    resetSendDelayMs() {
        this._sendDelayMs = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sendDelayMsInput() {
        return this._sendDelayMs;
    }
    get sparseTrackType() {
        return this.getStringAttribute('sparse_track_type');
    }
    set sparseTrackType(value) {
        this._sparseTrackType = value;
    }
    resetSparseTrackType() {
        this._sparseTrackType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sparseTrackTypeInput() {
        return this._sparseTrackType;
    }
    get streamManifestBehavior() {
        return this.getStringAttribute('stream_manifest_behavior');
    }
    set streamManifestBehavior(value) {
        this._streamManifestBehavior = value;
    }
    resetStreamManifestBehavior() {
        this._streamManifestBehavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get streamManifestBehaviorInput() {
        return this._streamManifestBehavior;
    }
    get timestampOffset() {
        return this.getStringAttribute('timestamp_offset');
    }
    set timestampOffset(value) {
        this._timestampOffset = value;
    }
    resetTimestampOffset() {
        this._timestampOffset = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timestampOffsetInput() {
        return this._timestampOffset;
    }
    get timestampOffsetMode() {
        return this.getStringAttribute('timestamp_offset_mode');
    }
    set timestampOffsetMode(value) {
        this._timestampOffsetMode = value;
    }
    resetTimestampOffsetMode() {
        this._timestampOffsetMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timestampOffsetModeInput() {
        return this._timestampOffsetMode;
    }
    get destination() {
        return this._destination;
    }
    putDestination(value) {
        this._destination.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationInput() {
        return this._destination.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsOutputReference;
_59 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsOutputReference[_59] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsOutputReference;
_60 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsOutputReference[_60] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ad_markers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.adMarkers),
        authentication_scheme: cdktf.stringToTerraform(struct.authenticationScheme),
        cache_full_behavior: cdktf.stringToTerraform(struct.cacheFullBehavior),
        cache_length: cdktf.numberToTerraform(struct.cacheLength),
        caption_data: cdktf.stringToTerraform(struct.captionData),
        input_loss_action: cdktf.stringToTerraform(struct.inputLossAction),
        restart_delay: cdktf.numberToTerraform(struct.restartDelay),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        ad_markers: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.adMarkers),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        authentication_scheme: {
            value: cdktf.stringToHclTerraform(struct.authenticationScheme),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cache_full_behavior: {
            value: cdktf.stringToHclTerraform(struct.cacheFullBehavior),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cache_length: {
            value: cdktf.numberToHclTerraform(struct.cacheLength),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        caption_data: {
            value: cdktf.stringToHclTerraform(struct.captionData),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        input_loss_action: {
            value: cdktf.stringToHclTerraform(struct.inputLossAction),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        restart_delay: {
            value: cdktf.numberToHclTerraform(struct.restartDelay),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._adMarkers !== undefined) {
            hasAnyValues = true;
            internalValueResult.adMarkers = this._adMarkers;
        }
        if (this._authenticationScheme !== undefined) {
            hasAnyValues = true;
            internalValueResult.authenticationScheme = this._authenticationScheme;
        }
        if (this._cacheFullBehavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.cacheFullBehavior = this._cacheFullBehavior;
        }
        if (this._cacheLength !== undefined) {
            hasAnyValues = true;
            internalValueResult.cacheLength = this._cacheLength;
        }
        if (this._captionData !== undefined) {
            hasAnyValues = true;
            internalValueResult.captionData = this._captionData;
        }
        if (this._inputLossAction !== undefined) {
            hasAnyValues = true;
            internalValueResult.inputLossAction = this._inputLossAction;
        }
        if (this._restartDelay !== undefined) {
            hasAnyValues = true;
            internalValueResult.restartDelay = this._restartDelay;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._adMarkers = undefined;
            this._authenticationScheme = undefined;
            this._cacheFullBehavior = undefined;
            this._cacheLength = undefined;
            this._captionData = undefined;
            this._inputLossAction = undefined;
            this._restartDelay = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._adMarkers = value.adMarkers;
            this._authenticationScheme = value.authenticationScheme;
            this._cacheFullBehavior = value.cacheFullBehavior;
            this._cacheLength = value.cacheLength;
            this._captionData = value.captionData;
            this._inputLossAction = value.inputLossAction;
            this._restartDelay = value.restartDelay;
        }
    }
    get adMarkers() {
        return this.getListAttribute('ad_markers');
    }
    set adMarkers(value) {
        this._adMarkers = value;
    }
    resetAdMarkers() {
        this._adMarkers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get adMarkersInput() {
        return this._adMarkers;
    }
    get authenticationScheme() {
        return this.getStringAttribute('authentication_scheme');
    }
    set authenticationScheme(value) {
        this._authenticationScheme = value;
    }
    resetAuthenticationScheme() {
        this._authenticationScheme = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authenticationSchemeInput() {
        return this._authenticationScheme;
    }
    get cacheFullBehavior() {
        return this.getStringAttribute('cache_full_behavior');
    }
    set cacheFullBehavior(value) {
        this._cacheFullBehavior = value;
    }
    resetCacheFullBehavior() {
        this._cacheFullBehavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cacheFullBehaviorInput() {
        return this._cacheFullBehavior;
    }
    get cacheLength() {
        return this.getNumberAttribute('cache_length');
    }
    set cacheLength(value) {
        this._cacheLength = value;
    }
    resetCacheLength() {
        this._cacheLength = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cacheLengthInput() {
        return this._cacheLength;
    }
    get captionData() {
        return this.getStringAttribute('caption_data');
    }
    set captionData(value) {
        this._captionData = value;
    }
    resetCaptionData() {
        this._captionData = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get captionDataInput() {
        return this._captionData;
    }
    get inputLossAction() {
        return this.getStringAttribute('input_loss_action');
    }
    set inputLossAction(value) {
        this._inputLossAction = value;
    }
    resetInputLossAction() {
        this._inputLossAction = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inputLossActionInput() {
        return this._inputLossAction;
    }
    get restartDelay() {
        return this.getNumberAttribute('restart_delay');
    }
    set restartDelay(value) {
        this._restartDelay = value;
    }
    resetRestartDelay() {
        this._restartDelay = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get restartDelayInput() {
        return this._restartDelay;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsOutputReference;
_61 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsOutputReference[_61] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        input_loss_action: cdktf.stringToTerraform(struct.inputLossAction),
        timed_metadata_id3_frame: cdktf.stringToTerraform(struct.timedMetadataId3Frame),
        timed_metadata_id3_period: cdktf.numberToTerraform(struct.timedMetadataId3Period),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        input_loss_action: {
            value: cdktf.stringToHclTerraform(struct.inputLossAction),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        timed_metadata_id3_frame: {
            value: cdktf.stringToHclTerraform(struct.timedMetadataId3Frame),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        timed_metadata_id3_period: {
            value: cdktf.numberToHclTerraform(struct.timedMetadataId3Period),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._inputLossAction !== undefined) {
            hasAnyValues = true;
            internalValueResult.inputLossAction = this._inputLossAction;
        }
        if (this._timedMetadataId3Frame !== undefined) {
            hasAnyValues = true;
            internalValueResult.timedMetadataId3Frame = this._timedMetadataId3Frame;
        }
        if (this._timedMetadataId3Period !== undefined) {
            hasAnyValues = true;
            internalValueResult.timedMetadataId3Period = this._timedMetadataId3Period;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._inputLossAction = undefined;
            this._timedMetadataId3Frame = undefined;
            this._timedMetadataId3Period = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._inputLossAction = value.inputLossAction;
            this._timedMetadataId3Frame = value.timedMetadataId3Frame;
            this._timedMetadataId3Period = value.timedMetadataId3Period;
        }
    }
    get inputLossAction() {
        return this.getStringAttribute('input_loss_action');
    }
    set inputLossAction(value) {
        this._inputLossAction = value;
    }
    resetInputLossAction() {
        this._inputLossAction = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inputLossActionInput() {
        return this._inputLossAction;
    }
    get timedMetadataId3Frame() {
        return this.getStringAttribute('timed_metadata_id3_frame');
    }
    set timedMetadataId3Frame(value) {
        this._timedMetadataId3Frame = value;
    }
    resetTimedMetadataId3Frame() {
        this._timedMetadataId3Frame = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timedMetadataId3FrameInput() {
        return this._timedMetadataId3Frame;
    }
    get timedMetadataId3Period() {
        return this.getNumberAttribute('timed_metadata_id3_period');
    }
    set timedMetadataId3Period(value) {
        this._timedMetadataId3Period = value;
    }
    resetTimedMetadataId3Period() {
        this._timedMetadataId3Period = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timedMetadataId3PeriodInput() {
        return this._timedMetadataId3Period;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsOutputReference;
_62 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsOutputReference[_62] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        archive_group_settings: cdktf.listMapper(medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsToTerraform, true)(struct.archiveGroupSettings),
        frame_capture_group_settings: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsToTerraform(struct.frameCaptureGroupSettings),
        hls_group_settings: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsToTerraform(struct.hlsGroupSettings),
        media_package_group_settings: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsToTerraform(struct.mediaPackageGroupSettings),
        ms_smooth_group_settings: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsToTerraform(struct.msSmoothGroupSettings),
        multiplex_group_settings: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsToTerraform(struct.multiplexGroupSettings),
        rtmp_group_settings: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsToTerraform(struct.rtmpGroupSettings),
        udp_group_settings: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsToTerraform(struct.udpGroupSettings),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        archive_group_settings: {
            value: cdktf.listMapperHcl(medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsToHclTerraform, true)(struct.archiveGroupSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsList",
        },
        frame_capture_group_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsToHclTerraform(struct.frameCaptureGroupSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsList",
        },
        hls_group_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsToHclTerraform(struct.hlsGroupSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsList",
        },
        media_package_group_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsToHclTerraform(struct.mediaPackageGroupSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsList",
        },
        ms_smooth_group_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsToHclTerraform(struct.msSmoothGroupSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsList",
        },
        multiplex_group_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsToHclTerraform(struct.multiplexGroupSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsList",
        },
        rtmp_group_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsToHclTerraform(struct.rtmpGroupSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsList",
        },
        udp_group_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsToHclTerraform(struct.udpGroupSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // archive_group_settings - computed: false, optional: true, required: false
        this._archiveGroupSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsList(this, "archive_group_settings", false);
        // frame_capture_group_settings - computed: false, optional: true, required: false
        this._frameCaptureGroupSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsOutputReference(this, "frame_capture_group_settings");
        // hls_group_settings - computed: false, optional: true, required: false
        this._hlsGroupSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsOutputReference(this, "hls_group_settings");
        // media_package_group_settings - computed: false, optional: true, required: false
        this._mediaPackageGroupSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsOutputReference(this, "media_package_group_settings");
        // ms_smooth_group_settings - computed: false, optional: true, required: false
        this._msSmoothGroupSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsOutputReference(this, "ms_smooth_group_settings");
        // multiplex_group_settings - computed: false, optional: true, required: false
        this._multiplexGroupSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsOutputReference(this, "multiplex_group_settings");
        // rtmp_group_settings - computed: false, optional: true, required: false
        this._rtmpGroupSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsOutputReference(this, "rtmp_group_settings");
        // udp_group_settings - computed: false, optional: true, required: false
        this._udpGroupSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsOutputReference(this, "udp_group_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._archiveGroupSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.archiveGroupSettings = this._archiveGroupSettings?.internalValue;
        }
        if (this._frameCaptureGroupSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.frameCaptureGroupSettings = this._frameCaptureGroupSettings?.internalValue;
        }
        if (this._hlsGroupSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.hlsGroupSettings = this._hlsGroupSettings?.internalValue;
        }
        if (this._mediaPackageGroupSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mediaPackageGroupSettings = this._mediaPackageGroupSettings?.internalValue;
        }
        if (this._msSmoothGroupSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.msSmoothGroupSettings = this._msSmoothGroupSettings?.internalValue;
        }
        if (this._multiplexGroupSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.multiplexGroupSettings = this._multiplexGroupSettings?.internalValue;
        }
        if (this._rtmpGroupSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.rtmpGroupSettings = this._rtmpGroupSettings?.internalValue;
        }
        if (this._udpGroupSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.udpGroupSettings = this._udpGroupSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._archiveGroupSettings.internalValue = undefined;
            this._frameCaptureGroupSettings.internalValue = undefined;
            this._hlsGroupSettings.internalValue = undefined;
            this._mediaPackageGroupSettings.internalValue = undefined;
            this._msSmoothGroupSettings.internalValue = undefined;
            this._multiplexGroupSettings.internalValue = undefined;
            this._rtmpGroupSettings.internalValue = undefined;
            this._udpGroupSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._archiveGroupSettings.internalValue = value.archiveGroupSettings;
            this._frameCaptureGroupSettings.internalValue = value.frameCaptureGroupSettings;
            this._hlsGroupSettings.internalValue = value.hlsGroupSettings;
            this._mediaPackageGroupSettings.internalValue = value.mediaPackageGroupSettings;
            this._msSmoothGroupSettings.internalValue = value.msSmoothGroupSettings;
            this._multiplexGroupSettings.internalValue = value.multiplexGroupSettings;
            this._rtmpGroupSettings.internalValue = value.rtmpGroupSettings;
            this._udpGroupSettings.internalValue = value.udpGroupSettings;
        }
    }
    get archiveGroupSettings() {
        return this._archiveGroupSettings;
    }
    putArchiveGroupSettings(value) {
        this._archiveGroupSettings.internalValue = value;
    }
    resetArchiveGroupSettings() {
        this._archiveGroupSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get archiveGroupSettingsInput() {
        return this._archiveGroupSettings.internalValue;
    }
    get frameCaptureGroupSettings() {
        return this._frameCaptureGroupSettings;
    }
    putFrameCaptureGroupSettings(value) {
        this._frameCaptureGroupSettings.internalValue = value;
    }
    resetFrameCaptureGroupSettings() {
        this._frameCaptureGroupSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get frameCaptureGroupSettingsInput() {
        return this._frameCaptureGroupSettings.internalValue;
    }
    get hlsGroupSettings() {
        return this._hlsGroupSettings;
    }
    putHlsGroupSettings(value) {
        this._hlsGroupSettings.internalValue = value;
    }
    resetHlsGroupSettings() {
        this._hlsGroupSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hlsGroupSettingsInput() {
        return this._hlsGroupSettings.internalValue;
    }
    get mediaPackageGroupSettings() {
        return this._mediaPackageGroupSettings;
    }
    putMediaPackageGroupSettings(value) {
        this._mediaPackageGroupSettings.internalValue = value;
    }
    resetMediaPackageGroupSettings() {
        this._mediaPackageGroupSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mediaPackageGroupSettingsInput() {
        return this._mediaPackageGroupSettings.internalValue;
    }
    get msSmoothGroupSettings() {
        return this._msSmoothGroupSettings;
    }
    putMsSmoothGroupSettings(value) {
        this._msSmoothGroupSettings.internalValue = value;
    }
    resetMsSmoothGroupSettings() {
        this._msSmoothGroupSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get msSmoothGroupSettingsInput() {
        return this._msSmoothGroupSettings.internalValue;
    }
    get multiplexGroupSettings() {
        return this._multiplexGroupSettings;
    }
    putMultiplexGroupSettings(value) {
        this._multiplexGroupSettings.internalValue = value;
    }
    resetMultiplexGroupSettings() {
        this._multiplexGroupSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get multiplexGroupSettingsInput() {
        return this._multiplexGroupSettings.internalValue;
    }
    get rtmpGroupSettings() {
        return this._rtmpGroupSettings;
    }
    putRtmpGroupSettings(value) {
        this._rtmpGroupSettings.internalValue = value;
    }
    resetRtmpGroupSettings() {
        this._rtmpGroupSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rtmpGroupSettingsInput() {
        return this._rtmpGroupSettings.internalValue;
    }
    get udpGroupSettings() {
        return this._udpGroupSettings;
    }
    putUdpGroupSettings(value) {
        this._udpGroupSettings.internalValue = value;
    }
    resetUdpGroupSettings() {
        this._udpGroupSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get udpGroupSettingsInput() {
        return this._udpGroupSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsOutputReference;
_63 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsOutputReference[_63] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        network_id: cdktf.numberToTerraform(struct.networkId),
        network_name: cdktf.stringToTerraform(struct.networkName),
        rep_interval: cdktf.numberToTerraform(struct.repInterval),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        network_id: {
            value: cdktf.numberToHclTerraform(struct.networkId),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        network_name: {
            value: cdktf.stringToHclTerraform(struct.networkName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        rep_interval: {
            value: cdktf.numberToHclTerraform(struct.repInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._networkId !== undefined) {
            hasAnyValues = true;
            internalValueResult.networkId = this._networkId;
        }
        if (this._networkName !== undefined) {
            hasAnyValues = true;
            internalValueResult.networkName = this._networkName;
        }
        if (this._repInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.repInterval = this._repInterval;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._networkId = undefined;
            this._networkName = undefined;
            this._repInterval = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._networkId = value.networkId;
            this._networkName = value.networkName;
            this._repInterval = value.repInterval;
        }
    }
    get networkId() {
        return this.getNumberAttribute('network_id');
    }
    set networkId(value) {
        this._networkId = value;
    }
    // Temporarily expose input value. Use with caution.
    get networkIdInput() {
        return this._networkId;
    }
    get networkName() {
        return this.getStringAttribute('network_name');
    }
    set networkName(value) {
        this._networkName = value;
    }
    // Temporarily expose input value. Use with caution.
    get networkNameInput() {
        return this._networkName;
    }
    get repInterval() {
        return this.getNumberAttribute('rep_interval');
    }
    set repInterval(value) {
        this._repInterval = value;
    }
    resetRepInterval() {
        this._repInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get repIntervalInput() {
        return this._repInterval;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference;
_64 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference[_64] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        output_sdt: cdktf.stringToTerraform(struct.outputSdt),
        rep_interval: cdktf.numberToTerraform(struct.repInterval),
        service_name: cdktf.stringToTerraform(struct.serviceName),
        service_provider_name: cdktf.stringToTerraform(struct.serviceProviderName),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        output_sdt: {
            value: cdktf.stringToHclTerraform(struct.outputSdt),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        rep_interval: {
            value: cdktf.numberToHclTerraform(struct.repInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        service_name: {
            value: cdktf.stringToHclTerraform(struct.serviceName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        service_provider_name: {
            value: cdktf.stringToHclTerraform(struct.serviceProviderName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._outputSdt !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputSdt = this._outputSdt;
        }
        if (this._repInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.repInterval = this._repInterval;
        }
        if (this._serviceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceName = this._serviceName;
        }
        if (this._serviceProviderName !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceProviderName = this._serviceProviderName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._outputSdt = undefined;
            this._repInterval = undefined;
            this._serviceName = undefined;
            this._serviceProviderName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._outputSdt = value.outputSdt;
            this._repInterval = value.repInterval;
            this._serviceName = value.serviceName;
            this._serviceProviderName = value.serviceProviderName;
        }
    }
    get outputSdt() {
        return this.getStringAttribute('output_sdt');
    }
    set outputSdt(value) {
        this._outputSdt = value;
    }
    resetOutputSdt() {
        this._outputSdt = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get outputSdtInput() {
        return this._outputSdt;
    }
    get repInterval() {
        return this.getNumberAttribute('rep_interval');
    }
    set repInterval(value) {
        this._repInterval = value;
    }
    resetRepInterval() {
        this._repInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get repIntervalInput() {
        return this._repInterval;
    }
    get serviceName() {
        return this.getStringAttribute('service_name');
    }
    set serviceName(value) {
        this._serviceName = value;
    }
    resetServiceName() {
        this._serviceName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceNameInput() {
        return this._serviceName;
    }
    get serviceProviderName() {
        return this.getStringAttribute('service_provider_name');
    }
    set serviceProviderName(value) {
        this._serviceProviderName = value;
    }
    resetServiceProviderName() {
        this._serviceProviderName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceProviderNameInput() {
        return this._serviceProviderName;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference;
_65 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference[_65] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        rep_interval: cdktf.numberToTerraform(struct.repInterval),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        rep_interval: {
            value: cdktf.numberToHclTerraform(struct.repInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._repInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.repInterval = this._repInterval;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._repInterval = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._repInterval = value.repInterval;
        }
    }
    get repInterval() {
        return this.getNumberAttribute('rep_interval');
    }
    set repInterval(value) {
        this._repInterval = value;
    }
    resetRepInterval() {
        this._repInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get repIntervalInput() {
        return this._repInterval;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference;
_66 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference[_66] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        absent_input_audio_behavior: cdktf.stringToTerraform(struct.absentInputAudioBehavior),
        arib: cdktf.stringToTerraform(struct.arib),
        arib_captions_pid: cdktf.stringToTerraform(struct.aribCaptionsPid),
        arib_captions_pid_control: cdktf.stringToTerraform(struct.aribCaptionsPidControl),
        audio_buffer_model: cdktf.stringToTerraform(struct.audioBufferModel),
        audio_frames_per_pes: cdktf.numberToTerraform(struct.audioFramesPerPes),
        audio_pids: cdktf.stringToTerraform(struct.audioPids),
        audio_stream_type: cdktf.stringToTerraform(struct.audioStreamType),
        bitrate: cdktf.numberToTerraform(struct.bitrate),
        buffer_model: cdktf.stringToTerraform(struct.bufferModel),
        cc_descriptor: cdktf.stringToTerraform(struct.ccDescriptor),
        dvb_sub_pids: cdktf.stringToTerraform(struct.dvbSubPids),
        dvb_teletext_pid: cdktf.stringToTerraform(struct.dvbTeletextPid),
        ebif: cdktf.stringToTerraform(struct.ebif),
        ebp_audio_interval: cdktf.stringToTerraform(struct.ebpAudioInterval),
        ebp_lookahead_ms: cdktf.numberToTerraform(struct.ebpLookaheadMs),
        ebp_placement: cdktf.stringToTerraform(struct.ebpPlacement),
        ecm_pid: cdktf.stringToTerraform(struct.ecmPid),
        es_rate_in_pes: cdktf.stringToTerraform(struct.esRateInPes),
        etv_platform_pid: cdktf.stringToTerraform(struct.etvPlatformPid),
        etv_signal_pid: cdktf.stringToTerraform(struct.etvSignalPid),
        fragment_time: cdktf.numberToTerraform(struct.fragmentTime),
        klv: cdktf.stringToTerraform(struct.klv),
        klv_data_pids: cdktf.stringToTerraform(struct.klvDataPids),
        nielsen_id3_behavior: cdktf.stringToTerraform(struct.nielsenId3Behavior),
        null_packet_bitrate: cdktf.numberToTerraform(struct.nullPacketBitrate),
        pat_interval: cdktf.numberToTerraform(struct.patInterval),
        pcr_control: cdktf.stringToTerraform(struct.pcrControl),
        pcr_period: cdktf.numberToTerraform(struct.pcrPeriod),
        pcr_pid: cdktf.stringToTerraform(struct.pcrPid),
        pmt_interval: cdktf.numberToTerraform(struct.pmtInterval),
        pmt_pid: cdktf.stringToTerraform(struct.pmtPid),
        program_num: cdktf.numberToTerraform(struct.programNum),
        rate_mode: cdktf.stringToTerraform(struct.rateMode),
        scte27_pids: cdktf.stringToTerraform(struct.scte27Pids),
        scte35_control: cdktf.stringToTerraform(struct.scte35Control),
        scte35_pid: cdktf.stringToTerraform(struct.scte35Pid),
        segmentation_markers: cdktf.stringToTerraform(struct.segmentationMarkers),
        segmentation_style: cdktf.stringToTerraform(struct.segmentationStyle),
        segmentation_time: cdktf.numberToTerraform(struct.segmentationTime),
        timed_metadata_behavior: cdktf.stringToTerraform(struct.timedMetadataBehavior),
        timed_metadata_pid: cdktf.stringToTerraform(struct.timedMetadataPid),
        transport_stream_id: cdktf.numberToTerraform(struct.transportStreamId),
        video_pid: cdktf.stringToTerraform(struct.videoPid),
        dvb_nit_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsToTerraform(struct.dvbNitSettings),
        dvb_sdt_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsToTerraform(struct.dvbSdtSettings),
        dvb_tdt_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsToTerraform(struct.dvbTdtSettings),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        absent_input_audio_behavior: {
            value: cdktf.stringToHclTerraform(struct.absentInputAudioBehavior),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        arib: {
            value: cdktf.stringToHclTerraform(struct.arib),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        arib_captions_pid: {
            value: cdktf.stringToHclTerraform(struct.aribCaptionsPid),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        arib_captions_pid_control: {
            value: cdktf.stringToHclTerraform(struct.aribCaptionsPidControl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        audio_buffer_model: {
            value: cdktf.stringToHclTerraform(struct.audioBufferModel),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        audio_frames_per_pes: {
            value: cdktf.numberToHclTerraform(struct.audioFramesPerPes),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        audio_pids: {
            value: cdktf.stringToHclTerraform(struct.audioPids),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        audio_stream_type: {
            value: cdktf.stringToHclTerraform(struct.audioStreamType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        bitrate: {
            value: cdktf.numberToHclTerraform(struct.bitrate),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        buffer_model: {
            value: cdktf.stringToHclTerraform(struct.bufferModel),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cc_descriptor: {
            value: cdktf.stringToHclTerraform(struct.ccDescriptor),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        dvb_sub_pids: {
            value: cdktf.stringToHclTerraform(struct.dvbSubPids),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        dvb_teletext_pid: {
            value: cdktf.stringToHclTerraform(struct.dvbTeletextPid),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ebif: {
            value: cdktf.stringToHclTerraform(struct.ebif),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ebp_audio_interval: {
            value: cdktf.stringToHclTerraform(struct.ebpAudioInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ebp_lookahead_ms: {
            value: cdktf.numberToHclTerraform(struct.ebpLookaheadMs),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        ebp_placement: {
            value: cdktf.stringToHclTerraform(struct.ebpPlacement),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ecm_pid: {
            value: cdktf.stringToHclTerraform(struct.ecmPid),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        es_rate_in_pes: {
            value: cdktf.stringToHclTerraform(struct.esRateInPes),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        etv_platform_pid: {
            value: cdktf.stringToHclTerraform(struct.etvPlatformPid),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        etv_signal_pid: {
            value: cdktf.stringToHclTerraform(struct.etvSignalPid),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        fragment_time: {
            value: cdktf.numberToHclTerraform(struct.fragmentTime),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        klv: {
            value: cdktf.stringToHclTerraform(struct.klv),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        klv_data_pids: {
            value: cdktf.stringToHclTerraform(struct.klvDataPids),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        nielsen_id3_behavior: {
            value: cdktf.stringToHclTerraform(struct.nielsenId3Behavior),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        null_packet_bitrate: {
            value: cdktf.numberToHclTerraform(struct.nullPacketBitrate),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        pat_interval: {
            value: cdktf.numberToHclTerraform(struct.patInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        pcr_control: {
            value: cdktf.stringToHclTerraform(struct.pcrControl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        pcr_period: {
            value: cdktf.numberToHclTerraform(struct.pcrPeriod),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        pcr_pid: {
            value: cdktf.stringToHclTerraform(struct.pcrPid),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        pmt_interval: {
            value: cdktf.numberToHclTerraform(struct.pmtInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        pmt_pid: {
            value: cdktf.stringToHclTerraform(struct.pmtPid),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        program_num: {
            value: cdktf.numberToHclTerraform(struct.programNum),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        rate_mode: {
            value: cdktf.stringToHclTerraform(struct.rateMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        scte27_pids: {
            value: cdktf.stringToHclTerraform(struct.scte27Pids),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        scte35_control: {
            value: cdktf.stringToHclTerraform(struct.scte35Control),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        scte35_pid: {
            value: cdktf.stringToHclTerraform(struct.scte35Pid),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        segmentation_markers: {
            value: cdktf.stringToHclTerraform(struct.segmentationMarkers),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        segmentation_style: {
            value: cdktf.stringToHclTerraform(struct.segmentationStyle),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        segmentation_time: {
            value: cdktf.numberToHclTerraform(struct.segmentationTime),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        timed_metadata_behavior: {
            value: cdktf.stringToHclTerraform(struct.timedMetadataBehavior),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        timed_metadata_pid: {
            value: cdktf.stringToHclTerraform(struct.timedMetadataPid),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        transport_stream_id: {
            value: cdktf.numberToHclTerraform(struct.transportStreamId),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        video_pid: {
            value: cdktf.stringToHclTerraform(struct.videoPid),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        dvb_nit_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsToHclTerraform(struct.dvbNitSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsList",
        },
        dvb_sdt_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsToHclTerraform(struct.dvbSdtSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsList",
        },
        dvb_tdt_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsToHclTerraform(struct.dvbTdtSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // dvb_nit_settings - computed: false, optional: true, required: false
        this._dvbNitSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference(this, "dvb_nit_settings");
        // dvb_sdt_settings - computed: false, optional: true, required: false
        this._dvbSdtSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference(this, "dvb_sdt_settings");
        // dvb_tdt_settings - computed: false, optional: true, required: false
        this._dvbTdtSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference(this, "dvb_tdt_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._absentInputAudioBehavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.absentInputAudioBehavior = this._absentInputAudioBehavior;
        }
        if (this._arib !== undefined) {
            hasAnyValues = true;
            internalValueResult.arib = this._arib;
        }
        if (this._aribCaptionsPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.aribCaptionsPid = this._aribCaptionsPid;
        }
        if (this._aribCaptionsPidControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.aribCaptionsPidControl = this._aribCaptionsPidControl;
        }
        if (this._audioBufferModel !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioBufferModel = this._audioBufferModel;
        }
        if (this._audioFramesPerPes !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioFramesPerPes = this._audioFramesPerPes;
        }
        if (this._audioPids !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioPids = this._audioPids;
        }
        if (this._audioStreamType !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioStreamType = this._audioStreamType;
        }
        if (this._bitrate !== undefined) {
            hasAnyValues = true;
            internalValueResult.bitrate = this._bitrate;
        }
        if (this._bufferModel !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufferModel = this._bufferModel;
        }
        if (this._ccDescriptor !== undefined) {
            hasAnyValues = true;
            internalValueResult.ccDescriptor = this._ccDescriptor;
        }
        if (this._dvbSubPids !== undefined) {
            hasAnyValues = true;
            internalValueResult.dvbSubPids = this._dvbSubPids;
        }
        if (this._dvbTeletextPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.dvbTeletextPid = this._dvbTeletextPid;
        }
        if (this._ebif !== undefined) {
            hasAnyValues = true;
            internalValueResult.ebif = this._ebif;
        }
        if (this._ebpAudioInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.ebpAudioInterval = this._ebpAudioInterval;
        }
        if (this._ebpLookaheadMs !== undefined) {
            hasAnyValues = true;
            internalValueResult.ebpLookaheadMs = this._ebpLookaheadMs;
        }
        if (this._ebpPlacement !== undefined) {
            hasAnyValues = true;
            internalValueResult.ebpPlacement = this._ebpPlacement;
        }
        if (this._ecmPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.ecmPid = this._ecmPid;
        }
        if (this._esRateInPes !== undefined) {
            hasAnyValues = true;
            internalValueResult.esRateInPes = this._esRateInPes;
        }
        if (this._etvPlatformPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.etvPlatformPid = this._etvPlatformPid;
        }
        if (this._etvSignalPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.etvSignalPid = this._etvSignalPid;
        }
        if (this._fragmentTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.fragmentTime = this._fragmentTime;
        }
        if (this._klv !== undefined) {
            hasAnyValues = true;
            internalValueResult.klv = this._klv;
        }
        if (this._klvDataPids !== undefined) {
            hasAnyValues = true;
            internalValueResult.klvDataPids = this._klvDataPids;
        }
        if (this._nielsenId3Behavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.nielsenId3Behavior = this._nielsenId3Behavior;
        }
        if (this._nullPacketBitrate !== undefined) {
            hasAnyValues = true;
            internalValueResult.nullPacketBitrate = this._nullPacketBitrate;
        }
        if (this._patInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.patInterval = this._patInterval;
        }
        if (this._pcrControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.pcrControl = this._pcrControl;
        }
        if (this._pcrPeriod !== undefined) {
            hasAnyValues = true;
            internalValueResult.pcrPeriod = this._pcrPeriod;
        }
        if (this._pcrPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.pcrPid = this._pcrPid;
        }
        if (this._pmtInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.pmtInterval = this._pmtInterval;
        }
        if (this._pmtPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.pmtPid = this._pmtPid;
        }
        if (this._programNum !== undefined) {
            hasAnyValues = true;
            internalValueResult.programNum = this._programNum;
        }
        if (this._rateMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.rateMode = this._rateMode;
        }
        if (this._scte27Pids !== undefined) {
            hasAnyValues = true;
            internalValueResult.scte27Pids = this._scte27Pids;
        }
        if (this._scte35Control !== undefined) {
            hasAnyValues = true;
            internalValueResult.scte35Control = this._scte35Control;
        }
        if (this._scte35Pid !== undefined) {
            hasAnyValues = true;
            internalValueResult.scte35Pid = this._scte35Pid;
        }
        if (this._segmentationMarkers !== undefined) {
            hasAnyValues = true;
            internalValueResult.segmentationMarkers = this._segmentationMarkers;
        }
        if (this._segmentationStyle !== undefined) {
            hasAnyValues = true;
            internalValueResult.segmentationStyle = this._segmentationStyle;
        }
        if (this._segmentationTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.segmentationTime = this._segmentationTime;
        }
        if (this._timedMetadataBehavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.timedMetadataBehavior = this._timedMetadataBehavior;
        }
        if (this._timedMetadataPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.timedMetadataPid = this._timedMetadataPid;
        }
        if (this._transportStreamId !== undefined) {
            hasAnyValues = true;
            internalValueResult.transportStreamId = this._transportStreamId;
        }
        if (this._videoPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.videoPid = this._videoPid;
        }
        if (this._dvbNitSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dvbNitSettings = this._dvbNitSettings?.internalValue;
        }
        if (this._dvbSdtSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dvbSdtSettings = this._dvbSdtSettings?.internalValue;
        }
        if (this._dvbTdtSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dvbTdtSettings = this._dvbTdtSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._absentInputAudioBehavior = undefined;
            this._arib = undefined;
            this._aribCaptionsPid = undefined;
            this._aribCaptionsPidControl = undefined;
            this._audioBufferModel = undefined;
            this._audioFramesPerPes = undefined;
            this._audioPids = undefined;
            this._audioStreamType = undefined;
            this._bitrate = undefined;
            this._bufferModel = undefined;
            this._ccDescriptor = undefined;
            this._dvbSubPids = undefined;
            this._dvbTeletextPid = undefined;
            this._ebif = undefined;
            this._ebpAudioInterval = undefined;
            this._ebpLookaheadMs = undefined;
            this._ebpPlacement = undefined;
            this._ecmPid = undefined;
            this._esRateInPes = undefined;
            this._etvPlatformPid = undefined;
            this._etvSignalPid = undefined;
            this._fragmentTime = undefined;
            this._klv = undefined;
            this._klvDataPids = undefined;
            this._nielsenId3Behavior = undefined;
            this._nullPacketBitrate = undefined;
            this._patInterval = undefined;
            this._pcrControl = undefined;
            this._pcrPeriod = undefined;
            this._pcrPid = undefined;
            this._pmtInterval = undefined;
            this._pmtPid = undefined;
            this._programNum = undefined;
            this._rateMode = undefined;
            this._scte27Pids = undefined;
            this._scte35Control = undefined;
            this._scte35Pid = undefined;
            this._segmentationMarkers = undefined;
            this._segmentationStyle = undefined;
            this._segmentationTime = undefined;
            this._timedMetadataBehavior = undefined;
            this._timedMetadataPid = undefined;
            this._transportStreamId = undefined;
            this._videoPid = undefined;
            this._dvbNitSettings.internalValue = undefined;
            this._dvbSdtSettings.internalValue = undefined;
            this._dvbTdtSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._absentInputAudioBehavior = value.absentInputAudioBehavior;
            this._arib = value.arib;
            this._aribCaptionsPid = value.aribCaptionsPid;
            this._aribCaptionsPidControl = value.aribCaptionsPidControl;
            this._audioBufferModel = value.audioBufferModel;
            this._audioFramesPerPes = value.audioFramesPerPes;
            this._audioPids = value.audioPids;
            this._audioStreamType = value.audioStreamType;
            this._bitrate = value.bitrate;
            this._bufferModel = value.bufferModel;
            this._ccDescriptor = value.ccDescriptor;
            this._dvbSubPids = value.dvbSubPids;
            this._dvbTeletextPid = value.dvbTeletextPid;
            this._ebif = value.ebif;
            this._ebpAudioInterval = value.ebpAudioInterval;
            this._ebpLookaheadMs = value.ebpLookaheadMs;
            this._ebpPlacement = value.ebpPlacement;
            this._ecmPid = value.ecmPid;
            this._esRateInPes = value.esRateInPes;
            this._etvPlatformPid = value.etvPlatformPid;
            this._etvSignalPid = value.etvSignalPid;
            this._fragmentTime = value.fragmentTime;
            this._klv = value.klv;
            this._klvDataPids = value.klvDataPids;
            this._nielsenId3Behavior = value.nielsenId3Behavior;
            this._nullPacketBitrate = value.nullPacketBitrate;
            this._patInterval = value.patInterval;
            this._pcrControl = value.pcrControl;
            this._pcrPeriod = value.pcrPeriod;
            this._pcrPid = value.pcrPid;
            this._pmtInterval = value.pmtInterval;
            this._pmtPid = value.pmtPid;
            this._programNum = value.programNum;
            this._rateMode = value.rateMode;
            this._scte27Pids = value.scte27Pids;
            this._scte35Control = value.scte35Control;
            this._scte35Pid = value.scte35Pid;
            this._segmentationMarkers = value.segmentationMarkers;
            this._segmentationStyle = value.segmentationStyle;
            this._segmentationTime = value.segmentationTime;
            this._timedMetadataBehavior = value.timedMetadataBehavior;
            this._timedMetadataPid = value.timedMetadataPid;
            this._transportStreamId = value.transportStreamId;
            this._videoPid = value.videoPid;
            this._dvbNitSettings.internalValue = value.dvbNitSettings;
            this._dvbSdtSettings.internalValue = value.dvbSdtSettings;
            this._dvbTdtSettings.internalValue = value.dvbTdtSettings;
        }
    }
    get absentInputAudioBehavior() {
        return this.getStringAttribute('absent_input_audio_behavior');
    }
    set absentInputAudioBehavior(value) {
        this._absentInputAudioBehavior = value;
    }
    resetAbsentInputAudioBehavior() {
        this._absentInputAudioBehavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get absentInputAudioBehaviorInput() {
        return this._absentInputAudioBehavior;
    }
    get arib() {
        return this.getStringAttribute('arib');
    }
    set arib(value) {
        this._arib = value;
    }
    resetArib() {
        this._arib = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aribInput() {
        return this._arib;
    }
    get aribCaptionsPid() {
        return this.getStringAttribute('arib_captions_pid');
    }
    set aribCaptionsPid(value) {
        this._aribCaptionsPid = value;
    }
    resetAribCaptionsPid() {
        this._aribCaptionsPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aribCaptionsPidInput() {
        return this._aribCaptionsPid;
    }
    get aribCaptionsPidControl() {
        return this.getStringAttribute('arib_captions_pid_control');
    }
    set aribCaptionsPidControl(value) {
        this._aribCaptionsPidControl = value;
    }
    resetAribCaptionsPidControl() {
        this._aribCaptionsPidControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aribCaptionsPidControlInput() {
        return this._aribCaptionsPidControl;
    }
    get audioBufferModel() {
        return this.getStringAttribute('audio_buffer_model');
    }
    set audioBufferModel(value) {
        this._audioBufferModel = value;
    }
    resetAudioBufferModel() {
        this._audioBufferModel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioBufferModelInput() {
        return this._audioBufferModel;
    }
    get audioFramesPerPes() {
        return this.getNumberAttribute('audio_frames_per_pes');
    }
    set audioFramesPerPes(value) {
        this._audioFramesPerPes = value;
    }
    resetAudioFramesPerPes() {
        this._audioFramesPerPes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioFramesPerPesInput() {
        return this._audioFramesPerPes;
    }
    get audioPids() {
        return this.getStringAttribute('audio_pids');
    }
    set audioPids(value) {
        this._audioPids = value;
    }
    resetAudioPids() {
        this._audioPids = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioPidsInput() {
        return this._audioPids;
    }
    get audioStreamType() {
        return this.getStringAttribute('audio_stream_type');
    }
    set audioStreamType(value) {
        this._audioStreamType = value;
    }
    resetAudioStreamType() {
        this._audioStreamType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioStreamTypeInput() {
        return this._audioStreamType;
    }
    get bitrate() {
        return this.getNumberAttribute('bitrate');
    }
    set bitrate(value) {
        this._bitrate = value;
    }
    resetBitrate() {
        this._bitrate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bitrateInput() {
        return this._bitrate;
    }
    get bufferModel() {
        return this.getStringAttribute('buffer_model');
    }
    set bufferModel(value) {
        this._bufferModel = value;
    }
    resetBufferModel() {
        this._bufferModel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufferModelInput() {
        return this._bufferModel;
    }
    get ccDescriptor() {
        return this.getStringAttribute('cc_descriptor');
    }
    set ccDescriptor(value) {
        this._ccDescriptor = value;
    }
    resetCcDescriptor() {
        this._ccDescriptor = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ccDescriptorInput() {
        return this._ccDescriptor;
    }
    get dvbSubPids() {
        return this.getStringAttribute('dvb_sub_pids');
    }
    set dvbSubPids(value) {
        this._dvbSubPids = value;
    }
    resetDvbSubPids() {
        this._dvbSubPids = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dvbSubPidsInput() {
        return this._dvbSubPids;
    }
    get dvbTeletextPid() {
        return this.getStringAttribute('dvb_teletext_pid');
    }
    set dvbTeletextPid(value) {
        this._dvbTeletextPid = value;
    }
    resetDvbTeletextPid() {
        this._dvbTeletextPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dvbTeletextPidInput() {
        return this._dvbTeletextPid;
    }
    get ebif() {
        return this.getStringAttribute('ebif');
    }
    set ebif(value) {
        this._ebif = value;
    }
    resetEbif() {
        this._ebif = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ebifInput() {
        return this._ebif;
    }
    get ebpAudioInterval() {
        return this.getStringAttribute('ebp_audio_interval');
    }
    set ebpAudioInterval(value) {
        this._ebpAudioInterval = value;
    }
    resetEbpAudioInterval() {
        this._ebpAudioInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ebpAudioIntervalInput() {
        return this._ebpAudioInterval;
    }
    get ebpLookaheadMs() {
        return this.getNumberAttribute('ebp_lookahead_ms');
    }
    set ebpLookaheadMs(value) {
        this._ebpLookaheadMs = value;
    }
    resetEbpLookaheadMs() {
        this._ebpLookaheadMs = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ebpLookaheadMsInput() {
        return this._ebpLookaheadMs;
    }
    get ebpPlacement() {
        return this.getStringAttribute('ebp_placement');
    }
    set ebpPlacement(value) {
        this._ebpPlacement = value;
    }
    resetEbpPlacement() {
        this._ebpPlacement = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ebpPlacementInput() {
        return this._ebpPlacement;
    }
    get ecmPid() {
        return this.getStringAttribute('ecm_pid');
    }
    set ecmPid(value) {
        this._ecmPid = value;
    }
    resetEcmPid() {
        this._ecmPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ecmPidInput() {
        return this._ecmPid;
    }
    get esRateInPes() {
        return this.getStringAttribute('es_rate_in_pes');
    }
    set esRateInPes(value) {
        this._esRateInPes = value;
    }
    resetEsRateInPes() {
        this._esRateInPes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get esRateInPesInput() {
        return this._esRateInPes;
    }
    get etvPlatformPid() {
        return this.getStringAttribute('etv_platform_pid');
    }
    set etvPlatformPid(value) {
        this._etvPlatformPid = value;
    }
    resetEtvPlatformPid() {
        this._etvPlatformPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get etvPlatformPidInput() {
        return this._etvPlatformPid;
    }
    get etvSignalPid() {
        return this.getStringAttribute('etv_signal_pid');
    }
    set etvSignalPid(value) {
        this._etvSignalPid = value;
    }
    resetEtvSignalPid() {
        this._etvSignalPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get etvSignalPidInput() {
        return this._etvSignalPid;
    }
    get fragmentTime() {
        return this.getNumberAttribute('fragment_time');
    }
    set fragmentTime(value) {
        this._fragmentTime = value;
    }
    resetFragmentTime() {
        this._fragmentTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fragmentTimeInput() {
        return this._fragmentTime;
    }
    get klv() {
        return this.getStringAttribute('klv');
    }
    set klv(value) {
        this._klv = value;
    }
    resetKlv() {
        this._klv = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get klvInput() {
        return this._klv;
    }
    get klvDataPids() {
        return this.getStringAttribute('klv_data_pids');
    }
    set klvDataPids(value) {
        this._klvDataPids = value;
    }
    resetKlvDataPids() {
        this._klvDataPids = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get klvDataPidsInput() {
        return this._klvDataPids;
    }
    get nielsenId3Behavior() {
        return this.getStringAttribute('nielsen_id3_behavior');
    }
    set nielsenId3Behavior(value) {
        this._nielsenId3Behavior = value;
    }
    resetNielsenId3Behavior() {
        this._nielsenId3Behavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nielsenId3BehaviorInput() {
        return this._nielsenId3Behavior;
    }
    get nullPacketBitrate() {
        return this.getNumberAttribute('null_packet_bitrate');
    }
    set nullPacketBitrate(value) {
        this._nullPacketBitrate = value;
    }
    resetNullPacketBitrate() {
        this._nullPacketBitrate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nullPacketBitrateInput() {
        return this._nullPacketBitrate;
    }
    get patInterval() {
        return this.getNumberAttribute('pat_interval');
    }
    set patInterval(value) {
        this._patInterval = value;
    }
    resetPatInterval() {
        this._patInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get patIntervalInput() {
        return this._patInterval;
    }
    get pcrControl() {
        return this.getStringAttribute('pcr_control');
    }
    set pcrControl(value) {
        this._pcrControl = value;
    }
    resetPcrControl() {
        this._pcrControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pcrControlInput() {
        return this._pcrControl;
    }
    get pcrPeriod() {
        return this.getNumberAttribute('pcr_period');
    }
    set pcrPeriod(value) {
        this._pcrPeriod = value;
    }
    resetPcrPeriod() {
        this._pcrPeriod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pcrPeriodInput() {
        return this._pcrPeriod;
    }
    get pcrPid() {
        return this.getStringAttribute('pcr_pid');
    }
    set pcrPid(value) {
        this._pcrPid = value;
    }
    resetPcrPid() {
        this._pcrPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pcrPidInput() {
        return this._pcrPid;
    }
    get pmtInterval() {
        return this.getNumberAttribute('pmt_interval');
    }
    set pmtInterval(value) {
        this._pmtInterval = value;
    }
    resetPmtInterval() {
        this._pmtInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pmtIntervalInput() {
        return this._pmtInterval;
    }
    get pmtPid() {
        return this.getStringAttribute('pmt_pid');
    }
    set pmtPid(value) {
        this._pmtPid = value;
    }
    resetPmtPid() {
        this._pmtPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pmtPidInput() {
        return this._pmtPid;
    }
    get programNum() {
        return this.getNumberAttribute('program_num');
    }
    set programNum(value) {
        this._programNum = value;
    }
    resetProgramNum() {
        this._programNum = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get programNumInput() {
        return this._programNum;
    }
    get rateMode() {
        return this.getStringAttribute('rate_mode');
    }
    set rateMode(value) {
        this._rateMode = value;
    }
    resetRateMode() {
        this._rateMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rateModeInput() {
        return this._rateMode;
    }
    get scte27Pids() {
        return this.getStringAttribute('scte27_pids');
    }
    set scte27Pids(value) {
        this._scte27Pids = value;
    }
    resetScte27Pids() {
        this._scte27Pids = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scte27PidsInput() {
        return this._scte27Pids;
    }
    get scte35Control() {
        return this.getStringAttribute('scte35_control');
    }
    set scte35Control(value) {
        this._scte35Control = value;
    }
    resetScte35Control() {
        this._scte35Control = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scte35ControlInput() {
        return this._scte35Control;
    }
    get scte35Pid() {
        return this.getStringAttribute('scte35_pid');
    }
    set scte35Pid(value) {
        this._scte35Pid = value;
    }
    resetScte35Pid() {
        this._scte35Pid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scte35PidInput() {
        return this._scte35Pid;
    }
    get segmentationMarkers() {
        return this.getStringAttribute('segmentation_markers');
    }
    set segmentationMarkers(value) {
        this._segmentationMarkers = value;
    }
    resetSegmentationMarkers() {
        this._segmentationMarkers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get segmentationMarkersInput() {
        return this._segmentationMarkers;
    }
    get segmentationStyle() {
        return this.getStringAttribute('segmentation_style');
    }
    set segmentationStyle(value) {
        this._segmentationStyle = value;
    }
    resetSegmentationStyle() {
        this._segmentationStyle = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get segmentationStyleInput() {
        return this._segmentationStyle;
    }
    get segmentationTime() {
        return this.getNumberAttribute('segmentation_time');
    }
    set segmentationTime(value) {
        this._segmentationTime = value;
    }
    resetSegmentationTime() {
        this._segmentationTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get segmentationTimeInput() {
        return this._segmentationTime;
    }
    get timedMetadataBehavior() {
        return this.getStringAttribute('timed_metadata_behavior');
    }
    set timedMetadataBehavior(value) {
        this._timedMetadataBehavior = value;
    }
    resetTimedMetadataBehavior() {
        this._timedMetadataBehavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timedMetadataBehaviorInput() {
        return this._timedMetadataBehavior;
    }
    get timedMetadataPid() {
        return this.getStringAttribute('timed_metadata_pid');
    }
    set timedMetadataPid(value) {
        this._timedMetadataPid = value;
    }
    resetTimedMetadataPid() {
        this._timedMetadataPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timedMetadataPidInput() {
        return this._timedMetadataPid;
    }
    get transportStreamId() {
        return this.getNumberAttribute('transport_stream_id');
    }
    set transportStreamId(value) {
        this._transportStreamId = value;
    }
    resetTransportStreamId() {
        this._transportStreamId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get transportStreamIdInput() {
        return this._transportStreamId;
    }
    get videoPid() {
        return this.getStringAttribute('video_pid');
    }
    set videoPid(value) {
        this._videoPid = value;
    }
    resetVideoPid() {
        this._videoPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get videoPidInput() {
        return this._videoPid;
    }
    get dvbNitSettings() {
        return this._dvbNitSettings;
    }
    putDvbNitSettings(value) {
        this._dvbNitSettings.internalValue = value;
    }
    resetDvbNitSettings() {
        this._dvbNitSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dvbNitSettingsInput() {
        return this._dvbNitSettings.internalValue;
    }
    get dvbSdtSettings() {
        return this._dvbSdtSettings;
    }
    putDvbSdtSettings(value) {
        this._dvbSdtSettings.internalValue = value;
    }
    resetDvbSdtSettings() {
        this._dvbSdtSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dvbSdtSettingsInput() {
        return this._dvbSdtSettings.internalValue;
    }
    get dvbTdtSettings() {
        return this._dvbTdtSettings;
    }
    putDvbTdtSettings(value) {
        this._dvbTdtSettings.internalValue = value;
    }
    resetDvbTdtSettings() {
        this._dvbTdtSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dvbTdtSettingsInput() {
        return this._dvbTdtSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsOutputReference;
_67 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsOutputReference[_67] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutputReference;
_68 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutputReference[_68] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        m2ts_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsToTerraform(struct.m2TsSettings),
        raw_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsToTerraform(struct.rawSettings),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        m2ts_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsToHclTerraform(struct.m2TsSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsList",
        },
        raw_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsToHclTerraform(struct.rawSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // m2ts_settings - computed: false, optional: true, required: false
        this._m2TsSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsOutputReference(this, "m2ts_settings");
        // raw_settings - computed: false, optional: true, required: false
        this._rawSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutputReference(this, "raw_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._m2TsSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.m2TsSettings = this._m2TsSettings?.internalValue;
        }
        if (this._rawSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.rawSettings = this._rawSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._m2TsSettings.internalValue = undefined;
            this._rawSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._m2TsSettings.internalValue = value.m2TsSettings;
            this._rawSettings.internalValue = value.rawSettings;
        }
    }
    get m2TsSettings() {
        return this._m2TsSettings;
    }
    putM2TsSettings(value) {
        this._m2TsSettings.internalValue = value;
    }
    resetM2TsSettings() {
        this._m2TsSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get m2TsSettingsInput() {
        return this._m2TsSettings.internalValue;
    }
    get rawSettings() {
        return this._rawSettings;
    }
    putRawSettings(value) {
        this._rawSettings.internalValue = value;
    }
    resetRawSettings() {
        this._rawSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rawSettingsInput() {
        return this._rawSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsOutputReference;
_69 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsOutputReference[_69] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        extension: cdktf.stringToTerraform(struct.extension),
        name_modifier: cdktf.stringToTerraform(struct.nameModifier),
        container_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsToTerraform(struct.containerSettings),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        extension: {
            value: cdktf.stringToHclTerraform(struct.extension),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        name_modifier: {
            value: cdktf.stringToHclTerraform(struct.nameModifier),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        container_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsToHclTerraform(struct.containerSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // container_settings - computed: false, optional: true, required: false
        this._containerSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsOutputReference(this, "container_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._extension !== undefined) {
            hasAnyValues = true;
            internalValueResult.extension = this._extension;
        }
        if (this._nameModifier !== undefined) {
            hasAnyValues = true;
            internalValueResult.nameModifier = this._nameModifier;
        }
        if (this._containerSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.containerSettings = this._containerSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._extension = undefined;
            this._nameModifier = undefined;
            this._containerSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._extension = value.extension;
            this._nameModifier = value.nameModifier;
            this._containerSettings.internalValue = value.containerSettings;
        }
    }
    get extension() {
        return this.getStringAttribute('extension');
    }
    set extension(value) {
        this._extension = value;
    }
    resetExtension() {
        this._extension = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get extensionInput() {
        return this._extension;
    }
    get nameModifier() {
        return this.getStringAttribute('name_modifier');
    }
    set nameModifier(value) {
        this._nameModifier = value;
    }
    resetNameModifier() {
        this._nameModifier = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameModifierInput() {
        return this._nameModifier;
    }
    get containerSettings() {
        return this._containerSettings;
    }
    putContainerSettings(value) {
        this._containerSettings.internalValue = value;
    }
    resetContainerSettings() {
        this._containerSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get containerSettingsInput() {
        return this._containerSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsOutputReference;
_70 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsOutputReference[_70] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name_modifier: cdktf.stringToTerraform(struct.nameModifier),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name_modifier: {
            value: cdktf.stringToHclTerraform(struct.nameModifier),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nameModifier !== undefined) {
            hasAnyValues = true;
            internalValueResult.nameModifier = this._nameModifier;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nameModifier = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nameModifier = value.nameModifier;
        }
    }
    get nameModifier() {
        return this.getStringAttribute('name_modifier');
    }
    set nameModifier(value) {
        this._nameModifier = value;
    }
    resetNameModifier() {
        this._nameModifier = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameModifierInput() {
        return this._nameModifier;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsOutputReference;
_71 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsOutputReference[_71] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        password_param: cdktf.stringToTerraform(struct.passwordParam),
        uri: cdktf.stringToTerraform(struct.uri),
        username: cdktf.stringToTerraform(struct.username),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        password_param: {
            value: cdktf.stringToHclTerraform(struct.passwordParam),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        uri: {
            value: cdktf.stringToHclTerraform(struct.uri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        username: {
            value: cdktf.stringToHclTerraform(struct.username),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._passwordParam !== undefined) {
            hasAnyValues = true;
            internalValueResult.passwordParam = this._passwordParam;
        }
        if (this._uri !== undefined) {
            hasAnyValues = true;
            internalValueResult.uri = this._uri;
        }
        if (this._username !== undefined) {
            hasAnyValues = true;
            internalValueResult.username = this._username;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._passwordParam = undefined;
            this._uri = undefined;
            this._username = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._passwordParam = value.passwordParam;
            this._uri = value.uri;
            this._username = value.username;
        }
    }
    get passwordParam() {
        return this.getStringAttribute('password_param');
    }
    set passwordParam(value) {
        this._passwordParam = value;
    }
    resetPasswordParam() {
        this._passwordParam = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passwordParamInput() {
        return this._passwordParam;
    }
    get uri() {
        return this.getStringAttribute('uri');
    }
    set uri(value) {
        this._uri = value;
    }
    // Temporarily expose input value. Use with caution.
    get uriInput() {
        return this._uri;
    }
    get username() {
        return this.getStringAttribute('username');
    }
    set username(value) {
        this._username = value;
    }
    resetUsername() {
        this._username = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get usernameInput() {
        return this._username;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutputReference;
_72 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutputReference[_72] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        audio_group_id: cdktf.stringToTerraform(struct.audioGroupId),
        audio_track_type: cdktf.stringToTerraform(struct.audioTrackType),
        segment_type: cdktf.stringToTerraform(struct.segmentType),
        audio_only_image: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageToTerraform(struct.audioOnlyImage),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        audio_group_id: {
            value: cdktf.stringToHclTerraform(struct.audioGroupId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        audio_track_type: {
            value: cdktf.stringToHclTerraform(struct.audioTrackType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        segment_type: {
            value: cdktf.stringToHclTerraform(struct.segmentType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        audio_only_image: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageToHclTerraform(struct.audioOnlyImage),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // audio_only_image - computed: false, optional: true, required: false
        this._audioOnlyImage = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutputReference(this, "audio_only_image");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._audioGroupId !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioGroupId = this._audioGroupId;
        }
        if (this._audioTrackType !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioTrackType = this._audioTrackType;
        }
        if (this._segmentType !== undefined) {
            hasAnyValues = true;
            internalValueResult.segmentType = this._segmentType;
        }
        if (this._audioOnlyImage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioOnlyImage = this._audioOnlyImage?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._audioGroupId = undefined;
            this._audioTrackType = undefined;
            this._segmentType = undefined;
            this._audioOnlyImage.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._audioGroupId = value.audioGroupId;
            this._audioTrackType = value.audioTrackType;
            this._segmentType = value.segmentType;
            this._audioOnlyImage.internalValue = value.audioOnlyImage;
        }
    }
    get audioGroupId() {
        return this.getStringAttribute('audio_group_id');
    }
    set audioGroupId(value) {
        this._audioGroupId = value;
    }
    resetAudioGroupId() {
        this._audioGroupId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioGroupIdInput() {
        return this._audioGroupId;
    }
    get audioTrackType() {
        return this.getStringAttribute('audio_track_type');
    }
    set audioTrackType(value) {
        this._audioTrackType = value;
    }
    resetAudioTrackType() {
        this._audioTrackType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioTrackTypeInput() {
        return this._audioTrackType;
    }
    get segmentType() {
        return this.getStringAttribute('segment_type');
    }
    set segmentType(value) {
        this._segmentType = value;
    }
    resetSegmentType() {
        this._segmentType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get segmentTypeInput() {
        return this._segmentType;
    }
    get audioOnlyImage() {
        return this._audioOnlyImage;
    }
    putAudioOnlyImage(value) {
        this._audioOnlyImage.internalValue = value;
    }
    resetAudioOnlyImage() {
        this._audioOnlyImage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioOnlyImageInput() {
        return this._audioOnlyImage.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutputReference;
_73 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutputReference[_73] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        audio_rendition_sets: cdktf.stringToTerraform(struct.audioRenditionSets),
        nielsen_id3_behavior: cdktf.stringToTerraform(struct.nielsenId3Behavior),
        timed_metadata_behavior: cdktf.stringToTerraform(struct.timedMetadataBehavior),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        audio_rendition_sets: {
            value: cdktf.stringToHclTerraform(struct.audioRenditionSets),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        nielsen_id3_behavior: {
            value: cdktf.stringToHclTerraform(struct.nielsenId3Behavior),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        timed_metadata_behavior: {
            value: cdktf.stringToHclTerraform(struct.timedMetadataBehavior),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._audioRenditionSets !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioRenditionSets = this._audioRenditionSets;
        }
        if (this._nielsenId3Behavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.nielsenId3Behavior = this._nielsenId3Behavior;
        }
        if (this._timedMetadataBehavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.timedMetadataBehavior = this._timedMetadataBehavior;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._audioRenditionSets = undefined;
            this._nielsenId3Behavior = undefined;
            this._timedMetadataBehavior = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._audioRenditionSets = value.audioRenditionSets;
            this._nielsenId3Behavior = value.nielsenId3Behavior;
            this._timedMetadataBehavior = value.timedMetadataBehavior;
        }
    }
    get audioRenditionSets() {
        return this.getStringAttribute('audio_rendition_sets');
    }
    set audioRenditionSets(value) {
        this._audioRenditionSets = value;
    }
    resetAudioRenditionSets() {
        this._audioRenditionSets = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioRenditionSetsInput() {
        return this._audioRenditionSets;
    }
    get nielsenId3Behavior() {
        return this.getStringAttribute('nielsen_id3_behavior');
    }
    set nielsenId3Behavior(value) {
        this._nielsenId3Behavior = value;
    }
    resetNielsenId3Behavior() {
        this._nielsenId3Behavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nielsenId3BehaviorInput() {
        return this._nielsenId3Behavior;
    }
    get timedMetadataBehavior() {
        return this.getStringAttribute('timed_metadata_behavior');
    }
    set timedMetadataBehavior(value) {
        this._timedMetadataBehavior = value;
    }
    resetTimedMetadataBehavior() {
        this._timedMetadataBehavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timedMetadataBehaviorInput() {
        return this._timedMetadataBehavior;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutputReference;
_74 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutputReference[_74] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutputReference;
_75 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutputReference[_75] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        audio_frames_per_pes: cdktf.numberToTerraform(struct.audioFramesPerPes),
        audio_pids: cdktf.stringToTerraform(struct.audioPids),
        ecm_pid: cdktf.stringToTerraform(struct.ecmPid),
        nielsen_id3_behavior: cdktf.stringToTerraform(struct.nielsenId3Behavior),
        pat_interval: cdktf.numberToTerraform(struct.patInterval),
        pcr_control: cdktf.stringToTerraform(struct.pcrControl),
        pcr_period: cdktf.numberToTerraform(struct.pcrPeriod),
        pcr_pid: cdktf.stringToTerraform(struct.pcrPid),
        pmt_interval: cdktf.numberToTerraform(struct.pmtInterval),
        pmt_pid: cdktf.stringToTerraform(struct.pmtPid),
        program_num: cdktf.numberToTerraform(struct.programNum),
        scte35_behavior: cdktf.stringToTerraform(struct.scte35Behavior),
        scte35_pid: cdktf.stringToTerraform(struct.scte35Pid),
        timed_metadata_behavior: cdktf.stringToTerraform(struct.timedMetadataBehavior),
        timed_metadata_pid: cdktf.stringToTerraform(struct.timedMetadataPid),
        transport_stream_id: cdktf.numberToTerraform(struct.transportStreamId),
        video_pid: cdktf.stringToTerraform(struct.videoPid),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        audio_frames_per_pes: {
            value: cdktf.numberToHclTerraform(struct.audioFramesPerPes),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        audio_pids: {
            value: cdktf.stringToHclTerraform(struct.audioPids),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ecm_pid: {
            value: cdktf.stringToHclTerraform(struct.ecmPid),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        nielsen_id3_behavior: {
            value: cdktf.stringToHclTerraform(struct.nielsenId3Behavior),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        pat_interval: {
            value: cdktf.numberToHclTerraform(struct.patInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        pcr_control: {
            value: cdktf.stringToHclTerraform(struct.pcrControl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        pcr_period: {
            value: cdktf.numberToHclTerraform(struct.pcrPeriod),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        pcr_pid: {
            value: cdktf.stringToHclTerraform(struct.pcrPid),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        pmt_interval: {
            value: cdktf.numberToHclTerraform(struct.pmtInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        pmt_pid: {
            value: cdktf.stringToHclTerraform(struct.pmtPid),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        program_num: {
            value: cdktf.numberToHclTerraform(struct.programNum),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        scte35_behavior: {
            value: cdktf.stringToHclTerraform(struct.scte35Behavior),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        scte35_pid: {
            value: cdktf.stringToHclTerraform(struct.scte35Pid),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        timed_metadata_behavior: {
            value: cdktf.stringToHclTerraform(struct.timedMetadataBehavior),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        timed_metadata_pid: {
            value: cdktf.stringToHclTerraform(struct.timedMetadataPid),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        transport_stream_id: {
            value: cdktf.numberToHclTerraform(struct.transportStreamId),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        video_pid: {
            value: cdktf.stringToHclTerraform(struct.videoPid),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._audioFramesPerPes !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioFramesPerPes = this._audioFramesPerPes;
        }
        if (this._audioPids !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioPids = this._audioPids;
        }
        if (this._ecmPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.ecmPid = this._ecmPid;
        }
        if (this._nielsenId3Behavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.nielsenId3Behavior = this._nielsenId3Behavior;
        }
        if (this._patInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.patInterval = this._patInterval;
        }
        if (this._pcrControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.pcrControl = this._pcrControl;
        }
        if (this._pcrPeriod !== undefined) {
            hasAnyValues = true;
            internalValueResult.pcrPeriod = this._pcrPeriod;
        }
        if (this._pcrPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.pcrPid = this._pcrPid;
        }
        if (this._pmtInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.pmtInterval = this._pmtInterval;
        }
        if (this._pmtPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.pmtPid = this._pmtPid;
        }
        if (this._programNum !== undefined) {
            hasAnyValues = true;
            internalValueResult.programNum = this._programNum;
        }
        if (this._scte35Behavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.scte35Behavior = this._scte35Behavior;
        }
        if (this._scte35Pid !== undefined) {
            hasAnyValues = true;
            internalValueResult.scte35Pid = this._scte35Pid;
        }
        if (this._timedMetadataBehavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.timedMetadataBehavior = this._timedMetadataBehavior;
        }
        if (this._timedMetadataPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.timedMetadataPid = this._timedMetadataPid;
        }
        if (this._transportStreamId !== undefined) {
            hasAnyValues = true;
            internalValueResult.transportStreamId = this._transportStreamId;
        }
        if (this._videoPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.videoPid = this._videoPid;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._audioFramesPerPes = undefined;
            this._audioPids = undefined;
            this._ecmPid = undefined;
            this._nielsenId3Behavior = undefined;
            this._patInterval = undefined;
            this._pcrControl = undefined;
            this._pcrPeriod = undefined;
            this._pcrPid = undefined;
            this._pmtInterval = undefined;
            this._pmtPid = undefined;
            this._programNum = undefined;
            this._scte35Behavior = undefined;
            this._scte35Pid = undefined;
            this._timedMetadataBehavior = undefined;
            this._timedMetadataPid = undefined;
            this._transportStreamId = undefined;
            this._videoPid = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._audioFramesPerPes = value.audioFramesPerPes;
            this._audioPids = value.audioPids;
            this._ecmPid = value.ecmPid;
            this._nielsenId3Behavior = value.nielsenId3Behavior;
            this._patInterval = value.patInterval;
            this._pcrControl = value.pcrControl;
            this._pcrPeriod = value.pcrPeriod;
            this._pcrPid = value.pcrPid;
            this._pmtInterval = value.pmtInterval;
            this._pmtPid = value.pmtPid;
            this._programNum = value.programNum;
            this._scte35Behavior = value.scte35Behavior;
            this._scte35Pid = value.scte35Pid;
            this._timedMetadataBehavior = value.timedMetadataBehavior;
            this._timedMetadataPid = value.timedMetadataPid;
            this._transportStreamId = value.transportStreamId;
            this._videoPid = value.videoPid;
        }
    }
    get audioFramesPerPes() {
        return this.getNumberAttribute('audio_frames_per_pes');
    }
    set audioFramesPerPes(value) {
        this._audioFramesPerPes = value;
    }
    resetAudioFramesPerPes() {
        this._audioFramesPerPes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioFramesPerPesInput() {
        return this._audioFramesPerPes;
    }
    get audioPids() {
        return this.getStringAttribute('audio_pids');
    }
    set audioPids(value) {
        this._audioPids = value;
    }
    resetAudioPids() {
        this._audioPids = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioPidsInput() {
        return this._audioPids;
    }
    get ecmPid() {
        return this.getStringAttribute('ecm_pid');
    }
    set ecmPid(value) {
        this._ecmPid = value;
    }
    resetEcmPid() {
        this._ecmPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ecmPidInput() {
        return this._ecmPid;
    }
    get nielsenId3Behavior() {
        return this.getStringAttribute('nielsen_id3_behavior');
    }
    set nielsenId3Behavior(value) {
        this._nielsenId3Behavior = value;
    }
    resetNielsenId3Behavior() {
        this._nielsenId3Behavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nielsenId3BehaviorInput() {
        return this._nielsenId3Behavior;
    }
    get patInterval() {
        return this.getNumberAttribute('pat_interval');
    }
    set patInterval(value) {
        this._patInterval = value;
    }
    resetPatInterval() {
        this._patInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get patIntervalInput() {
        return this._patInterval;
    }
    get pcrControl() {
        return this.getStringAttribute('pcr_control');
    }
    set pcrControl(value) {
        this._pcrControl = value;
    }
    resetPcrControl() {
        this._pcrControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pcrControlInput() {
        return this._pcrControl;
    }
    get pcrPeriod() {
        return this.getNumberAttribute('pcr_period');
    }
    set pcrPeriod(value) {
        this._pcrPeriod = value;
    }
    resetPcrPeriod() {
        this._pcrPeriod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pcrPeriodInput() {
        return this._pcrPeriod;
    }
    get pcrPid() {
        return this.getStringAttribute('pcr_pid');
    }
    set pcrPid(value) {
        this._pcrPid = value;
    }
    resetPcrPid() {
        this._pcrPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pcrPidInput() {
        return this._pcrPid;
    }
    get pmtInterval() {
        return this.getNumberAttribute('pmt_interval');
    }
    set pmtInterval(value) {
        this._pmtInterval = value;
    }
    resetPmtInterval() {
        this._pmtInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pmtIntervalInput() {
        return this._pmtInterval;
    }
    get pmtPid() {
        return this.getStringAttribute('pmt_pid');
    }
    set pmtPid(value) {
        this._pmtPid = value;
    }
    resetPmtPid() {
        this._pmtPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pmtPidInput() {
        return this._pmtPid;
    }
    get programNum() {
        return this.getNumberAttribute('program_num');
    }
    set programNum(value) {
        this._programNum = value;
    }
    resetProgramNum() {
        this._programNum = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get programNumInput() {
        return this._programNum;
    }
    get scte35Behavior() {
        return this.getStringAttribute('scte35_behavior');
    }
    set scte35Behavior(value) {
        this._scte35Behavior = value;
    }
    resetScte35Behavior() {
        this._scte35Behavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scte35BehaviorInput() {
        return this._scte35Behavior;
    }
    get scte35Pid() {
        return this.getStringAttribute('scte35_pid');
    }
    set scte35Pid(value) {
        this._scte35Pid = value;
    }
    resetScte35Pid() {
        this._scte35Pid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scte35PidInput() {
        return this._scte35Pid;
    }
    get timedMetadataBehavior() {
        return this.getStringAttribute('timed_metadata_behavior');
    }
    set timedMetadataBehavior(value) {
        this._timedMetadataBehavior = value;
    }
    resetTimedMetadataBehavior() {
        this._timedMetadataBehavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timedMetadataBehaviorInput() {
        return this._timedMetadataBehavior;
    }
    get timedMetadataPid() {
        return this.getStringAttribute('timed_metadata_pid');
    }
    set timedMetadataPid(value) {
        this._timedMetadataPid = value;
    }
    resetTimedMetadataPid() {
        this._timedMetadataPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timedMetadataPidInput() {
        return this._timedMetadataPid;
    }
    get transportStreamId() {
        return this.getNumberAttribute('transport_stream_id');
    }
    set transportStreamId(value) {
        this._transportStreamId = value;
    }
    resetTransportStreamId() {
        this._transportStreamId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get transportStreamIdInput() {
        return this._transportStreamId;
    }
    get videoPid() {
        return this.getStringAttribute('video_pid');
    }
    set videoPid(value) {
        this._videoPid = value;
    }
    resetVideoPid() {
        this._videoPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get videoPidInput() {
        return this._videoPid;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsOutputReference;
_76 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsOutputReference[_76] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        audio_rendition_sets: cdktf.stringToTerraform(struct.audioRenditionSets),
        m3u8_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsToTerraform(struct.m3U8Settings),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        audio_rendition_sets: {
            value: cdktf.stringToHclTerraform(struct.audioRenditionSets),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        m3u8_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsToHclTerraform(struct.m3U8Settings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // m3u8_settings - computed: false, optional: false, required: true
        this._m3U8Settings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsOutputReference(this, "m3u8_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._audioRenditionSets !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioRenditionSets = this._audioRenditionSets;
        }
        if (this._m3U8Settings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.m3U8Settings = this._m3U8Settings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._audioRenditionSets = undefined;
            this._m3U8Settings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._audioRenditionSets = value.audioRenditionSets;
            this._m3U8Settings.internalValue = value.m3U8Settings;
        }
    }
    get audioRenditionSets() {
        return this.getStringAttribute('audio_rendition_sets');
    }
    set audioRenditionSets(value) {
        this._audioRenditionSets = value;
    }
    resetAudioRenditionSets() {
        this._audioRenditionSets = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioRenditionSetsInput() {
        return this._audioRenditionSets;
    }
    get m3U8Settings() {
        return this._m3U8Settings;
    }
    putM3U8Settings(value) {
        this._m3U8Settings.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get m3U8SettingsInput() {
        return this._m3U8Settings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutputReference;
_77 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutputReference[_77] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        audio_only_hls_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsToTerraform(struct.audioOnlyHlsSettings),
        fmp4_hls_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsToTerraform(struct.fmp4HlsSettings),
        frame_capture_hls_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsToTerraform(struct.frameCaptureHlsSettings),
        standard_hls_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsToTerraform(struct.standardHlsSettings),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        audio_only_hls_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsToHclTerraform(struct.audioOnlyHlsSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsList",
        },
        fmp4_hls_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsToHclTerraform(struct.fmp4HlsSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsList",
        },
        frame_capture_hls_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsToHclTerraform(struct.frameCaptureHlsSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsList",
        },
        standard_hls_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsToHclTerraform(struct.standardHlsSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // audio_only_hls_settings - computed: false, optional: true, required: false
        this._audioOnlyHlsSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutputReference(this, "audio_only_hls_settings");
        // fmp4_hls_settings - computed: false, optional: true, required: false
        this._fmp4HlsSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutputReference(this, "fmp4_hls_settings");
        // frame_capture_hls_settings - computed: false, optional: true, required: false
        this._frameCaptureHlsSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutputReference(this, "frame_capture_hls_settings");
        // standard_hls_settings - computed: false, optional: true, required: false
        this._standardHlsSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutputReference(this, "standard_hls_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._audioOnlyHlsSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioOnlyHlsSettings = this._audioOnlyHlsSettings?.internalValue;
        }
        if (this._fmp4HlsSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.fmp4HlsSettings = this._fmp4HlsSettings?.internalValue;
        }
        if (this._frameCaptureHlsSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.frameCaptureHlsSettings = this._frameCaptureHlsSettings?.internalValue;
        }
        if (this._standardHlsSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.standardHlsSettings = this._standardHlsSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._audioOnlyHlsSettings.internalValue = undefined;
            this._fmp4HlsSettings.internalValue = undefined;
            this._frameCaptureHlsSettings.internalValue = undefined;
            this._standardHlsSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._audioOnlyHlsSettings.internalValue = value.audioOnlyHlsSettings;
            this._fmp4HlsSettings.internalValue = value.fmp4HlsSettings;
            this._frameCaptureHlsSettings.internalValue = value.frameCaptureHlsSettings;
            this._standardHlsSettings.internalValue = value.standardHlsSettings;
        }
    }
    get audioOnlyHlsSettings() {
        return this._audioOnlyHlsSettings;
    }
    putAudioOnlyHlsSettings(value) {
        this._audioOnlyHlsSettings.internalValue = value;
    }
    resetAudioOnlyHlsSettings() {
        this._audioOnlyHlsSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioOnlyHlsSettingsInput() {
        return this._audioOnlyHlsSettings.internalValue;
    }
    get fmp4HlsSettings() {
        return this._fmp4HlsSettings;
    }
    putFmp4HlsSettings(value) {
        this._fmp4HlsSettings.internalValue = value;
    }
    resetFmp4HlsSettings() {
        this._fmp4HlsSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fmp4HlsSettingsInput() {
        return this._fmp4HlsSettings.internalValue;
    }
    get frameCaptureHlsSettings() {
        return this._frameCaptureHlsSettings;
    }
    putFrameCaptureHlsSettings(value) {
        this._frameCaptureHlsSettings.internalValue = value;
    }
    resetFrameCaptureHlsSettings() {
        this._frameCaptureHlsSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get frameCaptureHlsSettingsInput() {
        return this._frameCaptureHlsSettings.internalValue;
    }
    get standardHlsSettings() {
        return this._standardHlsSettings;
    }
    putStandardHlsSettings(value) {
        this._standardHlsSettings.internalValue = value;
    }
    resetStandardHlsSettings() {
        this._standardHlsSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get standardHlsSettingsInput() {
        return this._standardHlsSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsOutputReference;
_78 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsOutputReference[_78] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        h265_packaging_type: cdktf.stringToTerraform(struct.h265PackagingType),
        name_modifier: cdktf.stringToTerraform(struct.nameModifier),
        segment_modifier: cdktf.stringToTerraform(struct.segmentModifier),
        hls_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsToTerraform(struct.hlsSettings),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        h265_packaging_type: {
            value: cdktf.stringToHclTerraform(struct.h265PackagingType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        name_modifier: {
            value: cdktf.stringToHclTerraform(struct.nameModifier),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        segment_modifier: {
            value: cdktf.stringToHclTerraform(struct.segmentModifier),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        hls_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsToHclTerraform(struct.hlsSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // hls_settings - computed: false, optional: false, required: true
        this._hlsSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsOutputReference(this, "hls_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._h265PackagingType !== undefined) {
            hasAnyValues = true;
            internalValueResult.h265PackagingType = this._h265PackagingType;
        }
        if (this._nameModifier !== undefined) {
            hasAnyValues = true;
            internalValueResult.nameModifier = this._nameModifier;
        }
        if (this._segmentModifier !== undefined) {
            hasAnyValues = true;
            internalValueResult.segmentModifier = this._segmentModifier;
        }
        if (this._hlsSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.hlsSettings = this._hlsSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._h265PackagingType = undefined;
            this._nameModifier = undefined;
            this._segmentModifier = undefined;
            this._hlsSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._h265PackagingType = value.h265PackagingType;
            this._nameModifier = value.nameModifier;
            this._segmentModifier = value.segmentModifier;
            this._hlsSettings.internalValue = value.hlsSettings;
        }
    }
    get h265PackagingType() {
        return this.getStringAttribute('h265_packaging_type');
    }
    set h265PackagingType(value) {
        this._h265PackagingType = value;
    }
    resetH265PackagingType() {
        this._h265PackagingType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get h265PackagingTypeInput() {
        return this._h265PackagingType;
    }
    get nameModifier() {
        return this.getStringAttribute('name_modifier');
    }
    set nameModifier(value) {
        this._nameModifier = value;
    }
    resetNameModifier() {
        this._nameModifier = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameModifierInput() {
        return this._nameModifier;
    }
    get segmentModifier() {
        return this.getStringAttribute('segment_modifier');
    }
    set segmentModifier(value) {
        this._segmentModifier = value;
    }
    resetSegmentModifier() {
        this._segmentModifier = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get segmentModifierInput() {
        return this._segmentModifier;
    }
    get hlsSettings() {
        return this._hlsSettings;
    }
    putHlsSettings(value) {
        this._hlsSettings.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get hlsSettingsInput() {
        return this._hlsSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsOutputReference;
_79 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsOutputReference[_79] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsOutputReference;
_80 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsOutputReference[_80] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        h265_packaging_type: cdktf.stringToTerraform(struct.h265PackagingType),
        name_modifier: cdktf.stringToTerraform(struct.nameModifier),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        h265_packaging_type: {
            value: cdktf.stringToHclTerraform(struct.h265PackagingType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        name_modifier: {
            value: cdktf.stringToHclTerraform(struct.nameModifier),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._h265PackagingType !== undefined) {
            hasAnyValues = true;
            internalValueResult.h265PackagingType = this._h265PackagingType;
        }
        if (this._nameModifier !== undefined) {
            hasAnyValues = true;
            internalValueResult.nameModifier = this._nameModifier;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._h265PackagingType = undefined;
            this._nameModifier = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._h265PackagingType = value.h265PackagingType;
            this._nameModifier = value.nameModifier;
        }
    }
    get h265PackagingType() {
        return this.getStringAttribute('h265_packaging_type');
    }
    set h265PackagingType(value) {
        this._h265PackagingType = value;
    }
    resetH265PackagingType() {
        this._h265PackagingType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get h265PackagingTypeInput() {
        return this._h265PackagingType;
    }
    get nameModifier() {
        return this.getStringAttribute('name_modifier');
    }
    set nameModifier(value) {
        this._nameModifier = value;
    }
    resetNameModifier() {
        this._nameModifier = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameModifierInput() {
        return this._nameModifier;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsOutputReference;
_81 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsOutputReference[_81] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        destination_ref_id: cdktf.stringToTerraform(struct.destinationRefId),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        destination_ref_id: {
            value: cdktf.stringToHclTerraform(struct.destinationRefId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._destinationRefId !== undefined) {
            hasAnyValues = true;
            internalValueResult.destinationRefId = this._destinationRefId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._destinationRefId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._destinationRefId = value.destinationRefId;
        }
    }
    get destinationRefId() {
        return this.getStringAttribute('destination_ref_id');
    }
    set destinationRefId(value) {
        this._destinationRefId = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationRefIdInput() {
        return this._destinationRefId;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationOutputReference;
_82 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationOutputReference[_82] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        destination: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationToTerraform(struct.destination),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        destination: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationToHclTerraform(struct.destination),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // destination - computed: false, optional: false, required: true
        this._destination = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationOutputReference(this, "destination");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._destination?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.destination = this._destination?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._destination.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._destination.internalValue = value.destination;
        }
    }
    get destination() {
        return this._destination;
    }
    putDestination(value) {
        this._destination.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationInput() {
        return this._destination.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsOutputReference;
_83 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsOutputReference[_83] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        destination_ref_id: cdktf.stringToTerraform(struct.destinationRefId),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        destination_ref_id: {
            value: cdktf.stringToHclTerraform(struct.destinationRefId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._destinationRefId !== undefined) {
            hasAnyValues = true;
            internalValueResult.destinationRefId = this._destinationRefId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._destinationRefId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._destinationRefId = value.destinationRefId;
        }
    }
    get destinationRefId() {
        return this.getStringAttribute('destination_ref_id');
    }
    set destinationRefId(value) {
        this._destinationRefId = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationRefIdInput() {
        return this._destinationRefId;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationOutputReference;
_84 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationOutputReference[_84] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        certificate_mode: cdktf.stringToTerraform(struct.certificateMode),
        connection_retry_interval: cdktf.numberToTerraform(struct.connectionRetryInterval),
        num_retries: cdktf.numberToTerraform(struct.numRetries),
        destination: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationToTerraform(struct.destination),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        certificate_mode: {
            value: cdktf.stringToHclTerraform(struct.certificateMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        connection_retry_interval: {
            value: cdktf.numberToHclTerraform(struct.connectionRetryInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        num_retries: {
            value: cdktf.numberToHclTerraform(struct.numRetries),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        destination: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationToHclTerraform(struct.destination),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // destination - computed: false, optional: false, required: true
        this._destination = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationOutputReference(this, "destination");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._certificateMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.certificateMode = this._certificateMode;
        }
        if (this._connectionRetryInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectionRetryInterval = this._connectionRetryInterval;
        }
        if (this._numRetries !== undefined) {
            hasAnyValues = true;
            internalValueResult.numRetries = this._numRetries;
        }
        if (this._destination?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.destination = this._destination?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._certificateMode = undefined;
            this._connectionRetryInterval = undefined;
            this._numRetries = undefined;
            this._destination.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._certificateMode = value.certificateMode;
            this._connectionRetryInterval = value.connectionRetryInterval;
            this._numRetries = value.numRetries;
            this._destination.internalValue = value.destination;
        }
    }
    get certificateMode() {
        return this.getStringAttribute('certificate_mode');
    }
    set certificateMode(value) {
        this._certificateMode = value;
    }
    resetCertificateMode() {
        this._certificateMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get certificateModeInput() {
        return this._certificateMode;
    }
    get connectionRetryInterval() {
        return this.getNumberAttribute('connection_retry_interval');
    }
    set connectionRetryInterval(value) {
        this._connectionRetryInterval = value;
    }
    resetConnectionRetryInterval() {
        this._connectionRetryInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionRetryIntervalInput() {
        return this._connectionRetryInterval;
    }
    get numRetries() {
        return this.getNumberAttribute('num_retries');
    }
    set numRetries(value) {
        this._numRetries = value;
    }
    resetNumRetries() {
        this._numRetries = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numRetriesInput() {
        return this._numRetries;
    }
    get destination() {
        return this._destination;
    }
    putDestination(value) {
        this._destination.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationInput() {
        return this._destination.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsOutputReference;
_85 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsOutputReference[_85] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        network_id: cdktf.numberToTerraform(struct.networkId),
        network_name: cdktf.stringToTerraform(struct.networkName),
        rep_interval: cdktf.numberToTerraform(struct.repInterval),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        network_id: {
            value: cdktf.numberToHclTerraform(struct.networkId),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        network_name: {
            value: cdktf.stringToHclTerraform(struct.networkName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        rep_interval: {
            value: cdktf.numberToHclTerraform(struct.repInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._networkId !== undefined) {
            hasAnyValues = true;
            internalValueResult.networkId = this._networkId;
        }
        if (this._networkName !== undefined) {
            hasAnyValues = true;
            internalValueResult.networkName = this._networkName;
        }
        if (this._repInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.repInterval = this._repInterval;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._networkId = undefined;
            this._networkName = undefined;
            this._repInterval = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._networkId = value.networkId;
            this._networkName = value.networkName;
            this._repInterval = value.repInterval;
        }
    }
    get networkId() {
        return this.getNumberAttribute('network_id');
    }
    set networkId(value) {
        this._networkId = value;
    }
    // Temporarily expose input value. Use with caution.
    get networkIdInput() {
        return this._networkId;
    }
    get networkName() {
        return this.getStringAttribute('network_name');
    }
    set networkName(value) {
        this._networkName = value;
    }
    // Temporarily expose input value. Use with caution.
    get networkNameInput() {
        return this._networkName;
    }
    get repInterval() {
        return this.getNumberAttribute('rep_interval');
    }
    set repInterval(value) {
        this._repInterval = value;
    }
    resetRepInterval() {
        this._repInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get repIntervalInput() {
        return this._repInterval;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference;
_86 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference[_86] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        output_sdt: cdktf.stringToTerraform(struct.outputSdt),
        rep_interval: cdktf.numberToTerraform(struct.repInterval),
        service_name: cdktf.stringToTerraform(struct.serviceName),
        service_provider_name: cdktf.stringToTerraform(struct.serviceProviderName),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        output_sdt: {
            value: cdktf.stringToHclTerraform(struct.outputSdt),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        rep_interval: {
            value: cdktf.numberToHclTerraform(struct.repInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        service_name: {
            value: cdktf.stringToHclTerraform(struct.serviceName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        service_provider_name: {
            value: cdktf.stringToHclTerraform(struct.serviceProviderName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._outputSdt !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputSdt = this._outputSdt;
        }
        if (this._repInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.repInterval = this._repInterval;
        }
        if (this._serviceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceName = this._serviceName;
        }
        if (this._serviceProviderName !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceProviderName = this._serviceProviderName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._outputSdt = undefined;
            this._repInterval = undefined;
            this._serviceName = undefined;
            this._serviceProviderName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._outputSdt = value.outputSdt;
            this._repInterval = value.repInterval;
            this._serviceName = value.serviceName;
            this._serviceProviderName = value.serviceProviderName;
        }
    }
    get outputSdt() {
        return this.getStringAttribute('output_sdt');
    }
    set outputSdt(value) {
        this._outputSdt = value;
    }
    resetOutputSdt() {
        this._outputSdt = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get outputSdtInput() {
        return this._outputSdt;
    }
    get repInterval() {
        return this.getNumberAttribute('rep_interval');
    }
    set repInterval(value) {
        this._repInterval = value;
    }
    resetRepInterval() {
        this._repInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get repIntervalInput() {
        return this._repInterval;
    }
    get serviceName() {
        return this.getStringAttribute('service_name');
    }
    set serviceName(value) {
        this._serviceName = value;
    }
    resetServiceName() {
        this._serviceName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceNameInput() {
        return this._serviceName;
    }
    get serviceProviderName() {
        return this.getStringAttribute('service_provider_name');
    }
    set serviceProviderName(value) {
        this._serviceProviderName = value;
    }
    resetServiceProviderName() {
        this._serviceProviderName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceProviderNameInput() {
        return this._serviceProviderName;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference;
_87 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference[_87] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        rep_interval: cdktf.numberToTerraform(struct.repInterval),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        rep_interval: {
            value: cdktf.numberToHclTerraform(struct.repInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._repInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.repInterval = this._repInterval;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._repInterval = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._repInterval = value.repInterval;
        }
    }
    get repInterval() {
        return this.getNumberAttribute('rep_interval');
    }
    set repInterval(value) {
        this._repInterval = value;
    }
    resetRepInterval() {
        this._repInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get repIntervalInput() {
        return this._repInterval;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference;
_88 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference[_88] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        absent_input_audio_behavior: cdktf.stringToTerraform(struct.absentInputAudioBehavior),
        arib: cdktf.stringToTerraform(struct.arib),
        arib_captions_pid: cdktf.stringToTerraform(struct.aribCaptionsPid),
        arib_captions_pid_control: cdktf.stringToTerraform(struct.aribCaptionsPidControl),
        audio_buffer_model: cdktf.stringToTerraform(struct.audioBufferModel),
        audio_frames_per_pes: cdktf.numberToTerraform(struct.audioFramesPerPes),
        audio_pids: cdktf.stringToTerraform(struct.audioPids),
        audio_stream_type: cdktf.stringToTerraform(struct.audioStreamType),
        bitrate: cdktf.numberToTerraform(struct.bitrate),
        buffer_model: cdktf.stringToTerraform(struct.bufferModel),
        cc_descriptor: cdktf.stringToTerraform(struct.ccDescriptor),
        dvb_sub_pids: cdktf.stringToTerraform(struct.dvbSubPids),
        dvb_teletext_pid: cdktf.stringToTerraform(struct.dvbTeletextPid),
        ebif: cdktf.stringToTerraform(struct.ebif),
        ebp_audio_interval: cdktf.stringToTerraform(struct.ebpAudioInterval),
        ebp_lookahead_ms: cdktf.numberToTerraform(struct.ebpLookaheadMs),
        ebp_placement: cdktf.stringToTerraform(struct.ebpPlacement),
        ecm_pid: cdktf.stringToTerraform(struct.ecmPid),
        es_rate_in_pes: cdktf.stringToTerraform(struct.esRateInPes),
        etv_platform_pid: cdktf.stringToTerraform(struct.etvPlatformPid),
        etv_signal_pid: cdktf.stringToTerraform(struct.etvSignalPid),
        fragment_time: cdktf.numberToTerraform(struct.fragmentTime),
        klv: cdktf.stringToTerraform(struct.klv),
        klv_data_pids: cdktf.stringToTerraform(struct.klvDataPids),
        nielsen_id3_behavior: cdktf.stringToTerraform(struct.nielsenId3Behavior),
        null_packet_bitrate: cdktf.numberToTerraform(struct.nullPacketBitrate),
        pat_interval: cdktf.numberToTerraform(struct.patInterval),
        pcr_control: cdktf.stringToTerraform(struct.pcrControl),
        pcr_period: cdktf.numberToTerraform(struct.pcrPeriod),
        pcr_pid: cdktf.stringToTerraform(struct.pcrPid),
        pmt_interval: cdktf.numberToTerraform(struct.pmtInterval),
        pmt_pid: cdktf.stringToTerraform(struct.pmtPid),
        program_num: cdktf.numberToTerraform(struct.programNum),
        rate_mode: cdktf.stringToTerraform(struct.rateMode),
        scte27_pids: cdktf.stringToTerraform(struct.scte27Pids),
        scte35_control: cdktf.stringToTerraform(struct.scte35Control),
        scte35_pid: cdktf.stringToTerraform(struct.scte35Pid),
        segmentation_markers: cdktf.stringToTerraform(struct.segmentationMarkers),
        segmentation_style: cdktf.stringToTerraform(struct.segmentationStyle),
        segmentation_time: cdktf.numberToTerraform(struct.segmentationTime),
        timed_metadata_behavior: cdktf.stringToTerraform(struct.timedMetadataBehavior),
        timed_metadata_pid: cdktf.stringToTerraform(struct.timedMetadataPid),
        transport_stream_id: cdktf.numberToTerraform(struct.transportStreamId),
        video_pid: cdktf.stringToTerraform(struct.videoPid),
        dvb_nit_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsToTerraform(struct.dvbNitSettings),
        dvb_sdt_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsToTerraform(struct.dvbSdtSettings),
        dvb_tdt_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsToTerraform(struct.dvbTdtSettings),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        absent_input_audio_behavior: {
            value: cdktf.stringToHclTerraform(struct.absentInputAudioBehavior),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        arib: {
            value: cdktf.stringToHclTerraform(struct.arib),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        arib_captions_pid: {
            value: cdktf.stringToHclTerraform(struct.aribCaptionsPid),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        arib_captions_pid_control: {
            value: cdktf.stringToHclTerraform(struct.aribCaptionsPidControl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        audio_buffer_model: {
            value: cdktf.stringToHclTerraform(struct.audioBufferModel),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        audio_frames_per_pes: {
            value: cdktf.numberToHclTerraform(struct.audioFramesPerPes),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        audio_pids: {
            value: cdktf.stringToHclTerraform(struct.audioPids),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        audio_stream_type: {
            value: cdktf.stringToHclTerraform(struct.audioStreamType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        bitrate: {
            value: cdktf.numberToHclTerraform(struct.bitrate),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        buffer_model: {
            value: cdktf.stringToHclTerraform(struct.bufferModel),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cc_descriptor: {
            value: cdktf.stringToHclTerraform(struct.ccDescriptor),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        dvb_sub_pids: {
            value: cdktf.stringToHclTerraform(struct.dvbSubPids),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        dvb_teletext_pid: {
            value: cdktf.stringToHclTerraform(struct.dvbTeletextPid),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ebif: {
            value: cdktf.stringToHclTerraform(struct.ebif),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ebp_audio_interval: {
            value: cdktf.stringToHclTerraform(struct.ebpAudioInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ebp_lookahead_ms: {
            value: cdktf.numberToHclTerraform(struct.ebpLookaheadMs),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        ebp_placement: {
            value: cdktf.stringToHclTerraform(struct.ebpPlacement),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ecm_pid: {
            value: cdktf.stringToHclTerraform(struct.ecmPid),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        es_rate_in_pes: {
            value: cdktf.stringToHclTerraform(struct.esRateInPes),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        etv_platform_pid: {
            value: cdktf.stringToHclTerraform(struct.etvPlatformPid),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        etv_signal_pid: {
            value: cdktf.stringToHclTerraform(struct.etvSignalPid),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        fragment_time: {
            value: cdktf.numberToHclTerraform(struct.fragmentTime),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        klv: {
            value: cdktf.stringToHclTerraform(struct.klv),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        klv_data_pids: {
            value: cdktf.stringToHclTerraform(struct.klvDataPids),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        nielsen_id3_behavior: {
            value: cdktf.stringToHclTerraform(struct.nielsenId3Behavior),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        null_packet_bitrate: {
            value: cdktf.numberToHclTerraform(struct.nullPacketBitrate),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        pat_interval: {
            value: cdktf.numberToHclTerraform(struct.patInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        pcr_control: {
            value: cdktf.stringToHclTerraform(struct.pcrControl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        pcr_period: {
            value: cdktf.numberToHclTerraform(struct.pcrPeriod),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        pcr_pid: {
            value: cdktf.stringToHclTerraform(struct.pcrPid),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        pmt_interval: {
            value: cdktf.numberToHclTerraform(struct.pmtInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        pmt_pid: {
            value: cdktf.stringToHclTerraform(struct.pmtPid),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        program_num: {
            value: cdktf.numberToHclTerraform(struct.programNum),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        rate_mode: {
            value: cdktf.stringToHclTerraform(struct.rateMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        scte27_pids: {
            value: cdktf.stringToHclTerraform(struct.scte27Pids),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        scte35_control: {
            value: cdktf.stringToHclTerraform(struct.scte35Control),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        scte35_pid: {
            value: cdktf.stringToHclTerraform(struct.scte35Pid),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        segmentation_markers: {
            value: cdktf.stringToHclTerraform(struct.segmentationMarkers),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        segmentation_style: {
            value: cdktf.stringToHclTerraform(struct.segmentationStyle),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        segmentation_time: {
            value: cdktf.numberToHclTerraform(struct.segmentationTime),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        timed_metadata_behavior: {
            value: cdktf.stringToHclTerraform(struct.timedMetadataBehavior),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        timed_metadata_pid: {
            value: cdktf.stringToHclTerraform(struct.timedMetadataPid),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        transport_stream_id: {
            value: cdktf.numberToHclTerraform(struct.transportStreamId),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        video_pid: {
            value: cdktf.stringToHclTerraform(struct.videoPid),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        dvb_nit_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsToHclTerraform(struct.dvbNitSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsList",
        },
        dvb_sdt_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsToHclTerraform(struct.dvbSdtSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsList",
        },
        dvb_tdt_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsToHclTerraform(struct.dvbTdtSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // dvb_nit_settings - computed: false, optional: true, required: false
        this._dvbNitSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference(this, "dvb_nit_settings");
        // dvb_sdt_settings - computed: false, optional: true, required: false
        this._dvbSdtSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference(this, "dvb_sdt_settings");
        // dvb_tdt_settings - computed: false, optional: true, required: false
        this._dvbTdtSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference(this, "dvb_tdt_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._absentInputAudioBehavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.absentInputAudioBehavior = this._absentInputAudioBehavior;
        }
        if (this._arib !== undefined) {
            hasAnyValues = true;
            internalValueResult.arib = this._arib;
        }
        if (this._aribCaptionsPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.aribCaptionsPid = this._aribCaptionsPid;
        }
        if (this._aribCaptionsPidControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.aribCaptionsPidControl = this._aribCaptionsPidControl;
        }
        if (this._audioBufferModel !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioBufferModel = this._audioBufferModel;
        }
        if (this._audioFramesPerPes !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioFramesPerPes = this._audioFramesPerPes;
        }
        if (this._audioPids !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioPids = this._audioPids;
        }
        if (this._audioStreamType !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioStreamType = this._audioStreamType;
        }
        if (this._bitrate !== undefined) {
            hasAnyValues = true;
            internalValueResult.bitrate = this._bitrate;
        }
        if (this._bufferModel !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufferModel = this._bufferModel;
        }
        if (this._ccDescriptor !== undefined) {
            hasAnyValues = true;
            internalValueResult.ccDescriptor = this._ccDescriptor;
        }
        if (this._dvbSubPids !== undefined) {
            hasAnyValues = true;
            internalValueResult.dvbSubPids = this._dvbSubPids;
        }
        if (this._dvbTeletextPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.dvbTeletextPid = this._dvbTeletextPid;
        }
        if (this._ebif !== undefined) {
            hasAnyValues = true;
            internalValueResult.ebif = this._ebif;
        }
        if (this._ebpAudioInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.ebpAudioInterval = this._ebpAudioInterval;
        }
        if (this._ebpLookaheadMs !== undefined) {
            hasAnyValues = true;
            internalValueResult.ebpLookaheadMs = this._ebpLookaheadMs;
        }
        if (this._ebpPlacement !== undefined) {
            hasAnyValues = true;
            internalValueResult.ebpPlacement = this._ebpPlacement;
        }
        if (this._ecmPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.ecmPid = this._ecmPid;
        }
        if (this._esRateInPes !== undefined) {
            hasAnyValues = true;
            internalValueResult.esRateInPes = this._esRateInPes;
        }
        if (this._etvPlatformPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.etvPlatformPid = this._etvPlatformPid;
        }
        if (this._etvSignalPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.etvSignalPid = this._etvSignalPid;
        }
        if (this._fragmentTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.fragmentTime = this._fragmentTime;
        }
        if (this._klv !== undefined) {
            hasAnyValues = true;
            internalValueResult.klv = this._klv;
        }
        if (this._klvDataPids !== undefined) {
            hasAnyValues = true;
            internalValueResult.klvDataPids = this._klvDataPids;
        }
        if (this._nielsenId3Behavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.nielsenId3Behavior = this._nielsenId3Behavior;
        }
        if (this._nullPacketBitrate !== undefined) {
            hasAnyValues = true;
            internalValueResult.nullPacketBitrate = this._nullPacketBitrate;
        }
        if (this._patInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.patInterval = this._patInterval;
        }
        if (this._pcrControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.pcrControl = this._pcrControl;
        }
        if (this._pcrPeriod !== undefined) {
            hasAnyValues = true;
            internalValueResult.pcrPeriod = this._pcrPeriod;
        }
        if (this._pcrPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.pcrPid = this._pcrPid;
        }
        if (this._pmtInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.pmtInterval = this._pmtInterval;
        }
        if (this._pmtPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.pmtPid = this._pmtPid;
        }
        if (this._programNum !== undefined) {
            hasAnyValues = true;
            internalValueResult.programNum = this._programNum;
        }
        if (this._rateMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.rateMode = this._rateMode;
        }
        if (this._scte27Pids !== undefined) {
            hasAnyValues = true;
            internalValueResult.scte27Pids = this._scte27Pids;
        }
        if (this._scte35Control !== undefined) {
            hasAnyValues = true;
            internalValueResult.scte35Control = this._scte35Control;
        }
        if (this._scte35Pid !== undefined) {
            hasAnyValues = true;
            internalValueResult.scte35Pid = this._scte35Pid;
        }
        if (this._segmentationMarkers !== undefined) {
            hasAnyValues = true;
            internalValueResult.segmentationMarkers = this._segmentationMarkers;
        }
        if (this._segmentationStyle !== undefined) {
            hasAnyValues = true;
            internalValueResult.segmentationStyle = this._segmentationStyle;
        }
        if (this._segmentationTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.segmentationTime = this._segmentationTime;
        }
        if (this._timedMetadataBehavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.timedMetadataBehavior = this._timedMetadataBehavior;
        }
        if (this._timedMetadataPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.timedMetadataPid = this._timedMetadataPid;
        }
        if (this._transportStreamId !== undefined) {
            hasAnyValues = true;
            internalValueResult.transportStreamId = this._transportStreamId;
        }
        if (this._videoPid !== undefined) {
            hasAnyValues = true;
            internalValueResult.videoPid = this._videoPid;
        }
        if (this._dvbNitSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dvbNitSettings = this._dvbNitSettings?.internalValue;
        }
        if (this._dvbSdtSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dvbSdtSettings = this._dvbSdtSettings?.internalValue;
        }
        if (this._dvbTdtSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dvbTdtSettings = this._dvbTdtSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._absentInputAudioBehavior = undefined;
            this._arib = undefined;
            this._aribCaptionsPid = undefined;
            this._aribCaptionsPidControl = undefined;
            this._audioBufferModel = undefined;
            this._audioFramesPerPes = undefined;
            this._audioPids = undefined;
            this._audioStreamType = undefined;
            this._bitrate = undefined;
            this._bufferModel = undefined;
            this._ccDescriptor = undefined;
            this._dvbSubPids = undefined;
            this._dvbTeletextPid = undefined;
            this._ebif = undefined;
            this._ebpAudioInterval = undefined;
            this._ebpLookaheadMs = undefined;
            this._ebpPlacement = undefined;
            this._ecmPid = undefined;
            this._esRateInPes = undefined;
            this._etvPlatformPid = undefined;
            this._etvSignalPid = undefined;
            this._fragmentTime = undefined;
            this._klv = undefined;
            this._klvDataPids = undefined;
            this._nielsenId3Behavior = undefined;
            this._nullPacketBitrate = undefined;
            this._patInterval = undefined;
            this._pcrControl = undefined;
            this._pcrPeriod = undefined;
            this._pcrPid = undefined;
            this._pmtInterval = undefined;
            this._pmtPid = undefined;
            this._programNum = undefined;
            this._rateMode = undefined;
            this._scte27Pids = undefined;
            this._scte35Control = undefined;
            this._scte35Pid = undefined;
            this._segmentationMarkers = undefined;
            this._segmentationStyle = undefined;
            this._segmentationTime = undefined;
            this._timedMetadataBehavior = undefined;
            this._timedMetadataPid = undefined;
            this._transportStreamId = undefined;
            this._videoPid = undefined;
            this._dvbNitSettings.internalValue = undefined;
            this._dvbSdtSettings.internalValue = undefined;
            this._dvbTdtSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._absentInputAudioBehavior = value.absentInputAudioBehavior;
            this._arib = value.arib;
            this._aribCaptionsPid = value.aribCaptionsPid;
            this._aribCaptionsPidControl = value.aribCaptionsPidControl;
            this._audioBufferModel = value.audioBufferModel;
            this._audioFramesPerPes = value.audioFramesPerPes;
            this._audioPids = value.audioPids;
            this._audioStreamType = value.audioStreamType;
            this._bitrate = value.bitrate;
            this._bufferModel = value.bufferModel;
            this._ccDescriptor = value.ccDescriptor;
            this._dvbSubPids = value.dvbSubPids;
            this._dvbTeletextPid = value.dvbTeletextPid;
            this._ebif = value.ebif;
            this._ebpAudioInterval = value.ebpAudioInterval;
            this._ebpLookaheadMs = value.ebpLookaheadMs;
            this._ebpPlacement = value.ebpPlacement;
            this._ecmPid = value.ecmPid;
            this._esRateInPes = value.esRateInPes;
            this._etvPlatformPid = value.etvPlatformPid;
            this._etvSignalPid = value.etvSignalPid;
            this._fragmentTime = value.fragmentTime;
            this._klv = value.klv;
            this._klvDataPids = value.klvDataPids;
            this._nielsenId3Behavior = value.nielsenId3Behavior;
            this._nullPacketBitrate = value.nullPacketBitrate;
            this._patInterval = value.patInterval;
            this._pcrControl = value.pcrControl;
            this._pcrPeriod = value.pcrPeriod;
            this._pcrPid = value.pcrPid;
            this._pmtInterval = value.pmtInterval;
            this._pmtPid = value.pmtPid;
            this._programNum = value.programNum;
            this._rateMode = value.rateMode;
            this._scte27Pids = value.scte27Pids;
            this._scte35Control = value.scte35Control;
            this._scte35Pid = value.scte35Pid;
            this._segmentationMarkers = value.segmentationMarkers;
            this._segmentationStyle = value.segmentationStyle;
            this._segmentationTime = value.segmentationTime;
            this._timedMetadataBehavior = value.timedMetadataBehavior;
            this._timedMetadataPid = value.timedMetadataPid;
            this._transportStreamId = value.transportStreamId;
            this._videoPid = value.videoPid;
            this._dvbNitSettings.internalValue = value.dvbNitSettings;
            this._dvbSdtSettings.internalValue = value.dvbSdtSettings;
            this._dvbTdtSettings.internalValue = value.dvbTdtSettings;
        }
    }
    get absentInputAudioBehavior() {
        return this.getStringAttribute('absent_input_audio_behavior');
    }
    set absentInputAudioBehavior(value) {
        this._absentInputAudioBehavior = value;
    }
    resetAbsentInputAudioBehavior() {
        this._absentInputAudioBehavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get absentInputAudioBehaviorInput() {
        return this._absentInputAudioBehavior;
    }
    get arib() {
        return this.getStringAttribute('arib');
    }
    set arib(value) {
        this._arib = value;
    }
    resetArib() {
        this._arib = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aribInput() {
        return this._arib;
    }
    get aribCaptionsPid() {
        return this.getStringAttribute('arib_captions_pid');
    }
    set aribCaptionsPid(value) {
        this._aribCaptionsPid = value;
    }
    resetAribCaptionsPid() {
        this._aribCaptionsPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aribCaptionsPidInput() {
        return this._aribCaptionsPid;
    }
    get aribCaptionsPidControl() {
        return this.getStringAttribute('arib_captions_pid_control');
    }
    set aribCaptionsPidControl(value) {
        this._aribCaptionsPidControl = value;
    }
    resetAribCaptionsPidControl() {
        this._aribCaptionsPidControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aribCaptionsPidControlInput() {
        return this._aribCaptionsPidControl;
    }
    get audioBufferModel() {
        return this.getStringAttribute('audio_buffer_model');
    }
    set audioBufferModel(value) {
        this._audioBufferModel = value;
    }
    resetAudioBufferModel() {
        this._audioBufferModel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioBufferModelInput() {
        return this._audioBufferModel;
    }
    get audioFramesPerPes() {
        return this.getNumberAttribute('audio_frames_per_pes');
    }
    set audioFramesPerPes(value) {
        this._audioFramesPerPes = value;
    }
    resetAudioFramesPerPes() {
        this._audioFramesPerPes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioFramesPerPesInput() {
        return this._audioFramesPerPes;
    }
    get audioPids() {
        return this.getStringAttribute('audio_pids');
    }
    set audioPids(value) {
        this._audioPids = value;
    }
    resetAudioPids() {
        this._audioPids = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioPidsInput() {
        return this._audioPids;
    }
    get audioStreamType() {
        return this.getStringAttribute('audio_stream_type');
    }
    set audioStreamType(value) {
        this._audioStreamType = value;
    }
    resetAudioStreamType() {
        this._audioStreamType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioStreamTypeInput() {
        return this._audioStreamType;
    }
    get bitrate() {
        return this.getNumberAttribute('bitrate');
    }
    set bitrate(value) {
        this._bitrate = value;
    }
    resetBitrate() {
        this._bitrate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bitrateInput() {
        return this._bitrate;
    }
    get bufferModel() {
        return this.getStringAttribute('buffer_model');
    }
    set bufferModel(value) {
        this._bufferModel = value;
    }
    resetBufferModel() {
        this._bufferModel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufferModelInput() {
        return this._bufferModel;
    }
    get ccDescriptor() {
        return this.getStringAttribute('cc_descriptor');
    }
    set ccDescriptor(value) {
        this._ccDescriptor = value;
    }
    resetCcDescriptor() {
        this._ccDescriptor = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ccDescriptorInput() {
        return this._ccDescriptor;
    }
    get dvbSubPids() {
        return this.getStringAttribute('dvb_sub_pids');
    }
    set dvbSubPids(value) {
        this._dvbSubPids = value;
    }
    resetDvbSubPids() {
        this._dvbSubPids = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dvbSubPidsInput() {
        return this._dvbSubPids;
    }
    get dvbTeletextPid() {
        return this.getStringAttribute('dvb_teletext_pid');
    }
    set dvbTeletextPid(value) {
        this._dvbTeletextPid = value;
    }
    resetDvbTeletextPid() {
        this._dvbTeletextPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dvbTeletextPidInput() {
        return this._dvbTeletextPid;
    }
    get ebif() {
        return this.getStringAttribute('ebif');
    }
    set ebif(value) {
        this._ebif = value;
    }
    resetEbif() {
        this._ebif = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ebifInput() {
        return this._ebif;
    }
    get ebpAudioInterval() {
        return this.getStringAttribute('ebp_audio_interval');
    }
    set ebpAudioInterval(value) {
        this._ebpAudioInterval = value;
    }
    resetEbpAudioInterval() {
        this._ebpAudioInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ebpAudioIntervalInput() {
        return this._ebpAudioInterval;
    }
    get ebpLookaheadMs() {
        return this.getNumberAttribute('ebp_lookahead_ms');
    }
    set ebpLookaheadMs(value) {
        this._ebpLookaheadMs = value;
    }
    resetEbpLookaheadMs() {
        this._ebpLookaheadMs = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ebpLookaheadMsInput() {
        return this._ebpLookaheadMs;
    }
    get ebpPlacement() {
        return this.getStringAttribute('ebp_placement');
    }
    set ebpPlacement(value) {
        this._ebpPlacement = value;
    }
    resetEbpPlacement() {
        this._ebpPlacement = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ebpPlacementInput() {
        return this._ebpPlacement;
    }
    get ecmPid() {
        return this.getStringAttribute('ecm_pid');
    }
    set ecmPid(value) {
        this._ecmPid = value;
    }
    resetEcmPid() {
        this._ecmPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ecmPidInput() {
        return this._ecmPid;
    }
    get esRateInPes() {
        return this.getStringAttribute('es_rate_in_pes');
    }
    set esRateInPes(value) {
        this._esRateInPes = value;
    }
    resetEsRateInPes() {
        this._esRateInPes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get esRateInPesInput() {
        return this._esRateInPes;
    }
    get etvPlatformPid() {
        return this.getStringAttribute('etv_platform_pid');
    }
    set etvPlatformPid(value) {
        this._etvPlatformPid = value;
    }
    resetEtvPlatformPid() {
        this._etvPlatformPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get etvPlatformPidInput() {
        return this._etvPlatformPid;
    }
    get etvSignalPid() {
        return this.getStringAttribute('etv_signal_pid');
    }
    set etvSignalPid(value) {
        this._etvSignalPid = value;
    }
    resetEtvSignalPid() {
        this._etvSignalPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get etvSignalPidInput() {
        return this._etvSignalPid;
    }
    get fragmentTime() {
        return this.getNumberAttribute('fragment_time');
    }
    set fragmentTime(value) {
        this._fragmentTime = value;
    }
    resetFragmentTime() {
        this._fragmentTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fragmentTimeInput() {
        return this._fragmentTime;
    }
    get klv() {
        return this.getStringAttribute('klv');
    }
    set klv(value) {
        this._klv = value;
    }
    resetKlv() {
        this._klv = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get klvInput() {
        return this._klv;
    }
    get klvDataPids() {
        return this.getStringAttribute('klv_data_pids');
    }
    set klvDataPids(value) {
        this._klvDataPids = value;
    }
    resetKlvDataPids() {
        this._klvDataPids = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get klvDataPidsInput() {
        return this._klvDataPids;
    }
    get nielsenId3Behavior() {
        return this.getStringAttribute('nielsen_id3_behavior');
    }
    set nielsenId3Behavior(value) {
        this._nielsenId3Behavior = value;
    }
    resetNielsenId3Behavior() {
        this._nielsenId3Behavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nielsenId3BehaviorInput() {
        return this._nielsenId3Behavior;
    }
    get nullPacketBitrate() {
        return this.getNumberAttribute('null_packet_bitrate');
    }
    set nullPacketBitrate(value) {
        this._nullPacketBitrate = value;
    }
    resetNullPacketBitrate() {
        this._nullPacketBitrate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nullPacketBitrateInput() {
        return this._nullPacketBitrate;
    }
    get patInterval() {
        return this.getNumberAttribute('pat_interval');
    }
    set patInterval(value) {
        this._patInterval = value;
    }
    resetPatInterval() {
        this._patInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get patIntervalInput() {
        return this._patInterval;
    }
    get pcrControl() {
        return this.getStringAttribute('pcr_control');
    }
    set pcrControl(value) {
        this._pcrControl = value;
    }
    resetPcrControl() {
        this._pcrControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pcrControlInput() {
        return this._pcrControl;
    }
    get pcrPeriod() {
        return this.getNumberAttribute('pcr_period');
    }
    set pcrPeriod(value) {
        this._pcrPeriod = value;
    }
    resetPcrPeriod() {
        this._pcrPeriod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pcrPeriodInput() {
        return this._pcrPeriod;
    }
    get pcrPid() {
        return this.getStringAttribute('pcr_pid');
    }
    set pcrPid(value) {
        this._pcrPid = value;
    }
    resetPcrPid() {
        this._pcrPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pcrPidInput() {
        return this._pcrPid;
    }
    get pmtInterval() {
        return this.getNumberAttribute('pmt_interval');
    }
    set pmtInterval(value) {
        this._pmtInterval = value;
    }
    resetPmtInterval() {
        this._pmtInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pmtIntervalInput() {
        return this._pmtInterval;
    }
    get pmtPid() {
        return this.getStringAttribute('pmt_pid');
    }
    set pmtPid(value) {
        this._pmtPid = value;
    }
    resetPmtPid() {
        this._pmtPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pmtPidInput() {
        return this._pmtPid;
    }
    get programNum() {
        return this.getNumberAttribute('program_num');
    }
    set programNum(value) {
        this._programNum = value;
    }
    resetProgramNum() {
        this._programNum = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get programNumInput() {
        return this._programNum;
    }
    get rateMode() {
        return this.getStringAttribute('rate_mode');
    }
    set rateMode(value) {
        this._rateMode = value;
    }
    resetRateMode() {
        this._rateMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rateModeInput() {
        return this._rateMode;
    }
    get scte27Pids() {
        return this.getStringAttribute('scte27_pids');
    }
    set scte27Pids(value) {
        this._scte27Pids = value;
    }
    resetScte27Pids() {
        this._scte27Pids = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scte27PidsInput() {
        return this._scte27Pids;
    }
    get scte35Control() {
        return this.getStringAttribute('scte35_control');
    }
    set scte35Control(value) {
        this._scte35Control = value;
    }
    resetScte35Control() {
        this._scte35Control = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scte35ControlInput() {
        return this._scte35Control;
    }
    get scte35Pid() {
        return this.getStringAttribute('scte35_pid');
    }
    set scte35Pid(value) {
        this._scte35Pid = value;
    }
    resetScte35Pid() {
        this._scte35Pid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scte35PidInput() {
        return this._scte35Pid;
    }
    get segmentationMarkers() {
        return this.getStringAttribute('segmentation_markers');
    }
    set segmentationMarkers(value) {
        this._segmentationMarkers = value;
    }
    resetSegmentationMarkers() {
        this._segmentationMarkers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get segmentationMarkersInput() {
        return this._segmentationMarkers;
    }
    get segmentationStyle() {
        return this.getStringAttribute('segmentation_style');
    }
    set segmentationStyle(value) {
        this._segmentationStyle = value;
    }
    resetSegmentationStyle() {
        this._segmentationStyle = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get segmentationStyleInput() {
        return this._segmentationStyle;
    }
    get segmentationTime() {
        return this.getNumberAttribute('segmentation_time');
    }
    set segmentationTime(value) {
        this._segmentationTime = value;
    }
    resetSegmentationTime() {
        this._segmentationTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get segmentationTimeInput() {
        return this._segmentationTime;
    }
    get timedMetadataBehavior() {
        return this.getStringAttribute('timed_metadata_behavior');
    }
    set timedMetadataBehavior(value) {
        this._timedMetadataBehavior = value;
    }
    resetTimedMetadataBehavior() {
        this._timedMetadataBehavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timedMetadataBehaviorInput() {
        return this._timedMetadataBehavior;
    }
    get timedMetadataPid() {
        return this.getStringAttribute('timed_metadata_pid');
    }
    set timedMetadataPid(value) {
        this._timedMetadataPid = value;
    }
    resetTimedMetadataPid() {
        this._timedMetadataPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timedMetadataPidInput() {
        return this._timedMetadataPid;
    }
    get transportStreamId() {
        return this.getNumberAttribute('transport_stream_id');
    }
    set transportStreamId(value) {
        this._transportStreamId = value;
    }
    resetTransportStreamId() {
        this._transportStreamId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get transportStreamIdInput() {
        return this._transportStreamId;
    }
    get videoPid() {
        return this.getStringAttribute('video_pid');
    }
    set videoPid(value) {
        this._videoPid = value;
    }
    resetVideoPid() {
        this._videoPid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get videoPidInput() {
        return this._videoPid;
    }
    get dvbNitSettings() {
        return this._dvbNitSettings;
    }
    putDvbNitSettings(value) {
        this._dvbNitSettings.internalValue = value;
    }
    resetDvbNitSettings() {
        this._dvbNitSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dvbNitSettingsInput() {
        return this._dvbNitSettings.internalValue;
    }
    get dvbSdtSettings() {
        return this._dvbSdtSettings;
    }
    putDvbSdtSettings(value) {
        this._dvbSdtSettings.internalValue = value;
    }
    resetDvbSdtSettings() {
        this._dvbSdtSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dvbSdtSettingsInput() {
        return this._dvbSdtSettings.internalValue;
    }
    get dvbTdtSettings() {
        return this._dvbTdtSettings;
    }
    putDvbTdtSettings(value) {
        this._dvbTdtSettings.internalValue = value;
    }
    resetDvbTdtSettings() {
        this._dvbTdtSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dvbTdtSettingsInput() {
        return this._dvbTdtSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsOutputReference;
_89 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsOutputReference[_89] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        m2ts_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsToTerraform(struct.m2TsSettings),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        m2ts_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsToHclTerraform(struct.m2TsSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // m2ts_settings - computed: false, optional: true, required: false
        this._m2TsSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsOutputReference(this, "m2ts_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._m2TsSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.m2TsSettings = this._m2TsSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._m2TsSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._m2TsSettings.internalValue = value.m2TsSettings;
        }
    }
    get m2TsSettings() {
        return this._m2TsSettings;
    }
    putM2TsSettings(value) {
        this._m2TsSettings.internalValue = value;
    }
    resetM2TsSettings() {
        this._m2TsSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get m2TsSettingsInput() {
        return this._m2TsSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsOutputReference;
_90 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsOutputReference[_90] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        destination_ref_id: cdktf.stringToTerraform(struct.destinationRefId),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        destination_ref_id: {
            value: cdktf.stringToHclTerraform(struct.destinationRefId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._destinationRefId !== undefined) {
            hasAnyValues = true;
            internalValueResult.destinationRefId = this._destinationRefId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._destinationRefId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._destinationRefId = value.destinationRefId;
        }
    }
    get destinationRefId() {
        return this.getStringAttribute('destination_ref_id');
    }
    set destinationRefId(value) {
        this._destinationRefId = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationRefIdInput() {
        return this._destinationRefId;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationOutputReference;
_91 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationOutputReference[_91] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        column_depth: cdktf.numberToTerraform(struct.columnDepth),
        include_fec: cdktf.stringToTerraform(struct.includeFec),
        row_length: cdktf.numberToTerraform(struct.rowLength),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        column_depth: {
            value: cdktf.numberToHclTerraform(struct.columnDepth),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        include_fec: {
            value: cdktf.stringToHclTerraform(struct.includeFec),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        row_length: {
            value: cdktf.numberToHclTerraform(struct.rowLength),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._columnDepth !== undefined) {
            hasAnyValues = true;
            internalValueResult.columnDepth = this._columnDepth;
        }
        if (this._includeFec !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeFec = this._includeFec;
        }
        if (this._rowLength !== undefined) {
            hasAnyValues = true;
            internalValueResult.rowLength = this._rowLength;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._columnDepth = undefined;
            this._includeFec = undefined;
            this._rowLength = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._columnDepth = value.columnDepth;
            this._includeFec = value.includeFec;
            this._rowLength = value.rowLength;
        }
    }
    get columnDepth() {
        return this.getNumberAttribute('column_depth');
    }
    set columnDepth(value) {
        this._columnDepth = value;
    }
    resetColumnDepth() {
        this._columnDepth = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get columnDepthInput() {
        return this._columnDepth;
    }
    get includeFec() {
        return this.getStringAttribute('include_fec');
    }
    set includeFec(value) {
        this._includeFec = value;
    }
    resetIncludeFec() {
        this._includeFec = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeFecInput() {
        return this._includeFec;
    }
    get rowLength() {
        return this.getNumberAttribute('row_length');
    }
    set rowLength(value) {
        this._rowLength = value;
    }
    resetRowLength() {
        this._rowLength = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rowLengthInput() {
        return this._rowLength;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsOutputReference;
_92 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsOutputReference[_92] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        buffer_msec: cdktf.numberToTerraform(struct.bufferMsec),
        container_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsToTerraform(struct.containerSettings),
        destination: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationToTerraform(struct.destination),
        fec_output_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsToTerraform(struct.fecOutputSettings),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        buffer_msec: {
            value: cdktf.numberToHclTerraform(struct.bufferMsec),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        container_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsToHclTerraform(struct.containerSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsList",
        },
        destination: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationToHclTerraform(struct.destination),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationList",
        },
        fec_output_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsToHclTerraform(struct.fecOutputSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // container_settings - computed: false, optional: false, required: true
        this._containerSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsOutputReference(this, "container_settings");
        // destination - computed: false, optional: false, required: true
        this._destination = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationOutputReference(this, "destination");
        // fec_output_settings - computed: false, optional: true, required: false
        this._fecOutputSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsOutputReference(this, "fec_output_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bufferMsec !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufferMsec = this._bufferMsec;
        }
        if (this._containerSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.containerSettings = this._containerSettings?.internalValue;
        }
        if (this._destination?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.destination = this._destination?.internalValue;
        }
        if (this._fecOutputSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.fecOutputSettings = this._fecOutputSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bufferMsec = undefined;
            this._containerSettings.internalValue = undefined;
            this._destination.internalValue = undefined;
            this._fecOutputSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bufferMsec = value.bufferMsec;
            this._containerSettings.internalValue = value.containerSettings;
            this._destination.internalValue = value.destination;
            this._fecOutputSettings.internalValue = value.fecOutputSettings;
        }
    }
    get bufferMsec() {
        return this.getNumberAttribute('buffer_msec');
    }
    set bufferMsec(value) {
        this._bufferMsec = value;
    }
    resetBufferMsec() {
        this._bufferMsec = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufferMsecInput() {
        return this._bufferMsec;
    }
    get containerSettings() {
        return this._containerSettings;
    }
    putContainerSettings(value) {
        this._containerSettings.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get containerSettingsInput() {
        return this._containerSettings.internalValue;
    }
    get destination() {
        return this._destination;
    }
    putDestination(value) {
        this._destination.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationInput() {
        return this._destination.internalValue;
    }
    get fecOutputSettings() {
        return this._fecOutputSettings;
    }
    putFecOutputSettings(value) {
        this._fecOutputSettings.internalValue = value;
    }
    resetFecOutputSettings() {
        this._fecOutputSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fecOutputSettingsInput() {
        return this._fecOutputSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsOutputReference;
_93 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsOutputReference[_93] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        archive_output_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsToTerraform(struct.archiveOutputSettings),
        frame_capture_output_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsToTerraform(struct.frameCaptureOutputSettings),
        hls_output_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsToTerraform(struct.hlsOutputSettings),
        media_package_output_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsToTerraform(struct.mediaPackageOutputSettings),
        ms_smooth_output_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsToTerraform(struct.msSmoothOutputSettings),
        multiplex_output_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsToTerraform(struct.multiplexOutputSettings),
        rtmp_output_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsToTerraform(struct.rtmpOutputSettings),
        udp_output_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsToTerraform(struct.udpOutputSettings),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        archive_output_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsToHclTerraform(struct.archiveOutputSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsList",
        },
        frame_capture_output_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsToHclTerraform(struct.frameCaptureOutputSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsList",
        },
        hls_output_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsToHclTerraform(struct.hlsOutputSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsList",
        },
        media_package_output_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsToHclTerraform(struct.mediaPackageOutputSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsList",
        },
        ms_smooth_output_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsToHclTerraform(struct.msSmoothOutputSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsList",
        },
        multiplex_output_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsToHclTerraform(struct.multiplexOutputSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsList",
        },
        rtmp_output_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsToHclTerraform(struct.rtmpOutputSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsList",
        },
        udp_output_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsToHclTerraform(struct.udpOutputSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // archive_output_settings - computed: false, optional: true, required: false
        this._archiveOutputSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsOutputReference(this, "archive_output_settings");
        // frame_capture_output_settings - computed: false, optional: true, required: false
        this._frameCaptureOutputSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsOutputReference(this, "frame_capture_output_settings");
        // hls_output_settings - computed: false, optional: true, required: false
        this._hlsOutputSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsOutputReference(this, "hls_output_settings");
        // media_package_output_settings - computed: false, optional: true, required: false
        this._mediaPackageOutputSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsOutputReference(this, "media_package_output_settings");
        // ms_smooth_output_settings - computed: false, optional: true, required: false
        this._msSmoothOutputSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsOutputReference(this, "ms_smooth_output_settings");
        // multiplex_output_settings - computed: false, optional: true, required: false
        this._multiplexOutputSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsOutputReference(this, "multiplex_output_settings");
        // rtmp_output_settings - computed: false, optional: true, required: false
        this._rtmpOutputSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsOutputReference(this, "rtmp_output_settings");
        // udp_output_settings - computed: false, optional: true, required: false
        this._udpOutputSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsOutputReference(this, "udp_output_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._archiveOutputSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.archiveOutputSettings = this._archiveOutputSettings?.internalValue;
        }
        if (this._frameCaptureOutputSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.frameCaptureOutputSettings = this._frameCaptureOutputSettings?.internalValue;
        }
        if (this._hlsOutputSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.hlsOutputSettings = this._hlsOutputSettings?.internalValue;
        }
        if (this._mediaPackageOutputSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mediaPackageOutputSettings = this._mediaPackageOutputSettings?.internalValue;
        }
        if (this._msSmoothOutputSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.msSmoothOutputSettings = this._msSmoothOutputSettings?.internalValue;
        }
        if (this._multiplexOutputSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.multiplexOutputSettings = this._multiplexOutputSettings?.internalValue;
        }
        if (this._rtmpOutputSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.rtmpOutputSettings = this._rtmpOutputSettings?.internalValue;
        }
        if (this._udpOutputSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.udpOutputSettings = this._udpOutputSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._archiveOutputSettings.internalValue = undefined;
            this._frameCaptureOutputSettings.internalValue = undefined;
            this._hlsOutputSettings.internalValue = undefined;
            this._mediaPackageOutputSettings.internalValue = undefined;
            this._msSmoothOutputSettings.internalValue = undefined;
            this._multiplexOutputSettings.internalValue = undefined;
            this._rtmpOutputSettings.internalValue = undefined;
            this._udpOutputSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._archiveOutputSettings.internalValue = value.archiveOutputSettings;
            this._frameCaptureOutputSettings.internalValue = value.frameCaptureOutputSettings;
            this._hlsOutputSettings.internalValue = value.hlsOutputSettings;
            this._mediaPackageOutputSettings.internalValue = value.mediaPackageOutputSettings;
            this._msSmoothOutputSettings.internalValue = value.msSmoothOutputSettings;
            this._multiplexOutputSettings.internalValue = value.multiplexOutputSettings;
            this._rtmpOutputSettings.internalValue = value.rtmpOutputSettings;
            this._udpOutputSettings.internalValue = value.udpOutputSettings;
        }
    }
    get archiveOutputSettings() {
        return this._archiveOutputSettings;
    }
    putArchiveOutputSettings(value) {
        this._archiveOutputSettings.internalValue = value;
    }
    resetArchiveOutputSettings() {
        this._archiveOutputSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get archiveOutputSettingsInput() {
        return this._archiveOutputSettings.internalValue;
    }
    get frameCaptureOutputSettings() {
        return this._frameCaptureOutputSettings;
    }
    putFrameCaptureOutputSettings(value) {
        this._frameCaptureOutputSettings.internalValue = value;
    }
    resetFrameCaptureOutputSettings() {
        this._frameCaptureOutputSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get frameCaptureOutputSettingsInput() {
        return this._frameCaptureOutputSettings.internalValue;
    }
    get hlsOutputSettings() {
        return this._hlsOutputSettings;
    }
    putHlsOutputSettings(value) {
        this._hlsOutputSettings.internalValue = value;
    }
    resetHlsOutputSettings() {
        this._hlsOutputSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hlsOutputSettingsInput() {
        return this._hlsOutputSettings.internalValue;
    }
    get mediaPackageOutputSettings() {
        return this._mediaPackageOutputSettings;
    }
    putMediaPackageOutputSettings(value) {
        this._mediaPackageOutputSettings.internalValue = value;
    }
    resetMediaPackageOutputSettings() {
        this._mediaPackageOutputSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mediaPackageOutputSettingsInput() {
        return this._mediaPackageOutputSettings.internalValue;
    }
    get msSmoothOutputSettings() {
        return this._msSmoothOutputSettings;
    }
    putMsSmoothOutputSettings(value) {
        this._msSmoothOutputSettings.internalValue = value;
    }
    resetMsSmoothOutputSettings() {
        this._msSmoothOutputSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get msSmoothOutputSettingsInput() {
        return this._msSmoothOutputSettings.internalValue;
    }
    get multiplexOutputSettings() {
        return this._multiplexOutputSettings;
    }
    putMultiplexOutputSettings(value) {
        this._multiplexOutputSettings.internalValue = value;
    }
    resetMultiplexOutputSettings() {
        this._multiplexOutputSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get multiplexOutputSettingsInput() {
        return this._multiplexOutputSettings.internalValue;
    }
    get rtmpOutputSettings() {
        return this._rtmpOutputSettings;
    }
    putRtmpOutputSettings(value) {
        this._rtmpOutputSettings.internalValue = value;
    }
    resetRtmpOutputSettings() {
        this._rtmpOutputSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rtmpOutputSettingsInput() {
        return this._rtmpOutputSettings.internalValue;
    }
    get udpOutputSettings() {
        return this._udpOutputSettings;
    }
    putUdpOutputSettings(value) {
        this._udpOutputSettings.internalValue = value;
    }
    resetUdpOutputSettings() {
        this._udpOutputSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get udpOutputSettingsInput() {
        return this._udpOutputSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsOutputReference;
_94 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsOutputReference[_94] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsOutputsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        audio_description_names: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.audioDescriptionNames),
        caption_description_names: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.captionDescriptionNames),
        output_name: cdktf.stringToTerraform(struct.outputName),
        video_description_name: cdktf.stringToTerraform(struct.videoDescriptionName),
        output_settings: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsToTerraform(struct.outputSettings),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsToTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsOutputsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        audio_description_names: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.audioDescriptionNames),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        caption_description_names: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.captionDescriptionNames),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        output_name: {
            value: cdktf.stringToHclTerraform(struct.outputName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        video_description_name: {
            value: cdktf.stringToHclTerraform(struct.videoDescriptionName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        output_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsToHclTerraform(struct.outputSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsOutputsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsOutputsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // output_settings - computed: false, optional: false, required: true
        this._outputSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsOutputReference(this, "output_settings");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._audioDescriptionNames !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioDescriptionNames = this._audioDescriptionNames;
        }
        if (this._captionDescriptionNames !== undefined) {
            hasAnyValues = true;
            internalValueResult.captionDescriptionNames = this._captionDescriptionNames;
        }
        if (this._outputName !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputName = this._outputName;
        }
        if (this._videoDescriptionName !== undefined) {
            hasAnyValues = true;
            internalValueResult.videoDescriptionName = this._videoDescriptionName;
        }
        if (this._outputSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputSettings = this._outputSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._audioDescriptionNames = undefined;
            this._captionDescriptionNames = undefined;
            this._outputName = undefined;
            this._videoDescriptionName = undefined;
            this._outputSettings.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._audioDescriptionNames = value.audioDescriptionNames;
            this._captionDescriptionNames = value.captionDescriptionNames;
            this._outputName = value.outputName;
            this._videoDescriptionName = value.videoDescriptionName;
            this._outputSettings.internalValue = value.outputSettings;
        }
    }
    get audioDescriptionNames() {
        return cdktf.Fn.tolist(this.getListAttribute('audio_description_names'));
    }
    set audioDescriptionNames(value) {
        this._audioDescriptionNames = value;
    }
    resetAudioDescriptionNames() {
        this._audioDescriptionNames = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioDescriptionNamesInput() {
        return this._audioDescriptionNames;
    }
    get captionDescriptionNames() {
        return cdktf.Fn.tolist(this.getListAttribute('caption_description_names'));
    }
    set captionDescriptionNames(value) {
        this._captionDescriptionNames = value;
    }
    resetCaptionDescriptionNames() {
        this._captionDescriptionNames = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get captionDescriptionNamesInput() {
        return this._captionDescriptionNames;
    }
    get outputName() {
        return this.getStringAttribute('output_name');
    }
    set outputName(value) {
        this._outputName = value;
    }
    resetOutputName() {
        this._outputName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get outputNameInput() {
        return this._outputName;
    }
    get videoDescriptionName() {
        return this.getStringAttribute('video_description_name');
    }
    set videoDescriptionName(value) {
        this._videoDescriptionName = value;
    }
    resetVideoDescriptionName() {
        this._videoDescriptionName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get videoDescriptionNameInput() {
        return this._videoDescriptionName;
    }
    get outputSettings() {
        return this._outputSettings;
    }
    putOutputSettings(value) {
        this._outputSettings.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get outputSettingsInput() {
        return this._outputSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputReference;
_95 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputReference[_95] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputReference", version: "19.15.0" };
class MedialiveChannelEncoderSettingsOutputGroupsOutputsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputsList = MedialiveChannelEncoderSettingsOutputGroupsOutputsList;
_96 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputsList[_96] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsList", version: "19.15.0" };
function medialiveChannelEncoderSettingsOutputGroupsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        output_group_settings: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsToTerraform(struct.outputGroupSettings),
        outputs: cdktf.listMapper(medialiveChannelEncoderSettingsOutputGroupsOutputsToTerraform, true)(struct.outputs),
    };
}
exports.medialiveChannelEncoderSettingsOutputGroupsToTerraform = medialiveChannelEncoderSettingsOutputGroupsToTerraform;
function medialiveChannelEncoderSettingsOutputGroupsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        output_group_settings: {
            value: medialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsToHclTerraform(struct.outputGroupSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsList",
        },
        outputs: {
            value: cdktf.listMapperHcl(medialiveChannelEncoderSettingsOutputGroupsOutputsToHclTerraform, true)(struct.outputs),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsOutputsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsOutputGroupsToHclTerraform = medialiveChannelEncoderSettingsOutputGroupsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputGroupsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // output_group_settings - computed: false, optional: false, required: true
        this._outputGroupSettings = new MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsOutputReference(this, "output_group_settings");
        // outputs - computed: false, optional: false, required: true
        this._outputs = new MedialiveChannelEncoderSettingsOutputGroupsOutputsList(this, "outputs", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._outputGroupSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputGroupSettings = this._outputGroupSettings?.internalValue;
        }
        if (this._outputs?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputs = this._outputs?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._outputGroupSettings.internalValue = undefined;
            this._outputs.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._outputGroupSettings.internalValue = value.outputGroupSettings;
            this._outputs.internalValue = value.outputs;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get outputGroupSettings() {
        return this._outputGroupSettings;
    }
    putOutputGroupSettings(value) {
        this._outputGroupSettings.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get outputGroupSettingsInput() {
        return this._outputGroupSettings.internalValue;
    }
    get outputs() {
        return this._outputs;
    }
    putOutputs(value) {
        this._outputs.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get outputsInput() {
        return this._outputs.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsOutputReference = MedialiveChannelEncoderSettingsOutputGroupsOutputReference;
_97 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsOutputReference[_97] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputReference", version: "19.15.0" };
class MedialiveChannelEncoderSettingsOutputGroupsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MedialiveChannelEncoderSettingsOutputGroupsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MedialiveChannelEncoderSettingsOutputGroupsList = MedialiveChannelEncoderSettingsOutputGroupsList;
_98 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputGroupsList[_98] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsList", version: "19.15.0" };
function medialiveChannelEncoderSettingsTimecodeConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        source: cdktf.stringToTerraform(struct.source),
        sync_threshold: cdktf.numberToTerraform(struct.syncThreshold),
    };
}
exports.medialiveChannelEncoderSettingsTimecodeConfigToTerraform = medialiveChannelEncoderSettingsTimecodeConfigToTerraform;
function medialiveChannelEncoderSettingsTimecodeConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        source: {
            value: cdktf.stringToHclTerraform(struct.source),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sync_threshold: {
            value: cdktf.numberToHclTerraform(struct.syncThreshold),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsTimecodeConfigToHclTerraform = medialiveChannelEncoderSettingsTimecodeConfigToHclTerraform;
class MedialiveChannelEncoderSettingsTimecodeConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._source !== undefined) {
            hasAnyValues = true;
            internalValueResult.source = this._source;
        }
        if (this._syncThreshold !== undefined) {
            hasAnyValues = true;
            internalValueResult.syncThreshold = this._syncThreshold;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._source = undefined;
            this._syncThreshold = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._source = value.source;
            this._syncThreshold = value.syncThreshold;
        }
    }
    get source() {
        return this.getStringAttribute('source');
    }
    set source(value) {
        this._source = value;
    }
    // Temporarily expose input value. Use with caution.
    get sourceInput() {
        return this._source;
    }
    get syncThreshold() {
        return this.getNumberAttribute('sync_threshold');
    }
    set syncThreshold(value) {
        this._syncThreshold = value;
    }
    resetSyncThreshold() {
        this._syncThreshold = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get syncThresholdInput() {
        return this._syncThreshold;
    }
}
exports.MedialiveChannelEncoderSettingsTimecodeConfigOutputReference = MedialiveChannelEncoderSettingsTimecodeConfigOutputReference;
_99 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsTimecodeConfigOutputReference[_99] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsTimecodeConfigOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        capture_interval: cdktf.numberToTerraform(struct.captureInterval),
        capture_interval_units: cdktf.stringToTerraform(struct.captureIntervalUnits),
    };
}
exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsToTerraform = medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsToTerraform;
function medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        capture_interval: {
            value: cdktf.numberToHclTerraform(struct.captureInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        capture_interval_units: {
            value: cdktf.stringToHclTerraform(struct.captureIntervalUnits),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsToHclTerraform = medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._captureInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.captureInterval = this._captureInterval;
        }
        if (this._captureIntervalUnits !== undefined) {
            hasAnyValues = true;
            internalValueResult.captureIntervalUnits = this._captureIntervalUnits;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._captureInterval = undefined;
            this._captureIntervalUnits = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._captureInterval = value.captureInterval;
            this._captureIntervalUnits = value.captureIntervalUnits;
        }
    }
    get captureInterval() {
        return this.getNumberAttribute('capture_interval');
    }
    set captureInterval(value) {
        this._captureInterval = value;
    }
    resetCaptureInterval() {
        this._captureInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get captureIntervalInput() {
        return this._captureInterval;
    }
    get captureIntervalUnits() {
        return this.getStringAttribute('capture_interval_units');
    }
    set captureIntervalUnits(value) {
        this._captureIntervalUnits = value;
    }
    resetCaptureIntervalUnits() {
        this._captureIntervalUnits = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get captureIntervalUnitsInput() {
        return this._captureIntervalUnits;
    }
}
exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsOutputReference = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsOutputReference;
_100 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsOutputReference[_100] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        post_filter_sharpening: cdktf.stringToTerraform(struct.postFilterSharpening),
        strength: cdktf.stringToTerraform(struct.strength),
    };
}
exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsToTerraform = medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsToTerraform;
function medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        post_filter_sharpening: {
            value: cdktf.stringToHclTerraform(struct.postFilterSharpening),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        strength: {
            value: cdktf.stringToHclTerraform(struct.strength),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsToHclTerraform = medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._postFilterSharpening !== undefined) {
            hasAnyValues = true;
            internalValueResult.postFilterSharpening = this._postFilterSharpening;
        }
        if (this._strength !== undefined) {
            hasAnyValues = true;
            internalValueResult.strength = this._strength;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._postFilterSharpening = undefined;
            this._strength = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._postFilterSharpening = value.postFilterSharpening;
            this._strength = value.strength;
        }
    }
    get postFilterSharpening() {
        return this.getStringAttribute('post_filter_sharpening');
    }
    set postFilterSharpening(value) {
        this._postFilterSharpening = value;
    }
    resetPostFilterSharpening() {
        this._postFilterSharpening = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get postFilterSharpeningInput() {
        return this._postFilterSharpening;
    }
    get strength() {
        return this.getStringAttribute('strength');
    }
    set strength(value) {
        this._strength = value;
    }
    resetStrength() {
        this._strength = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get strengthInput() {
        return this._strength;
    }
}
exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutputReference = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutputReference;
_101 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutputReference[_101] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        temporal_filter_settings: medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsToTerraform(struct.temporalFilterSettings),
    };
}
exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsToTerraform = medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsToTerraform;
function medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        temporal_filter_settings: {
            value: medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsToHclTerraform(struct.temporalFilterSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsToHclTerraform = medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // temporal_filter_settings - computed: false, optional: true, required: false
        this._temporalFilterSettings = new MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutputReference(this, "temporal_filter_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._temporalFilterSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.temporalFilterSettings = this._temporalFilterSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._temporalFilterSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._temporalFilterSettings.internalValue = value.temporalFilterSettings;
        }
    }
    get temporalFilterSettings() {
        return this._temporalFilterSettings;
    }
    putTemporalFilterSettings(value) {
        this._temporalFilterSettings.internalValue = value;
    }
    resetTemporalFilterSettings() {
        this._temporalFilterSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get temporalFilterSettingsInput() {
        return this._temporalFilterSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsOutputReference = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsOutputReference;
_102 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsOutputReference[_102] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        adaptive_quantization: cdktf.stringToTerraform(struct.adaptiveQuantization),
        afd_signaling: cdktf.stringToTerraform(struct.afdSignaling),
        bitrate: cdktf.numberToTerraform(struct.bitrate),
        buf_fill_pct: cdktf.numberToTerraform(struct.bufFillPct),
        buf_size: cdktf.numberToTerraform(struct.bufSize),
        color_metadata: cdktf.stringToTerraform(struct.colorMetadata),
        entropy_encoding: cdktf.stringToTerraform(struct.entropyEncoding),
        fixed_afd: cdktf.stringToTerraform(struct.fixedAfd),
        flicker_aq: cdktf.stringToTerraform(struct.flickerAq),
        force_field_pictures: cdktf.stringToTerraform(struct.forceFieldPictures),
        framerate_control: cdktf.stringToTerraform(struct.framerateControl),
        framerate_denominator: cdktf.numberToTerraform(struct.framerateDenominator),
        framerate_numerator: cdktf.numberToTerraform(struct.framerateNumerator),
        gop_b_reference: cdktf.stringToTerraform(struct.gopBReference),
        gop_closed_cadence: cdktf.numberToTerraform(struct.gopClosedCadence),
        gop_num_b_frames: cdktf.numberToTerraform(struct.gopNumBFrames),
        gop_size: cdktf.numberToTerraform(struct.gopSize),
        gop_size_units: cdktf.stringToTerraform(struct.gopSizeUnits),
        level: cdktf.stringToTerraform(struct.level),
        look_ahead_rate_control: cdktf.stringToTerraform(struct.lookAheadRateControl),
        max_bitrate: cdktf.numberToTerraform(struct.maxBitrate),
        min_i_interval: cdktf.numberToTerraform(struct.minIInterval),
        num_ref_frames: cdktf.numberToTerraform(struct.numRefFrames),
        par_control: cdktf.stringToTerraform(struct.parControl),
        par_denominator: cdktf.numberToTerraform(struct.parDenominator),
        par_numerator: cdktf.numberToTerraform(struct.parNumerator),
        profile: cdktf.stringToTerraform(struct.profile),
        quality_level: cdktf.stringToTerraform(struct.qualityLevel),
        qvbr_quality_level: cdktf.numberToTerraform(struct.qvbrQualityLevel),
        rate_control_mode: cdktf.stringToTerraform(struct.rateControlMode),
        scan_type: cdktf.stringToTerraform(struct.scanType),
        scene_change_detect: cdktf.stringToTerraform(struct.sceneChangeDetect),
        slices: cdktf.numberToTerraform(struct.slices),
        softness: cdktf.numberToTerraform(struct.softness),
        spatial_aq: cdktf.stringToTerraform(struct.spatialAq),
        subgop_length: cdktf.stringToTerraform(struct.subgopLength),
        syntax: cdktf.stringToTerraform(struct.syntax),
        temporal_aq: cdktf.stringToTerraform(struct.temporalAq),
        timecode_insertion: cdktf.stringToTerraform(struct.timecodeInsertion),
        filter_settings: medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsToTerraform(struct.filterSettings),
    };
}
exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsToTerraform = medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsToTerraform;
function medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        adaptive_quantization: {
            value: cdktf.stringToHclTerraform(struct.adaptiveQuantization),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        afd_signaling: {
            value: cdktf.stringToHclTerraform(struct.afdSignaling),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        bitrate: {
            value: cdktf.numberToHclTerraform(struct.bitrate),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        buf_fill_pct: {
            value: cdktf.numberToHclTerraform(struct.bufFillPct),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        buf_size: {
            value: cdktf.numberToHclTerraform(struct.bufSize),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        color_metadata: {
            value: cdktf.stringToHclTerraform(struct.colorMetadata),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        entropy_encoding: {
            value: cdktf.stringToHclTerraform(struct.entropyEncoding),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        fixed_afd: {
            value: cdktf.stringToHclTerraform(struct.fixedAfd),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        flicker_aq: {
            value: cdktf.stringToHclTerraform(struct.flickerAq),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        force_field_pictures: {
            value: cdktf.stringToHclTerraform(struct.forceFieldPictures),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        framerate_control: {
            value: cdktf.stringToHclTerraform(struct.framerateControl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        framerate_denominator: {
            value: cdktf.numberToHclTerraform(struct.framerateDenominator),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        framerate_numerator: {
            value: cdktf.numberToHclTerraform(struct.framerateNumerator),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        gop_b_reference: {
            value: cdktf.stringToHclTerraform(struct.gopBReference),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        gop_closed_cadence: {
            value: cdktf.numberToHclTerraform(struct.gopClosedCadence),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        gop_num_b_frames: {
            value: cdktf.numberToHclTerraform(struct.gopNumBFrames),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        gop_size: {
            value: cdktf.numberToHclTerraform(struct.gopSize),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        gop_size_units: {
            value: cdktf.stringToHclTerraform(struct.gopSizeUnits),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        level: {
            value: cdktf.stringToHclTerraform(struct.level),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        look_ahead_rate_control: {
            value: cdktf.stringToHclTerraform(struct.lookAheadRateControl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        max_bitrate: {
            value: cdktf.numberToHclTerraform(struct.maxBitrate),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        min_i_interval: {
            value: cdktf.numberToHclTerraform(struct.minIInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        num_ref_frames: {
            value: cdktf.numberToHclTerraform(struct.numRefFrames),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        par_control: {
            value: cdktf.stringToHclTerraform(struct.parControl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        par_denominator: {
            value: cdktf.numberToHclTerraform(struct.parDenominator),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        par_numerator: {
            value: cdktf.numberToHclTerraform(struct.parNumerator),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        profile: {
            value: cdktf.stringToHclTerraform(struct.profile),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        quality_level: {
            value: cdktf.stringToHclTerraform(struct.qualityLevel),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        qvbr_quality_level: {
            value: cdktf.numberToHclTerraform(struct.qvbrQualityLevel),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        rate_control_mode: {
            value: cdktf.stringToHclTerraform(struct.rateControlMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        scan_type: {
            value: cdktf.stringToHclTerraform(struct.scanType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        scene_change_detect: {
            value: cdktf.stringToHclTerraform(struct.sceneChangeDetect),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        slices: {
            value: cdktf.numberToHclTerraform(struct.slices),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        softness: {
            value: cdktf.numberToHclTerraform(struct.softness),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        spatial_aq: {
            value: cdktf.stringToHclTerraform(struct.spatialAq),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        subgop_length: {
            value: cdktf.stringToHclTerraform(struct.subgopLength),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        syntax: {
            value: cdktf.stringToHclTerraform(struct.syntax),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        temporal_aq: {
            value: cdktf.stringToHclTerraform(struct.temporalAq),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        timecode_insertion: {
            value: cdktf.stringToHclTerraform(struct.timecodeInsertion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        filter_settings: {
            value: medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsToHclTerraform(struct.filterSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsToHclTerraform = medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsToHclTerraform;
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // filter_settings - computed: false, optional: true, required: false
        this._filterSettings = new MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsOutputReference(this, "filter_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._adaptiveQuantization !== undefined) {
            hasAnyValues = true;
            internalValueResult.adaptiveQuantization = this._adaptiveQuantization;
        }
        if (this._afdSignaling !== undefined) {
            hasAnyValues = true;
            internalValueResult.afdSignaling = this._afdSignaling;
        }
        if (this._bitrate !== undefined) {
            hasAnyValues = true;
            internalValueResult.bitrate = this._bitrate;
        }
        if (this._bufFillPct !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufFillPct = this._bufFillPct;
        }
        if (this._bufSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufSize = this._bufSize;
        }
        if (this._colorMetadata !== undefined) {
            hasAnyValues = true;
            internalValueResult.colorMetadata = this._colorMetadata;
        }
        if (this._entropyEncoding !== undefined) {
            hasAnyValues = true;
            internalValueResult.entropyEncoding = this._entropyEncoding;
        }
        if (this._fixedAfd !== undefined) {
            hasAnyValues = true;
            internalValueResult.fixedAfd = this._fixedAfd;
        }
        if (this._flickerAq !== undefined) {
            hasAnyValues = true;
            internalValueResult.flickerAq = this._flickerAq;
        }
        if (this._forceFieldPictures !== undefined) {
            hasAnyValues = true;
            internalValueResult.forceFieldPictures = this._forceFieldPictures;
        }
        if (this._framerateControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.framerateControl = this._framerateControl;
        }
        if (this._framerateDenominator !== undefined) {
            hasAnyValues = true;
            internalValueResult.framerateDenominator = this._framerateDenominator;
        }
        if (this._framerateNumerator !== undefined) {
            hasAnyValues = true;
            internalValueResult.framerateNumerator = this._framerateNumerator;
        }
        if (this._gopBReference !== undefined) {
            hasAnyValues = true;
            internalValueResult.gopBReference = this._gopBReference;
        }
        if (this._gopClosedCadence !== undefined) {
            hasAnyValues = true;
            internalValueResult.gopClosedCadence = this._gopClosedCadence;
        }
        if (this._gopNumBFrames !== undefined) {
            hasAnyValues = true;
            internalValueResult.gopNumBFrames = this._gopNumBFrames;
        }
        if (this._gopSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.gopSize = this._gopSize;
        }
        if (this._gopSizeUnits !== undefined) {
            hasAnyValues = true;
            internalValueResult.gopSizeUnits = this._gopSizeUnits;
        }
        if (this._level !== undefined) {
            hasAnyValues = true;
            internalValueResult.level = this._level;
        }
        if (this._lookAheadRateControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.lookAheadRateControl = this._lookAheadRateControl;
        }
        if (this._maxBitrate !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxBitrate = this._maxBitrate;
        }
        if (this._minIInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.minIInterval = this._minIInterval;
        }
        if (this._numRefFrames !== undefined) {
            hasAnyValues = true;
            internalValueResult.numRefFrames = this._numRefFrames;
        }
        if (this._parControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.parControl = this._parControl;
        }
        if (this._parDenominator !== undefined) {
            hasAnyValues = true;
            internalValueResult.parDenominator = this._parDenominator;
        }
        if (this._parNumerator !== undefined) {
            hasAnyValues = true;
            internalValueResult.parNumerator = this._parNumerator;
        }
        if (this._profile !== undefined) {
            hasAnyValues = true;
            internalValueResult.profile = this._profile;
        }
        if (this._qualityLevel !== undefined) {
            hasAnyValues = true;
            internalValueResult.qualityLevel = this._qualityLevel;
        }
        if (this._qvbrQualityLevel !== undefined) {
            hasAnyValues = true;
            internalValueResult.qvbrQualityLevel = this._qvbrQualityLevel;
        }
        if (this._rateControlMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.rateControlMode = this._rateControlMode;
        }
        if (this._scanType !== undefined) {
            hasAnyValues = true;
            internalValueResult.scanType = this._scanType;
        }
        if (this._sceneChangeDetect !== undefined) {
            hasAnyValues = true;
            internalValueResult.sceneChangeDetect = this._sceneChangeDetect;
        }
        if (this._slices !== undefined) {
            hasAnyValues = true;
            internalValueResult.slices = this._slices;
        }
        if (this._softness !== undefined) {
            hasAnyValues = true;
            internalValueResult.softness = this._softness;
        }
        if (this._spatialAq !== undefined) {
            hasAnyValues = true;
            internalValueResult.spatialAq = this._spatialAq;
        }
        if (this._subgopLength !== undefined) {
            hasAnyValues = true;
            internalValueResult.subgopLength = this._subgopLength;
        }
        if (this._syntax !== undefined) {
            hasAnyValues = true;
            internalValueResult.syntax = this._syntax;
        }
        if (this._temporalAq !== undefined) {
            hasAnyValues = true;
            internalValueResult.temporalAq = this._temporalAq;
        }
        if (this._timecodeInsertion !== undefined) {
            hasAnyValues = true;
            internalValueResult.timecodeInsertion = this._timecodeInsertion;
        }
        if (this._filterSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.filterSettings = this._filterSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._adaptiveQuantization = undefined;
            this._afdSignaling = undefined;
            this._bitrate = undefined;
            this._bufFillPct = undefined;
            this._bufSize = undefined;
            this._colorMetadata = undefined;
            this._entropyEncoding = undefined;
            this._fixedAfd = undefined;
            this._flickerAq = undefined;
            this._forceFieldPictures = undefined;
            this._framerateControl = undefined;
            this._framerateDenominator = undefined;
            this._framerateNumerator = undefined;
            this._gopBReference = undefined;
            this._gopClosedCadence = undefined;
            this._gopNumBFrames = undefined;
            this._gopSize = undefined;
            this._gopSizeUnits = undefined;
            this._level = undefined;
            this._lookAheadRateControl = undefined;
            this._maxBitrate = undefined;
            this._minIInterval = undefined;
            this._numRefFrames = undefined;
            this._parControl = undefined;
            this._parDenominator = undefined;
            this._parNumerator = undefined;
            this._profile = undefined;
            this._qualityLevel = undefined;
            this._qvbrQualityLevel = undefined;
            this._rateControlMode = undefined;
            this._scanType = undefined;
            this._sceneChangeDetect = undefined;
            this._slices = undefined;
            this._softness = undefined;
            this._spatialAq = undefined;
            this._subgopLength = undefined;
            this._syntax = undefined;
            this._temporalAq = undefined;
            this._timecodeInsertion = undefined;
            this._filterSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._adaptiveQuantization = value.adaptiveQuantization;
            this._afdSignaling = value.afdSignaling;
            this._bitrate = value.bitrate;
            this._bufFillPct = value.bufFillPct;
            this._bufSize = value.bufSize;
            this._colorMetadata = value.colorMetadata;
            this._entropyEncoding = value.entropyEncoding;
            this._fixedAfd = value.fixedAfd;
            this._flickerAq = value.flickerAq;
            this._forceFieldPictures = value.forceFieldPictures;
            this._framerateControl = value.framerateControl;
            this._framerateDenominator = value.framerateDenominator;
            this._framerateNumerator = value.framerateNumerator;
            this._gopBReference = value.gopBReference;
            this._gopClosedCadence = value.gopClosedCadence;
            this._gopNumBFrames = value.gopNumBFrames;
            this._gopSize = value.gopSize;
            this._gopSizeUnits = value.gopSizeUnits;
            this._level = value.level;
            this._lookAheadRateControl = value.lookAheadRateControl;
            this._maxBitrate = value.maxBitrate;
            this._minIInterval = value.minIInterval;
            this._numRefFrames = value.numRefFrames;
            this._parControl = value.parControl;
            this._parDenominator = value.parDenominator;
            this._parNumerator = value.parNumerator;
            this._profile = value.profile;
            this._qualityLevel = value.qualityLevel;
            this._qvbrQualityLevel = value.qvbrQualityLevel;
            this._rateControlMode = value.rateControlMode;
            this._scanType = value.scanType;
            this._sceneChangeDetect = value.sceneChangeDetect;
            this._slices = value.slices;
            this._softness = value.softness;
            this._spatialAq = value.spatialAq;
            this._subgopLength = value.subgopLength;
            this._syntax = value.syntax;
            this._temporalAq = value.temporalAq;
            this._timecodeInsertion = value.timecodeInsertion;
            this._filterSettings.internalValue = value.filterSettings;
        }
    }
    get adaptiveQuantization() {
        return this.getStringAttribute('adaptive_quantization');
    }
    set adaptiveQuantization(value) {
        this._adaptiveQuantization = value;
    }
    resetAdaptiveQuantization() {
        this._adaptiveQuantization = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get adaptiveQuantizationInput() {
        return this._adaptiveQuantization;
    }
    get afdSignaling() {
        return this.getStringAttribute('afd_signaling');
    }
    set afdSignaling(value) {
        this._afdSignaling = value;
    }
    resetAfdSignaling() {
        this._afdSignaling = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get afdSignalingInput() {
        return this._afdSignaling;
    }
    get bitrate() {
        return this.getNumberAttribute('bitrate');
    }
    set bitrate(value) {
        this._bitrate = value;
    }
    resetBitrate() {
        this._bitrate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bitrateInput() {
        return this._bitrate;
    }
    get bufFillPct() {
        return this.getNumberAttribute('buf_fill_pct');
    }
    set bufFillPct(value) {
        this._bufFillPct = value;
    }
    resetBufFillPct() {
        this._bufFillPct = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufFillPctInput() {
        return this._bufFillPct;
    }
    get bufSize() {
        return this.getNumberAttribute('buf_size');
    }
    set bufSize(value) {
        this._bufSize = value;
    }
    resetBufSize() {
        this._bufSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufSizeInput() {
        return this._bufSize;
    }
    get colorMetadata() {
        return this.getStringAttribute('color_metadata');
    }
    set colorMetadata(value) {
        this._colorMetadata = value;
    }
    resetColorMetadata() {
        this._colorMetadata = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get colorMetadataInput() {
        return this._colorMetadata;
    }
    get entropyEncoding() {
        return this.getStringAttribute('entropy_encoding');
    }
    set entropyEncoding(value) {
        this._entropyEncoding = value;
    }
    resetEntropyEncoding() {
        this._entropyEncoding = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get entropyEncodingInput() {
        return this._entropyEncoding;
    }
    get fixedAfd() {
        return this.getStringAttribute('fixed_afd');
    }
    set fixedAfd(value) {
        this._fixedAfd = value;
    }
    resetFixedAfd() {
        this._fixedAfd = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fixedAfdInput() {
        return this._fixedAfd;
    }
    get flickerAq() {
        return this.getStringAttribute('flicker_aq');
    }
    set flickerAq(value) {
        this._flickerAq = value;
    }
    resetFlickerAq() {
        this._flickerAq = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get flickerAqInput() {
        return this._flickerAq;
    }
    get forceFieldPictures() {
        return this.getStringAttribute('force_field_pictures');
    }
    set forceFieldPictures(value) {
        this._forceFieldPictures = value;
    }
    resetForceFieldPictures() {
        this._forceFieldPictures = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get forceFieldPicturesInput() {
        return this._forceFieldPictures;
    }
    get framerateControl() {
        return this.getStringAttribute('framerate_control');
    }
    set framerateControl(value) {
        this._framerateControl = value;
    }
    resetFramerateControl() {
        this._framerateControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get framerateControlInput() {
        return this._framerateControl;
    }
    get framerateDenominator() {
        return this.getNumberAttribute('framerate_denominator');
    }
    set framerateDenominator(value) {
        this._framerateDenominator = value;
    }
    resetFramerateDenominator() {
        this._framerateDenominator = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get framerateDenominatorInput() {
        return this._framerateDenominator;
    }
    get framerateNumerator() {
        return this.getNumberAttribute('framerate_numerator');
    }
    set framerateNumerator(value) {
        this._framerateNumerator = value;
    }
    resetFramerateNumerator() {
        this._framerateNumerator = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get framerateNumeratorInput() {
        return this._framerateNumerator;
    }
    get gopBReference() {
        return this.getStringAttribute('gop_b_reference');
    }
    set gopBReference(value) {
        this._gopBReference = value;
    }
    resetGopBReference() {
        this._gopBReference = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gopBReferenceInput() {
        return this._gopBReference;
    }
    get gopClosedCadence() {
        return this.getNumberAttribute('gop_closed_cadence');
    }
    set gopClosedCadence(value) {
        this._gopClosedCadence = value;
    }
    resetGopClosedCadence() {
        this._gopClosedCadence = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gopClosedCadenceInput() {
        return this._gopClosedCadence;
    }
    get gopNumBFrames() {
        return this.getNumberAttribute('gop_num_b_frames');
    }
    set gopNumBFrames(value) {
        this._gopNumBFrames = value;
    }
    resetGopNumBFrames() {
        this._gopNumBFrames = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gopNumBFramesInput() {
        return this._gopNumBFrames;
    }
    get gopSize() {
        return this.getNumberAttribute('gop_size');
    }
    set gopSize(value) {
        this._gopSize = value;
    }
    resetGopSize() {
        this._gopSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gopSizeInput() {
        return this._gopSize;
    }
    get gopSizeUnits() {
        return this.getStringAttribute('gop_size_units');
    }
    set gopSizeUnits(value) {
        this._gopSizeUnits = value;
    }
    resetGopSizeUnits() {
        this._gopSizeUnits = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gopSizeUnitsInput() {
        return this._gopSizeUnits;
    }
    get level() {
        return this.getStringAttribute('level');
    }
    set level(value) {
        this._level = value;
    }
    resetLevel() {
        this._level = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get levelInput() {
        return this._level;
    }
    get lookAheadRateControl() {
        return this.getStringAttribute('look_ahead_rate_control');
    }
    set lookAheadRateControl(value) {
        this._lookAheadRateControl = value;
    }
    resetLookAheadRateControl() {
        this._lookAheadRateControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lookAheadRateControlInput() {
        return this._lookAheadRateControl;
    }
    get maxBitrate() {
        return this.getNumberAttribute('max_bitrate');
    }
    set maxBitrate(value) {
        this._maxBitrate = value;
    }
    resetMaxBitrate() {
        this._maxBitrate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxBitrateInput() {
        return this._maxBitrate;
    }
    get minIInterval() {
        return this.getNumberAttribute('min_i_interval');
    }
    set minIInterval(value) {
        this._minIInterval = value;
    }
    resetMinIInterval() {
        this._minIInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minIIntervalInput() {
        return this._minIInterval;
    }
    get numRefFrames() {
        return this.getNumberAttribute('num_ref_frames');
    }
    set numRefFrames(value) {
        this._numRefFrames = value;
    }
    resetNumRefFrames() {
        this._numRefFrames = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numRefFramesInput() {
        return this._numRefFrames;
    }
    get parControl() {
        return this.getStringAttribute('par_control');
    }
    set parControl(value) {
        this._parControl = value;
    }
    resetParControl() {
        this._parControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parControlInput() {
        return this._parControl;
    }
    get parDenominator() {
        return this.getNumberAttribute('par_denominator');
    }
    set parDenominator(value) {
        this._parDenominator = value;
    }
    resetParDenominator() {
        this._parDenominator = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parDenominatorInput() {
        return this._parDenominator;
    }
    get parNumerator() {
        return this.getNumberAttribute('par_numerator');
    }
    set parNumerator(value) {
        this._parNumerator = value;
    }
    resetParNumerator() {
        this._parNumerator = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parNumeratorInput() {
        return this._parNumerator;
    }
    get profile() {
        return this.getStringAttribute('profile');
    }
    set profile(value) {
        this._profile = value;
    }
    resetProfile() {
        this._profile = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get profileInput() {
        return this._profile;
    }
    get qualityLevel() {
        return this.getStringAttribute('quality_level');
    }
    set qualityLevel(value) {
        this._qualityLevel = value;
    }
    resetQualityLevel() {
        this._qualityLevel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get qualityLevelInput() {
        return this._qualityLevel;
    }
    get qvbrQualityLevel() {
        return this.getNumberAttribute('qvbr_quality_level');
    }
    set qvbrQualityLevel(value) {
        this._qvbrQualityLevel = value;
    }
    resetQvbrQualityLevel() {
        this._qvbrQualityLevel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get qvbrQualityLevelInput() {
        return this._qvbrQualityLevel;
    }
    get rateControlMode() {
        return this.getStringAttribute('rate_control_mode');
    }
    set rateControlMode(value) {
        this._rateControlMode = value;
    }
    resetRateControlMode() {
        this._rateControlMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rateControlModeInput() {
        return this._rateControlMode;
    }
    get scanType() {
        return this.getStringAttribute('scan_type');
    }
    set scanType(value) {
        this._scanType = value;
    }
    resetScanType() {
        this._scanType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scanTypeInput() {
        return this._scanType;
    }
    get sceneChangeDetect() {
        return this.getStringAttribute('scene_change_detect');
    }
    set sceneChangeDetect(value) {
        this._sceneChangeDetect = value;
    }
    resetSceneChangeDetect() {
        this._sceneChangeDetect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sceneChangeDetectInput() {
        return this._sceneChangeDetect;
    }
    get slices() {
        return this.getNumberAttribute('slices');
    }
    set slices(value) {
        this._slices = value;
    }
    resetSlices() {
        this._slices = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get slicesInput() {
        return this._slices;
    }
    get softness() {
        return this.getNumberAttribute('softness');
    }
    set softness(value) {
        this._softness = value;
    }
    resetSoftness() {
        this._softness = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get softnessInput() {
        return this._softness;
    }
    get spatialAq() {
        return this.getStringAttribute('spatial_aq');
    }
    set spatialAq(value) {
        this._spatialAq = value;
    }
    resetSpatialAq() {
        this._spatialAq = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get spatialAqInput() {
        return this._spatialAq;
    }
    get subgopLength() {
        return this.getStringAttribute('subgop_length');
    }
    set subgopLength(value) {
        this._subgopLength = value;
    }
    resetSubgopLength() {
        this._subgopLength = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subgopLengthInput() {
        return this._subgopLength;
    }
    get syntax() {
        return this.getStringAttribute('syntax');
    }
    set syntax(value) {
        this._syntax = value;
    }
    resetSyntax() {
        this._syntax = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get syntaxInput() {
        return this._syntax;
    }
    get temporalAq() {
        return this.getStringAttribute('temporal_aq');
    }
    set temporalAq(value) {
        this._temporalAq = value;
    }
    resetTemporalAq() {
        this._temporalAq = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get temporalAqInput() {
        return this._temporalAq;
    }
    get timecodeInsertion() {
        return this.getStringAttribute('timecode_insertion');
    }
    set timecodeInsertion(value) {
        this._timecodeInsertion = value;
    }
    resetTimecodeInsertion() {
        this._timecodeInsertion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timecodeInsertionInput() {
        return this._timecodeInsertion;
    }
    get filterSettings() {
        return this._filterSettings;
    }
    putFilterSettings(value) {
        this._filterSettings.internalValue = value;
    }
    resetFilterSettings() {
        this._filterSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get filterSettingsInput() {
        return this._filterSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsOutputReference = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsOutputReference;
_103 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsOutputReference[_103] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsToTerraform = medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsToTerraform;
function medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsToHclTerraform = medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsOutputReference = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsOutputReference;
_104 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsOutputReference[_104] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsToTerraform = medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsToTerraform;
function medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsToHclTerraform = medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsToHclTerraform;
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsOutputReference = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsOutputReference;
_105 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsOutputReference[_105] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max_cll: cdktf.numberToTerraform(struct.maxCll),
        max_fall: cdktf.numberToTerraform(struct.maxFall),
    };
}
exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsToTerraform = medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsToTerraform;
function medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        max_cll: {
            value: cdktf.numberToHclTerraform(struct.maxCll),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        max_fall: {
            value: cdktf.numberToHclTerraform(struct.maxFall),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsToHclTerraform = medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsToHclTerraform;
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maxCll !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxCll = this._maxCll;
        }
        if (this._maxFall !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxFall = this._maxFall;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maxCll = undefined;
            this._maxFall = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maxCll = value.maxCll;
            this._maxFall = value.maxFall;
        }
    }
    get maxCll() {
        return this.getNumberAttribute('max_cll');
    }
    set maxCll(value) {
        this._maxCll = value;
    }
    resetMaxCll() {
        this._maxCll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxCllInput() {
        return this._maxCll;
    }
    get maxFall() {
        return this.getNumberAttribute('max_fall');
    }
    set maxFall(value) {
        this._maxFall = value;
    }
    resetMaxFall() {
        this._maxFall = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxFallInput() {
        return this._maxFall;
    }
}
exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsOutputReference = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsOutputReference;
_106 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsOutputReference[_106] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsToTerraform = medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsToTerraform;
function medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsToHclTerraform = medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsToHclTerraform;
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsOutputReference = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsOutputReference;
_107 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsOutputReference[_107] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsToTerraform = medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsToTerraform;
function medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsToHclTerraform = medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsToHclTerraform;
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsOutputReference = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsOutputReference;
_108 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsOutputReference[_108] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        color_space_passthrough_settings: medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsToTerraform(struct.colorSpacePassthroughSettings),
        dolby_vision81_settings: medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsToTerraform(struct.dolbyVision81Settings),
        hdr10_settings: medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsToTerraform(struct.hdr10Settings),
        rec601_settings: medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsToTerraform(struct.rec601Settings),
        rec709_settings: medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsToTerraform(struct.rec709Settings),
    };
}
exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsToTerraform = medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsToTerraform;
function medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        color_space_passthrough_settings: {
            value: medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsToHclTerraform(struct.colorSpacePassthroughSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsList",
        },
        dolby_vision81_settings: {
            value: medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsToHclTerraform(struct.dolbyVision81Settings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsList",
        },
        hdr10_settings: {
            value: medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsToHclTerraform(struct.hdr10Settings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsList",
        },
        rec601_settings: {
            value: medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsToHclTerraform(struct.rec601Settings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsList",
        },
        rec709_settings: {
            value: medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsToHclTerraform(struct.rec709Settings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsToHclTerraform = medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // color_space_passthrough_settings - computed: false, optional: true, required: false
        this._colorSpacePassthroughSettings = new MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsOutputReference(this, "color_space_passthrough_settings");
        // dolby_vision81_settings - computed: false, optional: true, required: false
        this._dolbyVision81Settings = new MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsOutputReference(this, "dolby_vision81_settings");
        // hdr10_settings - computed: false, optional: true, required: false
        this._hdr10Settings = new MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsOutputReference(this, "hdr10_settings");
        // rec601_settings - computed: false, optional: true, required: false
        this._rec601Settings = new MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsOutputReference(this, "rec601_settings");
        // rec709_settings - computed: false, optional: true, required: false
        this._rec709Settings = new MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsOutputReference(this, "rec709_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._colorSpacePassthroughSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.colorSpacePassthroughSettings = this._colorSpacePassthroughSettings?.internalValue;
        }
        if (this._dolbyVision81Settings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dolbyVision81Settings = this._dolbyVision81Settings?.internalValue;
        }
        if (this._hdr10Settings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.hdr10Settings = this._hdr10Settings?.internalValue;
        }
        if (this._rec601Settings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.rec601Settings = this._rec601Settings?.internalValue;
        }
        if (this._rec709Settings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.rec709Settings = this._rec709Settings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._colorSpacePassthroughSettings.internalValue = undefined;
            this._dolbyVision81Settings.internalValue = undefined;
            this._hdr10Settings.internalValue = undefined;
            this._rec601Settings.internalValue = undefined;
            this._rec709Settings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._colorSpacePassthroughSettings.internalValue = value.colorSpacePassthroughSettings;
            this._dolbyVision81Settings.internalValue = value.dolbyVision81Settings;
            this._hdr10Settings.internalValue = value.hdr10Settings;
            this._rec601Settings.internalValue = value.rec601Settings;
            this._rec709Settings.internalValue = value.rec709Settings;
        }
    }
    get colorSpacePassthroughSettings() {
        return this._colorSpacePassthroughSettings;
    }
    putColorSpacePassthroughSettings(value) {
        this._colorSpacePassthroughSettings.internalValue = value;
    }
    resetColorSpacePassthroughSettings() {
        this._colorSpacePassthroughSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get colorSpacePassthroughSettingsInput() {
        return this._colorSpacePassthroughSettings.internalValue;
    }
    get dolbyVision81Settings() {
        return this._dolbyVision81Settings;
    }
    putDolbyVision81Settings(value) {
        this._dolbyVision81Settings.internalValue = value;
    }
    resetDolbyVision81Settings() {
        this._dolbyVision81Settings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dolbyVision81SettingsInput() {
        return this._dolbyVision81Settings.internalValue;
    }
    get hdr10Settings() {
        return this._hdr10Settings;
    }
    putHdr10Settings(value) {
        this._hdr10Settings.internalValue = value;
    }
    resetHdr10Settings() {
        this._hdr10Settings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hdr10SettingsInput() {
        return this._hdr10Settings.internalValue;
    }
    get rec601Settings() {
        return this._rec601Settings;
    }
    putRec601Settings(value) {
        this._rec601Settings.internalValue = value;
    }
    resetRec601Settings() {
        this._rec601Settings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rec601SettingsInput() {
        return this._rec601Settings.internalValue;
    }
    get rec709Settings() {
        return this._rec709Settings;
    }
    putRec709Settings(value) {
        this._rec709Settings.internalValue = value;
    }
    resetRec709Settings() {
        this._rec709Settings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rec709SettingsInput() {
        return this._rec709Settings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsOutputReference = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsOutputReference;
_109 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsOutputReference[_109] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        post_filter_sharpening: cdktf.stringToTerraform(struct.postFilterSharpening),
        strength: cdktf.stringToTerraform(struct.strength),
    };
}
exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsToTerraform = medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsToTerraform;
function medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        post_filter_sharpening: {
            value: cdktf.stringToHclTerraform(struct.postFilterSharpening),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        strength: {
            value: cdktf.stringToHclTerraform(struct.strength),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsToHclTerraform = medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._postFilterSharpening !== undefined) {
            hasAnyValues = true;
            internalValueResult.postFilterSharpening = this._postFilterSharpening;
        }
        if (this._strength !== undefined) {
            hasAnyValues = true;
            internalValueResult.strength = this._strength;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._postFilterSharpening = undefined;
            this._strength = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._postFilterSharpening = value.postFilterSharpening;
            this._strength = value.strength;
        }
    }
    get postFilterSharpening() {
        return this.getStringAttribute('post_filter_sharpening');
    }
    set postFilterSharpening(value) {
        this._postFilterSharpening = value;
    }
    resetPostFilterSharpening() {
        this._postFilterSharpening = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get postFilterSharpeningInput() {
        return this._postFilterSharpening;
    }
    get strength() {
        return this.getStringAttribute('strength');
    }
    set strength(value) {
        this._strength = value;
    }
    resetStrength() {
        this._strength = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get strengthInput() {
        return this._strength;
    }
}
exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsOutputReference = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsOutputReference;
_110 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsOutputReference[_110] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        temporal_filter_settings: medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsToTerraform(struct.temporalFilterSettings),
    };
}
exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsToTerraform = medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsToTerraform;
function medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        temporal_filter_settings: {
            value: medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsToHclTerraform(struct.temporalFilterSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsToHclTerraform = medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // temporal_filter_settings - computed: false, optional: true, required: false
        this._temporalFilterSettings = new MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsOutputReference(this, "temporal_filter_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._temporalFilterSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.temporalFilterSettings = this._temporalFilterSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._temporalFilterSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._temporalFilterSettings.internalValue = value.temporalFilterSettings;
        }
    }
    get temporalFilterSettings() {
        return this._temporalFilterSettings;
    }
    putTemporalFilterSettings(value) {
        this._temporalFilterSettings.internalValue = value;
    }
    resetTemporalFilterSettings() {
        this._temporalFilterSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get temporalFilterSettingsInput() {
        return this._temporalFilterSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsOutputReference = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsOutputReference;
_111 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsOutputReference[_111] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        prefix: cdktf.stringToTerraform(struct.prefix),
        timecode_burnin_font_size: cdktf.stringToTerraform(struct.timecodeBurninFontSize),
        timecode_burnin_position: cdktf.stringToTerraform(struct.timecodeBurninPosition),
    };
}
exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettingsToTerraform = medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettingsToTerraform;
function medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        prefix: {
            value: cdktf.stringToHclTerraform(struct.prefix),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        timecode_burnin_font_size: {
            value: cdktf.stringToHclTerraform(struct.timecodeBurninFontSize),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        timecode_burnin_position: {
            value: cdktf.stringToHclTerraform(struct.timecodeBurninPosition),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettingsToHclTerraform = medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._prefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefix = this._prefix;
        }
        if (this._timecodeBurninFontSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.timecodeBurninFontSize = this._timecodeBurninFontSize;
        }
        if (this._timecodeBurninPosition !== undefined) {
            hasAnyValues = true;
            internalValueResult.timecodeBurninPosition = this._timecodeBurninPosition;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._prefix = undefined;
            this._timecodeBurninFontSize = undefined;
            this._timecodeBurninPosition = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._prefix = value.prefix;
            this._timecodeBurninFontSize = value.timecodeBurninFontSize;
            this._timecodeBurninPosition = value.timecodeBurninPosition;
        }
    }
    get prefix() {
        return this.getStringAttribute('prefix');
    }
    set prefix(value) {
        this._prefix = value;
    }
    resetPrefix() {
        this._prefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prefixInput() {
        return this._prefix;
    }
    get timecodeBurninFontSize() {
        return this.getStringAttribute('timecode_burnin_font_size');
    }
    set timecodeBurninFontSize(value) {
        this._timecodeBurninFontSize = value;
    }
    resetTimecodeBurninFontSize() {
        this._timecodeBurninFontSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timecodeBurninFontSizeInput() {
        return this._timecodeBurninFontSize;
    }
    get timecodeBurninPosition() {
        return this.getStringAttribute('timecode_burnin_position');
    }
    set timecodeBurninPosition(value) {
        this._timecodeBurninPosition = value;
    }
    resetTimecodeBurninPosition() {
        this._timecodeBurninPosition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timecodeBurninPositionInput() {
        return this._timecodeBurninPosition;
    }
}
exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettingsOutputReference = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettingsOutputReference;
_112 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettingsOutputReference[_112] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        adaptive_quantization: cdktf.stringToTerraform(struct.adaptiveQuantization),
        afd_signaling: cdktf.stringToTerraform(struct.afdSignaling),
        alternative_transfer_function: cdktf.stringToTerraform(struct.alternativeTransferFunction),
        bitrate: cdktf.numberToTerraform(struct.bitrate),
        buf_size: cdktf.numberToTerraform(struct.bufSize),
        color_metadata: cdktf.stringToTerraform(struct.colorMetadata),
        fixed_afd: cdktf.stringToTerraform(struct.fixedAfd),
        flicker_aq: cdktf.stringToTerraform(struct.flickerAq),
        framerate_denominator: cdktf.numberToTerraform(struct.framerateDenominator),
        framerate_numerator: cdktf.numberToTerraform(struct.framerateNumerator),
        gop_closed_cadence: cdktf.numberToTerraform(struct.gopClosedCadence),
        gop_size: cdktf.numberToTerraform(struct.gopSize),
        gop_size_units: cdktf.stringToTerraform(struct.gopSizeUnits),
        level: cdktf.stringToTerraform(struct.level),
        look_ahead_rate_control: cdktf.stringToTerraform(struct.lookAheadRateControl),
        max_bitrate: cdktf.numberToTerraform(struct.maxBitrate),
        min_i_interval: cdktf.numberToTerraform(struct.minIInterval),
        par_denominator: cdktf.numberToTerraform(struct.parDenominator),
        par_numerator: cdktf.numberToTerraform(struct.parNumerator),
        profile: cdktf.stringToTerraform(struct.profile),
        qvbr_quality_level: cdktf.numberToTerraform(struct.qvbrQualityLevel),
        rate_control_mode: cdktf.stringToTerraform(struct.rateControlMode),
        scan_type: cdktf.stringToTerraform(struct.scanType),
        scene_change_detect: cdktf.stringToTerraform(struct.sceneChangeDetect),
        slices: cdktf.numberToTerraform(struct.slices),
        tier: cdktf.stringToTerraform(struct.tier),
        timecode_insertion: cdktf.stringToTerraform(struct.timecodeInsertion),
        color_space_settings: medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsToTerraform(struct.colorSpaceSettings),
        filter_settings: medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsToTerraform(struct.filterSettings),
        timecode_burnin_settings: medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettingsToTerraform(struct.timecodeBurninSettings),
    };
}
exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsToTerraform = medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsToTerraform;
function medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        adaptive_quantization: {
            value: cdktf.stringToHclTerraform(struct.adaptiveQuantization),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        afd_signaling: {
            value: cdktf.stringToHclTerraform(struct.afdSignaling),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        alternative_transfer_function: {
            value: cdktf.stringToHclTerraform(struct.alternativeTransferFunction),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        bitrate: {
            value: cdktf.numberToHclTerraform(struct.bitrate),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        buf_size: {
            value: cdktf.numberToHclTerraform(struct.bufSize),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        color_metadata: {
            value: cdktf.stringToHclTerraform(struct.colorMetadata),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        fixed_afd: {
            value: cdktf.stringToHclTerraform(struct.fixedAfd),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        flicker_aq: {
            value: cdktf.stringToHclTerraform(struct.flickerAq),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        framerate_denominator: {
            value: cdktf.numberToHclTerraform(struct.framerateDenominator),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        framerate_numerator: {
            value: cdktf.numberToHclTerraform(struct.framerateNumerator),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        gop_closed_cadence: {
            value: cdktf.numberToHclTerraform(struct.gopClosedCadence),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        gop_size: {
            value: cdktf.numberToHclTerraform(struct.gopSize),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        gop_size_units: {
            value: cdktf.stringToHclTerraform(struct.gopSizeUnits),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        level: {
            value: cdktf.stringToHclTerraform(struct.level),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        look_ahead_rate_control: {
            value: cdktf.stringToHclTerraform(struct.lookAheadRateControl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        max_bitrate: {
            value: cdktf.numberToHclTerraform(struct.maxBitrate),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        min_i_interval: {
            value: cdktf.numberToHclTerraform(struct.minIInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        par_denominator: {
            value: cdktf.numberToHclTerraform(struct.parDenominator),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        par_numerator: {
            value: cdktf.numberToHclTerraform(struct.parNumerator),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        profile: {
            value: cdktf.stringToHclTerraform(struct.profile),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        qvbr_quality_level: {
            value: cdktf.numberToHclTerraform(struct.qvbrQualityLevel),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        rate_control_mode: {
            value: cdktf.stringToHclTerraform(struct.rateControlMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        scan_type: {
            value: cdktf.stringToHclTerraform(struct.scanType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        scene_change_detect: {
            value: cdktf.stringToHclTerraform(struct.sceneChangeDetect),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        slices: {
            value: cdktf.numberToHclTerraform(struct.slices),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        tier: {
            value: cdktf.stringToHclTerraform(struct.tier),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        timecode_insertion: {
            value: cdktf.stringToHclTerraform(struct.timecodeInsertion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        color_space_settings: {
            value: medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsToHclTerraform(struct.colorSpaceSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsList",
        },
        filter_settings: {
            value: medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsToHclTerraform(struct.filterSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsList",
        },
        timecode_burnin_settings: {
            value: medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettingsToHclTerraform(struct.timecodeBurninSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsToHclTerraform = medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsToHclTerraform;
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // color_space_settings - computed: false, optional: true, required: false
        this._colorSpaceSettings = new MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsOutputReference(this, "color_space_settings");
        // filter_settings - computed: false, optional: true, required: false
        this._filterSettings = new MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsOutputReference(this, "filter_settings");
        // timecode_burnin_settings - computed: false, optional: true, required: false
        this._timecodeBurninSettings = new MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettingsOutputReference(this, "timecode_burnin_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._adaptiveQuantization !== undefined) {
            hasAnyValues = true;
            internalValueResult.adaptiveQuantization = this._adaptiveQuantization;
        }
        if (this._afdSignaling !== undefined) {
            hasAnyValues = true;
            internalValueResult.afdSignaling = this._afdSignaling;
        }
        if (this._alternativeTransferFunction !== undefined) {
            hasAnyValues = true;
            internalValueResult.alternativeTransferFunction = this._alternativeTransferFunction;
        }
        if (this._bitrate !== undefined) {
            hasAnyValues = true;
            internalValueResult.bitrate = this._bitrate;
        }
        if (this._bufSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.bufSize = this._bufSize;
        }
        if (this._colorMetadata !== undefined) {
            hasAnyValues = true;
            internalValueResult.colorMetadata = this._colorMetadata;
        }
        if (this._fixedAfd !== undefined) {
            hasAnyValues = true;
            internalValueResult.fixedAfd = this._fixedAfd;
        }
        if (this._flickerAq !== undefined) {
            hasAnyValues = true;
            internalValueResult.flickerAq = this._flickerAq;
        }
        if (this._framerateDenominator !== undefined) {
            hasAnyValues = true;
            internalValueResult.framerateDenominator = this._framerateDenominator;
        }
        if (this._framerateNumerator !== undefined) {
            hasAnyValues = true;
            internalValueResult.framerateNumerator = this._framerateNumerator;
        }
        if (this._gopClosedCadence !== undefined) {
            hasAnyValues = true;
            internalValueResult.gopClosedCadence = this._gopClosedCadence;
        }
        if (this._gopSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.gopSize = this._gopSize;
        }
        if (this._gopSizeUnits !== undefined) {
            hasAnyValues = true;
            internalValueResult.gopSizeUnits = this._gopSizeUnits;
        }
        if (this._level !== undefined) {
            hasAnyValues = true;
            internalValueResult.level = this._level;
        }
        if (this._lookAheadRateControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.lookAheadRateControl = this._lookAheadRateControl;
        }
        if (this._maxBitrate !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxBitrate = this._maxBitrate;
        }
        if (this._minIInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.minIInterval = this._minIInterval;
        }
        if (this._parDenominator !== undefined) {
            hasAnyValues = true;
            internalValueResult.parDenominator = this._parDenominator;
        }
        if (this._parNumerator !== undefined) {
            hasAnyValues = true;
            internalValueResult.parNumerator = this._parNumerator;
        }
        if (this._profile !== undefined) {
            hasAnyValues = true;
            internalValueResult.profile = this._profile;
        }
        if (this._qvbrQualityLevel !== undefined) {
            hasAnyValues = true;
            internalValueResult.qvbrQualityLevel = this._qvbrQualityLevel;
        }
        if (this._rateControlMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.rateControlMode = this._rateControlMode;
        }
        if (this._scanType !== undefined) {
            hasAnyValues = true;
            internalValueResult.scanType = this._scanType;
        }
        if (this._sceneChangeDetect !== undefined) {
            hasAnyValues = true;
            internalValueResult.sceneChangeDetect = this._sceneChangeDetect;
        }
        if (this._slices !== undefined) {
            hasAnyValues = true;
            internalValueResult.slices = this._slices;
        }
        if (this._tier !== undefined) {
            hasAnyValues = true;
            internalValueResult.tier = this._tier;
        }
        if (this._timecodeInsertion !== undefined) {
            hasAnyValues = true;
            internalValueResult.timecodeInsertion = this._timecodeInsertion;
        }
        if (this._colorSpaceSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.colorSpaceSettings = this._colorSpaceSettings?.internalValue;
        }
        if (this._filterSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.filterSettings = this._filterSettings?.internalValue;
        }
        if (this._timecodeBurninSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.timecodeBurninSettings = this._timecodeBurninSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._adaptiveQuantization = undefined;
            this._afdSignaling = undefined;
            this._alternativeTransferFunction = undefined;
            this._bitrate = undefined;
            this._bufSize = undefined;
            this._colorMetadata = undefined;
            this._fixedAfd = undefined;
            this._flickerAq = undefined;
            this._framerateDenominator = undefined;
            this._framerateNumerator = undefined;
            this._gopClosedCadence = undefined;
            this._gopSize = undefined;
            this._gopSizeUnits = undefined;
            this._level = undefined;
            this._lookAheadRateControl = undefined;
            this._maxBitrate = undefined;
            this._minIInterval = undefined;
            this._parDenominator = undefined;
            this._parNumerator = undefined;
            this._profile = undefined;
            this._qvbrQualityLevel = undefined;
            this._rateControlMode = undefined;
            this._scanType = undefined;
            this._sceneChangeDetect = undefined;
            this._slices = undefined;
            this._tier = undefined;
            this._timecodeInsertion = undefined;
            this._colorSpaceSettings.internalValue = undefined;
            this._filterSettings.internalValue = undefined;
            this._timecodeBurninSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._adaptiveQuantization = value.adaptiveQuantization;
            this._afdSignaling = value.afdSignaling;
            this._alternativeTransferFunction = value.alternativeTransferFunction;
            this._bitrate = value.bitrate;
            this._bufSize = value.bufSize;
            this._colorMetadata = value.colorMetadata;
            this._fixedAfd = value.fixedAfd;
            this._flickerAq = value.flickerAq;
            this._framerateDenominator = value.framerateDenominator;
            this._framerateNumerator = value.framerateNumerator;
            this._gopClosedCadence = value.gopClosedCadence;
            this._gopSize = value.gopSize;
            this._gopSizeUnits = value.gopSizeUnits;
            this._level = value.level;
            this._lookAheadRateControl = value.lookAheadRateControl;
            this._maxBitrate = value.maxBitrate;
            this._minIInterval = value.minIInterval;
            this._parDenominator = value.parDenominator;
            this._parNumerator = value.parNumerator;
            this._profile = value.profile;
            this._qvbrQualityLevel = value.qvbrQualityLevel;
            this._rateControlMode = value.rateControlMode;
            this._scanType = value.scanType;
            this._sceneChangeDetect = value.sceneChangeDetect;
            this._slices = value.slices;
            this._tier = value.tier;
            this._timecodeInsertion = value.timecodeInsertion;
            this._colorSpaceSettings.internalValue = value.colorSpaceSettings;
            this._filterSettings.internalValue = value.filterSettings;
            this._timecodeBurninSettings.internalValue = value.timecodeBurninSettings;
        }
    }
    get adaptiveQuantization() {
        return this.getStringAttribute('adaptive_quantization');
    }
    set adaptiveQuantization(value) {
        this._adaptiveQuantization = value;
    }
    resetAdaptiveQuantization() {
        this._adaptiveQuantization = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get adaptiveQuantizationInput() {
        return this._adaptiveQuantization;
    }
    get afdSignaling() {
        return this.getStringAttribute('afd_signaling');
    }
    set afdSignaling(value) {
        this._afdSignaling = value;
    }
    resetAfdSignaling() {
        this._afdSignaling = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get afdSignalingInput() {
        return this._afdSignaling;
    }
    get alternativeTransferFunction() {
        return this.getStringAttribute('alternative_transfer_function');
    }
    set alternativeTransferFunction(value) {
        this._alternativeTransferFunction = value;
    }
    resetAlternativeTransferFunction() {
        this._alternativeTransferFunction = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get alternativeTransferFunctionInput() {
        return this._alternativeTransferFunction;
    }
    get bitrate() {
        return this.getNumberAttribute('bitrate');
    }
    set bitrate(value) {
        this._bitrate = value;
    }
    // Temporarily expose input value. Use with caution.
    get bitrateInput() {
        return this._bitrate;
    }
    get bufSize() {
        return this.getNumberAttribute('buf_size');
    }
    set bufSize(value) {
        this._bufSize = value;
    }
    resetBufSize() {
        this._bufSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bufSizeInput() {
        return this._bufSize;
    }
    get colorMetadata() {
        return this.getStringAttribute('color_metadata');
    }
    set colorMetadata(value) {
        this._colorMetadata = value;
    }
    resetColorMetadata() {
        this._colorMetadata = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get colorMetadataInput() {
        return this._colorMetadata;
    }
    get fixedAfd() {
        return this.getStringAttribute('fixed_afd');
    }
    set fixedAfd(value) {
        this._fixedAfd = value;
    }
    resetFixedAfd() {
        this._fixedAfd = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fixedAfdInput() {
        return this._fixedAfd;
    }
    get flickerAq() {
        return this.getStringAttribute('flicker_aq');
    }
    set flickerAq(value) {
        this._flickerAq = value;
    }
    resetFlickerAq() {
        this._flickerAq = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get flickerAqInput() {
        return this._flickerAq;
    }
    get framerateDenominator() {
        return this.getNumberAttribute('framerate_denominator');
    }
    set framerateDenominator(value) {
        this._framerateDenominator = value;
    }
    // Temporarily expose input value. Use with caution.
    get framerateDenominatorInput() {
        return this._framerateDenominator;
    }
    get framerateNumerator() {
        return this.getNumberAttribute('framerate_numerator');
    }
    set framerateNumerator(value) {
        this._framerateNumerator = value;
    }
    // Temporarily expose input value. Use with caution.
    get framerateNumeratorInput() {
        return this._framerateNumerator;
    }
    get gopClosedCadence() {
        return this.getNumberAttribute('gop_closed_cadence');
    }
    set gopClosedCadence(value) {
        this._gopClosedCadence = value;
    }
    resetGopClosedCadence() {
        this._gopClosedCadence = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gopClosedCadenceInput() {
        return this._gopClosedCadence;
    }
    get gopSize() {
        return this.getNumberAttribute('gop_size');
    }
    set gopSize(value) {
        this._gopSize = value;
    }
    resetGopSize() {
        this._gopSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gopSizeInput() {
        return this._gopSize;
    }
    get gopSizeUnits() {
        return this.getStringAttribute('gop_size_units');
    }
    set gopSizeUnits(value) {
        this._gopSizeUnits = value;
    }
    resetGopSizeUnits() {
        this._gopSizeUnits = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gopSizeUnitsInput() {
        return this._gopSizeUnits;
    }
    get level() {
        return this.getStringAttribute('level');
    }
    set level(value) {
        this._level = value;
    }
    resetLevel() {
        this._level = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get levelInput() {
        return this._level;
    }
    get lookAheadRateControl() {
        return this.getStringAttribute('look_ahead_rate_control');
    }
    set lookAheadRateControl(value) {
        this._lookAheadRateControl = value;
    }
    resetLookAheadRateControl() {
        this._lookAheadRateControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lookAheadRateControlInput() {
        return this._lookAheadRateControl;
    }
    get maxBitrate() {
        return this.getNumberAttribute('max_bitrate');
    }
    set maxBitrate(value) {
        this._maxBitrate = value;
    }
    resetMaxBitrate() {
        this._maxBitrate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxBitrateInput() {
        return this._maxBitrate;
    }
    get minIInterval() {
        return this.getNumberAttribute('min_i_interval');
    }
    set minIInterval(value) {
        this._minIInterval = value;
    }
    resetMinIInterval() {
        this._minIInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minIIntervalInput() {
        return this._minIInterval;
    }
    get parDenominator() {
        return this.getNumberAttribute('par_denominator');
    }
    set parDenominator(value) {
        this._parDenominator = value;
    }
    resetParDenominator() {
        this._parDenominator = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parDenominatorInput() {
        return this._parDenominator;
    }
    get parNumerator() {
        return this.getNumberAttribute('par_numerator');
    }
    set parNumerator(value) {
        this._parNumerator = value;
    }
    resetParNumerator() {
        this._parNumerator = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parNumeratorInput() {
        return this._parNumerator;
    }
    get profile() {
        return this.getStringAttribute('profile');
    }
    set profile(value) {
        this._profile = value;
    }
    resetProfile() {
        this._profile = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get profileInput() {
        return this._profile;
    }
    get qvbrQualityLevel() {
        return this.getNumberAttribute('qvbr_quality_level');
    }
    set qvbrQualityLevel(value) {
        this._qvbrQualityLevel = value;
    }
    resetQvbrQualityLevel() {
        this._qvbrQualityLevel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get qvbrQualityLevelInput() {
        return this._qvbrQualityLevel;
    }
    get rateControlMode() {
        return this.getStringAttribute('rate_control_mode');
    }
    set rateControlMode(value) {
        this._rateControlMode = value;
    }
    resetRateControlMode() {
        this._rateControlMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rateControlModeInput() {
        return this._rateControlMode;
    }
    get scanType() {
        return this.getStringAttribute('scan_type');
    }
    set scanType(value) {
        this._scanType = value;
    }
    resetScanType() {
        this._scanType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scanTypeInput() {
        return this._scanType;
    }
    get sceneChangeDetect() {
        return this.getStringAttribute('scene_change_detect');
    }
    set sceneChangeDetect(value) {
        this._sceneChangeDetect = value;
    }
    resetSceneChangeDetect() {
        this._sceneChangeDetect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sceneChangeDetectInput() {
        return this._sceneChangeDetect;
    }
    get slices() {
        return this.getNumberAttribute('slices');
    }
    set slices(value) {
        this._slices = value;
    }
    resetSlices() {
        this._slices = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get slicesInput() {
        return this._slices;
    }
    get tier() {
        return this.getStringAttribute('tier');
    }
    set tier(value) {
        this._tier = value;
    }
    resetTier() {
        this._tier = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tierInput() {
        return this._tier;
    }
    get timecodeInsertion() {
        return this.getStringAttribute('timecode_insertion');
    }
    set timecodeInsertion(value) {
        this._timecodeInsertion = value;
    }
    resetTimecodeInsertion() {
        this._timecodeInsertion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timecodeInsertionInput() {
        return this._timecodeInsertion;
    }
    get colorSpaceSettings() {
        return this._colorSpaceSettings;
    }
    putColorSpaceSettings(value) {
        this._colorSpaceSettings.internalValue = value;
    }
    resetColorSpaceSettings() {
        this._colorSpaceSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get colorSpaceSettingsInput() {
        return this._colorSpaceSettings.internalValue;
    }
    get filterSettings() {
        return this._filterSettings;
    }
    putFilterSettings(value) {
        this._filterSettings.internalValue = value;
    }
    resetFilterSettings() {
        this._filterSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get filterSettingsInput() {
        return this._filterSettings.internalValue;
    }
    get timecodeBurninSettings() {
        return this._timecodeBurninSettings;
    }
    putTimecodeBurninSettings(value) {
        this._timecodeBurninSettings.internalValue = value;
    }
    resetTimecodeBurninSettings() {
        this._timecodeBurninSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timecodeBurninSettingsInput() {
        return this._timecodeBurninSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsOutputReference = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsOutputReference;
_113 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsOutputReference[_113] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        frame_capture_settings: medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsToTerraform(struct.frameCaptureSettings),
        h264_settings: medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsToTerraform(struct.h264Settings),
        h265_settings: medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsToTerraform(struct.h265Settings),
    };
}
exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsToTerraform = medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsToTerraform;
function medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        frame_capture_settings: {
            value: medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsToHclTerraform(struct.frameCaptureSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsList",
        },
        h264_settings: {
            value: medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsToHclTerraform(struct.h264Settings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsList",
        },
        h265_settings: {
            value: medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsToHclTerraform(struct.h265Settings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsToHclTerraform = medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // frame_capture_settings - computed: false, optional: true, required: false
        this._frameCaptureSettings = new MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsOutputReference(this, "frame_capture_settings");
        // h264_settings - computed: false, optional: true, required: false
        this._h264Settings = new MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsOutputReference(this, "h264_settings");
        // h265_settings - computed: false, optional: true, required: false
        this._h265Settings = new MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsOutputReference(this, "h265_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._frameCaptureSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.frameCaptureSettings = this._frameCaptureSettings?.internalValue;
        }
        if (this._h264Settings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.h264Settings = this._h264Settings?.internalValue;
        }
        if (this._h265Settings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.h265Settings = this._h265Settings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._frameCaptureSettings.internalValue = undefined;
            this._h264Settings.internalValue = undefined;
            this._h265Settings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._frameCaptureSettings.internalValue = value.frameCaptureSettings;
            this._h264Settings.internalValue = value.h264Settings;
            this._h265Settings.internalValue = value.h265Settings;
        }
    }
    get frameCaptureSettings() {
        return this._frameCaptureSettings;
    }
    putFrameCaptureSettings(value) {
        this._frameCaptureSettings.internalValue = value;
    }
    resetFrameCaptureSettings() {
        this._frameCaptureSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get frameCaptureSettingsInput() {
        return this._frameCaptureSettings.internalValue;
    }
    get h264Settings() {
        return this._h264Settings;
    }
    putH264Settings(value) {
        this._h264Settings.internalValue = value;
    }
    resetH264Settings() {
        this._h264Settings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get h264SettingsInput() {
        return this._h264Settings.internalValue;
    }
    get h265Settings() {
        return this._h265Settings;
    }
    putH265Settings(value) {
        this._h265Settings.internalValue = value;
    }
    resetH265Settings() {
        this._h265Settings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get h265SettingsInput() {
        return this._h265Settings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsOutputReference = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsOutputReference;
_114 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsOutputReference[_114] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsOutputReference", version: "19.15.0" };
function medialiveChannelEncoderSettingsVideoDescriptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        height: cdktf.numberToTerraform(struct.height),
        name: cdktf.stringToTerraform(struct.name),
        respond_to_afd: cdktf.stringToTerraform(struct.respondToAfd),
        scaling_behavior: cdktf.stringToTerraform(struct.scalingBehavior),
        sharpness: cdktf.numberToTerraform(struct.sharpness),
        width: cdktf.numberToTerraform(struct.width),
        codec_settings: medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsToTerraform(struct.codecSettings),
    };
}
exports.medialiveChannelEncoderSettingsVideoDescriptionsToTerraform = medialiveChannelEncoderSettingsVideoDescriptionsToTerraform;
function medialiveChannelEncoderSettingsVideoDescriptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        height: {
            value: cdktf.numberToHclTerraform(struct.height),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        respond_to_afd: {
            value: cdktf.stringToHclTerraform(struct.respondToAfd),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        scaling_behavior: {
            value: cdktf.stringToHclTerraform(struct.scalingBehavior),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sharpness: {
            value: cdktf.numberToHclTerraform(struct.sharpness),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        width: {
            value: cdktf.numberToHclTerraform(struct.width),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        codec_settings: {
            value: medialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsToHclTerraform(struct.codecSettings),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsVideoDescriptionsToHclTerraform = medialiveChannelEncoderSettingsVideoDescriptionsToHclTerraform;
class MedialiveChannelEncoderSettingsVideoDescriptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // codec_settings - computed: false, optional: true, required: false
        this._codecSettings = new MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsOutputReference(this, "codec_settings");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._height !== undefined) {
            hasAnyValues = true;
            internalValueResult.height = this._height;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._respondToAfd !== undefined) {
            hasAnyValues = true;
            internalValueResult.respondToAfd = this._respondToAfd;
        }
        if (this._scalingBehavior !== undefined) {
            hasAnyValues = true;
            internalValueResult.scalingBehavior = this._scalingBehavior;
        }
        if (this._sharpness !== undefined) {
            hasAnyValues = true;
            internalValueResult.sharpness = this._sharpness;
        }
        if (this._width !== undefined) {
            hasAnyValues = true;
            internalValueResult.width = this._width;
        }
        if (this._codecSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.codecSettings = this._codecSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._height = undefined;
            this._name = undefined;
            this._respondToAfd = undefined;
            this._scalingBehavior = undefined;
            this._sharpness = undefined;
            this._width = undefined;
            this._codecSettings.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._height = value.height;
            this._name = value.name;
            this._respondToAfd = value.respondToAfd;
            this._scalingBehavior = value.scalingBehavior;
            this._sharpness = value.sharpness;
            this._width = value.width;
            this._codecSettings.internalValue = value.codecSettings;
        }
    }
    get height() {
        return this.getNumberAttribute('height');
    }
    set height(value) {
        this._height = value;
    }
    resetHeight() {
        this._height = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get heightInput() {
        return this._height;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get respondToAfd() {
        return this.getStringAttribute('respond_to_afd');
    }
    set respondToAfd(value) {
        this._respondToAfd = value;
    }
    resetRespondToAfd() {
        this._respondToAfd = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get respondToAfdInput() {
        return this._respondToAfd;
    }
    get scalingBehavior() {
        return this.getStringAttribute('scaling_behavior');
    }
    set scalingBehavior(value) {
        this._scalingBehavior = value;
    }
    resetScalingBehavior() {
        this._scalingBehavior = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scalingBehaviorInput() {
        return this._scalingBehavior;
    }
    get sharpness() {
        return this.getNumberAttribute('sharpness');
    }
    set sharpness(value) {
        this._sharpness = value;
    }
    resetSharpness() {
        this._sharpness = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sharpnessInput() {
        return this._sharpness;
    }
    get width() {
        return this.getNumberAttribute('width');
    }
    set width(value) {
        this._width = value;
    }
    resetWidth() {
        this._width = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get widthInput() {
        return this._width;
    }
    get codecSettings() {
        return this._codecSettings;
    }
    putCodecSettings(value) {
        this._codecSettings.internalValue = value;
    }
    resetCodecSettings() {
        this._codecSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get codecSettingsInput() {
        return this._codecSettings.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsVideoDescriptionsOutputReference = MedialiveChannelEncoderSettingsVideoDescriptionsOutputReference;
_115 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsVideoDescriptionsOutputReference[_115] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsOutputReference", version: "19.15.0" };
class MedialiveChannelEncoderSettingsVideoDescriptionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MedialiveChannelEncoderSettingsVideoDescriptionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MedialiveChannelEncoderSettingsVideoDescriptionsList = MedialiveChannelEncoderSettingsVideoDescriptionsList;
_116 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsVideoDescriptionsList[_116] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsList", version: "19.15.0" };
function medialiveChannelEncoderSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        audio_descriptions: cdktf.listMapper(medialiveChannelEncoderSettingsAudioDescriptionsToTerraform, true)(struct.audioDescriptions),
        avail_blanking: medialiveChannelEncoderSettingsAvailBlankingToTerraform(struct.availBlanking),
        caption_descriptions: cdktf.listMapper(medialiveChannelEncoderSettingsCaptionDescriptionsToTerraform, true)(struct.captionDescriptions),
        global_configuration: medialiveChannelEncoderSettingsGlobalConfigurationToTerraform(struct.globalConfiguration),
        motion_graphics_configuration: medialiveChannelEncoderSettingsMotionGraphicsConfigurationToTerraform(struct.motionGraphicsConfiguration),
        nielsen_configuration: medialiveChannelEncoderSettingsNielsenConfigurationToTerraform(struct.nielsenConfiguration),
        output_groups: cdktf.listMapper(medialiveChannelEncoderSettingsOutputGroupsToTerraform, true)(struct.outputGroups),
        timecode_config: medialiveChannelEncoderSettingsTimecodeConfigToTerraform(struct.timecodeConfig),
        video_descriptions: cdktf.listMapper(medialiveChannelEncoderSettingsVideoDescriptionsToTerraform, true)(struct.videoDescriptions),
    };
}
exports.medialiveChannelEncoderSettingsToTerraform = medialiveChannelEncoderSettingsToTerraform;
function medialiveChannelEncoderSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        audio_descriptions: {
            value: cdktf.listMapperHcl(medialiveChannelEncoderSettingsAudioDescriptionsToHclTerraform, true)(struct.audioDescriptions),
            isBlock: true,
            type: "set",
            storageClassType: "MedialiveChannelEncoderSettingsAudioDescriptionsList",
        },
        avail_blanking: {
            value: medialiveChannelEncoderSettingsAvailBlankingToHclTerraform(struct.availBlanking),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsAvailBlankingList",
        },
        caption_descriptions: {
            value: cdktf.listMapperHcl(medialiveChannelEncoderSettingsCaptionDescriptionsToHclTerraform, true)(struct.captionDescriptions),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsCaptionDescriptionsList",
        },
        global_configuration: {
            value: medialiveChannelEncoderSettingsGlobalConfigurationToHclTerraform(struct.globalConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsGlobalConfigurationList",
        },
        motion_graphics_configuration: {
            value: medialiveChannelEncoderSettingsMotionGraphicsConfigurationToHclTerraform(struct.motionGraphicsConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsMotionGraphicsConfigurationList",
        },
        nielsen_configuration: {
            value: medialiveChannelEncoderSettingsNielsenConfigurationToHclTerraform(struct.nielsenConfiguration),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsNielsenConfigurationList",
        },
        output_groups: {
            value: cdktf.listMapperHcl(medialiveChannelEncoderSettingsOutputGroupsToHclTerraform, true)(struct.outputGroups),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsOutputGroupsList",
        },
        timecode_config: {
            value: medialiveChannelEncoderSettingsTimecodeConfigToHclTerraform(struct.timecodeConfig),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsTimecodeConfigList",
        },
        video_descriptions: {
            value: cdktf.listMapperHcl(medialiveChannelEncoderSettingsVideoDescriptionsToHclTerraform, true)(struct.videoDescriptions),
            isBlock: true,
            type: "list",
            storageClassType: "MedialiveChannelEncoderSettingsVideoDescriptionsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelEncoderSettingsToHclTerraform = medialiveChannelEncoderSettingsToHclTerraform;
class MedialiveChannelEncoderSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // audio_descriptions - computed: false, optional: true, required: false
        this._audioDescriptions = new MedialiveChannelEncoderSettingsAudioDescriptionsList(this, "audio_descriptions", true);
        // avail_blanking - computed: false, optional: true, required: false
        this._availBlanking = new MedialiveChannelEncoderSettingsAvailBlankingOutputReference(this, "avail_blanking");
        // caption_descriptions - computed: false, optional: true, required: false
        this._captionDescriptions = new MedialiveChannelEncoderSettingsCaptionDescriptionsList(this, "caption_descriptions", false);
        // global_configuration - computed: false, optional: true, required: false
        this._globalConfiguration = new MedialiveChannelEncoderSettingsGlobalConfigurationOutputReference(this, "global_configuration");
        // motion_graphics_configuration - computed: false, optional: true, required: false
        this._motionGraphicsConfiguration = new MedialiveChannelEncoderSettingsMotionGraphicsConfigurationOutputReference(this, "motion_graphics_configuration");
        // nielsen_configuration - computed: false, optional: true, required: false
        this._nielsenConfiguration = new MedialiveChannelEncoderSettingsNielsenConfigurationOutputReference(this, "nielsen_configuration");
        // output_groups - computed: false, optional: false, required: true
        this._outputGroups = new MedialiveChannelEncoderSettingsOutputGroupsList(this, "output_groups", false);
        // timecode_config - computed: false, optional: false, required: true
        this._timecodeConfig = new MedialiveChannelEncoderSettingsTimecodeConfigOutputReference(this, "timecode_config");
        // video_descriptions - computed: false, optional: true, required: false
        this._videoDescriptions = new MedialiveChannelEncoderSettingsVideoDescriptionsList(this, "video_descriptions", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._audioDescriptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioDescriptions = this._audioDescriptions?.internalValue;
        }
        if (this._availBlanking?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.availBlanking = this._availBlanking?.internalValue;
        }
        if (this._captionDescriptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.captionDescriptions = this._captionDescriptions?.internalValue;
        }
        if (this._globalConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.globalConfiguration = this._globalConfiguration?.internalValue;
        }
        if (this._motionGraphicsConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.motionGraphicsConfiguration = this._motionGraphicsConfiguration?.internalValue;
        }
        if (this._nielsenConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.nielsenConfiguration = this._nielsenConfiguration?.internalValue;
        }
        if (this._outputGroups?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputGroups = this._outputGroups?.internalValue;
        }
        if (this._timecodeConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.timecodeConfig = this._timecodeConfig?.internalValue;
        }
        if (this._videoDescriptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.videoDescriptions = this._videoDescriptions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._audioDescriptions.internalValue = undefined;
            this._availBlanking.internalValue = undefined;
            this._captionDescriptions.internalValue = undefined;
            this._globalConfiguration.internalValue = undefined;
            this._motionGraphicsConfiguration.internalValue = undefined;
            this._nielsenConfiguration.internalValue = undefined;
            this._outputGroups.internalValue = undefined;
            this._timecodeConfig.internalValue = undefined;
            this._videoDescriptions.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._audioDescriptions.internalValue = value.audioDescriptions;
            this._availBlanking.internalValue = value.availBlanking;
            this._captionDescriptions.internalValue = value.captionDescriptions;
            this._globalConfiguration.internalValue = value.globalConfiguration;
            this._motionGraphicsConfiguration.internalValue = value.motionGraphicsConfiguration;
            this._nielsenConfiguration.internalValue = value.nielsenConfiguration;
            this._outputGroups.internalValue = value.outputGroups;
            this._timecodeConfig.internalValue = value.timecodeConfig;
            this._videoDescriptions.internalValue = value.videoDescriptions;
        }
    }
    get audioDescriptions() {
        return this._audioDescriptions;
    }
    putAudioDescriptions(value) {
        this._audioDescriptions.internalValue = value;
    }
    resetAudioDescriptions() {
        this._audioDescriptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioDescriptionsInput() {
        return this._audioDescriptions.internalValue;
    }
    get availBlanking() {
        return this._availBlanking;
    }
    putAvailBlanking(value) {
        this._availBlanking.internalValue = value;
    }
    resetAvailBlanking() {
        this._availBlanking.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get availBlankingInput() {
        return this._availBlanking.internalValue;
    }
    get captionDescriptions() {
        return this._captionDescriptions;
    }
    putCaptionDescriptions(value) {
        this._captionDescriptions.internalValue = value;
    }
    resetCaptionDescriptions() {
        this._captionDescriptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get captionDescriptionsInput() {
        return this._captionDescriptions.internalValue;
    }
    get globalConfiguration() {
        return this._globalConfiguration;
    }
    putGlobalConfiguration(value) {
        this._globalConfiguration.internalValue = value;
    }
    resetGlobalConfiguration() {
        this._globalConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get globalConfigurationInput() {
        return this._globalConfiguration.internalValue;
    }
    get motionGraphicsConfiguration() {
        return this._motionGraphicsConfiguration;
    }
    putMotionGraphicsConfiguration(value) {
        this._motionGraphicsConfiguration.internalValue = value;
    }
    resetMotionGraphicsConfiguration() {
        this._motionGraphicsConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get motionGraphicsConfigurationInput() {
        return this._motionGraphicsConfiguration.internalValue;
    }
    get nielsenConfiguration() {
        return this._nielsenConfiguration;
    }
    putNielsenConfiguration(value) {
        this._nielsenConfiguration.internalValue = value;
    }
    resetNielsenConfiguration() {
        this._nielsenConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nielsenConfigurationInput() {
        return this._nielsenConfiguration.internalValue;
    }
    get outputGroups() {
        return this._outputGroups;
    }
    putOutputGroups(value) {
        this._outputGroups.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get outputGroupsInput() {
        return this._outputGroups.internalValue;
    }
    get timecodeConfig() {
        return this._timecodeConfig;
    }
    putTimecodeConfig(value) {
        this._timecodeConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get timecodeConfigInput() {
        return this._timecodeConfig.internalValue;
    }
    get videoDescriptions() {
        return this._videoDescriptions;
    }
    putVideoDescriptions(value) {
        this._videoDescriptions.internalValue = value;
    }
    resetVideoDescriptions() {
        this._videoDescriptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get videoDescriptionsInput() {
        return this._videoDescriptions.internalValue;
    }
}
exports.MedialiveChannelEncoderSettingsOutputReference = MedialiveChannelEncoderSettingsOutputReference;
_117 = JSII_RTTI_SYMBOL_1;
MedialiveChannelEncoderSettingsOutputReference[_117] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputReference", version: "19.15.0" };
function medialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        audio_selector_name: cdktf.stringToTerraform(struct.audioSelectorName),
        audio_silence_threshold_msec: cdktf.numberToTerraform(struct.audioSilenceThresholdMsec),
    };
}
exports.medialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsToTerraform = medialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsToTerraform;
function medialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        audio_selector_name: {
            value: cdktf.stringToHclTerraform(struct.audioSelectorName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        audio_silence_threshold_msec: {
            value: cdktf.numberToHclTerraform(struct.audioSilenceThresholdMsec),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.medialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsToHclTerraform = medialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsToHclTerraform;
class MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._audioSelectorName !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioSelectorName = this._audioSelectorName;
        }
        if (this._audioSilenceThresholdMsec !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioSilenceThresholdMsec = this._audioSilenceThresholdMsec;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._audioSelectorName = undefined;
            this._audioSilenceThresholdMsec = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._audioSelectorName = value.audioSelectorName;
            this._audioSilenceThresholdMsec = value.audioSilenceThresholdMsec;
        }
    }
    get audioSelectorName() {
        return this.getStringAttribute('audio_selector_name');
    }
    set audioSelectorName(value) {
        this._audioSelectorName = value;
    }
    // Temporarily expose input value. Use with caution.
    get audioSelectorNameInput() {
        return this._audioSelectorName;
    }
    get audioSilenceThresholdMsec() {
        return this.getNumberAttribute('audio_silence_threshold_msec');
    }
    set audioSilenceThresholdMsec(value) {
        this._audioSilenceThresholdMsec = value;
    }
    resetAudioSilenceThresholdMsec() {
        this._audioSilenceThresholdMsec = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audioSilenceThresholdMsecInput() {
        return this._audioSilenceThresholdMsec;
    }
}
exports.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutputReference = MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutputReference;
_118 = JSII_RTTI_SYMBOL_1;
MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutputReference[_118] = { fqn: "@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutputReference", version: "19.15.0" };
//# sourceMappingURL=data:application/json;base64,