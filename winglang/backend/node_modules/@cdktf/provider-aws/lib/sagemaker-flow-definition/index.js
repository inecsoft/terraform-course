"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SagemakerFlowDefinition = exports.SagemakerFlowDefinitionOutputConfigOutputReference = exports.sagemakerFlowDefinitionOutputConfigToHclTerraform = exports.sagemakerFlowDefinitionOutputConfigToTerraform = exports.SagemakerFlowDefinitionHumanLoopRequestSourceOutputReference = exports.sagemakerFlowDefinitionHumanLoopRequestSourceToHclTerraform = exports.sagemakerFlowDefinitionHumanLoopRequestSourceToTerraform = exports.SagemakerFlowDefinitionHumanLoopConfigOutputReference = exports.sagemakerFlowDefinitionHumanLoopConfigToHclTerraform = exports.sagemakerFlowDefinitionHumanLoopConfigToTerraform = exports.SagemakerFlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceOutputReference = exports.sagemakerFlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceToHclTerraform = exports.sagemakerFlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceToTerraform = exports.SagemakerFlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceAmountInUsdOutputReference = exports.sagemakerFlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceAmountInUsdToHclTerraform = exports.sagemakerFlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceAmountInUsdToTerraform = exports.SagemakerFlowDefinitionHumanLoopActivationConfigOutputReference = exports.sagemakerFlowDefinitionHumanLoopActivationConfigToHclTerraform = exports.sagemakerFlowDefinitionHumanLoopActivationConfigToTerraform = exports.SagemakerFlowDefinitionHumanLoopActivationConfigHumanLoopActivationConditionsConfigOutputReference = exports.sagemakerFlowDefinitionHumanLoopActivationConfigHumanLoopActivationConditionsConfigToHclTerraform = exports.sagemakerFlowDefinitionHumanLoopActivationConfigHumanLoopActivationConditionsConfigToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function sagemakerFlowDefinitionHumanLoopActivationConfigHumanLoopActivationConditionsConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        human_loop_activation_conditions: cdktf.stringToTerraform(struct.humanLoopActivationConditions),
    };
}
exports.sagemakerFlowDefinitionHumanLoopActivationConfigHumanLoopActivationConditionsConfigToTerraform = sagemakerFlowDefinitionHumanLoopActivationConfigHumanLoopActivationConditionsConfigToTerraform;
function sagemakerFlowDefinitionHumanLoopActivationConfigHumanLoopActivationConditionsConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        human_loop_activation_conditions: {
            value: cdktf.stringToHclTerraform(struct.humanLoopActivationConditions),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerFlowDefinitionHumanLoopActivationConfigHumanLoopActivationConditionsConfigToHclTerraform = sagemakerFlowDefinitionHumanLoopActivationConfigHumanLoopActivationConditionsConfigToHclTerraform;
class SagemakerFlowDefinitionHumanLoopActivationConfigHumanLoopActivationConditionsConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._humanLoopActivationConditions !== undefined) {
            hasAnyValues = true;
            internalValueResult.humanLoopActivationConditions = this._humanLoopActivationConditions;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._humanLoopActivationConditions = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._humanLoopActivationConditions = value.humanLoopActivationConditions;
        }
    }
    get humanLoopActivationConditions() {
        return this.getStringAttribute('human_loop_activation_conditions');
    }
    set humanLoopActivationConditions(value) {
        this._humanLoopActivationConditions = value;
    }
    // Temporarily expose input value. Use with caution.
    get humanLoopActivationConditionsInput() {
        return this._humanLoopActivationConditions;
    }
}
exports.SagemakerFlowDefinitionHumanLoopActivationConfigHumanLoopActivationConditionsConfigOutputReference = SagemakerFlowDefinitionHumanLoopActivationConfigHumanLoopActivationConditionsConfigOutputReference;
_a = JSII_RTTI_SYMBOL_1;
SagemakerFlowDefinitionHumanLoopActivationConfigHumanLoopActivationConditionsConfigOutputReference[_a] = { fqn: "@cdktf/provider-aws.sagemakerFlowDefinition.SagemakerFlowDefinitionHumanLoopActivationConfigHumanLoopActivationConditionsConfigOutputReference", version: "19.15.0" };
function sagemakerFlowDefinitionHumanLoopActivationConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        human_loop_activation_conditions_config: sagemakerFlowDefinitionHumanLoopActivationConfigHumanLoopActivationConditionsConfigToTerraform(struct.humanLoopActivationConditionsConfig),
    };
}
exports.sagemakerFlowDefinitionHumanLoopActivationConfigToTerraform = sagemakerFlowDefinitionHumanLoopActivationConfigToTerraform;
function sagemakerFlowDefinitionHumanLoopActivationConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        human_loop_activation_conditions_config: {
            value: sagemakerFlowDefinitionHumanLoopActivationConfigHumanLoopActivationConditionsConfigToHclTerraform(struct.humanLoopActivationConditionsConfig),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerFlowDefinitionHumanLoopActivationConfigHumanLoopActivationConditionsConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerFlowDefinitionHumanLoopActivationConfigToHclTerraform = sagemakerFlowDefinitionHumanLoopActivationConfigToHclTerraform;
class SagemakerFlowDefinitionHumanLoopActivationConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // human_loop_activation_conditions_config - computed: false, optional: true, required: false
        this._humanLoopActivationConditionsConfig = new SagemakerFlowDefinitionHumanLoopActivationConfigHumanLoopActivationConditionsConfigOutputReference(this, "human_loop_activation_conditions_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._humanLoopActivationConditionsConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.humanLoopActivationConditionsConfig = this._humanLoopActivationConditionsConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._humanLoopActivationConditionsConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._humanLoopActivationConditionsConfig.internalValue = value.humanLoopActivationConditionsConfig;
        }
    }
    get humanLoopActivationConditionsConfig() {
        return this._humanLoopActivationConditionsConfig;
    }
    putHumanLoopActivationConditionsConfig(value) {
        this._humanLoopActivationConditionsConfig.internalValue = value;
    }
    resetHumanLoopActivationConditionsConfig() {
        this._humanLoopActivationConditionsConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get humanLoopActivationConditionsConfigInput() {
        return this._humanLoopActivationConditionsConfig.internalValue;
    }
}
exports.SagemakerFlowDefinitionHumanLoopActivationConfigOutputReference = SagemakerFlowDefinitionHumanLoopActivationConfigOutputReference;
_b = JSII_RTTI_SYMBOL_1;
SagemakerFlowDefinitionHumanLoopActivationConfigOutputReference[_b] = { fqn: "@cdktf/provider-aws.sagemakerFlowDefinition.SagemakerFlowDefinitionHumanLoopActivationConfigOutputReference", version: "19.15.0" };
function sagemakerFlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceAmountInUsdToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cents: cdktf.numberToTerraform(struct.cents),
        dollars: cdktf.numberToTerraform(struct.dollars),
        tenth_fractions_of_a_cent: cdktf.numberToTerraform(struct.tenthFractionsOfACent),
    };
}
exports.sagemakerFlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceAmountInUsdToTerraform = sagemakerFlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceAmountInUsdToTerraform;
function sagemakerFlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceAmountInUsdToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cents: {
            value: cdktf.numberToHclTerraform(struct.cents),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        dollars: {
            value: cdktf.numberToHclTerraform(struct.dollars),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        tenth_fractions_of_a_cent: {
            value: cdktf.numberToHclTerraform(struct.tenthFractionsOfACent),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerFlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceAmountInUsdToHclTerraform = sagemakerFlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceAmountInUsdToHclTerraform;
class SagemakerFlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceAmountInUsdOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cents !== undefined) {
            hasAnyValues = true;
            internalValueResult.cents = this._cents;
        }
        if (this._dollars !== undefined) {
            hasAnyValues = true;
            internalValueResult.dollars = this._dollars;
        }
        if (this._tenthFractionsOfACent !== undefined) {
            hasAnyValues = true;
            internalValueResult.tenthFractionsOfACent = this._tenthFractionsOfACent;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cents = undefined;
            this._dollars = undefined;
            this._tenthFractionsOfACent = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cents = value.cents;
            this._dollars = value.dollars;
            this._tenthFractionsOfACent = value.tenthFractionsOfACent;
        }
    }
    get cents() {
        return this.getNumberAttribute('cents');
    }
    set cents(value) {
        this._cents = value;
    }
    resetCents() {
        this._cents = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get centsInput() {
        return this._cents;
    }
    get dollars() {
        return this.getNumberAttribute('dollars');
    }
    set dollars(value) {
        this._dollars = value;
    }
    resetDollars() {
        this._dollars = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dollarsInput() {
        return this._dollars;
    }
    get tenthFractionsOfACent() {
        return this.getNumberAttribute('tenth_fractions_of_a_cent');
    }
    set tenthFractionsOfACent(value) {
        this._tenthFractionsOfACent = value;
    }
    resetTenthFractionsOfACent() {
        this._tenthFractionsOfACent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tenthFractionsOfACentInput() {
        return this._tenthFractionsOfACent;
    }
}
exports.SagemakerFlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceAmountInUsdOutputReference = SagemakerFlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceAmountInUsdOutputReference;
_c = JSII_RTTI_SYMBOL_1;
SagemakerFlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceAmountInUsdOutputReference[_c] = { fqn: "@cdktf/provider-aws.sagemakerFlowDefinition.SagemakerFlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceAmountInUsdOutputReference", version: "19.15.0" };
function sagemakerFlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        amount_in_usd: sagemakerFlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceAmountInUsdToTerraform(struct.amountInUsd),
    };
}
exports.sagemakerFlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceToTerraform = sagemakerFlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceToTerraform;
function sagemakerFlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        amount_in_usd: {
            value: sagemakerFlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceAmountInUsdToHclTerraform(struct.amountInUsd),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerFlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceAmountInUsdList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerFlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceToHclTerraform = sagemakerFlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceToHclTerraform;
class SagemakerFlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // amount_in_usd - computed: false, optional: true, required: false
        this._amountInUsd = new SagemakerFlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceAmountInUsdOutputReference(this, "amount_in_usd");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._amountInUsd?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.amountInUsd = this._amountInUsd?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._amountInUsd.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._amountInUsd.internalValue = value.amountInUsd;
        }
    }
    get amountInUsd() {
        return this._amountInUsd;
    }
    putAmountInUsd(value) {
        this._amountInUsd.internalValue = value;
    }
    resetAmountInUsd() {
        this._amountInUsd.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get amountInUsdInput() {
        return this._amountInUsd.internalValue;
    }
}
exports.SagemakerFlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceOutputReference = SagemakerFlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceOutputReference;
_d = JSII_RTTI_SYMBOL_1;
SagemakerFlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceOutputReference[_d] = { fqn: "@cdktf/provider-aws.sagemakerFlowDefinition.SagemakerFlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceOutputReference", version: "19.15.0" };
function sagemakerFlowDefinitionHumanLoopConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        human_task_ui_arn: cdktf.stringToTerraform(struct.humanTaskUiArn),
        task_availability_lifetime_in_seconds: cdktf.numberToTerraform(struct.taskAvailabilityLifetimeInSeconds),
        task_count: cdktf.numberToTerraform(struct.taskCount),
        task_description: cdktf.stringToTerraform(struct.taskDescription),
        task_keywords: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.taskKeywords),
        task_time_limit_in_seconds: cdktf.numberToTerraform(struct.taskTimeLimitInSeconds),
        task_title: cdktf.stringToTerraform(struct.taskTitle),
        workteam_arn: cdktf.stringToTerraform(struct.workteamArn),
        public_workforce_task_price: sagemakerFlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceToTerraform(struct.publicWorkforceTaskPrice),
    };
}
exports.sagemakerFlowDefinitionHumanLoopConfigToTerraform = sagemakerFlowDefinitionHumanLoopConfigToTerraform;
function sagemakerFlowDefinitionHumanLoopConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        human_task_ui_arn: {
            value: cdktf.stringToHclTerraform(struct.humanTaskUiArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        task_availability_lifetime_in_seconds: {
            value: cdktf.numberToHclTerraform(struct.taskAvailabilityLifetimeInSeconds),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        task_count: {
            value: cdktf.numberToHclTerraform(struct.taskCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        task_description: {
            value: cdktf.stringToHclTerraform(struct.taskDescription),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        task_keywords: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.taskKeywords),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        task_time_limit_in_seconds: {
            value: cdktf.numberToHclTerraform(struct.taskTimeLimitInSeconds),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        task_title: {
            value: cdktf.stringToHclTerraform(struct.taskTitle),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        workteam_arn: {
            value: cdktf.stringToHclTerraform(struct.workteamArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        public_workforce_task_price: {
            value: sagemakerFlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceToHclTerraform(struct.publicWorkforceTaskPrice),
            isBlock: true,
            type: "list",
            storageClassType: "SagemakerFlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerFlowDefinitionHumanLoopConfigToHclTerraform = sagemakerFlowDefinitionHumanLoopConfigToHclTerraform;
class SagemakerFlowDefinitionHumanLoopConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // public_workforce_task_price - computed: false, optional: true, required: false
        this._publicWorkforceTaskPrice = new SagemakerFlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceOutputReference(this, "public_workforce_task_price");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._humanTaskUiArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.humanTaskUiArn = this._humanTaskUiArn;
        }
        if (this._taskAvailabilityLifetimeInSeconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.taskAvailabilityLifetimeInSeconds = this._taskAvailabilityLifetimeInSeconds;
        }
        if (this._taskCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.taskCount = this._taskCount;
        }
        if (this._taskDescription !== undefined) {
            hasAnyValues = true;
            internalValueResult.taskDescription = this._taskDescription;
        }
        if (this._taskKeywords !== undefined) {
            hasAnyValues = true;
            internalValueResult.taskKeywords = this._taskKeywords;
        }
        if (this._taskTimeLimitInSeconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.taskTimeLimitInSeconds = this._taskTimeLimitInSeconds;
        }
        if (this._taskTitle !== undefined) {
            hasAnyValues = true;
            internalValueResult.taskTitle = this._taskTitle;
        }
        if (this._workteamArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.workteamArn = this._workteamArn;
        }
        if (this._publicWorkforceTaskPrice?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.publicWorkforceTaskPrice = this._publicWorkforceTaskPrice?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._humanTaskUiArn = undefined;
            this._taskAvailabilityLifetimeInSeconds = undefined;
            this._taskCount = undefined;
            this._taskDescription = undefined;
            this._taskKeywords = undefined;
            this._taskTimeLimitInSeconds = undefined;
            this._taskTitle = undefined;
            this._workteamArn = undefined;
            this._publicWorkforceTaskPrice.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._humanTaskUiArn = value.humanTaskUiArn;
            this._taskAvailabilityLifetimeInSeconds = value.taskAvailabilityLifetimeInSeconds;
            this._taskCount = value.taskCount;
            this._taskDescription = value.taskDescription;
            this._taskKeywords = value.taskKeywords;
            this._taskTimeLimitInSeconds = value.taskTimeLimitInSeconds;
            this._taskTitle = value.taskTitle;
            this._workteamArn = value.workteamArn;
            this._publicWorkforceTaskPrice.internalValue = value.publicWorkforceTaskPrice;
        }
    }
    get humanTaskUiArn() {
        return this.getStringAttribute('human_task_ui_arn');
    }
    set humanTaskUiArn(value) {
        this._humanTaskUiArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get humanTaskUiArnInput() {
        return this._humanTaskUiArn;
    }
    get taskAvailabilityLifetimeInSeconds() {
        return this.getNumberAttribute('task_availability_lifetime_in_seconds');
    }
    set taskAvailabilityLifetimeInSeconds(value) {
        this._taskAvailabilityLifetimeInSeconds = value;
    }
    resetTaskAvailabilityLifetimeInSeconds() {
        this._taskAvailabilityLifetimeInSeconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get taskAvailabilityLifetimeInSecondsInput() {
        return this._taskAvailabilityLifetimeInSeconds;
    }
    get taskCount() {
        return this.getNumberAttribute('task_count');
    }
    set taskCount(value) {
        this._taskCount = value;
    }
    // Temporarily expose input value. Use with caution.
    get taskCountInput() {
        return this._taskCount;
    }
    get taskDescription() {
        return this.getStringAttribute('task_description');
    }
    set taskDescription(value) {
        this._taskDescription = value;
    }
    // Temporarily expose input value. Use with caution.
    get taskDescriptionInput() {
        return this._taskDescription;
    }
    get taskKeywords() {
        return cdktf.Fn.tolist(this.getListAttribute('task_keywords'));
    }
    set taskKeywords(value) {
        this._taskKeywords = value;
    }
    resetTaskKeywords() {
        this._taskKeywords = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get taskKeywordsInput() {
        return this._taskKeywords;
    }
    get taskTimeLimitInSeconds() {
        return this.getNumberAttribute('task_time_limit_in_seconds');
    }
    set taskTimeLimitInSeconds(value) {
        this._taskTimeLimitInSeconds = value;
    }
    resetTaskTimeLimitInSeconds() {
        this._taskTimeLimitInSeconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get taskTimeLimitInSecondsInput() {
        return this._taskTimeLimitInSeconds;
    }
    get taskTitle() {
        return this.getStringAttribute('task_title');
    }
    set taskTitle(value) {
        this._taskTitle = value;
    }
    // Temporarily expose input value. Use with caution.
    get taskTitleInput() {
        return this._taskTitle;
    }
    get workteamArn() {
        return this.getStringAttribute('workteam_arn');
    }
    set workteamArn(value) {
        this._workteamArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get workteamArnInput() {
        return this._workteamArn;
    }
    get publicWorkforceTaskPrice() {
        return this._publicWorkforceTaskPrice;
    }
    putPublicWorkforceTaskPrice(value) {
        this._publicWorkforceTaskPrice.internalValue = value;
    }
    resetPublicWorkforceTaskPrice() {
        this._publicWorkforceTaskPrice.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get publicWorkforceTaskPriceInput() {
        return this._publicWorkforceTaskPrice.internalValue;
    }
}
exports.SagemakerFlowDefinitionHumanLoopConfigOutputReference = SagemakerFlowDefinitionHumanLoopConfigOutputReference;
_e = JSII_RTTI_SYMBOL_1;
SagemakerFlowDefinitionHumanLoopConfigOutputReference[_e] = { fqn: "@cdktf/provider-aws.sagemakerFlowDefinition.SagemakerFlowDefinitionHumanLoopConfigOutputReference", version: "19.15.0" };
function sagemakerFlowDefinitionHumanLoopRequestSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        aws_managed_human_loop_request_source: cdktf.stringToTerraform(struct.awsManagedHumanLoopRequestSource),
    };
}
exports.sagemakerFlowDefinitionHumanLoopRequestSourceToTerraform = sagemakerFlowDefinitionHumanLoopRequestSourceToTerraform;
function sagemakerFlowDefinitionHumanLoopRequestSourceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        aws_managed_human_loop_request_source: {
            value: cdktf.stringToHclTerraform(struct.awsManagedHumanLoopRequestSource),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerFlowDefinitionHumanLoopRequestSourceToHclTerraform = sagemakerFlowDefinitionHumanLoopRequestSourceToHclTerraform;
class SagemakerFlowDefinitionHumanLoopRequestSourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._awsManagedHumanLoopRequestSource !== undefined) {
            hasAnyValues = true;
            internalValueResult.awsManagedHumanLoopRequestSource = this._awsManagedHumanLoopRequestSource;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._awsManagedHumanLoopRequestSource = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._awsManagedHumanLoopRequestSource = value.awsManagedHumanLoopRequestSource;
        }
    }
    get awsManagedHumanLoopRequestSource() {
        return this.getStringAttribute('aws_managed_human_loop_request_source');
    }
    set awsManagedHumanLoopRequestSource(value) {
        this._awsManagedHumanLoopRequestSource = value;
    }
    // Temporarily expose input value. Use with caution.
    get awsManagedHumanLoopRequestSourceInput() {
        return this._awsManagedHumanLoopRequestSource;
    }
}
exports.SagemakerFlowDefinitionHumanLoopRequestSourceOutputReference = SagemakerFlowDefinitionHumanLoopRequestSourceOutputReference;
_f = JSII_RTTI_SYMBOL_1;
SagemakerFlowDefinitionHumanLoopRequestSourceOutputReference[_f] = { fqn: "@cdktf/provider-aws.sagemakerFlowDefinition.SagemakerFlowDefinitionHumanLoopRequestSourceOutputReference", version: "19.15.0" };
function sagemakerFlowDefinitionOutputConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kms_key_id: cdktf.stringToTerraform(struct.kmsKeyId),
        s3_output_path: cdktf.stringToTerraform(struct.s3OutputPath),
    };
}
exports.sagemakerFlowDefinitionOutputConfigToTerraform = sagemakerFlowDefinitionOutputConfigToTerraform;
function sagemakerFlowDefinitionOutputConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        kms_key_id: {
            value: cdktf.stringToHclTerraform(struct.kmsKeyId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        s3_output_path: {
            value: cdktf.stringToHclTerraform(struct.s3OutputPath),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sagemakerFlowDefinitionOutputConfigToHclTerraform = sagemakerFlowDefinitionOutputConfigToHclTerraform;
class SagemakerFlowDefinitionOutputConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kmsKeyId !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyId = this._kmsKeyId;
        }
        if (this._s3OutputPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.s3OutputPath = this._s3OutputPath;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kmsKeyId = undefined;
            this._s3OutputPath = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kmsKeyId = value.kmsKeyId;
            this._s3OutputPath = value.s3OutputPath;
        }
    }
    get kmsKeyId() {
        return this.getStringAttribute('kms_key_id');
    }
    set kmsKeyId(value) {
        this._kmsKeyId = value;
    }
    resetKmsKeyId() {
        this._kmsKeyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyIdInput() {
        return this._kmsKeyId;
    }
    get s3OutputPath() {
        return this.getStringAttribute('s3_output_path');
    }
    set s3OutputPath(value) {
        this._s3OutputPath = value;
    }
    // Temporarily expose input value. Use with caution.
    get s3OutputPathInput() {
        return this._s3OutputPath;
    }
}
exports.SagemakerFlowDefinitionOutputConfigOutputReference = SagemakerFlowDefinitionOutputConfigOutputReference;
_g = JSII_RTTI_SYMBOL_1;
SagemakerFlowDefinitionOutputConfigOutputReference[_g] = { fqn: "@cdktf/provider-aws.sagemakerFlowDefinition.SagemakerFlowDefinitionOutputConfigOutputReference", version: "19.15.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/sagemaker_flow_definition aws_sagemaker_flow_definition}
*/
class SagemakerFlowDefinition extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a SagemakerFlowDefinition resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the SagemakerFlowDefinition to import
    * @param importFromId The id of the existing SagemakerFlowDefinition that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/sagemaker_flow_definition#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the SagemakerFlowDefinition to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_sagemaker_flow_definition", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.46.0/docs/resources/sagemaker_flow_definition aws_sagemaker_flow_definition} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SagemakerFlowDefinitionConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_sagemaker_flow_definition',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.46.0',
                providerVersionConstraint: '~> 5.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // human_loop_activation_config - computed: false, optional: true, required: false
        this._humanLoopActivationConfig = new SagemakerFlowDefinitionHumanLoopActivationConfigOutputReference(this, "human_loop_activation_config");
        // human_loop_config - computed: false, optional: false, required: true
        this._humanLoopConfig = new SagemakerFlowDefinitionHumanLoopConfigOutputReference(this, "human_loop_config");
        // human_loop_request_source - computed: false, optional: true, required: false
        this._humanLoopRequestSource = new SagemakerFlowDefinitionHumanLoopRequestSourceOutputReference(this, "human_loop_request_source");
        // output_config - computed: false, optional: false, required: true
        this._outputConfig = new SagemakerFlowDefinitionOutputConfigOutputReference(this, "output_config");
        this._flowDefinitionName = config.flowDefinitionName;
        this._id = config.id;
        this._roleArn = config.roleArn;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._humanLoopActivationConfig.internalValue = config.humanLoopActivationConfig;
        this._humanLoopConfig.internalValue = config.humanLoopConfig;
        this._humanLoopRequestSource.internalValue = config.humanLoopRequestSource;
        this._outputConfig.internalValue = config.outputConfig;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get flowDefinitionName() {
        return this.getStringAttribute('flow_definition_name');
    }
    set flowDefinitionName(value) {
        this._flowDefinitionName = value;
    }
    // Temporarily expose input value. Use with caution.
    get flowDefinitionNameInput() {
        return this._flowDefinitionName;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get humanLoopActivationConfig() {
        return this._humanLoopActivationConfig;
    }
    putHumanLoopActivationConfig(value) {
        this._humanLoopActivationConfig.internalValue = value;
    }
    resetHumanLoopActivationConfig() {
        this._humanLoopActivationConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get humanLoopActivationConfigInput() {
        return this._humanLoopActivationConfig.internalValue;
    }
    get humanLoopConfig() {
        return this._humanLoopConfig;
    }
    putHumanLoopConfig(value) {
        this._humanLoopConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get humanLoopConfigInput() {
        return this._humanLoopConfig.internalValue;
    }
    get humanLoopRequestSource() {
        return this._humanLoopRequestSource;
    }
    putHumanLoopRequestSource(value) {
        this._humanLoopRequestSource.internalValue = value;
    }
    resetHumanLoopRequestSource() {
        this._humanLoopRequestSource.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get humanLoopRequestSourceInput() {
        return this._humanLoopRequestSource.internalValue;
    }
    get outputConfig() {
        return this._outputConfig;
    }
    putOutputConfig(value) {
        this._outputConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get outputConfigInput() {
        return this._outputConfig.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            flow_definition_name: cdktf.stringToTerraform(this._flowDefinitionName),
            id: cdktf.stringToTerraform(this._id),
            role_arn: cdktf.stringToTerraform(this._roleArn),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            human_loop_activation_config: sagemakerFlowDefinitionHumanLoopActivationConfigToTerraform(this._humanLoopActivationConfig.internalValue),
            human_loop_config: sagemakerFlowDefinitionHumanLoopConfigToTerraform(this._humanLoopConfig.internalValue),
            human_loop_request_source: sagemakerFlowDefinitionHumanLoopRequestSourceToTerraform(this._humanLoopRequestSource.internalValue),
            output_config: sagemakerFlowDefinitionOutputConfigToTerraform(this._outputConfig.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            flow_definition_name: {
                value: cdktf.stringToHclTerraform(this._flowDefinitionName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            role_arn: {
                value: cdktf.stringToHclTerraform(this._roleArn),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            tags: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tags),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            tags_all: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tagsAll),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            human_loop_activation_config: {
                value: sagemakerFlowDefinitionHumanLoopActivationConfigToHclTerraform(this._humanLoopActivationConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "SagemakerFlowDefinitionHumanLoopActivationConfigList",
            },
            human_loop_config: {
                value: sagemakerFlowDefinitionHumanLoopConfigToHclTerraform(this._humanLoopConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "SagemakerFlowDefinitionHumanLoopConfigList",
            },
            human_loop_request_source: {
                value: sagemakerFlowDefinitionHumanLoopRequestSourceToHclTerraform(this._humanLoopRequestSource.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "SagemakerFlowDefinitionHumanLoopRequestSourceList",
            },
            output_config: {
                value: sagemakerFlowDefinitionOutputConfigToHclTerraform(this._outputConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "SagemakerFlowDefinitionOutputConfigList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.SagemakerFlowDefinition = SagemakerFlowDefinition;
_h = JSII_RTTI_SYMBOL_1;
SagemakerFlowDefinition[_h] = { fqn: "@cdktf/provider-aws.sagemakerFlowDefinition.SagemakerFlowDefinition", version: "19.15.0" };
// =================
// STATIC PROPERTIES
// =================
SagemakerFlowDefinition.tfResourceType = "aws_sagemaker_flow_definition";
//# sourceMappingURL=data:application/json;base64,