Terraform will perform the following actions:

  # aws_cloudwatch_log_group.Function_CloudwatchLogGroup_ABDCF4C4 will be created
  + resource "aws_cloudwatch_log_group" "Function_CloudwatchLogGroup_ABDCF4C4" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + log_group_class   = (known after apply)
      + name              = "/aws/lambda/Function-c852aba6"
      + name_prefix       = (known after apply)
      + retention_in_days = 30
      + skip_destroy      = false
      + tags_all          = (known after apply)
    }

  # aws_cloudwatch_log_group.Queue-SetConsumer0_CloudwatchLogGroup_56C2891C will be created
  + resource "aws_cloudwatch_log_group" "Queue-SetConsumer0_CloudwatchLogGroup_56C2891C" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + log_group_class   = (known after apply)
      + name              = "/aws/lambda/Queue-SetConsumer0-c83c303c"
      + name_prefix       = (known after apply)
      + retention_in_days = 30
      + skip_destroy      = false
      + tags_all          = (known after apply)
    }

  # aws_iam_role.Function_IamRole_678BE84C will be created
  + resource "aws_iam_role" "Function_IamRole_678BE84C" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = (known after apply)
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)
    }

  # aws_iam_role.Queue-SetConsumer0_IamRole_7F9ED9ED will be created
  + resource "aws_iam_role" "Queue-SetConsumer0_IamRole_7F9ED9ED" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = (known after apply)
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)
    }

  # aws_iam_role_policy.Function_IamRolePolicy_E3B26607 will be created
  + resource "aws_iam_role_policy" "Function_IamRolePolicy_E3B26607" {
      + id          = (known after apply)
      + name        = (known after apply)
      + name_prefix = (known after apply)
      + policy      = (known after apply)
      + role        = (known after apply)
    }

  # aws_iam_role_policy.Queue-SetConsumer0_IamRolePolicy_0299B5AB will be created
  + resource "aws_iam_role_policy" "Queue-SetConsumer0_IamRolePolicy_0299B5AB" {
      + id          = (known after apply)
      + name        = (known after apply)
      + name_prefix = (known after apply)
      + policy      = (known after apply)
      + role        = (known after apply)
    }

  # aws_iam_role_policy_attachment.Function_IamRolePolicyAttachment_CACE1358 will be created
  + resource "aws_iam_role_policy_attachment" "Function_IamRolePolicyAttachment_CACE1358" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      + role       = (known after apply)
    }

  # aws_iam_role_policy_attachment.Queue-SetConsumer0_IamRolePolicyAttachment_4A4C5C5D will be created
  + resource "aws_iam_role_policy_attachment" "Queue-SetConsumer0_IamRolePolicyAttachment_4A4C5C5D" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      + role       = (known after apply)
    }

  # aws_lambda_event_source_mapping.Queue_EventSourceMapping_8332F7DC will be created
  + resource "aws_lambda_event_source_mapping" "Queue_EventSourceMapping_8332F7DC" {
      + batch_size                    = 1
      + enabled                       = true
      + event_source_arn              = (known after apply)
      + function_arn                  = (known after apply)
      + function_name                 = "Queue-SetConsumer0-c83c303c"
      + function_response_types       = [
          + "ReportBatchItemFailures",
        ]
      + id                            = (known after apply)
      + last_modified                 = (known after apply)
      + last_processing_result        = (known after apply)
      + maximum_record_age_in_seconds = (known after apply)
      + maximum_retry_attempts        = (known after apply)
      + parallelization_factor        = (known after apply)
      + state                         = (known after apply)
      + state_transition_reason       = (known after apply)
      + uuid                          = (known after apply)
    }

  # aws_lambda_function.Function will be created
  + resource "aws_lambda_function" "Function" {
      + architectures                  = [
          + "arm64",
        ]
      + arn                            = (known after apply)
      + function_name                  = "Function-c852aba6"
      + handler                        = "index.handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 1024
      + package_type                   = "Zip"
      + publish                        = true
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = (known after apply)
      + runtime                        = "nodejs20.x"
      + s3_bucket                      = (known after apply)
      + s3_key                         = "asset.c852aba6d7cbe50c86bbedd1463b05db52425574b5.41dfa1454dbde5f2888f3f2ad4dc47c6.zip"
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = (known after apply)
      + source_code_size               = (known after apply)
      + tags_all                       = (known after apply)
      + timeout                        = 60
      + version                        = (known after apply)

      + environment {
          + variables = (known after apply)
        }

      + vpc_config {
          + ipv6_allowed_for_dual_stack = false
          + vpc_id                      = (known after apply)
        }
    }

  # aws_lambda_function.Queue-SetConsumer0 will be created
  + resource "aws_lambda_function" "Queue-SetConsumer0" {
      + architectures                  = [
          + "arm64",
        ]
      + arn                            = (known after apply)
      + function_name                  = "Queue-SetConsumer0-c83c303c"
      + handler                        = "index.handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 1024
      + package_type                   = "Zip"
      + publish                        = true
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = (known after apply)
      + runtime                        = "nodejs20.x"
      + s3_bucket                      = (known after apply)
      + s3_key                         = "asset.c83c303c1266dbb851c70f1219bd171134fd688af4.36140a7f3c37eef6be772a49a48da1a3.zip"
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = (known after apply)
      + source_code_size               = (known after apply)
      + tags_all                       = (known after apply)
      + timeout                        = 30
      + version                        = (known after apply)

      + environment {
          + variables = (known after apply)
        }

      + vpc_config {
          + ipv6_allowed_for_dual_stack = false
          + vpc_id                      = (known after apply)
        }
    }

  # aws_s3_bucket.BucketLastMessage will be created
  + resource "aws_s3_bucket" "BucketLastMessage" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = (known after apply)
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = "bucket-last-message-c891435b-"
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags_all                    = (known after apply)
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)
    }

  # aws_s3_bucket.Code will be created
  + resource "aws_s3_bucket" "Code" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = (known after apply)
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = "code-c84a50b1-"
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags_all                    = (known after apply)
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)
    }

  # aws_s3_object.Function_S3Object_C62A0C2D will be created
  + resource "aws_s3_object" "Function_S3Object_C62A0C2D" {
      + acl                    = (known after apply)
      + bucket                 = (known after apply)
      + bucket_key_enabled     = (known after apply)
      + checksum_crc32         = (known after apply)
      + checksum_crc32c        = (known after apply)
      + checksum_sha1          = (known after apply)
      + checksum_sha256        = (known after apply)
      + content_type           = (known after apply)
      + etag                   = (known after apply)
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = "asset.c852aba6d7cbe50c86bbedd1463b05db52425574b5.41dfa1454dbde5f2888f3f2ad4dc47c6.zip"
      + kms_key_id             = (known after apply)
      + server_side_encryption = (known after apply)
      + source                 = "assets/Function_Asset_212D1EED/E9F87AA6E419D5433B20FBD41DB69427/archive.zip"
      + storage_class          = (known after apply)
      + tags_all               = (known after apply)
      + version_id             = (known after apply)
    }

  # aws_s3_object.Queue-SetConsumer0_S3Object_2AD0A795 will be created
  + resource "aws_s3_object" "Queue-SetConsumer0_S3Object_2AD0A795" {
      + acl                    = (known after apply)
      + bucket                 = (known after apply)
      + bucket_key_enabled     = (known after apply)
      + checksum_crc32         = (known after apply)
      + checksum_crc32c        = (known after apply)
      + checksum_sha1          = (known after apply)
      + checksum_sha256        = (known after apply)
      + content_type           = (known after apply)
      + etag                   = (known after apply)
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = "asset.c83c303c1266dbb851c70f1219bd171134fd688af4.36140a7f3c37eef6be772a49a48da1a3.zip"
      + kms_key_id             = (known after apply)
      + server_side_encryption = (known after apply)
      + source                 = "assets/Queue-SetConsumer0_Asset_370CBC69/F3238E06B8F0F62B185E3F359ADF98C8/archive.zip"
      + storage_class          = (known after apply)
      + tags_all               = (known after apply)
      + version_id             = (known after apply)
    }

  # aws_sqs_queue.Queue will be created
  + resource "aws_sqs_queue" "Queue" {
      + arn                               = (known after apply)
      + content_based_deduplication       = false
      + deduplication_scope               = (known after apply)
      + delay_seconds                     = 0
      + fifo_queue                        = false
      + fifo_throughput_limit             = (known after apply)
      + id                                = (known after apply)
      + kms_data_key_reuse_period_seconds = (known after apply)
      + max_message_size                  = 262144
      + message_retention_seconds         = 3600
      + name                              = "Queue-c822c726"
      + name_prefix                       = (known after apply)
      + policy                            = (known after apply)
      + receive_wait_time_seconds         = 0
      + redrive_allow_policy              = (known after apply)
      + redrive_policy                    = (known after apply)
      + sqs_managed_sse_enabled           = (known after apply)
      + tags_all                          = (known after apply)
      + url                               = (known after apply)
      + visibility_timeout_seconds        = 30
    }

Plan: 16 to add, 0 to change, 0 to destroy.