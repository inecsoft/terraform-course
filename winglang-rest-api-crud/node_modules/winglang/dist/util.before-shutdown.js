"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.beforeShutdown = void 0;
const lodash_once_1 = __importDefault(require("lodash.once"));
/**
 * Time in milliseconds to wait before forcing shutdown.
 */
const SHUTDOWN_TIMEOUT = 15000;
/**
 * Signals/Events that trigger the shutdown process.
 */
const HANDLED_SIGNALS = [
    "beforeExit",
    "SIGINT",
    "SIGTERM",
    "SIGHUP",
];
/**
 * A queue of listener callbacks to execute before shutting
 * down the process.
 */
const shutdownListeners = [];
/**
 * Listen for signals and execute given `fn` function once.
 * @param  fn Function to execute on shutdown.
 */
const processOnce = (fn) => {
    const onceFn = (0, lodash_once_1.default)(fn);
    HANDLED_SIGNALS.forEach((signal) => process.on(signal, (s) => void onceFn(s)));
};
/**
 * Sets a forced shutdown mechanism that will exit the process after `timeout` milliseconds.
 * @param timeout Time to wait before forcing shutdown (milliseconds)
 */
const forceExitAfter = (timeout) => () => {
    setTimeout(() => {
        // Force shutdown after timeout
        console.warn(`Could not close resources gracefully after ${timeout}ms: forcing shutdown`);
        return process.exit(1);
    }, timeout).unref();
};
/**
 * Main process shutdown handler. Will invoke every previously registered async shutdown listener
 * in the queue and exit with a code of `0`. Any `Promise` rejections from any listener will
 * be logged out as a warning, but won't prevent other callbacks from executing.
 */
async function shutdownHandler(codeOrSignal) {
    for (const listener of shutdownListeners) {
        try {
            await listener(codeOrSignal);
        }
        catch (error) {
            console.warn(`A shutdown handler failed before completing with: ${error instanceof Error ? error.message : error}`);
        }
    }
    if (typeof codeOrSignal === "string") {
        process.exit();
    }
    else {
        process.exit(codeOrSignal);
    }
}
/**
 * Registers a new shutdown listener to be invoked before exiting
 * the main process. Listener handlers are guaranteed to be called in the order
 * they were registered.
 * @param listener The shutdown listener to register.
 * @returns Echoes back the supplied `listener`.
 */
function beforeShutdown(listener) {
    shutdownListeners.push(listener);
    return listener;
}
exports.beforeShutdown = beforeShutdown;
// Register shutdown callback that kills the process after `SHUTDOWN_TIMEOUT` milliseconds
// This prevents custom shutdown handlers from hanging the process indefinitely
processOnce(forceExitAfter(SHUTDOWN_TIMEOUT));
// Register process shutdown callback
// Will listen to incoming signal events and execute all registered handlers in the stack
processOnce(shutdownHandler);
//# sourceMappingURL=util.before-shutdown.js.map