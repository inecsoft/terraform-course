"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.flattenObject = exports.projectTemplateNames = exports.PROJECT_TEMPLATES_DIR = exports.currentPackage = exports.parseNumericString = exports.generateTmpDir = exports.exec = exports.withSpinner = exports.normalPath = exports.DEFAULT_PARALLEL_SIZE = void 0;
const cp = __importStar(require("child_process"));
const fs_1 = require("fs");
const fs = __importStar(require("fs/promises"));
const os_1 = require("os");
const path_1 = require("path");
const util_1 = require("util");
exports.DEFAULT_PARALLEL_SIZE = 10;
/**
 * Normalize windows paths to be posix-like.
 */
function normalPath(path) {
    if (process.platform === "win32") {
        return (path
            // force posix path separator
            .replace(/\\+/g, "/"));
    }
    else {
        return path;
    }
}
exports.normalPath = normalPath;
async function withSpinner(message, fn) {
    // if progress is disabled, just run the function
    if (!process.env.PROGRESS) {
        return fn();
    }
    const ora = await Promise.resolve().then(() => __importStar(require("ora"))).then((m) => m.default);
    const spinner = ora({
        stream: process.stdout, // hangar tests currently expect stderr to be empty or else they fail
        text: `${message}\n`,
    }).start();
    try {
        const result = await fn();
        spinner.succeed();
        return result;
    }
    catch (e) {
        spinner.fail();
        throw e;
    }
}
exports.withSpinner = withSpinner;
/**
 * Execute a command and return its stdout.
 */
async function exec(command) {
    const output = await (0, util_1.promisify)(cp.exec)(command);
    return output.stdout.trim();
}
exports.exec = exec;
/**
 * Creates a clean environment for each test by copying the example file to a temporary directory.
 */
async function generateTmpDir() {
    return fs.mkdtemp((0, path_1.join)((0, os_1.tmpdir)(), "-wing-compile-test"));
}
exports.generateTmpDir = generateTmpDir;
/**
 * Casts a numeric string to a number.
 *
 * Returns `undefined` if the string is empty.
 *
 * @throws If the string is not a number.
 */
function parseNumericString(text) {
    if (!text) {
        return undefined;
    }
    const number = Number(text);
    if (isNaN(number)) {
        throw new Error(`"${text}" is not a number`);
    }
    return number;
}
exports.parseNumericString = parseNumericString;
exports.currentPackage = require("../package.json");
exports.PROJECT_TEMPLATES_DIR = (0, path_1.join)(__dirname, "..", "project-templates");
function projectTemplateNames() {
    const templateNames = new Set();
    (0, fs_1.readdirSync)((0, path_1.join)(exports.PROJECT_TEMPLATES_DIR)).forEach((language) => {
        (0, fs_1.readdirSync)((0, path_1.join)(exports.PROJECT_TEMPLATES_DIR, language)).forEach((template) => {
            templateNames.add(template);
        });
    });
    return [...templateNames];
}
exports.projectTemplateNames = projectTemplateNames;
function flattenObject(item, parentKey = "") {
    let flattened = {};
    if (typeof item === "object") {
        for (const key in item) {
            const propName = parentKey ? `${parentKey}_${key}` : key;
            Object.assign(flattened, flattenObject(item[key], propName));
        }
    }
    else {
        flattened[parentKey] = item;
    }
    return flattened;
}
exports.flattenObject = flattenObject;
//# sourceMappingURL=util.js.map