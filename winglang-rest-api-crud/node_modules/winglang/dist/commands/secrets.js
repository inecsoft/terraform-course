"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.secrets = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const platform_1 = require("@winglang/sdk/lib/platform");
const inquirer_1 = __importDefault(require("inquirer"));
const compile_1 = require("./compile");
async function secrets(entrypoint, options) {
    // Compile the program to generate secrets file
    const outdir = await (0, compile_1.compile)(entrypoint, options);
    const secretsFile = path_1.default.join(outdir, platform_1.SECRETS_FILE_NAME);
    let secretNames = fs_1.default.existsSync(secretsFile)
        ? JSON.parse(fs_1.default.readFileSync(secretsFile, "utf-8"))
        : [];
    process.env.WING_SOURCE_DIR = path_1.default.resolve(path_1.default.dirname(entrypoint ?? "main.w"));
    let secretValues = {};
    console.log(`${secretNames.length} secret(s) found\n`);
    if (options?.list) {
        console.log("- " + secretNames.join("\n- "));
        return;
    }
    if (secretNames.length === 0) {
        return;
    }
    for (const secret of secretNames) {
        const response = await inquirer_1.default.prompt([
            {
                type: "password",
                name: "value",
                message: `Enter the secret value for ${secret}:`,
            },
        ]);
        secretValues[secret] = response.value;
    }
    const plaformManager = new platform_1.PlatformManager({ platformPaths: options?.platform });
    await plaformManager.storeSecrets(secretValues);
}
exports.secrets = secrets;
//# sourceMappingURL=secrets.js.map