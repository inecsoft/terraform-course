"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const promises_1 = require("fs/promises");
const path_1 = require("path");
const vitest_1 = require("vitest");
const snapshots_1 = require("./snapshots");
const util_1 = require("src/util");
const prevCI = process.env.CI;
(0, vitest_1.describe)("determineSnapshotMode", () => {
    (0, vitest_1.beforeEach)(() => {
        delete process.env.CI;
    });
    (0, vitest_1.afterEach)(() => {
        process.env.CI = prevCI;
    });
    (0, vitest_1.test)("--snapshots=never", () => {
        (0, vitest_1.expect)((0, snapshots_1.determineSnapshotMode)("tf-aws", {
            clean: false,
            platform: [],
            snapshots: snapshots_1.SnapshotMode.NEVER,
        })).toBe(snapshots_1.SnapshotMode.NEVER);
    });
    (0, vitest_1.test)("--snapshots=dry", () => {
        (0, vitest_1.expect)((0, snapshots_1.determineSnapshotMode)("tf-aws", {
            clean: false,
            platform: [],
            snapshots: snapshots_1.SnapshotMode.UPDATE,
        })).toBe(snapshots_1.SnapshotMode.UPDATE);
    });
    (0, vitest_1.test)("--snapshots=deploy", () => {
        (0, vitest_1.expect)((0, snapshots_1.determineSnapshotMode)("tf-aws", {
            clean: false,
            platform: [],
            snapshots: snapshots_1.SnapshotMode.DEPLOY,
        })).toBe(snapshots_1.SnapshotMode.DEPLOY);
    });
    (0, vitest_1.test)("target=sim always disables (even if explicitly set)", () => {
        (0, vitest_1.expect)((0, snapshots_1.determineSnapshotMode)("sim", {
            clean: false,
            platform: [],
            snapshots: snapshots_1.SnapshotMode.DEPLOY,
        })).toBe(snapshots_1.SnapshotMode.NEVER);
        (0, vitest_1.expect)((0, snapshots_1.determineSnapshotMode)("sim", {
            clean: false,
            platform: [],
            snapshots: snapshots_1.SnapshotMode.ASSERT,
        })).toBe(snapshots_1.SnapshotMode.NEVER);
        (0, vitest_1.expect)((0, snapshots_1.determineSnapshotMode)("sim", {
            clean: false,
            platform: [],
            snapshots: snapshots_1.SnapshotMode.UPDATE,
        })).toBe(snapshots_1.SnapshotMode.NEVER);
    });
    (0, vitest_1.describe)("--snapshots=auto", () => {
        (0, vitest_1.describe)("CI=1", () => {
            (0, vitest_1.beforeEach)(() => {
                process.env.CI = "1";
            });
            (0, vitest_1.test)("sim => disabled", () => {
                (0, vitest_1.expect)((0, snapshots_1.determineSnapshotMode)("sim", {
                    clean: false,
                    platform: [],
                })).toBe(snapshots_1.SnapshotMode.NEVER);
            });
            (0, vitest_1.test)("non sim => assert", () => {
                (0, vitest_1.expect)((0, snapshots_1.determineSnapshotMode)("tf-azure", {
                    clean: false,
                    snapshots: snapshots_1.SnapshotMode.AUTO,
                    platform: [],
                })).toBe(snapshots_1.SnapshotMode.ASSERT);
            });
        });
        (0, vitest_1.describe)("not in CI", () => {
            (0, vitest_1.test)("sim => disabled", () => {
                (0, vitest_1.expect)((0, snapshots_1.determineSnapshotMode)("sim", {
                    clean: false,
                    platform: [],
                })).toBe(snapshots_1.SnapshotMode.NEVER);
            });
            (0, vitest_1.test)("non sim => deploy", () => {
                (0, vitest_1.expect)((0, snapshots_1.determineSnapshotMode)("tf-azure", {
                    clean: false,
                    platform: [],
                })).toBe(snapshots_1.SnapshotMode.DEPLOY);
            });
        });
    });
});
(0, vitest_1.describe)("captureSnapshot", async () => {
    async function makeEntrypoint() {
        const workdir = await (0, util_1.generateTmpDir)();
        const entrypoint = (0, path_1.join)(workdir, "main.w");
        await (0, promises_1.writeFile)(entrypoint, `
      bring cloud;
      let b = new cloud.Bucket();

      test "put" {
        b.put("key", "value");
        assert(b.get("key") == "value");
      }
    `);
        return entrypoint;
    }
    const expected = await (0, promises_1.readFile)((0, path_1.join)(__dirname, "fixtures", "main.w.tf-aws.snap.md"), "utf-8");
    (0, vitest_1.test)("skip if snapshots are disabled", async () => {
        const entrypoint = await makeEntrypoint();
        await (0, snapshots_1.captureSnapshot)(entrypoint, "tf-aws", {
            clean: false,
            platform: ["tf-aws"],
            snapshots: snapshots_1.SnapshotMode.NEVER,
        });
        (0, vitest_1.expect)(await (0, promises_1.readdir)((0, path_1.dirname)(entrypoint))).toEqual(["main.w"]);
    });
    (0, vitest_1.test)("snapshots are created for UPDATE", async () => {
        const entrypoint = await makeEntrypoint();
        await (0, snapshots_1.captureSnapshot)(entrypoint, "tf-aws", {
            clean: false,
            platform: ["tf-aws"],
            snapshots: snapshots_1.SnapshotMode.UPDATE,
        });
        const snapshot = await (0, promises_1.readFile)((0, path_1.join)((0, path_1.dirname)(entrypoint), "main.w.tf-aws.snap.md"), "utf-8");
        (0, vitest_1.expect)(snapshot).toStrictEqual(expected);
    });
    (0, vitest_1.test)("snapshots are created for DEPLOY", async () => {
        const entrypoint = await makeEntrypoint();
        await (0, snapshots_1.captureSnapshot)(entrypoint, "tf-aws", {
            clean: false,
            platform: ["tf-aws"],
            snapshots: snapshots_1.SnapshotMode.DEPLOY,
        });
        const snapshot = await (0, promises_1.readFile)((0, path_1.join)((0, path_1.dirname)(entrypoint), "main.w.tf-aws.snap.md"), "utf-8");
        (0, vitest_1.expect)(snapshot).toStrictEqual(expected);
    });
    (0, vitest_1.test)("ASSERT fails if there is no existing snapshot", async () => {
        const entrypoint = await makeEntrypoint();
        await (0, vitest_1.expect)((0, snapshots_1.captureSnapshot)(entrypoint, "tf-aws", {
            clean: false,
            platform: ["tf-aws"],
            snapshots: snapshots_1.SnapshotMode.ASSERT,
        })).rejects.toThrowError(/Snapshot file does not exist/);
    });
    (0, vitest_1.test)("ASSERT fails if snapshot does not match", async () => {
        const entrypoint = await makeEntrypoint();
        await (0, promises_1.writeFile)((0, path_1.join)((0, path_1.dirname)(entrypoint), "main.w.tf-aws.snap.md"), expected.replace(`"force_destroy": false`, `"force_destroy": true`));
        await (0, vitest_1.expect)((0, snapshots_1.captureSnapshot)(entrypoint, "tf-aws", {
            clean: false,
            platform: ["tf-aws"],
            snapshots: snapshots_1.SnapshotMode.ASSERT,
        })).rejects.toThrowError(/\+        "force_destroy": false/);
    });
    (0, vitest_1.test)("ASSERT succeeds if snapshots match", async () => {
        const entrypoint = await makeEntrypoint();
        await (0, promises_1.writeFile)((0, path_1.join)((0, path_1.dirname)(entrypoint), "main.w.tf-aws.snap.md"), expected);
        await (0, snapshots_1.captureSnapshot)(entrypoint, "tf-aws", {
            clean: false,
            platform: ["tf-aws"],
            snapshots: snapshots_1.SnapshotMode.ASSERT,
        });
    });
});
//# sourceMappingURL=snapshots.test.js.map