"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateOutputFilePath = exports.writeResultsToFile = exports.printResults = void 0;
const promises_1 = require("fs/promises");
const path_1 = require("path");
const chalk_1 = __importDefault(require("chalk"));
const snapshots_1 = require("./snapshots");
function printResults(testResults, duration) {
    const durationInSeconds = duration / 1000;
    const totalSum = testResults.length;
    const unsupportedFiles = testResults.filter(({ results }) => results.some(({ unsupported }) => unsupported));
    const failing = testResults.filter(({ results }) => results.some(({ pass, unsupported }) => !pass && !unsupported));
    const passing = testResults.filter(({ results }) => results.every(({ pass }) => !!pass));
    const failingTestsNumber = failing.reduce((acc, { results }) => acc + results.filter(({ pass, unsupported }) => !pass && !unsupported).length, 0);
    const unsupportedTestsNumber = unsupportedFiles.reduce((acc, { results }) => acc + results.filter(({ unsupported }) => !!unsupported).length, 0);
    const passingTestsNumber = testResults.reduce((acc, { results }) => acc + results.filter(({ pass }) => !!pass).length, 0);
    const areErrors = failing.length + unsupportedFiles.length > 0 && totalSum > 1;
    const showTitle = totalSum > 1;
    const res = [];
    if (showTitle) {
        // prints a list of the tests names with an icon
        res.push("");
        res.push(`Results:`);
        res.push(...passing.map(({ testName }) => `    ${chalk_1.default.green("✓")} ${testName}`));
        res.push(...failing.map(({ testName }) => `    ${chalk_1.default.red("×")} ${testName}`));
        res.push(...unsupportedFiles.map(({ testName }) => `    ${chalk_1.default.yellow("?")} ${testName}`));
    }
    if (areErrors) {
        // prints error messages form failed tests
        res.push("");
        res.push("Errors:");
        res.push(...[...failing, ...unsupportedFiles].map(({ testName, results }) => [
            `At ${testName}`,
            results.reduce((acc, { pass, error, unsupported }) => pass ? acc : unsupported && error ? [...acc, error] : [...acc, chalk_1.default.red(error)], []),
        ].join("\n")));
    }
    // prints a summary of how many tests passed and failed
    res.push("");
    const testCount = [
        failingTestsNumber && chalk_1.default.red(` ${failingTestsNumber} failed`),
        passingTestsNumber && chalk_1.default.green(` ${passingTestsNumber} passed`),
        unsupportedTestsNumber && chalk_1.default.yellow(` ${unsupportedTestsNumber} unsupported`),
    ]
        .filter((item) => !!item)
        .join(chalk_1.default.dim(" |"));
    const fileCount = [
        failing.length && chalk_1.default.red(` ${failing.length} failed`),
        passing.length && chalk_1.default.green(` ${passing.length} passed`),
        unsupportedFiles.length && chalk_1.default.yellow(` ${unsupportedFiles.length} unsupported`),
    ]
        .filter((item) => !!item)
        .join(chalk_1.default.dim(" |"));
    res.push(`${chalk_1.default.dim("Tests")}${testCount} ${chalk_1.default.dim(`(${failingTestsNumber + passingTestsNumber + unsupportedTestsNumber})`)}`);
    const snapshotSummary = renderSnapshotSummary(testResults);
    // print snapshot summary
    res.push(`${chalk_1.default.dim("Snapshots")} ${snapshotSummary}`);
    // prints a summary of how many tests files passed and failed
    res.push(`${chalk_1.default.dim("Test Files")}${fileCount} ${chalk_1.default.dim(`(${totalSum})`)}`);
    // prints the test duration
    res.push(`${chalk_1.default.dim("Duration")} ${Math.floor(durationInSeconds / 60)}m${(durationInSeconds % 60).toFixed(2)}s`);
    console.log(res.join("\n"));
}
exports.printResults = printResults;
function renderSnapshotSummary(results) {
    const stats = {};
    // count the number of each snapshot result
    for (const t of results) {
        stats[t.snapshot] = (stats[t.snapshot] ?? 0) + 1;
    }
    // color map
    const snapshotSummaryColors = {
        [snapshots_1.SnapshotResult.NEW]: chalk_1.default.yellow,
        [snapshots_1.SnapshotResult.UPDATED]: chalk_1.default.yellow,
        [snapshots_1.SnapshotResult.VERIFIED]: chalk_1.default.green,
        [snapshots_1.SnapshotResult.SKIPPED]: chalk_1.default.dim,
        [snapshots_1.SnapshotResult.MISMATCH]: chalk_1.default.red,
    };
    const snapshotSummary = [];
    for (const t of [
        snapshots_1.SnapshotResult.MISMATCH,
        snapshots_1.SnapshotResult.VERIFIED,
        snapshots_1.SnapshotResult.NEW,
        snapshots_1.SnapshotResult.UPDATED,
        snapshots_1.SnapshotResult.SKIPPED,
    ]) {
        const count = t in stats ? stats[t] : 0;
        if (count > 0) {
            snapshotSummary.push(snapshotSummaryColors[t](`${stats[t]} ${t.toLowerCase()}`));
        }
    }
    return snapshotSummary.join(chalk_1.default.dim(" | "));
}
async function writeResultsToFile(testResults, duration, filePath, platforms) {
    const output = { duration, platforms, results: {} };
    for (const result of testResults) {
        output.results[result.testName] = result.results.reduce((acc, item) => ({ ...acc, [item.path.replace(/[\w+\/\\.-]+test:/, "")]: item }), {});
    }
    try {
        const { dir } = (0, path_1.parse)(filePath);
        if (dir !== "") {
            await (0, promises_1.mkdir)(dir, { recursive: true });
        }
        await (0, promises_1.writeFile)(filePath, JSON.stringify(output, null, 2), { encoding: "utf-8" });
    }
    catch (error) {
        console.error(`error while writing test output file: ${error}`);
    }
}
exports.writeResultsToFile = writeResultsToFile;
function validateOutputFilePath(filePath) {
    const { ext } = (0, path_1.parse)(filePath);
    if (ext !== ".json") {
        throw new Error(`only .json output files are supported. (found "${ext}")`);
    }
}
exports.validateOutputFilePath = validateOutputFilePath;
//# sourceMappingURL=results.js.map