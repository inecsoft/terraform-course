"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const promises_1 = require("fs/promises");
const os_1 = require("os");
const path_1 = require("path");
const app_1 = require("@wingconsole/app");
const vitest_1 = require("vitest");
const run_1 = require("./run");
vitest_1.vi.mock("@wingconsole/app", () => {
    return {
        createConsoleApp: vitest_1.vi.fn((options) => {
            return {
                port: options?.requestedPort ?? 1214,
                platfrom: options?.platform,
            };
        }),
    };
});
(0, vitest_1.test)("wing it runs the only entrypoint file named main.w", async () => {
    const workdir = await (0, promises_1.mkdtemp)((0, path_1.join)((0, os_1.tmpdir)(), "-wing-it-test"));
    const prevdir = process.cwd();
    try {
        process.chdir(workdir);
        (0, fs_1.writeFileSync)("main.w", "bring cloud;");
        await (0, run_1.run)();
        (0, vitest_1.expect)(app_1.createConsoleApp).toBeCalledWith({
            wingfile: (0, path_1.resolve)("main.w"),
            requestedPort: 3000,
            hostUtils: vitest_1.expect.anything(),
            requireAcceptTerms: vitest_1.expect.anything(),
            open: true,
        });
    }
    finally {
        process.chdir(prevdir);
    }
});
(0, vitest_1.test)("wing it runs the only entrypoint file ending with .main.w", async () => {
    const workdir = await (0, promises_1.mkdtemp)((0, path_1.join)((0, os_1.tmpdir)(), "-wing-it-test"));
    const prevdir = process.cwd();
    try {
        process.chdir(workdir);
        (0, fs_1.writeFileSync)("foo.main.w", "bring cloud;");
        await (0, run_1.run)();
        (0, vitest_1.expect)(app_1.createConsoleApp).toBeCalledWith({
            wingfile: (0, path_1.resolve)("foo.main.w"),
            requestedPort: 3000,
            hostUtils: vitest_1.expect.anything(),
            requireAcceptTerms: vitest_1.expect.anything(),
            open: true,
        });
    }
    finally {
        process.chdir(prevdir);
    }
});
(0, vitest_1.test)("wing it doesn't run the only entrypoint file ending with .test.w", async () => {
    const workdir = await (0, promises_1.mkdtemp)((0, path_1.join)((0, os_1.tmpdir)(), "-wing-it-test"));
    const prevdir = process.cwd();
    try {
        process.chdir(workdir);
        (0, fs_1.writeFileSync)("foo.test.w", "bring cloud;");
        await (0, vitest_1.expect)(run_1.run).rejects.toThrow("Cannot find entrypoint files (main.w or *.main.w) in the current directory.");
    }
    finally {
        process.chdir(prevdir);
    }
});
(0, vitest_1.test)("wing it throws error for a directory with a non-entrypoint file", async () => {
    const workdir = await (0, promises_1.mkdtemp)((0, path_1.join)((0, os_1.tmpdir)(), "-wing-it-test"));
    const prevdir = process.cwd();
    try {
        process.chdir(workdir);
        (0, fs_1.writeFileSync)("foo.w", "bring cloud;");
        await (0, vitest_1.expect)(run_1.run).rejects.toThrow("Cannot find entrypoint files (main.w or *.main.w) in the current directory.");
    }
    finally {
        process.chdir(prevdir);
    }
});
(0, vitest_1.test)("wing it throws error for a directory with more than one entrypoint file", async () => {
    const workdir = await (0, promises_1.mkdtemp)((0, path_1.join)((0, os_1.tmpdir)(), "-wing-it-test"));
    const prevdir = process.cwd();
    try {
        process.chdir(workdir);
        (0, fs_1.writeFileSync)("main.w", "bring cloud;");
        (0, fs_1.writeFileSync)("foo.main.w", "bring cloud;");
        await (0, vitest_1.expect)(run_1.run).rejects.toThrow("Multiple entrypoints found in the current directory (foo.main.w, main.w). Please specify which one to use.");
    }
    finally {
        process.chdir(prevdir);
    }
});
(0, vitest_1.test)("wing it with a nested file runs", async () => {
    const workdir = await (0, promises_1.mkdtemp)((0, path_1.join)((0, os_1.tmpdir)(), "-wing-it-test"));
    const subdir = (0, path_1.join)(workdir, "subdir");
    const filePath = (0, path_1.join)(subdir, "foo.main.w");
    const prevdir = process.cwd();
    try {
        process.chdir(workdir);
        (0, fs_1.mkdirSync)(subdir);
        (0, fs_1.writeFileSync)(filePath, "bring cloud;");
        await (0, run_1.run)(filePath);
        (0, vitest_1.expect)(app_1.createConsoleApp).toBeCalledWith({
            wingfile: (0, path_1.resolve)(filePath),
            requestedPort: 3000,
            hostUtils: vitest_1.expect.anything(),
            requireAcceptTerms: vitest_1.expect.anything(),
            open: true,
        });
    }
    finally {
        process.chdir(prevdir);
    }
});
(0, vitest_1.test)("wing it with an invalid file throws exception", async () => {
    const workdir = await (0, promises_1.mkdtemp)((0, path_1.join)((0, os_1.tmpdir)(), "-wing-it-test"));
    const prevdir = process.cwd();
    try {
        process.chdir(workdir);
        (0, fs_1.writeFileSync)("foo.main.w", "bring cloud;");
        await (0, vitest_1.expect)((0, run_1.run)("bar.main.w")).rejects.toThrow("bar.main.w doesn't exist");
    }
    finally {
        process.chdir(prevdir);
    }
});
(0, vitest_1.test)("wing it with a custom port runs", async () => {
    const workdir = await (0, promises_1.mkdtemp)((0, path_1.join)((0, os_1.tmpdir)(), "-wing-it-test"));
    const prevdir = process.cwd();
    try {
        process.chdir(workdir);
        (0, fs_1.writeFileSync)("foo.main.w", "bring cloud;");
        await (0, run_1.run)("foo.main.w", { port: "5000" });
        (0, vitest_1.expect)(app_1.createConsoleApp).toBeCalledWith({
            wingfile: (0, path_1.resolve)("foo.main.w"),
            requestedPort: 5000,
            hostUtils: vitest_1.expect.anything(),
            requireAcceptTerms: vitest_1.expect.anything(),
            open: true,
        });
    }
    finally {
        process.chdir(prevdir);
    }
});
(0, vitest_1.test)("wing it throws when invalid port number is used", async () => {
    const workdir = await (0, promises_1.mkdtemp)((0, path_1.join)((0, os_1.tmpdir)(), "-wing-it-test"));
    const prevdir = process.cwd();
    try {
        process.chdir(workdir);
        (0, fs_1.writeFileSync)("foo.main.w", "bring cloud;");
        await (0, vitest_1.expect)(async () => {
            await (0, run_1.run)("foo.main.w", { port: "not a number" });
        }).rejects.toThrowError('"not a number" is not a number');
    }
    finally {
        process.chdir(prevdir);
    }
});
(0, vitest_1.test)("wing it throws when invalid platform is used", async () => {
    const workdir = await (0, promises_1.mkdtemp)((0, path_1.join)((0, os_1.tmpdir)(), "-wing-it-test"));
    const prevdir = process.cwd();
    try {
        process.chdir(workdir);
        (0, fs_1.writeFileSync)("foo.main.w", "bring cloud;");
        await (0, vitest_1.expect)(async () => {
            await (0, run_1.run)("foo.main.w", { platform: ["anyPlatform"] });
        }).rejects.toThrowError('The first platform in the list must be the sim platform (try "-t sim -t anyPlatform")');
    }
    finally {
        process.chdir(prevdir);
    }
});
(0, vitest_1.test)("wing it with a custom platform runs", async () => {
    const workdir = await (0, promises_1.mkdtemp)((0, path_1.join)((0, os_1.tmpdir)(), "-wing-it-test"));
    const prevdir = process.cwd();
    try {
        process.chdir(workdir);
        (0, fs_1.writeFileSync)("foo.main.w", "bring cloud;");
        await (0, run_1.run)("foo.main.w", { platform: ["sim", "anyPlatform"] });
        (0, vitest_1.expect)(app_1.createConsoleApp).toBeCalledWith({
            wingfile: (0, path_1.resolve)("foo.main.w"),
            requestedPort: vitest_1.expect.anything(),
            hostUtils: vitest_1.expect.anything(),
            platform: ["sim", "anyPlatform"],
            requireAcceptTerms: vitest_1.expect.anything(),
            open: true,
        });
    }
    finally {
        process.chdir(prevdir);
    }
});
//# sourceMappingURL=run.test.js.map