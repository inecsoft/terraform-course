"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkForUpdates = void 0;
const debug_1 = __importDefault(require("debug"));
const util_1 = require("../util");
const log = (0, debug_1.default)("wing:update");
const DEFAULT_UPDATE_RATE = 1000 * 60 * 60 * 24; // 1 day
/** Handles checking for toolchain updates */
async function checkForUpdates() {
    if (!process.stdout.isTTY || process.env.CI || util_1.currentPackage.version === "0.0.0") {
        log("skipping update check");
        return;
    }
    log("checking for updates...");
    // Why eval? `winglang` targets CJS, but `tiny-updater` targets ESM.
    // Technically CJS is allowed to dynamically import ESM,
    // but tsc converts dynamic imports into a require call (in a promise).
    // Wrapping the import in eval forces tsc to leave it alone.
    const updateNotifier = await eval('import("tiny-updater")');
    await updateNotifier.default({
        name: util_1.currentPackage.name,
        version: util_1.currentPackage.version,
        ttl: DEFAULT_UPDATE_RATE,
    });
}
exports.checkForUpdates = checkForUpdates;
//# sourceMappingURL=upgrade.js.map