"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const app_1 = require("@wingconsole/app");
const compiler_1 = require("@winglang/compiler");
const debug_1 = require("debug");
const glob_1 = require("glob");
const env_1 = require("../env");
const util_1 = require("../util");
const util_before_shutdown_js_1 = require("../util.before-shutdown.js");
/**
 * Runs a Wing program in the Console.
 * @param entrypoint The program .w entrypoint. Looks for a .w file in the current directory if not specified.
 * @param options Run options.
 */
async function run(entrypoint, options) {
    const requestedPort = (0, util_1.parseNumericString)(options?.port) ?? 3000;
    const openBrowser = options?.open ?? true;
    if (!entrypoint) {
        const wingFiles = (await (0, glob_1.glob)("{main,*.main}.{w,ts}")).sort();
        if (wingFiles.length === 0) {
            throw new Error("Cannot find entrypoint files (main.w or *.main.w) in the current directory.");
        }
        if (wingFiles.length > 1) {
            throw new Error(`Multiple entrypoints found in the current directory (${wingFiles.join(", ")}). Please specify which one to use.`);
        }
        entrypoint = wingFiles[0];
    }
    if (!(0, fs_1.existsSync)(entrypoint)) {
        throw new Error(entrypoint + " doesn't exist");
    }
    (0, env_1.loadEnvVariables)({ cwd: (0, path_1.resolve)((0, path_1.dirname)(entrypoint)) });
    if (options?.platform && options?.platform[0] !== compiler_1.BuiltinPlatform.SIM) {
        throw new Error(`The first platform in the list must be the sim platform (try "-t sim -t ${options.platform.join(" -t")}")`);
    }
    entrypoint = (0, path_1.resolve)(entrypoint);
    (0, debug_1.debug)("opening the wing console with:" + entrypoint);
    const { port, close } = await (0, app_1.createConsoleApp)({
        wingfile: entrypoint,
        requestedPort,
        hostUtils: {
            async openExternal(url) {
                open(url);
            },
        },
        platform: options?.platform,
        requireAcceptTerms: !!process.stdin.isTTY,
        open: openBrowser,
        watchGlobs: options?.watch,
    });
    const url = `http://localhost:${port}/`;
    console.log(`The Wing Console is running at ${url}`);
    (0, util_before_shutdown_js_1.beforeShutdown)(async () => {
        await close();
    });
}
exports.run = run;
//# sourceMappingURL=run.js.map