"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.init = void 0;
// This file and the main function are named "init" instead of "new"
// to avoid a conflict with the "new" keyword in JavaScript
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const promises_1 = require("fs/promises");
const path_1 = require("path");
const util_1 = require("util");
const chalk_1 = __importDefault(require("chalk"));
const inquirer_1 = __importDefault(require("inquirer"));
const pack_1 = require("./pack");
const util_2 = require("../util");
const execPromise = (0, util_1.promisify)(child_process_1.exec);
/**
 * Compiles a Wing program. Throws an error if compilation fails.
 * @param entrypoint The program .w entrypoint.
 * @param options Compile options.
 * @returns the output directory
 */
async function init(template, options = {}) {
    const templates = (0, util_2.projectTemplateNames)();
    let language = options.language ?? "wing";
    // If --list-templates is specified, list the available templates and exit
    if (options.listTemplates) {
        console.log(templates.join("\n"));
        return;
    }
    // If no template is specified, let them interactively select one
    if (!template) {
        console.log("Usage: wing new <template> [--language <language>]");
        console.log();
        try {
            const responses = await inquirer_1.default.prompt([
                {
                    type: "list",
                    name: "template",
                    message: "Please select a template:",
                    choices: templates,
                },
                {
                    type: "list",
                    name: "language",
                    message: "Please select a language:",
                    choices: ["wing", "typescript"],
                },
            ]);
            template = responses.template;
            language = responses.language;
            console.log();
        }
        catch (err) {
            if (err.isTtyError) {
                throw new Error(`Please select from one of the available choices:\n  ${templates.join("\n  ")}\n\nHave an idea for a new template? Let us know at https://github.com/winglang/wing/issues/!`);
            }
        }
    }
    if (!templates.includes(template)) {
        throw new Error(`Template "${template}" is not available. Please select from one of the available choices:\n  ${templates.join("\n  ")}\n\nHave an idea for a new template? Let us know at https://github.com/winglang/wing/issues/!`);
    }
    // Parse the language selected
    switch (language) {
        case "ts":
        case "typescript":
            language = "typescript";
            break;
        case "wing":
        case "winglang":
            language = "wing";
            break;
        default:
            throw new Error(`Unknown language: "${language}". Please select from "wing" or "typescript".`);
    }
    // Since this object is used by our analytics collector
    options.language = language;
    options.template = template;
    // Check if the template exists for the selected language
    const templatePath = (0, path_1.join)(util_2.PROJECT_TEMPLATES_DIR, language, template);
    const templateExists = await (0, pack_1.exists)(templatePath, fs_1.constants.R_OK);
    if (!templateExists) {
        throw new Error(`Template "${template}" is not available in ${language}. Please let us know you'd like to use this template in ${language} by opening an issue at https://github.com/winglang/wing/issues/!`);
    }
    // Obtain a list of files in the template, and check they won't overwrite anything
    const files = await getFiles(templatePath);
    const existingFiles = await getFiles(process.cwd());
    const overwrite = existingFiles.filter((file) => files.includes(file));
    if (overwrite.length > 0) {
        throw new Error(`The following files already exist in the current directory and will be overwritten:\n  ${overwrite.join("\n  ")}\n\nPlease move or delete these files and try again.`);
    }
    // Copy the template
    await copyFiles(templatePath, process.cwd());
    // Replace wing version
    const packageJsonPath = (0, path_1.join)(process.cwd(), "package.json");
    if ((0, fs_1.existsSync)(packageJsonPath)) {
        const packageJson = JSON.parse(await (0, promises_1.readFile)(packageJsonPath, "utf8"));
        const isDevVersion = util_2.currentPackage.version.startsWith("0.0.0");
        const depKeys = ["dependencies", "devDependencies", "peerDependencies"];
        for (const depKey of depKeys) {
            const depMap = packageJson[depKey] ?? {};
            for (const [key, val] of Object.entries(depMap)) {
                if (val.includes("#WING_VERSION#")) {
                    if (isDevVersion) {
                        if (key === "winglang") {
                            depMap[key] = `file:${(0, path_1.join)(__dirname, "..", "..")}`;
                        }
                        else {
                            depMap[key] = `file:${(0, path_1.join)(__dirname, "..", "..", "..", "..", "libs", key)}`;
                        }
                    }
                    else {
                        depMap[key] = depMap[key].replace("#WING_VERSION#", util_2.currentPackage.version);
                    }
                }
            }
        }
        await (0, promises_1.writeFile)(packageJsonPath, JSON.stringify(packageJson, null, 2));
    }
    // Run npm install
    console.log("Installing dependencies...");
    console.log();
    // Check if npm is installed
    const npmExists = await execPromise("npm --version")
        .then(() => true)
        .catch(() => false);
    if (!npmExists) {
        console.log(`${chalk_1.default.yellow("warning:")} npm is not installed. Please install npm and run "npm install" to finish setting up any project dependencies.`);
    }
    // Install dependencies (in the current directory)
    try {
        await execPromise("npm install");
    }
    catch (err) {
        console.log(`${chalk_1.default.yellow("warning:")} npm install failed. Please let us know there's an issue with this template by opening an issue at at https://github.com/winglang/wing/issues/.`);
        console.log();
        console.error(err.stderr);
    }
    console.log(`Created a new ${chalk_1.default.cyan(template)} project in the current directory! ðŸŽ‰`);
    console.log();
    console.log("Not sure where to get started? In your Wing application folder, try running:");
    console.log();
    console.log("  wing compile - build your project");
    console.log("  wing it - simulate your app in the Wing Console");
    console.log("  wing test - run all tests");
    console.log();
    console.log("Visit the docs for examples and tutorials: https://winglang.io/docs");
}
exports.init = init;
/**
 * Recursively copies a directory.
 * @param src The source directory.
 * @param dest The destination directory.
 */
async function copyFiles(src, dest) {
    // Create the destination directory if it doesn't exist
    if (!(0, fs_1.existsSync)(dest)) {
        await (0, promises_1.mkdir)(dest);
    }
    // Copy all files
    const files = await getFiles(src);
    for (const file of files) {
        await (0, promises_1.cp)((0, path_1.join)(src, file), (0, path_1.join)(dest, file));
    }
}
/**
 * Recursively gets all files in a directory.
 * @param dir The directory to search.
 * @returns a list of files.
 */
async function getFiles(dir) {
    return getFilesHelper(dir, dir);
}
async function getFilesHelper(basedir, dir) {
    const dirents = await (0, promises_1.readdir)(dir, { withFileTypes: true });
    const files = await Promise.all(dirents.map(async (dirent) => {
        const res = (0, path_1.join)(dir, dirent.name);
        return dirent.isDirectory() ? getFilesHelper(basedir, res) : (0, path_1.relative)(basedir, res);
    }));
    return Array.prototype.concat(...files);
}
//# sourceMappingURL=init.js.map