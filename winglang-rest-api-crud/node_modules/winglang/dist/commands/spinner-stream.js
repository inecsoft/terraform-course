"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpinnerStream = void 0;
const ora_1 = __importDefault(require("ora"));
/**
 * A stream that can write logs and print a spinner to the terminal without
 * interfering with each other.
 */
class SpinnerStream {
    stream;
    spinner;
    buffer = [];
    interval;
    isTty;
    constructor(stream, text) {
        this.stream = stream;
        this.isTty = stream.isTTY;
        this.spinner = (0, ora_1.default)({ stream: this.stream, text, isEnabled: false });
        if (this.isTty) {
            this.interval = setInterval(() => {
                this.updateSpinner();
            }, 80);
        }
    }
    write(log) {
        if (this.isTty) {
            this.buffer.push(log);
        }
        else {
            // If not a TTY, write logs directly to the stream since the spinner
            // won't be displayed
            this.stream.write(log);
        }
    }
    updateSpinner() {
        // Clear the spinner
        this.stream.cursorTo(0);
        this.stream.clearLine(1);
        // Print any logs
        for (const log of this.buffer) {
            this.stream.write(log);
        }
        this.buffer = [];
        // Redraw spinner
        this.spinner.render();
    }
    stopSpinner() {
        if (this.isTty) {
            // Stop looping
            clearInterval(this.interval);
            // Clear the spinner
            this.stream.cursorTo(0);
            this.stream.clearLine(1);
            // Print any remaining logs
            for (const log of this.buffer) {
                this.stream.write(log);
            }
            this.buffer = [];
        }
    }
}
exports.SpinnerStream = SpinnerStream;
//# sourceMappingURL=spinner-stream.js.map