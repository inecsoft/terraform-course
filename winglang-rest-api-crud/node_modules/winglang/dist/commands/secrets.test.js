"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const promises_1 = require("fs/promises");
const path_1 = require("path");
const compiler_1 = require("@winglang/compiler");
const vitest_1 = require("vitest");
const secrets_1 = require("../commands/secrets");
const util_1 = require("../util");
vitest_1.vitest.mock("inquirer");
(0, vitest_1.describe)("secrets", () => {
    let log;
    (0, vitest_1.beforeEach)(() => {
        log = console.log;
        console.log = vitest_1.vi.fn();
    });
    (0, vitest_1.afterEach)(() => {
        console.log = log;
    });
    (0, vitest_1.test)("no secrets found", async () => {
        const workdir = await (0, util_1.generateTmpDir)();
        process.chdir(workdir);
        const wingCode = `
    bring cloud;
    `;
        await (0, promises_1.writeFile)((0, path_1.join)(workdir, "main.w"), wingCode);
        await (0, secrets_1.secrets)("main.w", {
            platform: [compiler_1.BuiltinPlatform.SIM],
            targetDir: workdir,
        });
        (0, vitest_1.expect)(console.log).toHaveBeenCalledWith("0 secret(s) found\n");
    });
    (0, vitest_1.test)("secrets found", async () => {
        const workdir = await (0, util_1.generateTmpDir)();
        process.chdir(workdir);
        const wingCode = `
    bring cloud;

    let s1 = new cloud.Secret(name: "my-secret") as "s1";
    let s2 = new cloud.Secret(name: "other-secret") as "s2";
    `;
        await (0, promises_1.writeFile)((0, path_1.join)(workdir, "main.w"), wingCode);
        await (0, secrets_1.secrets)("main.w", {
            platform: [compiler_1.BuiltinPlatform.SIM],
            targetDir: workdir,
            list: true,
        });
        (0, vitest_1.expect)(console.log).toHaveBeenCalledWith("2 secret(s) found\n");
    });
});
//# sourceMappingURL=secrets.test.js.map