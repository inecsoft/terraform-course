"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const util_1 = require("./util");
(0, vitest_1.describe)("flattenObject", () => {
    (0, vitest_1.test)("flattening an empty object", () => {
        (0, vitest_1.expect)((0, util_1.flattenObject)({})).toEqual({});
    });
    (0, vitest_1.test)("flattening object with two levels of nesting", () => {
        (0, vitest_1.expect)((0, util_1.flattenObject)({ a: { a: "b", c: "a" }, n: { a: 1 }, b: "b" })).toEqual({
            a_a: "b",
            a_c: "a",
            b: "b",
            n_a: 1,
        });
    });
    (0, vitest_1.test)("flattening object with two levels of nesting", () => {
        (0, vitest_1.expect)((0, util_1.flattenObject)({ a: { a: "b", c: "a", d: { e: "f" } }, n: { a: 1 }, b: "b" })).toEqual({
            a_a: "b",
            a_c: "a",
            b: "b",
            a_d_e: "f",
            n_a: 1,
        });
    });
    (0, vitest_1.test)("flattening an empty", () => {
        (0, vitest_1.expect)((0, util_1.flattenObject)({ a: [] })).toEqual({});
    });
    (0, vitest_1.test)("flattening array with two levels of nesting", () => {
        (0, vitest_1.expect)((0, util_1.flattenObject)({ a: ["a", { b: "c" }] })).toEqual({ a_0: "a", a_1_b: "c" });
    });
    (0, vitest_1.test)("flattening object with three levels of nesting", () => {
        (0, vitest_1.expect)((0, util_1.flattenObject)({ a: ["a", { b: "c", d: ["e", { f: "g" }] }] })).toEqual({
            a_0: "a",
            a_1_b: "c",
            a_1_d_0: "e",
            a_1_d_1_f: "g",
        });
    });
});
//# sourceMappingURL=util.test.js.map