"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const process_1 = require("process");
const analytics_node_1 = __importDefault(require("@segment/analytics-node"));
const storage_1 = require("../storage");
// When this file is run as a child process, it will be passed the path
// to the analytics report file
const filePath = process.argv[2];
const segmentWriteKey = "sCqPF5xSscOjJdi5Tbkqu73vfF8zkZdw";
// This debug write key is used to send events to a debug source in segment
// the purpose is to make life easier for testing analytics changes without
// sifting through real data. The only time we export metrics to the debug source
// is if the DEBUG env var is set AND the WING_ANALYTICS_FORCE_EXPORT env var is set
// this way when just running with DEBUG flag we can see analytic event files on disk
const segmentDebugWriteKey = "6r9ySJHdUGkDO80X8i4h2pGGHxYRwFe2";
async function reportAnalytic() {
    if (process.env.DEBUG && !process.env.WING_ANALYTICS_FORCE_EXPORT) {
        // In debug mode no need to export the metrics
        (0, process_1.exit)(0);
    }
    if (!filePath) {
        throw new Error("No file analytic path provided");
    }
    const analytics = new analytics_node_1.default({
        writeKey: process.env.DEBUG ? segmentDebugWriteKey : segmentWriteKey,
    });
    const storage = new storage_1.AnalyticsStorage();
    const event = storage.loadEvent(filePath);
    if (!event) {
        throw new Error(`No analytic event found at: ${filePath}`);
    }
    const params = {
        anonymousId: storage.getAnonymousId(),
        timestamp: event.timestamp,
        event: event.event,
        properties: event.properties,
    };
    const awaitTrack = async () => {
        return new Promise((resolve, reject) => {
            analytics.track(params, (err, data) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(data);
                }
            });
        });
    };
    await awaitTrack();
    fs.unlinkSync(filePath);
}
void (async () => {
    try {
        await reportAnalytic();
    }
    catch (err) {
        // TODO: add mechanism to retry maybe
    }
})();
//# sourceMappingURL=detached-export.js.map