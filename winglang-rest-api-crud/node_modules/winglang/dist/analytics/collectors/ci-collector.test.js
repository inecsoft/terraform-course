"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const ci_collector_1 = require("./ci-collector");
(0, vitest_1.describe)("ci collector tests", () => {
    const originialEnvironment = process.env;
    (0, vitest_1.beforeEach)(() => {
        // Restore the environment back to where it was before any of the
        // tests manipulated it
        process.env = { ...originialEnvironment };
    });
    (0, vitest_1.test)("should return undefined when no ci environment is detected", async () => {
        // GIVEN
        const collector = new ci_collector_1.CICollector();
        // WHEN
        delete process.env.GITHUB_ACTIONS;
        const ciData = await collector.collect();
        // THEN
        (0, vitest_1.expect)(ciData).toBeUndefined();
    });
    (0, vitest_1.describe)("should return correct CI environment name", () => {
        let collector;
        (0, vitest_1.beforeEach)(() => {
            // So our CI tests dont fail
            delete process.env.GITHUB_ACTIONS;
            collector = new ci_collector_1.CICollector();
        });
        (0, vitest_1.test)("when in Github actions", async () => {
            // WHEN
            process.env.GITHUB_ACTIONS = "1";
            // THEN
            (0, vitest_1.expect)(await collector.collect()).toEqual({ name: "GITHUB_ACTIONS" });
        });
        (0, vitest_1.test)("when in Gitlab ci", async () => {
            // WHEN
            process.env.GITLAB_CI = "1";
            // THEN
            (0, vitest_1.expect)(await collector.collect()).toEqual({ name: "GITLAB_CI" });
        });
        (0, vitest_1.test)("when in Jekins", async () => {
            // WHEN
            process.env.JENKINS_URL = "1";
            // THEN
            (0, vitest_1.expect)(await collector.collect()).toEqual({ name: "JENKINS" });
        });
        (0, vitest_1.test)("when in Circleci", async () => {
            // WHEN
            process.env.CIRCLECI = "1";
            // THEN
            (0, vitest_1.expect)(await collector.collect()).toEqual({ name: "CIRCLECI" });
        });
        (0, vitest_1.test)("when in Bitbucket", async () => {
            // WHEN
            process.env.BITBUCKET_BUILD_NUMBER = "1";
            // THEN
            (0, vitest_1.expect)(await collector.collect()).toEqual({ name: "BITBUCKET" });
        });
        (0, vitest_1.test)("when in Azure Devops", async () => {
            // WHEN
            process.env.BUILD_BUILDID = "1";
            // THEN
            (0, vitest_1.expect)(await collector.collect()).toEqual({ name: "AZURE_DEVOPS" });
        });
        (0, vitest_1.test)("when in Teamcity", async () => {
            // WHEN
            process.env.TEAMCITY_VERSION = "1";
            // THEN
            (0, vitest_1.expect)(await collector.collect()).toEqual({ name: "TEAMCITY" });
        });
        (0, vitest_1.test)("when in AWS Codebuild", async () => {
            // WHEN
            process.env.CODEBUILD_BUILD_ID = "1";
            // THEN
            (0, vitest_1.expect)(await collector.collect()).toEqual({ name: "CODEBUILD" });
        });
    });
});
//# sourceMappingURL=ci-collector.test.js.map