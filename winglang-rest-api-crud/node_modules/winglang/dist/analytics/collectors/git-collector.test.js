"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const crypto_1 = require("crypto");
const fs_1 = __importDefault(require("fs"));
const os = __importStar(require("os"));
const path_1 = __importDefault(require("path"));
const vitest_1 = require("vitest");
const git_collector_1 = require("./git-collector");
(0, vitest_1.describe)("git collector tests", () => {
    (0, vitest_1.afterEach)(() => {
        clearCreatedRepos();
    });
    (0, vitest_1.test)("should return undefined if not in git repo", async () => {
        // GIVEN
        const repoPath = await createFakeRepo("non-git-1");
        const collector = new git_collector_1.GitCollector({ appEntrypoint: `${repoPath}/app.w` });
        // WHEN
        const gitData = await collector.collect();
        // THEN
        (0, vitest_1.expect)(gitData).toBeUndefined();
    });
    (0, vitest_1.test)("should return git data if in git repo", async () => {
        // GIVEN
        const expectedRemoteUrl = "https://super-fake.com/test.git";
        const expectedAnonymousRepoId = (0, crypto_1.createHash)("md5").update(expectedRemoteUrl).digest("hex");
        const repoPath = await createFakeRepo("git-1", { remoteUrl: expectedRemoteUrl });
        const collector = new git_collector_1.GitCollector({ appEntrypoint: `${repoPath}/app.w` });
        // WHEN
        const gitData = await collector.collect();
        // THEN
        (0, vitest_1.expect)(gitData).toBeDefined();
        (0, vitest_1.expect)(gitData?.anonymous_repo_id).toEqual(expectedAnonymousRepoId);
    });
});
let createdRepoPaths = [];
const clearCreatedRepos = () => {
    createdRepoPaths.forEach((r) => {
        fs_1.default.rmSync(r, { recursive: true, force: true });
    });
    createdRepoPaths = [];
};
async function createFakeRepo(name, props) {
    const repoPath = path_1.default.join(os.tmpdir(), "wing-git-collector-test", name);
    fs_1.default.mkdirSync(repoPath, { recursive: true });
    if (props) {
        await initializeGitRepo(repoPath, props);
    }
    createdRepoPaths.push(repoPath);
    return repoPath;
}
async function runCommand(cmd, args, dir) {
    const raw = await new Promise((resolve, reject) => {
        (0, child_process_1.execFile)(cmd, args, { cwd: dir }, (error, stdout, stderr) => {
            if (error) {
                stderr;
                reject(error);
            }
            resolve(stdout);
        });
    });
    return raw;
}
async function initializeGitRepo(repoPath, props) {
    await runCommand("git", ["init"], repoPath);
    await runCommand("git", ["remote", "add", "origin", props.remoteUrl], repoPath);
}
//# sourceMappingURL=git-collector.test.js.map