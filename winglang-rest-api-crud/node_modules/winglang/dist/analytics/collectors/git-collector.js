"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitCollector = void 0;
const crypto_1 = require("crypto");
const path_1 = __importDefault(require("path"));
const collector_1 = require("./collector");
class GitCollector extends collector_1.Collector {
    dir;
    constructor(props) {
        super();
        this.dir = props?.appEntrypoint ? path_1.default.dirname(props.appEntrypoint) : ".";
    }
    async collect() {
        if (await this.isInGitRepo()) {
            const remoteUrl = await this.getRemoteUrl();
            if (remoteUrl) {
                return {
                    anonymous_repo_id: (0, crypto_1.createHash)("md5").update(remoteUrl).digest("hex"),
                };
            }
        }
        return undefined;
    }
    async isInGitRepo() {
        const results = await this.runCommand("git", ["rev-parse", "--is-inside-work-tree"], this.dir);
        return results.trim() === "true";
    }
    async getRemoteUrl() {
        const results = await this.runCommand("git", ["config", "--get", "remote.origin.url"], this.dir);
        return results.trim();
    }
}
exports.GitCollector = GitCollector;
//# sourceMappingURL=git-collector.js.map