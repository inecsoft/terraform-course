"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createStorageWithFakeConfig = void 0;
const fs_1 = require("fs");
const os = __importStar(require("os"));
const path_1 = __importDefault(require("path"));
const vitest_1 = require("vitest");
const storage_1 = require("./storage");
(0, vitest_1.describe)("storage tests", () => {
    const DUMMY_ANALYTIC = {
        event: "some fake:event",
        properties: {
            cli: {
                platform: ["xbox", "ps5"].join(","),
                options: { "-t": "fake-aws" },
                target: "fake-aws",
                version: "4.2.0",
                wing_console_version: "1.2.3",
                wing_sdk_version: "4.5.6",
            },
            os: {
                arch: "x64",
                platform: "xbox",
                release: "360",
            },
            node: {
                version: "a million",
            },
        },
    };
    (0, vitest_1.describe)("when analytics is opt-in", () => {
        const fakeAnalyticConfig = {
            optOut: false,
            anonymousId: "fake-anonymous-id",
        };
        (0, vitest_1.test)("anonymous id should not be included if in CI environment", () => {
            // GIVEN
            process.env.GITHUB_ACTION = "1";
            const storage = createStorageWithFakeConfig({}, "opt-in-1");
            // WHEN
            const analyticPath = storage.storeAnalyticEvent(DUMMY_ANALYTIC);
            const storedAnalytic = storage.loadEvent(analyticPath);
            // THEN
            (0, vitest_1.expect)(analyticPath).toBeDefined();
            (0, vitest_1.expect)(storedAnalytic).not.toHaveProperty("anonymousId");
        });
        (0, vitest_1.test)("should store analytic with flattened properties and return correct filepath", async () => {
            // WHEN
            const storage = createStorageWithFakeConfig(fakeAnalyticConfig, "opt-in-2");
            const analyticPath = storage.storeAnalyticEvent(DUMMY_ANALYTIC);
            const storedAnalytic = storage.loadEvent(analyticPath);
            // THEN
            (0, vitest_1.expect)(analyticPath).toBeDefined();
            (0, vitest_1.expect)(storedAnalytic).toEqual(vitest_1.expect.objectContaining({
                event: DUMMY_ANALYTIC.event,
                properties: {
                    cli_target: "fake-aws",
                    cli_platform: "xbox,ps5",
                    cli_version: "4.2.0",
                    "cli_options_-t": "fake-aws",
                    cli_wing_console_version: "1.2.3",
                    cli_wing_sdk_version: "4.5.6",
                    os_arch: "x64",
                    os_platform: "xbox",
                    os_release: "360",
                    node_version: "a million",
                },
            }));
        });
        (0, vitest_1.test)("can retrieve anonymous id", () => {
            const storage = createStorageWithFakeConfig(fakeAnalyticConfig, "opt-in-3");
            (0, vitest_1.expect)(storage.getAnonymousId()).toBe("fake-anonymous-id");
        });
    });
    (0, vitest_1.describe)("when analytics is opt-out", () => {
        const fakeAnalyticConfig = {
            optOut: true,
            anonymousId: "fake-anonymous-id",
        };
        const storage = createStorageWithFakeConfig(fakeAnalyticConfig, "opt-out-1");
        (0, vitest_1.test)("does not store analytic", async () => {
            // WHEN
            const analyticPath = storage.storeAnalyticEvent(DUMMY_ANALYTIC);
            const analytic = storage.loadEvent(analyticPath);
            // THEN
            (0, vitest_1.expect)(analyticPath).toBeUndefined();
            (0, vitest_1.expect)(analytic).toBeUndefined();
        });
    });
});
function createStorageWithFakeConfig(config, dirName) {
    const tmpDir = path_1.default.join(os.tmpdir(), dirName);
    const configFile = path_1.default.join(tmpDir, "analytics-fake-config.json");
    if (!(0, fs_1.existsSync)(tmpDir)) {
        (0, fs_1.mkdirSync)(tmpDir);
    }
    (0, fs_1.writeFileSync)(configFile, JSON.stringify(config));
    return new storage_1.AnalyticsStorage({ configFile: configFile, analyticsStorageDir: tmpDir });
}
exports.createStorageWithFakeConfig = createStorageWithFakeConfig;
//# sourceMappingURL=storage.test.js.map