"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const os = __importStar(require("os"));
const path_1 = __importDefault(require("path"));
const vitest_1 = require("vitest");
const disclaimer_1 = require("./disclaimer");
const storage_1 = require("./storage");
(0, vitest_1.describe)("disclaimer", () => {
    const originalTTY = process.stdin.isTTY;
    const nonExistentFile = path_1.default.join(os.tmpdir(), "_)(*noWayThis_file_exists%$#@.json");
    (0, vitest_1.beforeEach)(() => {
        if ((0, fs_1.existsSync)(nonExistentFile)) {
            (0, fs_1.unlinkSync)(nonExistentFile);
        }
    });
    (0, vitest_1.describe)("behavior when in TTY", () => {
        let log;
        (0, vitest_1.beforeEach)(() => {
            process.stdin.isTTY = true;
            log = console.log;
            console.log = vitest_1.vi.fn();
        });
        (0, vitest_1.afterEach)(() => {
            process.stdin.isTTY = originalTTY;
            console.log = log;
        });
        (0, vitest_1.test)("appears on first run", () => {
            // GIVEN
            const storage = new storage_1.AnalyticsStorage({ configFile: nonExistentFile });
            // WHEN
            (0, disclaimer_1.optionallyDisplayDisclaimer)(storage);
            // THEN
            (0, vitest_1.expect)(console.log).toHaveBeenCalledWith(vitest_1.expect.stringContaining(disclaimer_1.WING_DISCLAIMER.split("\n")[0]));
        });
        (0, vitest_1.test)("alters config value for displayed", () => {
            // GIVEN
            const storage = new storage_1.AnalyticsStorage({ configFile: nonExistentFile });
            storage.saveConfig({ anonymousId: "fake-id", disclaimerDisplayed: false });
            // WHEN
            (0, disclaimer_1.optionallyDisplayDisclaimer)(storage);
            // THEN
            (0, vitest_1.expect)(storage.loadConfig().disclaimerDisplayed).toBe(true);
        });
        (0, vitest_1.test)("alters displayed version", () => {
            // GIVEN
            const storage = new storage_1.AnalyticsStorage({ configFile: nonExistentFile });
            storage.saveConfig({ anonymousId: "fake-id", disclaimerDisplayed: false });
            // WHEN
            (0, disclaimer_1.optionallyDisplayDisclaimer)(storage);
            // THEN
            (0, vitest_1.expect)(storage.loadConfig().disclaimerVersion).toBe(disclaimer_1.WING_DISCLAIMER_VERSION);
        });
        (0, vitest_1.test)("does not appear on second run", () => {
            // GIVEN
            const storage = new storage_1.AnalyticsStorage({ configFile: nonExistentFile });
            // WHEN
            (0, disclaimer_1.optionallyDisplayDisclaimer)(storage);
            (0, disclaimer_1.optionallyDisplayDisclaimer)(storage);
            // THEN
            (0, vitest_1.expect)(console.log).toHaveBeenCalledTimes(1);
        });
        (0, vitest_1.describe)("shouldDisplayDisclaimer", () => {
            (0, vitest_1.test)("returns true if config is empty", () => {
                (0, vitest_1.expect)((0, disclaimer_1.shouldDisplayDisclaimer)({})).toBe(true);
            });
            (0, vitest_1.test)("returns true if version is not set", () => {
                (0, vitest_1.expect)((0, disclaimer_1.shouldDisplayDisclaimer)({
                    anonymousId: "fake-id",
                    disclaimerDisplayed: true,
                })).toBe(true);
            });
            (0, vitest_1.test)("returns true if version is not current", () => {
                (0, vitest_1.expect)((0, disclaimer_1.shouldDisplayDisclaimer)({
                    anonymousId: "fake-id",
                    disclaimerDisplayed: true,
                    disclaimerVersion: "-100.0.0",
                })).toBe(true);
            });
            (0, vitest_1.test)("return false if displayed version is current", () => {
                (0, vitest_1.expect)((0, disclaimer_1.shouldDisplayDisclaimer)({
                    anonymousId: "fake-id",
                    disclaimerDisplayed: true,
                    disclaimerVersion: disclaimer_1.WING_DISCLAIMER_VERSION,
                })).toBe(false);
            });
        });
    });
    (0, vitest_1.describe)("behavior when not in TTY", () => {
        (0, vitest_1.beforeEach)(() => {
            process.stdin.isTTY = false;
        });
        (0, vitest_1.afterEach)(() => {
            process.stdin.isTTY = originalTTY;
        });
        (0, vitest_1.test)("does not alter config value for displayed", () => {
            // GIVEN
            const storage = new storage_1.AnalyticsStorage({ configFile: nonExistentFile });
            storage.saveConfig({ anonymousId: "fake-id", disclaimerDisplayed: false });
            // WHEN
            (0, disclaimer_1.optionallyDisplayDisclaimer)(storage);
            // THEN
            (0, vitest_1.expect)(storage.loadConfig().disclaimerDisplayed).toBe(false);
        });
        (0, vitest_1.test)("returns false if no matter the config", () => {
            (0, vitest_1.expect)((0, disclaimer_1.shouldDisplayDisclaimer)({})).toBe(false);
        });
    });
});
//# sourceMappingURL=disclaimer.test.js.map