"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.optionallyDisplayDisclaimer = exports.shouldDisplayDisclaimer = exports.WING_DISCLAIMER = exports.WING_DISCLAIMER_VERSION = void 0;
const chalk_1 = __importDefault(require("chalk"));
const storage_1 = require("./storage");
// simplest way I could think of to allow us to update the disclaimer
// and force it to be displayed again
exports.WING_DISCLAIMER_VERSION = "1";
exports.WING_DISCLAIMER = `
üß™ This is an early pre-release of the Wing Programming Language.
  
We are working hard to make this a great tool, but there's still a pretty good
chance you'll encounter missing pieces, rough edges, performance issues and even,
god forbid, bugs üêû.

Please don't hesitate to ping us at ${chalk_1.default.blueBright.bold.underline("https://t.winglang.io/discord")} or file an issue at
${chalk_1.default.blueBright.bold.underline("https://github.com/winglang/wing")}. We promise to do our best to respond quickly and help out.

To help us identify issues early, we are collecting anonymous analytics.
To turn this off, set ${chalk_1.default.yellowBright.bold("WING_DISABLE_ANALYTICS=1")}.
For more information see ${chalk_1.default.blueBright.bold.underline("https://winglang.io/docs/analytics")}
${chalk_1.default.redBright("(This message will self-destruct after the first run)")}
`;
function displayDisclaimer() {
    console.log(`${chalk_1.default.hex("#2AD5C1")(exports.WING_DISCLAIMER)}`);
}
function shouldDisplayDisclaimer(config) {
    // only consider display if stdin is a TTY
    if (!process.stdin.isTTY) {
        return false;
    }
    // If never displayed, display
    if (!config.disclaimerDisplayed) {
        return true;
    }
    // If disclaimer version has changed, display
    if ((config.disclaimerVersion ?? "") !== exports.WING_DISCLAIMER_VERSION) {
        return true;
    }
    return !(config.disclaimerDisplayed && config.disclaimerVersion === exports.WING_DISCLAIMER_VERSION);
}
exports.shouldDisplayDisclaimer = shouldDisplayDisclaimer;
function optionallyDisplayDisclaimer(existingStorage) {
    try {
        const storage = existingStorage ?? new storage_1.AnalyticsStorage();
        const analyticsConfig = storage.loadConfig();
        if (shouldDisplayDisclaimer(analyticsConfig)) {
            displayDisclaimer();
            analyticsConfig.disclaimerDisplayed = true;
            analyticsConfig.disclaimerVersion = exports.WING_DISCLAIMER_VERSION;
            storage.saveConfig(analyticsConfig);
        }
    }
    catch (error) {
        // Incase there was any reason the config could not be loaded,
        // just display to be super transparent :)
        displayDisclaimer();
    }
}
exports.optionallyDisplayDisclaimer = optionallyDisplayDisclaimer;
//# sourceMappingURL=disclaimer.js.map