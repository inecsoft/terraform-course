"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.collectCommandAnalytics = void 0;
const compiler_1 = require("@winglang/compiler");
const ci_collector_1 = require("./collectors/ci-collector");
const cli_collector_1 = require("./collectors/cli-collector");
const git_collector_1 = require("./collectors/git-collector");
const node_collector_1 = require("./collectors/node-collector");
const os_collector_1 = require("./collectors/os-collector");
const storage_1 = require("./storage");
/**
 * Collects analytics for a given command, stores it for later export
 *
 * @param cmd The commander command to collect analytics for
 * @returns string the file path of the stored analytic
 */
async function collectCommandAnalytics(cmd) {
    const osCollector = new os_collector_1.OSCollector();
    const nodeCollector = new node_collector_1.NodeCollector();
    const ciCollector = new ci_collector_1.CICollector();
    const cliCollector = new cli_collector_1.CLICollector(cmd);
    // If entrypoint to app is provided, we will give that to git collector to use for
    // running queries against the git repo, otherwise we will use the current working directory
    const gitCollector = new git_collector_1.GitCollector({
        appEntrypoint: cmd.args.length > 0 ? cmd.args[0] : ".",
    });
    const platform = cmd.opts().platform ?? [];
    let target = "";
    if (platform) {
        target = (0, compiler_1.determineTargetFromPlatforms)(platform);
    }
    const eventName = `cli_${target}_${cmd.name()}`;
    let event = {
        event: eventName.replace(/[^a-zA-Z_]/g, ""),
        properties: {
            cli: await cliCollector.collect(),
            os: await osCollector.collect(),
            node: await nodeCollector.collect(),
            ci: await ciCollector.collect(),
            anonymous_repo_id: (await gitCollector.collect())?.anonymous_repo_id,
        },
    };
    const storage = new storage_1.AnalyticsStorage({ debug: process.env.DEBUG ? true : false });
    let analyticFilePath = storage.storeAnalyticEvent(event);
    return analyticFilePath;
}
exports.collectCommandAnalytics = collectCommandAnalytics;
//# sourceMappingURL=collect.js.map