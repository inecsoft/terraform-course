import { std } from '@winglang/sdk';
export { cloud, ex } from '@winglang/sdk';
import { Construct } from '@winglang/sdk/lib/core/types';
export { Construct } from '@winglang/sdk/lib/core/types';
export { inflight, lift } from '@winglang/sdk/lib/core';

/**
 * Properties for a Wing app.
 */
interface AppProps {
    /**
     * The name and id of the app.
     * @default "main"
     */
    name?: string;
}
/**
 * Create a Wing app.
 *
 * ```ts
 * import { main, cloud } from "@wingcloud/framework";
 *
 * main((root) => {
 *   new cloud.Bucket(root, "Bucket");
 * });
 * ```
 *
 * Tests can be added using the second argument:
 *
 * ```ts
 * import { main, cloud } from "@wingcloud/framework";
 *
 * main((root, test) => {
 *   new cloud.Bucket(root, "Bucket");
 *
 *   test("bucket holds stuff", async () => {
 *     lift({ bucket }).inflight(async ({ bucket }) => {
 *       await bucket.put("key", "value");
 *     });
 *   });
 *
 * });
 * ```
 *
 * @param fn Define your application using the provided root construct.
 *           Note that this function may be called multiple times when used with `wing test`.
 */
declare function main(fn: (root: Construct, test: (name: string, handler: std.ITestHandler, props?: std.TestProps) => void) => void, props?: AppProps): void;

interface CompileOptions {
    workDir: string;
    entrypoint: string;
}
declare function compile(options: CompileOptions): Promise<string>;

type internal_CompileOptions = CompileOptions;
declare const internal_compile: typeof compile;
declare namespace internal {
  export { type internal_CompileOptions as CompileOptions, internal_compile as compile };
}

export { internal, main };
