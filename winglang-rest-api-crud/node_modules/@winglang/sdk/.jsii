{
  "author": {
    "email": "ping@wing.cloud",
    "name": "Wing Cloud",
    "organization": true,
    "roles": [
      "author"
    ]
  },
  "bundled": {
    "@aws-sdk/client-cloudwatch-logs": "3.577.0",
    "@aws-sdk/client-dynamodb": "3.577.0",
    "@aws-sdk/client-elasticache": "3.577.0",
    "@aws-sdk/client-lambda": "3.577.0",
    "@aws-sdk/client-s3": "3.577.0",
    "@aws-sdk/client-secrets-manager": "3.577.0",
    "@aws-sdk/client-sns": "3.577.0",
    "@aws-sdk/client-sqs": "3.577.0",
    "@aws-sdk/s3-request-presigner": "3.577.0",
    "@aws-sdk/types": "3.449.0",
    "@aws-sdk/util-dynamodb": "3.577.0",
    "@azure/core-paging": "^1.5.0",
    "@azure/data-tables": "13.2.2",
    "@azure/identity": "4.0.1",
    "@azure/storage-blob": "12.14.0",
    "@google-cloud/datastore": "8.4.0",
    "@google-cloud/storage": "6.9.5",
    "@smithy/util-stream": "2.0.17",
    "@smithy/util-utf8": "2.0.0",
    "@types/aws-lambda": "^8.10.119",
    "@winglang/wingtunnels": "workspace:^",
    "ajv": "^8.12.0",
    "cdktf": "0.20.3",
    "cron-parser": "^4.9.0",
    "cron-validator": "^1.3.1",
    "express": "^4.19.2",
    "glob": "^8.1.0",
    "google-auth-library": "^8.9.0",
    "ioredis": "^5.3.2",
    "jiti": "^1.21.0",
    "mime": "^3.0.0",
    "mime-types": "^2.1.35",
    "nanoid": "^3.3.6",
    "protobufjs": "7.2.5",
    "safe-stable-stringify": "^2.4.3",
    "stacktracey": "^2.1.8",
    "toml": "^3.0.0",
    "ulid": "^2.3.0",
    "uuid": "^8.3.2",
    "vlq": "^2.0.4",
    "yaml": "^2.3.2"
  },
  "dependencies": {
    "constructs": "^10.3"
  },
  "dependencyClosure": {
    "constructs": {
      "targets": {
        "dotnet": {
          "namespace": "Constructs",
          "packageId": "Constructs"
        },
        "go": {
          "moduleName": "github.com/aws/constructs-go"
        },
        "java": {
          "maven": {
            "artifactId": "constructs",
            "groupId": "software.constructs"
          },
          "package": "software.constructs"
        },
        "js": {
          "npm": "constructs"
        },
        "python": {
          "distName": "constructs",
          "module": "constructs"
        }
      }
    }
  },
  "description": "@winglang/sdk",
  "docs": {
    "stability": "experimental"
  },
  "homepage": "https://github.com/winglang/wing.git",
  "jsiiVersion": "5.3.11 (build a5f9673)",
  "license": "MIT",
  "metadata": {
    "jsii": {
      "pacmak": {
        "hasDefaultInterfaces": true
      }
    },
    "tscRootDir": "src"
  },
  "name": "@winglang/sdk",
  "readme": {
    "markdown": "# Wing SDK\n\nThe Wing SDK is the standard library of the Wing programming language, **but it can also be used as a standalone library from any CDK supported language**.\nFor best experience it should be used with the Wing Language.\n\nIt contains the core set of cloud resources that are needed to build cloud applications.\nThese resources are cloud agnostic and can be used to build applications that run on any cloud provider.\nThe actual provider is determined at synth time by setting a target.\n\nOne of the supported targets is `sim` and can be used to run a cloud application locally, without an internet connection, iterate extremely fast and run tests that include cloud resources without needing to mock them.\n\nThe SDK is released as a private npm module named\n[`@winglang/sdk`](https://github.com/winglang/wingsdk/packages/1519521).\n\n## ‚õ∫ Installation\n```shell\nnpm i @winglang/sdk\n```\n\n## üìù Usage\n\n### With Wing\n\nThe Wing SDK is part of Wing's standard library. Create a new file called `hello.w` and import the SDK with `bring cloud;`:\n\n```wing\nbring cloud;\n\nlet queue = new cloud.Queue();\n\nqueue.setConsumer(inflight (message) => {\n  log(\"Hello, {message}!\");\n});\n```\n\nThen use `wing compile` to compile your program to different clouds. Run `wing compile --help` to see what options are available!\n\n### As a TypeScript/JavaScript Library\n\nThe Wing SDK can be used just like ordinary [CDK for TF Constructs](https://github.com/hashicorp/terraform-cdk).\n\n```ts\nimport { Construct } from \"constructs\";\nimport { cloud } from \"@winglang/sdk\";\n\nclass HelloWorld extends Construct {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    let bucket = new cloud.Bucket(this, \"bucket\", {\n      public: true,\n    });\n  }\n}\n```\n\nThis construct contains a `Bucket` from the cloud library which represents a polymorphic cloud resources whose actual implementation (local, aws, other clouds) is determined at synth time.\n\nTo use it in an application, you need to supply a synthesizer which will synthesize resources for the desired target.\nIn the example below, a `sim` synthesizer is used which tells the SDK to produce a simulator  (`.wsim`) file.\nThe `.wsim` file can be passed to the Wing console to simulate the bucket using your file system.\nIf the commented out TF AWS synthesizer is used instead, then a Terraform application will be synthesized.\nThe Terraform application will include an AWS S3 Bucket to represent the `Bucket`.\n\n```ts\nimport * as sim from \"../../src/sim\";\nimport * as tfaws from \"../../src/tf-aws\";\n\nconst app = new sim.App();\n// const app = new tfaws.App(); // alternative\nnew HelloWorld(app, \"HelloWorld\");\napp.synth();\n```\n\n## üìñ Documentation\n\n- [Simulator guide](../../docs/simulator.md)\n- [SDK Roadmap](https://github.com/orgs/winglang/projects/3/views/1)\n- [API reference](./API.md)\n- Wing SDK design guidelines (TODO)\n\n## ‚úã Contributing\n\nWe welcome community contributions and pull requests. See the [Wing Contributor's Handbook](../../CONTRIBUTING.md) for information on how to set up a development environment and add new resources to the SDK.\n\n## üê£ Getting help\n\nIf you need help either using or contributing to this project, please join us on our [Wing Discord].\n\n[Wing Discord]: https://t.winglang.io/discord\n\n## ‚öñÔ∏è License\n\nThis library is licensed under the MIT license.\n"
  },
  "repository": {
    "directory": "libs/wingsdk",
    "type": "git",
    "url": "https://github.com/winglang/wing.git"
  },
  "schema": "jsii/0.10.0",
  "submodules": {
    "@winglang/sdk.aws": {
      "locationInModule": {
        "filename": "src/index.ts",
        "line": 11
      },
      "symbolId": "src/shared-aws/index:"
    },
    "@winglang/sdk.cloud": {
      "locationInModule": {
        "filename": "src/index.ts",
        "line": 2
      },
      "symbolId": "src/cloud/index:"
    },
    "@winglang/sdk.core": {
      "locationInModule": {
        "filename": "src/index.ts",
        "line": 3
      },
      "symbolId": "src/core/index:"
    },
    "@winglang/sdk.ex": {
      "locationInModule": {
        "filename": "src/index.ts",
        "line": 4
      },
      "symbolId": "src/ex/index:"
    },
    "@winglang/sdk.expect": {
      "locationInModule": {
        "filename": "src/index.ts",
        "line": 5
      },
      "symbolId": "src/expect/index:"
    },
    "@winglang/sdk.fs": {
      "locationInModule": {
        "filename": "src/index.ts",
        "line": 6
      },
      "symbolId": "src/fs/index:"
    },
    "@winglang/sdk.helpers": {
      "locationInModule": {
        "filename": "src/index.ts",
        "line": 7
      },
      "symbolId": "src/helpers:"
    },
    "@winglang/sdk.http": {
      "locationInModule": {
        "filename": "src/index.ts",
        "line": 8
      },
      "symbolId": "src/http/index:"
    },
    "@winglang/sdk.math": {
      "locationInModule": {
        "filename": "src/index.ts",
        "line": 9
      },
      "symbolId": "src/math/index:"
    },
    "@winglang/sdk.platform": {
      "locationInModule": {
        "filename": "src/index.ts",
        "line": 10
      },
      "symbolId": "src/platform/index:"
    },
    "@winglang/sdk.sim": {
      "locationInModule": {
        "filename": "src/index.ts",
        "line": 14
      },
      "symbolId": "src/target-sim/index:"
    },
    "@winglang/sdk.simulator": {
      "locationInModule": {
        "filename": "src/index.ts",
        "line": 12
      },
      "symbolId": "src/simulator/index:"
    },
    "@winglang/sdk.std": {
      "locationInModule": {
        "filename": "src/index.ts",
        "line": 13
      },
      "readme": {
        "markdown": "# Wing Globals\n\nThis directory contains types available in the global scope of Wing."
      },
      "symbolId": "src/std/index:"
    },
    "@winglang/sdk.ui": {
      "locationInModule": {
        "filename": "src/index.ts",
        "line": 15
      },
      "symbolId": "src/ui/index:"
    },
    "@winglang/sdk.util": {
      "locationInModule": {
        "filename": "src/index.ts",
        "line": 16
      },
      "symbolId": "src/util/index:"
    }
  },
  "targets": {
    "js": {
      "npm": "@winglang/sdk"
    }
  },
  "types": {
    "@winglang/sdk.aws.Api": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "A helper class for working with AWS apis."
      },
      "fqn": "@winglang/sdk.aws.Api",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/shared-aws/api.ts",
        "line": 49
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "If the api is an AWS RestApi, return a helper interface for working with it."
          },
          "locationInModule": {
            "filename": "src/shared-aws/api.ts",
            "line": 55
          },
          "name": "from",
          "parameters": [
            {
              "docs": {
                "summary": "The cloud.Api."
              },
              "name": "api",
              "type": {
                "fqn": "@winglang/sdk.cloud.Api"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.aws.IAwsApi"
            }
          },
          "static": true
        }
      ],
      "name": "Api",
      "namespace": "aws",
      "symbolId": "src/shared-aws/api:Api"
    },
    "@winglang/sdk.aws.ApiEndpointHandler": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "A helper class for working with AWS api endpoint handlers."
      },
      "fqn": "@winglang/sdk.aws.ApiEndpointHandler",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/shared-aws/api.ts",
        "line": 77
      },
      "methods": [
        {
          "docs": {
            "returns": "The `cloud.Function` handler.",
            "stability": "experimental",
            "summary": "Returns a `cloud.Function` handler for handling requests from a `cloud.Api`."
          },
          "locationInModule": {
            "filename": "src/shared-aws/api.ts",
            "line": 84
          },
          "name": "toFunctionHandler",
          "parameters": [
            {
              "docs": {
                "summary": "The `onRequest` handler."
              },
              "name": "handler",
              "type": {
                "fqn": "@winglang/sdk.cloud.IApiEndpointHandler"
              }
            },
            {
              "docs": {
                "summary": "HTTP response headers to add to all responses (used by CORS)."
              },
              "name": "headers",
              "optional": true,
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.cloud.IFunctionHandler"
            }
          },
          "static": true
        }
      ],
      "name": "ApiEndpointHandler",
      "namespace": "aws",
      "symbolId": "src/shared-aws/api:ApiEndpointHandler"
    },
    "@winglang/sdk.aws.AwsInflightHost": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Represents an inflight host on AWS."
      },
      "fqn": "@winglang/sdk.aws.AwsInflightHost",
      "kind": "class",
      "locationInModule": {
        "filename": "src/shared-aws/inflight-host.ts",
        "line": 7
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns `true` if `obj` implements `IAwsInflightHost`."
          },
          "locationInModule": {
            "filename": "src/shared-aws/inflight-host.ts",
            "line": 11
          },
          "name": "isAwsInflightHost",
          "parameters": [
            {
              "name": "obj",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        }
      ],
      "name": "AwsInflightHost",
      "namespace": "aws",
      "symbolId": "src/shared-aws/inflight-host:AwsInflightHost"
    },
    "@winglang/sdk.aws.AwsWebsiteProps": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for AWS `Website`."
      },
      "fqn": "@winglang/sdk.aws.AwsWebsiteProps",
      "interfaces": [
        "@winglang/sdk.cloud.WebsiteOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/shared-aws/website.ts",
        "line": 8
      },
      "name": "AwsWebsiteProps",
      "namespace": "aws",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- undefined",
            "stability": "experimental",
            "summary": "The website's custom domain object."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/website.ts",
            "line": 13
          },
          "name": "domain",
          "optional": true,
          "type": {
            "fqn": "@winglang/sdk.aws.Domain"
          }
        }
      ],
      "symbolId": "src/shared-aws/website:AwsWebsiteProps"
    },
    "@winglang/sdk.aws.Bucket": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "A helper class for working with AWS buckets."
      },
      "fqn": "@winglang/sdk.aws.Bucket",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/shared-aws/bucket.ts",
        "line": 27
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "If the bucket is an AWS Bucket, return a helper interface for working with it."
          },
          "locationInModule": {
            "filename": "src/shared-aws/bucket.ts",
            "line": 33
          },
          "name": "from",
          "parameters": [
            {
              "docs": {
                "summary": "The cloud.Bucket."
              },
              "name": "bucket",
              "type": {
                "fqn": "@winglang/sdk.cloud.Bucket"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.aws.IAwsBucket"
            }
          },
          "static": true
        }
      ],
      "name": "Bucket",
      "namespace": "aws",
      "symbolId": "src/shared-aws/bucket:Bucket"
    },
    "@winglang/sdk.aws.BucketEventHandler": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Utility class to work with bucket event handlers."
      },
      "fqn": "@winglang/sdk.aws.BucketEventHandler",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/shared-aws/bucket.ts",
        "line": 182
      },
      "methods": [
        {
          "docs": {
            "returns": "the on message handler.",
            "stability": "experimental",
            "summary": "Converts a `cloud.IBucketEventHandler` to a `cloud.ITopicOnMessageHandler`."
          },
          "locationInModule": {
            "filename": "src/shared-aws/bucket.ts",
            "line": 189
          },
          "name": "toTopicOnMessageHandler",
          "parameters": [
            {
              "docs": {
                "summary": "the handler to convert."
              },
              "name": "handler",
              "type": {
                "fqn": "@winglang/sdk.cloud.IBucketEventHandler"
              }
            },
            {
              "docs": {
                "summary": "the event type."
              },
              "name": "eventType",
              "type": {
                "fqn": "@winglang/sdk.cloud.BucketEventType"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.cloud.ITopicOnMessageHandler"
            }
          },
          "static": true
        }
      ],
      "name": "BucketEventHandler",
      "namespace": "aws",
      "symbolId": "src/shared-aws/bucket:BucketEventHandler"
    },
    "@winglang/sdk.aws.BucketRef": {
      "assembly": "@winglang/sdk",
      "base": "@winglang/sdk.std.Resource",
      "docs": {
        "custom": {
          "inflight": "`@winglang/sdk.aws.IAwsBucketClient`"
        },
        "stability": "experimental",
        "summary": "A reference to an external S3 bucket."
      },
      "fqn": "@winglang/sdk.aws.BucketRef",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/shared-aws/bucket.ts",
          "line": 76
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "bucketName",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/shared-aws/bucket.ts",
        "line": 62
      },
      "methods": [
        {
          "docs": {
            "remarks": "You can override this method to perform additional logic like granting\nIAM permissions to the host based on what methods are being called. But\nyou must call `super.bind(host, ops)` to ensure that the resource is\nactually bound.",
            "stability": "experimental",
            "summary": "A hook called by the Wing compiler once for each inflight host that needs to use this resource inflight."
          },
          "locationInModule": {
            "filename": "src/shared-aws/bucket.ts",
            "line": 85
          },
          "name": "onLift",
          "overrides": "@winglang/sdk.std.Resource",
          "parameters": [
            {
              "name": "host",
              "type": {
                "fqn": "@winglang/sdk.std.IInflightHost"
              }
            },
            {
              "name": "ops",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ]
        }
      ],
      "name": "BucketRef",
      "namespace": "aws",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The ARN of this bucket."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/bucket.ts",
            "line": 74
          },
          "name": "bucketArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The Name of this bucket."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/bucket.ts",
            "line": 69
          },
          "name": "bucketName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/shared-aws/bucket:BucketRef"
    },
    "@winglang/sdk.aws.Counter": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "A helper class for working with AWS Counters."
      },
      "fqn": "@winglang/sdk.aws.Counter",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/shared-aws/counter.ts",
        "line": 21
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "If the table is an AWS Counter, return a helper interface for working with it."
          },
          "locationInModule": {
            "filename": "src/shared-aws/counter.ts",
            "line": 27
          },
          "name": "from",
          "parameters": [
            {
              "docs": {
                "summary": "The cloud.Counter."
              },
              "name": "counter",
              "type": {
                "fqn": "@winglang/sdk.cloud.Counter"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.aws.IAwsCounter"
            }
          },
          "static": true
        }
      ],
      "name": "Counter",
      "namespace": "aws",
      "symbolId": "src/shared-aws/counter:Counter"
    },
    "@winglang/sdk.aws.Domain": {
      "assembly": "@winglang/sdk",
      "base": "@winglang/sdk.cloud.Domain",
      "docs": {
        "custom": {
          "inflight": "`@winglang/sdk.cloud.IDomainClient`"
        },
        "stability": "experimental",
        "summary": "AWS implementation of `cloud.Domain`."
      },
      "fqn": "@winglang/sdk.aws.Domain",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/shared-aws/domain.ts",
          "line": 18
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@winglang/sdk.cloud.DomainProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/shared-aws/domain.ts",
        "line": 10
      },
      "name": "Domain",
      "namespace": "aws",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The AWS Certificate Manager (ACM) certificate arn value."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/domain.ts",
            "line": 71
          },
          "name": "acmCertificateArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The hosted zone id value."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/domain.ts",
            "line": 64
          },
          "name": "hostedZoneId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The IAM certificate identifier value."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/domain.ts",
            "line": 78
          },
          "name": "iamCertificate",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/shared-aws/domain:Domain"
    },
    "@winglang/sdk.aws.Effect": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "The Effect element of an AWS IAM policy statement."
      },
      "fqn": "@winglang/sdk.aws.Effect",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/shared-aws/types.ts",
        "line": 16
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Allow."
          },
          "name": "ALLOW"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Deny."
          },
          "name": "DENY"
        }
      ],
      "name": "Effect",
      "namespace": "aws",
      "symbolId": "src/shared-aws/types:Effect"
    },
    "@winglang/sdk.aws.Function": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "A helper class for working with AWS functions."
      },
      "fqn": "@winglang/sdk.aws.Function",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/shared-aws/function.ts",
        "line": 38
      },
      "methods": [
        {
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "returns": "The current Lambda invocation context.",
            "see": "https://docs.aws.amazon.com/lambda/latest/dg/nodejs-prog-model-context.html",
            "stability": "experimental",
            "summary": "Returns the current Lambda invocation context, if the host is an AWS Lambda."
          },
          "locationInModule": {
            "filename": "src/shared-aws/function.ts",
            "line": 53
          },
          "name": "context",
          "returns": {
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.aws.ILambdaContext"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "If the inflight host is an AWS Lambda, return a helper interface for working with it."
          },
          "locationInModule": {
            "filename": "src/shared-aws/function.ts",
            "line": 63
          },
          "name": "from",
          "parameters": [
            {
              "docs": {
                "summary": "The inflight host."
              },
              "name": "host",
              "type": {
                "fqn": "@winglang/sdk.std.IInflightHost"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.aws.IAwsFunction"
            }
          },
          "static": true
        }
      ],
      "name": "Function",
      "namespace": "aws",
      "symbolId": "src/shared-aws/function:Function"
    },
    "@winglang/sdk.aws.FunctionRef": {
      "assembly": "@winglang/sdk",
      "base": "@winglang/sdk.std.Resource",
      "docs": {
        "custom": {
          "inflight": "`@winglang/sdk.cloud.IFunctionClient`"
        },
        "stability": "experimental",
        "summary": "A reference to an external Lambda function."
      },
      "fqn": "@winglang/sdk.aws.FunctionRef",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/shared-aws/function.ts",
          "line": 139
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "functionArn",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/shared-aws/function.ts",
        "line": 130
      },
      "methods": [
        {
          "docs": {
            "remarks": "You can override this method to perform additional logic like granting\nIAM permissions to the host based on what methods are being called. But\nyou must call `super.bind(host, ops)` to ensure that the resource is\nactually bound.",
            "stability": "experimental",
            "summary": "A hook called by the Wing compiler once for each inflight host that needs to use this resource inflight."
          },
          "locationInModule": {
            "filename": "src/shared-aws/function.ts",
            "line": 151
          },
          "name": "onLift",
          "overrides": "@winglang/sdk.std.Resource",
          "parameters": [
            {
              "name": "host",
              "type": {
                "fqn": "@winglang/sdk.std.IInflightHost"
              }
            },
            {
              "name": "ops",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ]
        }
      ],
      "name": "FunctionRef",
      "namespace": "aws",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The ARN of this function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/function.ts",
            "line": 137
          },
          "name": "functionArn",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/shared-aws/function:FunctionRef"
    },
    "@winglang/sdk.aws.IAwsApi": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "A shared interface for AWS api."
      },
      "fqn": "@winglang/sdk.aws.IAwsApi",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/shared-aws/api.ts",
        "line": 14
      },
      "name": "IAwsApi",
      "namespace": "aws",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "RestApi deployment id."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/api.ts",
            "line": 43
          },
          "name": "deploymentId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Invoke URL."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/api.ts",
            "line": 38
          },
          "name": "invokeUrl",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "RestApi arn."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/api.ts",
            "line": 18
          },
          "name": "restApiArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "RestApi id."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/api.ts",
            "line": 23
          },
          "name": "restApiId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "RestApi id."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/api.ts",
            "line": 28
          },
          "name": "restApiName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "RestApi stage name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/api.ts",
            "line": 33
          },
          "name": "stageName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/shared-aws/api:IAwsApi"
    },
    "@winglang/sdk.aws.IAwsBucket": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "A shared interface for AWS buckets."
      },
      "fqn": "@winglang/sdk.aws.IAwsBucket",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/shared-aws/bucket.ts",
        "line": 12
      },
      "name": "IAwsBucket",
      "namespace": "aws",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "AWS Bucket arn."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/bucket.ts",
            "line": 16
          },
          "name": "bucketArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "AWS Bucket name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/bucket.ts",
            "line": 21
          },
          "name": "bucketName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/shared-aws/bucket:IAwsBucket"
    },
    "@winglang/sdk.aws.IAwsBucketClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "A few inflight methods that can be used with an AWS bucket."
      },
      "fqn": "@winglang/sdk.aws.IAwsBucketClient",
      "interfaces": [
        "@winglang/sdk.cloud.IBucketClient"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/shared-aws/bucket.ts",
        "line": 50
      },
      "methods": [
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Get the region of the bucket."
          },
          "locationInModule": {
            "filename": "src/shared-aws/bucket.ts",
            "line": 55
          },
          "name": "bucketRegion",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "IAwsBucketClient",
      "namespace": "aws",
      "symbolId": "src/shared-aws/bucket:IAwsBucketClient"
    },
    "@winglang/sdk.aws.IAwsCounter": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "A shared interface for AWS Counter."
      },
      "fqn": "@winglang/sdk.aws.IAwsCounter",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/shared-aws/counter.ts",
        "line": 6
      },
      "name": "IAwsCounter",
      "namespace": "aws",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "AWS Dynamodb arn."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/counter.ts",
            "line": 10
          },
          "name": "dynamoTableArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "AWS Dynamodb name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/counter.ts",
            "line": 15
          },
          "name": "dynamoTableName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/shared-aws/counter:IAwsCounter"
    },
    "@winglang/sdk.aws.IAwsFunction": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "A shared interface for AWS functions."
      },
      "fqn": "@winglang/sdk.aws.IAwsFunction",
      "interfaces": [
        "@winglang/sdk.aws.IAwsInflightHost"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/shared-aws/function.ts",
        "line": 23
      },
      "name": "IAwsFunction",
      "namespace": "aws",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "AWS Function arn."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/function.ts",
            "line": 27
          },
          "name": "functionArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "AWS Function name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/function.ts",
            "line": 32
          },
          "name": "functionName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/shared-aws/function:IAwsFunction"
    },
    "@winglang/sdk.aws.IAwsInflightHost": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Represents an `IInflightHost` on AWS."
      },
      "fqn": "@winglang/sdk.aws.IAwsInflightHost",
      "interfaces": [
        "@winglang/sdk.std.IInflightHost"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/shared-aws/inflight-host.ts",
        "line": 24
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Adds the host to the specified network."
          },
          "locationInModule": {
            "filename": "src/shared-aws/inflight-host.ts",
            "line": 34
          },
          "name": "addNetwork",
          "parameters": [
            {
              "docs": {
                "summary": "The network configuration."
              },
              "name": "config",
              "type": {
                "fqn": "@winglang/sdk.aws.NetworkConfig"
              }
            }
          ]
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Add policy statements to the function's IAM role."
          },
          "locationInModule": {
            "filename": "src/shared-aws/inflight-host.ts",
            "line": 28
          },
          "name": "addPolicyStatements",
          "parameters": [
            {
              "name": "policies",
              "type": {
                "fqn": "@winglang/sdk.aws.PolicyStatement"
              },
              "variadic": true
            }
          ],
          "variadic": true
        }
      ],
      "name": "IAwsInflightHost",
      "namespace": "aws",
      "symbolId": "src/shared-aws/inflight-host:IAwsInflightHost"
    },
    "@winglang/sdk.aws.IAwsQueue": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "A shared interface for AWS queues."
      },
      "fqn": "@winglang/sdk.aws.IAwsQueue",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/shared-aws/queue.ts",
        "line": 13
      },
      "name": "IAwsQueue",
      "namespace": "aws",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "AWS Queue arn."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/queue.ts",
            "line": 17
          },
          "name": "queueArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "AWS Queue name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/queue.ts",
            "line": 22
          },
          "name": "queueName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "AWS Queue url."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/queue.ts",
            "line": 27
          },
          "name": "queueUrl",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/shared-aws/queue:IAwsQueue"
    },
    "@winglang/sdk.aws.IAwsQueueClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "The inflight API for AWS queues."
      },
      "fqn": "@winglang/sdk.aws.IAwsQueueClient",
      "interfaces": [
        "@winglang/sdk.cloud.IQueueClient"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/shared-aws/queue.ts",
        "line": 58
      },
      "methods": [
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Get the queue URL."
          },
          "locationInModule": {
            "filename": "src/shared-aws/queue.ts",
            "line": 63
          },
          "name": "queueUrl",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "IAwsQueueClient",
      "namespace": "aws",
      "symbolId": "src/shared-aws/queue:IAwsQueueClient"
    },
    "@winglang/sdk.aws.IAwsTable": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "A shared interface for AWS tables."
      },
      "fqn": "@winglang/sdk.aws.IAwsTable",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/shared-aws/table.ts",
        "line": 6
      },
      "name": "IAwsTable",
      "namespace": "aws",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "AWS Table arn."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/table.ts",
            "line": 10
          },
          "name": "dynamoTableArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "AWS Table name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/table.ts",
            "line": 15
          },
          "name": "dynamoTableName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/shared-aws/table:IAwsTable"
    },
    "@winglang/sdk.aws.IAwsTopic": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "A shared interface for AWS topics."
      },
      "fqn": "@winglang/sdk.aws.IAwsTopic",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/shared-aws/topic.ts",
        "line": 7
      },
      "name": "IAwsTopic",
      "namespace": "aws",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "AWS Topic arn."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/topic.ts",
            "line": 11
          },
          "name": "topicArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "AWS Topic name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/topic.ts",
            "line": 16
          },
          "name": "topicName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/shared-aws/topic:IAwsTopic"
    },
    "@winglang/sdk.aws.IAwsWebsite": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "A shared interface for AWS website."
      },
      "fqn": "@winglang/sdk.aws.IAwsWebsite",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/shared-aws/website.ts",
        "line": 19
      },
      "name": "IAwsWebsite",
      "namespace": "aws",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "AWS Bucket arn."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/website.ts",
            "line": 23
          },
          "name": "bucketArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "AWS Bucket name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/website.ts",
            "line": 28
          },
          "name": "bucketName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/shared-aws/website:IAwsWebsite"
    },
    "@winglang/sdk.aws.ILambdaContext": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "inflight": "true"
        },
        "stability": "experimental",
        "summary": "The AWS Lambda context object."
      },
      "fqn": "@winglang/sdk.aws.ILambdaContext",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/shared-aws/function.ts",
        "line": 82
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Returns the number of milliseconds left before the execution times out."
          },
          "locationInModule": {
            "filename": "src/shared-aws/function.ts",
            "line": 122
          },
          "name": "remainingTimeInMillis",
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        }
      ],
      "name": "ILambdaContext",
      "namespace": "aws",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The identifier of the invocation request."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/function.ts",
            "line": 107
          },
          "name": "awsRequestId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The name of the Lambda function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/function.ts",
            "line": 86
          },
          "name": "functionName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The version of the function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/function.ts",
            "line": 91
          },
          "name": "functionVersion",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Indicates if the invoker specified a version number or alias.",
            "stability": "experimental",
            "summary": "The Amazon Resource Name (ARN) that's used to invoke the function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/function.ts",
            "line": 97
          },
          "name": "invokedFunctionArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The log group for the function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/function.ts",
            "line": 112
          },
          "name": "logGroupName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The log stream for the function instance."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/function.ts",
            "line": 117
          },
          "name": "logStreamName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The amount of memory that's allocated for the function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/function.ts",
            "line": 102
          },
          "name": "memoryLimitInMB",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/shared-aws/function:ILambdaContext"
    },
    "@winglang/sdk.aws.NetworkConfig": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Function network configuration used to hold data on subnets and security groups that should be used when a function is deployed within a VPC."
      },
      "fqn": "@winglang/sdk.aws.NetworkConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/shared-aws/inflight-host.ts",
        "line": 41
      },
      "name": "NetworkConfig",
      "namespace": "aws",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "List of security groups to place function in."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/inflight-host.ts",
            "line": 50
          },
          "name": "securityGroupIds",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "List of subnets to attach on function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/inflight-host.ts",
            "line": 45
          },
          "name": "subnetIds",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "src/shared-aws/inflight-host:NetworkConfig"
    },
    "@winglang/sdk.aws.PolicyStatement": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "AWS IAM Policy Statement."
      },
      "fqn": "@winglang/sdk.aws.PolicyStatement",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/shared-aws/types.ts",
        "line": 4
      },
      "name": "PolicyStatement",
      "namespace": "aws",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Actions."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/types.ts",
            "line": 6
          },
          "name": "actions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Effect (\"Allow\" or \"Deny\")."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/types.ts",
            "line": 10
          },
          "name": "effect",
          "optional": true,
          "type": {
            "fqn": "@winglang/sdk.aws.Effect"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Resources."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/types.ts",
            "line": 8
          },
          "name": "resources",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "src/shared-aws/types:PolicyStatement"
    },
    "@winglang/sdk.aws.Queue": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "A helper class for working with AWS queues."
      },
      "fqn": "@winglang/sdk.aws.Queue",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/shared-aws/queue.ts",
        "line": 33
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "If the queue is an AWS SQS, return a helper interface for working with it."
          },
          "locationInModule": {
            "filename": "src/shared-aws/queue.ts",
            "line": 39
          },
          "name": "from",
          "parameters": [
            {
              "docs": {
                "summary": "The cloud.Queue."
              },
              "name": "queue",
              "type": {
                "fqn": "@winglang/sdk.cloud.Queue"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.aws.IAwsQueue"
            }
          },
          "static": true
        }
      ],
      "name": "Queue",
      "namespace": "aws",
      "symbolId": "src/shared-aws/queue:Queue"
    },
    "@winglang/sdk.aws.QueueRef": {
      "assembly": "@winglang/sdk",
      "base": "@winglang/sdk.std.Resource",
      "docs": {
        "custom": {
          "inflight": "`@winglang/sdk.aws.IAwsQueueClient`"
        },
        "stability": "experimental",
        "summary": "A reference to an external SQS queue."
      },
      "fqn": "@winglang/sdk.aws.QueueRef",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/shared-aws/queue.ts",
          "line": 80
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "queueArn",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/shared-aws/queue.ts",
        "line": 71
      },
      "methods": [
        {
          "docs": {
            "remarks": "You can override this method to perform additional logic like granting\nIAM permissions to the host based on what methods are being called. But\nyou must call `super.bind(host, ops)` to ensure that the resource is\nactually bound.",
            "stability": "experimental",
            "summary": "A hook called by the Wing compiler once for each inflight host that needs to use this resource inflight."
          },
          "locationInModule": {
            "filename": "src/shared-aws/queue.ts",
            "line": 92
          },
          "name": "onLift",
          "overrides": "@winglang/sdk.std.Resource",
          "parameters": [
            {
              "name": "host",
              "type": {
                "fqn": "@winglang/sdk.std.IInflightHost"
              }
            },
            {
              "name": "ops",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ]
        }
      ],
      "name": "QueueRef",
      "namespace": "aws",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The ARN of this queue."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/queue.ts",
            "line": 78
          },
          "name": "queueArn",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/shared-aws/queue:QueueRef"
    },
    "@winglang/sdk.aws.QueueSetConsumerHandler": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Utility class for working with the queue consumer handler."
      },
      "fqn": "@winglang/sdk.aws.QueueSetConsumerHandler",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/shared-aws/queue.ts",
        "line": 171
      },
      "methods": [
        {
          "docs": {
            "returns": "The function handler.",
            "stability": "experimental",
            "summary": "Converts a queue consumer handler to a function handler."
          },
          "locationInModule": {
            "filename": "src/shared-aws/queue.ts",
            "line": 177
          },
          "name": "toFunctionHandler",
          "parameters": [
            {
              "docs": {
                "summary": "The queue consumer handler."
              },
              "name": "handler",
              "type": {
                "fqn": "@winglang/sdk.cloud.IQueueSetConsumerHandler"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.cloud.IFunctionHandler"
            }
          },
          "static": true
        }
      ],
      "name": "QueueSetConsumerHandler",
      "namespace": "aws",
      "symbolId": "src/shared-aws/queue:QueueSetConsumerHandler"
    },
    "@winglang/sdk.aws.SecretRef": {
      "assembly": "@winglang/sdk",
      "base": "@winglang/sdk.std.Resource",
      "docs": {
        "custom": {
          "inflight": "`@winglang/sdk.cloud.ISecretClient`"
        },
        "stability": "experimental",
        "summary": "A reference to an existing secret."
      },
      "fqn": "@winglang/sdk.aws.SecretRef",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/shared-aws/secret.ts",
          "line": 22
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "secretArn",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/shared-aws/secret.ts",
        "line": 16
      },
      "methods": [
        {
          "docs": {
            "remarks": "You can override this method to perform additional logic like granting\nIAM permissions to the host based on what methods are being called. But\nyou must call `super.bind(host, ops)` to ensure that the resource is\nactually bound.",
            "stability": "experimental",
            "summary": "A hook called by the Wing compiler once for each inflight host that needs to use this resource inflight."
          },
          "locationInModule": {
            "filename": "src/shared-aws/secret.ts",
            "line": 32
          },
          "name": "onLift",
          "overrides": "@winglang/sdk.std.Resource",
          "parameters": [
            {
              "name": "host",
              "type": {
                "fqn": "@winglang/sdk.std.IInflightHost"
              }
            },
            {
              "name": "ops",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ]
        }
      ],
      "name": "SecretRef",
      "namespace": "aws",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The ARN of the secret."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/shared-aws/secret.ts",
            "line": 20
          },
          "name": "secretArn",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/shared-aws/secret:SecretRef"
    },
    "@winglang/sdk.aws.Table": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "A helper class for working with AWS tables."
      },
      "fqn": "@winglang/sdk.aws.Table",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/shared-aws/table.ts",
        "line": 21
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "If the table is an AWS DynamoDB, return a helper interface for working with it."
          },
          "locationInModule": {
            "filename": "src/shared-aws/table.ts",
            "line": 27
          },
          "name": "from",
          "parameters": [
            {
              "docs": {
                "summary": "The ex.Table."
              },
              "name": "table",
              "type": {
                "fqn": "@winglang/sdk.ex.Table"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.aws.IAwsTable"
            }
          },
          "static": true
        }
      ],
      "name": "Table",
      "namespace": "aws",
      "symbolId": "src/shared-aws/table:Table"
    },
    "@winglang/sdk.aws.Topic": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "A helper class for working with AWS topics."
      },
      "fqn": "@winglang/sdk.aws.Topic",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/shared-aws/topic.ts",
        "line": 22
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "If the topic is an AWS SNS, return a helper interface for working with it."
          },
          "locationInModule": {
            "filename": "src/shared-aws/topic.ts",
            "line": 28
          },
          "name": "from",
          "parameters": [
            {
              "docs": {
                "summary": "The cloud.Topic."
              },
              "name": "topic",
              "type": {
                "fqn": "@winglang/sdk.cloud.Topic"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.aws.IAwsTopic"
            }
          },
          "static": true
        }
      ],
      "name": "Topic",
      "namespace": "aws",
      "symbolId": "src/shared-aws/topic:Topic"
    },
    "@winglang/sdk.aws.TopicOnMessageHandler": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "A helper class for working with AWS topic on message handlers."
      },
      "fqn": "@winglang/sdk.aws.TopicOnMessageHandler",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/shared-aws/topic.ts",
        "line": 45
      },
      "methods": [
        {
          "docs": {
            "returns": "The `cloud.Function` handler.",
            "stability": "experimental",
            "summary": "Returns a `cloud.Function` handler for handling messages from a `cloud.Topic`."
          },
          "locationInModule": {
            "filename": "src/shared-aws/topic.ts",
            "line": 51
          },
          "name": "toFunctionHandler",
          "parameters": [
            {
              "docs": {
                "summary": "The `onMessage` handler."
              },
              "name": "handler",
              "type": {
                "fqn": "@winglang/sdk.cloud.ITopicOnMessageHandler"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.cloud.IFunctionHandler"
            }
          },
          "static": true
        }
      ],
      "name": "TopicOnMessageHandler",
      "namespace": "aws",
      "symbolId": "src/shared-aws/topic:TopicOnMessageHandler"
    },
    "@winglang/sdk.aws.Website": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "A helper class for working with AWS buckets."
      },
      "fqn": "@winglang/sdk.aws.Website",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/shared-aws/website.ts",
        "line": 34
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "If the bucket is an AWS Bucket, return a helper interface for working with it."
          },
          "locationInModule": {
            "filename": "src/shared-aws/website.ts",
            "line": 40
          },
          "name": "from",
          "parameters": [
            {
              "docs": {
                "summary": "The cloud.Bucket."
              },
              "name": "website",
              "type": {
                "fqn": "@winglang/sdk.cloud.Website"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.aws.IAwsWebsite"
            }
          },
          "static": true
        }
      ],
      "name": "Website",
      "namespace": "aws",
      "symbolId": "src/shared-aws/website:Website"
    },
    "@winglang/sdk.cloud.AddFileOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for adding a file with custom value during the website's deployment."
      },
      "fqn": "@winglang/sdk.cloud.AddFileOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/website.ts",
        "line": 146
      },
      "name": "AddFileOptions",
      "namespace": "cloud",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "File's content type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/website.ts",
            "line": 150
          },
          "name": "contentType",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/cloud/website:AddFileOptions"
    },
    "@winglang/sdk.cloud.Api": {
      "assembly": "@winglang/sdk",
      "base": "@winglang/sdk.std.Resource",
      "docs": {
        "custom": {
          "abstract": "true",
          "inflight": "`@winglang/sdk.cloud.IApiClient`"
        },
        "stability": "experimental",
        "summary": "Functionality shared between all `Api` implementations."
      },
      "fqn": "@winglang/sdk.cloud.Api",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/cloud/api.ts",
          "line": 247
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.cloud.ApiProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/cloud/api.ts",
        "line": 152
      },
      "methods": [
        {
          "docs": {
            "returns": "An object containing default CORS response headers and OPTIONS response headers.",
            "stability": "experimental",
            "summary": "Generates an object containing default CORS response headers and OPTIONS response headers."
          },
          "locationInModule": {
            "filename": "src/cloud/api.ts",
            "line": 167
          },
          "name": "renderCorsHeaders",
          "parameters": [
            {
              "docs": {
                "summary": "The CORS options to generate the headers from."
              },
              "name": "corsOptions",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.cloud.ApiCorsOptions"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.cloud.CorsHeaders"
            }
          },
          "static": true
        },
        {
          "docs": {
            "returns": "OpenAPI path",
            "stability": "experimental",
            "summary": "Converts input path to a valid OpenAPI path (replaces `:` based path params with `{}`)."
          },
          "locationInModule": {
            "filename": "src/cloud/api.ts",
            "line": 158
          },
          "name": "renderOpenApiPath",
          "parameters": [
            {
              "docs": {
                "summary": "The path to convert (assumes path is valid)."
              },
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "custom": {
              "abstract": "true"
            },
            "stability": "experimental",
            "summary": "Add a inflight handler to the api for CONNECT requests on the given path."
          },
          "locationInModule": {
            "filename": "src/cloud/api.ts",
            "line": 393
          },
          "name": "connect",
          "parameters": [
            {
              "docs": {
                "summary": "The path to handle CONNECT requests for."
              },
              "name": "path",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The function to handle the request."
              },
              "name": "inflight",
              "type": {
                "fqn": "@winglang/sdk.cloud.IApiEndpointHandler"
              }
            },
            {
              "docs": {
                "summary": "Options for the route."
              },
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.cloud.ApiConnectOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "custom": {
              "abstract": "true"
            },
            "stability": "experimental",
            "summary": "Add a inflight handler to the api for DELETE requests on the given path."
          },
          "locationInModule": {
            "filename": "src/cloud/api.ts",
            "line": 321
          },
          "name": "delete",
          "parameters": [
            {
              "docs": {
                "summary": "The path to handle DELETE requests for."
              },
              "name": "path",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The function to handle the request."
              },
              "name": "inflight",
              "type": {
                "fqn": "@winglang/sdk.cloud.IApiEndpointHandler"
              }
            },
            {
              "docs": {
                "summary": "Options for the route."
              },
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.cloud.ApiDeleteOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "custom": {
              "abstract": "true"
            },
            "stability": "experimental",
            "summary": "Add a inflight handler to the api for GET requests on the given path."
          },
          "locationInModule": {
            "filename": "src/cloud/api.ts",
            "line": 267
          },
          "name": "get",
          "parameters": [
            {
              "docs": {
                "summary": "The path to handle GET requests for."
              },
              "name": "path",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The function to handle the request."
              },
              "name": "inflight",
              "type": {
                "fqn": "@winglang/sdk.cloud.IApiEndpointHandler"
              }
            },
            {
              "docs": {
                "summary": "Options for the route."
              },
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.cloud.ApiGetOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "custom": {
              "abstract": "true"
            },
            "stability": "experimental",
            "summary": "Add a inflight handler to the api for HEAD requests on the given path."
          },
          "locationInModule": {
            "filename": "src/cloud/api.ts",
            "line": 375
          },
          "name": "head",
          "parameters": [
            {
              "docs": {
                "summary": "The path to handle HEAD requests for."
              },
              "name": "path",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The function to handle the request."
              },
              "name": "inflight",
              "type": {
                "fqn": "@winglang/sdk.cloud.IApiEndpointHandler"
              }
            },
            {
              "docs": {
                "summary": "Options for the route."
              },
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.cloud.ApiHeadOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "custom": {
              "abstract": "true"
            },
            "stability": "experimental",
            "summary": "Add a inflight handler to the api for OPTIONS requests on the given path."
          },
          "locationInModule": {
            "filename": "src/cloud/api.ts",
            "line": 357
          },
          "name": "options",
          "parameters": [
            {
              "docs": {
                "summary": "The path to handle OPTIONS requests for."
              },
              "name": "path",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The function to handle the request."
              },
              "name": "inflight",
              "type": {
                "fqn": "@winglang/sdk.cloud.IApiEndpointHandler"
              }
            },
            {
              "docs": {
                "summary": "Options for the route."
              },
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.cloud.ApiOptionsOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "custom": {
              "abstract": "true"
            },
            "stability": "experimental",
            "summary": "Add a inflight handler to the api for PATCH requests on the given path."
          },
          "locationInModule": {
            "filename": "src/cloud/api.ts",
            "line": 339
          },
          "name": "patch",
          "parameters": [
            {
              "docs": {
                "summary": "The path to handle PATCH requests for."
              },
              "name": "path",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The function to handle the request."
              },
              "name": "inflight",
              "type": {
                "fqn": "@winglang/sdk.cloud.IApiEndpointHandler"
              }
            },
            {
              "docs": {
                "summary": "Options for the route."
              },
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.cloud.ApiPatchOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "custom": {
              "abstract": "true"
            },
            "stability": "experimental",
            "summary": "Add a inflight handler to the api for POST requests on the given path."
          },
          "locationInModule": {
            "filename": "src/cloud/api.ts",
            "line": 285
          },
          "name": "post",
          "parameters": [
            {
              "docs": {
                "summary": "The path to handle POST requests for."
              },
              "name": "path",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The function to handle the request."
              },
              "name": "inflight",
              "type": {
                "fqn": "@winglang/sdk.cloud.IApiEndpointHandler"
              }
            },
            {
              "docs": {
                "summary": "Options for the route."
              },
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.cloud.ApiPostOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "custom": {
              "abstract": "true"
            },
            "stability": "experimental",
            "summary": "Add a inflight handler to the api for PUT requests on the given path."
          },
          "locationInModule": {
            "filename": "src/cloud/api.ts",
            "line": 303
          },
          "name": "put",
          "parameters": [
            {
              "docs": {
                "summary": "The path to handle PUT requests for."
              },
              "name": "path",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The function to handle the request."
              },
              "name": "inflight",
              "type": {
                "fqn": "@winglang/sdk.cloud.IApiEndpointHandler"
              }
            },
            {
              "docs": {
                "summary": "Options for the route."
              },
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.cloud.ApiPutOptions"
              }
            }
          ]
        }
      ],
      "name": "Api",
      "namespace": "cloud",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The base URL of the API endpoint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/api.ts",
            "line": 205
          },
          "name": "url",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "CORS options for api."
          },
          "locationInModule": {
            "filename": "src/cloud/api.ts",
            "line": 242
          },
          "name": "corsOptions",
          "optional": true,
          "protected": true,
          "type": {
            "fqn": "@winglang/sdk.cloud.ApiCorsOptions"
          }
        }
      ],
      "symbolId": "src/cloud/api:Api"
    },
    "@winglang/sdk.cloud.ApiConnectOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for Api patch endpoint."
      },
      "fqn": "@winglang/sdk.cloud.ApiConnectOptions",
      "interfaces": [
        "@winglang/sdk.cloud.ApiEndpointOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/api.ts",
        "line": 685
      },
      "name": "ApiConnectOptions",
      "namespace": "cloud",
      "symbolId": "src/cloud/api:ApiConnectOptions"
    },
    "@winglang/sdk.cloud.ApiCorsOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Cors Options for `Api`."
      },
      "fqn": "@winglang/sdk.cloud.ApiCorsOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/api.ts",
        "line": 18
      },
      "name": "ApiCorsOptions",
      "namespace": "cloud",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- false",
            "stability": "experimental",
            "summary": "Whether to allow credentials."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/api.ts",
            "line": 51
          },
          "name": "allowCredentials",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- [\"Content-Type\", \"Authorization\"]",
            "example": "[\"Content-Type\"]",
            "stability": "experimental",
            "summary": "The list of allowed headers."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/api.ts",
            "line": 38
          },
          "name": "allowHeaders",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- [HttpMethod.GET, HttpMethod.POST, HttpMethod.PUT, HttpMethod.PATCH, HttpMethod.DELETE, HttpMethod.HEAD, HttpMethod.OPTIONS]",
            "example": "[HttpMethod.GET, HttpMethod.POST]",
            "stability": "experimental",
            "summary": "The list of allowed methods."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/api.ts",
            "line": 31
          },
          "name": "allowMethods",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@winglang/sdk.cloud.HttpMethod"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- \"*\"",
            "example": "\"https://example.com\"",
            "stability": "experimental",
            "summary": "The allowed origin."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/api.ts",
            "line": 24
          },
          "name": "allowOrigin",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- []",
            "example": "[\"Content-Type\"]",
            "stability": "experimental",
            "summary": "The list of exposed headers."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/api.ts",
            "line": 45
          },
          "name": "exposeHeaders",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 300 seconds",
            "stability": "experimental",
            "summary": "How long the browser should cache preflight request results."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/api.ts",
            "line": 57
          },
          "name": "maxAge",
          "optional": true,
          "type": {
            "fqn": "@winglang/sdk.std.Duration"
          }
        }
      ],
      "symbolId": "src/cloud/api:ApiCorsOptions"
    },
    "@winglang/sdk.cloud.ApiDeleteOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for Api put endpoint."
      },
      "fqn": "@winglang/sdk.cloud.ApiDeleteOptions",
      "interfaces": [
        "@winglang/sdk.cloud.ApiEndpointOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/api.ts",
        "line": 665
      },
      "name": "ApiDeleteOptions",
      "namespace": "cloud",
      "symbolId": "src/cloud/api:ApiDeleteOptions"
    },
    "@winglang/sdk.cloud.ApiEndpointOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Base options for Api endpoints."
      },
      "fqn": "@winglang/sdk.cloud.ApiEndpointOptions",
      "interfaces": [
        "@winglang/sdk.cloud.FunctionProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/api.ts",
        "line": 645
      },
      "name": "ApiEndpointOptions",
      "namespace": "cloud",
      "symbolId": "src/cloud/api:ApiEndpointOptions"
    },
    "@winglang/sdk.cloud.ApiGetOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for Api get endpoint."
      },
      "fqn": "@winglang/sdk.cloud.ApiGetOptions",
      "interfaces": [
        "@winglang/sdk.cloud.ApiEndpointOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/api.ts",
        "line": 650
      },
      "name": "ApiGetOptions",
      "namespace": "cloud",
      "symbolId": "src/cloud/api:ApiGetOptions"
    },
    "@winglang/sdk.cloud.ApiHeadOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for Api patch endpoint."
      },
      "fqn": "@winglang/sdk.cloud.ApiHeadOptions",
      "interfaces": [
        "@winglang/sdk.cloud.ApiEndpointOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/api.ts",
        "line": 680
      },
      "name": "ApiHeadOptions",
      "namespace": "cloud",
      "symbolId": "src/cloud/api:ApiHeadOptions"
    },
    "@winglang/sdk.cloud.ApiOptionsOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for Api patch endpoint."
      },
      "fqn": "@winglang/sdk.cloud.ApiOptionsOptions",
      "interfaces": [
        "@winglang/sdk.cloud.ApiEndpointOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/api.ts",
        "line": 675
      },
      "name": "ApiOptionsOptions",
      "namespace": "cloud",
      "symbolId": "src/cloud/api:ApiOptionsOptions"
    },
    "@winglang/sdk.cloud.ApiPatchOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for Api patch endpoint."
      },
      "fqn": "@winglang/sdk.cloud.ApiPatchOptions",
      "interfaces": [
        "@winglang/sdk.cloud.ApiEndpointOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/api.ts",
        "line": 670
      },
      "name": "ApiPatchOptions",
      "namespace": "cloud",
      "symbolId": "src/cloud/api:ApiPatchOptions"
    },
    "@winglang/sdk.cloud.ApiPostOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for Api post endpoint."
      },
      "fqn": "@winglang/sdk.cloud.ApiPostOptions",
      "interfaces": [
        "@winglang/sdk.cloud.ApiEndpointOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/api.ts",
        "line": 655
      },
      "name": "ApiPostOptions",
      "namespace": "cloud",
      "symbolId": "src/cloud/api:ApiPostOptions"
    },
    "@winglang/sdk.cloud.ApiProps": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `Api`."
      },
      "fqn": "@winglang/sdk.cloud.ApiProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/api.ts",
        "line": 64
      },
      "name": "ApiProps",
      "namespace": "cloud",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- false, CORS configuration is disabled",
            "example": "true",
            "remarks": "Options can also be overridden on a per-route basis. (not yet implemented)\nWhen enabled this will add CORS headers with default options.\nCan be customized by passing `corsOptions`",
            "stability": "experimental",
            "summary": "Options for configuring the API's CORS behavior across all routes."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/api.ts",
            "line": 73
          },
          "name": "cors",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Default CORS options are applied when `cors` is set to `true`\nallowOrigin: \"*\",\nallowMethods: [\nHttpMethod.GET,\nHttpMethod.POST,\nHttpMethod.PUT,\nHttpMethod.DELETE,\nHttpMethod.HEAD,\nHttpMethod.OPTIONS,\n],\nallowHeaders: [\"Content-Type\", \"Authorization\"],\nexposeHeaders: [],\nallowCredentials: false,",
            "example": "{ allowOrigin: \"https://example.com\" }",
            "remarks": "Options can also be overridden on a per-route basis. (not yet implemented)",
            "stability": "experimental",
            "summary": "Options for configuring the API's CORS behavior across all routes."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/api.ts",
            "line": 95
          },
          "name": "corsOptions",
          "optional": true,
          "type": {
            "fqn": "@winglang/sdk.cloud.ApiCorsOptions"
          }
        }
      ],
      "symbolId": "src/cloud/api:ApiProps"
    },
    "@winglang/sdk.cloud.ApiPutOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for Api put endpoint."
      },
      "fqn": "@winglang/sdk.cloud.ApiPutOptions",
      "interfaces": [
        "@winglang/sdk.cloud.ApiEndpointOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/api.ts",
        "line": 660
      },
      "name": "ApiPutOptions",
      "namespace": "cloud",
      "symbolId": "src/cloud/api:ApiPutOptions"
    },
    "@winglang/sdk.cloud.ApiRequest": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Shape of a request to an inflight handler."
      },
      "fqn": "@winglang/sdk.cloud.ApiRequest",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/api.ts",
        "line": 726
      },
      "name": "ApiRequest",
      "namespace": "cloud",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The request's HTTP method."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/api.ts",
            "line": 728
          },
          "name": "method",
          "type": {
            "fqn": "@winglang/sdk.cloud.HttpMethod"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The request's path."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/api.ts",
            "line": 730
          },
          "name": "path",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The request's query string values."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/api.ts",
            "line": 732
          },
          "name": "query",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The path variables."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/api.ts",
            "line": 734
          },
          "name": "vars",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The request's body."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/api.ts",
            "line": 736
          },
          "name": "body",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The request's headers."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/api.ts",
            "line": 738
          },
          "name": "headers",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        }
      ],
      "symbolId": "src/cloud/api:ApiRequest"
    },
    "@winglang/sdk.cloud.ApiResponse": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Shape of a response from a inflight handler."
      },
      "fqn": "@winglang/sdk.cloud.ApiResponse",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/api.ts",
        "line": 746
      },
      "name": "ApiResponse",
      "namespace": "cloud",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- no body",
            "stability": "experimental",
            "summary": "The response's body."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/api.ts",
            "line": 757
          },
          "name": "body",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "{}",
            "stability": "experimental",
            "summary": "The response's headers."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/api.ts",
            "line": 762
          },
          "name": "headers",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "200",
            "stability": "experimental",
            "summary": "The response's status code."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/api.ts",
            "line": 751
          },
          "name": "status",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "src/cloud/api:ApiResponse"
    },
    "@winglang/sdk.cloud.Bucket": {
      "assembly": "@winglang/sdk",
      "base": "@winglang/sdk.std.Resource",
      "docs": {
        "custom": {
          "abstract": "true",
          "inflight": "`@winglang/sdk.cloud.IBucketClient`"
        },
        "stability": "experimental",
        "summary": "A cloud object store."
      },
      "fqn": "@winglang/sdk.cloud.Bucket",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/cloud/bucket.ts",
          "line": 39
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.cloud.BucketProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/cloud/bucket.ts",
        "line": 33
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add a file to the bucket from system folder."
          },
          "locationInModule": {
            "filename": "src/cloud/bucket.ts",
            "line": 71
          },
          "name": "addFile",
          "parameters": [
            {
              "docs": {
                "summary": "- The key or name to associate with the file."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "- The path to the file on the local system."
              },
              "name": "path",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "remarks": "Defaults to \"utf-8\".",
                "summary": "- The encoding to use when reading the file."
              },
              "name": "encoding",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "custom": {
              "abstract": "true"
            },
            "remarks": "TODO: In the future this will support uploading any `Blob` type or\nreferencing a file from the local filesystem.",
            "stability": "experimental",
            "summary": "Add a file to the bucket that is uploaded when the app is deployed."
          },
          "locationInModule": {
            "filename": "src/cloud/bucket.ts",
            "line": 57
          },
          "name": "addObject",
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "body",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "returns": "the created topic",
            "stability": "experimental",
            "summary": "Creates a topic for subscribing to notification events."
          },
          "locationInModule": {
            "filename": "src/cloud/bucket.ts",
            "line": 91
          },
          "name": "createTopic",
          "parameters": [
            {
              "name": "actionType",
              "type": {
                "fqn": "@winglang/sdk.cloud.BucketEventType"
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.cloud.Topic"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates an inflight handler from inflight code."
          },
          "locationInModule": {
            "filename": "src/cloud/bucket.ts",
            "line": 113
          },
          "name": "createTopicHandler",
          "parameters": [
            {
              "name": "eventType",
              "type": {
                "fqn": "@winglang/sdk.cloud.BucketEventType"
              }
            },
            {
              "name": "inflight",
              "type": {
                "fqn": "@winglang/sdk.cloud.IBucketEventHandler"
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.cloud.ITopicOnMessageHandler"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Gets topic form the topics map, or creates if not exists."
          },
          "locationInModule": {
            "filename": "src/cloud/bucket.ts",
            "line": 101
          },
          "name": "getTopic",
          "parameters": [
            {
              "name": "actionType",
              "type": {
                "fqn": "@winglang/sdk.cloud.BucketEventType"
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.cloud.Topic"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Run an inflight whenever a file is uploaded to the bucket."
          },
          "locationInModule": {
            "filename": "src/cloud/bucket.ts",
            "line": 190
          },
          "name": "onCreate",
          "parameters": [
            {
              "name": "fn",
              "type": {
                "fqn": "@winglang/sdk.cloud.IBucketEventHandler"
              }
            },
            {
              "name": "opts",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.cloud.BucketOnCreateOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Run an inflight whenever a file is deleted from the bucket."
          },
          "locationInModule": {
            "filename": "src/cloud/bucket.ts",
            "line": 200
          },
          "name": "onDelete",
          "parameters": [
            {
              "name": "fn",
              "type": {
                "fqn": "@winglang/sdk.cloud.IBucketEventHandler"
              }
            },
            {
              "name": "opts",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.cloud.BucketOnDeleteOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Run an inflight whenever a file is uploaded, modified, or deleted from the bucket."
          },
          "locationInModule": {
            "filename": "src/cloud/bucket.ts",
            "line": 220
          },
          "name": "onEvent",
          "parameters": [
            {
              "name": "fn",
              "type": {
                "fqn": "@winglang/sdk.cloud.IBucketEventHandler"
              }
            },
            {
              "name": "opts",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.cloud.BucketOnEventOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Run an inflight whenever a file is updated in the bucket."
          },
          "locationInModule": {
            "filename": "src/cloud/bucket.ts",
            "line": 210
          },
          "name": "onUpdate",
          "parameters": [
            {
              "name": "fn",
              "type": {
                "fqn": "@winglang/sdk.cloud.IBucketEventHandler"
              }
            },
            {
              "name": "opts",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.cloud.BucketOnUpdateOptions"
              }
            }
          ]
        }
      ],
      "name": "Bucket",
      "namespace": "cloud",
      "symbolId": "src/cloud/bucket:Bucket"
    },
    "@winglang/sdk.cloud.BucketDeleteOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `Bucket.delete()`."
      },
      "fqn": "@winglang/sdk.cloud.BucketDeleteOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/bucket.ts",
        "line": 283
      },
      "name": "BucketDeleteOptions",
      "namespace": "cloud",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "Throws": "if this is `true`, an error is thrown if the file is not found (or any error case)."
            },
            "default": "false",
            "stability": "experimental",
            "summary": "Check failures on the method and retrieve errors if any."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/bucket.ts",
            "line": 289
          },
          "name": "mustExist",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "src/cloud/bucket:BucketDeleteOptions"
    },
    "@winglang/sdk.cloud.BucketEvent": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "On_event notification payload- will be in use after solving issue: https://github.com/winglang/wing/issues/1927."
      },
      "fqn": "@winglang/sdk.cloud.BucketEvent",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/bucket.ts",
        "line": 509
      },
      "name": "BucketEvent",
      "namespace": "cloud",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The bucket key that triggered the event."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/bucket.ts",
            "line": 513
          },
          "name": "key",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Type of event."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/bucket.ts",
            "line": 517
          },
          "name": "type",
          "type": {
            "fqn": "@winglang/sdk.cloud.BucketEventType"
          }
        }
      ],
      "symbolId": "src/cloud/bucket:BucketEvent"
    },
    "@winglang/sdk.cloud.BucketEventType": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Bucket events to subscribe to."
      },
      "fqn": "@winglang/sdk.cloud.BucketEventType",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/cloud/bucket.ts",
        "line": 523
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Create."
          },
          "name": "CREATE"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Delete."
          },
          "name": "DELETE"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Update."
          },
          "name": "UPDATE"
        }
      ],
      "name": "BucketEventType",
      "namespace": "cloud",
      "symbolId": "src/cloud/bucket:BucketEventType"
    },
    "@winglang/sdk.cloud.BucketGetOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `Bucket.get()`."
      },
      "fqn": "@winglang/sdk.cloud.BucketGetOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/bucket.ts",
        "line": 249
      },
      "name": "BucketGetOptions",
      "namespace": "cloud",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- undefined",
            "stability": "experimental",
            "summary": "The ending byte to read up to (including)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/bucket.ts",
            "line": 260
          },
          "name": "endByte",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- undefined",
            "stability": "experimental",
            "summary": "The starting byte to read from."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/bucket.ts",
            "line": 254
          },
          "name": "startByte",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "src/cloud/bucket:BucketGetOptions"
    },
    "@winglang/sdk.cloud.BucketOnCreateOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "`onCreate` event options."
      },
      "fqn": "@winglang/sdk.cloud.BucketOnCreateOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/bucket.ts",
        "line": 465
      },
      "name": "BucketOnCreateOptions",
      "namespace": "cloud",
      "symbolId": "src/cloud/bucket:BucketOnCreateOptions"
    },
    "@winglang/sdk.cloud.BucketOnDeleteOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "`onDelete` event options."
      },
      "fqn": "@winglang/sdk.cloud.BucketOnDeleteOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/bucket.ts",
        "line": 470
      },
      "name": "BucketOnDeleteOptions",
      "namespace": "cloud",
      "symbolId": "src/cloud/bucket:BucketOnDeleteOptions"
    },
    "@winglang/sdk.cloud.BucketOnEventOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "`onEvent` options."
      },
      "fqn": "@winglang/sdk.cloud.BucketOnEventOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/bucket.ts",
        "line": 480
      },
      "name": "BucketOnEventOptions",
      "namespace": "cloud",
      "symbolId": "src/cloud/bucket:BucketOnEventOptions"
    },
    "@winglang/sdk.cloud.BucketOnUpdateOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "`onUpdate` event options."
      },
      "fqn": "@winglang/sdk.cloud.BucketOnUpdateOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/bucket.ts",
        "line": 475
      },
      "name": "BucketOnUpdateOptions",
      "namespace": "cloud",
      "symbolId": "src/cloud/bucket:BucketOnUpdateOptions"
    },
    "@winglang/sdk.cloud.BucketProps": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `Bucket`."
      },
      "fqn": "@winglang/sdk.cloud.BucketProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/bucket.ts",
        "line": 19
      },
      "name": "BucketProps",
      "namespace": "cloud",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Whether the bucket's objects should be publicly accessible."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/bucket.ts",
            "line": 24
          },
          "name": "public",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "src/cloud/bucket:BucketProps"
    },
    "@winglang/sdk.cloud.BucketPutOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `Bucket.put()`."
      },
      "fqn": "@winglang/sdk.cloud.BucketPutOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/bucket.ts",
        "line": 271
      },
      "name": "BucketPutOptions",
      "namespace": "cloud",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- Determined by file extension or fallback to \"application/octet-stream\"",
            "see": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type",
            "stability": "experimental",
            "summary": "The HTTP Content-Type of the object."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/bucket.ts",
            "line": 277
          },
          "name": "contentType",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/cloud/bucket:BucketPutOptions"
    },
    "@winglang/sdk.cloud.BucketSignedUrlAction": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Specifies the action permitted by a presigned URL for a bucket."
      },
      "fqn": "@winglang/sdk.cloud.BucketSignedUrlAction",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/cloud/bucket.ts",
        "line": 295
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Represents a HTTP GET request for a presigned URL, allowing read access for an object in the bucket."
          },
          "name": "DOWNLOAD"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Represents a HTTP PUT request for a presigned URL, allowing write access for an object in the bucket."
          },
          "name": "UPLOAD"
        }
      ],
      "name": "BucketSignedUrlAction",
      "namespace": "cloud",
      "symbolId": "src/cloud/bucket:BucketSignedUrlAction"
    },
    "@winglang/sdk.cloud.BucketSignedUrlOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `Bucket.signedUrl()`."
      },
      "fqn": "@winglang/sdk.cloud.BucketSignedUrlOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/bucket.ts",
        "line": 309
      },
      "name": "BucketSignedUrlOptions",
      "namespace": "cloud",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "BucketSignedUrlAction.DOWNLOAD",
            "stability": "experimental",
            "summary": "The action allowed by the signed URL."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/bucket.ts",
            "line": 320
          },
          "name": "action",
          "optional": true,
          "type": {
            "fqn": "@winglang/sdk.cloud.BucketSignedUrlAction"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "15m",
            "stability": "experimental",
            "summary": "The duration for the signed URL to expire."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/bucket.ts",
            "line": 314
          },
          "name": "duration",
          "optional": true,
          "type": {
            "fqn": "@winglang/sdk.std.Duration"
          }
        }
      ],
      "symbolId": "src/cloud/bucket:BucketSignedUrlOptions"
    },
    "@winglang/sdk.cloud.BucketTryGetOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `Bucket.tryGet()`."
      },
      "fqn": "@winglang/sdk.cloud.BucketTryGetOptions",
      "interfaces": [
        "@winglang/sdk.cloud.BucketGetOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/bucket.ts",
        "line": 266
      },
      "name": "BucketTryGetOptions",
      "namespace": "cloud",
      "symbolId": "src/cloud/bucket:BucketTryGetOptions"
    },
    "@winglang/sdk.cloud.CorsHeaders": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Type definition for CORS headers which includes default and options headers."
      },
      "fqn": "@winglang/sdk.cloud.CorsHeaders",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/api.ts",
        "line": 134
      },
      "name": "CorsHeaders",
      "namespace": "cloud",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Default CORS response headers."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/api.ts",
            "line": 138
          },
          "name": "defaultResponse",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "CORS options response headers."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/api.ts",
            "line": 143
          },
          "name": "optionsResponse",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        }
      ],
      "symbolId": "src/cloud/api:CorsHeaders"
    },
    "@winglang/sdk.cloud.Counter": {
      "assembly": "@winglang/sdk",
      "base": "@winglang/sdk.std.Resource",
      "docs": {
        "custom": {
          "abstract": "true",
          "inflight": "`@winglang/sdk.cloud.ICounterClient`"
        },
        "stability": "experimental",
        "summary": "A distributed atomic counter."
      },
      "fqn": "@winglang/sdk.cloud.Counter",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/cloud/counter.ts",
          "line": 36
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.cloud.CounterProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/cloud/counter.ts",
        "line": 27
      },
      "name": "Counter",
      "namespace": "cloud",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The initial value of the counter."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/counter.ts",
            "line": 34
          },
          "name": "initial",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "src/cloud/counter:Counter"
    },
    "@winglang/sdk.cloud.CounterProps": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `Counter`."
      },
      "fqn": "@winglang/sdk.cloud.CounterProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/counter.ts",
        "line": 14
      },
      "name": "CounterProps",
      "namespace": "cloud",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "0",
            "stability": "experimental",
            "summary": "The initial value of the counter."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/counter.ts",
            "line": 19
          },
          "name": "initial",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "src/cloud/counter:CounterProps"
    },
    "@winglang/sdk.cloud.DeadLetterQueueProps": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Dead letter queue options."
      },
      "fqn": "@winglang/sdk.cloud.DeadLetterQueueProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/queue.ts",
        "line": 21
      },
      "name": "DeadLetterQueueProps",
      "namespace": "cloud",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Queue to receive messages that failed processing."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/queue.ts",
            "line": 25
          },
          "name": "queue",
          "type": {
            "fqn": "@winglang/sdk.cloud.Queue"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "1",
            "stability": "experimental",
            "summary": "Number of times a message will be processed before being sent to the dead-letter queue."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/queue.ts",
            "line": 31
          },
          "name": "maxDeliveryAttempts",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "src/cloud/queue:DeadLetterQueueProps"
    },
    "@winglang/sdk.cloud.Domain": {
      "assembly": "@winglang/sdk",
      "base": "@winglang/sdk.std.Resource",
      "docs": {
        "custom": {
          "abstract": "true",
          "inflight": "`@winglang/sdk.cloud.IDomainClient`"
        },
        "stability": "experimental",
        "summary": "A cloud Domain."
      },
      "fqn": "@winglang/sdk.cloud.Domain",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/cloud/domain.ts",
          "line": 30
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@winglang/sdk.cloud.DomainProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/cloud/domain.ts",
        "line": 26
      },
      "name": "Domain",
      "namespace": "cloud",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The domain name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/domain.ts",
            "line": 46
          },
          "name": "domainName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/cloud/domain:Domain"
    },
    "@winglang/sdk.cloud.DomainProps": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `Domain`."
      },
      "fqn": "@winglang/sdk.cloud.DomainProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/domain.ts",
        "line": 13
      },
      "name": "DomainProps",
      "namespace": "cloud",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "example": "\"example.com\"",
            "stability": "experimental",
            "summary": "The website's custom domain name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/domain.ts",
            "line": 18
          },
          "name": "domainName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/cloud/domain:DomainProps"
    },
    "@winglang/sdk.cloud.Endpoint": {
      "assembly": "@winglang/sdk",
      "base": "@winglang/sdk.std.Resource",
      "docs": {
        "custom": {
          "abstract": "true",
          "inflight": "`@winglang/sdk.cloud.IEndpointClient`"
        },
        "stability": "experimental",
        "summary": "A cloud Endpoint."
      },
      "fqn": "@winglang/sdk.cloud.Endpoint",
      "initializer": {
        "docs": {
          "stability": "experimental",
          "summary": "The endpoint url."
        },
        "locationInModule": {
          "filename": "src/cloud/endpoint.ts",
          "line": 47
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "url",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.cloud.EndpointProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/cloud/endpoint.ts",
        "line": 33
      },
      "name": "Endpoint",
      "namespace": "cloud",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The endpoint url."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/endpoint.ts",
            "line": 70
          },
          "name": "url",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The endpoint browser support."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/endpoint.ts",
            "line": 84
          },
          "name": "browserSupport",
          "optional": true,
          "protected": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The endpoint label."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/endpoint.ts",
            "line": 77
          },
          "name": "label",
          "optional": true,
          "protected": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/cloud/endpoint:Endpoint"
    },
    "@winglang/sdk.cloud.EndpointProps": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `Endpoint`."
      },
      "fqn": "@winglang/sdk.cloud.EndpointProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/endpoint.ts",
        "line": 13
      },
      "name": "EndpointProps",
      "namespace": "cloud",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "undefined",
            "remarks": "For UI purposes.",
            "stability": "experimental",
            "summary": "Whether the endpoint is supported through browsers."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/endpoint.ts",
            "line": 25
          },
          "name": "browserSupport",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "undefined",
            "example": "\"My Dashboard\"",
            "remarks": "For UI purposes.",
            "stability": "experimental",
            "summary": "The endpoint's label."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/endpoint.ts",
            "line": 19
          },
          "name": "label",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/cloud/endpoint:EndpointProps"
    },
    "@winglang/sdk.cloud.Function": {
      "assembly": "@winglang/sdk",
      "base": "@winglang/sdk.std.Resource",
      "docs": {
        "custom": {
          "abstract": "true",
          "inflight": "`@winglang/sdk.cloud.IFunctionClient`"
        },
        "stability": "experimental",
        "summary": "A function."
      },
      "fqn": "@winglang/sdk.cloud.Function",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/cloud/function.ts",
          "line": 71
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "handler",
            "type": {
              "fqn": "@winglang/sdk.cloud.IFunctionHandler"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.cloud.FunctionProps"
            }
          }
        ]
      },
      "interfaces": [
        "@winglang/sdk.std.IInflightHost"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "src/cloud/function.ts",
        "line": 57
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add an environment variable to the function."
          },
          "locationInModule": {
            "filename": "src/cloud/function.ts",
            "line": 151
          },
          "name": "addEnvironment",
          "overrides": "@winglang/sdk.std.IInflightHost",
          "parameters": [
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ]
        }
      ],
      "name": "Function",
      "namespace": "cloud",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The path where the entrypoint of the function source code will be eventually written to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/function.ts",
            "line": 69
          },
          "name": "entrypoint",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the set of environment variables for this function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/function.ts",
            "line": 163
          },
          "name": "env",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Reference to the function handler - an inflight closure."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/function.ts",
            "line": 64
          },
          "name": "handler",
          "protected": true,
          "type": {
            "fqn": "@winglang/sdk.cloud.IFunctionHandler"
          }
        }
      ],
      "symbolId": "src/cloud/function:Function"
    },
    "@winglang/sdk.cloud.FunctionProps": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `Function`."
      },
      "fqn": "@winglang/sdk.cloud.FunctionProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/function.ts",
        "line": 18
      },
      "name": "FunctionProps",
      "namespace": "cloud",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- platform specific limits (100 on the simulator)",
            "stability": "experimental",
            "summary": "The maximum concurrent invocations that can run at one time."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/function.ts",
            "line": 48
          },
          "name": "concurrency",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No environment variables.",
            "stability": "experimental",
            "summary": "Environment variables to pass to the function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/function.ts",
            "line": 23
          },
          "name": "env",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "30",
            "remarks": "Setting negative value means logs will not expire.",
            "stability": "experimental",
            "summary": "Specifies the number of days that function logs will be kept."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/function.ts",
            "line": 42
          },
          "name": "logRetentionDays",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "1024",
            "stability": "experimental",
            "summary": "The amount of memory to allocate to the function, in MB."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/function.ts",
            "line": 35
          },
          "name": "memory",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "1m",
            "stability": "experimental",
            "summary": "The maximum amount of time the function can run."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/function.ts",
            "line": 29
          },
          "name": "timeout",
          "optional": true,
          "type": {
            "fqn": "@winglang/sdk.std.Duration"
          }
        }
      ],
      "symbolId": "src/cloud/function:FunctionProps"
    },
    "@winglang/sdk.cloud.GetSecretValueOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options when getting a secret value."
      },
      "fqn": "@winglang/sdk.cloud.GetSecretValueOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/secret.ts",
        "line": 64
      },
      "name": "GetSecretValueOptions",
      "namespace": "cloud",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Whether to cache the value."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/secret.ts",
            "line": 70
          },
          "name": "cache",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "src/cloud/secret:GetSecretValueOptions"
    },
    "@winglang/sdk.cloud.HttpMethod": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Allowed HTTP methods for a endpoint."
      },
      "fqn": "@winglang/sdk.cloud.HttpMethod",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/cloud/api.ts",
        "line": 704
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Get."
          },
          "name": "GET"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Head."
          },
          "name": "HEAD"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Post."
          },
          "name": "POST"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Put."
          },
          "name": "PUT"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Delete."
          },
          "name": "DELETE"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Connect."
          },
          "name": "CONNECT"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Options."
          },
          "name": "OPTIONS"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Patch."
          },
          "name": "PATCH"
        }
      ],
      "name": "HttpMethod",
      "namespace": "cloud",
      "symbolId": "src/cloud/api:HttpMethod"
    },
    "@winglang/sdk.cloud.IApiClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Inflight methods and members of `cloud.Api`."
      },
      "fqn": "@winglang/sdk.cloud.IApiClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/api.ts",
        "line": 690
      },
      "name": "IApiClient",
      "namespace": "cloud",
      "symbolId": "src/cloud/api:IApiClient"
    },
    "@winglang/sdk.cloud.IApiEndpointHandler": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "inflight": "`@winglang/sdk.cloud.IApiEndpointHandlerClient`"
        },
        "stability": "experimental",
        "summary": "A resource with an inflight \"handle\" method that can be passed to one of the `Api` request preflight methods."
      },
      "fqn": "@winglang/sdk.cloud.IApiEndpointHandler",
      "interfaces": [
        "@winglang/sdk.std.IInflight"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/api.ts",
        "line": 771
      },
      "name": "IApiEndpointHandler",
      "namespace": "cloud",
      "symbolId": "src/cloud/api:IApiEndpointHandler"
    },
    "@winglang/sdk.cloud.IApiEndpointHandlerClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Inflight client for `IApiEndpointHandler`."
      },
      "fqn": "@winglang/sdk.cloud.IApiEndpointHandlerClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/api.ts",
        "line": 779
      },
      "methods": [
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Inflight that will be called when a request is made to the endpoint."
          },
          "locationInModule": {
            "filename": "src/cloud/api.ts",
            "line": 784
          },
          "name": "handle",
          "parameters": [
            {
              "name": "request",
              "type": {
                "fqn": "@winglang/sdk.cloud.ApiRequest"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.cloud.ApiResponse"
            }
          }
        }
      ],
      "name": "IApiEndpointHandlerClient",
      "namespace": "cloud",
      "symbolId": "src/cloud/api:IApiEndpointHandlerClient"
    },
    "@winglang/sdk.cloud.IBucketClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Inflight interface for `Bucket`."
      },
      "fqn": "@winglang/sdk.cloud.IBucketClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/bucket.ts",
        "line": 326
      },
      "methods": [
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true",
              "throws": "if `srcKey` object doesn't exist."
            },
            "remarks": "If the destination object\nalready exists, it will be overwritten.",
            "stability": "experimental",
            "summary": "Copy an object to a new location in the bucket."
          },
          "locationInModule": {
            "filename": "src/cloud/bucket.ts",
            "line": 449
          },
          "name": "copy",
          "parameters": [
            {
              "docs": {
                "summary": "The key of the source object you wish to copy."
              },
              "name": "srcKey",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The key of the destination object after copying."
              },
              "name": "dstKey",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Delete an existing object using a key from the bucket."
          },
          "locationInModule": {
            "filename": "src/cloud/bucket.ts",
            "line": 398
          },
          "name": "delete",
          "parameters": [
            {
              "docs": {
                "summary": "Key of the object."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Options available for delete an item from a bucket."
              },
              "name": "opts",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.cloud.BucketDeleteOptions"
              }
            }
          ]
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Check if an object exists in the bucket."
          },
          "locationInModule": {
            "filename": "src/cloud/bucket.ts",
            "line": 332
          },
          "name": "exists",
          "parameters": [
            {
              "docs": {
                "summary": "Key of the object."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "Returns": "the object's body.",
              "Throws": "if no object with the given key exists.",
              "inflight": "true"
            },
            "remarks": "If the bytes returned are not a valid UTF-8 string, an error is thrown.",
            "stability": "experimental",
            "summary": "Retrieve an object from the bucket."
          },
          "locationInModule": {
            "filename": "src/cloud/bucket.ts",
            "line": 360
          },
          "name": "get",
          "parameters": [
            {
              "docs": {
                "summary": "Key of the object."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Additional get options."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.cloud.BucketGetOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "Returns": "the object's parsed Json.",
              "Throws": "if no object with the given key exists.",
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Retrieve a Json object from the bucket."
          },
          "locationInModule": {
            "filename": "src/cloud/bucket.ts",
            "line": 382
          },
          "name": "getJson",
          "parameters": [
            {
              "docs": {
                "summary": "Key of the object."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.Json"
            }
          }
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "returns": "a list of keys or an empty array if the bucket is empty.",
            "stability": "experimental",
            "summary": "Retrieve existing objects keys from the bucket."
          },
          "locationInModule": {
            "filename": "src/cloud/bucket.ts",
            "line": 414
          },
          "name": "list",
          "parameters": [
            {
              "docs": {
                "summary": "Limits the response to keys that begin with the specified prefix."
              },
              "name": "prefix",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "Throws": "if there is no object with the given key.",
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Get the metadata of an object in the bucket."
          },
          "locationInModule": {
            "filename": "src/cloud/bucket.ts",
            "line": 439
          },
          "name": "metadata",
          "parameters": [
            {
              "docs": {
                "summary": "Key of the object."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.cloud.ObjectMetadata"
            }
          }
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "Throws": "if the file is not public or if object does not exist.",
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Returns a url to the given file."
          },
          "locationInModule": {
            "filename": "src/cloud/bucket.ts",
            "line": 421
          },
          "name": "publicUrl",
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Put an object in the bucket."
          },
          "locationInModule": {
            "filename": "src/cloud/bucket.ts",
            "line": 341
          },
          "name": "put",
          "parameters": [
            {
              "docs": {
                "summary": "Key of the object."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Content of the object we want to store into the bucket."
              },
              "name": "body",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Additional options."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.cloud.BucketPutOptions"
              }
            }
          ]
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Put a Json object in the bucket."
          },
          "locationInModule": {
            "filename": "src/cloud/bucket.ts",
            "line": 349
          },
          "name": "putJson",
          "parameters": [
            {
              "docs": {
                "summary": "Key of the object."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Json object that we want to store into the bucket."
              },
              "name": "body",
              "type": {
                "fqn": "@winglang/sdk.std.Json"
              }
            }
          ]
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true",
              "throws": "if `srcKey` object doesn't exist or if it matches `dstKey`."
            },
            "remarks": "If the destination object\nalready exists, it will be overwritten. Returns once the renaming is finished.",
            "stability": "experimental",
            "summary": "Move an object to a new location in the bucket."
          },
          "locationInModule": {
            "filename": "src/cloud/bucket.ts",
            "line": 459
          },
          "name": "rename",
          "parameters": [
            {
              "docs": {
                "summary": "The key of the source object you wish to rename."
              },
              "name": "srcKey",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The key of the destination object after renaming."
              },
              "name": "dstKey",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "Throws": "if object does not exist.",
              "inflight": "true"
            },
            "returns": "A string representing the signed url of the object which can be used to download in any downstream system",
            "stability": "experimental",
            "summary": "Returns a signed url to the given file."
          },
          "locationInModule": {
            "filename": "src/cloud/bucket.ts",
            "line": 431
          },
          "name": "signedUrl",
          "parameters": [
            {
              "docs": {
                "summary": "The key to access the cloud object."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The signedUrlOptions where you can provide the configurations of the signed url."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.cloud.BucketSignedUrlOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "returns": "the result of the delete operation",
            "stability": "experimental",
            "summary": "Delete an object from the bucket if it exists."
          },
          "locationInModule": {
            "filename": "src/cloud/bucket.ts",
            "line": 406
          },
          "name": "tryDelete",
          "parameters": [
            {
              "docs": {
                "summary": "Key of the object."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "returns": "the contents of the object as a string if it exists, nil otherwise",
            "stability": "experimental",
            "summary": "Get an object from the bucket if it exists If the bytes returned are not a valid UTF-8 string, an error is thrown."
          },
          "locationInModule": {
            "filename": "src/cloud/bucket.ts",
            "line": 370
          },
          "name": "tryGet",
          "parameters": [
            {
              "docs": {
                "summary": "Key of the object."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Additional get options."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.cloud.BucketTryGetOptions"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "returns": "the contents of the object as Json if it exists, nil otherwise",
            "stability": "experimental",
            "summary": "Gets an object from the bucket if it exists, parsing it as Json."
          },
          "locationInModule": {
            "filename": "src/cloud/bucket.ts",
            "line": 390
          },
          "name": "tryGetJson",
          "parameters": [
            {
              "docs": {
                "summary": "Key of the object."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.std.Json"
            }
          }
        }
      ],
      "name": "IBucketClient",
      "namespace": "cloud",
      "symbolId": "src/cloud/bucket:IBucketClient"
    },
    "@winglang/sdk.cloud.IBucketEventHandler": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "inflight": "`@winglang/sdk.cloud.IBucketEventHandlerClient`"
        },
        "stability": "experimental",
        "summary": "A resource with an inflight \"handle\" method that can be passed to the bucket events."
      },
      "fqn": "@winglang/sdk.cloud.IBucketEventHandler",
      "interfaces": [
        "@winglang/sdk.std.IInflight"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/bucket.ts",
        "line": 488
      },
      "name": "IBucketEventHandler",
      "namespace": "cloud",
      "symbolId": "src/cloud/bucket:IBucketEventHandler"
    },
    "@winglang/sdk.cloud.IBucketEventHandlerClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "A resource with an inflight \"handle\" method that can be passed to the bucket events."
      },
      "fqn": "@winglang/sdk.cloud.IBucketEventHandlerClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/bucket.ts",
        "line": 498
      },
      "methods": [
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Function that will be called when an event notification is fired."
          },
          "locationInModule": {
            "filename": "src/cloud/bucket.ts",
            "line": 503
          },
          "name": "handle",
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "type",
              "type": {
                "fqn": "@winglang/sdk.cloud.BucketEventType"
              }
            }
          ]
        }
      ],
      "name": "IBucketEventHandlerClient",
      "namespace": "cloud",
      "symbolId": "src/cloud/bucket:IBucketEventHandlerClient"
    },
    "@winglang/sdk.cloud.ICounterClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Inflight interface for `Counter`."
      },
      "fqn": "@winglang/sdk.cloud.ICounterClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/counter.ts",
        "line": 53
      },
      "methods": [
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "returns": "the previous value of the counter.",
            "stability": "experimental",
            "summary": "Decrement the counter, returning the previous value."
          },
          "locationInModule": {
            "filename": "src/cloud/counter.ts",
            "line": 70
          },
          "name": "dec",
          "parameters": [
            {
              "docs": {
                "summary": "amount to decrement (default is 1)."
              },
              "name": "amount",
              "optional": true,
              "type": {
                "primitive": "number"
              }
            },
            {
              "docs": {
                "summary": "specify the key to be decremented."
              },
              "name": "key",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "returns": "the previous value of the counter.",
            "stability": "experimental",
            "summary": "Increments the counter atomically by a certain amount and returns the previous value."
          },
          "locationInModule": {
            "filename": "src/cloud/counter.ts",
            "line": 61
          },
          "name": "inc",
          "parameters": [
            {
              "docs": {
                "summary": "amount to increment (default is 1)."
              },
              "name": "amount",
              "optional": true,
              "type": {
                "primitive": "number"
              }
            },
            {
              "docs": {
                "summary": "specify the key to be incremented."
              },
              "name": "key",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "remarks": "Using this API may introduce race conditions since the value can change between\nthe time it is read and the time it is used in your code.",
            "returns": "current value",
            "stability": "experimental",
            "summary": "Get the current value of the counter."
          },
          "locationInModule": {
            "filename": "src/cloud/counter.ts",
            "line": 80
          },
          "name": "peek",
          "parameters": [
            {
              "docs": {
                "summary": "specify the key to be retrieved."
              },
              "name": "key",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Set a counter to a given value."
          },
          "locationInModule": {
            "filename": "src/cloud/counter.ts",
            "line": 88
          },
          "name": "set",
          "parameters": [
            {
              "docs": {
                "summary": "new value."
              },
              "name": "value",
              "type": {
                "primitive": "number"
              }
            },
            {
              "docs": {
                "summary": "specify the key to be set."
              },
              "name": "key",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ]
        }
      ],
      "name": "ICounterClient",
      "namespace": "cloud",
      "symbolId": "src/cloud/counter:ICounterClient"
    },
    "@winglang/sdk.cloud.IDomainClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Inflight interface for `Domain`."
      },
      "fqn": "@winglang/sdk.cloud.IDomainClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/domain.ts",
        "line": 54
      },
      "name": "IDomainClient",
      "namespace": "cloud",
      "symbolId": "src/cloud/domain:IDomainClient"
    },
    "@winglang/sdk.cloud.IEndpointClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Inflight interface for `Endpoint`."
      },
      "fqn": "@winglang/sdk.cloud.IEndpointClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/endpoint.ts",
        "line": 92
      },
      "name": "IEndpointClient",
      "namespace": "cloud",
      "symbolId": "src/cloud/endpoint:IEndpointClient"
    },
    "@winglang/sdk.cloud.IFunctionClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Inflight interface for `Function`."
      },
      "fqn": "@winglang/sdk.cloud.IFunctionClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/function.ts",
        "line": 171
      },
      "methods": [
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "returns": "An optional response from the function",
            "stability": "experimental",
            "summary": "Invokes the function with a payload and waits for the result."
          },
          "locationInModule": {
            "filename": "src/cloud/function.ts",
            "line": 178
          },
          "name": "invoke",
          "parameters": [
            {
              "docs": {
                "remarks": "If not defined, an empty string will be passed.",
                "summary": "payload to pass to the function."
              },
              "name": "payload",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Kicks off the execution of the function with a payload and returns immediately while the function is running."
          },
          "locationInModule": {
            "filename": "src/cloud/function.ts",
            "line": 185
          },
          "name": "invokeAsync",
          "parameters": [
            {
              "docs": {
                "remarks": "If not defined, an empty string will be passed.",
                "summary": "payload to pass to the function."
              },
              "name": "payload",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ]
        }
      ],
      "name": "IFunctionClient",
      "namespace": "cloud",
      "symbolId": "src/cloud/function:IFunctionClient"
    },
    "@winglang/sdk.cloud.IFunctionHandler": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "inflight": "`@winglang/sdk.cloud.IFunctionHandlerClient`"
        },
        "stability": "experimental",
        "summary": "A resource with an inflight \"handle\" method that can be used to create a `cloud.Function`."
      },
      "fqn": "@winglang/sdk.cloud.IFunctionHandler",
      "interfaces": [
        "@winglang/sdk.std.IInflight"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/function.ts",
        "line": 194
      },
      "name": "IFunctionHandler",
      "namespace": "cloud",
      "symbolId": "src/cloud/function:IFunctionHandler"
    },
    "@winglang/sdk.cloud.IFunctionHandlerClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Inflight client for `IFunctionHandler`."
      },
      "fqn": "@winglang/sdk.cloud.IFunctionHandlerClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/function.ts",
        "line": 202
      },
      "methods": [
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Entrypoint function that will be called when the cloud function is invoked."
          },
          "locationInModule": {
            "filename": "src/cloud/function.ts",
            "line": 207
          },
          "name": "handle",
          "parameters": [
            {
              "name": "event",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "IFunctionHandlerClient",
      "namespace": "cloud",
      "symbolId": "src/cloud/function:IFunctionHandlerClient"
    },
    "@winglang/sdk.cloud.IOnDeployClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Inflight interface for `OnDeploy`."
      },
      "fqn": "@winglang/sdk.cloud.IOnDeployClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/on-deploy.ts",
        "line": 83
      },
      "name": "IOnDeployClient",
      "namespace": "cloud",
      "symbolId": "src/cloud/on-deploy:IOnDeployClient"
    },
    "@winglang/sdk.cloud.IOnDeployHandler": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "inflight": "`@winglang/sdk.cloud.IOnDeployHandlerClient`"
        },
        "stability": "experimental",
        "summary": "A resource with an inflight \"handle\" method that can be used by `cloud.OnDeploy`."
      },
      "fqn": "@winglang/sdk.cloud.IOnDeployHandler",
      "interfaces": [
        "@winglang/sdk.std.IInflight"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/on-deploy.ts",
        "line": 64
      },
      "name": "IOnDeployHandler",
      "namespace": "cloud",
      "symbolId": "src/cloud/on-deploy:IOnDeployHandler"
    },
    "@winglang/sdk.cloud.IOnDeployHandlerClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Inflight client for `IOnDeployHandler`."
      },
      "fqn": "@winglang/sdk.cloud.IOnDeployHandlerClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/on-deploy.ts",
        "line": 72
      },
      "methods": [
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Entrypoint function that will be called when the app is deployed."
          },
          "locationInModule": {
            "filename": "src/cloud/on-deploy.ts",
            "line": 77
          },
          "name": "handle"
        }
      ],
      "name": "IOnDeployHandlerClient",
      "namespace": "cloud",
      "symbolId": "src/cloud/on-deploy:IOnDeployHandlerClient"
    },
    "@winglang/sdk.cloud.IQueueClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Inflight interface for `Queue`."
      },
      "fqn": "@winglang/sdk.cloud.IQueueClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/queue.ts",
        "line": 108
      },
      "methods": [
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Retrieve the approximate number of messages in the queue."
          },
          "locationInModule": {
            "filename": "src/cloud/queue.ts",
            "line": 126
          },
          "name": "approxSize",
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "returns": "The message, or `nil` if the queue is empty.",
            "stability": "experimental",
            "summary": "Pop a message from the queue."
          },
          "locationInModule": {
            "filename": "src/cloud/queue.ts",
            "line": 133
          },
          "name": "pop",
          "returns": {
            "optional": true,
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Purge all of the messages in the queue."
          },
          "locationInModule": {
            "filename": "src/cloud/queue.ts",
            "line": 120
          },
          "name": "purge"
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Push one or more messages to the queue."
          },
          "locationInModule": {
            "filename": "src/cloud/queue.ts",
            "line": 114
          },
          "name": "push",
          "parameters": [
            {
              "docs": {
                "remarks": "Each message must be non-empty.",
                "summary": "Payload to send to the queue."
              },
              "name": "messages",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        }
      ],
      "name": "IQueueClient",
      "namespace": "cloud",
      "symbolId": "src/cloud/queue:IQueueClient"
    },
    "@winglang/sdk.cloud.IQueueSetConsumerHandler": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "inflight": "`@winglang/sdk.cloud.IQueueSetConsumerHandlerClient`"
        },
        "stability": "experimental",
        "summary": "A resource with an inflight \"handle\" method that can be passed to `Queue.setConsumer`."
      },
      "fqn": "@winglang/sdk.cloud.IQueueSetConsumerHandler",
      "interfaces": [
        "@winglang/sdk.std.IInflight"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/queue.ts",
        "line": 142
      },
      "name": "IQueueSetConsumerHandler",
      "namespace": "cloud",
      "symbolId": "src/cloud/queue:IQueueSetConsumerHandler"
    },
    "@winglang/sdk.cloud.IQueueSetConsumerHandlerClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Inflight client for `IQueueSetConsumerHandler`."
      },
      "fqn": "@winglang/sdk.cloud.IQueueSetConsumerHandlerClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/queue.ts",
        "line": 150
      },
      "methods": [
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Function that will be called when a message is received from the queue."
          },
          "locationInModule": {
            "filename": "src/cloud/queue.ts",
            "line": 155
          },
          "name": "handle",
          "parameters": [
            {
              "name": "message",
              "type": {
                "primitive": "string"
              }
            }
          ]
        }
      ],
      "name": "IQueueSetConsumerHandlerClient",
      "namespace": "cloud",
      "symbolId": "src/cloud/queue:IQueueSetConsumerHandlerClient"
    },
    "@winglang/sdk.cloud.IScheduleClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Inflight interface for `Schedule`."
      },
      "fqn": "@winglang/sdk.cloud.IScheduleClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/schedule.ts",
        "line": 122
      },
      "name": "IScheduleClient",
      "namespace": "cloud",
      "symbolId": "src/cloud/schedule:IScheduleClient"
    },
    "@winglang/sdk.cloud.IScheduleOnTickHandler": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "inflight": "`@winglang/sdk.cloud.IScheduleOnTickHandlerClient`"
        },
        "stability": "experimental",
        "summary": "A resource with an inflight \"handle\" method that can be passed to `Schedule.on_tick`."
      },
      "fqn": "@winglang/sdk.cloud.IScheduleOnTickHandler",
      "interfaces": [
        "@winglang/sdk.std.IInflight"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/schedule.ts",
        "line": 114
      },
      "name": "IScheduleOnTickHandler",
      "namespace": "cloud",
      "symbolId": "src/cloud/schedule:IScheduleOnTickHandler"
    },
    "@winglang/sdk.cloud.IScheduleOnTickHandlerClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Inflight client for `IScheduleOnTickHandler`."
      },
      "fqn": "@winglang/sdk.cloud.IScheduleOnTickHandlerClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/schedule.ts",
        "line": 136
      },
      "methods": [
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Function that will be called when a message is received from the schedule."
          },
          "locationInModule": {
            "filename": "src/cloud/schedule.ts",
            "line": 141
          },
          "name": "handle"
        }
      ],
      "name": "IScheduleOnTickHandlerClient",
      "namespace": "cloud",
      "symbolId": "src/cloud/schedule:IScheduleOnTickHandlerClient"
    },
    "@winglang/sdk.cloud.ISecretClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Inflight interface for `Secret`."
      },
      "fqn": "@winglang/sdk.cloud.ISecretClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/secret.ts",
        "line": 76
      },
      "methods": [
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "Returns": "the secret value as string.",
              "Throws": "if the secret doesn't exist.",
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Retrieve the value of the secret."
          },
          "locationInModule": {
            "filename": "src/cloud/secret.ts",
            "line": 83
          },
          "name": "value",
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.cloud.GetSecretValueOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "Returns": "the secret value parsed as Json.",
              "Throws": "if the secret doesn't exist or cannot be parsed as Json",
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Retrieve the Json value of the secret."
          },
          "locationInModule": {
            "filename": "src/cloud/secret.ts",
            "line": 91
          },
          "name": "valueJson",
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.cloud.GetSecretValueOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.Json"
            }
          }
        }
      ],
      "name": "ISecretClient",
      "namespace": "cloud",
      "symbolId": "src/cloud/secret:ISecretClient"
    },
    "@winglang/sdk.cloud.IServiceClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Inflight interface for `Service`."
      },
      "fqn": "@winglang/sdk.cloud.IServiceClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/service.ts",
        "line": 155
      },
      "methods": [
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Start the service."
          },
          "locationInModule": {
            "filename": "src/cloud/service.ts",
            "line": 160
          },
          "name": "start"
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Indicates whether the service is started."
          },
          "locationInModule": {
            "filename": "src/cloud/service.ts",
            "line": 172
          },
          "name": "started",
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Stop the service."
          },
          "locationInModule": {
            "filename": "src/cloud/service.ts",
            "line": 166
          },
          "name": "stop"
        }
      ],
      "name": "IServiceClient",
      "namespace": "cloud",
      "symbolId": "src/cloud/service:IServiceClient"
    },
    "@winglang/sdk.cloud.IServiceHandler": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "inflight": "`@winglang/sdk.cloud.IServiceHandlerClient`"
        },
        "stability": "experimental",
        "summary": "Executed when a `cloud.Service` is started."
      },
      "fqn": "@winglang/sdk.cloud.IServiceHandler",
      "interfaces": [
        "@winglang/sdk.std.IInflight"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/service.ts",
        "line": 180
      },
      "name": "IServiceHandler",
      "namespace": "cloud",
      "symbolId": "src/cloud/service:IServiceHandler"
    },
    "@winglang/sdk.cloud.IServiceHandlerClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Inflight client for `IServiceHandler`."
      },
      "fqn": "@winglang/sdk.cloud.IServiceHandlerClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/service.ts",
        "line": 188
      },
      "methods": [
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "example": "bring cloud;\n\nnew cloud.Service(inflight () => {\n  log(\"starting service...\");\n  return () => {\n    log(\"stoping service...\");\n  };\n});",
            "remarks": "This is where you implement the initialization logic of\nthe service, start any activities asynchronously.\n\nDO NOT BLOCK! This handler should return as quickly as possible. If you need to run a long\nrunning process, start it asynchronously.",
            "returns": "an optional function that can be used to cleanup any resources when the service is\nstopped.",
            "stability": "experimental",
            "summary": "Handler to run when the service starts."
          },
          "locationInModule": {
            "filename": "src/cloud/service.ts",
            "line": 211
          },
          "name": "handle",
          "returns": {
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.cloud.IServiceStopHandler"
            }
          }
        }
      ],
      "name": "IServiceHandlerClient",
      "namespace": "cloud",
      "symbolId": "src/cloud/service:IServiceHandlerClient"
    },
    "@winglang/sdk.cloud.IServiceStopHandler": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "inflight": "`@winglang/sdk.cloud.IServiceStopHandlerClient`"
        },
        "stability": "experimental",
        "summary": "Executed when a `cloud.Service` is stopped."
      },
      "fqn": "@winglang/sdk.cloud.IServiceStopHandler",
      "interfaces": [
        "@winglang/sdk.std.IInflight"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/service.ts",
        "line": 219
      },
      "name": "IServiceStopHandler",
      "namespace": "cloud",
      "symbolId": "src/cloud/service:IServiceStopHandler"
    },
    "@winglang/sdk.cloud.IServiceStopHandlerClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Inflight client for `IServiceStopHandler`."
      },
      "fqn": "@winglang/sdk.cloud.IServiceStopHandlerClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/service.ts",
        "line": 227
      },
      "methods": [
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "remarks": "This is where you implement the cleanup logic of\nthe service, stop any activities asychronously.",
            "stability": "experimental",
            "summary": "Handler to run when the service stops."
          },
          "locationInModule": {
            "filename": "src/cloud/service.ts",
            "line": 234
          },
          "name": "handle"
        }
      ],
      "name": "IServiceStopHandlerClient",
      "namespace": "cloud",
      "symbolId": "src/cloud/service:IServiceStopHandlerClient"
    },
    "@winglang/sdk.cloud.ITopicClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Inflight interface for `Topic`."
      },
      "fqn": "@winglang/sdk.cloud.ITopicClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/topic.ts",
        "line": 78
      },
      "methods": [
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Publish messages to topic, if multiple messages are passed then they will be published as a batch if supported by the target platform."
          },
          "locationInModule": {
            "filename": "src/cloud/topic.ts",
            "line": 85
          },
          "name": "publish",
          "parameters": [
            {
              "docs": {
                "summary": "Payload to publish to Topic."
              },
              "name": "messages",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        }
      ],
      "name": "ITopicClient",
      "namespace": "cloud",
      "symbolId": "src/cloud/topic:ITopicClient"
    },
    "@winglang/sdk.cloud.ITopicOnMessageHandler": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "inflight": "`@winglang/sdk.cloud.ITopicOnMessageHandlerClient`"
        },
        "stability": "experimental",
        "summary": "A resource with an inflight \"handle\" method that can be passed to `Topic.on_message`."
      },
      "fqn": "@winglang/sdk.cloud.ITopicOnMessageHandler",
      "interfaces": [
        "@winglang/sdk.std.IInflight"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/topic.ts",
        "line": 94
      },
      "name": "ITopicOnMessageHandler",
      "namespace": "cloud",
      "symbolId": "src/cloud/topic:ITopicOnMessageHandler"
    },
    "@winglang/sdk.cloud.ITopicOnMessageHandlerClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Inflight client for `ITopicOnMessageHandler`."
      },
      "fqn": "@winglang/sdk.cloud.ITopicOnMessageHandlerClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/topic.ts",
        "line": 102
      },
      "methods": [
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Function that will be called when a message is received from the topic."
          },
          "locationInModule": {
            "filename": "src/cloud/topic.ts",
            "line": 107
          },
          "name": "handle",
          "parameters": [
            {
              "name": "event",
              "type": {
                "primitive": "string"
              }
            }
          ]
        }
      ],
      "name": "ITopicOnMessageHandlerClient",
      "namespace": "cloud",
      "symbolId": "src/cloud/topic:ITopicOnMessageHandlerClient"
    },
    "@winglang/sdk.cloud.IWebsite": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Base interface for a website."
      },
      "fqn": "@winglang/sdk.cloud.IWebsite",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/website.ts",
        "line": 156
      },
      "name": "IWebsite",
      "namespace": "cloud",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The website URL."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/website.ts",
            "line": 160
          },
          "name": "url",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/cloud/website:IWebsite"
    },
    "@winglang/sdk.cloud.IWebsiteClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Inflight methods and members of `cloud.Website`."
      },
      "fqn": "@winglang/sdk.cloud.IWebsiteClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/website.ts",
        "line": 141
      },
      "name": "IWebsiteClient",
      "namespace": "cloud",
      "symbolId": "src/cloud/website:IWebsiteClient"
    },
    "@winglang/sdk.cloud.ObjectMetadata": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Metadata of a bucket object."
      },
      "fqn": "@winglang/sdk.cloud.ObjectMetadata",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/bucket.ts",
        "line": 235
      },
      "name": "ObjectMetadata",
      "namespace": "cloud",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The time the object was last modified."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/bucket.ts",
            "line": 240
          },
          "name": "lastModified",
          "type": {
            "fqn": "@winglang/sdk.std.Datetime"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The size of the object in bytes."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/bucket.ts",
            "line": 237
          },
          "name": "size",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The content type of the object, if it is known."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/bucket.ts",
            "line": 243
          },
          "name": "contentType",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/cloud/bucket:ObjectMetadata"
    },
    "@winglang/sdk.cloud.OnDeploy": {
      "assembly": "@winglang/sdk",
      "base": "@winglang/sdk.std.Resource",
      "docs": {
        "custom": {
          "abstract": "true",
          "inflight": "`@winglang/sdk.cloud.IOnDeployClient`"
        },
        "stability": "experimental",
        "summary": "Run code every time the app is deployed."
      },
      "fqn": "@winglang/sdk.cloud.OnDeploy",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/cloud/on-deploy.ts",
          "line": 39
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "handler",
            "type": {
              "fqn": "@winglang/sdk.cloud.IOnDeployHandler"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.cloud.OnDeployProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/cloud/on-deploy.ts",
        "line": 35
      },
      "name": "OnDeploy",
      "namespace": "cloud",
      "symbolId": "src/cloud/on-deploy:OnDeploy"
    },
    "@winglang/sdk.cloud.OnDeployProps": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `OnDeploy`."
      },
      "fqn": "@winglang/sdk.cloud.OnDeployProps",
      "interfaces": [
        "@winglang/sdk.cloud.FunctionProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/on-deploy.ts",
        "line": 15
      },
      "name": "OnDeployProps",
      "namespace": "cloud",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- no additional dependencies",
            "stability": "experimental",
            "summary": "Execute this trigger only after these resources have been provisioned."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/on-deploy.ts",
            "line": 20
          },
          "name": "executeAfter",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "constructs.Construct"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no additional dependencies",
            "stability": "experimental",
            "summary": "Adds this trigger as a dependency on other constructs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/on-deploy.ts",
            "line": 26
          },
          "name": "executeBefore",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "constructs.Construct"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "src/cloud/on-deploy:OnDeployProps"
    },
    "@winglang/sdk.cloud.Queue": {
      "assembly": "@winglang/sdk",
      "base": "@winglang/sdk.std.Resource",
      "docs": {
        "custom": {
          "abstract": "true",
          "inflight": "`@winglang/sdk.cloud.IQueueClient`"
        },
        "stability": "experimental",
        "summary": "A queue."
      },
      "fqn": "@winglang/sdk.cloud.Queue",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/cloud/queue.ts",
          "line": 67
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.cloud.QueueProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/cloud/queue.ts",
        "line": 63
      },
      "methods": [
        {
          "docs": {
            "custom": {
              "abstract": "true"
            },
            "stability": "experimental",
            "summary": "Create a function to consume messages from this queue."
          },
          "locationInModule": {
            "filename": "src/cloud/queue.ts",
            "line": 84
          },
          "name": "setConsumer",
          "parameters": [
            {
              "name": "handler",
              "type": {
                "fqn": "@winglang/sdk.cloud.IQueueSetConsumerHandler"
              }
            },
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.cloud.QueueSetConsumerOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.cloud.Function"
            }
          }
        }
      ],
      "name": "Queue",
      "namespace": "cloud",
      "symbolId": "src/cloud/queue:Queue"
    },
    "@winglang/sdk.cloud.QueueProps": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `Queue`."
      },
      "fqn": "@winglang/sdk.cloud.QueueProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/queue.ts",
        "line": 37
      },
      "name": "QueueProps",
      "namespace": "cloud",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- no dead letter queue",
            "stability": "experimental",
            "summary": "A dead-letter queue."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/queue.ts",
            "line": 54
          },
          "name": "dlq",
          "optional": true,
          "type": {
            "fqn": "@winglang/sdk.cloud.DeadLetterQueueProps"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "1h",
            "stability": "experimental",
            "summary": "How long a queue retains a message."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/queue.ts",
            "line": 48
          },
          "name": "retentionPeriod",
          "optional": true,
          "type": {
            "fqn": "@winglang/sdk.std.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "30s",
            "stability": "experimental",
            "summary": "How long a queue's consumers have to process a message."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/queue.ts",
            "line": 42
          },
          "name": "timeout",
          "optional": true,
          "type": {
            "fqn": "@winglang/sdk.std.Duration"
          }
        }
      ],
      "symbolId": "src/cloud/queue:QueueProps"
    },
    "@winglang/sdk.cloud.QueueSetConsumerOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for Queue.setConsumer."
      },
      "fqn": "@winglang/sdk.cloud.QueueSetConsumerOptions",
      "interfaces": [
        "@winglang/sdk.cloud.FunctionProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/queue.ts",
        "line": 97
      },
      "name": "QueueSetConsumerOptions",
      "namespace": "cloud",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "1",
            "stability": "experimental",
            "summary": "The maximum number of messages to send to subscribers at once."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/queue.ts",
            "line": 102
          },
          "name": "batchSize",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "src/cloud/queue:QueueSetConsumerOptions"
    },
    "@winglang/sdk.cloud.Schedule": {
      "assembly": "@winglang/sdk",
      "base": "@winglang/sdk.std.Resource",
      "docs": {
        "custom": {
          "abstract": "true",
          "inflight": "`@winglang/sdk.cloud.IScheduleClient`"
        },
        "stability": "experimental",
        "summary": "A schedule."
      },
      "fqn": "@winglang/sdk.cloud.Schedule",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/cloud/schedule.ts",
          "line": 52
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.cloud.ScheduleProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/cloud/schedule.ts",
        "line": 48
      },
      "methods": [
        {
          "docs": {
            "custom": {
              "abstract": "true"
            },
            "stability": "experimental",
            "summary": "Create a function that runs when receiving the scheduled event."
          },
          "locationInModule": {
            "filename": "src/cloud/schedule.ts",
            "line": 93
          },
          "name": "onTick",
          "parameters": [
            {
              "name": "inflight",
              "type": {
                "fqn": "@winglang/sdk.cloud.IScheduleOnTickHandler"
              }
            },
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.cloud.ScheduleOnTickOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.cloud.Function"
            }
          }
        }
      ],
      "name": "Schedule",
      "namespace": "cloud",
      "symbolId": "src/cloud/schedule:Schedule"
    },
    "@winglang/sdk.cloud.ScheduleOnTickOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for Schedule.onTick."
      },
      "fqn": "@winglang/sdk.cloud.ScheduleOnTickOptions",
      "interfaces": [
        "@winglang/sdk.cloud.FunctionProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/schedule.ts",
        "line": 106
      },
      "name": "ScheduleOnTickOptions",
      "namespace": "cloud",
      "symbolId": "src/cloud/schedule:ScheduleOnTickOptions"
    },
    "@winglang/sdk.cloud.ScheduleProps": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `Schedule`."
      },
      "fqn": "@winglang/sdk.cloud.ScheduleProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/schedule.ts",
        "line": 17
      },
      "name": "ScheduleProps",
      "namespace": "cloud",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "undefined",
            "example": "\"* * * * *\"",
            "remarks": "Timezone is UTC.\n[minute] [hour] [day of month] [month] [day of week]\n'*' means all possible values.\n'-' means a range of values.\n',' means a list of values.\n[minute] allows 0-59.\n[hour] allows 0-23.\n[day of month] allows 1-31.\n[month] allows 1-12 or JAN-DEC.\n[day of week] allows 0-6 or SUN-SAT.",
            "stability": "experimental",
            "summary": "Trigger events according to a cron schedule using the UNIX cron format."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/schedule.ts",
            "line": 39
          },
          "name": "cron",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "undefined",
            "example": "1m",
            "stability": "experimental",
            "summary": "Trigger events at a periodic rate."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/schedule.ts",
            "line": 23
          },
          "name": "rate",
          "optional": true,
          "type": {
            "fqn": "@winglang/sdk.std.Duration"
          }
        }
      ],
      "symbolId": "src/cloud/schedule:ScheduleProps"
    },
    "@winglang/sdk.cloud.Secret": {
      "assembly": "@winglang/sdk",
      "base": "@winglang/sdk.std.Resource",
      "docs": {
        "custom": {
          "abstract": "true",
          "inflight": "`@winglang/sdk.cloud.ISecretClient`"
        },
        "stability": "experimental",
        "summary": "A cloud secret."
      },
      "fqn": "@winglang/sdk.cloud.Secret",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/cloud/secret.ts",
          "line": 42
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.cloud.SecretProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/cloud/secret.ts",
        "line": 33
      },
      "name": "Secret",
      "namespace": "cloud",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Get secret name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/secret.ts",
            "line": 56
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/cloud/secret:Secret"
    },
    "@winglang/sdk.cloud.SecretProps": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `Secret`."
      },
      "fqn": "@winglang/sdk.cloud.SecretProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/secret.ts",
        "line": 14
      },
      "name": "SecretProps",
      "namespace": "cloud",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- a new secret is provisioned with a generated name",
            "remarks": "If no name is provided then a new secret is provisioned in the target.\nIf a name is provided then the resource will reference an existing\nsecret in the target.",
            "stability": "experimental",
            "summary": "The secret's name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/secret.ts",
            "line": 24
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/cloud/secret:SecretProps"
    },
    "@winglang/sdk.cloud.Service": {
      "assembly": "@winglang/sdk",
      "base": "@winglang/sdk.std.Resource",
      "docs": {
        "custom": {
          "abstract": "true",
          "inflight": "`@winglang/sdk.cloud.IServiceClient`"
        },
        "stability": "experimental",
        "summary": "A long-running service."
      },
      "fqn": "@winglang/sdk.cloud.Service",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/cloud/service.ts",
          "line": 57
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "handler",
            "type": {
              "fqn": "@winglang/sdk.cloud.IServiceHandler"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.cloud.ServiceProps"
            }
          }
        ]
      },
      "interfaces": [
        "@winglang/sdk.std.IInflightHost"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "src/cloud/service.ts",
        "line": 41
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add an environment variable to the function."
          },
          "locationInModule": {
            "filename": "src/cloud/service.ts",
            "line": 130
          },
          "name": "addEnvironment",
          "overrides": "@winglang/sdk.std.IInflightHost",
          "parameters": [
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ]
        }
      ],
      "name": "Service",
      "namespace": "cloud",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The path where the entrypoint of the service source code will be eventually written to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/service.ts",
            "line": 48
          },
          "name": "entrypoint",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the set of environment variables for this function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/service.ts",
            "line": 142
          },
          "name": "env",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Reference to the service's handler - an inflight closure."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/service.ts",
            "line": 53
          },
          "name": "handler",
          "protected": true,
          "type": {
            "fqn": "@winglang/sdk.cloud.IServiceHandler"
          }
        }
      ],
      "symbolId": "src/cloud/service:Service"
    },
    "@winglang/sdk.cloud.ServiceOnStartOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for Service.onStart."
      },
      "fqn": "@winglang/sdk.cloud.ServiceOnStartOptions",
      "interfaces": [
        "@winglang/sdk.cloud.FunctionProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/service.ts",
        "line": 150
      },
      "name": "ServiceOnStartOptions",
      "namespace": "cloud",
      "symbolId": "src/cloud/service:ServiceOnStartOptions"
    },
    "@winglang/sdk.cloud.ServiceProps": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `Service`."
      },
      "fqn": "@winglang/sdk.cloud.ServiceProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/service.ts",
        "line": 19
      },
      "name": "ServiceProps",
      "namespace": "cloud",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "If `false`, the service will need to be started\nmanually by calling the inflight `start()` method.",
            "stability": "experimental",
            "summary": "Whether the service should start automatically."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/service.ts",
            "line": 32
          },
          "name": "autoStart",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No environment variables.",
            "stability": "experimental",
            "summary": "Environment variables to pass to the function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/service.ts",
            "line": 24
          },
          "name": "env",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        }
      ],
      "symbolId": "src/cloud/service:ServiceProps"
    },
    "@winglang/sdk.cloud.Topic": {
      "assembly": "@winglang/sdk",
      "base": "@winglang/sdk.std.Resource",
      "docs": {
        "custom": {
          "abstract": "true",
          "inflight": "`@winglang/sdk.cloud.ITopicClient`"
        },
        "stability": "experimental",
        "summary": "A topic."
      },
      "fqn": "@winglang/sdk.cloud.Topic",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/cloud/topic.ts",
          "line": 26
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.cloud.TopicProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/cloud/topic.ts",
        "line": 22
      },
      "methods": [
        {
          "docs": {
            "custom": {
              "abstract": "true"
            },
            "stability": "experimental",
            "summary": "Run an inflight whenever an message is published to the topic."
          },
          "locationInModule": {
            "filename": "src/cloud/topic.ts",
            "line": 43
          },
          "name": "onMessage",
          "parameters": [
            {
              "name": "inflight",
              "type": {
                "fqn": "@winglang/sdk.cloud.ITopicOnMessageHandler"
              }
            },
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.cloud.TopicOnMessageOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.cloud.Function"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "abstract": "true"
            },
            "stability": "experimental",
            "summary": "Subscribing queue to the topic."
          },
          "locationInModule": {
            "filename": "src/cloud/topic.ts",
            "line": 56
          },
          "name": "subscribeQueue",
          "parameters": [
            {
              "name": "queue",
              "type": {
                "fqn": "@winglang/sdk.cloud.Queue"
              }
            },
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.cloud.TopicSubscribeQueueOptions"
              }
            }
          ]
        }
      ],
      "name": "Topic",
      "namespace": "cloud",
      "symbolId": "src/cloud/topic:Topic"
    },
    "@winglang/sdk.cloud.TopicOnMessageOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `Topic.onMessage`."
      },
      "fqn": "@winglang/sdk.cloud.TopicOnMessageOptions",
      "interfaces": [
        "@winglang/sdk.cloud.FunctionProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/topic.ts",
        "line": 69
      },
      "name": "TopicOnMessageOptions",
      "namespace": "cloud",
      "symbolId": "src/cloud/topic:TopicOnMessageOptions"
    },
    "@winglang/sdk.cloud.TopicProps": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `Topic`."
      },
      "fqn": "@winglang/sdk.cloud.TopicProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/topic.ts",
        "line": 14
      },
      "name": "TopicProps",
      "namespace": "cloud",
      "symbolId": "src/cloud/topic:TopicProps"
    },
    "@winglang/sdk.cloud.TopicSubscribeQueueOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `Topic.subscribeQueue`."
      },
      "fqn": "@winglang/sdk.cloud.TopicSubscribeQueueOptions",
      "interfaces": [
        "@winglang/sdk.cloud.QueueProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/topic.ts",
        "line": 73
      },
      "name": "TopicSubscribeQueueOptions",
      "namespace": "cloud",
      "symbolId": "src/cloud/topic:TopicSubscribeQueueOptions"
    },
    "@winglang/sdk.cloud.Website": {
      "assembly": "@winglang/sdk",
      "base": "@winglang/sdk.std.Resource",
      "docs": {
        "custom": {
          "abstract": "true",
          "inflight": "`@winglang/sdk.cloud.IWebsiteClient`"
        },
        "stability": "experimental",
        "summary": "A cloud static website."
      },
      "fqn": "@winglang/sdk.cloud.Website",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/cloud/website.ts",
          "line": 65
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@winglang/sdk.cloud.WebsiteProps"
            }
          }
        ]
      },
      "interfaces": [
        "@winglang/sdk.cloud.IWebsite"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "src/cloud/website.ts",
        "line": 55
      },
      "methods": [
        {
          "docs": {
            "custom": {
              "abstract": "true"
            },
            "remarks": "If the path conflicts with file path from the website's static assets, an error will be thrown.",
            "stability": "experimental",
            "summary": "Add a file to the website during deployment."
          },
          "locationInModule": {
            "filename": "src/cloud/website.ts",
            "line": 130
          },
          "name": "addFile",
          "parameters": [
            {
              "docs": {
                "summary": "the file path it will be uploaded as."
              },
              "name": "path",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "the data to write to the file."
              },
              "name": "data",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "configure the file's options."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.cloud.AddFileOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "remarks": "If the path conflicts with file path from the website's static assets, an error will be thrown.",
            "stability": "experimental",
            "summary": "Add a JSON file with custom values during the website's deployment."
          },
          "locationInModule": {
            "filename": "src/cloud/website.ts",
            "line": 111
          },
          "name": "addJson",
          "parameters": [
            {
              "docs": {
                "summary": "the file path it will be uploaded as."
              },
              "name": "path",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "the data to write to the file."
              },
              "name": "data",
              "type": {
                "fqn": "@winglang/sdk.std.Json"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "Website",
      "namespace": "cloud",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Absolute local path to the website's static files."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/website.ts",
            "line": 85
          },
          "name": "path",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The website's url."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/website.ts",
            "line": 92
          },
          "name": "url",
          "overrides": "@winglang/sdk.cloud.IWebsite",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/cloud/website:Website"
    },
    "@winglang/sdk.cloud.WebsiteDomainOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `Website`."
      },
      "fqn": "@winglang/sdk.cloud.WebsiteDomainOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/website.ts",
        "line": 41
      },
      "name": "WebsiteDomainOptions",
      "namespace": "cloud",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- undefined",
            "stability": "experimental",
            "summary": "The website's custom domain object."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/website.ts",
            "line": 46
          },
          "name": "domain",
          "optional": true,
          "type": {
            "fqn": "@winglang/sdk.cloud.Domain"
          }
        }
      ],
      "symbolId": "src/cloud/website:WebsiteDomainOptions"
    },
    "@winglang/sdk.cloud.WebsiteOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Basic options for `Website`."
      },
      "fqn": "@winglang/sdk.cloud.WebsiteOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/website.ts",
        "line": 23
      },
      "name": "WebsiteOptions",
      "namespace": "cloud",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "example": "\"./dist\"",
            "stability": "experimental",
            "summary": "Local path to the website's static files, relative to the Wing source file or absolute."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/website.ts",
            "line": 28
          },
          "name": "path",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- undefined",
            "example": "\"404.html\"",
            "stability": "experimental",
            "summary": "Name of the error document for the website."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cloud/website.ts",
            "line": 35
          },
          "name": "errorDocument",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/cloud/website:WebsiteOptions"
    },
    "@winglang/sdk.cloud.WebsiteProps": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `Website`."
      },
      "fqn": "@winglang/sdk.cloud.WebsiteProps",
      "interfaces": [
        "@winglang/sdk.cloud.WebsiteOptions",
        "@winglang/sdk.cloud.WebsiteDomainOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cloud/website.ts",
        "line": 18
      },
      "name": "WebsiteProps",
      "namespace": "cloud",
      "symbolId": "src/cloud/website:WebsiteProps"
    },
    "@winglang/sdk.core.AddConnectionProps": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Props for `Connections.add`."
      },
      "fqn": "@winglang/sdk.core.AddConnectionProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/core/connections.ts",
        "line": 82
      },
      "name": "AddConnectionProps",
      "namespace": "core",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "A name for the connection."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/connections.ts",
            "line": 108
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The source of the connection."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/connections.ts",
            "line": 86
          },
          "name": "source",
          "type": {
            "fqn": "constructs.IConstruct"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The target of the connection."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/connections.ts",
            "line": 97
          },
          "name": "target",
          "type": {
            "fqn": "constructs.IConstruct"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no operation",
            "stability": "experimental",
            "summary": "An operation that the source object supports."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/connections.ts",
            "line": 92
          },
          "name": "sourceOp",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no operation",
            "stability": "experimental",
            "summary": "An operation that the target object supports."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/connections.ts",
            "line": 103
          },
          "name": "targetOp",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/core/connections:AddConnectionProps"
    },
    "@winglang/sdk.core.App": {
      "abstract": true,
      "assembly": "@winglang/sdk",
      "base": "constructs.Construct",
      "docs": {
        "stability": "experimental",
        "summary": "A Wing application."
      },
      "fqn": "@winglang/sdk.core.App",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/core/app.ts",
          "line": 160
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@winglang/sdk.core.AppProps"
            }
          }
        ]
      },
      "interfaces": [
        "@winglang/sdk.std.IApp"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "src/core/app.ts",
        "line": 94
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the root app."
          },
          "locationInModule": {
            "filename": "src/core/app.ts",
            "line": 98
          },
          "name": "of",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.core.App"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "The newly generated ID is\nguaranteed to be unique within the given scope.\nIt will have the form '{prefix}{n}', where '{prefix}' is the given prefix and '{n}' is an\nascending sequence of integers starting from '0'.",
            "stability": "experimental",
            "summary": "Generate a unique ID for the given scope and prefix."
          },
          "locationInModule": {
            "filename": "src/core/app.ts",
            "line": 252
          },
          "name": "makeId",
          "overrides": "@winglang/sdk.std.IApp",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.IConstruct"
              }
            },
            {
              "name": "prefix",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "throws": "if the FQN is not supported"
            },
            "returns": "the new instance",
            "stability": "experimental",
            "summary": "Creates a new object of the given FQN."
          },
          "locationInModule": {
            "filename": "src/core/app.ts",
            "line": 212
          },
          "name": "new",
          "parameters": [
            {
              "docs": {
                "summary": "the fqn of the class to instantiate."
              },
              "name": "fqn",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "the constructor of the class to instantiate (undefined for abstract classes)."
              },
              "name": "ctor",
              "type": {
                "primitive": "any"
              }
            },
            {
              "docs": {
                "summary": "the scope of the resource."
              },
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "docs": {
                "summary": "the id of the resource."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "the arguments to pass to the resource."
              },
              "name": "args",
              "type": {
                "primitive": "any"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates a new object of the given abstract class FQN."
          },
          "locationInModule": {
            "filename": "src/core/app.ts",
            "line": 232
          },
          "name": "newAbstract",
          "parameters": [
            {
              "name": "fqn",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "args",
              "type": {
                "primitive": "any"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "variadic": true
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Synthesize the app into an artifact."
          },
          "locationInModule": {
            "filename": "src/core/app.ts",
            "line": 200
          },
          "name": "synth",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "returns": "The dependency injected specific target type for the given FQN, or undefined if not found.",
            "stability": "experimental",
            "summary": "Can be overridden by derived classes to inject dependencies."
          },
          "locationInModule": {
            "filename": "src/core/app.ts",
            "line": 267
          },
          "name": "typeForFqn",
          "parameters": [
            {
              "docs": {
                "summary": "The fully qualified name of the class we want the type for (jsii)."
              },
              "name": "fqn",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "App",
      "namespace": "core",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Wing source files directory absolute path."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/app.ts",
            "line": 119
          },
          "name": "entrypointDir",
          "overrides": "@winglang/sdk.std.IApp",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Whether or not this app is being synthesized into a test environment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/app.ts",
            "line": 134
          },
          "name": "isTestEnvironment",
          "overrides": "@winglang/sdk.std.IApp",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The output directory."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/app.ts",
            "line": 129
          },
          "name": "outdir",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The parameter registrar for the app, can be used to find and register parameter values that were provided to the wing application."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/app.ts",
            "line": 190
          },
          "name": "parameters",
          "overrides": "@winglang/sdk.std.IApp",
          "type": {
            "fqn": "@winglang/sdk.platform.ParameterRegistrar"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The \".wing\" directory, which is where the compiler emits its output. We are taking an implicit assumption here that it is always set to be `$outdir/.wing` which is currently hard coded into the `cli/compile.ts` file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/app.ts",
            "line": 182
          },
          "name": "workdir",
          "overrides": "@winglang/sdk.std.IApp",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/core/app:App"
    },
    "@winglang/sdk.core.AppProps": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Props for all `App` classes."
      },
      "fqn": "@winglang/sdk.core.AppProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/core/app.ts",
        "line": 12
      },
      "name": "AppProps",
      "namespace": "core",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The absolute directory location for the wing entry point file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/app.ts",
            "line": 44
          },
          "name": "entrypointDir",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Whether or not this app is being synthesized into a test environment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/app.ts",
            "line": 39
          },
          "name": "isTestEnvironment",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"app\"",
            "stability": "experimental",
            "summary": "The name of the app."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/app.ts",
            "line": 23
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- []",
            "stability": "experimental",
            "summary": "Hooks for overriding newInstance calls."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/app.ts",
            "line": 62
          },
          "name": "newInstanceOverrides",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- current working directory",
            "stability": "experimental",
            "summary": "Directory where artifacts are synthesized to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/app.ts",
            "line": 17
          },
          "name": "outdir",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- undefined",
            "stability": "experimental",
            "summary": "ParameterRegistrar of composed platforms."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/app.ts",
            "line": 68
          },
          "name": "platformParameterRegistrar",
          "optional": true,
          "type": {
            "fqn": "@winglang/sdk.platform.ParameterRegistrar"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no root construct",
            "remarks": "If provided, then it will be instantiated on the user's behalf.\nWhen the app is synthesized with `isTestEnvironment` set to `true`, then\none instance of the root construct will be created per test; otherwise,\nit will be created exactly once.",
            "stability": "experimental",
            "summary": "The root construct class that should be instantiated with a scope and id."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/app.ts",
            "line": 33
          },
          "name": "rootConstruct",
          "optional": true,
          "type": {
            "primitive": "any"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Default",
            "stability": "experimental",
            "summary": "The App root id."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/app.ts",
            "line": 50
          },
          "name": "rootId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no hooks",
            "stability": "experimental",
            "summary": "Hooks to be called at various stages of the synthesis process."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/app.ts",
            "line": 56
          },
          "name": "synthHooks",
          "optional": true,
          "type": {
            "fqn": "@winglang/sdk.core.SynthHooks"
          }
        }
      ],
      "symbolId": "src/core/app:AppProps"
    },
    "@winglang/sdk.core.Connection": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "A connection to another construct."
      },
      "fqn": "@winglang/sdk.core.Connection",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/core/connections.ts",
        "line": 114
      },
      "name": "Connection",
      "namespace": "core",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "A name for the connection."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/connections.ts",
            "line": 140
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The source of the connection."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/connections.ts",
            "line": 118
          },
          "name": "source",
          "type": {
            "fqn": "constructs.IConstruct"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The target of the connection."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/connections.ts",
            "line": 129
          },
          "name": "target",
          "type": {
            "fqn": "constructs.IConstruct"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no operation",
            "stability": "experimental",
            "summary": "An operation that the source object supports."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/connections.ts",
            "line": 124
          },
          "name": "sourceOp",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no operation",
            "stability": "experimental",
            "summary": "An operation that the target object supports."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/connections.ts",
            "line": 135
          },
          "name": "targetOp",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/core/connections:Connection"
    },
    "@winglang/sdk.core.Connections": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Connections are a way to track relationships between constructs."
      },
      "fqn": "@winglang/sdk.core.Connections",
      "kind": "class",
      "locationInModule": {
        "filename": "src/core/connections.ts",
        "line": 12
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return the matching Connections of the given construct tree."
          },
          "locationInModule": {
            "filename": "src/core/connections.ts",
            "line": 16
          },
          "name": "of",
          "parameters": [
            {
              "name": "construct",
              "type": {
                "fqn": "constructs.IConstruct"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.core.Connections"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "A connection is a piece of\nmetadata describing how one construct is related to another construct.",
            "stability": "experimental",
            "summary": "Adds a connection between two constructs."
          },
          "locationInModule": {
            "filename": "src/core/connections.ts",
            "line": 34
          },
          "name": "add",
          "parameters": [
            {
              "name": "props",
              "type": {
                "fqn": "@winglang/sdk.core.AddConnectionProps"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Synthesize `connections.json` to the given directory."
          },
          "locationInModule": {
            "filename": "src/core/connections.ts",
            "line": 57
          },
          "name": "synth",
          "parameters": [
            {
              "name": "outdir",
              "type": {
                "primitive": "string"
              }
            }
          ]
        }
      ],
      "name": "Connections",
      "namespace": "core",
      "symbolId": "src/core/connections:Connections"
    },
    "@winglang/sdk.core.ConstructInfo": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Source information on a construct (class fqn and version)."
      },
      "fqn": "@winglang/sdk.core.ConstructInfo",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/core/tree.ts",
        "line": 165
      },
      "name": "ConstructInfo",
      "namespace": "core",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Fully qualified class name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/tree.ts",
            "line": 169
          },
          "name": "fqn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Version of the module."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/tree.ts",
            "line": 174
          },
          "name": "version",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/core/tree:ConstructInfo"
    },
    "@winglang/sdk.core.ConstructTree": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "The construct tree."
      },
      "fqn": "@winglang/sdk.core.ConstructTree",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/core/tree.ts",
        "line": 145
      },
      "name": "ConstructTree",
      "namespace": "core",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The root node."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/tree.ts",
            "line": 154
          },
          "name": "tree",
          "type": {
            "fqn": "@winglang/sdk.core.ConstructTreeNode"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The construct tree version."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/tree.ts",
            "line": 149
          },
          "name": "version",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/core/tree:ConstructTree"
    },
    "@winglang/sdk.core.ConstructTreeNode": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "A node in the construct tree."
      },
      "fqn": "@winglang/sdk.core.ConstructTreeNode",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/core/tree.ts",
        "line": 14
      },
      "name": "ConstructTreeNode",
      "namespace": "core",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "Is part of the `path`.",
            "stability": "experimental",
            "summary": "The ID of the node."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/tree.ts",
            "line": 18
          },
          "name": "id",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The path of the node."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/tree.ts",
            "line": 23
          },
          "name": "path",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The node attributes."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/tree.ts",
            "line": 33
          },
          "name": "attributes",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The child nodes."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/tree.ts",
            "line": 28
          },
          "name": "children",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@winglang/sdk.core.ConstructTreeNode"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Information on the construct class that led to this node, if available."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/tree.ts",
            "line": 38
          },
          "name": "constructInfo",
          "optional": true,
          "type": {
            "fqn": "@winglang/sdk.core.ConstructInfo"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Information on how to display this node in the UI."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/tree.ts",
            "line": 43
          },
          "name": "display",
          "optional": true,
          "type": {
            "fqn": "@winglang/sdk.core.DisplayInfo"
          }
        }
      ],
      "symbolId": "src/core/tree:ConstructTreeNode"
    },
    "@winglang/sdk.core.DependencyGraph": {
      "assembly": "@winglang/sdk",
      "docs": {
        "remarks": "This graph includes the dependency relationships between all nodes in the\nnode (construct) sub-tree who's root is this Node.\n\nNote that this means that lonely nodes (no dependencies and no dependants) are also included in this graph as\nchildless children of the root node of the graph.\n\nThe graph does not include cross-scope dependencies. That is, if a child on the current scope depends on a node\nfrom a different scope, that relationship is not represented in this graph.",
        "stability": "experimental",
        "summary": "Represents the dependency graph for a given Node."
      },
      "fqn": "@winglang/sdk.core.DependencyGraph",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/core/dependency.ts",
          "line": 21
        },
        "parameters": [
          {
            "name": "node",
            "type": {
              "fqn": "constructs.Node"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/core/dependency.ts",
        "line": 18
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns a topologically sorted array of the constructs in the sub-graph."
          },
          "locationInModule": {
            "filename": "src/core/dependency.ts",
            "line": 84
          },
          "name": "topology",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "constructs.IConstruct"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "DependencyGraph",
      "namespace": "core",
      "properties": [
        {
          "docs": {
            "remarks": "Note that this vertex will always have `null` as its `.value` since it is an artifical root\nthat binds all the connected spaces of the graph.",
            "stability": "experimental",
            "summary": "Returns the root of the graph."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/dependency.ts",
            "line": 77
          },
          "name": "root",
          "type": {
            "fqn": "@winglang/sdk.core.DependencyVertex"
          }
        }
      ],
      "symbolId": "src/core/dependency:DependencyGraph"
    },
    "@winglang/sdk.core.DependencyVertex": {
      "assembly": "@winglang/sdk",
      "docs": {
        "remarks": "The value of each vertex is an `IConstruct` that is accessible via the `.value` getter.",
        "stability": "experimental",
        "summary": "Represents a vertex in the graph."
      },
      "fqn": "@winglang/sdk.core.DependencyVertex",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/core/dependency.ts",
          "line": 101
        },
        "parameters": [
          {
            "name": "value",
            "optional": true,
            "type": {
              "fqn": "constructs.IConstruct"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/core/dependency.ts",
        "line": 94
      },
      "methods": [
        {
          "docs": {
            "remarks": "Also updates the parents of `dep`, so that it contains this node as a parent.\n\nThis operation will fail in case it creates a cycle in the graph.",
            "stability": "experimental",
            "summary": "Adds a vertex as a dependency of the current node."
          },
          "locationInModule": {
            "filename": "src/core/dependency.ts",
            "line": 158
          },
          "name": "addChild",
          "parameters": [
            {
              "docs": {
                "summary": "The dependency."
              },
              "name": "dep",
              "type": {
                "fqn": "@winglang/sdk.core.DependencyVertex"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns a topologically sorted array of the constructs in the sub-graph."
          },
          "locationInModule": {
            "filename": "src/core/dependency.ts",
            "line": 131
          },
          "name": "topology",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "constructs.IConstruct"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "DependencyVertex",
      "namespace": "core",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the parents of the vertex (i.e dependants)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/dependency.ts",
            "line": 124
          },
          "name": "inbound",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@winglang/sdk.core.DependencyVertex"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the children of the vertex (i.e dependencies)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/dependency.ts",
            "line": 117
          },
          "name": "outbound",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@winglang/sdk.core.DependencyVertex"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "remarks": "`null` in case this is the root of the graph.",
            "stability": "experimental",
            "summary": "Returns the IConstruct this graph vertex represents."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/dependency.ts",
            "line": 110
          },
          "name": "value",
          "optional": true,
          "type": {
            "fqn": "constructs.IConstruct"
          }
        }
      ],
      "symbolId": "src/core/dependency:DependencyVertex"
    },
    "@winglang/sdk.core.DisplayInfo": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Information on how to display a construct in the UI."
      },
      "fqn": "@winglang/sdk.core.DisplayInfo",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/core/tree.ts",
        "line": 49
      },
      "name": "DisplayInfo",
      "namespace": "core",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The color of the resource in the UI."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/tree.ts",
            "line": 83
          },
          "name": "color",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No description",
            "stability": "experimental",
            "summary": "Description of the resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/tree.ts",
            "line": 60
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false (visible)",
            "stability": "experimental",
            "summary": "Whether the resource should be hidden from the UI."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/tree.ts",
            "line": 66
          },
          "name": "hidden",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The icon of the resource in the UI."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/tree.ts",
            "line": 88
          },
          "name": "icon",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no source information",
            "stability": "experimental",
            "summary": "The source file or library where the construct was defined."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/tree.ts",
            "line": 72
          },
          "name": "sourceModule",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- The type and/or identifier of the resource",
            "stability": "experimental",
            "summary": "Title of the resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/tree.ts",
            "line": 54
          },
          "name": "title",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no UI components",
            "stability": "experimental",
            "summary": "UI components to display for this resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/tree.ts",
            "line": 78
          },
          "name": "ui",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "src/core/tree:DisplayInfo"
    },
    "@winglang/sdk.core.ILiftableType": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Represents a type with static methods that may have other things to lift."
      },
      "fqn": "@winglang/sdk.core.ILiftableType",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/core/lifting.ts",
        "line": 363
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "remarks": "The list of requested inflight methods\nneeded by the inflight host are given by `ops`.\n\nThis method is commonly used for adding permissions, environment variables, or\nother capabilities to the inflight host.",
            "stability": "experimental",
            "summary": "A hook called by the Wing compiler once for each inflight host that needs to use this type inflight."
          },
          "locationInModule": {
            "filename": "src/core/lifting.ts",
            "line": 380
          },
          "name": "onLiftType",
          "parameters": [
            {
              "name": "host",
              "type": {
                "fqn": "@winglang/sdk.std.IInflightHost"
              }
            },
            {
              "name": "ops",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ]
        }
      ],
      "name": "ILiftableType",
      "namespace": "core",
      "symbolId": "src/core/lifting:ILiftableType"
    },
    "@winglang/sdk.core.InflightBinding": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "An inflight binding."
      },
      "fqn": "@winglang/sdk.core.InflightBinding",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/core/inflight.ts",
        "line": 24
      },
      "name": "InflightBinding",
      "namespace": "core",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The resource or capturable value."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/inflight.ts",
            "line": 28
          },
          "name": "obj",
          "type": {
            "primitive": "any"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The list of operations used on the resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/inflight.ts",
            "line": 33
          },
          "name": "ops",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "src/core/inflight:InflightBinding"
    },
    "@winglang/sdk.core.InflightClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Utility class with functions about inflight clients."
      },
      "fqn": "@winglang/sdk.core.InflightClient",
      "kind": "class",
      "locationInModule": {
        "filename": "src/core/inflight.ts",
        "line": 39
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns code for creating an inflight client."
          },
          "locationInModule": {
            "filename": "src/core/inflight.ts",
            "line": 43
          },
          "name": "for",
          "parameters": [
            {
              "name": "dirname",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "filename",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "clientClass",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "args",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns code for implementing `_toInflightType()`."
          },
          "locationInModule": {
            "filename": "src/core/inflight.ts",
            "line": 59
          },
          "name": "forType",
          "parameters": [
            {
              "name": "filename",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "clientClass",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        }
      ],
      "name": "InflightClient",
      "namespace": "core",
      "symbolId": "src/core/inflight:InflightClient"
    },
    "@winglang/sdk.core.Lifting": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Lifting utilities."
      },
      "fqn": "@winglang/sdk.core.Lifting",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/core/lifting.ts",
        "line": 386
      },
      "methods": [
        {
          "docs": {
            "remarks": "Use this instead of calling `onLift` since it will also lift all of the\nobject's dependencies, and it will ensure that the onLift methods of\nall objects are all called at most once.",
            "stability": "experimental",
            "summary": "Perform the full lifting process on an object."
          },
          "locationInModule": {
            "filename": "src/core/lifting.ts",
            "line": 394
          },
          "name": "lift",
          "parameters": [
            {
              "name": "obj",
              "type": {
                "fqn": "@winglang/sdk.std.IHostedLiftable"
              }
            },
            {
              "name": "host",
              "type": {
                "fqn": "@winglang/sdk.std.IInflightHost"
              }
            },
            {
              "name": "ops",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "static": true
        }
      ],
      "name": "Lifting",
      "namespace": "core",
      "symbolId": "src/core/lifting:Lifting"
    },
    "@winglang/sdk.core.SynthHooks": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Hooks for the synthesis process."
      },
      "fqn": "@winglang/sdk.core.SynthHooks",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/core/app.ts",
        "line": 74
      },
      "name": "SynthHooks",
      "namespace": "core",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Hooks to be called after synthesizing the app."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/app.ts",
            "line": 83
          },
          "name": "postSynthesize",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Hooks to be called before synthesizing the app."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/app.ts",
            "line": 78
          },
          "name": "preSynthesize",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Hooks to be called for validating the synthesized configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/core/app.ts",
            "line": 88
          },
          "name": "validate",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "src/core/app:SynthHooks"
    },
    "@winglang/sdk.ex.ColumnType": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Table column types."
      },
      "fqn": "@winglang/sdk.ex.ColumnType",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/ex/table.ts",
        "line": 16
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "String type."
          },
          "name": "STRING"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Number type."
          },
          "name": "NUMBER"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Bool type."
          },
          "name": "BOOLEAN"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Date type."
          },
          "name": "DATE"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Json type."
          },
          "name": "JSON"
        }
      ],
      "name": "ColumnType",
      "namespace": "ex",
      "symbolId": "src/ex/table:ColumnType"
    },
    "@winglang/sdk.ex.IRedisClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Inflight interface for `Redis`."
      },
      "fqn": "@winglang/sdk.ex.IRedisClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/ex/redis.ts",
        "line": 42
      },
      "methods": [
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Removes the specified key."
          },
          "locationInModule": {
            "filename": "src/ex/redis.ts",
            "line": 106
          },
          "name": "del",
          "parameters": [
            {
              "docs": {
                "summary": "the key."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Get value at given key."
          },
          "locationInModule": {
            "filename": "src/ex/redis.ts",
            "line": 63
          },
          "name": "get",
          "parameters": [
            {
              "docs": {
                "summary": "the key to get."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Returns the value associated with field in the hash stored at key."
          },
          "locationInModule": {
            "filename": "src/ex/redis.ts",
            "line": 82
          },
          "name": "hget",
          "parameters": [
            {
              "docs": {
                "summary": "the key."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "the field at given key."
              },
              "name": "field",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Sets the specified field to respective value in the hash stored at key."
          },
          "locationInModule": {
            "filename": "src/ex/redis.ts",
            "line": 73
          },
          "name": "hset",
          "parameters": [
            {
              "docs": {
                "summary": "key to set."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "field in key to set."
              },
              "name": "field",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "value to set at field in key."
              },
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Add the specified members to the set stored at key."
          },
          "locationInModule": {
            "filename": "src/ex/redis.ts",
            "line": 90
          },
          "name": "sadd",
          "parameters": [
            {
              "docs": {
                "summary": "the key."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "the value to add to the set at given key."
              },
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Set key value pair."
          },
          "locationInModule": {
            "filename": "src/ex/redis.ts",
            "line": 56
          },
          "name": "set",
          "parameters": [
            {
              "docs": {
                "summary": "the key to set."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "the value to store at given key."
              },
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Returns all the members of the set value stored at key."
          },
          "locationInModule": {
            "filename": "src/ex/redis.ts",
            "line": 98
          },
          "name": "smembers",
          "parameters": [
            {
              "docs": {
                "summary": "the key."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Get url of redis server."
          },
          "locationInModule": {
            "filename": "src/ex/redis.ts",
            "line": 47
          },
          "name": "url",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "IRedisClient",
      "namespace": "ex",
      "symbolId": "src/ex/redis:IRedisClient"
    },
    "@winglang/sdk.ex.ITableClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Inflight interface for `Table`."
      },
      "fqn": "@winglang/sdk.ex.ITableClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/ex/table.ts",
        "line": 122
      },
      "methods": [
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Delete a row from the table, by primary key."
          },
          "locationInModule": {
            "filename": "src/ex/table.ts",
            "line": 149
          },
          "name": "delete",
          "parameters": [
            {
              "docs": {
                "summary": "primary key to delete the row."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true",
              "throws": "if no row with the given key exists."
            },
            "returns": "get the row from table.",
            "stability": "experimental",
            "summary": "Get a row from the table, by primary key."
          },
          "locationInModule": {
            "filename": "src/ex/table.ts",
            "line": 157
          },
          "name": "get",
          "parameters": [
            {
              "docs": {
                "summary": "primary key to search."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.Json"
            }
          }
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Insert a row into the table."
          },
          "locationInModule": {
            "filename": "src/ex/table.ts",
            "line": 129
          },
          "name": "insert",
          "parameters": [
            {
              "docs": {
                "summary": "primary key to insert the row."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "data to be inserted."
              },
              "name": "row",
              "type": {
                "fqn": "@winglang/sdk.std.Json"
              }
            }
          ]
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "returns": "list all row.",
            "stability": "experimental",
            "summary": "List all rows in the table."
          },
          "locationInModule": {
            "filename": "src/ex/table.ts",
            "line": 171
          },
          "name": "list",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "@winglang/sdk.std.Json"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "returns": "get the row from table if it exists, nil otherwise.",
            "stability": "experimental",
            "summary": "Get a row from the table if exists, by primary key."
          },
          "locationInModule": {
            "filename": "src/ex/table.ts",
            "line": 164
          },
          "name": "tryGet",
          "parameters": [
            {
              "docs": {
                "summary": "primary key to search."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.std.Json"
            }
          }
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Update a row in the table."
          },
          "locationInModule": {
            "filename": "src/ex/table.ts",
            "line": 143
          },
          "name": "update",
          "parameters": [
            {
              "docs": {
                "summary": "primary key to update the row."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "data to be updated."
              },
              "name": "row",
              "type": {
                "fqn": "@winglang/sdk.std.Json"
              }
            }
          ]
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Insert a row into the table if it doesn't exist, otherwise update it."
          },
          "locationInModule": {
            "filename": "src/ex/table.ts",
            "line": 136
          },
          "name": "upsert",
          "parameters": [
            {
              "docs": {
                "summary": "primary key to upsert the row."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "data to be upserted."
              },
              "name": "row",
              "type": {
                "fqn": "@winglang/sdk.std.Json"
              }
            }
          ]
        }
      ],
      "name": "ITableClient",
      "namespace": "ex",
      "symbolId": "src/ex/table:ITableClient"
    },
    "@winglang/sdk.ex.Redis": {
      "assembly": "@winglang/sdk",
      "base": "@winglang/sdk.std.Resource",
      "docs": {
        "custom": {
          "abstract": "true",
          "inflight": "`@winglang/sdk.ex.IRedisClient`"
        },
        "stability": "experimental",
        "summary": "A cloud redis db."
      },
      "fqn": "@winglang/sdk.ex.Redis",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/ex/redis.ts",
          "line": 22
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/ex/redis.ts",
        "line": 18
      },
      "name": "Redis",
      "namespace": "ex",
      "symbolId": "src/ex/redis:Redis"
    },
    "@winglang/sdk.ex.RedisClientBase": {
      "abstract": true,
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Base class for `Redis` Client."
      },
      "fqn": "@winglang/sdk.ex.RedisClientBase",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "interfaces": [
        "@winglang/sdk.ex.IRedisClient"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "src/ex/redis.ts",
        "line": 135
      },
      "methods": [
        {
          "async": true,
          "docs": {
            "stability": "experimental",
            "summary": "Removes the specified key."
          },
          "locationInModule": {
            "filename": "src/ex/redis.ts",
            "line": 181
          },
          "name": "del",
          "overrides": "@winglang/sdk.ex.IRedisClient",
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "async": true,
          "docs": {
            "stability": "experimental",
            "summary": "Get value at given key."
          },
          "locationInModule": {
            "filename": "src/ex/redis.ts",
            "line": 147
          },
          "name": "get",
          "overrides": "@winglang/sdk.ex.IRedisClient",
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "async": true,
          "docs": {
            "stability": "experimental",
            "summary": "Returns the value associated with field in the hash stored at key."
          },
          "locationInModule": {
            "filename": "src/ex/redis.ts",
            "line": 163
          },
          "name": "hget",
          "overrides": "@winglang/sdk.ex.IRedisClient",
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "field",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "async": true,
          "docs": {
            "stability": "experimental",
            "summary": "Sets the specified field to respective value in the hash stored at key."
          },
          "locationInModule": {
            "filename": "src/ex/redis.ts",
            "line": 153
          },
          "name": "hset",
          "overrides": "@winglang/sdk.ex.IRedisClient",
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "field",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "stability": "experimental",
            "summary": "Get raw redis client (currently IoRedis)."
          },
          "locationInModule": {
            "filename": "src/ex/redis.ts",
            "line": 139
          },
          "name": "rawClient",
          "protected": true,
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "async": true,
          "docs": {
            "stability": "experimental",
            "summary": "Add the specified members to the set stored at key."
          },
          "locationInModule": {
            "filename": "src/ex/redis.ts",
            "line": 169
          },
          "name": "sadd",
          "overrides": "@winglang/sdk.ex.IRedisClient",
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "async": true,
          "docs": {
            "stability": "experimental",
            "summary": "Set key value pair."
          },
          "locationInModule": {
            "filename": "src/ex/redis.ts",
            "line": 142
          },
          "name": "set",
          "overrides": "@winglang/sdk.ex.IRedisClient",
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "async": true,
          "docs": {
            "stability": "experimental",
            "summary": "Returns all the members of the set value stored at key."
          },
          "locationInModule": {
            "filename": "src/ex/redis.ts",
            "line": 175
          },
          "name": "smembers",
          "overrides": "@winglang/sdk.ex.IRedisClient",
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "stability": "experimental",
            "summary": "Get url of redis server."
          },
          "locationInModule": {
            "filename": "src/ex/redis.ts",
            "line": 140
          },
          "name": "url",
          "overrides": "@winglang/sdk.ex.IRedisClient",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "RedisClientBase",
      "namespace": "ex",
      "symbolId": "src/ex/redis:RedisClientBase"
    },
    "@winglang/sdk.ex.Table": {
      "assembly": "@winglang/sdk",
      "base": "@winglang/sdk.std.Resource",
      "docs": {
        "custom": {
          "abstract": "true",
          "inflight": "`@winglang/sdk.ex.ITableClient`"
        },
        "stability": "experimental",
        "summary": "A NoSQL database table that can be used to store and query data."
      },
      "fqn": "@winglang/sdk.ex.Table",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/ex/table.ts",
          "line": 77
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@winglang/sdk.ex.TableProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/ex/table.ts",
        "line": 61
      },
      "methods": [
        {
          "docs": {
            "custom": {
              "abstract": "true"
            },
            "stability": "experimental",
            "summary": "Add a row to the table that is created when the app is deployed."
          },
          "locationInModule": {
            "filename": "src/ex/table.ts",
            "line": 112
          },
          "name": "addRow",
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "row",
              "type": {
                "fqn": "@winglang/sdk.std.Json"
              }
            }
          ]
        }
      ],
      "name": "Table",
      "namespace": "ex",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Table columns."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/ex/table.ts",
            "line": 75
          },
          "name": "columns",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@winglang/sdk.ex.ColumnType"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Table name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/ex/table.ts",
            "line": 67
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Table primary key name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/ex/table.ts",
            "line": 71
          },
          "name": "primaryKey",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/ex/table:Table"
    },
    "@winglang/sdk.ex.TableProps": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for `Table`."
      },
      "fqn": "@winglang/sdk.ex.TableProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/ex/table.ts",
        "line": 32
      },
      "name": "TableProps",
      "namespace": "ex",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "undefined",
            "stability": "experimental",
            "summary": "The table's columns."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/ex/table.ts",
            "line": 42
          },
          "name": "columns",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@winglang/sdk.ex.ColumnType"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "undefined",
            "stability": "experimental",
            "summary": "The table's initial rows."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/ex/table.ts",
            "line": 53
          },
          "name": "initialRows",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@winglang/sdk.std.Json"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "undefined",
            "stability": "experimental",
            "summary": "The table's name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/ex/table.ts",
            "line": 37
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "undefined",
            "remarks": "No two rows can have the same value for the\nprimary key.",
            "stability": "experimental",
            "summary": "The table's primary key."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/ex/table.ts",
            "line": 48
          },
          "name": "primaryKey",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/ex/table:TableProps"
    },
    "@winglang/sdk.expect.Util": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "inflight": "true"
        },
        "stability": "experimental",
        "summary": "The Util class provides methods for making assertions in tests, such as comparing two strings for equality with rich error messages."
      },
      "fqn": "@winglang/sdk.expect.Util",
      "kind": "class",
      "locationInModule": {
        "filename": "src/expect/expect.ts",
        "line": 10
      },
      "methods": [
        {
          "docs": {
            "custom": {
              "throws": "Will throw an error if the actual value matches the expected regular expression pattern."
            },
            "returns": "void",
            "stability": "experimental",
            "summary": "Checks if a string does not match a regular expression pattern."
          },
          "locationInModule": {
            "filename": "src/expect/expect.ts",
            "line": 90
          },
          "name": "doesNotMatch",
          "parameters": [
            {
              "docs": {
                "summary": "The string to test."
              },
              "name": "actual",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The regular expression pattern to check against."
              },
              "name": "expected",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "static": true
        },
        {
          "docs": {
            "custom": {
              "throws": "Will throw an error if the actual value does not match the expected value."
            },
            "returns": "void",
            "stability": "experimental",
            "summary": "Compares two values for equality."
          },
          "locationInModule": {
            "filename": "src/expect/expect.ts",
            "line": 25
          },
          "name": "equal",
          "parameters": [
            {
              "docs": {
                "summary": "The value to test."
              },
              "name": "actual",
              "type": {
                "primitive": "any"
              }
            },
            {
              "docs": {
                "summary": "The expected value."
              },
              "name": "expected",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "static": true
        },
        {
          "docs": {
            "custom": {
              "throws": "Always throws an error with the provided message."
            },
            "returns": "void",
            "stability": "experimental",
            "summary": "Marks a test as failed."
          },
          "locationInModule": {
            "filename": "src/expect/expect.ts",
            "line": 106
          },
          "name": "fail",
          "parameters": [
            {
              "docs": {
                "summary": "An optional message to include with the failure."
              },
              "name": "message",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ],
          "static": true
        },
        {
          "docs": {
            "custom": {
              "throws": "Will throw an error if the actual value does not match the expected regular expression pattern."
            },
            "returns": "void",
            "stability": "experimental",
            "summary": "Checks if a string matches a regular expression pattern."
          },
          "locationInModule": {
            "filename": "src/expect/expect.ts",
            "line": 73
          },
          "name": "match",
          "parameters": [
            {
              "docs": {
                "summary": "The string to test."
              },
              "name": "actual",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The regular expression pattern to match against."
              },
              "name": "expected",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "static": true
        },
        {
          "docs": {
            "custom": {
              "throws": "Will throw an error if the actual value is not nil."
            },
            "returns": "void",
            "stability": "experimental",
            "summary": "Checks if a value is nil."
          },
          "locationInModule": {
            "filename": "src/expect/expect.ts",
            "line": 46
          },
          "name": "nil",
          "parameters": [
            {
              "docs": {
                "summary": "The value to test."
              },
              "name": "actual",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "static": true
        },
        {
          "docs": {
            "custom": {
              "throws": "Will throw an error if the actual value matches the expected value."
            },
            "returns": "void",
            "stability": "experimental",
            "summary": "Compares two values for inequality."
          },
          "locationInModule": {
            "filename": "src/expect/expect.ts",
            "line": 36
          },
          "name": "notEqual",
          "parameters": [
            {
              "docs": {
                "summary": "The value to test."
              },
              "name": "actual",
              "type": {
                "primitive": "any"
              }
            },
            {
              "docs": {
                "summary": "The expected value."
              },
              "name": "expected",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "static": true
        },
        {
          "docs": {
            "custom": {
              "throws": "Will throw an error if the actual value is nil."
            },
            "returns": "void",
            "stability": "experimental",
            "summary": "Checks if a value is not nil."
          },
          "locationInModule": {
            "filename": "src/expect/expect.ts",
            "line": 59
          },
          "name": "notNil",
          "parameters": [
            {
              "docs": {
                "summary": "The value to test."
              },
              "name": "actual",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "static": true
        },
        {
          "docs": {
            "custom": {
              "throws": "Will throw an error if the condition is falsy."
            },
            "returns": "void",
            "stability": "experimental",
            "summary": "Asserts that a condition is truthy."
          },
          "locationInModule": {
            "filename": "src/expect/expect.ts",
            "line": 117
          },
          "name": "ok",
          "parameters": [
            {
              "docs": {
                "summary": "The condition to test."
              },
              "name": "condition",
              "type": {
                "primitive": "boolean"
              }
            },
            {
              "docs": {
                "summary": "An optional message to include if the condition is falsy."
              },
              "name": "message",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ],
          "static": true
        }
      ],
      "name": "Util",
      "namespace": "expect",
      "symbolId": "src/expect/expect:Util"
    },
    "@winglang/sdk.fs.FileType": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Represents the type of a file system object."
      },
      "fqn": "@winglang/sdk.fs.FileType",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/fs/fs.ts",
        "line": 80
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Represents a regular file."
          },
          "name": "FILE"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Represents a directory."
          },
          "name": "DIRECTORY"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Represents a symbolic link."
          },
          "name": "SYMLINK"
        },
        {
          "docs": {
            "remarks": "This includes sockets, FIFOs (named pipes), block devices, and character devices.",
            "stability": "experimental",
            "summary": "Represents any type of file system object that is not `FILE`, `DIRECTORY` or `SYMLINK`."
          },
          "name": "OTHER"
        }
      ],
      "name": "FileType",
      "namespace": "fs",
      "symbolId": "src/fs/fs:FileType"
    },
    "@winglang/sdk.fs.GlobOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `glob`, based on https://www.npmjs.com/package/glob."
      },
      "fqn": "@winglang/sdk.fs.GlobOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/fs/fs.ts",
        "line": 132
      },
      "name": "GlobOptions",
      "namespace": "fs",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "Set to `false` to always\nreceive relative paths for matched files.",
            "stability": "experimental",
            "summary": "Set to `true` to always receive absolute paths for matched files."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 175
          },
          "name": "absolute",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "process.cwd()",
            "stability": "experimental",
            "summary": "The current working directory in which to search."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 138
          },
          "name": "cwd",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Include `.dot` files in normal matches and globstar matches. Note that an explicit dot in a portion of the pattern will always match dot files."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 146
          },
          "name": "dot",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "This can result in a lot of\nduplicate references in the presence of cyclic links, and make performance quite bad.",
            "stability": "experimental",
            "summary": "Follow symlinked directories when expanding `**` patterns."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 168
          },
          "name": "follow",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[]",
            "remarks": "To ignore all children within a directory,\nas well as the entry itself, append '/**' to the ignore pattern.",
            "stability": "experimental",
            "summary": "An array of glob patterns to exclude from matches."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 161
          },
          "name": "ignore",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no limit",
            "stability": "experimental",
            "summary": "Specify a number to limit the depth of the directory traversal to this many levels below the cwd."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 183
          },
          "name": "maxDepth",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "(Note: to match only directories, put a `/` at the end of\nthe pattern.)",
            "stability": "experimental",
            "summary": "Do not match directories, only files."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 154
          },
          "name": "nodir",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "src/fs/fs:GlobOptions"
    },
    "@winglang/sdk.fs.Metadata": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Metadata of a file system object."
      },
      "fqn": "@winglang/sdk.fs.Metadata",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/fs/fs.ts",
        "line": 114
      },
      "name": "Metadata",
      "namespace": "fs",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The date and time the file was last accessed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 122
          },
          "name": "accessed",
          "type": {
            "fqn": "@winglang/sdk.std.Datetime"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The date and time the file was created."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 126
          },
          "name": "created",
          "type": {
            "fqn": "@winglang/sdk.std.Datetime"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The type of file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 116
          },
          "name": "fileType",
          "type": {
            "fqn": "@winglang/sdk.fs.FileType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The date and time the file was last modified."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 124
          },
          "name": "modified",
          "type": {
            "fqn": "@winglang/sdk.std.Datetime"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The permissions of the file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 120
          },
          "name": "permissions",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The size of the file in bytes."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 118
          },
          "name": "size",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "src/fs/fs:Metadata"
    },
    "@winglang/sdk.fs.MkdirOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Custom settings for creating directory."
      },
      "fqn": "@winglang/sdk.fs.MkdirOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/fs/fs.ts",
        "line": 46
      },
      "name": "MkdirOptions",
      "namespace": "fs",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "\"0777\"",
            "remarks": "The string will be parsed as an octal integer.",
            "stability": "experimental",
            "summary": "A file mode."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 57
          },
          "name": "mode",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "If a folder was created, the path to the first created folder will be returned.",
            "stability": "experimental",
            "summary": "Indicates whether parent folders should be created."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 52
          },
          "name": "recursive",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "src/fs/fs:MkdirOptions"
    },
    "@winglang/sdk.fs.ReadFileOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Custom settings for reading from a file."
      },
      "fqn": "@winglang/sdk.fs.ReadFileOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/fs/fs.ts",
        "line": 14
      },
      "name": "ReadFileOptions",
      "namespace": "fs",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "\"utf-8\"",
            "stability": "experimental",
            "summary": "The character encoding utilized for file reading."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 19
          },
          "name": "encoding",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"r\".",
            "stability": "experimental",
            "summary": "The `flag` can be set to specify the attributes."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 24
          },
          "name": "flag",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/fs/fs:ReadFileOptions"
    },
    "@winglang/sdk.fs.RemoveOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Custom settings for removing files and directories."
      },
      "fqn": "@winglang/sdk.fs.RemoveOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/fs/fs.ts",
        "line": 63
      },
      "name": "RemoveOptions",
      "namespace": "fs",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "When `true`, exceptions will be ignored if `path` does not exist."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 68
          },
          "name": "force",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "In\nrecursive mode, operations are retried on failure.",
            "stability": "experimental",
            "summary": "If `true`, perform a recursive directory removal."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 74
          },
          "name": "recursive",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "src/fs/fs:RemoveOptions"
    },
    "@winglang/sdk.fs.SymlinkType": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Represents the type of the target for creating symbolic links."
      },
      "fqn": "@winglang/sdk.fs.SymlinkType",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/fs/fs.ts",
        "line": 100
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Symbolic link that points to a file."
          },
          "name": "FILE"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Symbolic link that points to a directory."
          },
          "name": "DIRECTORY"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Windows-specific: Symbolic link that points to a directory junction."
          },
          "name": "JUNCTION"
        }
      ],
      "name": "SymlinkType",
      "namespace": "fs",
      "symbolId": "src/fs/fs:SymlinkType"
    },
    "@winglang/sdk.fs.Util": {
      "assembly": "@winglang/sdk",
      "docs": {
        "remarks": "All file paths must be POSIX file paths (/ instead of \\),\nand will be normalized to the target platform if running on Windows.",
        "stability": "experimental",
        "summary": "The fs class is used for interacting with the file system."
      },
      "fqn": "@winglang/sdk.fs.Util",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/fs/fs.ts",
        "line": 191
      },
      "methods": [
        {
          "docs": {
            "remarks": "Starting from leftmost {from} parameter, resolves {to} to an absolute path.\n\nIf {to} isn't already absolute, {from} arguments are prepended in right to left order,\nuntil an absolute path is found. If after using all {from} paths still no absolute path is found,\nthe current working directory is used as well. The resulting path is normalized,\nand trailing slashes are removed unless the path gets resolved to the root directory.",
            "returns": "The resulting path after performing the resolve operation.",
            "stability": "experimental",
            "summary": "The right-most parameter is considered {to}. Other parameters are considered an array of {from}."
          },
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 241
          },
          "name": "absolute",
          "parameters": [
            {
              "docs": {
                "summary": "A sequence of paths or path segments."
              },
              "name": "paths",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true,
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Appends new data to the end of an existing file."
          },
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 433
          },
          "name": "appendFile",
          "parameters": [
            {
              "docs": {
                "summary": "The file path that needs to be appended."
              },
              "name": "filepath",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The text to be appended to the file."
              },
              "name": "data",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "remarks": "And the `flag` can be set to specify the attributes.\nIf a flag is not provided, it defaults to `\"w\"`.",
                "summary": "The `encoding` can be set to specify the character encoding."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.fs.WriteFileOptions"
              }
            }
          ],
          "static": true
        },
        {
          "docs": {
            "returns": "The last portion of a path.",
            "stability": "experimental",
            "summary": "Retrieve the final segment of a given file path."
          },
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 215
          },
          "name": "basename",
          "parameters": [
            {
              "docs": {
                "summary": "The path to evaluate."
              },
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "returns": "The directory name of the path.",
            "stability": "experimental",
            "summary": "Retrieve the name of the directory from a given file path."
          },
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 206
          },
          "name": "dirname",
          "parameters": [
            {
              "docs": {
                "summary": "The path to evaluate."
              },
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "returns": "`true` if the path exists, `false` otherwise.",
            "stability": "experimental",
            "summary": "Check if the path exists."
          },
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 250
          },
          "name": "exists",
          "parameters": [
            {
              "docs": {
                "summary": "The path to evaluate."
              },
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "docs": {
            "returns": "The file extension without the leading dot, or `nil` if:\n- The file name starts with a dot (hidden files).\n- There is no dot in the file name.\n- The dot is the last character in the file name.",
            "stability": "experimental",
            "summary": "Extracts the extension (without the leading dot) from the path, if possible."
          },
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 501
          },
          "name": "extension",
          "parameters": [
            {
              "docs": {
                "summary": "The path to get extension for."
              },
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "Built with the great `glob` package, based on https://www.npmjs.com/package/glob",
            "returns": "List of matching files.",
            "stability": "experimental",
            "summary": "Match files using the patterns the shell uses."
          },
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 532
          },
          "name": "glob",
          "parameters": [
            {
              "docs": {
                "summary": "The pattern to match."
              },
              "name": "pattern",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Glob options."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.fs.GlobOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "returns": "`true` if the path is an existing directory, `false` otherwise.",
            "stability": "experimental",
            "summary": "Checks if the given path is a directory and exists."
          },
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 457
          },
          "name": "isDir",
          "parameters": [
            {
              "docs": {
                "summary": "The path to check."
              },
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "docs": {
            "returns": "The resulting path after joining all the paths.",
            "stability": "experimental",
            "summary": "Join all arguments together and normalize the resulting path."
          },
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 197
          },
          "name": "join",
          "parameters": [
            {
              "docs": {
                "summary": "The array of path need to join."
              },
              "name": "paths",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true,
          "variadic": true
        },
        {
          "docs": {
            "returns": "An md5 hash of the file contents.",
            "stability": "experimental",
            "summary": "Calculate an MD5 content hash of all the files that match a glob pattern."
          },
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 543
          },
          "name": "md5",
          "parameters": [
            {
              "docs": {
                "summary": "The root directory."
              },
              "name": "dir",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The glob pattern to match (defaults to all files and subdirectories)."
              },
              "name": "globPattern",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "returns": "The stats of the path, formatted as a `Metadata` object.",
            "stability": "experimental",
            "summary": "Gets the stats of the given path."
          },
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 470
          },
          "name": "metadata",
          "parameters": [
            {
              "docs": {
                "summary": "The path to get stats for."
              },
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.fs.Metadata"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Create a directory."
          },
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 280
          },
          "name": "mkdir",
          "parameters": [
            {
              "docs": {
                "summary": "The path to the directory you want to create."
              },
              "name": "dirpath",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "opts",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.fs.MkdirOptions"
              }
            }
          ],
          "static": true
        },
        {
          "docs": {
            "remarks": "Generates six random characters to be appended behind a required prefix to create a unique temporary directory.",
            "returns": "The created directory path.",
            "stability": "experimental",
            "summary": "Create a temporary directory."
          },
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 293
          },
          "name": "mkdtemp",
          "parameters": [
            {
              "docs": {
                "summary": "The prefix for the directory to be created, default `wingtemp`."
              },
              "name": "prefix",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "returns": "The contents of the directory.",
            "stability": "experimental",
            "summary": "Read the contents of the directory."
          },
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 259
          },
          "name": "readdir",
          "parameters": [
            {
              "docs": {
                "summary": "The path to evaluate."
              },
              "name": "dirpath",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "returns": "The contents of the `filepath`.",
            "stability": "experimental",
            "summary": "Read the entire contents of a file."
          },
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 308
          },
          "name": "readFile",
          "parameters": [
            {
              "docs": {
                "summary": "The path of the file to be read."
              },
              "name": "filepath",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "remarks": "And the `flag` can be set to specify the attributes.\nIf a flag is not provided, it defaults to `\"r\"`.",
                "summary": "The `encoding` can be set to specify the character encoding."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.fs.ReadFileOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "custom": {
              "throws": "Will throw if the content is not in valid JSON format."
            },
            "returns": "The JSON object contained in the file.",
            "stability": "experimental",
            "summary": "Read the contents of the file and convert it to JSON."
          },
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 337
          },
          "name": "readJson",
          "parameters": [
            {
              "docs": {
                "summary": "The file path of the JSON file."
              },
              "name": "filepath",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.Json"
            }
          },
          "static": true
        },
        {
          "docs": {
            "custom": {
              "throws": "Will throw if the content is not in valid YAML format."
            },
            "returns": "The JSON objects converted from YAML objects in the file.",
            "stability": "experimental",
            "summary": "Convert all YAML objects from a single file into JSON objects."
          },
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 363
          },
          "name": "readYaml",
          "parameters": [
            {
              "docs": {
                "summary": "The file path of the YAML file."
              },
              "name": "filepath",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "@winglang/sdk.std.Json"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "At times we have two absolute paths, and we need to derive the relative path from one to the other.",
            "returns": "The relative path from {from} to {to}.",
            "stability": "experimental",
            "summary": "Solve the relative path from {from} to {to} based on the current working directory."
          },
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 224
          },
          "name": "relative",
          "parameters": [
            {
              "name": "from",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "to",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "Returns `undefined`.",
            "stability": "experimental",
            "summary": "Remove files and directories (modeled on the standard POSIX `rm`utility)."
          },
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 445
          },
          "name": "remove",
          "parameters": [
            {
              "docs": {
                "summary": "The path to the file or directory you want to remove."
              },
              "name": "path",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "opts",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.fs.RemoveOptions"
              }
            }
          ],
          "static": true
        },
        {
          "docs": {
            "remarks": "Expects a permission string like `\"755\"` or `\"644\"`.",
            "stability": "experimental",
            "summary": "Set the permissions of the file, directory, etc."
          },
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 489
          },
          "name": "setPermissions",
          "parameters": [
            {
              "docs": {
                "summary": "The path of the file or directory."
              },
              "name": "path",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The mode to set as a string."
              },
              "name": "permissions",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates a symbolic link."
          },
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 515
          },
          "name": "symlink",
          "parameters": [
            {
              "docs": {
                "summary": "The path to the target file or directory."
              },
              "name": "target",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The path to the symbolic link to be created."
              },
              "name": "path",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "remarks": "It can be `FILE`, `DIRECTORY`, or `JUNCTION` (Windows only).\nDefaults to `FILE` if not specified.",
                "summary": "The type of the target."
              },
              "name": "type",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.fs.SymlinkType"
              }
            }
          ],
          "static": true
        },
        {
          "docs": {
            "returns": "The stats of the path, formatted as a `Metadata` object.",
            "stability": "experimental",
            "summary": "Gets the stats of the given path without following symbolic links."
          },
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 479
          },
          "name": "symlinkMetadata",
          "parameters": [
            {
              "docs": {
                "summary": "The path to get stats for."
              },
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.fs.Metadata"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "otherwise, return `undefined`.",
            "returns": "The contents of the directory if the path exists, `undefined` otherwise.",
            "stability": "experimental",
            "summary": "If the path exists, read the contents of the directory;"
          },
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 268
          },
          "name": "tryReaddir",
          "parameters": [
            {
              "docs": {
                "summary": "The path to evaluate."
              },
              "name": "dirpath",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "otherwise, return `undefined`.",
            "returns": "The contents of the `filepath`, `undefined` otherwise.",
            "stability": "experimental",
            "summary": "If the file exists and can be read successfully, read the entire contents;"
          },
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 320
          },
          "name": "tryReadFile",
          "parameters": [
            {
              "docs": {
                "summary": "The path of the file to be read."
              },
              "name": "filepath",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The `encoding` can be set to specify the character encoding, or the `flag` can be set to specify the attributes."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.fs.ReadFileOptions"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "custom": {
              "throws": "Will throw if the content is not in valid JSON format."
            },
            "returns": "The JSON object contained in the file, `undefined` otherwise.",
            "stability": "experimental",
            "summary": "Retrieve the contents of the file and convert it to JSON if the file exists and can be parsed successfully, otherwise, return `undefined`."
          },
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 349
          },
          "name": "tryReadJson",
          "parameters": [
            {
              "docs": {
                "summary": "The file path of the JSON file."
              },
              "name": "filepath",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.std.Json"
            }
          },
          "static": true
        },
        {
          "docs": {
            "custom": {
              "throws": "Will throw if the content is not in valid YAML format."
            },
            "returns": "The JSON objects converted from YAML objects in the file, `undefined` otherwise.",
            "stability": "experimental",
            "summary": "Convert all YAML objects from a single file into JSON objects if the file exists and can be parsed successfully, `undefined` otherwise."
          },
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 382
          },
          "name": "tryReadYaml",
          "parameters": [
            {
              "docs": {
                "summary": "The file path of the YAML file."
              },
              "name": "filepath",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "@winglang/sdk.std.Json"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Writes data to a file, replacing the file if it already exists."
          },
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 396
          },
          "name": "writeFile",
          "parameters": [
            {
              "docs": {
                "summary": "The file path that needs to be written."
              },
              "name": "filepath",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The data to write."
              },
              "name": "data",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "remarks": "And the `flag` can be set to specify the attributes.\nIf a flag is not provided, it defaults to `\"w\"`.",
                "summary": "The `encoding` can be set to specify the character encoding."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.fs.WriteFileOptions"
              }
            }
          ],
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Writes JSON to a file, replacing the file if it already exists."
          },
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 409
          },
          "name": "writeJson",
          "parameters": [
            {
              "docs": {
                "summary": "The file path that needs to be written."
              },
              "name": "filepath",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The JSON object to be dumped."
              },
              "name": "obj",
              "type": {
                "fqn": "@winglang/sdk.std.Json"
              }
            }
          ],
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Writes multiple YAML objects to a file, replacing the file if it already exists."
          },
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 419
          },
          "name": "writeYaml",
          "parameters": [
            {
              "docs": {
                "summary": "The file path that needs to be written."
              },
              "name": "filepath",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The YANL objects to be dumped."
              },
              "name": "objs",
              "type": {
                "fqn": "@winglang/sdk.std.Json"
              },
              "variadic": true
            }
          ],
          "static": true,
          "variadic": true
        }
      ],
      "name": "Util",
      "namespace": "fs",
      "symbolId": "src/fs/fs:Util"
    },
    "@winglang/sdk.fs.WriteFileOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Custom settings for writing to a file."
      },
      "fqn": "@winglang/sdk.fs.WriteFileOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/fs/fs.ts",
        "line": 30
      },
      "name": "WriteFileOptions",
      "namespace": "fs",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "\"utf-8\"",
            "stability": "experimental",
            "summary": "The character encoding utilized for file writing."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 35
          },
          "name": "encoding",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"w\".",
            "stability": "experimental",
            "summary": "The `flag` can be set to specify the attributes."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/fs/fs.ts",
            "line": 40
          },
          "name": "flag",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/fs/fs:WriteFileOptions"
    },
    "@winglang/sdk.http.FormatUrlOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for serializing a WHATWG URL to a String."
      },
      "fqn": "@winglang/sdk.http.FormatUrlOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/http/http.ts",
        "line": 197
      },
      "name": "FormatUrlOptions",
      "namespace": "http",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Whether the formatted URL should include the username and password."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/http/http.ts",
            "line": 199
          },
          "name": "auth",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Whether the formatted URL should include the fragment identifier."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/http/http.ts",
            "line": 202
          },
          "name": "fragment",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Whether the formatted URL should include the search query."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/http/http.ts",
            "line": 205
          },
          "name": "search",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Whether the formatted URL should represent Unicode characters for the host component."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/http/http.ts",
            "line": 208
          },
          "name": "unicode",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "src/http/http:FormatUrlOptions"
    },
    "@winglang/sdk.http.HttpMethod": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "The request's method."
      },
      "fqn": "@winglang/sdk.http.HttpMethod",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/http/http.ts",
        "line": 65
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "GET."
          },
          "name": "GET"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "PUT."
          },
          "name": "PUT"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "DELETE."
          },
          "name": "DELETE"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "PATCH."
          },
          "name": "PATCH"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "POST."
          },
          "name": "POST"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "OPTIONS."
          },
          "name": "OPTIONS"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "HEAD."
          },
          "name": "HEAD"
        }
      ],
      "name": "HttpMethod",
      "namespace": "http",
      "symbolId": "src/http/http:HttpMethod"
    },
    "@winglang/sdk.http.RequestCache": {
      "assembly": "@winglang/sdk",
      "docs": {
        "remarks": "It controls how a request will interact with the system's HTTP cache.",
        "stability": "experimental",
        "summary": "The cache mode of the request."
      },
      "fqn": "@winglang/sdk.http.RequestCache",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/http/http.ts",
        "line": 8
      },
      "members": [
        {
          "docs": {
            "remarks": "* If there is a match and it is fresh, it will be returned from the cache.\n* If there is a match but it is stale, the runtime environment will make a conditional request to the remote server.\n* If the server indicates that the resource has not changed, it will be returned from the cache.\n* Otherwise the resource will be downloaded from the server and the cache will be updated.\n* If there is no match, the runtime environment will make a normal request, and will update the cache with the downloaded resource.",
            "stability": "experimental",
            "summary": "The runtime environment looks for a matching request in its HTTP cache."
          },
          "name": "DEFAULT"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The runtime environment fetches the resource from the remote server without first looking in the cache, and will not update the cache with the downloaded resource."
          },
          "name": "NO_STORE"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The runtime environment fetches the resource from the remote server without first looking in the cache, but then will update the cache with the downloaded resource."
          },
          "name": "RELOAD"
        },
        {
          "docs": {
            "remarks": "* If there is a match, fresh or stale, the runtime environment will make a conditional request to the remote server.\n* If the server indicates that the resource has not changed, it will be returned from the cache. Otherwise the resource will be downloaded from the server and the cache will be updated.\n* If there is no match, the runtime environment will make a normal request, and will update the cache with the downloaded resource.",
            "stability": "experimental",
            "summary": "The runtime environment looks for a matching request in its HTTP cache."
          },
          "name": "NO_CACHE"
        },
        {
          "docs": {
            "remarks": "* If there is a match, fresh or stale, it will be returned from the cache.\n* If there is no match, the runtime environment will make a normal request, and will update the cache with the downloaded resource.",
            "stability": "experimental",
            "summary": "The runtime environment looks for a matching request in its HTTP cache."
          },
          "name": "FORCE_CACHE"
        }
      ],
      "name": "RequestCache",
      "namespace": "http",
      "symbolId": "src/http/http:RequestCache"
    },
    "@winglang/sdk.http.RequestOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "An object containing any custom settings that you want to apply to the request."
      },
      "fqn": "@winglang/sdk.http.RequestOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/http/http.ts",
        "line": 99
      },
      "name": "RequestOptions",
      "namespace": "http",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "Note that a request using the GET or HEAD method cannot have a body.",
            "stability": "experimental",
            "summary": "Any body that you want to add to your request."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/http/http.ts",
            "line": 113
          },
          "name": "body",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "RequestCache.DEFAULT",
            "stability": "experimental",
            "summary": "The cache mode you want to use for the request."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/http/http.ts",
            "line": 118
          },
          "name": "cache",
          "optional": true,
          "type": {
            "fqn": "@winglang/sdk.http.RequestCache"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Any headers you want to add to your request."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/http/http.ts",
            "line": 108
          },
          "name": "headers",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "GET",
            "stability": "experimental",
            "summary": "The request method, e.g., GET, POST. The default is GET."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/http/http.ts",
            "line": 104
          },
          "name": "method",
          "optional": true,
          "type": {
            "fqn": "@winglang/sdk.http.HttpMethod"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "RequestRedirect.FOLLOW",
            "remarks": "The default is follow.",
            "stability": "experimental",
            "summary": "An enum specifying the redirect mode to use: follow, error or manual."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/http/http.ts",
            "line": 123
          },
          "name": "redirect",
          "optional": true,
          "type": {
            "fqn": "@winglang/sdk.http.RequestRedirect"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "about:client",
            "remarks": "The default is \"about:client\".",
            "stability": "experimental",
            "summary": "A string specifying \"no-referrer\", client, or a URL."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/http/http.ts",
            "line": 128
          },
          "name": "referrer",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/http/http:RequestOptions"
    },
    "@winglang/sdk.http.RequestRedirect": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "The redirect read-only property that contains the mode for how redirects are handled."
      },
      "fqn": "@winglang/sdk.http.RequestRedirect",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/http/http.ts",
        "line": 46
      },
      "members": [
        {
          "docs": {
            "remarks": "The `Location` response header includes the redirect\ntarget.",
            "stability": "experimental",
            "summary": "Do not follow redirects automatically."
          },
          "name": "MANUAL"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Follow all redirects incurred when fetching a resource."
          },
          "name": "FOLLOW"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return a network error when a request is met with a redirect."
          },
          "name": "ERROR"
        }
      ],
      "name": "RequestRedirect",
      "namespace": "http",
      "symbolId": "src/http/http:RequestRedirect"
    },
    "@winglang/sdk.http.Response": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "The response to a HTTP request."
      },
      "fqn": "@winglang/sdk.http.Response",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/http/http.ts",
        "line": 133
      },
      "name": "Response",
      "namespace": "http",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "A string representation of the body contents."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/http/http.ts",
            "line": 153
          },
          "name": "body",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The map of header information associated with the response."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/http/http.ts",
            "line": 149
          },
          "name": "headers",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "A boolean indicating whether the response was successful (status in the range 200 ‚Äì 299) or not."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/http/http.ts",
            "line": 145
          },
          "name": "ok",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "(This will be 200 for a success).",
            "stability": "experimental",
            "summary": "The status code of the response."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/http/http.ts",
            "line": 137
          },
          "name": "status",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The URL of the response."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/http/http.ts",
            "line": 141
          },
          "name": "url",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/http/http:Response"
    },
    "@winglang/sdk.http.Url": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "An URL following WHATWG URL Standard."
      },
      "fqn": "@winglang/sdk.http.Url",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/http/http.ts",
        "line": 159
      },
      "name": "Url",
      "namespace": "http",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The URL's fragment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/http/http.ts",
            "line": 182
          },
          "name": "hash",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The URL's host."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/http/http.ts",
            "line": 167
          },
          "name": "host",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The URL's hostname."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/http/http.ts",
            "line": 170
          },
          "name": "hostname",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The entire URL."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/http/http.ts",
            "line": 161
          },
          "name": "href",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The URL's origin."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/http/http.ts",
            "line": 185
          },
          "name": "origin",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The URL‚Äôs password."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/http/http.ts",
            "line": 191
          },
          "name": "password",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The URL's pathname."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/http/http.ts",
            "line": 176
          },
          "name": "pathname",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The URL's port."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/http/http.ts",
            "line": 173
          },
          "name": "port",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The URL's protocol."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/http/http.ts",
            "line": 164
          },
          "name": "protocol",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The URL's search."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/http/http.ts",
            "line": 179
          },
          "name": "search",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The URL's username."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/http/http.ts",
            "line": 188
          },
          "name": "username",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/http/http:Url"
    },
    "@winglang/sdk.http.Util": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "inflight": "true"
        },
        "stability": "experimental",
        "summary": "The Http class is used for calling different HTTP methods and requesting and sending information online,  as well as testing public accessible resources."
      },
      "fqn": "@winglang/sdk.http.Util",
      "kind": "class",
      "locationInModule": {
        "filename": "src/http/http.ts",
        "line": 226
      },
      "methods": [
        {
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "returns": "the formatted response of the call",
            "stability": "experimental",
            "summary": "Executes a DELETE request to a specified URL and provides a formatted response."
          },
          "locationInModule": {
            "filename": "src/http/http.ts",
            "line": 321
          },
          "name": "delete",
          "parameters": [
            {
              "docs": {
                "summary": "The target URL for the DELETE request."
              },
              "name": "url",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Optional parameters for customizing the DELETE request."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.http.RequestOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.http.Response"
            }
          },
          "static": true
        },
        {
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true",
              "throws": "Only throws if there is a networking error"
            },
            "remarks": "This method allows various HTTP methods based on the provided options.",
            "returns": "the formatted response of the call",
            "stability": "experimental",
            "summary": "Executes a HTTP request to a specified URL and provides a formatted response."
          },
          "locationInModule": {
            "filename": "src/http/http.ts",
            "line": 242
          },
          "name": "fetch",
          "parameters": [
            {
              "docs": {
                "summary": "The target URL for the request."
              },
              "name": "url",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Optional parameters for customizing the HTTP request."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.http.RequestOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.http.Response"
            }
          },
          "static": true
        },
        {
          "docs": {
            "custom": {
              "inflight": "true",
              "throws": "Will throw an error if the input URL has invalid fields."
            },
            "returns": "A formatted URL String.",
            "stability": "experimental",
            "summary": "Serializes an URL Struct to a String."
          },
          "locationInModule": {
            "filename": "src/http/http.ts",
            "line": 366
          },
          "name": "formatUrl",
          "parameters": [
            {
              "docs": {
                "summary": "The URL Struct to be formatted."
              },
              "name": "url",
              "type": {
                "fqn": "@winglang/sdk.http.Url"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.http.FormatUrlOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "returns": "the formatted response of the call",
            "stability": "experimental",
            "summary": "Executes a GET request to a specified URL and provides a formatted response."
          },
          "locationInModule": {
            "filename": "src/http/http.ts",
            "line": 256
          },
          "name": "get",
          "parameters": [
            {
              "docs": {
                "summary": "The target URL for the GET request."
              },
              "name": "url",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Optional parameters for customizing the GET request."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.http.RequestOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.http.Response"
            }
          },
          "static": true
        },
        {
          "docs": {
            "custom": {
              "inflight": "true",
              "throws": "Will throw an error if the input String is not a valid URL."
            },
            "returns": "An URL Struct.",
            "stability": "experimental",
            "summary": "Parses the input URL String using WHATWG URL API and returns an URL Struct."
          },
          "locationInModule": {
            "filename": "src/http/http.ts",
            "line": 338
          },
          "name": "parseUrl",
          "parameters": [
            {
              "docs": {
                "summary": "The URL String to be parsed."
              },
              "name": "urlString",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.http.Url"
            }
          },
          "static": true
        },
        {
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "returns": "the formatted response of the call",
            "stability": "experimental",
            "summary": "Executes a PATCH request to a specified URL and provides a formatted response."
          },
          "locationInModule": {
            "filename": "src/http/http.ts",
            "line": 304
          },
          "name": "patch",
          "parameters": [
            {
              "docs": {
                "summary": "The target URL for the PATCH request."
              },
              "name": "url",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Optional parameters for customizing the PATCH request."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.http.RequestOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.http.Response"
            }
          },
          "static": true
        },
        {
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "returns": "the formatted response of the call",
            "stability": "experimental",
            "summary": "Executes a POST request to a specified URL and provides a formatted response."
          },
          "locationInModule": {
            "filename": "src/http/http.ts",
            "line": 272
          },
          "name": "post",
          "parameters": [
            {
              "docs": {
                "summary": "The target URL for the POST request."
              },
              "name": "url",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Optional parameters for customizing the POST request."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.http.RequestOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.http.Response"
            }
          },
          "static": true
        },
        {
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "returns": "the formatted response of the call",
            "stability": "experimental",
            "summary": "Executes a PUT request to a specified URL and provides a formatted response."
          },
          "locationInModule": {
            "filename": "src/http/http.ts",
            "line": 288
          },
          "name": "put",
          "parameters": [
            {
              "docs": {
                "summary": "The target URL for the PUT request."
              },
              "name": "url",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "ptional parameters for customizing the PUT request."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.http.RequestOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.http.Response"
            }
          },
          "static": true
        }
      ],
      "name": "Util",
      "namespace": "http",
      "symbolId": "src/http/http:Util"
    },
    "@winglang/sdk.math.RoundingOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for rounding a number."
      },
      "fqn": "@winglang/sdk.math.RoundingOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/math/math.ts",
        "line": 6
      },
      "name": "RoundingOptions",
      "namespace": "math",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The number of decimal places to round to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 10
          },
          "name": "decimalPlaces",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "src/math/math:RoundingOptions"
    },
    "@winglang/sdk.math.Util": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Utility class for mathematical operations."
      },
      "fqn": "@winglang/sdk.math.Util",
      "kind": "class",
      "locationInModule": {
        "filename": "src/math/math.ts",
        "line": 16
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the absolute value of a number."
          },
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 61
          },
          "name": "abs",
          "parameters": [
            {
              "docs": {
                "summary": "The input number."
              },
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the inverse cosine (in radians) of a number."
          },
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 315
          },
          "name": "acos",
          "parameters": [
            {
              "docs": {
                "summary": "A number between -1 and 1, inclusive, representing the angle's cosine value."
              },
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "returns": "The inverse cotangent (acot) in radians.",
            "stability": "experimental",
            "summary": "Calculates the inverse cotangent (acot) of a number."
          },
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 402
          },
          "name": "acot",
          "parameters": [
            {
              "docs": {
                "summary": "A number representing the cotangent value."
              },
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "returns": "The inverse cosecant (acsc) in radians.",
            "stability": "experimental",
            "summary": "Calculates the inverse cosecant (acsc) of a number."
          },
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 389
          },
          "name": "acsc",
          "parameters": [
            {
              "docs": {
                "summary": "A number equal or greater than |1|, representing the cosecant value."
              },
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Calculates the mean value of an array of numbers."
          },
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 103
          },
          "name": "arithmeticMean",
          "parameters": [
            {
              "docs": {
                "summary": "- The array of numbers."
              },
              "name": "arr",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "number"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "returns": "The inverse secant (asec) in radians.",
            "stability": "experimental",
            "summary": "Calculates the inverse secant (asec) of a number."
          },
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 376
          },
          "name": "asec",
          "parameters": [
            {
              "docs": {
                "summary": "A number equal or greater than |1|, representing the secant value."
              },
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the inverse sine (in radians) of a number."
          },
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 304
          },
          "name": "asin",
          "parameters": [
            {
              "docs": {
                "summary": "A number between -1 and 1, inclusive, representing the angle's sine value."
              },
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the inverse tangent (in radians) of a number."
          },
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 326
          },
          "name": "atan",
          "parameters": [
            {
              "docs": {
                "summary": "A number."
              },
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the angle in the plane (in radians) between the positive x-axis and the ray from (0, 0) to the point (x, y), for Math.atan2(y, x)."
          },
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 336
          },
          "name": "atan2",
          "parameters": [
            {
              "docs": {
                "summary": "The y coordinate of the point."
              },
              "name": "y",
              "type": {
                "primitive": "number"
              }
            },
            {
              "docs": {
                "summary": "The x coordinate of the point."
              },
              "name": "x",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the smallest integer greater than or equal to a given number."
          },
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 140
          },
          "name": "ceil",
          "parameters": [
            {
              "docs": {
                "summary": "The input number."
              },
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Calculates the number of combinations for choosing r items from a total of n items."
          },
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 210
          },
          "name": "combinations",
          "parameters": [
            {
              "docs": {
                "summary": "- The total number of items."
              },
              "name": "n",
              "type": {
                "primitive": "number"
              }
            },
            {
              "docs": {
                "summary": "- The number of items to be chosen."
              },
              "name": "r",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the cosine of a number in radians."
          },
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 288
          },
          "name": "cos",
          "parameters": [
            {
              "docs": {
                "summary": "A number representing an angle in radians."
              },
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "returns": "The cotangent value of the angle.",
            "stability": "experimental",
            "summary": "Calculates the cotangent of an angle (in radians)."
          },
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 366
          },
          "name": "cot",
          "parameters": [
            {
              "docs": {
                "summary": "The angle in radians."
              },
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "returns": "The cosecant value of the angle.",
            "stability": "experimental",
            "summary": "Calculates the cosecant of an angle (in radians)."
          },
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 356
          },
          "name": "csc",
          "parameters": [
            {
              "docs": {
                "summary": "The angle in radians."
              },
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Convert degrees to radians."
          },
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 232
          },
          "name": "degreesToRadians",
          "parameters": [
            {
              "docs": {
                "summary": "Degree value."
              },
              "name": "degrees",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Calculates the factorial of a given number."
          },
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 198
          },
          "name": "factorial",
          "parameters": [
            {
              "docs": {
                "summary": "- The number to calculate the factorial for."
              },
              "name": "n",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Calculates the nth Fibonacci number."
          },
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 187
          },
          "name": "fibonacci",
          "parameters": [
            {
              "docs": {
                "summary": "- The position of the Fibonacci number to calculate."
              },
              "name": "n",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the largest integer less than or equal to a given number."
          },
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 132
          },
          "name": "floor",
          "parameters": [
            {
              "docs": {
                "summary": "The input number."
              },
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Calculates the geometric mean of an array of numbers."
          },
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 112
          },
          "name": "geometricMean",
          "parameters": [
            {
              "docs": {
                "summary": "- The array of numbers."
              },
              "name": "arr",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "number"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Calculates the harmonic mean of an array of numbers."
          },
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 123
          },
          "name": "harmonicMean",
          "parameters": [
            {
              "docs": {
                "summary": "- The array of numbers."
              },
              "name": "arr",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "number"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "returns": "",
            "stability": "experimental",
            "summary": "Calculate the length of the vector from the origin to the point given by the coordinates."
          },
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 224
          },
          "name": "hypot",
          "parameters": [
            {
              "docs": {
                "summary": "Array of coordinates."
              },
              "name": "coordinates",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "number"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Checks if a number is prime."
          },
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 45
          },
          "name": "isPrime",
          "parameters": [
            {
              "docs": {
                "summary": "The number to check for primality."
              },
              "name": "n",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the natural logarithm (base e) of a number."
          },
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 248
          },
          "name": "log",
          "parameters": [
            {
              "docs": {
                "summary": "The input number."
              },
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the base-10 logarithm of a number."
          },
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 264
          },
          "name": "log10",
          "parameters": [
            {
              "docs": {
                "summary": "The input number."
              },
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the base-2 logarithm of a number."
          },
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 256
          },
          "name": "log2",
          "parameters": [
            {
              "docs": {
                "summary": "The input number."
              },
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the maximum value from an array of numbers."
          },
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 168
          },
          "name": "max",
          "parameters": [
            {
              "docs": {
                "summary": "The array of numbers."
              },
              "name": "arr",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "number"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Calculates the median value of an array of numbers."
          },
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 69
          },
          "name": "median",
          "parameters": [
            {
              "docs": {
                "summary": "- The array of numbers."
              },
              "name": "arr",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "number"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the minimum value from an array of numbers."
          },
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 160
          },
          "name": "min",
          "parameters": [
            {
              "docs": {
                "summary": "The array of numbers."
              },
              "name": "arr",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "number"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Calculates the mode values of an array of numbers."
          },
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 79
          },
          "name": "mode",
          "parameters": [
            {
              "docs": {
                "summary": "- The array of numbers."
              },
              "name": "arr",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "number"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "number"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Convert radians to degrees."
          },
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 240
          },
          "name": "radiansToDegrees",
          "parameters": [
            {
              "docs": {
                "summary": "Radians value."
              },
              "name": "radians",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "returns": "A pseudo-random number between 0 and max.",
            "stability": "experimental",
            "summary": "Generates a pseudo-random number between 0 and max (default of 1)."
          },
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 411
          },
          "name": "random",
          "parameters": [
            {
              "docs": {
                "summary": "- The maximum value of the random number."
              },
              "name": "max",
              "optional": true,
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Rounds the given number to the nearest integer."
          },
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 148
          },
          "name": "round",
          "parameters": [
            {
              "docs": {
                "summary": "- The number to be rounded."
              },
              "name": "value",
              "type": {
                "primitive": "number"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.math.RoundingOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "returns": "The secant value of the angle.",
            "stability": "experimental",
            "summary": "Calculates the secant of an angle (in radians)."
          },
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 346
          },
          "name": "sec",
          "parameters": [
            {
              "docs": {
                "summary": "The angle in radians."
              },
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns 1 or -1, indicating the sign of the number passed as an argument, 0 for 0."
          },
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 272
          },
          "name": "sign",
          "parameters": [
            {
              "docs": {
                "summary": "The input number."
              },
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the sine of a number in radians."
          },
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 280
          },
          "name": "sin",
          "parameters": [
            {
              "docs": {
                "summary": "A number representing an angle in radians."
              },
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the square root of a number."
          },
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 176
          },
          "name": "sqrt",
          "parameters": [
            {
              "docs": {
                "summary": "A number greater than or equal to 0."
              },
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the tangent of a number in radians."
          },
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 296
          },
          "name": "tan",
          "parameters": [
            {
              "docs": {
                "summary": "A number representing an angle in radians."
              },
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "returns": "A string representation of the new number",
            "stability": "experimental",
            "summary": "Convert a value to a new number base."
          },
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 422
          },
          "name": "toRadix",
          "parameters": [
            {
              "docs": {
                "summary": "The number to be converted."
              },
              "name": "value",
              "type": {
                "primitive": "number"
              }
            },
            {
              "docs": {
                "summary": "The base of the new value."
              },
              "name": "base",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        }
      ],
      "name": "Util",
      "namespace": "math",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "Euler's number, a mathematical constant approximately equal to 2.71828."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 28
          },
          "name": "E",
          "static": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "Positive infinity constant."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 32
          },
          "name": "INF",
          "static": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "The mathematical constant representing the ratio of a circle's circumference to its diameter."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 20
          },
          "name": "PI",
          "static": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "The mathematical constant representing the ratio of a circle's circumference to the radius."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/math/math.ts",
            "line": 24
          },
          "name": "TAU",
          "static": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "src/math/math:Util"
    },
    "@winglang/sdk.platform.IPlatform": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Platform interface."
      },
      "fqn": "@winglang/sdk.platform.IPlatform",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/platform/platform.ts",
        "line": 7
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "New App Method."
          },
          "locationInModule": {
            "filename": "src/platform/platform.ts",
            "line": 35
          },
          "name": "newApp",
          "parameters": [
            {
              "docs": {
                "summary": "the props to pass to the app."
              },
              "name": "appProps",
              "type": {
                "fqn": "@winglang/sdk.core.AppProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.core.App"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Hooks for overriding newInstance calls."
          },
          "locationInModule": {
            "filename": "src/platform/platform.ts",
            "line": 28
          },
          "name": "newInstance",
          "parameters": [
            {
              "docs": {
                "summary": "string fqn of the resource type."
              },
              "name": "type",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "construct scope."
              },
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "docs": {
                "summary": "unique string id for resource."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "props to pass to the resource."
              },
              "name": "props",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Post-synth hook."
          },
          "locationInModule": {
            "filename": "src/platform/platform.ts",
            "line": 49
          },
          "name": "postSynth",
          "parameters": [
            {
              "docs": {
                "summary": "generated config."
              },
              "name": "config",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Pre-synth hook."
          },
          "locationInModule": {
            "filename": "src/platform/platform.ts",
            "line": 42
          },
          "name": "preSynth",
          "parameters": [
            {
              "docs": {
                "summary": "construct app."
              },
              "name": "app",
              "type": {
                "fqn": "constructs.Construct"
              }
            }
          ]
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "stability": "experimental",
            "summary": "Hook for creating and storing secrets."
          },
          "locationInModule": {
            "filename": "src/platform/platform.ts",
            "line": 61
          },
          "name": "storeSecrets",
          "parameters": [
            {
              "name": "secrets",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "map"
                }
              }
            }
          ]
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Validate hook."
          },
          "locationInModule": {
            "filename": "src/platform/platform.ts",
            "line": 56
          },
          "name": "validate",
          "parameters": [
            {
              "docs": {
                "summary": "generated config."
              },
              "name": "config",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "IPlatform",
      "namespace": "platform",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "example": "\"sim\"",
            "stability": "experimental",
            "summary": "The model the platform is built for."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/platform/platform.ts",
            "line": 13
          },
          "name": "target",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The schema for the parameters the platform accepts."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/platform/platform.ts",
            "line": 18
          },
          "name": "parameters",
          "optional": true,
          "type": {
            "primitive": "any"
          }
        }
      ],
      "symbolId": "src/platform/platform:IPlatform"
    },
    "@winglang/sdk.platform.ParameterRegistrar": {
      "assembly": "@winglang/sdk",
      "base": "constructs.Construct",
      "docs": {
        "remarks": "This class is used to register and lookup parameter values.",
        "stability": "experimental",
        "summary": "Parameter Registrar."
      },
      "fqn": "@winglang/sdk.platform.ParameterRegistrar",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/platform/parameter-registrar.ts",
          "line": 33
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/platform/parameter-registrar.ts",
        "line": 23
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add parameter schema to registrar."
          },
          "locationInModule": {
            "filename": "src/platform/parameter-registrar.ts",
            "line": 80
          },
          "name": "addSchema",
          "parameters": [
            {
              "docs": {
                "summary": "schema to add to the registrar."
              },
              "name": "schema",
              "type": {
                "primitive": "any"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "This method will nest the schema under the given path, making it easier to nest schemas.",
            "stability": "experimental",
            "summary": "Helper method to add a parameter schema at a given path."
          },
          "locationInModule": {
            "filename": "src/platform/parameter-registrar.ts",
            "line": 96
          },
          "name": "addSchemaAtPath",
          "parameters": [
            {
              "docs": {
                "summary": "the schema to add."
              },
              "name": "schema",
              "type": {
                "primitive": "any"
              }
            },
            {
              "docs": {
                "summary": "the path to nest the schema under."
              },
              "name": "path",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "whether or not to require all the nested properties."
              },
              "name": "recursiveRequire",
              "optional": true,
              "type": {
                "primitive": "boolean"
              }
            }
          ]
        },
        {
          "docs": {
            "returns": "the schema as a string",
            "stability": "experimental",
            "summary": "Read parameters."
          },
          "locationInModule": {
            "filename": "src/platform/parameter-registrar.ts",
            "line": 62
          },
          "name": "read",
          "parameters": [
            {
              "docs": {
                "summary": "options for reading parameters."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.platform.ReadParameterOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.Json"
            }
          }
        },
        {
          "docs": {
            "returns": "the value of the parameter",
            "stability": "experimental",
            "summary": "Retrieve a parameter value by its path."
          },
          "locationInModule": {
            "filename": "src/platform/parameter-registrar.ts",
            "line": 44
          },
          "name": "value",
          "parameters": [
            {
              "docs": {
                "summary": "the path of the parameter."
              },
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "ParameterRegistrar",
      "namespace": "platform",
      "symbolId": "src/platform/parameter-registrar:ParameterRegistrar"
    },
    "@winglang/sdk.platform.ReadParameterOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for reading parameters."
      },
      "fqn": "@winglang/sdk.platform.ReadParameterOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/platform/parameter-registrar.ts",
        "line": 13
      },
      "name": "ReadParameterOptions",
      "namespace": "platform",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Schema to limit the read to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/platform/parameter-registrar.ts",
            "line": 15
          },
          "name": "schema",
          "optional": true,
          "type": {
            "primitive": "any"
          }
        }
      ],
      "symbolId": "src/platform/parameter-registrar:ReadParameterOptions"
    },
    "@winglang/sdk.sim.Container": {
      "assembly": "@winglang/sdk",
      "base": "@winglang/sdk.std.Resource",
      "docs": {
        "custom": {
          "inflight": "`@winglang/sdk.sim.IContainerClient`"
        },
        "stability": "experimental",
        "summary": "Represents a container running in the Wing Simulator."
      },
      "fqn": "@winglang/sdk.sim.Container",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/target-sim/container.ts",
          "line": 88
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@winglang/sdk.sim.ContainerProps"
            }
          }
        ]
      },
      "interfaces": [
        "@winglang/sdk.sim.ISimulatorResource"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "src/target-sim/container.ts",
        "line": 77
      },
      "methods": [
        {
          "docs": {
            "remarks": "You can override this method to perform additional logic like granting\nIAM permissions to the host based on what methods are being called. But\nyou must call `super.bind(host, ops)` to ensure that the resource is\nactually bound.",
            "stability": "experimental",
            "summary": "A hook called by the Wing compiler once for each inflight host that needs to use this resource inflight."
          },
          "locationInModule": {
            "filename": "src/target-sim/container.ts",
            "line": 125
          },
          "name": "onLift",
          "overrides": "@winglang/sdk.std.Resource",
          "parameters": [
            {
              "name": "host",
              "type": {
                "fqn": "@winglang/sdk.std.IInflightHost"
              }
            },
            {
              "name": "ops",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Convert this resource to a resource schema for the simulator."
          },
          "locationInModule": {
            "filename": "src/target-sim/container.ts",
            "line": 109
          },
          "name": "toSimulator",
          "overrides": "@winglang/sdk.sim.ISimulatorResource",
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.simulator.ToSimulatorOutput"
            }
          }
        }
      ],
      "name": "Container",
      "namespace": "sim",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "A token that resolves to the host port of this container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/target-sim/container.ts",
            "line": 86
          },
          "name": "hostPort",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/target-sim/container:Container"
    },
    "@winglang/sdk.sim.ContainerProps": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Initialization properties for `sim.Container`."
      },
      "fqn": "@winglang/sdk.sim.ContainerProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/target-sim/container.ts",
        "line": 20
      },
      "name": "ContainerProps",
      "namespace": "sim",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "A name of a public Docker image to pull and run or a path to a local directory with a `Dockerfile`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/target-sim/container.ts",
            "line": 29
          },
          "name": "image",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "A name for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/target-sim/container.ts",
            "line": 24
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[]",
            "stability": "experimental",
            "summary": "Container arguments."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/target-sim/container.ts",
            "line": 54
          },
          "name": "args",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no port exposed",
            "stability": "experimental",
            "summary": "Internal container port to expose."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/target-sim/container.ts",
            "line": 35
          },
          "name": "containerPort",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "{}",
            "stability": "experimental",
            "summary": "Environment variables to set in the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/target-sim/container.ts",
            "line": 41
          },
          "name": "env",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- calculated based on the source files",
            "remarks": "if not set, and `sourcePattern`\nis set, the hash will be calculated based on the content of the source files.",
            "stability": "experimental",
            "summary": "An explicit source hash that represents the container source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/target-sim/container.ts",
            "line": 69
          },
          "name": "sourceHash",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- all files",
            "stability": "experimental",
            "summary": "A glob of local files to consider as input sources for the container, relative to the build context directory."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/target-sim/container.ts",
            "line": 62
          },
          "name": "sourcePattern",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[]",
            "example": "['/host:/container']",
            "stability": "experimental",
            "summary": "Volume mount points."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/target-sim/container.ts",
            "line": 48
          },
          "name": "volumes",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "src/target-sim/container:ContainerProps"
    },
    "@winglang/sdk.sim.IContainerClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Inflight interface for `Redis`."
      },
      "fqn": "@winglang/sdk.sim.IContainerClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/target-sim/container.ts",
        "line": 150
      },
      "name": "IContainerClient",
      "namespace": "sim",
      "symbolId": "src/target-sim/container:IContainerClient"
    },
    "@winglang/sdk.sim.IPolicyClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Inflight interface for `Policy`."
      },
      "fqn": "@winglang/sdk.sim.IPolicyClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/target-sim/policy.ts",
        "line": 78
      },
      "name": "IPolicyClient",
      "namespace": "sim",
      "symbolId": "src/target-sim/policy:IPolicyClient"
    },
    "@winglang/sdk.sim.IResource": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "inflight": "true"
        },
        "stability": "experimental",
        "summary": "Contract that a resource backend must implement."
      },
      "fqn": "@winglang/sdk.sim.IResource",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/target-sim/resource.ts",
        "line": 24
      },
      "methods": [
        {
          "abstract": true,
          "async": true,
          "docs": {
            "stability": "experimental",
            "summary": "Runs when the resource is stopped."
          },
          "locationInModule": {
            "filename": "src/target-sim/resource.ts",
            "line": 28
          },
          "name": "onStop"
        }
      ],
      "name": "IResource",
      "namespace": "sim",
      "symbolId": "src/target-sim/resource:IResource"
    },
    "@winglang/sdk.sim.IResourceClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Inflight interface for `sim.Resource`."
      },
      "fqn": "@winglang/sdk.sim.IResourceClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/target-sim/resource.ts",
        "line": 248
      },
      "methods": [
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Call a method on the resource."
          },
          "locationInModule": {
            "filename": "src/target-sim/resource.ts",
            "line": 253
          },
          "name": "call",
          "parameters": [
            {
              "name": "method",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "args",
              "optional": true,
              "type": {
                "collection": {
                  "elementtype": {
                    "fqn": "@winglang/sdk.std.Json"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.Json"
            }
          }
        }
      ],
      "name": "IResourceClient",
      "namespace": "sim",
      "symbolId": "src/target-sim/resource:IResourceClient"
    },
    "@winglang/sdk.sim.IResourceContext": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "inflight": "true"
        },
        "stability": "experimental",
        "summary": "Context for implementing a simulator resource."
      },
      "fqn": "@winglang/sdk.sim.IResourceContext",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/target-sim/resource.ts",
        "line": 37
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "remarks": "Defaults to `info` level.",
            "stability": "experimental",
            "summary": "Log a message at the current point in time."
          },
          "locationInModule": {
            "filename": "src/target-sim/resource.ts",
            "line": 60
          },
          "name": "log",
          "parameters": [
            {
              "docs": {
                "summary": "The message to log."
              },
              "name": "message",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The severity of the message."
              },
              "name": "level",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.std.LogLevel"
              }
            }
          ]
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "remarks": "All tokens must be resolved during the\nconstructor of the resource.",
            "stability": "experimental",
            "summary": "Resolves a token value."
          },
          "locationInModule": {
            "filename": "src/target-sim/resource.ts",
            "line": 51
          },
          "name": "resolveToken",
          "parameters": [
            {
              "docs": {
                "summary": "The name of the token."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The value of the token."
              },
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The directory for the resource's state."
          },
          "locationInModule": {
            "filename": "src/target-sim/resource.ts",
            "line": 41
          },
          "name": "statedir",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "IResourceContext",
      "namespace": "sim",
      "symbolId": "src/target-sim/resource:IResourceContext"
    },
    "@winglang/sdk.sim.IResourceFactory": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "inflight": "`@winglang/sdk.sim.IResourceFactoryClient`"
        },
        "stability": "experimental",
        "summary": "A resource with an inflight \"handle\" method that can be passed to the `sim.Resource` constructor."
      },
      "fqn": "@winglang/sdk.sim.IResourceFactory",
      "interfaces": [
        "@winglang/sdk.std.IInflight"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/target-sim/resource.ts",
        "line": 269
      },
      "name": "IResourceFactory",
      "namespace": "sim",
      "symbolId": "src/target-sim/resource:IResourceFactory"
    },
    "@winglang/sdk.sim.IResourceFactoryClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "A resource with an inflight \"handle\" method that can be passed to the `sim.Resource` constructor."
      },
      "fqn": "@winglang/sdk.sim.IResourceFactoryClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/target-sim/resource.ts",
        "line": 275
      },
      "methods": [
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Function that will be called to create the resource."
          },
          "locationInModule": {
            "filename": "src/target-sim/resource.ts",
            "line": 280
          },
          "name": "handle",
          "parameters": [
            {
              "name": "context",
              "type": {
                "fqn": "@winglang/sdk.sim.IResourceContext"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.sim.IResource"
            }
          }
        }
      ],
      "name": "IResourceFactoryClient",
      "namespace": "sim",
      "symbolId": "src/target-sim/resource:IResourceFactoryClient"
    },
    "@winglang/sdk.sim.ISimulatorInflightHost": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Interfaces shared by all preflight classes that host inflight code."
      },
      "fqn": "@winglang/sdk.sim.ISimulatorInflightHost",
      "interfaces": [
        "@winglang/sdk.std.IInflightHost"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/target-sim/resource.ts",
        "line": 286
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Add a simulated permission to this inflight host."
          },
          "locationInModule": {
            "filename": "src/target-sim/resource.ts",
            "line": 292
          },
          "name": "addPermission",
          "parameters": [
            {
              "docs": {
                "summary": "The resource to add."
              },
              "name": "resource",
              "type": {
                "fqn": "@winglang/sdk.std.IResource"
              }
            },
            {
              "docs": {
                "summary": "The action to add."
              },
              "name": "op",
              "type": {
                "primitive": "string"
              }
            }
          ]
        }
      ],
      "name": "ISimulatorInflightHost",
      "namespace": "sim",
      "symbolId": "src/target-sim/resource:ISimulatorInflightHost"
    },
    "@winglang/sdk.sim.ISimulatorResource": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Interfaces shared by all preflight classes targeting the simulator."
      },
      "fqn": "@winglang/sdk.sim.ISimulatorResource",
      "interfaces": [
        "@winglang/sdk.std.IResource"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/target-sim/resource.ts",
        "line": 307
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Convert this resource to a resource schema for the simulator."
          },
          "locationInModule": {
            "filename": "src/target-sim/resource.ts",
            "line": 311
          },
          "name": "toSimulator",
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.simulator.ToSimulatorOutput"
            }
          }
        }
      ],
      "name": "ISimulatorResource",
      "namespace": "sim",
      "symbolId": "src/target-sim/resource:ISimulatorResource"
    },
    "@winglang/sdk.sim.IStateClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Inflight interface for `State`."
      },
      "fqn": "@winglang/sdk.sim.IStateClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/target-sim/state.ts",
        "line": 74
      },
      "methods": [
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "remarks": "Throws if there is no value for the given key.",
            "stability": "experimental",
            "summary": "Gets the runtime state of this object."
          },
          "locationInModule": {
            "filename": "src/target-sim/state.ts",
            "line": 88
          },
          "name": "get",
          "parameters": [
            {
              "docs": {
                "summary": "The object's key."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.Json"
            }
          }
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Sets the state of runtime a runtime object."
          },
          "locationInModule": {
            "filename": "src/target-sim/state.ts",
            "line": 81
          },
          "name": "set",
          "parameters": [
            {
              "docs": {
                "summary": "The object's key."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The object's value."
              },
              "name": "value",
              "type": {
                "fqn": "@winglang/sdk.std.Json"
              }
            }
          ]
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "remarks": "If no value exists,\nreturns `nil`.",
            "stability": "experimental",
            "summary": "Checks if runtime state exists for this object and returns it's value."
          },
          "locationInModule": {
            "filename": "src/target-sim/state.ts",
            "line": 97
          },
          "name": "tryGet",
          "parameters": [
            {
              "docs": {
                "summary": "The object's key."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.std.Json"
            }
          }
        }
      ],
      "name": "IStateClient",
      "namespace": "sim",
      "symbolId": "src/target-sim/state:IStateClient"
    },
    "@winglang/sdk.sim.Policy": {
      "assembly": "@winglang/sdk",
      "base": "@winglang/sdk.std.Resource",
      "docs": {
        "custom": {
          "inflight": "`@winglang/sdk.sim.IPolicyClient`"
        },
        "stability": "experimental",
        "summary": "Implementation of `sim.Policy`."
      },
      "fqn": "@winglang/sdk.sim.Policy",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/target-sim/policy.ts",
          "line": 31
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@winglang/sdk.sim.PolicyProps"
            }
          }
        ]
      },
      "interfaces": [
        "@winglang/sdk.sim.ISimulatorResource"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "src/target-sim/policy.ts",
        "line": 27
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds a statement to the policy."
          },
          "locationInModule": {
            "filename": "src/target-sim/policy.ts",
            "line": 47
          },
          "name": "addStatement",
          "parameters": [
            {
              "name": "resource",
              "type": {
                "fqn": "@winglang/sdk.std.IResource"
              }
            },
            {
              "name": "op",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Convert this resource to a resource schema for the simulator."
          },
          "locationInModule": {
            "filename": "src/target-sim/policy.ts",
            "line": 54
          },
          "name": "toSimulator",
          "overrides": "@winglang/sdk.sim.ISimulatorResource",
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.simulator.ToSimulatorOutput"
            }
          }
        }
      ],
      "name": "Policy",
      "namespace": "sim",
      "symbolId": "src/target-sim/policy:Policy"
    },
    "@winglang/sdk.sim.PolicyProps": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `sim.Policy`."
      },
      "fqn": "@winglang/sdk.sim.PolicyProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/target-sim/policy.ts",
        "line": 15
      },
      "name": "PolicyProps",
      "namespace": "sim",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The resource to which the policy is attached."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/target-sim/policy.ts",
            "line": 19
          },
          "name": "principal",
          "type": {
            "fqn": "@winglang/sdk.std.IResource"
          }
        }
      ],
      "symbolId": "src/target-sim/policy:PolicyProps"
    },
    "@winglang/sdk.sim.Resource": {
      "assembly": "@winglang/sdk",
      "base": "@winglang/sdk.std.Resource",
      "docs": {
        "custom": {
          "inflight": "`@winglang/sdk.sim.IResourceClient`"
        },
        "stability": "experimental",
        "summary": "A backend for a simulated resource."
      },
      "fqn": "@winglang/sdk.sim.Resource",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/target-sim/resource.ts",
          "line": 85
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "factory",
            "type": {
              "fqn": "@winglang/sdk.sim.IResourceFactory"
            }
          }
        ]
      },
      "interfaces": [
        "@winglang/sdk.std.IResource",
        "@winglang/sdk.sim.ISimulatorResource",
        "@winglang/sdk.std.IInflightHost",
        "@winglang/sdk.sim.ISimulatorInflightHost"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "src/target-sim/resource.ts",
        "line": 72
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add an environment variable to make available to the inflight code."
          },
          "locationInModule": {
            "filename": "src/target-sim/resource.ts",
            "line": 205
          },
          "name": "addEnvironment",
          "overrides": "@winglang/sdk.std.IInflightHost",
          "parameters": [
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add a simulated permission to this inflight host."
          },
          "locationInModule": {
            "filename": "src/target-sim/resource.ts",
            "line": 110
          },
          "name": "addPermission",
          "overrides": "@winglang/sdk.sim.ISimulatorInflightHost",
          "parameters": [
            {
              "name": "resource",
              "type": {
                "fqn": "@winglang/sdk.std.IResource"
              }
            },
            {
              "name": "op",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "If the token is used in inflight code or in the configuration of a simulated\nresource (e.g. as an environment variable), the relevant resource will\nautomatically take a dependency on the resource the token belongs to.",
            "returns": "A string token.",
            "stability": "experimental",
            "summary": "Obtain a token that can be used to reference an attribute of this resource that is only resolved once the resource is started in the simulator."
          },
          "locationInModule": {
            "filename": "src/target-sim/resource.ts",
            "line": 132
          },
          "name": "createToken",
          "parameters": [
            {
              "docs": {
                "summary": "The name of the token."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "remarks": "You can override this method to perform additional logic like granting\nIAM permissions to the host based on what methods are being called. But\nyou must call `super.bind(host, ops)` to ensure that the resource is\nactually bound.",
            "stability": "experimental",
            "summary": "A hook called by the Wing compiler once for each inflight host that needs to use this resource inflight."
          },
          "locationInModule": {
            "filename": "src/target-sim/resource.ts",
            "line": 234
          },
          "name": "onLift",
          "overrides": "@winglang/sdk.std.Resource",
          "parameters": [
            {
              "name": "host",
              "type": {
                "fqn": "@winglang/sdk.std.IInflightHost"
              }
            },
            {
              "name": "ops",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Convert this resource to a resource schema for the simulator."
          },
          "locationInModule": {
            "filename": "src/target-sim/resource.ts",
            "line": 214
          },
          "name": "toSimulator",
          "overrides": "@winglang/sdk.sim.ISimulatorResource",
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.simulator.ToSimulatorOutput"
            }
          }
        }
      ],
      "name": "Resource",
      "namespace": "sim",
      "symbolId": "src/target-sim/resource:Resource"
    },
    "@winglang/sdk.sim.State": {
      "assembly": "@winglang/sdk",
      "base": "@winglang/sdk.std.Resource",
      "docs": {
        "custom": {
          "inflight": "`@winglang/sdk.sim.IStateClient`"
        },
        "remarks": "Use the preflight method `token(key)` to obtain a token that can be used to reference the value\nof the state at runtime.\n\nDuring deployment (i.e. `cloud.OnDeploy` or `cloud.Service` startup), you must call the inflight\nmethod `set(key, value)` to set the runtime value. The value will be available at runtime through\nthe inflight method `get(key)` (or resolved as a token).\n\nSee tests for examples.",
        "stability": "experimental",
        "summary": "Key/value in-memory state for the simulator."
      },
      "fqn": "@winglang/sdk.sim.State",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Creates a new construct node."
        },
        "locationInModule": {
          "filename": "src/construct.ts",
          "line": 498
        },
        "parameters": [
          {
            "docs": {
              "summary": "The scope in which to define this construct."
            },
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "docs": {
              "remarks": "Must be unique amongst siblings. If\nthe ID includes a path separator (`/`), then it will be replaced by double\ndash `--`.",
              "summary": "The scoped construct ID."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "interfaces": [
        "@winglang/sdk.sim.ISimulatorResource"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "src/target-sim/state.ts",
        "line": 30
      },
      "methods": [
        {
          "docs": {
            "remarks": "You can override this method to perform additional logic like granting\nIAM permissions to the host based on what methods are being called. But\nyou must call `super.bind(host, ops)` to ensure that the resource is\nactually bound.",
            "stability": "experimental",
            "summary": "A hook called by the Wing compiler once for each inflight host that needs to use this resource inflight."
          },
          "locationInModule": {
            "filename": "src/target-sim/state.ts",
            "line": 57
          },
          "name": "onLift",
          "overrides": "@winglang/sdk.std.Resource",
          "parameters": [
            {
              "name": "host",
              "type": {
                "fqn": "@winglang/sdk.std.IInflightHost"
              }
            },
            {
              "name": "ops",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns a token that can be used to retrieve the value of the state after the simulation has run."
          },
          "locationInModule": {
            "filename": "src/target-sim/state.ts",
            "line": 39
          },
          "name": "token",
          "parameters": [
            {
              "docs": {
                "summary": "The object key retrieved through the inflight `state.get()`."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Convert this resource to a resource schema for the simulator."
          },
          "locationInModule": {
            "filename": "src/target-sim/state.ts",
            "line": 62
          },
          "name": "toSimulator",
          "overrides": "@winglang/sdk.sim.ISimulatorResource",
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.simulator.ToSimulatorOutput"
            }
          }
        }
      ],
      "name": "State",
      "namespace": "sim",
      "symbolId": "src/target-sim/state:State"
    },
    "@winglang/sdk.simulator.BaseResourceAttributes": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Schema for resource attributes."
      },
      "fqn": "@winglang/sdk.simulator.BaseResourceAttributes",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/simulator/simulator.ts",
        "line": 1259
      },
      "name": "BaseResourceAttributes",
      "namespace": "simulator",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The resource's simulator-unique id."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 1261
          },
          "name": "handle",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/simulator/simulator:BaseResourceAttributes"
    },
    "@winglang/sdk.simulator.BaseResourceSchema": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Schema for individual resources."
      },
      "fqn": "@winglang/sdk.simulator.BaseResourceSchema",
      "interfaces": [
        "@winglang/sdk.simulator.ToSimulatorOutput"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/simulator/simulator.ts",
        "line": 1247
      },
      "name": "BaseResourceSchema",
      "namespace": "simulator",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "An opaque tree-unique address of the resource, calculated as a SHA-1 hash of the resource path."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 1251
          },
          "name": "addr",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The resource-specific attributes that are set after the resource is created."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 1253
          },
          "name": "attrs",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The resource path from the app's construct tree."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 1249
          },
          "name": "path",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Resources that should be deployed before this resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 1255
          },
          "name": "deps",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "src/simulator/simulator:BaseResourceSchema"
    },
    "@winglang/sdk.simulator.ConnectionData": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Schema for `.connections` in connections.json."
      },
      "fqn": "@winglang/sdk.simulator.ConnectionData",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/simulator/simulator.ts",
        "line": 1273
      },
      "name": "ConnectionData",
      "namespace": "simulator",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "A name for the connection."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 1289
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The path of the source construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 1275
          },
          "name": "source",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The path of the target construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 1282
          },
          "name": "target",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no operation",
            "stability": "experimental",
            "summary": "An operation that the source object supports."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 1280
          },
          "name": "sourceOp",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no operation",
            "stability": "experimental",
            "summary": "An operation that the target object supports."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 1287
          },
          "name": "targetOp",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/simulator/simulator:ConnectionData"
    },
    "@winglang/sdk.simulator.ISimulatorContext": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Context that is passed to individual resource simulations."
      },
      "fqn": "@winglang/sdk.simulator.ISimulatorContext",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/simulator/simulator.ts",
        "line": 89
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "remarks": "Traces are breadcrumbs of information about resource\noperations that occurred during simulation, useful for understanding how\nresources interact or debugging an application.",
            "stability": "experimental",
            "summary": "Add a trace."
          },
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 125
          },
          "name": "addTrace",
          "parameters": [
            {
              "name": "trace",
              "type": {
                "fqn": "@winglang/sdk.std.Trace"
              }
            }
          ]
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Obtain a client given a resource's handle."
          },
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 118
          },
          "name": "getClient",
          "parameters": [
            {
              "name": "handle",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "asAdmin",
              "optional": true,
              "type": {
                "primitive": "boolean"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Get a list of all traces until this point."
          },
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 136
          },
          "name": "listTraces",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "@winglang/sdk.std.Trace"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Returns the runtime attributes of a resource."
          },
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 149
          },
          "name": "resourceAttributes",
          "parameters": [
            {
              "docs": {
                "summary": "The resource path."
              },
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Sets the runtime attributes of a resource."
          },
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 143
          },
          "name": "setResourceAttributes",
          "parameters": [
            {
              "docs": {
                "summary": "The resource path."
              },
              "name": "path",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Attributes to set (will be merged with existing attributes)."
              },
              "name": "attrs",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ]
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "remarks": "The activity will be\nrun, and the trace will be populated with the result's success or failure.",
            "stability": "experimental",
            "summary": "Register a trace associated with a resource activity."
          },
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 131
          },
          "name": "withTrace",
          "parameters": [
            {
              "name": "trace",
              "type": {
                "fqn": "@winglang/sdk.simulator.IWithTraceProps"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "ISimulatorContext",
      "namespace": "simulator",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The handle of the resource that is being simulated."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 108
          },
          "name": "resourceHandle",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The path of the resource that is being simulated."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 103
          },
          "name": "resourcePath",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The url that the simulator server is listening on."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 113
          },
          "name": "serverUrl",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The directory where the compilation output is."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 93
          },
          "name": "simdir",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The directory for the resource's state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 98
          },
          "name": "statedir",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/simulator/simulator:ISimulatorContext"
    },
    "@winglang/sdk.simulator.ISimulatorFactory": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "A factory that can turn resource descriptions into (inflight) resource simulations."
      },
      "fqn": "@winglang/sdk.simulator.ISimulatorFactory",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/simulator/simulator.ts",
        "line": 1101
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Resolve the parameters needed for creating a specific resource simulation."
          },
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 1105
          },
          "name": "resolve",
          "parameters": [
            {
              "name": "type",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "context",
              "type": {
                "fqn": "@winglang/sdk.simulator.ISimulatorContext"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.simulator.ISimulatorResourceInstance"
            }
          }
        }
      ],
      "name": "ISimulatorFactory",
      "namespace": "simulator",
      "symbolId": "src/simulator/simulator:ISimulatorFactory"
    },
    "@winglang/sdk.simulator.ISimulatorLifecycleHooks": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "A collection of callbacks that are invoked at key lifecycle events of the simulator."
      },
      "fqn": "@winglang/sdk.simulator.ISimulatorLifecycleHooks",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/simulator/simulator.ts",
        "line": 56
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "A function to run whenever a trace is emitted."
          },
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 60
          },
          "name": "onTrace",
          "parameters": [
            {
              "name": "event",
              "type": {
                "fqn": "@winglang/sdk.std.Trace"
              }
            }
          ]
        }
      ],
      "name": "ISimulatorLifecycleHooks",
      "namespace": "simulator",
      "symbolId": "src/simulator/simulator:ISimulatorLifecycleHooks"
    },
    "@winglang/sdk.simulator.ISimulatorResourceInstance": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Shared interface for resource simulations."
      },
      "fqn": "@winglang/sdk.simulator.ISimulatorResourceInstance",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/simulator/simulator.ts",
        "line": 1166
      },
      "methods": [
        {
          "abstract": true,
          "async": true,
          "docs": {
            "stability": "experimental",
            "summary": "Stop the resource and clean up any physical resources it may have created (files, ports, etc)."
          },
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 1177
          },
          "name": "cleanup"
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "remarks": "Return a map of\nthe resource's runtime attributes.",
            "stability": "experimental",
            "summary": "Perform any async initialization required by the resource."
          },
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 1171
          },
          "name": "init",
          "parameters": [
            {
              "name": "ctx",
              "type": {
                "fqn": "@winglang/sdk.simulator.ISimulatorContext"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "remarks": "If this is not implemented, the default behavior is to automatically replace the resource if\nthe new configuration is different from the current configuration.",
            "stability": "experimental",
            "summary": "Determines the update plan for applying a new configuration for this resource."
          },
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 1192
          },
          "name": "plan",
          "parameters": [
            {
              "docs": {
                "summary": "Whether the new configuration is different from the current configuration."
              },
              "name": "invalidated",
              "type": {
                "primitive": "boolean"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.simulator.UpdatePlan"
            }
          }
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "stability": "experimental",
            "summary": "Save the resource's state into the state directory."
          },
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 1182
          },
          "name": "save",
          "parameters": [
            {
              "name": "statedir",
              "type": {
                "primitive": "string"
              }
            }
          ]
        }
      ],
      "name": "ISimulatorResourceInstance",
      "namespace": "simulator",
      "symbolId": "src/simulator/simulator:ISimulatorResourceInstance"
    },
    "@winglang/sdk.simulator.ITraceSubscriber": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "A subscriber that can listen for traces emitted by the simulator."
      },
      "fqn": "@winglang/sdk.simulator.ITraceSubscriber",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/simulator/simulator.ts",
        "line": 155
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Called when a trace is emitted."
          },
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 159
          },
          "name": "callback",
          "parameters": [
            {
              "name": "event",
              "type": {
                "fqn": "@winglang/sdk.std.Trace"
              }
            }
          ]
        }
      ],
      "name": "ITraceSubscriber",
      "namespace": "simulator",
      "symbolId": "src/simulator/simulator:ITraceSubscriber"
    },
    "@winglang/sdk.simulator.IWithTraceProps": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Props for `ISimulatorContext.withTrace`."
      },
      "fqn": "@winglang/sdk.simulator.IWithTraceProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/simulator/simulator.ts",
        "line": 74
      },
      "methods": [
        {
          "abstract": true,
          "async": true,
          "docs": {
            "stability": "experimental",
            "summary": "A function to run as part of the trace."
          },
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 83
          },
          "name": "activity",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "IWithTraceProps",
      "namespace": "simulator",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The trace message."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 78
          },
          "name": "message",
          "type": {
            "primitive": "any"
          }
        }
      ],
      "symbolId": "src/simulator/simulator:IWithTraceProps"
    },
    "@winglang/sdk.simulator.PolicyStatement": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "A policy statement that defines a permission for a resource."
      },
      "fqn": "@winglang/sdk.simulator.PolicyStatement",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/simulator/simulator.ts",
        "line": 1265
      },
      "name": "PolicyStatement",
      "namespace": "simulator",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The operation that can be performed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 1267
          },
          "name": "operation",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The resource the operation can be performed on."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 1269
          },
          "name": "resourceHandle",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/simulator/simulator:PolicyStatement"
    },
    "@winglang/sdk.simulator.Simulator": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "A simulator that can be used to test your application locally."
      },
      "fqn": "@winglang/sdk.simulator.Simulator",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/simulator/simulator.ts",
          "line": 210
        },
        "parameters": [
          {
            "name": "props",
            "type": {
              "fqn": "@winglang/sdk.simulator.SimulatorProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/simulator/simulator.ts",
        "line": 192
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Obtain information about the application's connections."
          },
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 624
          },
          "name": "connections",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "@winglang/sdk.simulator.ConnectionData"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "returns": "the resource",
            "stability": "experimental",
            "summary": "Get a resource client."
          },
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 481
          },
          "name": "getResource",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "returns": "The resource configuration",
            "stability": "experimental",
            "summary": "Obtain a resource's configuration, including its type, props, and attrs."
          },
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 560
          },
          "name": "getResourceConfig",
          "parameters": [
            {
              "docs": {
                "summary": "The resource path."
              },
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.simulator.BaseResourceSchema"
            }
          }
        },
        {
          "docs": {
            "returns": "The resource state directory path",
            "stability": "experimental",
            "summary": "Obtain a resource's state directory path."
          },
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 573
          },
          "name": "getResourceStateDir",
          "parameters": [
            {
              "docs": {
                "summary": "The resource path."
              },
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "returns": "An array of UIComponent objects",
            "stability": "experimental",
            "summary": "Obtain a resource's visual interaction components."
          },
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 590
          },
          "name": "getResourceUI",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Get a list of all resource paths."
          },
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 466
          },
          "name": "listResources",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Get a list of all traces from the most recent simulation run."
          },
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 473
          },
          "name": "listTraces",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "@winglang/sdk.std.Trace"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Register a subscriber that will be notified when a trace is emitted by the simulator."
          },
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 610
          },
          "name": "onTrace",
          "parameters": [
            {
              "name": "subscriber",
              "type": {
                "fqn": "@winglang/sdk.simulator.ITraceSubscriber"
              }
            }
          ]
        },
        {
          "async": true,
          "docs": {
            "stability": "experimental",
            "summary": "Stop the simulation, reload the simulation tree from the latest version of the app file, and restart the simulation."
          },
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 450
          },
          "name": "reload",
          "parameters": [
            {
              "name": "resetState",
              "type": {
                "primitive": "boolean"
              }
            }
          ]
        },
        {
          "async": true,
          "docs": {
            "stability": "experimental",
            "summary": "Start the simulator."
          },
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 269
          },
          "name": "start"
        },
        {
          "async": true,
          "docs": {
            "stability": "experimental",
            "summary": "Stop the simulation and clean up all resources."
          },
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 366
          },
          "name": "stop"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Obtain information about the application's construct tree."
          },
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 617
          },
          "name": "tree",
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.simulator.Tree"
            }
          }
        },
        {
          "docs": {
            "returns": "The resource or undefined if not found",
            "stability": "experimental",
            "summary": "Get a resource client."
          },
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 493
          },
          "name": "tryGetResource",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "returns": "The resource configuration or undefined if not found",
            "stability": "experimental",
            "summary": "Obtain a resource's configuration, including its type, props, and attrs."
          },
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 534
          },
          "name": "tryGetResourceConfig",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.simulator.BaseResourceSchema"
            }
          }
        },
        {
          "async": true,
          "docs": {
            "remarks": "This will create/update/delete\nresources as necessary to get to the desired state.",
            "stability": "experimental",
            "summary": "Updates the running simulation with a new version of the app."
          },
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 330
          },
          "name": "update",
          "parameters": [
            {
              "docs": {
                "summary": "The path to the new version of the app."
              },
              "name": "simDir",
              "type": {
                "primitive": "string"
              }
            }
          ]
        }
      ],
      "name": "Simulator",
      "namespace": "simulator",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The URL that the simulator server is listening on."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 809
          },
          "name": "url",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/simulator/simulator:Simulator"
    },
    "@winglang/sdk.simulator.SimulatorProps": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Props for `Simulator`."
      },
      "fqn": "@winglang/sdk.simulator.SimulatorProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/simulator/simulator.ts",
        "line": 30
      },
      "name": "SimulatorProps",
      "namespace": "simulator",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Path to a Wing simulator output directory (.wsim)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 34
          },
          "name": "simfile",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- a factory that produces simulations for built-in Wing SDK\nresources",
            "stability": "experimental",
            "summary": "The factory that produces resource simulations."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 49
          },
          "name": "factory",
          "optional": true,
          "type": {
            "fqn": "@winglang/sdk.simulator.ISimulatorFactory"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- a directory named \".state\" inside the simulator output directory",
            "stability": "experimental",
            "summary": "Path to a state directory where the simulator can store state between simulation runs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 41
          },
          "name": "stateDir",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/simulator/simulator:SimulatorProps"
    },
    "@winglang/sdk.simulator.SimulatorServerRequest": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "remarks": "Subject to breaking changes.",
        "stability": "experimental",
        "summary": "Internal schema for requests to the simulator server's /v1/call endpoint."
      },
      "fqn": "@winglang/sdk.simulator.SimulatorServerRequest",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/simulator/simulator.ts",
        "line": 1296
      },
      "name": "SimulatorServerRequest",
      "namespace": "simulator",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The arguments to the method."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 1304
          },
          "name": "args",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The handle of the resource making the request."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 1298
          },
          "name": "caller",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The target resource handle (an ID unique among resources in the simulation)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 1300
          },
          "name": "handle",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The method to call on the resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 1302
          },
          "name": "method",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/simulator/simulator:SimulatorServerRequest"
    },
    "@winglang/sdk.simulator.SimulatorServerResponse": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "remarks": "Subject to breaking changes.",
        "stability": "experimental",
        "summary": "Internal schema for responses from the simulator server's /v1/call endpoint."
      },
      "fqn": "@winglang/sdk.simulator.SimulatorServerResponse",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/simulator/simulator.ts",
        "line": 1311
      },
      "name": "SimulatorServerResponse",
      "namespace": "simulator",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The error that occurred during the method call."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 1315
          },
          "name": "error",
          "optional": true,
          "type": {
            "primitive": "any"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The result of the method call."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 1313
          },
          "name": "result",
          "optional": true,
          "type": {
            "primitive": "any"
          }
        }
      ],
      "symbolId": "src/simulator/simulator:SimulatorServerResponse"
    },
    "@winglang/sdk.simulator.ToSimulatorOutput": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "remarks": "Only contains fields that need to be returned by `toSimulator()`.",
        "stability": "experimental",
        "summary": "Schema for individual resources."
      },
      "fqn": "@winglang/sdk.simulator.ToSimulatorOutput",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/simulator/simulator.ts",
        "line": 1237
      },
      "name": "ToSimulatorOutput",
      "namespace": "simulator",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The resource-specific properties needed to create this resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 1241
          },
          "name": "props",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The type of the resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 1239
          },
          "name": "type",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "A list of inline policy statements that define permissions for this resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 1243
          },
          "name": "policy",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@winglang/sdk.simulator.PolicyStatement"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "src/simulator/simulator:ToSimulatorOutput"
    },
    "@winglang/sdk.simulator.Tree": {
      "assembly": "@winglang/sdk",
      "docs": {
        "remarks": "Provides information\nabout resources and their relationships.",
        "stability": "experimental",
        "summary": "Tree metadata associated with a Wing application."
      },
      "fqn": "@winglang/sdk.simulator.Tree",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/simulator/tree.ts",
          "line": 8
        },
        "parameters": [
          {
            "name": "data",
            "type": {
              "fqn": "@winglang/sdk.core.ConstructTree"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/simulator/tree.ts",
        "line": 7
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the raw tree data."
          },
          "locationInModule": {
            "filename": "src/simulator/tree.ts",
            "line": 13
          },
          "name": "rawData",
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.core.ConstructTree"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the raw data for a specific construct node."
          },
          "locationInModule": {
            "filename": "src/simulator/tree.ts",
            "line": 20
          },
          "name": "rawDataForNode",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.core.ConstructTreeNode"
            }
          }
        }
      ],
      "name": "Tree",
      "namespace": "simulator",
      "symbolId": "src/simulator/tree:Tree"
    },
    "@winglang/sdk.simulator.TypeSchema": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Schema for individual types."
      },
      "fqn": "@winglang/sdk.simulator.TypeSchema",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/simulator/simulator.ts",
        "line": 1226
      },
      "name": "TypeSchema",
      "namespace": "simulator",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Name of the class that is exported by the `sourcePath`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 1230
          },
          "name": "className",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Location of the source file that exports a simulation API."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 1228
          },
          "name": "sourcePath",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/simulator/simulator:TypeSchema"
    },
    "@winglang/sdk.simulator.UpdatePlan": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Determines how updates are performed on this resource."
      },
      "fqn": "@winglang/sdk.simulator.UpdatePlan",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/simulator/simulator.ts",
        "line": 1198
      },
      "members": [
        {
          "docs": {
            "remarks": "This resource is already in the desired state.",
            "stability": "experimental",
            "summary": "Does nothing."
          },
          "name": "SKIP"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Deletes the resource and creates a new instance with the new configuration."
          },
          "name": "REPLACE"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Auto detect changes in new configuration and replace the resource."
          },
          "name": "AUTO"
        }
      ],
      "name": "UpdatePlan",
      "namespace": "simulator",
      "symbolId": "src/simulator/simulator:UpdatePlan"
    },
    "@winglang/sdk.simulator.WingSimulatorSchema": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Schema for simulator.json."
      },
      "fqn": "@winglang/sdk.simulator.WingSimulatorSchema",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/simulator/simulator.ts",
        "line": 1216
      },
      "name": "WingSimulatorSchema",
      "namespace": "simulator",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The resources, indexed by their construct path."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 1218
          },
          "name": "resources",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@winglang/sdk.simulator.BaseResourceSchema"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The version of the Wing SDK used to synthesize the .wsim file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 1222
          },
          "name": "sdkVersion",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The map of types."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/simulator/simulator.ts",
            "line": 1220
          },
          "name": "types",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@winglang/sdk.simulator.TypeSchema"
              },
              "kind": "map"
            }
          }
        }
      ],
      "symbolId": "src/simulator/simulator:WingSimulatorSchema"
    },
    "@winglang/sdk.std.AddConnectionProps": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Props for `Node.addConnection`."
      },
      "fqn": "@winglang/sdk.std.AddConnectionProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/std/node.ts",
        "line": 423
      },
      "name": "AddConnectionProps",
      "namespace": "std",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "A name for the connection."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 449
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The source of the connection."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 427
          },
          "name": "source",
          "type": {
            "fqn": "constructs.IConstruct"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The target of the connection."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 438
          },
          "name": "target",
          "type": {
            "fqn": "constructs.IConstruct"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no operation",
            "stability": "experimental",
            "summary": "An operation that the source construct supports."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 433
          },
          "name": "sourceOp",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no operation",
            "stability": "experimental",
            "summary": "An operation that the target construct supports."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 444
          },
          "name": "targetOp",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/std/node:AddConnectionProps"
    },
    "@winglang/sdk.std.Array": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "typeparam": "T1"
        },
        "stability": "experimental",
        "summary": "Immutable Array."
      },
      "fqn": "@winglang/sdk.std.Array",
      "kind": "class",
      "locationInModule": {
        "filename": "src/std/array.ts",
        "line": 13
      },
      "methods": [
        {
          "docs": {
            "custom": {
              "macro": "((arr, index) => { if (index < 0 || index >= arr.length) throw new Error(\"Index out of bounds\"); return arr[index]; })($self$, $args$)"
            },
            "returns": "the value at the given index",
            "stability": "experimental",
            "summary": "Get the value at the given index."
          },
          "locationInModule": {
            "filename": "src/std/array.ts",
            "line": 37
          },
          "name": "at",
          "parameters": [
            {
              "docs": {
                "summary": "index of the value to get."
              },
              "name": "index",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.T1"
            }
          }
        },
        {
          "docs": {
            "returns": "a new ImmutableArray with the values of this array followed by the values of arr",
            "stability": "experimental",
            "summary": "Merge arr to the end of this array."
          },
          "locationInModule": {
            "filename": "src/std/array.ts",
            "line": 61
          },
          "name": "concat",
          "parameters": [
            {
              "docs": {
                "summary": "array to merge."
              },
              "name": "arr",
              "type": {
                "fqn": "@winglang/sdk.std.Array"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.Array"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "$self$.includes($args$)"
            },
            "returns": "true if this array includes searchElement.",
            "stability": "experimental",
            "summary": "Checks if this array includes searchElement."
          },
          "locationInModule": {
            "filename": "src/std/array.ts",
            "line": 74
          },
          "name": "contains",
          "parameters": [
            {
              "docs": {
                "summary": "to search for."
              },
              "name": "searchElement",
              "type": {
                "fqn": "@winglang/sdk.std.T1"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "[...($self$)]"
            },
            "returns": "a MutableArray with the same values as this array",
            "stability": "experimental",
            "summary": "Create a mutable shallow copy of this array."
          },
          "locationInModule": {
            "filename": "src/std/array.ts",
            "line": 86
          },
          "name": "copyMut",
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.MutArray"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "$self$.indexOf($args$)"
            },
            "returns": "the index of the first occurrence of searchElement found, or -1 if not found.",
            "stability": "experimental",
            "summary": "Returns the index of the first occurrence of searchElement found."
          },
          "locationInModule": {
            "filename": "src/std/array.ts",
            "line": 98
          },
          "name": "indexOf",
          "parameters": [
            {
              "docs": {
                "summary": "to search for."
              },
              "name": "searchElement",
              "type": {
                "fqn": "@winglang/sdk.std.T1"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "remarks": "If the array has only\none item, then that item will be returned without using the separator.",
            "returns": "a string containing the concatenated values in this array,\nseparated by commas or a specified separator string.",
            "stability": "experimental",
            "summary": "Returns a new string containing the concatenated values in this array, separated by commas or a specified separator string."
          },
          "locationInModule": {
            "filename": "src/std/array.ts",
            "line": 111
          },
          "name": "join",
          "parameters": [
            {
              "name": "separator",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "$self$.lastIndexOf($args$)"
            },
            "returns": "the index of the last occurrence of searchElement found, or -1 if not found.",
            "stability": "experimental",
            "summary": "Returns the index of the last occurrence of searchElement found."
          },
          "locationInModule": {
            "filename": "src/std/array.ts",
            "line": 124
          },
          "name": "lastIndexOf",
          "parameters": [
            {
              "docs": {
                "summary": "to search for."
              },
              "name": "searchElement",
              "type": {
                "fqn": "@winglang/sdk.std.T1"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "$self$.slice($args$)"
            },
            "returns": "a new array containing the sliced elements.",
            "stability": "experimental",
            "summary": "Returns a shallow copy of a portion of the array."
          },
          "locationInModule": {
            "filename": "src/std/array.ts",
            "line": 138
          },
          "name": "slice",
          "parameters": [
            {
              "docs": {
                "summary": "the beginning index of the slice, inclusive."
              },
              "name": "start",
              "optional": true,
              "type": {
                "primitive": "number"
              }
            },
            {
              "docs": {
                "summary": "the ending index of the slice, exclusive."
              },
              "name": "end",
              "optional": true,
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.Array"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "$self$.at($args$)"
            },
            "returns": "the value at the given index, or undefined if the index is out of bounds",
            "stability": "experimental",
            "summary": "Get the value at the given index, returning nil if the index is out of bounds."
          },
          "locationInModule": {
            "filename": "src/std/array.ts",
            "line": 50
          },
          "name": "tryAt",
          "parameters": [
            {
              "docs": {
                "summary": "index of the value to get."
              },
              "name": "index",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.std.T1"
            }
          }
        }
      ],
      "name": "Array",
      "namespace": "std",
      "properties": [
        {
          "docs": {
            "returns": "the length of the array",
            "stability": "experimental",
            "summary": "The length of the array."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/array.ts",
            "line": 27
          },
          "name": "length",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "src/std/array:Array"
    },
    "@winglang/sdk.std.ArrayEntry": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "custom": {
          "typeparam": "T1"
        },
        "stability": "experimental",
        "summary": "Array entry representation."
      },
      "fqn": "@winglang/sdk.std.ArrayEntry",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/std/map.ts",
        "line": 14
      },
      "name": "ArrayEntry",
      "namespace": "std",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The entry key."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/map.ts",
            "line": 16
          },
          "name": "key",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The entry value."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/map.ts",
            "line": 18
          },
          "name": "value",
          "type": {
            "fqn": "@winglang/sdk.std.T1"
          }
        }
      ],
      "symbolId": "src/std/map:ArrayEntry"
    },
    "@winglang/sdk.std.AutoIdResource": {
      "abstract": true,
      "assembly": "@winglang/sdk",
      "base": "@winglang/sdk.std.Resource",
      "docs": {
        "custom": {
          "noinflight": "true"
        },
        "remarks": "Used by the Wing compiler to generate unique ids for auto generated resources\nfrom inflight function closures.",
        "stability": "experimental",
        "summary": "A resource that has an automatically generated id."
      },
      "fqn": "@winglang/sdk.std.AutoIdResource",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/std/resource.ts",
          "line": 249
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "idPrefix",
            "optional": true,
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/std/resource.ts",
        "line": 248
      },
      "name": "AutoIdResource",
      "namespace": "std",
      "symbolId": "src/std/resource:AutoIdResource"
    },
    "@winglang/sdk.std.Boolean": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "wingType": "bool"
        },
        "stability": "experimental",
        "summary": "Boolean."
      },
      "fqn": "@winglang/sdk.std.Boolean",
      "kind": "class",
      "locationInModule": {
        "filename": "src/std/bool.ts",
        "line": 9
      },
      "methods": [
        {
          "docs": {
            "returns": "a boolean.",
            "stability": "experimental",
            "summary": "Parse a boolean from Json."
          },
          "locationInModule": {
            "filename": "src/std/bool.ts",
            "line": 16
          },
          "name": "fromJson",
          "parameters": [
            {
              "docs": {
                "summary": "to parse boolean from."
              },
              "name": "json",
              "type": {
                "fqn": "@winglang/sdk.std.Json"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.std.JsonValidationOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        }
      ],
      "name": "Boolean",
      "namespace": "std",
      "symbolId": "src/std/bool:Boolean"
    },
    "@winglang/sdk.std.Datetime": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "wingType": "datetime"
        },
        "stability": "experimental",
        "summary": "Represents a local or UTC date object."
      },
      "fqn": "@winglang/sdk.std.Datetime",
      "interfaces": [
        "@winglang/sdk.std.ILiftable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "src/std/datetime.ts",
        "line": 47
      },
      "methods": [
        {
          "docs": {
            "returns": "a new `Datetime`",
            "stability": "experimental",
            "summary": "Create a Datetime from Datetime components."
          },
          "locationInModule": {
            "filename": "src/std/datetime.ts",
            "line": 101
          },
          "name": "fromComponents",
          "parameters": [
            {
              "docs": {
                "summary": "DatetimeComponents."
              },
              "name": "c",
              "type": {
                "fqn": "@winglang/sdk.std.DatetimeComponents"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.Datetime"
            }
          },
          "static": true
        },
        {
          "docs": {
            "returns": "a new `Datetime` instance.",
            "stability": "experimental",
            "summary": "Create a Datetime from a JavaScript Date object."
          },
          "locationInModule": {
            "filename": "src/std/datetime.ts",
            "line": 91
          },
          "name": "fromDate",
          "parameters": [
            {
              "docs": {
                "summary": "The JavaScript Date object."
              },
              "name": "date",
              "type": {
                "primitive": "date"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.Datetime"
            }
          },
          "static": true
        },
        {
          "docs": {
            "returns": "a new `Datetime` in UTC timezone",
            "stability": "experimental",
            "summary": "Create a Datetime from an ISO-8601 string."
          },
          "locationInModule": {
            "filename": "src/std/datetime.ts",
            "line": 81
          },
          "name": "fromIso",
          "parameters": [
            {
              "docs": {
                "summary": "ISO-8601 string."
              },
              "name": "iso",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.Datetime"
            }
          },
          "static": true
        },
        {
          "docs": {
            "returns": "a new `Datetime` from current time in system timezone",
            "stability": "experimental",
            "summary": "Create a Datetime from local system timezone."
          },
          "locationInModule": {
            "filename": "src/std/datetime.ts",
            "line": 68
          },
          "name": "systemNow",
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.Datetime"
            }
          },
          "static": true
        },
        {
          "docs": {
            "returns": "a new `Datetime` from current time in UTC timezone",
            "stability": "experimental",
            "summary": "Create a Datetime from UTC timezone."
          },
          "locationInModule": {
            "filename": "src/std/datetime.ts",
            "line": 59
          },
          "name": "utcNow",
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.Datetime"
            }
          },
          "static": true
        },
        {
          "docs": {
            "returns": "a ISO-8601 string representation of the datetime",
            "stability": "experimental",
            "summary": "Returns ISO-8601 string."
          },
          "locationInModule": {
            "filename": "src/std/datetime.ts",
            "line": 243
          },
          "name": "toIso",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "returns": "a datetime representing the datetime's date in UTC",
            "stability": "experimental",
            "summary": "Returns a Datetime represents the same date in utc."
          },
          "locationInModule": {
            "filename": "src/std/datetime.ts",
            "line": 234
          },
          "name": "toUtc",
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.Datetime"
            }
          }
        }
      ],
      "name": "Datetime",
      "namespace": "std",
      "properties": [
        {
          "docs": {
            "returns": "a number representing the datetime's day of month",
            "stability": "experimental",
            "summary": "Returns the day of month in the local machine time or in utc (1 - 31)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/datetime.ts",
            "line": 189
          },
          "name": "dayOfMonth",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "returns": "a number representing the datetime's day of week",
            "stability": "experimental",
            "summary": "Returns the day in month of the local machine time or in utc (0 - 6)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/datetime.ts",
            "line": 198
          },
          "name": "dayOfWeek",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "returns": "a number representing the datetime's hour",
            "stability": "experimental",
            "summary": "Returns the hour of the local machine time or in utc."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/datetime.ts",
            "line": 153
          },
          "name": "hours",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "returns": "a number representing the datetime's minute",
            "stability": "experimental",
            "summary": "Returns the minute of the local machine time or in utc."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/datetime.ts",
            "line": 162
          },
          "name": "min",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "returns": "a number representing the datetime's month",
            "stability": "experimental",
            "summary": "Returns the month of the local machine time or in utc (0 - 11)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/datetime.ts",
            "line": 207
          },
          "name": "month",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "returns": "a number representing the datetime's milliseconds",
            "stability": "experimental",
            "summary": "Returns the milliseconds of the local machine time or in utc  *."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/datetime.ts",
            "line": 180
          },
          "name": "ms",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "returns": "a number representing the datetime's seconds",
            "stability": "experimental",
            "summary": "Returns the seconds of the local machine time or in utc."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/datetime.ts",
            "line": 171
          },
          "name": "sec",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "returns": "a number representing the current timestamp in seconds",
            "stability": "experimental",
            "summary": "Return a timestamp of non-leap year seconds since epoch."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/datetime.ts",
            "line": 131
          },
          "name": "timestamp",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "returns": "a number representing the current timestamp in milliseconds",
            "stability": "experimental",
            "summary": "Return a timestamp of non-leap year milliseconds since epoch."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/datetime.ts",
            "line": 140
          },
          "name": "timestampMs",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "returns": "a number representing the datetime's offset in minutes from UTC",
            "stability": "experimental",
            "summary": "Returns the offset in minutes from UTC."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/datetime.ts",
            "line": 225
          },
          "name": "timezone",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "returns": "a number representing the datetime's year",
            "stability": "experimental",
            "summary": "Returns the year of the local machine time or in utc."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/datetime.ts",
            "line": 216
          },
          "name": "year",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "src/std/datetime:Datetime"
    },
    "@winglang/sdk.std.DatetimeComponents": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Interface that is used for setting Datetime date."
      },
      "fqn": "@winglang/sdk.std.DatetimeComponents",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/std/datetime.ts",
        "line": 8
      },
      "name": "DatetimeComponents",
      "namespace": "std",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Day."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/datetime.ts",
            "line": 20
          },
          "name": "day",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Hours."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/datetime.ts",
            "line": 24
          },
          "name": "hour",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Minutes."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/datetime.ts",
            "line": 28
          },
          "name": "min",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Month."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/datetime.ts",
            "line": 16
          },
          "name": "month",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Milliseconds."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/datetime.ts",
            "line": 36
          },
          "name": "ms",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Seconds."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/datetime.ts",
            "line": 32
          },
          "name": "sec",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Timezone offset in minutes from UTC."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/datetime.ts",
            "line": 40
          },
          "name": "tz",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Year."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/datetime.ts",
            "line": 12
          },
          "name": "year",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "src/std/datetime:DatetimeComponents"
    },
    "@winglang/sdk.std.Duration": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "wingType": "duration"
        },
        "stability": "experimental",
        "summary": "Represents a length of time."
      },
      "fqn": "@winglang/sdk.std.Duration",
      "interfaces": [
        "@winglang/sdk.std.ILiftable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "src/std/duration.ts",
        "line": 9
      },
      "methods": [
        {
          "docs": {
            "returns": "a new `Duration` representing `amount` Days.",
            "stability": "experimental",
            "summary": "Create a Duration representing an amount of days."
          },
          "locationInModule": {
            "filename": "src/std/duration.ts",
            "line": 43
          },
          "name": "fromDays",
          "parameters": [
            {
              "docs": {
                "summary": "the amount of Days the `Duration` will represent."
              },
              "name": "amount",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.Duration"
            }
          },
          "static": true
        },
        {
          "docs": {
            "returns": "a new `Duration` representing `amount` Hours.",
            "stability": "experimental",
            "summary": "Create a Duration representing an amount of hours."
          },
          "locationInModule": {
            "filename": "src/std/duration.ts",
            "line": 53
          },
          "name": "fromHours",
          "parameters": [
            {
              "docs": {
                "summary": "the amount of Hours the `Duration` will represent."
              },
              "name": "amount",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.Duration"
            }
          },
          "static": true
        },
        {
          "docs": {
            "returns": "a new `Duration` representing `amount` Milliseconds.",
            "stability": "experimental",
            "summary": "Create a Duration representing an amount of milliseconds."
          },
          "locationInModule": {
            "filename": "src/std/duration.ts",
            "line": 83
          },
          "name": "fromMilliseconds",
          "parameters": [
            {
              "docs": {
                "summary": "the amount of Milliseconds the `Duration` will represent."
              },
              "name": "amount",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.Duration"
            }
          },
          "static": true
        },
        {
          "docs": {
            "returns": "a new `Duration` representing `amount` Minutes.",
            "stability": "experimental",
            "summary": "Create a Duration representing an amount of minutes."
          },
          "locationInModule": {
            "filename": "src/std/duration.ts",
            "line": 63
          },
          "name": "fromMinutes",
          "parameters": [
            {
              "docs": {
                "summary": "the amount of Minutes the `Duration` will represent."
              },
              "name": "amount",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.Duration"
            }
          },
          "static": true
        },
        {
          "docs": {
            "returns": "a new `Duration` representing `amount` Months.",
            "stability": "experimental",
            "summary": "Create a Duration representing an amount of months."
          },
          "locationInModule": {
            "filename": "src/std/duration.ts",
            "line": 33
          },
          "name": "fromMonths",
          "parameters": [
            {
              "docs": {
                "summary": "the amount of Months the `Duration` will represent."
              },
              "name": "amount",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.Duration"
            }
          },
          "static": true
        },
        {
          "docs": {
            "returns": "a new `Duration` representing `amount` Seconds.",
            "stability": "experimental",
            "summary": "Create a Duration representing an amount of seconds."
          },
          "locationInModule": {
            "filename": "src/std/duration.ts",
            "line": 73
          },
          "name": "fromSeconds",
          "parameters": [
            {
              "docs": {
                "summary": "the amount of Seconds the `Duration` will represent."
              },
              "name": "amount",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.Duration"
            }
          },
          "static": true
        },
        {
          "docs": {
            "returns": "a new `Duration` representing `amount` Years.",
            "stability": "experimental",
            "summary": "Create a Duration representing an amount of years."
          },
          "locationInModule": {
            "filename": "src/std/duration.ts",
            "line": 23
          },
          "name": "fromYears",
          "parameters": [
            {
              "docs": {
                "summary": "the amount of Years the `Duration` will represent."
              },
              "name": "amount",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.Duration"
            }
          },
          "static": true
        }
      ],
      "name": "Duration",
      "namespace": "std",
      "properties": [
        {
          "docs": {
            "returns": "the value of this `Duration` expressed in Days.",
            "stability": "experimental",
            "summary": "Return the total number of days in this Duration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/duration.ts",
            "line": 130
          },
          "name": "days",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "returns": "the value of this `Duration` expressed in Hours.",
            "stability": "experimental",
            "summary": "Return the total number of hours in this Duration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/duration.ts",
            "line": 121
          },
          "name": "hours",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "returns": "the value of this `Duration` expressed in Milliseconds.",
            "stability": "experimental",
            "summary": "Return the total number of milliseconds in this Duration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/duration.ts",
            "line": 103
          },
          "name": "milliseconds",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "returns": "the value of this `Duration` expressed in Minutes.",
            "stability": "experimental",
            "summary": "Return the total number of minutes in this Duration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/duration.ts",
            "line": 112
          },
          "name": "minutes",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "returns": "the value of this `Duration` expressed in Months.",
            "stability": "experimental",
            "summary": "Return the total number of months in this Duration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/duration.ts",
            "line": 139
          },
          "name": "months",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "returns": "the value of this `Duration` expressed in Seconds.",
            "stability": "experimental",
            "summary": "Return the total number of seconds in this Duration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/duration.ts",
            "line": 92
          },
          "name": "seconds",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "returns": "the value of this `Duration` expressed in Years.",
            "stability": "experimental",
            "summary": "Return the total number of years in this Duration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/duration.ts",
            "line": 148
          },
          "name": "years",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "src/std/duration:Duration"
    },
    "@winglang/sdk.std.IApp": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Represents a Wing application."
      },
      "fqn": "@winglang/sdk.std.IApp",
      "interfaces": [
        "constructs.IConstruct"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/std/node.ts",
        "line": 455
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "remarks": "The newly generated ID is\nguaranteed to be unique within the given scope.\nIt will have the form '{prefix}{n}', where '{prefix}' is the given prefix and '{n}' is an\nascending sequence of integers starting from '0'.",
            "stability": "experimental",
            "summary": "Generate a unique ID for the given scope and prefix."
          },
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 491
          },
          "name": "makeId",
          "parameters": [
            {
              "docs": {
                "summary": "to guarantee uniqueness in."
              },
              "name": "scope",
              "type": {
                "fqn": "constructs.IConstruct"
              }
            },
            {
              "docs": {
                "summary": "prepended to the unique identifier."
              },
              "name": "prefix",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "IApp",
      "namespace": "std",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The directory of the entrypoint of the current program."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 475
          },
          "name": "entrypointDir",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "`true` if this is a testing environment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 470
          },
          "name": "isTestEnvironment",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The application's parameter registrar."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 480
          },
          "name": "parameters",
          "type": {
            "fqn": "@winglang/sdk.platform.ParameterRegistrar"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The `.wing` directory into which you can emit artifacts during preflight."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 465
          },
          "name": "workdir",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/std/node:IApp"
    },
    "@winglang/sdk.std.IHostedLiftable": {
      "assembly": "@winglang/sdk",
      "docs": {
        "remarks": "This is generally used so the host can set up permissions\nto access the lifted object inflight.",
        "stability": "experimental",
        "summary": "A liftable object that needs to be registered on the host as part of the lifting process."
      },
      "fqn": "@winglang/sdk.std.IHostedLiftable",
      "interfaces": [
        "@winglang/sdk.std.ILiftable"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/std/resource.ts",
        "line": 81
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "remarks": "The list of requested inflight methods\nneeded by the inflight host are given by `ops`.\n\nThis method is commonly used for adding permissions, environment variables, or\nother capabilities to the inflight host.",
            "stability": "experimental",
            "summary": "A hook called by the Wing compiler once for each inflight host that needs to use this object inflight."
          },
          "locationInModule": {
            "filename": "src/std/resource.ts",
            "line": 98
          },
          "name": "onLift",
          "parameters": [
            {
              "name": "host",
              "type": {
                "fqn": "@winglang/sdk.std.IInflightHost"
              }
            },
            {
              "name": "ops",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ]
        }
      ],
      "name": "IHostedLiftable",
      "namespace": "std",
      "symbolId": "src/std/resource:IHostedLiftable"
    },
    "@winglang/sdk.std.IInflight": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "link": "https://www.winglang.io/docs/concepts/inflights",
          "skipDocs": "true"
        },
        "remarks": "For example, handling API requests, processing queue messages, etc.\nInflight code can be executed on various compute platforms in the cloud,\nsuch as function services (such as AWS Lambda or Azure Functions),\ncontainers (such as ECS or Kubernetes), VMs or even physical servers.\n\nThis data represents the code together with the bindings to preflight data required to run.",
        "stability": "experimental",
        "summary": "Code that runs at runtime and implements your application's behavior."
      },
      "fqn": "@winglang/sdk.std.IInflight",
      "interfaces": [
        "@winglang/sdk.std.IHostedLiftable"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/std/resource.ts",
        "line": 29
      },
      "name": "IInflight",
      "namespace": "std",
      "symbolId": "src/std/resource:IInflight"
    },
    "@winglang/sdk.std.IInflightHost": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "skipDocs": "true"
        },
        "stability": "experimental",
        "summary": "A resource that can run inflight code."
      },
      "fqn": "@winglang/sdk.std.IInflightHost",
      "interfaces": [
        "@winglang/sdk.std.IResource"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/std/resource.ts",
        "line": 10
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Adds an environment variable to the host."
          },
          "locationInModule": {
            "filename": "src/std/resource.ts",
            "line": 14
          },
          "name": "addEnvironment",
          "parameters": [
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ]
        }
      ],
      "name": "IInflightHost",
      "namespace": "std",
      "symbolId": "src/std/resource:IInflightHost"
    },
    "@winglang/sdk.std.ILiftable": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "skipDocs": "true"
        },
        "stability": "experimental",
        "summary": "Data that can be lifted into inflight."
      },
      "fqn": "@winglang/sdk.std.ILiftable",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/std/resource.ts",
        "line": 63
      },
      "name": "ILiftable",
      "namespace": "std",
      "symbolId": "src/std/resource:ILiftable"
    },
    "@winglang/sdk.std.IResource": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "noinflight": "true",
          "skipDocs": "true"
        },
        "stability": "experimental",
        "summary": "Abstract interface for `Resource`."
      },
      "fqn": "@winglang/sdk.std.IResource",
      "interfaces": [
        "constructs.IConstruct",
        "@winglang/sdk.std.IHostedLiftable"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/std/resource.ts",
        "line": 110
      },
      "name": "IResource",
      "namespace": "std",
      "symbolId": "src/std/resource:IResource"
    },
    "@winglang/sdk.std.ITestClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "skipDocs": "true"
        },
        "stability": "experimental",
        "summary": "Inflight interface for `Test`."
      },
      "fqn": "@winglang/sdk.std.ITestClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/std/test.ts",
        "line": 24
      },
      "name": "ITestClient",
      "namespace": "std",
      "symbolId": "src/std/test:ITestClient"
    },
    "@winglang/sdk.std.ITestHandler": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "inflight": "`@winglang/sdk.std.ITestHandlerClient`",
          "skipDocs": "true"
        },
        "stability": "experimental",
        "summary": "Interface with an inflight \"handle\" method that can be used to construct a `std.Test`."
      },
      "fqn": "@winglang/sdk.std.ITestHandler",
      "interfaces": [
        "@winglang/sdk.std.IInflight"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/std/test.ts",
        "line": 80
      },
      "name": "ITestHandler",
      "namespace": "std",
      "symbolId": "src/std/test:ITestHandler"
    },
    "@winglang/sdk.std.ITestHandlerClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "skipDocs": "true"
        },
        "stability": "experimental",
        "summary": "Inflight client for `ITestHandler`."
      },
      "fqn": "@winglang/sdk.std.ITestHandlerClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/std/test.ts",
        "line": 86
      },
      "methods": [
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Inflight function that will be called when the test is run."
          },
          "locationInModule": {
            "filename": "src/std/test.ts",
            "line": 91
          },
          "name": "handle"
        }
      ],
      "name": "ITestHandlerClient",
      "namespace": "std",
      "symbolId": "src/std/test:ITestHandlerClient"
    },
    "@winglang/sdk.std.ITestRunnerClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "skipDocs": "true"
        },
        "stability": "experimental",
        "summary": "Inflight interface for `TestRunner`."
      },
      "fqn": "@winglang/sdk.std.ITestRunnerClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/std/test-runner.ts",
        "line": 135
      },
      "methods": [
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "returns": "A list of test names.",
            "stability": "experimental",
            "summary": "List all tests available for this test engine."
          },
          "locationInModule": {
            "filename": "src/std/test-runner.ts",
            "line": 141
          },
          "name": "listTests",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Run a test with a given path and return the result."
          },
          "locationInModule": {
            "filename": "src/std/test-runner.ts",
            "line": 147
          },
          "name": "runTest",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.TestResult"
            }
          }
        }
      ],
      "name": "ITestRunnerClient",
      "namespace": "std",
      "symbolId": "src/std/test-runner:ITestRunnerClient"
    },
    "@winglang/sdk.std.ImportInflightOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for the `@inflight` intrinsic."
      },
      "fqn": "@winglang/sdk.std.ImportInflightOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/std/resource.ts",
        "line": 279
      },
      "name": "ImportInflightOptions",
      "namespace": "std",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "\"default\"",
            "stability": "experimental",
            "summary": "Name of exported function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/resource.ts",
            "line": 284
          },
          "name": "export",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "* All possible operations will be available",
            "stability": "experimental",
            "summary": "Mapping of available symbols to a lift declaration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/resource.ts",
            "line": 289
          },
          "name": "lifts",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@winglang/sdk.std.LiftAnnotation"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "src/std/resource:ImportInflightOptions"
    },
    "@winglang/sdk.std.Json": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Immutable Json."
      },
      "fqn": "@winglang/sdk.std.Json",
      "kind": "class",
      "locationInModule": {
        "filename": "src/std/json.ts",
        "line": 32
      },
      "methods": [
        {
          "docs": {
            "custom": {
              "macro": "JSON.parse(JSON.stringify($args$))"
            },
            "returns": "the immutable copy of the Json",
            "stability": "experimental",
            "summary": "Creates an immutable deep copy of the Json."
          },
          "locationInModule": {
            "filename": "src/std/json.ts",
            "line": 115
          },
          "name": "deepCopy",
          "parameters": [
            {
              "docs": {
                "summary": "to copy."
              },
              "name": "json",
              "type": {
                "fqn": "@winglang/sdk.std.MutJson"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.Json"
            }
          },
          "static": true
        },
        {
          "docs": {
            "custom": {
              "macro": "JSON.parse(JSON.stringify($args$))"
            },
            "returns": "the mutable copy of the Json",
            "stability": "experimental",
            "summary": "Creates a mutable deep copy of the Json."
          },
          "locationInModule": {
            "filename": "src/std/json.ts",
            "line": 128
          },
          "name": "deepCopyMut",
          "parameters": [
            {
              "docs": {
                "summary": "to copy."
              },
              "name": "json",
              "type": {
                "fqn": "@winglang/sdk.std.Json"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.MutJson"
            }
          },
          "static": true
        },
        {
          "docs": {
            "custom": {
              "macro": "((json, key) => { delete json[key]; })($args$)"
            },
            "stability": "experimental",
            "summary": "Deletes a key in a given Json."
          },
          "locationInModule": {
            "filename": "src/std/json.ts",
            "line": 84
          },
          "name": "delete",
          "parameters": [
            {
              "docs": {
                "summary": "to delete key from."
              },
              "name": "json",
              "type": {
                "fqn": "@winglang/sdk.std.MutJson"
              }
            },
            {
              "docs": {
                "summary": "the key to delete."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "static": true
        },
        {
          "docs": {
            "returns": "the entries as Array<JsonEntry>",
            "stability": "experimental",
            "summary": "Returns the entries from the Json."
          },
          "locationInModule": {
            "filename": "src/std/json.ts",
            "line": 72
          },
          "name": "entries",
          "parameters": [
            {
              "docs": {
                "summary": "map to get the entries from."
              },
              "name": "json",
              "type": {
                "fqn": "@winglang/sdk.std.Json"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "@winglang/sdk.std.JsonEntry"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "custom": {
              "macro": "Object.keys($args$)"
            },
            "returns": "the keys as Array<String>",
            "stability": "experimental",
            "summary": "Returns the keys from the Json."
          },
          "locationInModule": {
            "filename": "src/std/json.ts",
            "line": 48
          },
          "name": "keys",
          "parameters": [
            {
              "docs": {
                "summary": "map to get the keys from."
              },
              "name": "json",
              "type": {
                "union": {
                  "types": [
                    {
                      "fqn": "@winglang/sdk.std.Json"
                    },
                    {
                      "fqn": "@winglang/sdk.std.MutJson"
                    }
                  ]
                }
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "custom": {
              "macro": "JSON.parse($args$)"
            },
            "returns": "Json representation of the string",
            "stability": "experimental",
            "summary": "Parse a string into a Json."
          },
          "locationInModule": {
            "filename": "src/std/json.ts",
            "line": 141
          },
          "name": "parse",
          "parameters": [
            {
              "docs": {
                "summary": "to parse as Json."
              },
              "name": "str",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.Json"
            }
          },
          "static": true
        },
        {
          "docs": {
            "custom": {
              "macro": "((json, opts) => { return JSON.stringify(json, null, opts?.indent) })($args$)"
            },
            "returns": "string representation of the Json",
            "stability": "experimental",
            "summary": "Formats Json as string."
          },
          "locationInModule": {
            "filename": "src/std/json.ts",
            "line": 98
          },
          "name": "stringify",
          "parameters": [
            {
              "docs": {
                "summary": "to format as string."
              },
              "name": "json",
              "type": {
                "union": {
                  "types": [
                    {
                      "fqn": "@winglang/sdk.std.Json"
                    },
                    {
                      "fqn": "@winglang/sdk.std.MutJson"
                    }
                  ]
                }
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.std.JsonStringifyOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "custom": {
              "macro": "((args) => { try { return (args === undefined) ? undefined : JSON.parse(args); } catch (err) { return undefined; } })($args$)"
            },
            "returns": "Json representation of the string or undefined if string is not parsable",
            "stability": "experimental",
            "summary": "Try to parse a string into a Json."
          },
          "locationInModule": {
            "filename": "src/std/json.ts",
            "line": 154
          },
          "name": "tryParse",
          "parameters": [
            {
              "docs": {
                "summary": "to parse as Json."
              },
              "name": "str",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.std.Json"
            }
          },
          "static": true
        },
        {
          "docs": {
            "custom": {
              "macro": "Object.values($args$)"
            },
            "returns": "the values as Array<Json>",
            "stability": "experimental",
            "summary": "Returns the values from the Json."
          },
          "locationInModule": {
            "filename": "src/std/json.ts",
            "line": 61
          },
          "name": "values",
          "parameters": [
            {
              "docs": {
                "summary": "map to get the values from."
              },
              "name": "json",
              "type": {
                "fqn": "@winglang/sdk.std.Json"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "@winglang/sdk.std.Json"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "custom": {
              "macro": "((arg) => { if (typeof arg !== \"boolean\") {throw new Error(\"unable to parse \" + typeof arg + \" \" + arg + \" as a boolean\")}; return JSON.parse(JSON.stringify(arg)) })($self$)"
            },
            "returns": "a boolean.",
            "stability": "experimental",
            "summary": "Convert Json element to boolean if possible."
          },
          "locationInModule": {
            "filename": "src/std/json.ts",
            "line": 277
          },
          "name": "asBool",
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "((arg) => { if (typeof arg !== \"number\") {throw new Error(\"unable to parse \" + typeof arg + \" \" + arg + \" as a number\")}; return JSON.parse(JSON.stringify(arg)) })($self$)"
            },
            "returns": "a number.",
            "stability": "experimental",
            "summary": "Convert Json element to number if possible."
          },
          "locationInModule": {
            "filename": "src/std/json.ts",
            "line": 255
          },
          "name": "asNum",
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "((arg) => { if (typeof arg !== \"string\") {throw new Error(\"unable to parse \" + typeof arg + \" \" + arg + \" as a string\")}; return JSON.parse(JSON.stringify(arg)) })($self$)"
            },
            "returns": "a string.",
            "stability": "experimental",
            "summary": "Convert Json element to string if possible."
          },
          "locationInModule": {
            "filename": "src/std/json.ts",
            "line": 233
          },
          "name": "asStr",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "((obj, args) => { if (obj[args] === undefined) throw new Error(`Json property \"${args}\" does not exist`); return obj[args] })($self$, $args$)",
              "throws": "Json property does not exist if the given key is not part of an existing property"
            },
            "returns": "The value associated with the specified Json key",
            "stability": "experimental",
            "summary": "Returns the value associated with the specified Json key."
          },
          "locationInModule": {
            "filename": "src/std/json.ts",
            "line": 181
          },
          "name": "get",
          "parameters": [
            {
              "docs": {
                "summary": "The key of the Json property."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.Json"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "((obj, args) => { if (obj[args] === undefined) throw new Error(\"Index out of bounds\"); return obj[args] })($self$, $args$)",
              "throws": "index out of bounds error if the given index does not exist for the Json Array"
            },
            "returns": "The element at given index in Json Array",
            "stability": "experimental",
            "summary": "Returns a specified element at a given index from Json Array."
          },
          "locationInModule": {
            "filename": "src/std/json.ts",
            "line": 195
          },
          "name": "getAt",
          "parameters": [
            {
              "docs": {
                "summary": "The index of the element in the Json Array to return."
              },
              "name": "index",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.Json"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "((obj, key) => { return obj.hasOwnProperty(key); })($self$,$args$)"
            },
            "returns": "Boolean value corresponding to whether the key exists",
            "stability": "experimental",
            "summary": "Checks if a Json object has a given key."
          },
          "locationInModule": {
            "filename": "src/std/json.ts",
            "line": 167
          },
          "name": "has",
          "parameters": [
            {
              "docs": {
                "summary": "The key to check."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "((arg) => { return (typeof arg === \"boolean\") ? JSON.parse(JSON.stringify(arg)) : undefined })($self$)"
            },
            "returns": "a boolean.",
            "stability": "experimental",
            "summary": "Convert Json element to boolean if possible."
          },
          "locationInModule": {
            "filename": "src/std/json.ts",
            "line": 288
          },
          "name": "tryAsBool",
          "returns": {
            "optional": true,
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "((arg) => { return (typeof arg === \"number\") ? JSON.parse(JSON.stringify(arg)) : undefined })($self$)"
            },
            "returns": "a number.",
            "stability": "experimental",
            "summary": "Convert Json element to number if possible."
          },
          "locationInModule": {
            "filename": "src/std/json.ts",
            "line": 266
          },
          "name": "tryAsNum",
          "returns": {
            "optional": true,
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "((arg) => { return (typeof arg === \"string\") ? JSON.parse(JSON.stringify(arg)) : undefined })($self$)"
            },
            "returns": "a string.",
            "stability": "experimental",
            "summary": "Convert Json element to string if possible."
          },
          "locationInModule": {
            "filename": "src/std/json.ts",
            "line": 244
          },
          "name": "tryAsStr",
          "returns": {
            "optional": true,
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "($self$)?.[$args$]"
            },
            "returns": "The element associated with the specified key, or undefined if the key can't be found",
            "stability": "experimental",
            "summary": "Optionally returns an specified element from the Json."
          },
          "locationInModule": {
            "filename": "src/std/json.ts",
            "line": 208
          },
          "name": "tryGet",
          "parameters": [
            {
              "docs": {
                "summary": "The key of the element to return."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.std.Json"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "($self$)?.[$args$]"
            },
            "returns": "The element at given index in Json Array, or undefined if index is not valid",
            "stability": "experimental",
            "summary": "Optionally returns a specified element at a given index from Json Array."
          },
          "locationInModule": {
            "filename": "src/std/json.ts",
            "line": 221
          },
          "name": "tryGetAt",
          "parameters": [
            {
              "docs": {
                "summary": "The index of the element in the Json Array to return."
              },
              "name": "index",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.std.Json"
            }
          }
        }
      ],
      "name": "Json",
      "namespace": "std",
      "symbolId": "src/std/json:Json"
    },
    "@winglang/sdk.std.JsonEntry": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Json entry representation."
      },
      "fqn": "@winglang/sdk.std.JsonEntry",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/std/json.ts",
        "line": 22
      },
      "name": "JsonEntry",
      "namespace": "std",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The entry key."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/json.ts",
            "line": 24
          },
          "name": "key",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The entry value."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/json.ts",
            "line": 26
          },
          "name": "value",
          "type": {
            "fqn": "@winglang/sdk.std.Json"
          }
        }
      ],
      "symbolId": "src/std/json:JsonEntry"
    },
    "@winglang/sdk.std.JsonSchema": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Struct Schema."
      },
      "fqn": "@winglang/sdk.std.JsonSchema",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/std/json_schema.ts",
          "line": 36
        },
        "parameters": [
          {
            "name": "schema",
            "type": {
              "fqn": "@winglang/sdk.std.Json"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/std/json_schema.ts",
        "line": 12
      },
      "methods": [
        {
          "docs": {
            "returns": "the schema as a string",
            "stability": "experimental",
            "summary": "Retrieve the json schema as a string."
          },
          "locationInModule": {
            "filename": "src/std/json_schema.ts",
            "line": 70
          },
          "name": "asStr",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "throws": "an error if the json object is not valid"
            },
            "stability": "experimental",
            "summary": "Attempt to validate a json object against the schema."
          },
          "locationInModule": {
            "filename": "src/std/json_schema.ts",
            "line": 47
          },
          "name": "validate",
          "parameters": [
            {
              "docs": {
                "summary": "the Json object to validate."
              },
              "name": "obj",
              "type": {
                "fqn": "@winglang/sdk.std.Json"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.std.JsonValidationOptions"
              }
            }
          ]
        }
      ],
      "name": "JsonSchema",
      "namespace": "std",
      "symbolId": "src/std/json_schema:JsonSchema"
    },
    "@winglang/sdk.std.JsonStringifyOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for stringify() method."
      },
      "fqn": "@winglang/sdk.std.JsonStringifyOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/std/json.ts",
        "line": 6
      },
      "name": "JsonStringifyOptions",
      "namespace": "std",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Indentation spaces number."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/json.ts",
            "line": 8
          },
          "name": "indent",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "src/std/json:JsonStringifyOptions"
    },
    "@winglang/sdk.std.JsonValidationOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for validating Json."
      },
      "fqn": "@winglang/sdk.std.JsonValidationOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/std/json.ts",
        "line": 14
      },
      "name": "JsonValidationOptions",
      "namespace": "std",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Unsafe mode to skip validation (may lead to runtime errors)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/json.ts",
            "line": 16
          },
          "name": "unsafe",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "src/std/json:JsonValidationOptions"
    },
    "@winglang/sdk.std.LiftAnnotation": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Annotations about preflight data and desired inflight operations."
      },
      "fqn": "@winglang/sdk.std.LiftAnnotation",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/std/resource.ts",
        "line": 258
      },
      "name": "LiftAnnotation",
      "namespace": "std",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Preflight object to lift."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/resource.ts",
            "line": 262
          },
          "name": "obj",
          "type": {
            "primitive": "any"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"obj\" If the object is a simple identifier, it will be used as the alias",
            "remarks": "Required if the object provided is not an identifier.",
            "stability": "experimental",
            "summary": "Name of the object in the inflight context."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/resource.ts",
            "line": 269
          },
          "name": "alias",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "* All possible operations will be available",
            "stability": "experimental",
            "summary": "Operations to lift on the object."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/resource.ts",
            "line": 275
          },
          "name": "ops",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "src/std/resource:LiftAnnotation"
    },
    "@winglang/sdk.std.LogLevel": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Log level."
      },
      "fqn": "@winglang/sdk.std.LogLevel",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/std/test-runner.ts",
        "line": 238
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Mostly used for debugging."
          },
          "name": "VERBOSE"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Information that is useful to developers."
          },
          "name": "INFO"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Warnings that are not errors, but may require attention."
          },
          "name": "WARNING"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Errors that should be addressed."
          },
          "name": "ERROR"
        }
      ],
      "name": "LogLevel",
      "namespace": "std",
      "symbolId": "src/std/test-runner:LogLevel"
    },
    "@winglang/sdk.std.Map": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "typeparam": "T1"
        },
        "stability": "experimental",
        "summary": "Immutable Map."
      },
      "fqn": "@winglang/sdk.std.Map",
      "kind": "class",
      "locationInModule": {
        "filename": "src/std/map.ts",
        "line": 26
      },
      "methods": [
        {
          "docs": {
            "custom": {
              "macro": "{...($self$)}"
            },
            "returns": "a MutableMap with the same values as this map",
            "stability": "experimental",
            "summary": "Create a mutable shallow copy of this map."
          },
          "locationInModule": {
            "filename": "src/std/map.ts",
            "line": 97
          },
          "name": "copyMut",
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.MutMap"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "Object.entries($self$).map(([key, value]) => ({ key, value }))"
            },
            "returns": "the entries as Array<ArrayEntry>",
            "stability": "experimental",
            "summary": "Returns the entries from the map."
          },
          "locationInModule": {
            "filename": "src/std/map.ts",
            "line": 130
          },
          "name": "entries",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "@winglang/sdk.std.ArrayEntry"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "((obj, key) => { if (!(key in obj)) throw new Error(`Map does not contain key: \"${key}\"`); return obj[key]; })($self$, $args$)"
            },
            "remarks": "If the value that is associated to the provided key is an object, then you will get a reference\nto that object and any change made to that object will effectively modify it inside the map.",
            "returns": "The element associated with the specified key, or throw an error if the key can't be found",
            "stability": "experimental",
            "summary": "Returns a specified element from the map."
          },
          "locationInModule": {
            "filename": "src/std/map.ts",
            "line": 59
          },
          "name": "get",
          "parameters": [
            {
              "docs": {
                "summary": "The key of the element to return."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.T1"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "($args$ in ($self$))"
            },
            "returns": "true if an element with the specified key exists in the map; otherwise false.",
            "stability": "experimental",
            "summary": "Returns a boolean indicating whether an element with the specified key exists or not."
          },
          "locationInModule": {
            "filename": "src/std/map.ts",
            "line": 85
          },
          "name": "has",
          "parameters": [
            {
              "docs": {
                "summary": "The key of the element to test for presence."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "Object.keys($self$)"
            },
            "returns": "an array containing the keys of this map",
            "stability": "experimental",
            "summary": "Returns the keys of this map."
          },
          "locationInModule": {
            "filename": "src/std/map.ts",
            "line": 108
          },
          "name": "keys",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "Object.keys($self$).length"
            },
            "remarks": "TODO: For now this has to be a method rather than a getter as macros only work on methods https://github.com/winglang/wing/issues/1658",
            "returns": "The number of elements in map",
            "stability": "experimental",
            "summary": "Returns the number of elements in the map."
          },
          "locationInModule": {
            "filename": "src/std/map.ts",
            "line": 44
          },
          "name": "size",
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "($self$)[$args$]"
            },
            "returns": "The element associated with the specified key, or undefined if the key can't be found",
            "stability": "experimental",
            "summary": "Optionally returns a specified element from the map."
          },
          "locationInModule": {
            "filename": "src/std/map.ts",
            "line": 72
          },
          "name": "tryGet",
          "parameters": [
            {
              "docs": {
                "summary": "The key of the element to return."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.std.T1"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "Object.values($self$)"
            },
            "returns": "an array of type T containing the values of this map",
            "stability": "experimental",
            "summary": "Returns the values of this map."
          },
          "locationInModule": {
            "filename": "src/std/map.ts",
            "line": 119
          },
          "name": "values",
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.Array"
            }
          }
        }
      ],
      "name": "Map",
      "namespace": "std",
      "symbolId": "src/std/map:Map"
    },
    "@winglang/sdk.std.MutArray": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "typeparam": "T1"
        },
        "stability": "experimental",
        "summary": "Mutable Array."
      },
      "fqn": "@winglang/sdk.std.MutArray",
      "kind": "class",
      "locationInModule": {
        "filename": "src/std/array.ts",
        "line": 150
      },
      "methods": [
        {
          "docs": {
            "custom": {
              "macro": "((arr, index) => { if (index < 0 || index >= arr.length) throw new Error(\"Index out of bounds\"); return arr[index]; })($self$, $args$)"
            },
            "returns": "the value at the given index",
            "stability": "experimental",
            "summary": "Get the value at the given index."
          },
          "locationInModule": {
            "filename": "src/std/array.ts",
            "line": 174
          },
          "name": "at",
          "parameters": [
            {
              "docs": {
                "summary": "index of the value to get."
              },
              "name": "index",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.T1"
            }
          }
        },
        {
          "docs": {
            "returns": "a new MutableArray with the values of this array followed by the values of arr",
            "stability": "experimental",
            "summary": "Merge arr to the end of this array."
          },
          "locationInModule": {
            "filename": "src/std/array.ts",
            "line": 185
          },
          "name": "concat",
          "parameters": [
            {
              "docs": {
                "summary": "array to merge."
              },
              "name": "arr",
              "type": {
                "fqn": "@winglang/sdk.std.MutArray"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.MutArray"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "$self$.includes($args$)"
            },
            "returns": "true if this array includes searchElement.",
            "stability": "experimental",
            "summary": "Checks if this array includes searchElement."
          },
          "locationInModule": {
            "filename": "src/std/array.ts",
            "line": 198
          },
          "name": "contains",
          "parameters": [
            {
              "docs": {
                "summary": "to search for."
              },
              "name": "searchElement",
              "type": {
                "fqn": "@winglang/sdk.std.T1"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "[...($self$)]"
            },
            "returns": "an ImmutableArray with the same values as this array",
            "stability": "experimental",
            "summary": "Create an immutable shallow copy of this array."
          },
          "locationInModule": {
            "filename": "src/std/array.ts",
            "line": 210
          },
          "name": "copy",
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.Array"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "$self$.indexOf($args$)"
            },
            "returns": "the index of the first occurrence of searchElement found, or -1 if not found.",
            "stability": "experimental",
            "summary": "Returns the index of the first occurrence of searchElement found."
          },
          "locationInModule": {
            "filename": "src/std/array.ts",
            "line": 222
          },
          "name": "indexOf",
          "parameters": [
            {
              "docs": {
                "summary": "to search for."
              },
              "name": "searchElement",
              "type": {
                "fqn": "@winglang/sdk.std.T1"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "((obj, args) => { if (args[0] < 0 || args[0] > $self$.length) throw new Error(\"Index out of bounds\"); obj.splice(args[0], 0, args[1]); })($self$, [$args$])",
              "throws": "index out of bounds error if the given index isn't valid"
            },
            "stability": "experimental",
            "summary": "Inserts a new value at the given index of an array."
          },
          "locationInModule": {
            "filename": "src/std/array.ts",
            "line": 311
          },
          "name": "insert",
          "parameters": [
            {
              "docs": {
                "summary": "the index to insert the value at."
              },
              "name": "index",
              "type": {
                "primitive": "number"
              }
            },
            {
              "docs": {
                "summary": "the value to insert at the given index."
              },
              "name": "value",
              "type": {
                "fqn": "@winglang/sdk.std.T1"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "If the array has only\none item, then that item will be returned without using the separator.",
            "returns": "a string containing the concatenated values in this array,\nseparated by commas or a specified separator string.",
            "stability": "experimental",
            "summary": "Returns a new string containing the concatenated values in this array, separated by commas or a specified separator string."
          },
          "locationInModule": {
            "filename": "src/std/array.ts",
            "line": 235
          },
          "name": "join",
          "parameters": [
            {
              "name": "separator",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "$self$.lastIndexOf($args$)"
            },
            "returns": "the index of the last occurrence of searchElement found, or -1 if not found.",
            "stability": "experimental",
            "summary": "Returns the index of the last occurrence of searchElement found."
          },
          "locationInModule": {
            "filename": "src/std/array.ts",
            "line": 248
          },
          "name": "lastIndexOf",
          "parameters": [
            {
              "docs": {
                "summary": "to search for."
              },
              "name": "searchElement",
              "type": {
                "fqn": "@winglang/sdk.std.T1"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "returns": "the value removed",
            "stability": "experimental",
            "summary": "Remove value from end of array."
          },
          "locationInModule": {
            "filename": "src/std/array.ts",
            "line": 269
          },
          "name": "pop",
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.T1"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "((obj, args) => { if (args[0] < 0 || args[0] >= $self$.length) throw new Error(\"Index out of bounds\"); return obj.splice(args[0], 1)[0]; })($self$, [$args$])",
              "throws": "index out of bounds error if the given index does not exist for the array"
            },
            "returns": "the value removed",
            "stability": "experimental",
            "summary": "Removes value from the given index of an array."
          },
          "locationInModule": {
            "filename": "src/std/array.ts",
            "line": 282
          },
          "name": "popAt",
          "parameters": [
            {
              "docs": {
                "summary": "the index to remove the value at."
              },
              "name": "index",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.T1"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "$self$.push($args$)"
            },
            "stability": "experimental",
            "summary": "Add values to end of array."
          },
          "locationInModule": {
            "filename": "src/std/array.ts",
            "line": 260
          },
          "name": "push",
          "parameters": [
            {
              "docs": {
                "summary": "values to add."
              },
              "name": "values",
              "type": {
                "fqn": "@winglang/sdk.std.T1"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "custom": {
              "macro": "((obj, args) => { if (obj.indexOf(args[0]) !== -1) { obj.splice(obj.indexOf(args[0]), 1); return true; } return false; })($self$, [$args$])"
            },
            "returns": "true if value was removed",
            "stability": "experimental",
            "summary": "Removes first occurrence of a given value in an array."
          },
          "locationInModule": {
            "filename": "src/std/array.ts",
            "line": 325
          },
          "name": "removeFirst",
          "parameters": [
            {
              "docs": {
                "summary": "the value to remove."
              },
              "name": "value",
              "type": {
                "fqn": "@winglang/sdk.std.T1"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "((obj, args) => { if (args[0] < 0 || args[0] >= $self$.length) throw new Error(\"Index out of bounds\"); obj[args[0]] = args[1]; })($self$, [$args$])",
              "throws": "index out of bounds error if the given index does not exist for the array"
            },
            "stability": "experimental",
            "summary": "Sets a new value at the given index of an array."
          },
          "locationInModule": {
            "filename": "src/std/array.ts",
            "line": 296
          },
          "name": "set",
          "parameters": [
            {
              "docs": {
                "summary": "the index to set the value at."
              },
              "name": "index",
              "type": {
                "primitive": "number"
              }
            },
            {
              "docs": {
                "summary": "the value to set at the given index."
              },
              "name": "value",
              "type": {
                "fqn": "@winglang/sdk.std.T1"
              }
            }
          ]
        },
        {
          "docs": {
            "custom": {
              "macro": "$self$.slice($args$)"
            },
            "returns": "a new array containing the sliced elements.",
            "stability": "experimental",
            "summary": "Returns a shallow copy of a portion of the array."
          },
          "locationInModule": {
            "filename": "src/std/array.ts",
            "line": 339
          },
          "name": "slice",
          "parameters": [
            {
              "docs": {
                "summary": "the beginning index of the slice, inclusive."
              },
              "name": "start",
              "optional": true,
              "type": {
                "primitive": "number"
              }
            },
            {
              "docs": {
                "summary": "the ending index of the slice, exclusive."
              },
              "name": "end",
              "optional": true,
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.MutArray"
            }
          }
        }
      ],
      "name": "MutArray",
      "namespace": "std",
      "properties": [
        {
          "docs": {
            "returns": "the length of the array",
            "stability": "experimental",
            "summary": "The length of the array."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/array.ts",
            "line": 164
          },
          "name": "length",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "src/std/array:MutArray"
    },
    "@winglang/sdk.std.MutJson": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Mutable Json."
      },
      "fqn": "@winglang/sdk.std.MutJson",
      "kind": "class",
      "locationInModule": {
        "filename": "src/std/json.ts",
        "line": 296
      },
      "methods": [
        {
          "docs": {
            "custom": {
              "macro": "((arg) => { if (typeof arg !== \"boolean\") {throw new Error(\"unable to parse \" + typeof arg + \" \" + arg + \" as a boolean\")}; return JSON.parse(JSON.stringify(arg)) })($self$)"
            },
            "returns": "a boolean.",
            "stability": "experimental",
            "summary": "Convert Json element to boolean if possible."
          },
          "locationInModule": {
            "filename": "src/std/json.ts",
            "line": 438
          },
          "name": "asBool",
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "((arg) => { if (typeof arg !== \"number\") {throw new Error(\"unable to parse \" + typeof arg + \" \" + arg + \" as a number\")}; return JSON.parse(JSON.stringify(arg)) })($self$)"
            },
            "returns": "a number.",
            "stability": "experimental",
            "summary": "Convert Json element to number if possible."
          },
          "locationInModule": {
            "filename": "src/std/json.ts",
            "line": 416
          },
          "name": "asNum",
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "((arg) => { if (typeof arg !== \"string\") {throw new Error(\"unable to parse \" + typeof arg + \" \" + arg + \" as a string\")}; return JSON.parse(JSON.stringify(arg)) })($self$)"
            },
            "returns": "a string.",
            "stability": "experimental",
            "summary": "Convert Json element to string if possible."
          },
          "locationInModule": {
            "filename": "src/std/json.ts",
            "line": 394
          },
          "name": "asStr",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "(delete ($self$)[$args$])"
            },
            "returns": "true if the given key is no longer present",
            "stability": "experimental",
            "summary": "Removes the specified element from a map."
          },
          "locationInModule": {
            "filename": "src/std/json.ts",
            "line": 462
          },
          "name": "delete",
          "parameters": [
            {
              "docs": {
                "summary": "The key."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "((obj, args) => { if (obj[args] === undefined) throw new Error(`Json property \"${args}\" does not exist`); return obj[args] })($self$, $args$)",
              "throws": "Json property does not exist if the given key is not part of an existing property"
            },
            "returns": "The value associated with the specified Json key",
            "stability": "experimental",
            "summary": "Returns the value associated with the specified Json key."
          },
          "locationInModule": {
            "filename": "src/std/json.ts",
            "line": 315
          },
          "name": "get",
          "parameters": [
            {
              "docs": {
                "summary": "The key of the Json property."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.MutJson"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "((obj, args) => { if (obj[args] === undefined) throw new Error(\"Index out of bounds\"); return obj[args] })($self$, $args$)",
              "throws": "index out of bounds error if the given index does not exist for the MutJson Array"
            },
            "returns": "The element at given index in MutJson Array",
            "stability": "experimental",
            "summary": "Returns a specified element at a given index from MutJson Array."
          },
          "locationInModule": {
            "filename": "src/std/json.ts",
            "line": 329
          },
          "name": "getAt",
          "parameters": [
            {
              "docs": {
                "summary": "The index of the element in the MutJson Array to return."
              },
              "name": "index",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.MutJson"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "((obj, key) => { return obj.hasOwnProperty(key); })($self$,$args$)"
            },
            "returns": "Boolean value corresponding to whether the key exists",
            "stability": "experimental",
            "summary": "Checks if a Json object has a given key."
          },
          "locationInModule": {
            "filename": "src/std/json.ts",
            "line": 475
          },
          "name": "has",
          "parameters": [
            {
              "docs": {
                "summary": "The key to check."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "((obj, key, value) => { obj[key] = value; })($self$, $args$)"
            },
            "stability": "experimental",
            "summary": "Adds or updates an element in MutJson with a specific key and value."
          },
          "locationInModule": {
            "filename": "src/std/json.ts",
            "line": 342
          },
          "name": "set",
          "parameters": [
            {
              "docs": {
                "summary": "The key of the element to add."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The value of the element to add."
              },
              "name": "value",
              "type": {
                "fqn": "@winglang/sdk.std.MutJson"
              }
            }
          ]
        },
        {
          "docs": {
            "custom": {
              "macro": "((obj, idx, value) => { obj[idx] = value; })($self$, $args$)"
            },
            "stability": "experimental",
            "summary": "Set element in MutJson Array with a specific key and value."
          },
          "locationInModule": {
            "filename": "src/std/json.ts",
            "line": 355
          },
          "name": "setAt",
          "parameters": [
            {
              "name": "index",
              "type": {
                "primitive": "number"
              }
            },
            {
              "docs": {
                "summary": "The value of the element to set."
              },
              "name": "value",
              "type": {
                "fqn": "@winglang/sdk.std.MutJson"
              }
            }
          ]
        },
        {
          "docs": {
            "custom": {
              "macro": "((arg) => { return (typeof arg === \"boolean\") ? JSON.parse(JSON.stringify(arg)) : undefined })($self$)"
            },
            "returns": "a boolean.",
            "stability": "experimental",
            "summary": "Convert Json element to boolean if possible."
          },
          "locationInModule": {
            "filename": "src/std/json.ts",
            "line": 449
          },
          "name": "tryAsBool",
          "returns": {
            "optional": true,
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "((arg) => { return (typeof arg === \"number\") ? JSON.parse(JSON.stringify(arg)) : undefined })($self$)"
            },
            "returns": "a number.",
            "stability": "experimental",
            "summary": "Convert Json element to number if possible."
          },
          "locationInModule": {
            "filename": "src/std/json.ts",
            "line": 427
          },
          "name": "tryAsNum",
          "returns": {
            "optional": true,
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "((arg) => { return (typeof arg === \"string\") ? JSON.parse(JSON.stringify(arg)) : undefined })($self$)"
            },
            "returns": "a string.",
            "stability": "experimental",
            "summary": "Convert Json element to string if possible."
          },
          "locationInModule": {
            "filename": "src/std/json.ts",
            "line": 405
          },
          "name": "tryAsStr",
          "returns": {
            "optional": true,
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "($self$)?.[$args$]"
            },
            "returns": "The element associated with the specified key, or undefined if the key can't be found",
            "stability": "experimental",
            "summary": "Optionally returns an specified element from the Json."
          },
          "locationInModule": {
            "filename": "src/std/json.ts",
            "line": 369
          },
          "name": "tryGet",
          "parameters": [
            {
              "docs": {
                "summary": "The key of the element to return."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.std.MutJson"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "($self$)?.[$args$]"
            },
            "returns": "The element at given index in Json Array, or undefined if index is not valid",
            "stability": "experimental",
            "summary": "Optionally returns a specified element at a given index from Json Array."
          },
          "locationInModule": {
            "filename": "src/std/json.ts",
            "line": 382
          },
          "name": "tryGetAt",
          "parameters": [
            {
              "docs": {
                "summary": "The index of the element in the Json Array to return."
              },
              "name": "index",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.std.MutJson"
            }
          }
        }
      ],
      "name": "MutJson",
      "namespace": "std",
      "symbolId": "src/std/json:MutJson"
    },
    "@winglang/sdk.std.MutMap": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "typeparam": "T1"
        },
        "stability": "experimental",
        "summary": "Mutable Map."
      },
      "fqn": "@winglang/sdk.std.MutMap",
      "kind": "class",
      "locationInModule": {
        "filename": "src/std/map.ts",
        "line": 140
      },
      "methods": [
        {
          "docs": {
            "custom": {
              "macro": "((map) => { for(const k in map){delete map[k]}; })($self$)"
            },
            "stability": "experimental",
            "summary": "Removes all elements."
          },
          "locationInModule": {
            "filename": "src/std/map.ts",
            "line": 167
          },
          "name": "clear"
        },
        {
          "docs": {
            "custom": {
              "macro": "({...($self$)})"
            },
            "returns": "an ImmutableMap with the same values as this map",
            "stability": "experimental",
            "summary": "Create an immutable shallow copy of this map."
          },
          "locationInModule": {
            "filename": "src/std/map.ts",
            "line": 178
          },
          "name": "copy",
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.Map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "(delete ($self$)[$args$])"
            },
            "returns": "true if the given key is no longer present",
            "stability": "experimental",
            "summary": "Removes the specified element from a map."
          },
          "locationInModule": {
            "filename": "src/std/map.ts",
            "line": 190
          },
          "name": "delete",
          "parameters": [
            {
              "docs": {
                "summary": "The key."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "Object.entries($self$).map(([key, value]) => ({ key, value }))"
            },
            "returns": "the entries as Array<ArrayEntry>",
            "stability": "experimental",
            "summary": "Returns the entries from the map."
          },
          "locationInModule": {
            "filename": "src/std/map.ts",
            "line": 281
          },
          "name": "entries",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "@winglang/sdk.std.ArrayEntry"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "((obj, key) => { if (!(key in obj)) throw new Error(`MutMap does not contain key: \"${key}\"`); return obj[key]; })($self$, $args$)"
            },
            "remarks": "If the value that is associated to the provided key is an object, then you will get a reference\nto that object and any change made to that object will effectively modify it inside the map.",
            "returns": "The element associated with the specified key, or throw an error if the key can't be found",
            "stability": "experimental",
            "summary": "Returns a specified element from the map."
          },
          "locationInModule": {
            "filename": "src/std/map.ts",
            "line": 206
          },
          "name": "get",
          "parameters": [
            {
              "docs": {
                "summary": "The key of the element to return."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.T1"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "($args$ in ($self$))"
            },
            "returns": "true if an element with the specified key exists in the map; otherwise false.",
            "stability": "experimental",
            "summary": "Returns a boolean indicating whether an element with the specified key exists or not."
          },
          "locationInModule": {
            "filename": "src/std/map.ts",
            "line": 232
          },
          "name": "has",
          "parameters": [
            {
              "docs": {
                "summary": "The key of the element to test for presence."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "Object.keys($self$)"
            },
            "returns": "an array containing the keys of this map",
            "stability": "experimental",
            "summary": "Returns the keys of this map."
          },
          "locationInModule": {
            "filename": "src/std/map.ts",
            "line": 259
          },
          "name": "keys",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "((obj, args) => { obj[args[0]] = args[1]; })($self$, [$args$])"
            },
            "remarks": "TODO: revisit this macro after we support indexed args https://github.com/winglang/wing/issues/1659",
            "stability": "experimental",
            "summary": "Adds or updates an entry in a Map object with a specified key and a value."
          },
          "locationInModule": {
            "filename": "src/std/map.ts",
            "line": 246
          },
          "name": "set",
          "parameters": [
            {
              "docs": {
                "summary": "The key of the element to add."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The value of the element to add."
              },
              "name": "value",
              "type": {
                "fqn": "@winglang/sdk.std.T1"
              }
            }
          ]
        },
        {
          "docs": {
            "custom": {
              "macro": "Object.keys($self$).length"
            },
            "remarks": "TODO: For now this has to be a method rather than a getter as macros only work on methods https://github.com/winglang/wing/issues/1658",
            "returns": "The number of elements in map",
            "stability": "experimental",
            "summary": "Returns the number of elements in the map."
          },
          "locationInModule": {
            "filename": "src/std/map.ts",
            "line": 158
          },
          "name": "size",
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "($self$)[$args$]"
            },
            "returns": "The element associated with the specified key, or undefined if the key can't be found",
            "stability": "experimental",
            "summary": "Optionally returns a specified element from the map."
          },
          "locationInModule": {
            "filename": "src/std/map.ts",
            "line": 219
          },
          "name": "tryGet",
          "parameters": [
            {
              "docs": {
                "summary": "The key of the element to return."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.std.T1"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "Object.values($self$)"
            },
            "returns": "an array containing of type T the values of this map",
            "stability": "experimental",
            "summary": "Returns the values of this map."
          },
          "locationInModule": {
            "filename": "src/std/map.ts",
            "line": 270
          },
          "name": "values",
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.Array"
            }
          }
        }
      ],
      "name": "MutMap",
      "namespace": "std",
      "symbolId": "src/std/map:MutMap"
    },
    "@winglang/sdk.std.MutSet": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "typeparam": "T1"
        },
        "stability": "experimental",
        "summary": "Mutable Set."
      },
      "fqn": "@winglang/sdk.std.MutSet",
      "kind": "class",
      "locationInModule": {
        "filename": "src/std/set.ts",
        "line": 70
      },
      "methods": [
        {
          "docs": {
            "returns": "true if the value was added, false if it was already in the set",
            "stability": "experimental",
            "summary": "Add value to set."
          },
          "locationInModule": {
            "filename": "src/std/set.ts",
            "line": 93
          },
          "name": "add",
          "parameters": [
            {
              "docs": {
                "summary": "value to add."
              },
              "name": "value",
              "type": {
                "fqn": "@winglang/sdk.std.T1"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.MutSet"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The clear() method removes all elements from a set."
          },
          "locationInModule": {
            "filename": "src/std/set.ts",
            "line": 101
          },
          "name": "clear"
        },
        {
          "docs": {
            "custom": {
              "macro": "new Set($self$)"
            },
            "returns": "an ImmutableSet with the same values as this set",
            "stability": "experimental",
            "summary": "Create an immutable shallow copy of this set."
          },
          "locationInModule": {
            "filename": "src/std/set.ts",
            "line": 112
          },
          "name": "copy",
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.Set"
            }
          }
        },
        {
          "docs": {
            "returns": "Returns `true` if `value` was already in the set; otherwise `false`.",
            "stability": "experimental",
            "summary": "Removes a specified value from a set, if it is in the set."
          },
          "locationInModule": {
            "filename": "src/std/set.ts",
            "line": 121
          },
          "name": "delete",
          "parameters": [
            {
              "docs": {
                "summary": "The value to remove from the set."
              },
              "name": "value",
              "type": {
                "fqn": "@winglang/sdk.std.T1"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "returns": "`true` if an element with the specified value exists in the set; otherwise `false`.",
            "stability": "experimental",
            "summary": "Returns a boolean indicating whether an element with the specified value exists in the set."
          },
          "locationInModule": {
            "filename": "src/std/set.ts",
            "line": 131
          },
          "name": "has",
          "parameters": [
            {
              "docs": {
                "summary": "The value to test for presence in the Set object."
              },
              "name": "value",
              "type": {
                "fqn": "@winglang/sdk.std.T1"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "[...($self$)]"
            },
            "returns": "an ImmutableArray with the same values as this set",
            "stability": "experimental",
            "summary": "Create an immutable array shallow copy of this set."
          },
          "locationInModule": {
            "filename": "src/std/set.ts",
            "line": 143
          },
          "name": "toArray",
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.Array"
            }
          }
        }
      ],
      "name": "MutSet",
      "namespace": "std",
      "properties": [
        {
          "docs": {
            "returns": "the length of the set",
            "stability": "experimental",
            "summary": "The length of the set."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/set.ts",
            "line": 84
          },
          "name": "size",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "src/std/set:MutSet"
    },
    "@winglang/sdk.std.Node": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "The internal node of a construct."
      },
      "fqn": "@winglang/sdk.std.Node",
      "kind": "class",
      "locationInModule": {
        "filename": "src/std/node.ts",
        "line": 22
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return the internal construct node."
          },
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 35
          },
          "name": "of",
          "parameters": [
            {
              "name": "construct",
              "type": {
                "fqn": "constructs.IConstruct"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.Node"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "A connection is a piece of\nmetadata describing how one construct is related to another construct.",
            "stability": "experimental",
            "summary": "Adds a connection between two constructs."
          },
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 106
          },
          "name": "addConnection",
          "parameters": [
            {
              "name": "props",
              "type": {
                "fqn": "@winglang/sdk.std.AddConnectionProps"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "An `IDependable`",
            "stability": "experimental",
            "summary": "Add an ordering dependency on another construct."
          },
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 338
          },
          "name": "addDependency",
          "parameters": [
            {
              "name": "deps",
              "type": {
                "fqn": "constructs.IDependable"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "remarks": "Entries are arbitrary values and will also include a stack trace to allow tracing back to\nthe code location for when the entry was added. It can be used, for example, to include source\nmapping in CloudFormation templates to improve diagnostics.",
            "stability": "experimental",
            "summary": "Adds a metadata entry to this construct."
          },
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 276
          },
          "name": "addMetadata",
          "parameters": [
            {
              "docs": {
                "summary": "a string denoting the type of metadata."
              },
              "name": "type",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "remarks": "If null/undefined, metadata will not be added.",
                "summary": "the value of the metadata (can be a Token)."
              },
              "name": "data",
              "type": {
                "primitive": "any"
              }
            },
            {
              "docs": {
                "summary": "options."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "constructs.MetadataOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "When `node.validate()` is called, the `validate()` method will be called on\nall validations and all errors will be returned.",
            "stability": "experimental",
            "summary": "Adds a validation to this construct."
          },
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 367
          },
          "name": "addValidation",
          "parameters": [
            {
              "docs": {
                "summary": "The validation object."
              },
              "name": "validation",
              "type": {
                "fqn": "constructs.IValidation"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return this construct and all of its children in the given order."
          },
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 217
          },
          "name": "findAll",
          "parameters": [
            {
              "name": "order",
              "optional": true,
              "type": {
                "fqn": "constructs.ConstructOrder"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "constructs.IConstruct"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "remarks": "Throws an error if the child is not found.",
            "returns": "Child with the given id.",
            "stability": "experimental",
            "summary": "Return a direct child by id."
          },
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 177
          },
          "name": "findChild",
          "parameters": [
            {
              "docs": {
                "summary": "Identifier of direct child."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "constructs.IConstruct"
            }
          }
        },
        {
          "docs": {
            "remarks": "Context is usually initialized at the root, but can be overridden at any point in the tree.",
            "returns": "The context value or throws error if there is no context value for this key",
            "stability": "experimental",
            "summary": "Retrieves a value from tree context if present. Otherwise, would throw an error."
          },
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 242
          },
          "name": "getContext",
          "parameters": [
            {
              "docs": {
                "summary": "The context key."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "remarks": "After this\ncall, no more children can be added to this construct or to any children.",
            "stability": "experimental",
            "summary": "Locks this construct from allowing more children to be added."
          },
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 388
          },
          "name": "lock"
        },
        {
          "docs": {
            "remarks": "Context must be set before any children are added, since children may consult context info during construction.\nIf the key already exists, it will be overridden.",
            "stability": "experimental",
            "summary": "This can be used to set contextual values."
          },
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 230
          },
          "name": "setContext",
          "parameters": [
            {
              "docs": {
                "summary": "The context key."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The context value."
              },
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ]
        },
        {
          "docs": {
            "returns": "the child if found, or undefined",
            "stability": "experimental",
            "summary": "Return a direct child by id, or undefined."
          },
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 165
          },
          "name": "tryFindChild",
          "parameters": [
            {
              "docs": {
                "summary": "Identifier of direct child."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "constructs.IConstruct"
            }
          }
        },
        {
          "docs": {
            "remarks": "Context is usually initialized at the root, but can be overridden at any point in the tree.",
            "returns": "The context value or `undefined` if there is no context value for this key.",
            "stability": "experimental",
            "summary": "Retrieves a value from tree context."
          },
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 254
          },
          "name": "tryGetContext",
          "parameters": [
            {
              "docs": {
                "summary": "The context key."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "returns": "Whether a child with the given name was deleted.",
            "stability": "experimental",
            "summary": "Remove the child with the given name, if present."
          },
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 355
          },
          "name": "tryRemoveChild",
          "parameters": [
            {
              "name": "childName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "remarks": "Invokes the `validate()` method on all validations added through\n`addValidation()`.",
            "returns": "an array of validation error messages associated with this\nconstruct.",
            "stability": "experimental",
            "summary": "Validates this construct."
          },
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 380
          },
          "name": "validate",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "Node",
      "namespace": "std",
      "properties": [
        {
          "docs": {
            "example": "c83a2846e506bcc5f10682b564084bca2d275709ee",
            "remarks": "Addresses are 42 characters hexadecimal strings. They begin with \"c8\"\nfollowed by 40 lowercase hexadecimal characters (0-9a-f).\n\nAddresses are calculated using a SHA-1 of the components of the construct\npath.\n\nTo enable refactorings of construct trees, constructs with the ID `Default`\nwill be excluded from the calculation. In those cases constructs in the\nsame tree may have the same addreess.",
            "stability": "experimental",
            "summary": "Returns an opaque tree-unique address for this construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 155
          },
          "name": "addr",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "remarks": "Similar to `root`.",
            "returns": "The root of the construct tree.",
            "stability": "experimental",
            "summary": "Returns the root of the construct tree (the `cloud.App` object)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 317
          },
          "name": "app",
          "type": {
            "fqn": "@winglang/sdk.std.IApp"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "All direct children of this construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 210
          },
          "name": "children",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "constructs.IConstruct"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return all dependencies registered on this node (non-recursive)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 345
          },
          "name": "dependencies",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "constructs.IConstruct"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "remarks": "This is a a scope-unique id. To obtain an app-unique id for this construct, use `addr`.",
            "stability": "experimental",
            "summary": "The id of this construct within the current scope."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 127
          },
          "name": "id",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns true if this construct or the scopes in which it is defined are locked."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 329
          },
          "name": "locked",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "remarks": "This can be used, for example, to implement support for deprecation notices, source mapping, etc.",
            "stability": "experimental",
            "summary": "An immutable array of metadata objects associated with this construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 262
          },
          "name": "metadata",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "constructs.MetadataEntry"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "remarks": "Components are separated by '/'.",
            "stability": "experimental",
            "summary": "The full, absolute path of this construct in the tree."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 136
          },
          "name": "path",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "remarks": "Similar to `app`.",
            "returns": "The root of the construct tree.",
            "stability": "experimental",
            "summary": "Returns the root of the construct tree (the `cloud.App` object)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 302
          },
          "name": "root",
          "type": {
            "fqn": "constructs.IConstruct"
          }
        },
        {
          "docs": {
            "returns": "a list of parent scopes. The last element in the list will always\nbe the current construct and the first element will be the root of the\ntree.",
            "stability": "experimental",
            "summary": "All parent scopes of this construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 291
          },
          "name": "scopes",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "constructs.IConstruct"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "remarks": "The value is `undefined` at the root of the construct scope tree.",
            "stability": "experimental",
            "summary": "Returns the scope in which this construct is defined."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 118
          },
          "name": "scope",
          "optional": true,
          "type": {
            "fqn": "constructs.IConstruct"
          }
        },
        {
          "docs": {
            "remarks": "Supported colors are:\n- orange\n- sky\n- emerald\n- lime\n- pink\n- amber\n- cyan\n- purple\n- red\n- violet\n- slate",
            "stability": "experimental",
            "summary": "The color of the construct for display purposes."
          },
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 81
          },
          "name": "color",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "throws": "if there is more than one child"
            },
            "remarks": "This is usually the construct that provides the bulk of the underlying functionality.\nUseful for modifications of the underlying construct that are not available at the higher levels.\nOverride the defaultChild property.\n\nThis should only be used in the cases where the correct\ndefault child is not named 'Resource' or 'Default' as it\nshould be.\n\nIf you set this to undefined, the default behavior of finding\nthe child named 'Resource' or 'Default' will be used.",
            "returns": "a construct or undefined if there is no default child",
            "stability": "experimental",
            "summary": "Returns the child construct that has the id `Default` or `Resource\"`."
          },
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 189
          },
          "name": "defaultChild",
          "optional": true,
          "type": {
            "fqn": "constructs.IConstruct"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Description of the construct for display purposes."
          },
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 54
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Whether the construct should be hidden by default in tree visualizations."
          },
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 64
          },
          "name": "hidden",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "remarks": "Supported icons are from Heroicons:\n- https://heroicons.com/\ne.g.\n- \"academic-cap\"",
            "stability": "experimental",
            "summary": "The icon of the construct for display purposes."
          },
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 90
          },
          "name": "icon",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The source file or library where the construct was defined."
          },
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 59
          },
          "name": "sourceModule",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Title of the construct for display purposes."
          },
          "locationInModule": {
            "filename": "src/std/node.ts",
            "line": 49
          },
          "name": "title",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/std/node:Node"
    },
    "@winglang/sdk.std.Number": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "wingType": "num"
        },
        "stability": "experimental",
        "summary": "Number."
      },
      "fqn": "@winglang/sdk.std.Number",
      "kind": "class",
      "locationInModule": {
        "filename": "src/std/number.ts",
        "line": 9
      },
      "methods": [
        {
          "docs": {
            "returns": "a number.",
            "stability": "experimental",
            "summary": "Parse a number from Json."
          },
          "locationInModule": {
            "filename": "src/std/number.ts",
            "line": 16
          },
          "name": "fromJson",
          "parameters": [
            {
              "docs": {
                "summary": "to parse number from."
              },
              "name": "json",
              "type": {
                "fqn": "@winglang/sdk.std.Json"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.std.JsonValidationOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "custom": {
              "macro": "((args) => { if (isNaN(args)) {throw new Error(\"unable to parse \\\"\" + args + \"\\\" as a number\")}; return Number(args) })($args$)"
            },
            "returns": "a number.",
            "stability": "experimental",
            "summary": "Parse a number from string."
          },
          "locationInModule": {
            "filename": "src/std/number.ts",
            "line": 33
          },
          "name": "fromStr",
          "parameters": [
            {
              "docs": {
                "summary": "to parse number from."
              },
              "name": "str",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        }
      ],
      "name": "Number",
      "namespace": "std",
      "symbolId": "src/std/number:Number"
    },
    "@winglang/sdk.std.Regex": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "wingType": "regex"
        },
        "stability": "experimental",
        "summary": "Represents a compiled regular expression pattern."
      },
      "fqn": "@winglang/sdk.std.Regex",
      "interfaces": [
        "@winglang/sdk.std.ILiftable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "src/std/regex.ts",
        "line": 9
      },
      "methods": [
        {
          "docs": {
            "returns": "A new `Regex` object representing the compiled pattern.",
            "stability": "experimental",
            "summary": "Compiles the provided regex pattern into a `Regex` object."
          },
          "locationInModule": {
            "filename": "src/std/regex.ts",
            "line": 22
          },
          "name": "compile",
          "parameters": [
            {
              "docs": {
                "summary": "The regex pattern to compile."
              },
              "name": "pattern",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.Regex"
            }
          },
          "static": true
        },
        {
          "docs": {
            "returns": "The first match if found, otherwise `undefined`.",
            "stability": "experimental",
            "summary": "Finds the first occurrence of the pattern within the text."
          },
          "locationInModule": {
            "filename": "src/std/regex.ts",
            "line": 56
          },
          "name": "find",
          "parameters": [
            {
              "docs": {
                "summary": "The text to search within."
              },
              "name": "text",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "remarks": "Returns an empty array if no matches are found.",
            "returns": "An array containing all matches found.",
            "stability": "experimental",
            "summary": "Finds all non-overlapping occurrences of the pattern within the text."
          },
          "locationInModule": {
            "filename": "src/std/regex.ts",
            "line": 114
          },
          "name": "findAll",
          "parameters": [
            {
              "docs": {
                "summary": "The text to search within."
              },
              "name": "text",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "remarks": "Indices are zero-based.",
            "returns": "An array containing arrays of start and end indices for each match found.",
            "stability": "experimental",
            "summary": "Finds the start and end index of all matches within the text."
          },
          "locationInModule": {
            "filename": "src/std/regex.ts",
            "line": 125
          },
          "name": "findAllIndex",
          "parameters": [
            {
              "docs": {
                "summary": "The text to search within."
              },
              "name": "text",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "collection": {
                    "elementtype": {
                      "primitive": "number"
                    },
                    "kind": "array"
                  }
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "returns": "An array containing the start and end index of the match if found, otherwise `undefined`.",
            "stability": "experimental",
            "summary": "Finds the start and end index of the first match within the text."
          },
          "locationInModule": {
            "filename": "src/std/regex.ts",
            "line": 66
          },
          "name": "findIndex",
          "parameters": [
            {
              "docs": {
                "summary": "The text to search within."
              },
              "name": "text",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "number"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "returns": "An array containing the match and all submatches.",
            "stability": "experimental",
            "summary": "Finds the first match and its submatches."
          },
          "locationInModule": {
            "filename": "src/std/regex.ts",
            "line": 76
          },
          "name": "findSubmatch",
          "parameters": [
            {
              "docs": {
                "summary": "The text to search within."
              },
              "name": "text",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "returns": "An array containing arrays of start and end indices for the match and all submatches.",
            "stability": "experimental",
            "summary": "Finds the start and end index of the match and all submatches."
          },
          "locationInModule": {
            "filename": "src/std/regex.ts",
            "line": 89
          },
          "name": "findSubmatchIndex",
          "parameters": [
            {
              "docs": {
                "summary": "The text to search within."
              },
              "name": "text",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "collection": {
                "elementtype": {
                  "collection": {
                    "elementtype": {
                      "primitive": "number"
                    },
                    "kind": "array"
                  }
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "returns": "The resulting text after all replacements.",
            "stability": "experimental",
            "summary": "Replaces all occurrences of the match with a replacement string."
          },
          "locationInModule": {
            "filename": "src/std/regex.ts",
            "line": 144
          },
          "name": "replaceAll",
          "parameters": [
            {
              "docs": {
                "summary": "The text to search and replace within."
              },
              "name": "text",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The replacement string."
              },
              "name": "replacement",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "returns": "`true` if there is a match, otherwise `false`.",
            "stability": "experimental",
            "summary": "Checks if the regular expression matches the provided text."
          },
          "locationInModule": {
            "filename": "src/std/regex.ts",
            "line": 47
          },
          "name": "test",
          "parameters": [
            {
              "docs": {
                "summary": "The text to check against."
              },
              "name": "text",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        }
      ],
      "name": "Regex",
      "namespace": "std",
      "symbolId": "src/std/regex:Regex"
    },
    "@winglang/sdk.std.Resource": {
      "abstract": true,
      "assembly": "@winglang/sdk",
      "base": "constructs.Construct",
      "docs": {
        "custom": {
          "noinflight": "true",
          "skipDocs": "true"
        },
        "stability": "experimental",
        "summary": "Shared behavior between all Wing SDK resources."
      },
      "fqn": "@winglang/sdk.std.Resource",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Creates a new construct node."
        },
        "locationInModule": {
          "filename": "src/construct.ts",
          "line": 498
        },
        "parameters": [
          {
            "docs": {
              "summary": "The scope in which to define this construct."
            },
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "docs": {
              "remarks": "Must be unique amongst siblings. If\nthe ID includes a path separator (`/`), then it will be replaced by double\ndash `--`.",
              "summary": "The scoped construct ID."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "interfaces": [
        "@winglang/sdk.std.IResource"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "src/std/resource.ts",
        "line": 127
      },
      "methods": [
        {
          "docs": {
            "remarks": "The list of requested inflight methods\nneeded by the inflight host are given by `ops`.\n\nThis method is commonly used for adding permissions, environment variables, or\nother capabilities to the inflight host.",
            "stability": "experimental",
            "summary": "A hook called by the Wing compiler once for each inflight host that needs to use this type inflight."
          },
          "locationInModule": {
            "filename": "src/std/resource.ts",
            "line": 136
          },
          "name": "onLiftType",
          "parameters": [
            {
              "name": "host",
              "type": {
                "fqn": "@winglang/sdk.std.IInflightHost"
              }
            },
            {
              "name": "ops",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "static": true
        },
        {
          "docs": {
            "remarks": "NOTE: This statement must be executed within an async context.",
            "stability": "experimental",
            "summary": "Generates an asynchronous JavaScript statement which can be used to create an inflight client for a resource."
          },
          "locationInModule": {
            "filename": "src/std/resource.ts",
            "line": 147
          },
          "name": "toInflight",
          "parameters": [
            {
              "name": "obj",
              "type": {
                "fqn": "@winglang/sdk.std.IResource"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "You can override this method to perform additional logic like granting\nIAM permissions to the host based on what methods are being called. But\nyou must call `super.bind(host, ops)` to ensure that the resource is\nactually bound.",
            "stability": "experimental",
            "summary": "A hook called by the Wing compiler once for each inflight host that needs to use this resource inflight."
          },
          "locationInModule": {
            "filename": "src/std/resource.ts",
            "line": 196
          },
          "name": "onLift",
          "overrides": "@winglang/sdk.std.IHostedLiftable",
          "parameters": [
            {
              "name": "host",
              "type": {
                "fqn": "@winglang/sdk.std.IInflightHost"
              }
            },
            {
              "name": "ops",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ]
        }
      ],
      "name": "Resource",
      "namespace": "std",
      "symbolId": "src/std/resource:Resource"
    },
    "@winglang/sdk.std.Set": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "typeparam": "T1"
        },
        "stability": "experimental",
        "summary": "Immutable Set."
      },
      "fqn": "@winglang/sdk.std.Set",
      "kind": "class",
      "locationInModule": {
        "filename": "src/std/set.ts",
        "line": 14
      },
      "methods": [
        {
          "docs": {
            "custom": {
              "macro": "new Set($self$)"
            },
            "returns": "a MutableSet with the same values as this set",
            "stability": "experimental",
            "summary": "Create a mutable shallow copy of this set."
          },
          "locationInModule": {
            "filename": "src/std/set.ts",
            "line": 49
          },
          "name": "copyMut",
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.MutSet"
            }
          }
        },
        {
          "docs": {
            "returns": "`true` if an element with the specified value exists in the set; otherwise `false`.",
            "stability": "experimental",
            "summary": "Returns a boolean indicating whether an element with the specified value exists in the set."
          },
          "locationInModule": {
            "filename": "src/std/set.ts",
            "line": 37
          },
          "name": "has",
          "parameters": [
            {
              "docs": {
                "summary": "The value to test for presence in the Set object."
              },
              "name": "value",
              "type": {
                "fqn": "@winglang/sdk.std.T1"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "[...($self$)]"
            },
            "returns": "an ImmutableArray with the same values as this set",
            "stability": "experimental",
            "summary": "Create an immutable array shallow copy of this set."
          },
          "locationInModule": {
            "filename": "src/std/set.ts",
            "line": 60
          },
          "name": "toArray",
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.Array"
            }
          }
        }
      ],
      "name": "Set",
      "namespace": "std",
      "properties": [
        {
          "docs": {
            "returns": "the length of the set",
            "stability": "experimental",
            "summary": "The length of the set."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/set.ts",
            "line": 28
          },
          "name": "size",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "src/std/set:Set"
    },
    "@winglang/sdk.std.String": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "wingType": "str"
        },
        "stability": "experimental",
        "summary": "String."
      },
      "fqn": "@winglang/sdk.std.String",
      "kind": "class",
      "locationInModule": {
        "filename": "src/std/string.ts",
        "line": 13
      },
      "methods": [
        {
          "docs": {
            "returns": "a string.",
            "stability": "experimental",
            "summary": "Parse string from Json."
          },
          "locationInModule": {
            "filename": "src/std/string.ts",
            "line": 27
          },
          "name": "fromJson",
          "parameters": [
            {
              "docs": {
                "summary": "to create string from."
              },
              "name": "json",
              "type": {
                "fqn": "@winglang/sdk.std.Json"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.std.JsonValidationOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "custom": {
              "macro": "((args) => { if ($args$ >= $self$.length || $args$ + $self$.length < 0) {throw new Error(\"index out of bounds\")}; return $self$.at($args$) })($args$)"
            },
            "returns": "string at the specified index.",
            "stability": "experimental",
            "summary": "Returns the character at the specified index."
          },
          "locationInModule": {
            "filename": "src/std/string.ts",
            "line": 53
          },
          "name": "at",
          "parameters": [
            {
              "docs": {
                "summary": "position of the character."
              },
              "name": "index",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "returns": "a new combined string.",
            "stability": "experimental",
            "summary": "Combines the text of two (or more) strings and returns a new string."
          },
          "locationInModule": {
            "filename": "src/std/string.ts",
            "line": 64
          },
          "name": "concat",
          "parameters": [
            {
              "docs": {
                "summary": "one or more strings to concatenate to this string."
              },
              "name": "strN",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "$self$.includes($args$)"
            },
            "returns": "true if string includes substring.",
            "stability": "experimental",
            "summary": "Checks if string includes substring."
          },
          "locationInModule": {
            "filename": "src/std/string.ts",
            "line": 77
          },
          "name": "contains",
          "parameters": [
            {
              "docs": {
                "summary": "substring to search for."
              },
              "name": "searchString",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "$self$.endsWith($args$)"
            },
            "returns": "true if string ends with searchString.",
            "stability": "experimental",
            "summary": "Does this string end with the given searchString?"
          },
          "locationInModule": {
            "filename": "src/std/string.ts",
            "line": 90
          },
          "name": "endsWith",
          "parameters": [
            {
              "docs": {
                "summary": "substring to search for."
              },
              "name": "searchString",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "$self$.indexOf($args$)"
            },
            "returns": "the index of the first occurrence of searchString found, or -1 if not found.",
            "stability": "experimental",
            "summary": "Returns the index of the first occurrence of searchString found."
          },
          "locationInModule": {
            "filename": "src/std/string.ts",
            "line": 103
          },
          "name": "indexOf",
          "parameters": [
            {
              "docs": {
                "summary": "substring to search for."
              },
              "name": "searchString",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "$self$.toLocaleLowerCase()"
            },
            "returns": "a new lower case string.",
            "stability": "experimental",
            "summary": "Returns this string in lower case."
          },
          "locationInModule": {
            "filename": "src/std/string.ts",
            "line": 115
          },
          "name": "lowercase",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "$self$.replace($args$)"
            },
            "returns": "The modified string after replacement.",
            "stability": "experimental",
            "summary": "Replaces the first occurence of a substring within a string."
          },
          "locationInModule": {
            "filename": "src/std/string.ts",
            "line": 165
          },
          "name": "replace",
          "parameters": [
            {
              "docs": {
                "summary": "The substring to search for."
              },
              "name": "searchString",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The replacement substring."
              },
              "name": "replaceString",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "$self$.replaceAll($args$)"
            },
            "returns": "The modified string after replacement.",
            "stability": "experimental",
            "summary": "Replaces all occurrences of a substring within a string."
          },
          "locationInModule": {
            "filename": "src/std/string.ts",
            "line": 180
          },
          "name": "replaceAll",
          "parameters": [
            {
              "docs": {
                "summary": "The substring to search for."
              },
              "name": "searchString",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The replacement substring."
              },
              "name": "replaceString",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "returns": "array of strings.",
            "stability": "experimental",
            "summary": "Splits string by separator."
          },
          "locationInModule": {
            "filename": "src/std/string.ts",
            "line": 125
          },
          "name": "split",
          "parameters": [
            {
              "docs": {
                "summary": "separator to split by."
              },
              "name": "separator",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "$self$.startsWith($args$)"
            },
            "returns": "true if string starts with searchString.",
            "stability": "experimental",
            "summary": "Does this string start with the given searchString?"
          },
          "locationInModule": {
            "filename": "src/std/string.ts",
            "line": 138
          },
          "name": "startsWith",
          "parameters": [
            {
              "docs": {
                "summary": "substring to search for."
              },
              "name": "searchString",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "returns": "the string contained from indexStart to indexEnd.",
            "stability": "experimental",
            "summary": "Returns a string between indexStart, indexEnd."
          },
          "locationInModule": {
            "filename": "src/std/string.ts",
            "line": 150
          },
          "name": "substring",
          "parameters": [
            {
              "docs": {
                "summary": "index of the character we slice at."
              },
              "name": "indexStart",
              "type": {
                "primitive": "number"
              }
            },
            {
              "docs": {
                "summary": "optional - index of the character we end slicing at."
              },
              "name": "indexEnd",
              "optional": true,
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "returns": "a new string with white spaces removed from start and end.",
            "stability": "experimental",
            "summary": "Removes white spaces from start and end of this string."
          },
          "locationInModule": {
            "filename": "src/std/string.ts",
            "line": 191
          },
          "name": "trim",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "macro": "$self$.toLocaleUpperCase()"
            },
            "returns": "a new upper case string.",
            "stability": "experimental",
            "summary": "Returns this string in upper case."
          },
          "locationInModule": {
            "filename": "src/std/string.ts",
            "line": 202
          },
          "name": "uppercase",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "String",
      "namespace": "std",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The length of the string."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/string.ts",
            "line": 41
          },
          "name": "length",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "src/std/string:String"
    },
    "@winglang/sdk.std.Struct": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "typeparam": "T1"
        },
        "stability": "experimental",
        "summary": "Shared behavior for all structs."
      },
      "fqn": "@winglang/sdk.std.Struct",
      "kind": "class",
      "locationInModule": {
        "filename": "src/std/struct.ts",
        "line": 11
      },
      "methods": [
        {
          "docs": {
            "custom": {
              "macro": "$self$._fromJson($args$)"
            },
            "stability": "experimental",
            "summary": "Converts a Json to a Struct."
          },
          "locationInModule": {
            "filename": "src/std/struct.ts",
            "line": 24
          },
          "name": "fromJson",
          "parameters": [
            {
              "name": "json",
              "type": {
                "fqn": "@winglang/sdk.std.Json"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.std.JsonValidationOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.T1"
            }
          },
          "static": true
        },
        {
          "docs": {
            "custom": {
              "macro": "$self$._fromJson(JSON.parse($args$))"
            },
            "stability": "experimental",
            "summary": "Parse a Json string into a Struct."
          },
          "locationInModule": {
            "filename": "src/std/struct.ts",
            "line": 45
          },
          "name": "parseJson",
          "parameters": [
            {
              "name": "json",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.T1"
            }
          },
          "static": true
        },
        {
          "docs": {
            "custom": {
              "macro": "$self$"
            },
            "stability": "experimental",
            "summary": "Retrieve the schema for this struct."
          },
          "locationInModule": {
            "filename": "src/std/struct.ts",
            "line": 64
          },
          "name": "schema",
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.std.JsonSchema"
            }
          },
          "static": true
        },
        {
          "docs": {
            "custom": {
              "macro": "$self$._tryFromJson($args$)"
            },
            "stability": "experimental",
            "summary": "Converts a Json to a Struct, returning nil if the Json is not valid."
          },
          "locationInModule": {
            "filename": "src/std/struct.ts",
            "line": 35
          },
          "name": "tryFromJson",
          "parameters": [
            {
              "name": "json",
              "type": {
                "fqn": "@winglang/sdk.std.Json"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.std.T1"
            }
          },
          "static": true
        },
        {
          "docs": {
            "custom": {
              "macro": "$self$._tryParseJson($args$)"
            },
            "stability": "experimental",
            "summary": "Parse a Json string into a Struct, returning nil if the Json is not valid."
          },
          "locationInModule": {
            "filename": "src/std/struct.ts",
            "line": 55
          },
          "name": "tryParseJson",
          "parameters": [
            {
              "name": "json",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.std.T1"
            }
          },
          "static": true
        }
      ],
      "name": "Struct",
      "namespace": "std",
      "symbolId": "src/std/struct:Struct"
    },
    "@winglang/sdk.std.T1": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "hidden": "true",
          "skipDocs": "true",
          "wingType": "&lt;T&gt;"
        },
        "remarks": "This type is replaced at compile time.",
        "stability": "experimental",
        "summary": "Generic type argument."
      },
      "fqn": "@winglang/sdk.std.T1",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/std/generics.ts",
        "line": 8
      },
      "name": "T1",
      "namespace": "std",
      "symbolId": "src/std/generics:T1"
    },
    "@winglang/sdk.std.Test": {
      "assembly": "@winglang/sdk",
      "base": "@winglang/sdk.std.Resource",
      "docs": {
        "custom": {
          "inflight": "`@winglang/sdk.std.ITestClient`",
          "skipDocs": "true"
        },
        "stability": "experimental",
        "summary": "A unit test."
      },
      "fqn": "@winglang/sdk.std.Test",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/std/test.ts",
          "line": 40
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "inflight",
            "type": {
              "fqn": "@winglang/sdk.std.ITestHandler"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.std.TestProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/std/test.ts",
        "line": 32
      },
      "name": "Test",
      "namespace": "std",
      "symbolId": "src/std/test:Test"
    },
    "@winglang/sdk.std.TestProps": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "custom": {
          "skipDocs": "true"
        },
        "remarks": "This is the type users see when constructing a std.Test instance.",
        "stability": "experimental",
        "summary": "Properties for `Test`."
      },
      "fqn": "@winglang/sdk.std.TestProps",
      "interfaces": [
        "@winglang/sdk.cloud.FunctionProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/std/test.ts",
        "line": 18
      },
      "name": "TestProps",
      "namespace": "std",
      "symbolId": "src/std/test:TestProps"
    },
    "@winglang/sdk.std.TestResult": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "custom": {
          "skipDocs": "true"
        },
        "stability": "experimental",
        "summary": "A result of a single test."
      },
      "fqn": "@winglang/sdk.std.TestResult",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/std/test-runner.ts",
        "line": 156
      },
      "name": "TestResult",
      "namespace": "std",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Whether the test passed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/test-runner.ts",
            "line": 165
          },
          "name": "pass",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The path of the test."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/test-runner.ts",
            "line": 160
          },
          "name": "path",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "List of traces emitted during the test."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/test-runner.ts",
            "line": 195
          },
          "name": "traces",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@winglang/sdk.std.Trace"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Place for extra test runner arguments that can be added through platforms."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/test-runner.ts",
            "line": 185
          },
          "name": "args",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The error message if the test failed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/test-runner.ts",
            "line": 190
          },
          "name": "error",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Whether the test contains code that is unsupported by the target."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/test-runner.ts",
            "line": 170
          },
          "name": "unsupported",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Unsupported method used in test."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/test-runner.ts",
            "line": 180
          },
          "name": "unsupportedOperation",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Unsupported resource tested."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/test-runner.ts",
            "line": 175
          },
          "name": "unsupportedResource",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/std/test-runner:TestResult"
    },
    "@winglang/sdk.std.TestRunner": {
      "assembly": "@winglang/sdk",
      "base": "@winglang/sdk.std.Resource",
      "docs": {
        "custom": {
          "abstract": "true",
          "inflight": "`@winglang/sdk.std.ITestRunnerClient`",
          "skipDocs": "true"
        },
        "stability": "experimental",
        "summary": "A test engine."
      },
      "fqn": "@winglang/sdk.std.TestRunner",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/std/test-runner.ts",
          "line": 69
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.std.TestRunnerProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/std/test-runner.ts",
        "line": 27
      },
      "methods": [
        {
          "docs": {
            "returns": "A list of tests.",
            "stability": "experimental",
            "summary": "Find all tests in the construct tree."
          },
          "locationInModule": {
            "filename": "src/std/test-runner.ts",
            "line": 123
          },
          "name": "findTests",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "@winglang/sdk.std.Test"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "TestRunner",
      "namespace": "std",
      "symbolId": "src/std/test-runner:TestRunner"
    },
    "@winglang/sdk.std.TestRunnerProps": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "custom": {
          "skipDocs": "true"
        },
        "stability": "experimental",
        "summary": "Properties for `TestRunner`."
      },
      "fqn": "@winglang/sdk.std.TestRunnerProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/std/test-runner.ts",
        "line": 18
      },
      "name": "TestRunnerProps",
      "namespace": "std",
      "symbolId": "src/std/test-runner:TestRunnerProps"
    },
    "@winglang/sdk.std.Trace": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "custom": {
          "skipDocs": "true"
        },
        "stability": "experimental",
        "summary": "A trace emitted during simulation."
      },
      "fqn": "@winglang/sdk.std.Trace",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/std/test-runner.ts",
        "line": 202
      },
      "name": "Trace",
      "namespace": "std",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "A JSON blob with structured data."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/test-runner.ts",
            "line": 206
          },
          "name": "data",
          "type": {
            "primitive": "any"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The log level of the event."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/test-runner.ts",
            "line": 226
          },
          "name": "level",
          "type": {
            "fqn": "@winglang/sdk.std.LogLevel"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The path of the resource that emitted the trace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/test-runner.ts",
            "line": 216
          },
          "name": "sourcePath",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The type of the source that emitted the trace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/test-runner.ts",
            "line": 211
          },
          "name": "sourceType",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "example": "2020-01-01T00:00:00.000Z",
            "stability": "experimental",
            "summary": "The timestamp of the event, in ISO 8601 format."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/test-runner.ts",
            "line": 232
          },
          "name": "timestamp",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The type of a trace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/std/test-runner.ts",
            "line": 221
          },
          "name": "type",
          "type": {
            "fqn": "@winglang/sdk.std.TraceType"
          }
        }
      ],
      "symbolId": "src/std/test-runner:Trace"
    },
    "@winglang/sdk.std.TraceType": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "skipDocs": "true"
        },
        "stability": "experimental",
        "summary": "The type of a trace."
      },
      "fqn": "@winglang/sdk.std.TraceType",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/std/test-runner.ts",
        "line": 264
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "A trace representing simulator activity."
          },
          "name": "SIMULATOR"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "A trace representing a resource activity."
          },
          "name": "RESOURCE"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "A trace representing a message emitted by the logger."
          },
          "name": "LOG"
        }
      ],
      "name": "TraceType",
      "namespace": "std",
      "symbolId": "src/std/test-runner:TraceType"
    },
    "@winglang/sdk.ui.Button": {
      "assembly": "@winglang/sdk",
      "base": "@winglang/sdk.ui.VisualComponent",
      "docs": {
        "custom": {
          "noinflight": "true"
        },
        "stability": "experimental",
        "summary": "A button can be used to perform an action."
      },
      "fqn": "@winglang/sdk.ui.Button",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/ui/button.ts",
          "line": 34
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "label",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "handler",
            "type": {
              "fqn": "@winglang/sdk.ui.IButtonHandler"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/ui/button.ts",
        "line": 17
      },
      "name": "Button",
      "namespace": "ui",
      "symbolId": "src/ui/button:Button"
    },
    "@winglang/sdk.ui.Field": {
      "assembly": "@winglang/sdk",
      "base": "@winglang/sdk.ui.VisualComponent",
      "docs": {
        "custom": {
          "noinflight": "true"
        },
        "stability": "experimental",
        "summary": "A field can be used to display a value."
      },
      "fqn": "@winglang/sdk.ui.Field",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/ui/field.ts",
          "line": 62
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "label",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "handler",
            "type": {
              "fqn": "@winglang/sdk.ui.IFieldHandler"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.ui.FieldProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/ui/field.ts",
        "line": 35
      },
      "name": "Field",
      "namespace": "ui",
      "symbolId": "src/ui/field:Field"
    },
    "@winglang/sdk.ui.FieldProps": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Props for `Field`."
      },
      "fqn": "@winglang/sdk.ui.FieldProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/ui/field.ts",
        "line": 16
      },
      "name": "FieldProps",
      "namespace": "ui",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Indicates that this field is a link."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/ui/field.ts",
            "line": 28
          },
          "name": "link",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no automatic refresh",
            "stability": "experimental",
            "summary": "How often the field should be refreshed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/ui/field.ts",
            "line": 21
          },
          "name": "refreshRate",
          "optional": true,
          "type": {
            "fqn": "@winglang/sdk.std.Duration"
          }
        }
      ],
      "symbolId": "src/ui/field:FieldProps"
    },
    "@winglang/sdk.ui.FileBrowser": {
      "assembly": "@winglang/sdk",
      "base": "@winglang/sdk.ui.VisualComponent",
      "docs": {
        "custom": {
          "noinflight": "true"
        },
        "stability": "experimental",
        "summary": "A file browser can be used to browse files."
      },
      "fqn": "@winglang/sdk.ui.FileBrowser",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/ui/file-browser.ts",
          "line": 66
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "label",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "handlers",
            "type": {
              "fqn": "@winglang/sdk.ui.FileBrowserHandlers"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/ui/file-browser.ts",
        "line": 40
      },
      "name": "FileBrowser",
      "namespace": "ui",
      "symbolId": "src/ui/file-browser:FileBrowser"
    },
    "@winglang/sdk.ui.FileBrowserHandlers": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "File browser handlers."
      },
      "fqn": "@winglang/sdk.ui.FileBrowserHandlers",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/ui/file-browser.ts",
        "line": 17
      },
      "name": "FileBrowserHandlers",
      "namespace": "ui",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Handler for deleting a file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/ui/file-browser.ts",
            "line": 25
          },
          "name": "delete",
          "type": {
            "fqn": "@winglang/sdk.ui.IFileBrowserDeleteHandler"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Handler for getting a file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/ui/file-browser.ts",
            "line": 29
          },
          "name": "get",
          "type": {
            "fqn": "@winglang/sdk.ui.IFileBrowserGetHandler"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Handler for listing files."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/ui/file-browser.ts",
            "line": 33
          },
          "name": "list",
          "type": {
            "fqn": "@winglang/sdk.ui.IFileBrowserListHandler"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Handler for putting a file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/ui/file-browser.ts",
            "line": 21
          },
          "name": "put",
          "type": {
            "fqn": "@winglang/sdk.ui.IFileBrowserPutHandler"
          }
        }
      ],
      "symbolId": "src/ui/file-browser:FileBrowserHandlers"
    },
    "@winglang/sdk.ui.HttpClient": {
      "assembly": "@winglang/sdk",
      "base": "@winglang/sdk.ui.VisualComponent",
      "docs": {
        "custom": {
          "noinflight": "true"
        },
        "stability": "experimental",
        "summary": "An HttpClient can be used to make HTTP requests."
      },
      "fqn": "@winglang/sdk.ui.HttpClient",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/ui/http-client.ts",
          "line": 43
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "label",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "getUrlHandler",
            "type": {
              "fqn": "@winglang/sdk.ui.IHttpClientGetUrlHandler"
            }
          },
          {
            "name": "getApiSpecHandler",
            "type": {
              "fqn": "@winglang/sdk.ui.IHttpClientGetApiSpecHandler"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/ui/http-client.ts",
        "line": 17
      },
      "name": "HttpClient",
      "namespace": "ui",
      "symbolId": "src/ui/http-client:HttpClient"
    },
    "@winglang/sdk.ui.IButtonHandler": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "inflight": "`@winglang/sdk.ui.IButtonHandlerClient`"
        },
        "stability": "experimental",
        "summary": "A resource with an inflight \"handle\" method that can be passed to `Button`."
      },
      "fqn": "@winglang/sdk.ui.IButtonHandler",
      "interfaces": [
        "@winglang/sdk.std.IInflight"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/ui/button.ts",
        "line": 66
      },
      "name": "IButtonHandler",
      "namespace": "ui",
      "symbolId": "src/ui/button:IButtonHandler"
    },
    "@winglang/sdk.ui.IButtonHandlerClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Inflight client for `IButtonHandler`."
      },
      "fqn": "@winglang/sdk.ui.IButtonHandlerClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/ui/button.ts",
        "line": 71
      },
      "methods": [
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Function that peforms an action."
          },
          "locationInModule": {
            "filename": "src/ui/button.ts",
            "line": 76
          },
          "name": "handle"
        }
      ],
      "name": "IButtonHandlerClient",
      "namespace": "ui",
      "symbolId": "src/ui/button:IButtonHandlerClient"
    },
    "@winglang/sdk.ui.IFieldHandler": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "inflight": "`@winglang/sdk.ui.IFieldHandlerClient`"
        },
        "stability": "experimental",
        "summary": "A resource with an inflight \"handle\" method that can be passed to `addField`."
      },
      "fqn": "@winglang/sdk.ui.IFieldHandler",
      "interfaces": [
        "@winglang/sdk.std.IInflight"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/ui/field.ts",
        "line": 100
      },
      "name": "IFieldHandler",
      "namespace": "ui",
      "symbolId": "src/ui/field:IFieldHandler"
    },
    "@winglang/sdk.ui.IFieldHandlerClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Inflight client for `IFieldHandler`."
      },
      "fqn": "@winglang/sdk.ui.IFieldHandlerClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/ui/field.ts",
        "line": 105
      },
      "methods": [
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Function that returns a string to display."
          },
          "locationInModule": {
            "filename": "src/ui/field.ts",
            "line": 110
          },
          "name": "handle",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "IFieldHandlerClient",
      "namespace": "ui",
      "symbolId": "src/ui/field:IFieldHandlerClient"
    },
    "@winglang/sdk.ui.IFileBrowserDeleteHandler": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "inflight": "`@winglang/sdk.ui.IFileBrowserDeleteHandlerClient`"
        },
        "stability": "experimental",
        "summary": "A resource with an inflight \"handle\" method that can be passed to `IFileBrowser`."
      },
      "fqn": "@winglang/sdk.ui.IFileBrowserDeleteHandler",
      "interfaces": [
        "@winglang/sdk.std.IInflight"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/ui/file-browser.ts",
        "line": 189
      },
      "name": "IFileBrowserDeleteHandler",
      "namespace": "ui",
      "symbolId": "src/ui/file-browser:IFileBrowserDeleteHandler"
    },
    "@winglang/sdk.ui.IFileBrowserDeleteHandlerClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Inflight client for `IFileBrowserDeleteHandler`."
      },
      "fqn": "@winglang/sdk.ui.IFileBrowserDeleteHandlerClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/ui/file-browser.ts",
        "line": 219
      },
      "methods": [
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Function that performs an action."
          },
          "locationInModule": {
            "filename": "src/ui/file-browser.ts",
            "line": 224
          },
          "name": "handle",
          "parameters": [
            {
              "name": "fileName",
              "type": {
                "primitive": "string"
              }
            }
          ]
        }
      ],
      "name": "IFileBrowserDeleteHandlerClient",
      "namespace": "ui",
      "symbolId": "src/ui/file-browser:IFileBrowserDeleteHandlerClient"
    },
    "@winglang/sdk.ui.IFileBrowserGetHandler": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "inflight": "`@winglang/sdk.ui.IFileBrowserGetHandlerClient`"
        },
        "stability": "experimental",
        "summary": "A resource with an inflight \"handle\" method that can be passed to `IFileBrowser`."
      },
      "fqn": "@winglang/sdk.ui.IFileBrowserGetHandler",
      "interfaces": [
        "@winglang/sdk.std.IInflight"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/ui/file-browser.ts",
        "line": 167
      },
      "name": "IFileBrowserGetHandler",
      "namespace": "ui",
      "symbolId": "src/ui/file-browser:IFileBrowserGetHandler"
    },
    "@winglang/sdk.ui.IFileBrowserGetHandlerClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Inflight client for `IFileBrowserGetHandler`."
      },
      "fqn": "@winglang/sdk.ui.IFileBrowserGetHandlerClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/ui/file-browser.ts",
        "line": 208
      },
      "methods": [
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Function that performs an action."
          },
          "locationInModule": {
            "filename": "src/ui/file-browser.ts",
            "line": 213
          },
          "name": "handle",
          "parameters": [
            {
              "name": "fileName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "IFileBrowserGetHandlerClient",
      "namespace": "ui",
      "symbolId": "src/ui/file-browser:IFileBrowserGetHandlerClient"
    },
    "@winglang/sdk.ui.IFileBrowserListHandler": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "inflight": "`@winglang/sdk.ui.IFileBrowserListHandlerClient`"
        },
        "stability": "experimental",
        "summary": "A resource with an inflight \"handle\" method that can be passed to `IFileBrowser`."
      },
      "fqn": "@winglang/sdk.ui.IFileBrowserListHandler",
      "interfaces": [
        "@winglang/sdk.std.IInflight"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/ui/file-browser.ts",
        "line": 178
      },
      "name": "IFileBrowserListHandler",
      "namespace": "ui",
      "symbolId": "src/ui/file-browser:IFileBrowserListHandler"
    },
    "@winglang/sdk.ui.IFileBrowserListHandlerClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Inflight client for `IFileBrowserListHandler`."
      },
      "fqn": "@winglang/sdk.ui.IFileBrowserListHandlerClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/ui/file-browser.ts",
        "line": 230
      },
      "methods": [
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Function that performs an action."
          },
          "locationInModule": {
            "filename": "src/ui/file-browser.ts",
            "line": 235
          },
          "name": "handle",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "IFileBrowserListHandlerClient",
      "namespace": "ui",
      "symbolId": "src/ui/file-browser:IFileBrowserListHandlerClient"
    },
    "@winglang/sdk.ui.IFileBrowserPutHandler": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "inflight": "`@winglang/sdk.ui.IFileBrowserPutHandlerClient`"
        },
        "stability": "experimental",
        "summary": "A resource with an inflight \"handle\" method that can be passed to `IFileBrowser`."
      },
      "fqn": "@winglang/sdk.ui.IFileBrowserPutHandler",
      "interfaces": [
        "@winglang/sdk.std.IInflight"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/ui/file-browser.ts",
        "line": 156
      },
      "name": "IFileBrowserPutHandler",
      "namespace": "ui",
      "symbolId": "src/ui/file-browser:IFileBrowserPutHandler"
    },
    "@winglang/sdk.ui.IFileBrowserPutHandlerClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Inflight client for `IFileBrowserVoidHandler`."
      },
      "fqn": "@winglang/sdk.ui.IFileBrowserPutHandlerClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/ui/file-browser.ts",
        "line": 197
      },
      "methods": [
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Function that performs an action."
          },
          "locationInModule": {
            "filename": "src/ui/file-browser.ts",
            "line": 202
          },
          "name": "handle",
          "parameters": [
            {
              "name": "fileName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "fileContent",
              "type": {
                "primitive": "string"
              }
            }
          ]
        }
      ],
      "name": "IFileBrowserPutHandlerClient",
      "namespace": "ui",
      "symbolId": "src/ui/file-browser:IFileBrowserPutHandlerClient"
    },
    "@winglang/sdk.ui.IHttpClientGetApiSpecHandler": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "inflight": "`@winglang/sdk.ui.IHttpClientGetApiSpecHandlerClient`"
        },
        "stability": "experimental",
        "summary": "A resource with an inflight \"handle\" method that can be passed to `IHttpClient`."
      },
      "fqn": "@winglang/sdk.ui.IHttpClientGetApiSpecHandler",
      "interfaces": [
        "@winglang/sdk.std.IInflight"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/ui/http-client.ts",
        "line": 91
      },
      "name": "IHttpClientGetApiSpecHandler",
      "namespace": "ui",
      "symbolId": "src/ui/http-client:IHttpClientGetApiSpecHandler"
    },
    "@winglang/sdk.ui.IHttpClientGetApiSpecHandlerClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Inflight client for `IHttpClientGetApiSpecHandler`."
      },
      "fqn": "@winglang/sdk.ui.IHttpClientGetApiSpecHandlerClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/ui/http-client.ts",
        "line": 107
      },
      "methods": [
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Function that returns the OpenAPI spec."
          },
          "locationInModule": {
            "filename": "src/ui/http-client.ts",
            "line": 112
          },
          "name": "handle",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "IHttpClientGetApiSpecHandlerClient",
      "namespace": "ui",
      "symbolId": "src/ui/http-client:IHttpClientGetApiSpecHandlerClient"
    },
    "@winglang/sdk.ui.IHttpClientGetUrlHandler": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "inflight": "`@winglang/sdk.ui.IHttpClientGetUrlHandlerClient`"
        },
        "stability": "experimental",
        "summary": "A resource with an inflight \"handle\" method that can be passed to `IHttpClient`."
      },
      "fqn": "@winglang/sdk.ui.IHttpClientGetUrlHandler",
      "interfaces": [
        "@winglang/sdk.std.IInflight"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/ui/http-client.ts",
        "line": 83
      },
      "name": "IHttpClientGetUrlHandler",
      "namespace": "ui",
      "symbolId": "src/ui/http-client:IHttpClientGetUrlHandler"
    },
    "@winglang/sdk.ui.IHttpClientGetUrlHandlerClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Inflight client for `IHttpClientGetUrlHandler`."
      },
      "fqn": "@winglang/sdk.ui.IHttpClientGetUrlHandlerClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/ui/http-client.ts",
        "line": 96
      },
      "methods": [
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Function that returns the URL to make a request to."
          },
          "locationInModule": {
            "filename": "src/ui/http-client.ts",
            "line": 101
          },
          "name": "handle",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "IHttpClientGetUrlHandlerClient",
      "namespace": "ui",
      "symbolId": "src/ui/http-client:IHttpClientGetUrlHandlerClient"
    },
    "@winglang/sdk.ui.Section": {
      "assembly": "@winglang/sdk",
      "base": "@winglang/sdk.ui.VisualComponent",
      "docs": {
        "custom": {
          "noinflight": "true"
        },
        "stability": "experimental",
        "summary": "A section can be used to group other visual components."
      },
      "fqn": "@winglang/sdk.ui.Section",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/ui/section.ts",
          "line": 46
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.ui.SectionProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/ui/section.ts",
        "line": 28
      },
      "methods": [
        {
          "docs": {
            "remarks": "The components\nwill be rendered in the order they were added.",
            "stability": "experimental",
            "summary": "Adds a visual component to the section."
          },
          "locationInModule": {
            "filename": "src/ui/section.ts",
            "line": 57
          },
          "name": "add",
          "parameters": [
            {
              "name": "components",
              "type": {
                "fqn": "@winglang/sdk.ui.VisualComponent"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "remarks": "Shorthand for `add(new ui.Button(...))`.",
            "stability": "experimental",
            "summary": "Adds a button to the section."
          },
          "locationInModule": {
            "filename": "src/ui/section.ts",
            "line": 72
          },
          "name": "addButton",
          "parameters": [
            {
              "name": "label",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "handler",
              "type": {
                "fqn": "@winglang/sdk.ui.IButtonHandler"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "Shorthand for `add(new ui.Field(...))`.",
            "stability": "experimental",
            "summary": "Adds a field to the section."
          },
          "locationInModule": {
            "filename": "src/ui/section.ts",
            "line": 80
          },
          "name": "addField",
          "parameters": [
            {
              "name": "label",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "handler",
              "type": {
                "fqn": "@winglang/sdk.ui.IFieldHandler"
              }
            },
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.ui.FieldProps"
              }
            }
          ]
        }
      ],
      "name": "Section",
      "namespace": "ui",
      "symbolId": "src/ui/section:Section"
    },
    "@winglang/sdk.ui.SectionProps": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Props for `Section`."
      },
      "fqn": "@winglang/sdk.ui.SectionProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/ui/section.ts",
        "line": 16
      },
      "name": "SectionProps",
      "namespace": "ui",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- no label",
            "stability": "experimental",
            "summary": "The label of the section."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/ui/section.ts",
            "line": 21
          },
          "name": "label",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/ui/section:SectionProps"
    },
    "@winglang/sdk.ui.ValueField": {
      "assembly": "@winglang/sdk",
      "base": "@winglang/sdk.ui.Field",
      "docs": {
        "custom": {
          "noinflight": "true"
        },
        "stability": "experimental",
        "summary": "A value field can be used to display a string value."
      },
      "fqn": "@winglang/sdk.ui.ValueField",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/ui/field.ts",
          "line": 118
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "label",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "value",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/ui/field.ts",
        "line": 117
      },
      "name": "ValueField",
      "namespace": "ui",
      "symbolId": "src/ui/field:ValueField"
    },
    "@winglang/sdk.ui.VisualComponent": {
      "abstract": true,
      "assembly": "@winglang/sdk",
      "base": "@winglang/sdk.std.Resource",
      "docs": {
        "custom": {
          "noinflight": "true"
        },
        "remarks": "This is a base class for all other visual components.",
        "stability": "experimental",
        "summary": "A visual component is used to customize the view of other classes in the Wing Console."
      },
      "fqn": "@winglang/sdk.ui.VisualComponent",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/ui/base.ts",
          "line": 30
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/ui/base.ts",
        "line": 15
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns whether the given construct is a visual component."
          },
          "locationInModule": {
            "filename": "src/ui/base.ts",
            "line": 19
          },
          "name": "isVisualComponent",
          "parameters": [
            {
              "name": "c",
              "type": {
                "fqn": "constructs.IConstruct"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        }
      ],
      "name": "VisualComponent",
      "namespace": "ui",
      "symbolId": "src/ui/base:VisualComponent"
    },
    "@winglang/sdk.util.ChildProcess": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Handle to a running child process."
      },
      "fqn": "@winglang/sdk.util.ChildProcess",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/util/child-process.ts",
          "line": 37
        },
        "parameters": [
          {
            "name": "program",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "args",
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          {
            "name": "opts",
            "optional": true,
            "type": {
              "fqn": "@winglang/sdk.util.SpawnOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/util/child-process.ts",
        "line": 8
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Kill the process."
          },
          "locationInModule": {
            "filename": "src/util/child-process.ts",
            "line": 63
          },
          "name": "kill",
          "parameters": [
            {
              "docs": {
                "summary": "- the signal to send to the process (defaults to SIGTERM)."
              },
              "name": "signal",
              "optional": true,
              "type": {
                "primitive": "number"
              }
            }
          ]
        },
        {
          "async": true,
          "docs": {
            "remarks": "Calling this method multiple times will return the same output.",
            "stability": "experimental",
            "summary": "Wait for the process to finish and return its output."
          },
          "locationInModule": {
            "filename": "src/util/child-process.ts",
            "line": 71
          },
          "name": "wait",
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.util.Output"
            }
          }
        }
      ],
      "name": "ChildProcess",
      "namespace": "util",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The child's OS-assigned process ID."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/util/child-process.ts",
            "line": 23
          },
          "name": "pid",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "src/util/child-process:ChildProcess"
    },
    "@winglang/sdk.util.CommandOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Base command options."
      },
      "fqn": "@winglang/sdk.util.CommandOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/util/util.ts",
        "line": 53
      },
      "name": "CommandOptions",
      "namespace": "util",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- the default working directory of the host",
            "stability": "experimental",
            "summary": "Path to a directory to run the command in."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/util/util.ts",
            "line": 58
          },
          "name": "cwd",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no environment variables",
            "stability": "experimental",
            "summary": "Environment variables."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/util/util.ts",
            "line": 63
          },
          "name": "env",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Whether to inherit environment variables from the host's environment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/util/util.ts",
            "line": 68
          },
          "name": "inheritEnv",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "src/util/util:CommandOptions"
    },
    "@winglang/sdk.util.ExecOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Additional options for `util.exec()`."
      },
      "fqn": "@winglang/sdk.util.ExecOptions",
      "interfaces": [
        "@winglang/sdk.util.CommandOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/util/util.ts",
        "line": 74
      },
      "name": "ExecOptions",
      "namespace": "util",
      "symbolId": "src/util/util:ExecOptions"
    },
    "@winglang/sdk.util.IPredicateHandler": {
      "assembly": "@winglang/sdk",
      "docs": {
        "custom": {
          "inflight": "`@winglang/sdk.util.IPredicateHandlerClient`"
        },
        "stability": "experimental",
        "summary": "A predicate with an inflight \"handle\" method that can be passed to `util.busyWait`."
      },
      "fqn": "@winglang/sdk.util.IPredicateHandler",
      "interfaces": [
        "@winglang/sdk.std.IInflight"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/util/util.ts",
        "line": 134
      },
      "name": "IPredicateHandler",
      "namespace": "util",
      "symbolId": "src/util/util:IPredicateHandler"
    },
    "@winglang/sdk.util.IPredicateHandlerClient": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Inflight client for `IPredicateHandler`."
      },
      "fqn": "@winglang/sdk.util.IPredicateHandlerClient",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/util/util.ts",
        "line": 139
      },
      "methods": [
        {
          "abstract": true,
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "The Predicate function that is called."
          },
          "locationInModule": {
            "filename": "src/util/util.ts",
            "line": 144
          },
          "name": "handle",
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        }
      ],
      "name": "IPredicateHandlerClient",
      "namespace": "util",
      "symbolId": "src/util/util:IPredicateHandlerClient"
    },
    "@winglang/sdk.util.NanoidOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options to generating a unique ID."
      },
      "fqn": "@winglang/sdk.util.NanoidOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/util/util.ts",
        "line": 150
      },
      "name": "NanoidOptions",
      "namespace": "util",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Characters that make up the alphabet to generate the ID, limited to 256 characters or fewer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/util/util.ts",
            "line": 159
          },
          "name": "alphabet",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "21",
            "stability": "experimental",
            "summary": "Size of ID."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/util/util.ts",
            "line": 155
          },
          "name": "size",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "src/util/util:NanoidOptions"
    },
    "@winglang/sdk.util.Output": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Output of a finished process."
      },
      "fqn": "@winglang/sdk.util.Output",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/util/util.ts",
        "line": 35
      },
      "name": "Output",
      "namespace": "util",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "A process's exit status."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/util/util.ts",
            "line": 47
          },
          "name": "status",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The standard error of a finished process."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/util/util.ts",
            "line": 43
          },
          "name": "stderr",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The standard output of a finished process."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/util/util.ts",
            "line": 39
          },
          "name": "stdout",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/util/util:Output"
    },
    "@winglang/sdk.util.ShellOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Additional options for `util.shell()`."
      },
      "fqn": "@winglang/sdk.util.ShellOptions",
      "interfaces": [
        "@winglang/sdk.util.CommandOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/util/util.ts",
        "line": 79
      },
      "name": "ShellOptions",
      "namespace": "util",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Whether to throw an error on command execution failure."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/util/util.ts",
            "line": 84
          },
          "name": "throw",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "src/util/util:ShellOptions"
    },
    "@winglang/sdk.util.SpawnOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Additional options for `util.spawn()`."
      },
      "fqn": "@winglang/sdk.util.SpawnOptions",
      "interfaces": [
        "@winglang/sdk.util.CommandOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/util/util.ts",
        "line": 90
      },
      "name": "SpawnOptions",
      "namespace": "util",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- Stdio.INHERIT",
            "stability": "experimental",
            "summary": "Configuration for the process's standard error stream."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/util/util.ts",
            "line": 105
          },
          "name": "stderr",
          "optional": true,
          "type": {
            "fqn": "@winglang/sdk.util.Stdio"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Stdio.INHERIT",
            "stability": "experimental",
            "summary": "Configuration for the process's standard input stream."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/util/util.ts",
            "line": 95
          },
          "name": "stdin",
          "optional": true,
          "type": {
            "fqn": "@winglang/sdk.util.Stdio"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Stdio.INHERIT",
            "stability": "experimental",
            "summary": "Configuration for the process's standard output stream."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/util/util.ts",
            "line": 100
          },
          "name": "stdout",
          "optional": true,
          "type": {
            "fqn": "@winglang/sdk.util.Stdio"
          }
        }
      ],
      "symbolId": "src/util/util:SpawnOptions"
    },
    "@winglang/sdk.util.Stdio": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Describes what to do with a standard I/O stream for a child process."
      },
      "fqn": "@winglang/sdk.util.Stdio",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/util/util.ts",
        "line": 17
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The child inherits from the corresponding parent descriptor."
          },
          "name": "INHERIT"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "A new pipe should be arranged to connect the parent and child processes."
          },
          "name": "PIPED"
        },
        {
          "docs": {
            "remarks": "This is the equivalent of attaching the stream to /dev/null.",
            "stability": "experimental",
            "summary": "This stream will be ignored."
          },
          "name": "NULL"
        }
      ],
      "name": "Stdio",
      "namespace": "util",
      "symbolId": "src/util/util:Stdio"
    },
    "@winglang/sdk.util.UlidOptions": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options to generate universally unique lexicographically sortable identifiers."
      },
      "fqn": "@winglang/sdk.util.UlidOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/util/util.ts",
        "line": 165
      },
      "name": "UlidOptions",
      "namespace": "util",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "Date.now()",
            "remarks": "This is useful for migrating to ulid.",
            "stability": "experimental",
            "summary": "You can also input a seed time which will consistently give you the same string for the time component."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/util/util.ts",
            "line": 170
          },
          "name": "seed",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "src/util/util:UlidOptions"
    },
    "@winglang/sdk.util.Util": {
      "assembly": "@winglang/sdk",
      "docs": {
        "stability": "experimental",
        "summary": "Utility functions."
      },
      "fqn": "@winglang/sdk.util.Util",
      "kind": "class",
      "locationInModule": {
        "filename": "src/util/util.ts",
        "line": 176
      },
      "methods": [
        {
          "docs": {
            "returns": "The UTF-8 string.",
            "stability": "experimental",
            "summary": "Converts a string from base64 to UTF-8."
          },
          "locationInModule": {
            "filename": "src/util/util.ts",
            "line": 324
          },
          "name": "base64Decode",
          "parameters": [
            {
              "docs": {
                "summary": "base64 string to decode."
              },
              "name": "stringToDecode",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "If `true`, the source is expected to be a URL-safe base64 string."
              },
              "name": "url",
              "optional": true,
              "type": {
                "primitive": "boolean"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "returns": "The base64 string.",
            "stability": "experimental",
            "summary": "Converts a string from UTF-8 to base64."
          },
          "locationInModule": {
            "filename": "src/util/util.ts",
            "line": 314
          },
          "name": "base64Encode",
          "parameters": [
            {
              "docs": {
                "summary": "The name of the UTF-8 string to encode."
              },
              "name": "stringToEncode",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "If `true`, a URL-safe base64 string is returned."
              },
              "name": "url",
              "optional": true,
              "type": {
                "primitive": "boolean"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "Throws if not found or empty.",
            "stability": "experimental",
            "summary": "Returns the value of an environment variable."
          },
          "locationInModule": {
            "filename": "src/util/util.ts",
            "line": 282
          },
          "name": "env",
          "parameters": [
            {
              "docs": {
                "summary": "The name of the environment variable."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "async": true,
          "docs": {
            "returns": "A struct containing `stdout`, `stderr` and exit `status` of the executed program.",
            "stability": "experimental",
            "summary": "Execute a program with the given arguments, wait for it to finish, and return its outputs."
          },
          "locationInModule": {
            "filename": "src/util/util.ts",
            "line": 226
          },
          "name": "exec",
          "parameters": [
            {
              "docs": {
                "summary": "The program to execute."
              },
              "name": "program",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "An array of arguments to pass to the program."
              },
              "name": "args",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            },
            {
              "docs": {
                "summary": "`ExecOptions`, such as the working directory and environment variables."
              },
              "name": "opts",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.util.ExecOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.util.Output"
            }
          },
          "static": true
        },
        {
          "docs": {
            "custom": {
              "link": "https://github.com/ai/nanoid"
            },
            "remarks": "#",
            "stability": "experimental",
            "summary": "Generates a unique ID using the nanoid library."
          },
          "locationInModule": {
            "filename": "src/util/util.ts",
            "line": 395
          },
          "name": "nanoid",
          "parameters": [
            {
              "docs": {
                "summary": "- Optional options object for generating the ID."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.util.NanoidOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "example": "\"linux\", \"darwin\", \"win32\"",
            "returns": "The operating system platform",
            "stability": "experimental",
            "summary": "Returns a string identifying the operating system platform."
          },
          "locationInModule": {
            "filename": "src/util/util.ts",
            "line": 418
          },
          "name": "os",
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Sets the given name and value as an environment variable."
          },
          "locationInModule": {
            "filename": "src/util/util.ts",
            "line": 304
          },
          "name": "setEnv",
          "parameters": [
            {
              "docs": {
                "summary": "The name of the environment variable."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The value of the environment variable."
              },
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Computes the SHA256 hash of the given data."
          },
          "locationInModule": {
            "filename": "src/util/util.ts",
            "line": 379
          },
          "name": "sha256",
          "parameters": [
            {
              "docs": {
                "summary": "- The string to be hashed."
              },
              "name": "data",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "async": true,
          "docs": {
            "custom": {
              "throws": "An error if the shell command execution fails or returns a non-zero exit code."
            },
            "returns": "The standard output of the shell command.",
            "stability": "experimental",
            "summary": "Executes a command in the shell and returns its standard output."
          },
          "locationInModule": {
            "filename": "src/util/util.ts",
            "line": 184
          },
          "name": "shell",
          "parameters": [
            {
              "docs": {
                "summary": "The command string to execute in the shell."
              },
              "name": "command",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "`ShellOptions`, such as the working directory and environment variables."
              },
              "name": "opts",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.util.ShellOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "stability": "experimental",
            "summary": "Suspends execution for a given duration."
          },
          "locationInModule": {
            "filename": "src/util/util.ts",
            "line": 335
          },
          "name": "sleep",
          "parameters": [
            {
              "docs": {
                "summary": "The time to suspend execution."
              },
              "name": "delay",
              "type": {
                "fqn": "@winglang/sdk.std.Duration"
              }
            }
          ],
          "static": true
        },
        {
          "docs": {
            "custom": {
              "inflight": "true"
            },
            "returns": "The `ChildProcess` instance associated with the spawned process.",
            "stability": "experimental",
            "summary": "Execute a program with the given arguments, and return a `ChildProcess` object that can be used to interact with the process while it is running."
          },
          "locationInModule": {
            "filename": "src/util/util.ts",
            "line": 270
          },
          "name": "spawn",
          "parameters": [
            {
              "docs": {
                "summary": "- The program to execute."
              },
              "name": "program",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "- An array of arguments to pass to the program."
              },
              "name": "args",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            },
            {
              "docs": {
                "summary": "- Spawn options including working directory, environment variables, and stdio configurations."
              },
              "name": "opts",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.util.SpawnOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@winglang/sdk.util.ChildProcess"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "Returns `nil` if not found or empty.",
            "returns": "The value of the environment variable or `nil`.",
            "stability": "experimental",
            "summary": "Returns the value of an environment variable."
          },
          "locationInModule": {
            "filename": "src/util/util.ts",
            "line": 295
          },
          "name": "tryEnv",
          "parameters": [
            {
              "docs": {
                "summary": "The name of the environment variable."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "custom": {
              "link": "https://github.com/ulid/javascript"
            },
            "remarks": "#",
            "stability": "experimental",
            "summary": "Generates universally unique lexicographically sortable identifier."
          },
          "locationInModule": {
            "filename": "src/util/util.ts",
            "line": 408
          },
          "name": "ulid",
          "parameters": [
            {
              "docs": {
                "summary": "- Optional options object for generating the ID."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.util.UlidOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Generates a version 4 UUID."
          },
          "locationInModule": {
            "filename": "src/util/util.ts",
            "line": 386
          },
          "name": "uuidv4",
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "async": true,
          "docs": {
            "custom": {
              "inflight": "true",
              "throws": "Will throw if the given predicate throws."
            },
            "remarks": "If the timeout elapses, the function throws an error.\n\nAlternatively, you can pass `throws: false` to suppress the error, and instead return a boolean\nindicating whether the predicate returned true within the timeout.",
            "returns": "True if predicate is truthful within timeout.",
            "stability": "experimental",
            "summary": "Run a predicate repeatedly, waiting until it returns true or until the timeout elapses."
          },
          "locationInModule": {
            "filename": "src/util/util.ts",
            "line": 352
          },
          "name": "waitUntil",
          "parameters": [
            {
              "docs": {
                "summary": "The function that will be evaluated."
              },
              "name": "predicate",
              "type": {
                "fqn": "@winglang/sdk.util.IPredicateHandler"
              }
            },
            {
              "docs": {
                "summary": "Timeout and interval values, default to one 1m timeout and 0.1sec interval."
              },
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@winglang/sdk.util.WaitUntilProps"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        }
      ],
      "name": "Util",
      "namespace": "util",
      "symbolId": "src/util/util:Util"
    },
    "@winglang/sdk.util.WaitUntilProps": {
      "assembly": "@winglang/sdk",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for `util.waitUntil`."
      },
      "fqn": "@winglang/sdk.util.WaitUntilProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/util/util.ts",
        "line": 111
      },
      "name": "WaitUntilProps",
      "namespace": "util",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "0.1s",
            "stability": "experimental",
            "summary": "Interval between predicate retries."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/util/util.ts",
            "line": 121
          },
          "name": "interval",
          "optional": true,
          "type": {
            "fqn": "@winglang/sdk.std.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Whether to throw an error if the timeout elapses."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/util/util.ts",
            "line": 126
          },
          "name": "throws",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "1m",
            "stability": "experimental",
            "summary": "The timeout for keep trying predicate."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/util/util.ts",
            "line": 116
          },
          "name": "timeout",
          "optional": true,
          "type": {
            "fqn": "@winglang/sdk.std.Duration"
          }
        }
      ],
      "symbolId": "src/util/util:WaitUntilProps"
    }
  },
  "version": "0.0.0",
  "fingerprint": "2H2/MlTaTGGoDTK+kydZ6XfZNlkvZ7/RJrLfr8IyBHw="
}