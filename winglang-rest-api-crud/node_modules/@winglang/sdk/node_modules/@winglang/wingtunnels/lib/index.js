"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  connect: () => connect
});
module.exports = __toCommonJS(src_exports);
var import_ws = require("ws");

// src/initialize.ts
var initialize = ({ ws, subdomain }) => {
  const message = {
    action: "INITIALIZE",
    subdomain
  };
  ws.send(JSON.stringify(message));
};

// src/events.ts
var import_node_events = require("events");
var eventHandler = new import_node_events.EventEmitter();

// src/forward-request.ts
var import_http = require("http");
var import_https = require("https");

// src/forward-response.ts
var forwardResponse = ({ ws, message }) => {
  ws.send(JSON.stringify(message));
};

// src/forward-request.ts
var import_debug = __toESM(require("debug"));
var import_url = require("url");
var log = (0, import_debug.default)("wing:tunnels");
async function forwardRequest({ message, ws, port, hostname }) {
  const { requestId, path, headers, method, body } = message;
  let requestBody = void 0;
  if (body) {
    requestBody = Buffer.from(body, "base64");
    headers["Content-length"] = requestBody.length.toString();
  }
  let hs = hostname;
  let p = path;
  let h = headers;
  let requestFn = import_http.request;
  if (hs?.includes("https://")) {
    hs = hs.replace("https://", "");
    requestFn = import_https.request;
    if (hs?.includes("/")) {
      const parts = hs.split("/");
      hs = parts[0];
      p = "/" + parts.slice(1).join("/");
      if (path !== "/") {
        p = p + path;
      }
    }
    delete h["Via"];
    delete h["Host"];
  }
  const url = (0, import_url.parse)((0, import_url.format)({
    protocol: "http",
    hostname: hs ?? "localhost",
    pathname: p,
    query: message.query
  }), true);
  const requestOptions = {
    hostname: url.hostname,
    method,
    port,
    path: url.path,
    headers: h
  };
  log("request", requestOptions, body);
  const req = requestFn(requestOptions, (response) => {
    log("response status", response.statusCode);
    let responseBody;
    response.on("data", (chunk) => {
      if (typeof responseBody === "undefined") {
        responseBody = chunk;
      } else {
        responseBody = Buffer.concat([responseBody, chunk]);
      }
    });
    response.on("error", (err) => {
      log("response error", err.message);
    });
    response.on("end", () => {
      log("response", response.statusCode, response.headers, responseBody);
      forwardResponse({ ws, message: {
        action: "FORWARD_RESPONSE",
        requestId,
        status: response.statusCode,
        path,
        method,
        headers: response.headers,
        body: Buffer.isBuffer(responseBody) ? responseBody.toString("base64") : void 0
      } });
    });
  });
  if (requestBody && body) {
    req.write(requestBody);
    log("request body write", requestBody);
  }
  req.on("error", (error) => {
    log("request error", error);
  });
  req.end();
}

// src/onmessage.ts
var onMessage = ({ ws, port, hostname }) => {
  return (data) => {
    const raw = data.toString("utf8");
    try {
      const json = JSON.parse(raw);
      const action = json.action;
      if (action === "INITIALIZED") {
        const msg = json;
        eventHandler.emit("URL_ASSIGNED" /* UrlAssigned */, msg);
      } else if (action === "FORWARD_REQUEST") {
        const msg = json;
        forwardRequest({ message: msg, ws, port, hostname });
      } else if (action === "ERROR") {
        const msg = json;
        if (msg.type === "SUBDOMAIN_IN_USE") {
          eventHandler.emit("SUBDOMAIN_IN_USE" /* SubdomainInUse */, msg);
        } else {
          console.error("onMessage error", msg.message);
          ws.close();
        }
      }
    } catch (err) {
      console.error("onMessage failure", raw, err.toString());
    }
  };
};

// src/index.ts
var WING_CLOUD_URL = "wss://xhvezvbg16.execute-api.us-east-1.amazonaws.com/prod";
var connect = (targetUrl, props) => {
  return new Promise((resolve, reject) => {
    try {
      const url = new URL(targetUrl);
      const ws = new import_ws.WebSocket(process.env["WING_TUNNELS_URL"] ?? WING_CLOUD_URL);
      if (ws.readyState === 1) {
        initialize({ ws, subdomain: props?.subdomain });
      } else {
        ws.on("open", () => {
          initialize({ ws, subdomain: props?.subdomain });
        });
      }
      ws.on("message", (data) => {
        const onMessageImpl = onMessage({ ws, port: parseInt(url.port), hostname: url.hostname });
        onMessageImpl(data);
      });
      ws.on("error", (error) => {
        reject(error);
      });
      eventHandler.on("URL_ASSIGNED" /* UrlAssigned */, ({ url: url2, subdomain }) => {
        resolve({ url: url2, subdomain, close: () => {
          ws.close();
        } });
      });
      eventHandler.on("SUBDOMAIN_IN_USE" /* SubdomainInUse */, ({ message }) => {
        ws.close();
        reject(message);
      });
    } catch (error) {
      reject(error);
    }
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  connect
});
