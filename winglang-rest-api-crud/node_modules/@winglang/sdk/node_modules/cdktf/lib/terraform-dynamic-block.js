"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerraformDynamicBlock = void 0;
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
const errors_1 = require("./errors");
const tokens_1 = require("./tokens");
const stack_trace_1 = require("./tokens/private/stack-trace");
const DYNAMIC_BLOCK_SYMBOL = Symbol.for("cdktf/TerraformDynamicBlock");
// eslint-disable-next-line jsdoc/require-jsdoc
class TerraformDynamicBlock {
    // labels: TODO: support labels, but they seem to be quite rare (issue: https://github.com/hashicorp/terraform-cdk/issues/1939)
    constructor(args) {
        this.iterator = "each"; // name of temporary variable used in iteration, needed in the future when allowing nesting iterators
        Object.defineProperty(this, DYNAMIC_BLOCK_SYMBOL, { value: true });
        this.creationStack = (0, stack_trace_1.captureStackTrace)();
        this.forEach = args.forEach;
        this.content = args.content;
    }
    static fromDynamicExpression(expr) {
        return new TerraformDynamicBlock({
            forEach: expr.iterator,
            content: expr.content,
        });
    }
    resolve() {
        throw (0, errors_1.dynamicBlockNotSupported)(this.forEach._getForEachExpression());
    }
    toTerraformDynamicBlockJson() {
        return tokens_1.Lazy.anyValue({
            produce: (context) => {
                context.iteratorContext = "DYNAMIC_BLOCK"; // resolve nested Lazy values (within this.content) as dynamic block expressions
                return {
                    for_each: this.forEach._getForEachExpression(),
                    iterator: this.iterator,
                    content: context.resolve(this.content),
                };
            },
        });
    }
    toString() {
        return tokens_1.Token.asString(this);
    }
    /**
     * Turn this Dynamic Block into JSON
     *
     * Called automatically when JSON.stringify() is called on this.
     */
    toJSON() {
        return "<unresolved-terraform-dynamic-block>";
    }
    static isTerraformDynamicBlock(x) {
        return x !== null && typeof x === "object" && DYNAMIC_BLOCK_SYMBOL in x;
    }
}
exports.TerraformDynamicBlock = TerraformDynamicBlock;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVycmFmb3JtLWR5bmFtaWMtYmxvY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0ZXJyYWZvcm0tZHluYW1pYy1ibG9jay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwrQkFBK0I7QUFDL0IsbUNBQW1DO0FBQ25DLHFDQUFvRDtBQUdwRCxxQ0FBcUU7QUFDckUsOERBQWlFO0FBRWpFLE1BQU0sb0JBQW9CLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO0FBRXZFLCtDQUErQztBQUMvQyxNQUFhLHFCQUFxQjtJQUtoQywrSEFBK0g7SUFFL0gsWUFBb0IsSUFHbkI7UUFQZSxhQUFRLEdBQUcsTUFBTSxDQUFDLENBQUMscUdBQXFHO1FBUXRJLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLG9CQUFvQixFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDbkUsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFBLCtCQUFpQixHQUFFLENBQUM7UUFDekMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQzVCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUM5QixDQUFDO0lBRU0sTUFBTSxDQUFDLHFCQUFxQixDQUNqQyxJQUFnQztRQUVoQyxPQUFPLElBQUkscUJBQXFCLENBQUM7WUFDL0IsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ3RCLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTztTQUN0QixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sT0FBTztRQUNaLE1BQU0sSUFBQSxpQ0FBd0IsRUFBQyxJQUFJLENBQUMsT0FBTyxDQUFDLHFCQUFxQixFQUFFLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBRU0sMkJBQTJCO1FBQ2hDLE9BQU8sYUFBSSxDQUFDLFFBQVEsQ0FBQztZQUNuQixPQUFPLEVBQUUsQ0FBQyxPQUF3QixFQUFFLEVBQUU7Z0JBQ3BDLE9BQU8sQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDLENBQUMsZ0ZBQWdGO2dCQUUzSCxPQUFPO29CQUNMLFFBQVEsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLHFCQUFxQixFQUFFO29CQUM5QyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7b0JBQ3ZCLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7aUJBQ3ZDLENBQUM7WUFDSixDQUFDO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFFBQVE7UUFDTixPQUFPLGNBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxNQUFNO1FBQ0osT0FBTyxzQ0FBc0MsQ0FBQztJQUNoRCxDQUFDO0lBRU0sTUFBTSxDQUFDLHVCQUF1QixDQUFDLENBQU07UUFDMUMsT0FBTyxDQUFDLEtBQUssSUFBSSxJQUFJLE9BQU8sQ0FBQyxLQUFLLFFBQVEsSUFBSSxvQkFBb0IsSUFBSSxDQUFDLENBQUM7SUFDMUUsQ0FBQztDQUNGO0FBNURELHNEQTREQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgSGFzaGlDb3JwLCBJbmNcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNUEwtMi4wXG5pbXBvcnQgeyBkeW5hbWljQmxvY2tOb3RTdXBwb3J0ZWQgfSBmcm9tIFwiLi9lcnJvcnNcIjtcbmltcG9ydCB7IFRlcnJhZm9ybUR5bmFtaWNFeHByZXNzaW9uIH0gZnJvbSBcIi4vdGVycmFmb3JtLWR5bmFtaWMtZXhwcmVzc2lvblwiO1xuaW1wb3J0IHsgSVRlcnJhZm9ybUl0ZXJhdG9yIH0gZnJvbSBcIi4vdGVycmFmb3JtLWl0ZXJhdG9yXCI7XG5pbXBvcnQgeyBJUmVzb2x2YWJsZSwgSVJlc29sdmVDb250ZXh0LCBMYXp5LCBUb2tlbiB9IGZyb20gXCIuL3Rva2Vuc1wiO1xuaW1wb3J0IHsgY2FwdHVyZVN0YWNrVHJhY2UgfSBmcm9tIFwiLi90b2tlbnMvcHJpdmF0ZS9zdGFjay10cmFjZVwiO1xuXG5jb25zdCBEWU5BTUlDX0JMT0NLX1NZTUJPTCA9IFN5bWJvbC5mb3IoXCJjZGt0Zi9UZXJyYWZvcm1EeW5hbWljQmxvY2tcIik7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc2RvYy9yZXF1aXJlLWpzZG9jXG5leHBvcnQgY2xhc3MgVGVycmFmb3JtRHluYW1pY0Jsb2NrIGltcGxlbWVudHMgSVJlc29sdmFibGUge1xuICBwdWJsaWMgcmVhZG9ubHkgY3JlYXRpb25TdGFjazogc3RyaW5nW107XG4gIHB1YmxpYyByZWFkb25seSBmb3JFYWNoOiBJVGVycmFmb3JtSXRlcmF0b3I7XG4gIHB1YmxpYyByZWFkb25seSBpdGVyYXRvciA9IFwiZWFjaFwiOyAvLyBuYW1lIG9mIHRlbXBvcmFyeSB2YXJpYWJsZSB1c2VkIGluIGl0ZXJhdGlvbiwgbmVlZGVkIGluIHRoZSBmdXR1cmUgd2hlbiBhbGxvd2luZyBuZXN0aW5nIGl0ZXJhdG9yc1xuICBwdWJsaWMgcmVhZG9ubHkgY29udGVudDogeyBba2V5OiBzdHJpbmddOiBhbnkgfTtcbiAgLy8gbGFiZWxzOiBUT0RPOiBzdXBwb3J0IGxhYmVscywgYnV0IHRoZXkgc2VlbSB0byBiZSBxdWl0ZSByYXJlIChpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2hhc2hpY29ycC90ZXJyYWZvcm0tY2RrL2lzc3Vlcy8xOTM5KVxuXG4gIHByaXZhdGUgY29uc3RydWN0b3IoYXJnczoge1xuICAgIGZvckVhY2g6IElUZXJyYWZvcm1JdGVyYXRvcjtcbiAgICBjb250ZW50OiB7IFtrZXk6IHN0cmluZ106IGFueSB9O1xuICB9KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIERZTkFNSUNfQkxPQ0tfU1lNQk9MLCB7IHZhbHVlOiB0cnVlIH0pO1xuICAgIHRoaXMuY3JlYXRpb25TdGFjayA9IGNhcHR1cmVTdGFja1RyYWNlKCk7XG4gICAgdGhpcy5mb3JFYWNoID0gYXJncy5mb3JFYWNoO1xuICAgIHRoaXMuY29udGVudCA9IGFyZ3MuY29udGVudDtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZnJvbUR5bmFtaWNFeHByZXNzaW9uKFxuICAgIGV4cHI6IFRlcnJhZm9ybUR5bmFtaWNFeHByZXNzaW9uXG4gICk6IFRlcnJhZm9ybUR5bmFtaWNCbG9jayB7XG4gICAgcmV0dXJuIG5ldyBUZXJyYWZvcm1EeW5hbWljQmxvY2soe1xuICAgICAgZm9yRWFjaDogZXhwci5pdGVyYXRvcixcbiAgICAgIGNvbnRlbnQ6IGV4cHIuY29udGVudCxcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyByZXNvbHZlKCk6IGFueSB7XG4gICAgdGhyb3cgZHluYW1pY0Jsb2NrTm90U3VwcG9ydGVkKHRoaXMuZm9yRWFjaC5fZ2V0Rm9yRWFjaEV4cHJlc3Npb24oKSk7XG4gIH1cblxuICBwdWJsaWMgdG9UZXJyYWZvcm1EeW5hbWljQmxvY2tKc29uKCk6IElSZXNvbHZhYmxlIHtcbiAgICByZXR1cm4gTGF6eS5hbnlWYWx1ZSh7XG4gICAgICBwcm9kdWNlOiAoY29udGV4dDogSVJlc29sdmVDb250ZXh0KSA9PiB7XG4gICAgICAgIGNvbnRleHQuaXRlcmF0b3JDb250ZXh0ID0gXCJEWU5BTUlDX0JMT0NLXCI7IC8vIHJlc29sdmUgbmVzdGVkIExhenkgdmFsdWVzICh3aXRoaW4gdGhpcy5jb250ZW50KSBhcyBkeW5hbWljIGJsb2NrIGV4cHJlc3Npb25zXG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBmb3JfZWFjaDogdGhpcy5mb3JFYWNoLl9nZXRGb3JFYWNoRXhwcmVzc2lvbigpLFxuICAgICAgICAgIGl0ZXJhdG9yOiB0aGlzLml0ZXJhdG9yLFxuICAgICAgICAgIGNvbnRlbnQ6IGNvbnRleHQucmVzb2x2ZSh0aGlzLmNvbnRlbnQpLFxuICAgICAgICB9O1xuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIFRva2VuLmFzU3RyaW5nKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFR1cm4gdGhpcyBEeW5hbWljIEJsb2NrIGludG8gSlNPTlxuICAgKlxuICAgKiBDYWxsZWQgYXV0b21hdGljYWxseSB3aGVuIEpTT04uc3RyaW5naWZ5KCkgaXMgY2FsbGVkIG9uIHRoaXMuXG4gICAqL1xuICB0b0pTT04oKTogYW55IHtcbiAgICByZXR1cm4gXCI8dW5yZXNvbHZlZC10ZXJyYWZvcm0tZHluYW1pYy1ibG9jaz5cIjtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgaXNUZXJyYWZvcm1EeW5hbWljQmxvY2soeDogYW55KTogeCBpcyBUZXJyYWZvcm1EeW5hbWljQmxvY2sge1xuICAgIHJldHVybiB4ICE9PSBudWxsICYmIHR5cGVvZiB4ID09PSBcIm9iamVjdFwiICYmIERZTkFNSUNfQkxPQ0tfU1lNQk9MIGluIHg7XG4gIH1cbn1cbiJdfQ==