"use strict";
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamicListTerraformIterator = exports.ResourceTerraformIterator = exports.MapTerraformIterator = exports.ListTerraformIterator = exports.TerraformIterator = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const errors_1 = require("./errors");
const terraform_dynamic_expression_1 = require("./terraform-dynamic-expression");
const terraform_functions_1 = require("./terraform-functions");
const tfExpression_1 = require("./tfExpression");
const tokens_1 = require("./tokens");
// eslint-disable-next-line jsdoc/require-jsdoc
class TerraformIterator {
    /**
     * Creates a new iterator from a list
     */
    static fromList(list) {
        // TODO: this could return different iterators depending on the type of the list
        // for example it could return a NumberListIterator whose iterator.key would be a number
        return new ListTerraformIterator(list);
    }
    /**
     * Creates a new iterator from a complex list. One example for this would be a list of maps.
     * The list will be converted into a map with the mapKeyAttributeName as the key.
     * @param list the list to iterate over
     * @param mapKeyAttributeName the name of the attribute that should be used as the key in the map
     *
     * Visit https://developer.hashicorp.com/terraform/cdktf/concepts/iterators#using-iterators-on-complex-lists for more information.
     *
     * @example
     * const cert = new AcmCertificate(this, "cert", {
     *    domainName: "example.com",
     *    validationMethod: "DNS",
     *  });
     *
     * const dvoIterator = TerraformIterator.fromComplexList(
     *   cert.domainValidationOptions,
     *   "domain_name"
     * );
     *
     * new Route53Record(this, "record", {
     *   allowOverwrite: true,
     *   name: dvoIterator.getString("name"),
     *   records: [dvoIterator.getString("record")],
     *   ttl: 60,
     *   type: dvoIterator.getString("type"),
     *   zoneId: Token.asString(dataAwsRoute53ZoneExample.zoneId),
     *   forEach: dvoIterator,
     * });
     */
    static fromComplexList(list, mapKeyAttributeName) {
        return new DynamicListTerraformIterator(list, mapKeyAttributeName);
    }
    /**
     * Creates a new iterator from a map
     */
    static fromMap(map) {
        return new MapTerraformIterator(map);
    }
    /**
     * Creates a new iterator from a resource that
     * has been created with the `for_each` argument.
     */
    static fromResources(resource) {
        return new ResourceTerraformIterator(resource);
    }
    /**
     * Creates a new iterator from a data source that
     * has been created with the `for_each` argument.
     */
    static fromDataSources(resource) {
        return new ResourceTerraformIterator(resource);
    }
    /**
     * @param attribute name of the property to retrieve
     * @returns the given attribute of the current item iterated over as a string
     */
    getString(attribute) {
        return tokens_1.Token.asString((0, tfExpression_1.propertyAccess)(this._getValue(), [attribute]));
    }
    /**
     * @param attribute name of the property to retrieve
     * @returns the given attribute of the current item iterated over as a number
     */
    getNumber(attribute) {
        return tokens_1.Token.asNumber((0, tfExpression_1.propertyAccess)(this._getValue(), [attribute]));
    }
    /**
     * @param attribute name of the property to retrieve
     * @returns the given attribute of the current item iterated over as a boolean
     */
    getBoolean(attribute) {
        return tokens_1.Token.asAny((0, tfExpression_1.propertyAccess)(this._getValue(), [attribute]));
    }
    /**
     * @param attribute name of the property to retrieve
     * @returns the given attribute of the current item iterated over as any
     */
    getAny(attribute) {
        return tokens_1.Token.asAny((0, tfExpression_1.propertyAccess)(this._getValue(), [attribute]));
    }
    /**
     * @param attribute name of the property to retrieve
     * @returns the given attribute of the current item iterated over as a (string) list
     */
    getList(attribute) {
        return tokens_1.Token.asList((0, tfExpression_1.propertyAccess)(this._getValue(), [attribute]));
    }
    /**
     * @param attribute name of the property to retrieve
     * @returns the given attribute of the current item iterated over as a number list
     */
    getNumberList(attribute) {
        return tokens_1.Token.asNumberList((0, tfExpression_1.propertyAccess)(this._getValue(), [attribute]));
    }
    /**
     * @param attribute name of the property to retrieve
     * @returns the given attribute of the current item iterated over as a map
     */
    getMap(attribute) {
        return tokens_1.Token.asAnyMap((0, tfExpression_1.propertyAccess)(this._getValue(), [attribute]));
    }
    /**
     * @param attribute name of the property to retrieve
     * @returns the given attribute of the current item iterated over as a map of strings
     */
    getStringMap(attribute) {
        return tokens_1.Token.asStringMap((0, tfExpression_1.propertyAccess)(this._getValue(), [attribute]));
    }
    /**
     * @param attribute name of the property to retrieve
     * @returns the given attribute of the current item iterated over as a map of numbers
     */
    getNumberMap(attribute) {
        return tokens_1.Token.asNumberMap((0, tfExpression_1.propertyAccess)(this._getValue(), [attribute]));
    }
    /**
     * @param attribute name of the property to retrieve
     * @returns the given attribute of the current item iterated over as a map of booleans
     */
    getBooleanMap(attribute) {
        return tokens_1.Token.asBooleanMap((0, tfExpression_1.propertyAccess)(this._getValue(), [attribute]));
    }
    /**
     * @param attribute name of the property to retrieve
     * @returns the given attribute of the current item iterated over as a map of any
     */
    getAnyMap(attribute) {
        return tokens_1.Token.asAnyMap((0, tfExpression_1.propertyAccess)(this._getValue(), [attribute]));
    }
    /**
     * @internal
     */
    _getValue() {
        // uses a Lazy value to be able to access the current TerraformStack and pass it to ref()
        return tokens_1.Lazy.anyValue({
            produce: (context) => {
                switch (context.iteratorContext) {
                    case "DYNAMIC_BLOCK":
                        return (0, tfExpression_1.ref)("each.value");
                    case "FOR_EXPRESSION":
                        return tfExpression_1.FOR_EXPRESSION_VALUE;
                    default:
                        // same as dynamic block, as this is the case when a iterator is passed to the root level of e.g. a resource
                        return (0, tfExpression_1.ref)("each.value");
                }
            },
        }, { displayHint: "<iterator value>" });
    }
    /**
     * @internal
     */
    _getKey() {
        // uses a Lazy value to be able to access the current TerraformStack and pass it to ref()
        return tokens_1.Lazy.anyValue({
            produce: (context) => {
                switch (context.iteratorContext) {
                    case "DYNAMIC_BLOCK":
                        return (0, tfExpression_1.ref)("each.key");
                    case "FOR_EXPRESSION":
                        return tfExpression_1.FOR_EXPRESSION_KEY;
                    default:
                        // same as dynamic block, as this is the case when a iterator is passed to the root level of e.g. a resource
                        return (0, tfExpression_1.ref)("each.key");
                }
            },
        }, { displayHint: "<iterator key>" });
    }
    /**
     * Creates a dynamic expression that can be used to loop over this iterator
     * in a dynamic block.
     * As this returns an IResolvable you might need to wrap the output in
     * a Token, e.g. `Token.asString`.
     * See https://developer.hashicorp.com/terraform/cdktf/concepts/iterators#using-iterators-for-list-attributes
     */
    dynamic(attributes) {
        return tokens_1.Token.asAny(new terraform_dynamic_expression_1.TerraformDynamicExpression({
            iterator: this,
            content: attributes,
        }));
    }
    /**
     * Creates a for expression that maps the iterators to its keys.
     * For lists these would be the indices, for maps the keys.
     * As this returns an IResolvable you might need to wrap the output in
     * a Token, e.g. `Token.asString`.
     */
    keys() {
        return tokens_1.Token.asAny((0, tfExpression_1.forExpression)(this._getForEachExpression(), tfExpression_1.FOR_EXPRESSION_KEY));
    }
    /**
     * Creates a for expression that maps the iterators to its value in case it is a map.
     * For lists these would stay the same.
     * As this returns an IResolvable you might need to wrap the output in
     * a Token, e.g. `Token.asString`.
     */
    values() {
        return tokens_1.Token.asAny((0, tfExpression_1.forExpression)(this._getForEachExpression(), tfExpression_1.FOR_EXPRESSION_VALUE));
    }
    /**
     * Creates a for expression that accesses the key on each element of the iterator.
     * As this returns an IResolvable you might need to wrap the output in
     * a Token, e.g. `Token.asString`.
     * @param property The property of the iterators values to map to
     */
    pluckProperty(property) {
        return tokens_1.Token.asAny((0, tfExpression_1.forExpression)(this._getForEachExpression(), (0, tfExpression_1.propertyAccess)(tfExpression_1.FOR_EXPRESSION_VALUE, [property])));
    }
    /**
     * Creates a for expression that results in a list.
     * This method allows you to create every possible for expression, but requires more knowledge about
     * Terraform's for expression syntax.
     * For the most common use cases you can use keys(), values(), and pluckProperty() instead.
     *
     * You may write any valid Terraform for each expression, e.g.
     * `TerraformIterator.fromList(myIteratorSourceVar).forExpressionForList("val.foo if val.bar == true")`
     * will result in `[ for key, val in var.myIteratorSource: val.foo if val.bar == true ]`.
     *
     * As this returns an IResolvable you might need to wrap the output in
     * a Token, e.g. `Token.asString`.
     * @param expression The expression to use in the for mapping
     */
    forExpressionForList(expression) {
        return tokens_1.Token.asAny((0, tfExpression_1.forExpression)(this._getForEachExpression(), expression));
    }
    /**
     * Creates a for expression that results in a map.
     * This method allows you to create every possible for expression, but requires more knowledge about
     * Terraforms for expression syntax.
     * For the most common use cases you can use keys(), values(), and pluckProperty instead.
     *
     * You may write any valid Terraform for each expression, e.g.
     * `TerraformIterator.fromMap(myIteratorSourceVar).forExpressionForMap("key", "val.foo if val.bar == true")`
     * will result in `{ for key, val in var.myIteratorSource: key => val.foo if val.bar == true }`.
     *
     * As this returns an IResolvable you might need to wrap the output in
     * a Token, e.g. `Token.asString`.
     * @param keyExpression The expression to use as key in the for mapping
     * @param valueExpression The expression to use as value in the for mapping
     */
    forExpressionForMap(keyExpression, valueExpression) {
        return tokens_1.Token.asAny((0, tfExpression_1.forExpression)(this._getForEachExpression(), valueExpression, keyExpression));
    }
}
exports.TerraformIterator = TerraformIterator;
_a = JSII_RTTI_SYMBOL_1;
TerraformIterator[_a] = { fqn: "cdktf.TerraformIterator", version: "0.20.3" };
// eslint-disable-next-line jsdoc/require-jsdoc
class ListTerraformIterator extends TerraformIterator {
    constructor(list) {
        super();
        this.list = list;
    }
    /**
     * Returns the currently entry in the list or set that is being iterated over.
     * For lists this is the same as `iterator.value`. If you need the index,
     * use count via `TerraformCount`:
     * https://developer.hashicorp.com/terraform/cdktf/concepts/iterators#using-count
     */
    get key() {
        return this._getKey();
    }
    /**
     * Returns the value of the current item iterated over.
     */
    get value() {
        return this._getValue();
    }
    /**
     * @internal used by TerraformResource to set the for_each expression
     */
    _getForEachExpression() {
        // needs to be wrapped in a set as Terraform only allows sets in for_each
        return terraform_functions_1.Fn.toset(this.list);
    }
}
exports.ListTerraformIterator = ListTerraformIterator;
_b = JSII_RTTI_SYMBOL_1;
ListTerraformIterator[_b] = { fqn: "cdktf.ListTerraformIterator", version: "0.20.3" };
// eslint-disable-next-line jsdoc/require-jsdoc
class MapTerraformIterator extends TerraformIterator {
    constructor(map) {
        super();
        this.map = map;
    }
    /**
     * @internal used by TerraformResource to set the for_each expression
     */
    _getForEachExpression() {
        // explicit wrapping to circumvent "Found an encoded map token in a scalar string context." error
        return tokens_1.Token.asString(this.map);
    }
    /**
     * Returns the key of the current entry in the map that is being iterated over.
     */
    get key() {
        return tokens_1.Token.asString(this._getKey());
    }
    /**
     * Returns the value of the current item iterated over.
     */
    get value() {
        return this._getValue();
    }
}
exports.MapTerraformIterator = MapTerraformIterator;
_c = JSII_RTTI_SYMBOL_1;
MapTerraformIterator[_c] = { fqn: "cdktf.MapTerraformIterator", version: "0.20.3" };
// eslint-disable-next-line jsdoc/require-jsdoc
class ResourceTerraformIterator extends TerraformIterator {
    constructor(element) {
        super();
        this.element = element;
        if (element.count) {
            throw (0, errors_1.iteratorOnResourceWithCount)();
        }
        if (!element.forEach) {
            throw (0, errors_1.iteratorOnResourceWithoutForEach)();
        }
    }
    /**
     * Returns the current entry in the list or set that is being iterated over.
     * For lists this is the same as `iterator.value`. If you need the index,
     * use count via `TerraformCount`:
     * https://developer.hashicorp.com/terraform/cdktf/concepts/iterators#using-count
     */
    get key() {
        return this._getKey();
    }
    /**
     * Returns the value of the current item iterated over.
     */
    get value() {
        return this._getValue();
    }
    /**
     * @internal used by TerraformResource to set the for_each expression
     */
    _getForEachExpression() {
        return this.element.fqn; // no wrapping necessary for resources
    }
}
exports.ResourceTerraformIterator = ResourceTerraformIterator;
_d = JSII_RTTI_SYMBOL_1;
ResourceTerraformIterator[_d] = { fqn: "cdktf.ResourceTerraformIterator", version: "0.20.3" };
// eslint-disable-next-line jsdoc/require-jsdoc
class DynamicListTerraformIterator extends MapTerraformIterator {
    constructor(list, mapKeyAttributeName) {
        super(list);
        this.list = list;
        this.mapKeyAttributeName = mapKeyAttributeName;
    }
    /**
     * @internal used by TerraformResource to set the for_each expression
     */
    _getForEachExpression() {
        // uses a Lazy value to be able to render a conversion into a map in the context of a TerraformResource
        return tokens_1.Lazy.anyValue({
            produce: (context) => {
                switch (context.iteratorContext) {
                    case "FOR_EXPRESSION":
                        return this.list;
                    case "DYNAMIC_BLOCK": // fallthrough
                    default: // same as dynamic block, as this is the case when a iterator is passed to the root level of e.g. a resource
                        // Turn list into a map
                        // { for k,v in <input> : <keyExpression> => <valueExpression>}
                        return (0, tfExpression_1.forExpression)(this.list, // input
                        tfExpression_1.FOR_EXPRESSION_VALUE, // valueExpression
                        terraform_functions_1.Fn.lookupNested(tfExpression_1.FOR_EXPRESSION_VALUE, [
                            this.mapKeyAttributeName,
                        ]) // keyExpression
                        );
                }
            },
        }, { displayHint: "<iterator value>" });
    }
}
exports.DynamicListTerraformIterator = DynamicListTerraformIterator;
_e = JSII_RTTI_SYMBOL_1;
DynamicListTerraformIterator[_e] = { fqn: "cdktf.DynamicListTerraformIterator", version: "0.20.3" };
//# sourceMappingURL=data:application/json;base64,