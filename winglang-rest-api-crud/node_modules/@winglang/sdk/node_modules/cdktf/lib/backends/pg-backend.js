"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataTerraformRemoteStatePg = exports.PgBackend = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const terraform_backend_1 = require("../terraform-backend");
const util_1 = require("../util");
const terraform_remote_state_1 = require("../terraform-remote-state");
// eslint-disable-next-line jsdoc/require-jsdoc
class PgBackend extends terraform_backend_1.TerraformBackend {
    constructor(scope, props) {
        super(scope, "backend", "pg");
        this.props = props;
    }
    synthesizeAttributes() {
        return (0, util_1.keysToSnakeCase)({ ...this.props });
    }
    synthesizeHclAttributes() {
        return (0, util_1.keysToSnakeCase)({ ...this.props });
    }
    getRemoteStateDataSource(scope, name, _fromStack) {
        return new DataTerraformRemoteStatePg(scope, name, {
            ...this.props,
            workspace: "${terraform.workspace}",
        });
    }
}
exports.PgBackend = PgBackend;
_a = JSII_RTTI_SYMBOL_1;
PgBackend[_a] = { fqn: "cdktf.PgBackend", version: "0.20.3" };
// eslint-disable-next-line jsdoc/require-jsdoc
class DataTerraformRemoteStatePg extends terraform_remote_state_1.TerraformRemoteState {
    constructor(scope, id, config) {
        super(scope, id, "pg", config);
    }
}
exports.DataTerraformRemoteStatePg = DataTerraformRemoteStatePg;
_b = JSII_RTTI_SYMBOL_1;
DataTerraformRemoteStatePg[_b] = { fqn: "cdktf.DataTerraformRemoteStatePg", version: "0.20.3" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGctYmFja2VuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInBnLWJhY2tlbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFHQSw0REFBd0Q7QUFDeEQsa0NBQTBDO0FBQzFDLHNFQUdtQztBQUVuQywrQ0FBK0M7QUFDL0MsTUFBYSxTQUFVLFNBQVEsb0NBQWdCO0lBQzdDLFlBQVksS0FBZ0IsRUFBbUIsS0FBc0I7UUFDbkUsS0FBSyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFEZSxVQUFLLEdBQUwsS0FBSyxDQUFpQjtJQUVyRSxDQUFDO0lBRVMsb0JBQW9CO1FBQzVCLE9BQU8sSUFBQSxzQkFBZSxFQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRVMsdUJBQXVCO1FBQy9CLE9BQU8sSUFBQSxzQkFBZSxFQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRU0sd0JBQXdCLENBQzdCLEtBQWdCLEVBQ2hCLElBQVksRUFDWixVQUFrQjtRQUVsQixPQUFPLElBQUksMEJBQTBCLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRTtZQUNqRCxHQUFHLElBQUksQ0FBQyxLQUFLO1lBQ2IsU0FBUyxFQUFFLHdCQUF3QjtTQUNwQyxDQUFDLENBQUM7SUFDTCxDQUFDOztBQXRCSCw4QkF1QkM7OztBQUVELCtDQUErQztBQUMvQyxNQUFhLDBCQUEyQixTQUFRLDZDQUFvQjtJQUNsRSxZQUNFLEtBQWdCLEVBQ2hCLEVBQVUsRUFDVixNQUF3QztRQUV4QyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDakMsQ0FBQzs7QUFQSCxnRUFRQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgSGFzaGlDb3JwLCBJbmNcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNUEwtMi4wXG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgVGVycmFmb3JtQmFja2VuZCB9IGZyb20gXCIuLi90ZXJyYWZvcm0tYmFja2VuZFwiO1xuaW1wb3J0IHsga2V5c1RvU25ha2VDYXNlIH0gZnJvbSBcIi4uL3V0aWxcIjtcbmltcG9ydCB7XG4gIFRlcnJhZm9ybVJlbW90ZVN0YXRlLFxuICBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVDb25maWcsXG59IGZyb20gXCIuLi90ZXJyYWZvcm0tcmVtb3RlLXN0YXRlXCI7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc2RvYy9yZXF1aXJlLWpzZG9jXG5leHBvcnQgY2xhc3MgUGdCYWNrZW5kIGV4dGVuZHMgVGVycmFmb3JtQmFja2VuZCB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIHByaXZhdGUgcmVhZG9ubHkgcHJvcHM6IFBnQmFja2VuZENvbmZpZykge1xuICAgIHN1cGVyKHNjb3BlLCBcImJhY2tlbmRcIiwgXCJwZ1wiKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzeW50aGVzaXplQXR0cmlidXRlcygpOiB7IFtuYW1lOiBzdHJpbmddOiBhbnkgfSB7XG4gICAgcmV0dXJuIGtleXNUb1NuYWtlQ2FzZSh7IC4uLnRoaXMucHJvcHMgfSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgc3ludGhlc2l6ZUhjbEF0dHJpYnV0ZXMoKTogeyBbbmFtZTogc3RyaW5nXTogYW55IH0ge1xuICAgIHJldHVybiBrZXlzVG9TbmFrZUNhc2UoeyAuLi50aGlzLnByb3BzIH0pO1xuICB9XG5cbiAgcHVibGljIGdldFJlbW90ZVN0YXRlRGF0YVNvdXJjZShcbiAgICBzY29wZTogQ29uc3RydWN0LFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBfZnJvbVN0YWNrOiBzdHJpbmdcbiAgKTogVGVycmFmb3JtUmVtb3RlU3RhdGUge1xuICAgIHJldHVybiBuZXcgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlUGcoc2NvcGUsIG5hbWUsIHtcbiAgICAgIC4uLnRoaXMucHJvcHMsXG4gICAgICB3b3Jrc3BhY2U6IFwiJHt0ZXJyYWZvcm0ud29ya3NwYWNlfVwiLFxuICAgIH0pO1xuICB9XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc2RvYy9yZXF1aXJlLWpzZG9jXG5leHBvcnQgY2xhc3MgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlUGcgZXh0ZW5kcyBUZXJyYWZvcm1SZW1vdGVTdGF0ZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHNjb3BlOiBDb25zdHJ1Y3QsXG4gICAgaWQ6IHN0cmluZyxcbiAgICBjb25maWc6IERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZVBnQ29uZmlnXG4gICkge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwgXCJwZ1wiLCBjb25maWcpO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGdCYWNrZW5kQ29uZmlnIHtcbiAgLyoqXG4gICAqIFBvc3RncmVzIGNvbm5lY3Rpb24gc3RyaW5nOyBhIHBvc3RncmVzOi8vIFVSTC5cbiAgICogVGhlIFBHX0NPTk5fU1RSIGFuZCBzdGFuZGFyZCBsaWJwcSBlbnZpcm9ubWVudCB2YXJpYWJsZXMgY2FuIGFsc28gYmUgdXNlZCB0byBpbmRpY2F0ZSBob3cgdG8gY29ubmVjdCB0byB0aGUgUG9zdGdyZVNRTCBkYXRhYmFzZS5cbiAgICovXG4gIHJlYWRvbmx5IGNvbm5TdHI6IHN0cmluZztcbiAgLyoqXG4gICAqIE5hbWUgb2YgdGhlIGF1dG9tYXRpY2FsbHktbWFuYWdlZCBQb3N0Z3JlcyBzY2hlbWEsIGRlZmF1bHQgdG8gdGVycmFmb3JtX3JlbW90ZV9zdGF0ZS5cbiAgICogQ2FuIGFsc28gYmUgc2V0IHVzaW5nIHRoZSBQR19TQ0hFTUFfTkFNRSBlbnZpcm9ubWVudCB2YXJpYWJsZS5cbiAgICovXG4gIHJlYWRvbmx5IHNjaGVtYU5hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBJZiBzZXQgdG8gdHJ1ZSwgdGhlIFBvc3RncmVzIHNjaGVtYSBtdXN0IGFscmVhZHkgZXhpc3QuXG4gICAqIENhbiBhbHNvIGJlIHNldCB1c2luZyB0aGUgUEdfU0tJUF9TQ0hFTUFfQ1JFQVRJT04gZW52aXJvbm1lbnQgdmFyaWFibGUuXG4gICAqIFRlcnJhZm9ybSB3b24ndCB0cnkgdG8gY3JlYXRlIHRoZSBzY2hlbWEsIHRoaXMgaXMgdXNlZnVsIHdoZW4gaXQgaGFzIGFscmVhZHkgYmVlbiBjcmVhdGVkIGJ5IGEgZGF0YWJhc2UgYWRtaW5pc3RyYXRvci5cbiAgICovXG4gIHJlYWRvbmx5IHNraXBTY2hlbWFDcmVhdGlvbj86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBJZiBzZXQgdG8gdHJ1ZSwgdGhlIFBvc3RncmVzIHRhYmxlIG11c3QgYWxyZWFkeSBleGlzdC5cbiAgICogQ2FuIGFsc28gYmUgc2V0IHVzaW5nIHRoZSBQR19TS0lQX1RBQkxFX0NSRUFUSU9OIGVudmlyb25tZW50IHZhcmlhYmxlLlxuICAgKiBUZXJyYWZvcm0gd29uJ3QgdHJ5IHRvIGNyZWF0ZSB0aGUgdGFibGUsIHRoaXMgaXMgdXNlZnVsIHdoZW4gaXQgaGFzIGFscmVhZHkgYmVlbiBjcmVhdGVkIGJ5IGEgZGF0YWJhc2UgYWRtaW5pc3RyYXRvci5cbiAgICovXG4gIHJlYWRvbmx5IHNraXBUYWJsZUNyZWF0aW9uPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIElmIHNldCB0byB0cnVlLCB0aGUgUG9zdGdyZXMgaW5kZXggbXVzdCBhbHJlYWR5IGV4aXN0LlxuICAgKiBDYW4gYWxzbyBiZSBzZXQgdXNpbmcgdGhlIFBHX1NLSVBfSU5ERVhfQ1JFQVRJT04gZW52aXJvbm1lbnQgdmFyaWFibGUuXG4gICAqIFRlcnJhZm9ybSB3b24ndCB0cnkgdG8gY3JlYXRlIHRoZSBpbmRleCwgdGhpcyBpcyB1c2VmdWwgd2hlbiBpdCBoYXMgYWxyZWFkeSBiZWVuIGNyZWF0ZWQgYnkgYSBkYXRhYmFzZSBhZG1pbmlzdHJhdG9yLlxuICAgKi9cbiAgcmVhZG9ubHkgc2tpcEluZGV4Q3JlYXRpb24/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZVBnQ29uZmlnXG4gIGV4dGVuZHMgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlQ29uZmlnLFxuICAgIFBnQmFja2VuZENvbmZpZyB7fVxuIl19