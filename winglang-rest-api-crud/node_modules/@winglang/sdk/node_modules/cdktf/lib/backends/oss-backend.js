"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataTerraformRemoteStateOss = exports.OssBackend = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const terraform_backend_1 = require("../terraform-backend");
const util_1 = require("../util");
const terraform_remote_state_1 = require("../terraform-remote-state");
// eslint-disable-next-line jsdoc/require-jsdoc
class OssBackend extends terraform_backend_1.TerraformBackend {
    constructor(scope, props) {
        super(scope, "backend", "oss");
        this.props = props;
    }
    synthesizeAttributes() {
        return (0, util_1.keysToSnakeCase)({ ...this.props });
    }
    synthesizeHclAttributes() {
        return (0, util_1.keysToSnakeCase)({ ...this.props });
    }
    getRemoteStateDataSource(scope, name, _fromStack) {
        return new DataTerraformRemoteStateOss(scope, name, this.props);
    }
}
exports.OssBackend = OssBackend;
_a = JSII_RTTI_SYMBOL_1;
OssBackend[_a] = { fqn: "cdktf.OssBackend", version: "0.20.3" };
// eslint-disable-next-line jsdoc/require-jsdoc
class DataTerraformRemoteStateOss extends terraform_remote_state_1.TerraformRemoteState {
    constructor(scope, id, config) {
        super(scope, id, "oss", config);
    }
}
exports.DataTerraformRemoteStateOss = DataTerraformRemoteStateOss;
_b = JSII_RTTI_SYMBOL_1;
DataTerraformRemoteStateOss[_b] = { fqn: "cdktf.DataTerraformRemoteStateOss", version: "0.20.3" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3NzLWJhY2tlbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJvc3MtYmFja2VuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUdBLDREQUF3RDtBQUN4RCxrQ0FBMEM7QUFDMUMsc0VBR21DO0FBRW5DLCtDQUErQztBQUMvQyxNQUFhLFVBQVcsU0FBUSxvQ0FBZ0I7SUFDOUMsWUFBWSxLQUFnQixFQUFtQixLQUF1QjtRQUNwRSxLQUFLLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQURjLFVBQUssR0FBTCxLQUFLLENBQWtCO0lBRXRFLENBQUM7SUFFUyxvQkFBb0I7UUFDNUIsT0FBTyxJQUFBLHNCQUFlLEVBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFUyx1QkFBdUI7UUFDL0IsT0FBTyxJQUFBLHNCQUFlLEVBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFTSx3QkFBd0IsQ0FDN0IsS0FBZ0IsRUFDaEIsSUFBWSxFQUNaLFVBQWtCO1FBRWxCLE9BQU8sSUFBSSwyQkFBMkIsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsRSxDQUFDOztBQW5CSCxnQ0FvQkM7OztBQUVELCtDQUErQztBQUMvQyxNQUFhLDJCQUE0QixTQUFRLDZDQUFvQjtJQUNuRSxZQUNFLEtBQWdCLEVBQ2hCLEVBQVUsRUFDVixNQUF5QztRQUV6QyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbEMsQ0FBQzs7QUFQSCxrRUFRQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgSGFzaGlDb3JwLCBJbmNcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNUEwtMi4wXG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgVGVycmFmb3JtQmFja2VuZCB9IGZyb20gXCIuLi90ZXJyYWZvcm0tYmFja2VuZFwiO1xuaW1wb3J0IHsga2V5c1RvU25ha2VDYXNlIH0gZnJvbSBcIi4uL3V0aWxcIjtcbmltcG9ydCB7XG4gIFRlcnJhZm9ybVJlbW90ZVN0YXRlLFxuICBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVDb25maWcsXG59IGZyb20gXCIuLi90ZXJyYWZvcm0tcmVtb3RlLXN0YXRlXCI7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc2RvYy9yZXF1aXJlLWpzZG9jXG5leHBvcnQgY2xhc3MgT3NzQmFja2VuZCBleHRlbmRzIFRlcnJhZm9ybUJhY2tlbmQge1xuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBwcml2YXRlIHJlYWRvbmx5IHByb3BzOiBPc3NCYWNrZW5kQ29uZmlnKSB7XG4gICAgc3VwZXIoc2NvcGUsIFwiYmFja2VuZFwiLCBcIm9zc1wiKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzeW50aGVzaXplQXR0cmlidXRlcygpOiB7IFtuYW1lOiBzdHJpbmddOiBhbnkgfSB7XG4gICAgcmV0dXJuIGtleXNUb1NuYWtlQ2FzZSh7IC4uLnRoaXMucHJvcHMgfSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgc3ludGhlc2l6ZUhjbEF0dHJpYnV0ZXMoKTogeyBbbmFtZTogc3RyaW5nXTogYW55IH0ge1xuICAgIHJldHVybiBrZXlzVG9TbmFrZUNhc2UoeyAuLi50aGlzLnByb3BzIH0pO1xuICB9XG5cbiAgcHVibGljIGdldFJlbW90ZVN0YXRlRGF0YVNvdXJjZShcbiAgICBzY29wZTogQ29uc3RydWN0LFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBfZnJvbVN0YWNrOiBzdHJpbmdcbiAgKTogVGVycmFmb3JtUmVtb3RlU3RhdGUge1xuICAgIHJldHVybiBuZXcgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlT3NzKHNjb3BlLCBuYW1lLCB0aGlzLnByb3BzKTtcbiAgfVxufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganNkb2MvcmVxdWlyZS1qc2RvY1xuZXhwb3J0IGNsYXNzIERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZU9zcyBleHRlbmRzIFRlcnJhZm9ybVJlbW90ZVN0YXRlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgc2NvcGU6IENvbnN0cnVjdCxcbiAgICBpZDogc3RyaW5nLFxuICAgIGNvbmZpZzogRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlT3NzQ29uZmlnXG4gICkge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwgXCJvc3NcIiwgY29uZmlnKTtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIE9zc0JhY2tlbmRDb25maWcge1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBBbGliYWJhIENsb3VkIGFjY2VzcyBrZXkuXG4gICAqIEl0IHN1cHBvcnRzIGVudmlyb25tZW50IHZhcmlhYmxlcyBBTElDTE9VRF9BQ0NFU1NfS0VZIGFuZCBBTElDTE9VRF9BQ0NFU1NfS0VZX0lELlxuICAgKi9cbiAgcmVhZG9ubHkgYWNjZXNzS2V5Pzogc3RyaW5nO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBBbGliYWJhIENsb3VkIHNlY3JldCBhY2Nlc3Mga2V5LlxuICAgKiBJdCBzdXBwb3J0cyBlbnZpcm9ubWVudCB2YXJpYWJsZXMgQUxJQ0xPVURfU0VDUkVUX0tFWSBhbmQgQUxJQ0xPVURfQUNDRVNTX0tFWV9TRUNSRVQuXG4gICAqL1xuICByZWFkb25seSBzZWNyZXRLZXk/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIFNUUyBhY2Nlc3MgdG9rZW4uIEl0IHN1cHBvcnRzIGVudmlyb25tZW50IHZhcmlhYmxlIEFMSUNMT1VEX1NFQ1VSSVRZX1RPS0VOLlxuICAgKi9cbiAgcmVhZG9ubHkgc2VjdXJpdHlUb2tlbj86IHN0cmluZztcbiAgLyoqXG4gICAqIChPcHRpb25hbCwgQXZhaWxhYmxlIGluIDAuMTIuMTQrKSBUaGUgUkFNIFJvbGUgTmFtZSBhdHRhY2hlZCBvbiBhIEVDUyBpbnN0YW5jZSBmb3IgQVBJIG9wZXJhdGlvbnMuXG4gICAqIFlvdSBjYW4gcmV0cmlldmUgdGhpcyBmcm9tIHRoZSAnQWNjZXNzIENvbnRyb2wnIHNlY3Rpb24gb2YgdGhlIEFsaWJhYmEgQ2xvdWQgY29uc29sZS5cbiAgICovXG4gIHJlYWRvbmx5IGVjc1JvbGVOYW1lPzogc3RyaW5nO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBUaGUgcmVnaW9uIG9mIHRoZSBPU1MgYnVja2V0LlxuICAgKiBJdCBzdXBwb3J0cyBlbnZpcm9ubWVudCB2YXJpYWJsZXMgQUxJQ0xPVURfUkVHSU9OIGFuZCBBTElDTE9VRF9ERUZBVUxUX1JFR0lPTi5cbiAgICovXG4gIHJlYWRvbmx5IHJlZ2lvbj86IHN0cmluZztcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgQSBjdXN0b20gZW5kcG9pbnQgZm9yIHRoZSBPU1MgQVBJLlxuICAgKiBJdCBzdXBwb3J0cyBlbnZpcm9ubWVudCB2YXJpYWJsZXMgQUxJQ0xPVURfT1NTX0VORFBPSU5UIGFuZCBPU1NfRU5EUE9JTlQuXG4gICAqL1xuICByZWFkb25seSBlbmRwb2ludD86IHN0cmluZztcbiAgLyoqXG4gICAqIChSZXF1aXJlZCkgVGhlIG5hbWUgb2YgdGhlIE9TUyBidWNrZXQuXG4gICAqL1xuICByZWFkb25seSBidWNrZXQ6IHN0cmluZztcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgVGhlIHBhdGggZGlyZWN0b3J5IG9mIHRoZSBzdGF0ZSBmaWxlIHdpbGwgYmUgc3RvcmVkLiBEZWZhdWx0IHRvIFwiZW52OlwiLlxuICAgKi9cbiAgcmVhZG9ubHkgcHJlZml4Pzogc3RyaW5nO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBUaGUgbmFtZSBvZiB0aGUgc3RhdGUgZmlsZS4gRGVmYXVsdHMgdG8gdGVycmFmb3JtLnRmc3RhdGUuXG4gICAqL1xuICByZWFkb25seSBrZXk/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIEEgY3VzdG9tIGVuZHBvaW50IGZvciB0aGUgVGFibGVTdG9yZSBBUEkuXG4gICAqL1xuICByZWFkb25seSB0YWJsZXN0b3JlRW5kcG9pbnQ/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIEEgVGFibGVTdG9yZSB0YWJsZSBmb3Igc3RhdGUgbG9ja2luZyBhbmQgY29uc2lzdGVuY3kuXG4gICAqIFRoZSB0YWJsZSBtdXN0IGhhdmUgYSBwcmltYXJ5IGtleSBuYW1lZCBMb2NrSUQgb2YgdHlwZSBTdHJpbmcuXG4gICAqL1xuICByZWFkb25seSB0YWJsZXN0b3JlVGFibGU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwsIEF2YWlsYWJsZSBpbiAxLjAuMTErKSBDdXN0b20gZW5kcG9pbnQgZm9yIHRoZSBBbGlDbG91ZCBTZWN1cml0eSBUb2tlbiBTZXJ2aWNlIChTVFMpIEFQSS5cbiAgICogSXQgc3VwcG9ydHMgZW52aXJvbm1lbnQgdmFyaWFibGUgQUxJQ0xPVURfU1RTX0VORFBPSU5ULlxuICAgKi9cbiAgcmVhZG9ubHkgc3RzRW5kcG9pbnQ/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIFdoZXRoZXIgdG8gZW5hYmxlIHNlcnZlciBzaWRlIGVuY3J5cHRpb24gb2YgdGhlIHN0YXRlIGZpbGUuXG4gICAqIElmIGl0IGlzIHRydWUsIE9TUyB3aWxsIHVzZSAnQUVTMjU2JyBlbmNyeXB0aW9uIGFsZ29yaXRobSB0byBlbmNyeXB0IHN0YXRlIGZpbGUuXG4gICAqL1xuICByZWFkb25seSBlbmNyeXB0PzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgT2JqZWN0IEFDTCB0byBiZSBhcHBsaWVkIHRvIHRoZSBzdGF0ZSBmaWxlLlxuICAgKi9cbiAgcmVhZG9ubHkgYWNsPzogc3RyaW5nO1xuICAvKipcbiAgICogKE9wdGlvbmFsLCBBdmFpbGFibGUgaW4gMC4xMi44KykgVGhpcyBpcyB0aGUgcGF0aCB0byB0aGUgc2hhcmVkIGNyZWRlbnRpYWxzIGZpbGUuXG4gICAqIEl0IGNhbiBhbHNvIGJlIHNvdXJjZWQgZnJvbSB0aGUgQUxJQ0xPVURfU0hBUkVEX0NSRURFTlRJQUxTX0ZJTEUgZW52aXJvbm1lbnQgdmFyaWFibGUuXG4gICAqIElmIHRoaXMgaXMgbm90IHNldCBhbmQgYSBwcm9maWxlIGlzIHNwZWNpZmllZCwgfi8uYWxpeXVuL2NvbmZpZy5qc29uIHdpbGwgYmUgdXNlZC5cbiAgICovXG4gIHJlYWRvbmx5IHNoYXJlZENyZWRlbnRpYWxzRmlsZT86IHN0cmluZztcbiAgLyoqXG4gICAqIChPcHRpb25hbCwgQXZhaWxhYmxlIGluIDAuMTIuOCspIFRoaXMgaXMgdGhlIEFsaWJhYmEgQ2xvdWQgcHJvZmlsZSBuYW1lIGFzIHNldCBpbiB0aGUgc2hhcmVkIGNyZWRlbnRpYWxzIGZpbGUuXG4gICAqIEl0IGNhbiBhbHNvIGJlIHNvdXJjZWQgZnJvbSB0aGUgQUxJQ0xPVURfUFJPRklMRSBlbnZpcm9ubWVudCB2YXJpYWJsZS5cbiAgICovXG4gIHJlYWRvbmx5IHByb2ZpbGU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwsIEF2YWlsYWJsZSBpbiAxLjEuMCspIFRoZSBBUk4gb2YgdGhlIHJvbGUgdG8gYXNzdW1lLlxuICAgKiBJZiBBUk4gaXMgc2V0IHRvIGFuIGVtcHR5IHN0cmluZywgaXQgZG9lcyBub3QgcGVyZm9ybSByb2xlIHN3aXRjaGluZy5cbiAgICogSXQgc3VwcG9ydHMgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlIEFMSUNMT1VEX0FTU1VNRV9ST0xFX0FSTi5cbiAgICogVGVycmFmb3JtIGV4ZWN1dGVzIGNvbmZpZ3VyYXRpb24gb24gYWNjb3VudCB3aXRoIHByb3ZpZGVkIGNyZWRlbnRpYWxzLlxuICAgKi9cbiAgcmVhZG9ubHkgYXNzdW1lUm9sZVJvbGVBcm4/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwsIEF2YWlsYWJsZSBpbiAxLjEuMCspIEEgbW9yZSByZXN0cmljdGl2ZSBwb2xpY3kgdG8gYXBwbHkgdG8gdGhlIHRlbXBvcmFyeSBjcmVkZW50aWFscy5cbiAgICogVGhpcyBnaXZlcyB5b3UgYSB3YXkgdG8gZnVydGhlciByZXN0cmljdCB0aGUgcGVybWlzc2lvbnMgZm9yIHRoZSByZXN1bHRpbmcgdGVtcG9yYXJ5IHNlY3VyaXR5IGNyZWRlbnRpYWxzLlxuICAgKiBZb3UgY2Fubm90IHVzZSB0aGlzIHBvbGljeSB0byBncmFudCBwZXJtaXNzaW9ucyB0aGF0IGV4Y2VlZCB0aG9zZSBvZiB0aGUgcm9sZSB0aGF0IGlzIGJlaW5nIGFzc3VtZWRcbiAgICovXG4gIHJlYWRvbmx5IGFzc3VtZVJvbGVQb2xpY3k/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwsIEF2YWlsYWJsZSBpbiAxLjEuMCspIFRoZSBzZXNzaW9uIG5hbWUgdG8gdXNlIHdoZW4gYXNzdW1pbmcgdGhlIHJvbGUuXG4gICAqIElmIG9taXR0ZWQsICd0ZXJyYWZvcm0nIGlzIHBhc3NlZCB0byB0aGUgQXNzdW1lUm9sZSBjYWxsIGFzIHNlc3Npb24gbmFtZS5cbiAgICogSXQgc3VwcG9ydHMgZW52aXJvbm1lbnQgdmFyaWFibGUgQUxJQ0xPVURfQVNTVU1FX1JPTEVfU0VTU0lPTl9OQU1FLlxuICAgKi9cbiAgcmVhZG9ubHkgYXNzdW1lUm9sZVNlc3Npb25OYW1lPzogc3RyaW5nO1xuICAvKipcbiAgICogKE9wdGlvbmFsLCBBdmFpbGFibGUgaW4gMS4xLjArKSBUaGUgdGltZSBhZnRlciB3aGljaCB0aGUgZXN0YWJsaXNoZWQgc2Vzc2lvbiBmb3IgYXNzdW1pbmcgcm9sZSBleHBpcmVzLlxuICAgKiBWYWxpZCB2YWx1ZSByYW5nZTogWzkwMC0zNjAwXSBzZWNvbmRzLiBEZWZhdWx0IHRvIDM2MDAgKGluIHRoaXMgY2FzZSBBbGliYWJhIENsb3VkIHVzZXMgaXRzIG93biBkZWZhdWx0IHZhbHVlKS5cbiAgICogSXQgc3VwcG9ydHMgZW52aXJvbm1lbnQgdmFyaWFibGUgQUxJQ0xPVURfQVNTVU1FX1JPTEVfU0VTU0lPTl9FWFBJUkFUSU9OLlxuICAgKi9cbiAgcmVhZG9ubHkgYXNzdW1lUm9sZVNlc3Npb25FeHBpcmF0aW9uPzogbnVtYmVyO1xuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgVXNlIGZsYXR0ZW5lZCBhc3N1bWUgcm9sZSBvcHRpb25zXG4gICAqL1xuICByZWFkb25seSBhc3N1bWVSb2xlPzogT3NzQXNzdW1lUm9sZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBPc3NBc3N1bWVSb2xlIHtcbiAgcmVhZG9ubHkgcm9sZUFybjogc3RyaW5nO1xuICByZWFkb25seSBwb2xpY3k/OiBzdHJpbmc7XG4gIHJlYWRvbmx5IHNlc3Npb25OYW1lPzogc3RyaW5nO1xuICByZWFkb25seSBzZXNzaW9uRXhwaXJhdGlvbj86IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVPc3NDb25maWdcbiAgZXh0ZW5kcyBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVDb25maWcsXG4gICAgT3NzQmFja2VuZENvbmZpZyB7fVxuIl19