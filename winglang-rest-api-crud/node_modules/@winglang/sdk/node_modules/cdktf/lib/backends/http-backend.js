"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataTerraformRemoteStateHttp = exports.HttpBackend = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const terraform_backend_1 = require("../terraform-backend");
const util_1 = require("../util");
const terraform_remote_state_1 = require("../terraform-remote-state");
// eslint-disable-next-line jsdoc/require-jsdoc
class HttpBackend extends terraform_backend_1.TerraformBackend {
    constructor(scope, props) {
        super(scope, "backend", "http");
        this.props = props;
    }
    synthesizeAttributes() {
        return (0, util_1.keysToSnakeCase)({ ...this.props });
    }
    synthesizeHclAttributes() {
        return (0, util_1.keysToSnakeCase)({ ...this.props });
    }
    getRemoteStateDataSource(scope, name, _fromStack) {
        return new DataTerraformRemoteStateHttp(scope, name, this.props);
    }
}
exports.HttpBackend = HttpBackend;
_a = JSII_RTTI_SYMBOL_1;
HttpBackend[_a] = { fqn: "cdktf.HttpBackend", version: "0.20.3" };
// eslint-disable-next-line jsdoc/require-jsdoc
class DataTerraformRemoteStateHttp extends terraform_remote_state_1.TerraformRemoteState {
    constructor(scope, id, config) {
        super(scope, id, "http", config);
    }
}
exports.DataTerraformRemoteStateHttp = DataTerraformRemoteStateHttp;
_b = JSII_RTTI_SYMBOL_1;
DataTerraformRemoteStateHttp[_b] = { fqn: "cdktf.DataTerraformRemoteStateHttp", version: "0.20.3" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1iYWNrZW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaHR0cC1iYWNrZW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBR0EsNERBQXdEO0FBQ3hELGtDQUEwQztBQUMxQyxzRUFHbUM7QUFFbkMsK0NBQStDO0FBQy9DLE1BQWEsV0FBWSxTQUFRLG9DQUFnQjtJQUMvQyxZQUFZLEtBQWdCLEVBQW1CLEtBQXdCO1FBQ3JFLEtBQUssQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRGEsVUFBSyxHQUFMLEtBQUssQ0FBbUI7SUFFdkUsQ0FBQztJQUVTLG9CQUFvQjtRQUM1QixPQUFPLElBQUEsc0JBQWUsRUFBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVTLHVCQUF1QjtRQUMvQixPQUFPLElBQUEsc0JBQWUsRUFBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVNLHdCQUF3QixDQUM3QixLQUFnQixFQUNoQixJQUFZLEVBQ1osVUFBa0I7UUFFbEIsT0FBTyxJQUFJLDRCQUE0QixDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25FLENBQUM7O0FBbkJILGtDQW9CQzs7O0FBRUQsK0NBQStDO0FBQy9DLE1BQWEsNEJBQTZCLFNBQVEsNkNBQW9CO0lBQ3BFLFlBQ0UsS0FBZ0IsRUFDaEIsRUFBVSxFQUNWLE1BQTBDO1FBRTFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNuQyxDQUFDOztBQVBILG9FQVFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBIYXNoaUNvcnAsIEluY1xuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1QTC0yLjBcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgeyBUZXJyYWZvcm1CYWNrZW5kIH0gZnJvbSBcIi4uL3RlcnJhZm9ybS1iYWNrZW5kXCI7XG5pbXBvcnQgeyBrZXlzVG9TbmFrZUNhc2UgfSBmcm9tIFwiLi4vdXRpbFwiO1xuaW1wb3J0IHtcbiAgVGVycmFmb3JtUmVtb3RlU3RhdGUsXG4gIERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZUNvbmZpZyxcbn0gZnJvbSBcIi4uL3RlcnJhZm9ybS1yZW1vdGUtc3RhdGVcIjtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzZG9jL3JlcXVpcmUtanNkb2NcbmV4cG9ydCBjbGFzcyBIdHRwQmFja2VuZCBleHRlbmRzIFRlcnJhZm9ybUJhY2tlbmQge1xuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBwcml2YXRlIHJlYWRvbmx5IHByb3BzOiBIdHRwQmFja2VuZENvbmZpZykge1xuICAgIHN1cGVyKHNjb3BlLCBcImJhY2tlbmRcIiwgXCJodHRwXCIpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHN5bnRoZXNpemVBdHRyaWJ1dGVzKCk6IHsgW25hbWU6IHN0cmluZ106IGFueSB9IHtcbiAgICByZXR1cm4ga2V5c1RvU25ha2VDYXNlKHsgLi4udGhpcy5wcm9wcyB9KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzeW50aGVzaXplSGNsQXR0cmlidXRlcygpOiB7IFtuYW1lOiBzdHJpbmddOiBhbnkgfSB7XG4gICAgcmV0dXJuIGtleXNUb1NuYWtlQ2FzZSh7IC4uLnRoaXMucHJvcHMgfSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0UmVtb3RlU3RhdGVEYXRhU291cmNlKFxuICAgIHNjb3BlOiBDb25zdHJ1Y3QsXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIF9mcm9tU3RhY2s6IHN0cmluZ1xuICApOiBUZXJyYWZvcm1SZW1vdGVTdGF0ZSB7XG4gICAgcmV0dXJuIG5ldyBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVIdHRwKHNjb3BlLCBuYW1lLCB0aGlzLnByb3BzKTtcbiAgfVxufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganNkb2MvcmVxdWlyZS1qc2RvY1xuZXhwb3J0IGNsYXNzIERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZUh0dHAgZXh0ZW5kcyBUZXJyYWZvcm1SZW1vdGVTdGF0ZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHNjb3BlOiBDb25zdHJ1Y3QsXG4gICAgaWQ6IHN0cmluZyxcbiAgICBjb25maWc6IERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZUh0dHBDb25maWdcbiAgKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCBcImh0dHBcIiwgY29uZmlnKTtcbiAgfVxufVxuLyoqXG4gKiBTdG9yZXMgdGhlIHN0YXRlIHVzaW5nIGEgc2ltcGxlIFJFU1QgY2xpZW50LlxuICpcbiAqIFN0YXRlIHdpbGwgYmUgZmV0Y2hlZCB2aWEgR0VULCB1cGRhdGVkIHZpYSBQT1NULCBhbmQgcHVyZ2VkIHdpdGggREVMRVRFLlxuICogVGhlIG1ldGhvZCB1c2VkIGZvciB1cGRhdGluZyBpcyBjb25maWd1cmFibGUuXG4gKlxuICogVGhpcyBiYWNrZW5kIG9wdGlvbmFsbHkgc3VwcG9ydHMgc3RhdGUgbG9ja2luZy5cbiAqIFdoZW4gbG9ja2luZyBzdXBwb3J0IGlzIGVuYWJsZWQgaXQgd2lsbCB1c2UgTE9DSyBhbmQgVU5MT0NLIHJlcXVlc3RzIHByb3ZpZGluZyB0aGUgbG9jayBpbmZvIGluIHRoZSBib2R5LlxuICogVGhlIGVuZHBvaW50IHNob3VsZCByZXR1cm4gYSA0MjM6IExvY2tlZCBvciA0MDk6IENvbmZsaWN0IHdpdGggdGhlIGhvbGRpbmcgbG9jayBpbmZvIHdoZW5cbiAqIGl0J3MgYWxyZWFkeSB0YWtlbiwgMjAwOiBPSyBmb3Igc3VjY2Vzcy4gQW55IG90aGVyIHN0YXR1cyB3aWxsIGJlIGNvbnNpZGVyZWQgYW4gZXJyb3IuXG4gKiBUaGUgSUQgb2YgdGhlIGhvbGRpbmcgbG9jayBpbmZvIHdpbGwgYmUgYWRkZWQgYXMgYSBxdWVyeSBwYXJhbWV0ZXIgdG8gc3RhdGUgdXBkYXRlcyByZXF1ZXN0cy5cbiAqXG4gKiBSZWFkIG1vcmUgYWJvdXQgdGhpcyBiYWNrZW5kIGluIHRoZSBUZXJyYWZvcm0gZG9jczpcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLmhhc2hpY29ycC5jb20vdGVycmFmb3JtL2xhbmd1YWdlL3NldHRpbmdzL2JhY2tlbmRzL2h0dHBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBIdHRwQmFja2VuZENvbmZpZyB7XG4gIC8qKlxuICAgKiAoUmVxdWlyZWQpIFRoZSBhZGRyZXNzIG9mIHRoZSBSRVNUIGVuZHBvaW50XG4gICAqL1xuICByZWFkb25seSBhZGRyZXNzOiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIEhUVFAgbWV0aG9kIHRvIHVzZSB3aGVuIHVwZGF0aW5nIHN0YXRlLiBEZWZhdWx0cyB0byBQT1NULlxuICAgKi9cbiAgcmVhZG9ubHkgdXBkYXRlTWV0aG9kPzogc3RyaW5nO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBUaGUgYWRkcmVzcyBvZiB0aGUgbG9jayBSRVNUIGVuZHBvaW50LiBEZWZhdWx0cyB0byBkaXNhYmxlZC5cbiAgICovXG4gIHJlYWRvbmx5IGxvY2tBZGRyZXNzPzogc3RyaW5nO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBUaGUgSFRUUCBtZXRob2QgdG8gdXNlIHdoZW4gbG9ja2luZy4gRGVmYXVsdHMgdG8gTE9DSy5cbiAgICovXG4gIHJlYWRvbmx5IGxvY2tNZXRob2Q/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIFRoZSBhZGRyZXNzIG9mIHRoZSB1bmxvY2sgUkVTVCBlbmRwb2ludC4gRGVmYXVsdHMgdG8gZGlzYWJsZWQuXG4gICAqL1xuICByZWFkb25seSB1bmxvY2tBZGRyZXNzPzogc3RyaW5nO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBUaGUgSFRUUCBtZXRob2QgdG8gdXNlIHdoZW4gdW5sb2NraW5nLiBEZWZhdWx0cyB0byBVTkxPQ0suXG4gICAqL1xuICByZWFkb25seSB1bmxvY2tNZXRob2Q/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIFRoZSB1c2VybmFtZSBmb3IgSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgKi9cbiAgcmVhZG9ubHkgdXNlcm5hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIFRoZSBwYXNzd29yZCBmb3IgSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgKi9cbiAgcmVhZG9ubHkgcGFzc3dvcmQ/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIFdoZXRoZXIgdG8gc2tpcCBUTFMgdmVyaWZpY2F0aW9uLiBEZWZhdWx0cyB0byBmYWxzZS5cbiAgICovXG4gIHJlYWRvbmx5IHNraXBDZXJ0VmVyaWZpY2F0aW9uPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgVGhlIG51bWJlciBvZiBIVFRQIHJlcXVlc3QgcmV0cmllcy4gRGVmYXVsdHMgdG8gMi5cbiAgICovXG4gIHJlYWRvbmx5IHJldHJ5TWF4PzogbnVtYmVyO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBUaGUgbWluaW11bSB0aW1lIGluIHNlY29uZHMgdG8gd2FpdCBiZXR3ZWVuIEhUVFAgcmVxdWVzdCBhdHRlbXB0cy4gRGVmYXVsdHMgdG8gMS5cbiAgICovXG4gIHJlYWRvbmx5IHJldHJ5V2FpdE1pbj86IG51bWJlcjtcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgVGhlIG1heGltdW0gdGltZSBpbiBzZWNvbmRzIHRvIHdhaXQgYmV0d2VlbiBIVFRQIHJlcXVlc3QgYXR0ZW1wdHMuIERlZmF1bHRzIHRvIDMwLlxuICAgKi9cbiAgcmVhZG9ubHkgcmV0cnlXYWl0TWF4PzogbnVtYmVyO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBBIFBFTS1lbmNvZGVkIGNlcnRpZmljYXRlIHVzZWQgYnkgdGhlIHNlcnZlciB0byB2ZXJpZnkgdGhlIGNsaWVudFxuICAgKiBkdXJpbmcgbXV0dWFsIFRMUyAobVRMUykgYXV0aGVudGljYXRpb24uXG4gICAqL1xuICByZWFkb25seSBjbGllbnRDZXJ0aWZpY2F0ZVBlbT86IHN0cmluZztcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgQSBQRU0tZW5jb2RlZCBwcml2YXRlIGtleSwgcmVxdWlyZWQgaWYgY2xpZW50X2NlcnRpZmljYXRlX3BlbSBpcyBzcGVjaWZpZWQuXG4gICAqL1xuICByZWFkb25seSBjbGllbnRQcml2YXRlS2V5UGVtPzogc3RyaW5nO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBBIFBFTS1lbmNvZGVkIENBIGNlcnRpZmljYXRlIGNoYWluIHVzZWQgYnkgdGhlIGNsaWVudCB0byB2ZXJpZnkgc2VydmVyXG4gICAqIGNlcnRpZmljYXRlcyBkdXJpbmcgVExTIGF1dGhlbnRpY2F0aW9uLlxuICAgKi9cbiAgcmVhZG9ubHkgY2xpZW50Q2FDZXJ0aWZpY2F0ZVBlbT86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVIdHRwQ29uZmlnXG4gIGV4dGVuZHMgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlQ29uZmlnLFxuICAgIEh0dHBCYWNrZW5kQ29uZmlnIHt9XG4iXX0=