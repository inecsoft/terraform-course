"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
const index_1 = require("../index");
const resource_1 = require("../../../test/helper/resource");
const matchers_1 = require("../matchers");
const data_source_1 = require("../../../test/helper/data-source");
const terraform_stack_1 = require("../../terraform-stack");
const provider_1 = require("../../../test/helper/provider");
const fs = require("fs");
const path = require("path");
function corruptSynthesizedStack(stackPath) {
    const manifest = JSON.parse(fs.readFileSync(path.resolve(stackPath, "manifest.json"), "utf8"));
    const { synthesizedStackPath } = Object.values(manifest.stacks)[0];
    const absoluteStackPath = path.resolve(stackPath, synthesizedStackPath);
    fs.writeFileSync(absoluteStackPath, fs.readFileSync(absoluteStackPath, "utf8") +
        "Weird text that makes the JSON file invalid", "utf8");
}
describe("deepEqualIgnoringObjectCasing", () => {
    it("should compare simple items", () => {
        expect((0, matchers_1.asymetricDeepEqualIgnoringObjectCasing)(1, 1)).toBe(true);
        expect((0, matchers_1.asymetricDeepEqualIgnoringObjectCasing)("1", "1")).toBe(true);
        expect((0, matchers_1.asymetricDeepEqualIgnoringObjectCasing)(true, true)).toBe(true);
        expect((0, matchers_1.asymetricDeepEqualIgnoringObjectCasing)(false, false)).toBe(true);
        expect((0, matchers_1.asymetricDeepEqualIgnoringObjectCasing)(null, null)).toBe(true);
        expect((0, matchers_1.asymetricDeepEqualIgnoringObjectCasing)(undefined, undefined)).toBe(true);
        expect((0, matchers_1.asymetricDeepEqualIgnoringObjectCasing)([1, 2, 3], [1, 2, 3])).toBe(true);
        expect((0, matchers_1.asymetricDeepEqualIgnoringObjectCasing)({ a: 1, b: 2 }, { a: 1, b: 2 })).toBe(true);
        expect((0, matchers_1.asymetricDeepEqualIgnoringObjectCasing)(1, 2)).toBe(false);
    });
    it("should compare arrays", () => {
        expect((0, matchers_1.asymetricDeepEqualIgnoringObjectCasing)([1, 2, 3], [1, 2, 3])).toBe(true);
        expect((0, matchers_1.asymetricDeepEqualIgnoringObjectCasing)([1, 2, 3], [1, 2, 4])).toBe(false);
        expect((0, matchers_1.asymetricDeepEqualIgnoringObjectCasing)([1, 2, 3], [1, 2, 3, 4])).toBe(false);
    });
    it("should compare objects", () => {
        expect((0, matchers_1.asymetricDeepEqualIgnoringObjectCasing)({ a: 1, b: 2 }, { a: 1, b: 2 })).toBe(true);
        expect((0, matchers_1.asymetricDeepEqualIgnoringObjectCasing)({ a: { c: 3 }, b: 2 }, { a: { c: 3 }, b: 2 })).toBe(true);
        expect((0, matchers_1.asymetricDeepEqualIgnoringObjectCasing)({ a: 3, b: 2 }, { a: { c: 3 }, b: 2 })).toBe(false);
        expect((0, matchers_1.asymetricDeepEqualIgnoringObjectCasing)({ a: { c: 3 }, b: 2 }, { a: 3, b: 2 })).toBe(false);
    });
    it("should ignore case when comparing object keys", () => {
        expect((0, matchers_1.asymetricDeepEqualIgnoringObjectCasing)({ a: 1, fooBar: 2 }, { a: 1, foo_bar: 2 })).toBe(true);
        expect((0, matchers_1.asymetricDeepEqualIgnoringObjectCasing)({ a: { fooBar: 2 } }, { a: { foo_bar: 2 } })).toBe(true);
    });
    it("should ignore keys not present in expectation", () => {
        expect((0, matchers_1.asymetricDeepEqualIgnoringObjectCasing)({ a: { fooBar: 2 } }, { a: { foo_bar: 2 }, b: 3 })).toBe(true);
    });
});
describe("matchers", () => {
    const toHaveResourceWithProperties = (0, matchers_1.getToHaveResourceWithProperties)();
    describe("toHaveResourceWithProperties", () => {
        let synthesizedStack;
        beforeEach(() => {
            synthesizedStack = index_1.Testing.synthScope((scope) => {
                new resource_1.TestResource(scope, "test", { name: "test", tags: { foo: "bar" } });
            });
        });
        it("should pass with no properties", () => {
            const res = toHaveResourceWithProperties(synthesizedStack, resource_1.TestResource);
            expect(res.pass).toBeTruthy();
            expect(res.message).toMatchInlineSnapshot(`
        "Expected no test_resource with properties {} to be present in synthesized stack.
        Found 1 test_resource resources instead:
        [
          {
            "name": "test",
            "tags": {
              "foo": "bar"
            }
          }
        ]"
      `);
        });
        it("should fail with wrong resouce", () => {
            const res = toHaveResourceWithProperties(synthesizedStack, data_source_1.TestDataSource);
            expect(res.pass).toBeFalsy();
            expect(res.message).toMatchInlineSnapshot(`
        "Expected test_data_source with properties {} to be present in synthesized stack.
        Found no test_data_source resources instead"
      `);
        });
        it("should work on nested elements", () => {
            const res = toHaveResourceWithProperties(synthesizedStack, resource_1.TestResource, {
                tags: { foo: "bar" },
            });
            expect(res.pass).toBeTruthy();
        });
        it("should fail if no item is found as asserted", () => {
            const res = toHaveResourceWithProperties(synthesizedStack, resource_1.DockerImage);
            expect(res.pass).toBeFalsy();
        });
    });
    describe("toHaveDataSourceWithProperties", () => {
        const toHaveDataSourceWithProperties = (0, matchers_1.getToHaveDataSourceWithProperties)();
        let synthesizedStack;
        beforeEach(() => {
            synthesizedStack = index_1.Testing.synthScope((scope) => {
                new resource_1.TestResource(scope, "test", { name: "test" });
                new data_source_1.TestDataSource(scope, "test-data-source", { name: "data" });
            });
        });
        it("should not find resources", () => {
            const res = toHaveDataSourceWithProperties(synthesizedStack, resource_1.TestResource);
            expect(res.pass).toBeFalsy();
        });
        it("should find data sources", () => {
            const res = toHaveDataSourceWithProperties(synthesizedStack, data_source_1.TestDataSource, { name: "data" });
            expect(res.pass).toBeTruthy();
        });
    });
    describe("toHaveProviderWithProperties", () => {
        const toHaveProviderWithProperties = (0, matchers_1.getToHaveProviderWithProperties)();
        let synthesizedStack;
        let synthesizedStackNoProvider;
        beforeEach(() => {
            synthesizedStack = index_1.Testing.synthScope((scope) => {
                new provider_1.DockerProvider(scope, "test-provider", {
                    alias: "test-alias",
                    ssh_opts: ["-o", "StrictHostKeyChecking=no"],
                });
                new resource_1.DockerImage(scope, "test-image", { name: "test" });
            });
            synthesizedStackNoProvider = index_1.Testing.synthScope((scope) => {
                new resource_1.DockerImage(scope, "test", { name: "test" });
            });
        });
        it("should find provider", () => {
            const res = toHaveProviderWithProperties(synthesizedStack, provider_1.DockerProvider, { alias: "test-alias", ssh_opts: ["-o", "StrictHostKeyChecking=no"] });
            expect(res.pass).toBeTruthy();
        });
        it("should not find provider", () => {
            const res = toHaveProviderWithProperties(synthesizedStackNoProvider, provider_1.DockerProvider, {});
            expect(res.pass).toBeFalsy();
        });
        it("should not find resources", () => {
            const res = toHaveProviderWithProperties(synthesizedStack, resource_1.TestResource);
            expect(res.pass).toBeFalsy();
        });
        it("should not find data sources", () => {
            const res = toHaveProviderWithProperties(synthesizedStack, data_source_1.TestDataSource);
            expect(res.pass).toBeFalsy();
        });
    });
    describe("toBeValidTerraform", () => {
        it("fails if anything but a path is passed", () => {
            const res = (0, matchers_1.toBeValidTerraform)("not a path");
            expect(res.pass).toBeFalsy();
            expect(res.message).toMatchInlineSnapshot(`"Expected subject to be a terraform directory: Error: ENOENT: no such file or directory, stat 'not a path'"`);
        });
        it("succeeds if the terraform config passed is valid", () => {
            const app = index_1.Testing.app();
            const stack = new terraform_stack_1.TerraformStack(app, "test");
            new provider_1.DockerProvider(stack, "provider", {});
            new resource_1.DockerImage(stack, "test", { name: "test" });
            const res = (0, matchers_1.toBeValidTerraform)(index_1.Testing.fullSynth(stack));
            expect(res.pass).toBeTruthy();
            expect(res.message).toMatchInlineSnapshot(`"Expected subject not to be a valid terraform stack"`);
        });
        it("fails if the terraform config passed is invalid", () => {
            const app = index_1.Testing.app();
            const stack = new terraform_stack_1.TerraformStack(app, "test");
            new provider_1.DockerProvider(stack, "provider", {});
            new resource_1.DockerImage(stack, "test", { name: "test" });
            const result = index_1.Testing.fullSynth(stack);
            corruptSynthesizedStack(result);
            const res = (0, matchers_1.toBeValidTerraform)(result);
            expect(res.pass).toBeFalsy();
            expect(res.message).toEqual(expect.stringContaining("Expected subject to be a valid terraform stack"));
            const tf1_3 = "There are some problems with the configuration, described below";
            const tf1_4 = "Terraform encountered problems during initialisation, including problems\n with the configuration, described below";
            const tf1_5 = "Extra characters appear after the JSON value";
            expect(res.message).toEqual(expect.stringMatching(new RegExp(`${tf1_3}|${tf1_4}|${tf1_5}`)));
        });
    });
    describe("toPlanSuccessfully", () => {
        it("fails if anything but a path is passed", () => {
            const res = (0, matchers_1.toPlanSuccessfully)("not a path");
            expect(res.pass).toBeFalsy();
            expect(res.message).toMatchInlineSnapshot(`"Expected subject to be a terraform directory: Error: ENOENT: no such file or directory, stat 'not a path'"`);
        });
        it("succeeds if the terraform config passed is valid", () => {
            const app = index_1.Testing.app();
            const stack = new terraform_stack_1.TerraformStack(app, "test");
            new provider_1.DockerProvider(stack, "provider", {});
            new resource_1.DockerImage(stack, "test", { name: "test" });
            const res = (0, matchers_1.toPlanSuccessfully)(index_1.Testing.fullSynth(stack));
            expect(res.pass).toBeTruthy();
            expect(res.message).toMatchInlineSnapshot(`"Expected subject not to plan successfully"`);
        });
        it("fails if the terraform config passed is invalid", () => {
            const app = index_1.Testing.app();
            const stack = new terraform_stack_1.TerraformStack(app, "test");
            new provider_1.DockerProvider(stack, "provider", {});
            new resource_1.DockerImage(stack, "test", { name: "test" });
            const result = index_1.Testing.fullSynth(stack);
            corruptSynthesizedStack(result);
            const res = (0, matchers_1.toPlanSuccessfully)(result);
            expect(res.pass).toBeFalsy();
            expect(res.message).toEqual(expect.stringContaining("Expected subject to plan successfully"));
        });
    });
});
//# sourceMappingURL=data:application/json;base64,