"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.synthesizeTree = exports.TREE_FILE_PATH = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const std_1 = require("../std");
const base_1 = require("../ui/base");
const colors_1 = require("../ui/colors");
exports.TREE_FILE_PATH = "tree.json";
/**
 * Symbol for accessing jsii runtime information.
 */
const JSII_RUNTIME_SYMBOL = Symbol.for("jsii.rtti");
function constructInfoFromConstruct(construct) {
    const jsiiRuntimeInfo = Object.getPrototypeOf(construct).constructor[JSII_RUNTIME_SYMBOL];
    if (typeof jsiiRuntimeInfo === "object" &&
        jsiiRuntimeInfo !== null &&
        typeof jsiiRuntimeInfo.fqn === "string" &&
        typeof jsiiRuntimeInfo.version === "string") {
        return { fqn: jsiiRuntimeInfo.fqn, version: jsiiRuntimeInfo.version };
    }
    return undefined;
}
function synthesizeTree(app, outdir) {
    const visit = (construct) => {
        const children = construct.node.children.map((c) => visit(c));
        const childrenMap = children
            .filter((child) => child !== undefined)
            .reduce((map, child) => Object.assign(map, { [child.id]: child }), {});
        const node = {
            id: construct.node.id || "App",
            path: construct.node.path,
            children: Object.keys(childrenMap).length === 0 ? undefined : childrenMap,
            constructInfo: constructInfoFromConstruct(construct),
            display: synthDisplay(construct),
        };
        return node;
    };
    const tree = {
        version: "tree-0.1",
        tree: visit(app.node.root),
    };
    fs.writeFileSync(path.join(outdir, exports.TREE_FILE_PATH), JSON.stringify(tree, undefined, 2), { encoding: "utf8" });
}
exports.synthesizeTree = synthesizeTree;
function isIResource(construct) {
    return construct instanceof std_1.Resource;
}
function synthDisplay(construct) {
    if (!isIResource(construct)) {
        return;
    }
    const display = std_1.Node.of(construct);
    const ui = [];
    // generate ui data only based on direct children
    for (const child of construct.node.children) {
        if (base_1.VisualComponent.isVisualComponent(child) &&
            child._newParent === undefined) {
            ui.push(child._toUIComponent());
        }
    }
    if (display.description ||
        display.title ||
        display.hidden ||
        ui ||
        display.color ||
        display.icon) {
        return {
            title: display.title,
            description: display.description,
            hidden: display.hidden,
            sourceModule: display.sourceModule,
            ui: ui.length > 0 ? ui : undefined,
            color: (0, colors_1.isOfTypeColors)(display.color) ? display.color : undefined,
            icon: display.icon,
        };
    }
    return;
}
//# sourceMappingURL=data:application/json;base64,