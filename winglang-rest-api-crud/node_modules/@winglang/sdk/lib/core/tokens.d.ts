import { IInflightHost } from "../std";
/**
 * Represents values that can only be resolved after the app is synthesized.
 * Tokens values are captured as environment variable, and resolved through the compilation target token mechanism.
 */
export interface ITokenResolver {
    /**
     * Returns true is the given value is a token.
     */
    isToken(value: any): boolean;
    /**
     * "Lifts" a value into an inflight context.
     */
    lift(value: any): string;
    /**
     * Lifts the given token to the host.
     */
    onLiftValue(host: IInflightHost, value: any): void;
}
/**
 * Creates a valid environment variable name from the given token.
 */
export declare function tokenEnvName(value: string): string;
/**
 * Globally registers a new token resolver
 */
export declare function registerTokenResolver(resolver: ITokenResolver): void;
/**
 * Find the first token resolver that considers the given value a token (or containing token(s)).
 */
export declare function getTokenResolver(value: any): ITokenResolver | undefined;
