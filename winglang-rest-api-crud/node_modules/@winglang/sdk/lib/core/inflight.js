"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.importInflight = exports.inflight = exports.lift = exports.InflightClient = exports.closureId = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const path_1 = require("path");
const lifting_1 = require("./lifting");
const types_1 = require("./types");
const misc_1 = require("../shared/misc");
let closureCount = 0;
function closureId() {
    return closureCount++;
}
exports.closureId = closureId;
/**
 * Utility class with functions about inflight clients.
 */
class InflightClient {
    /**
     * Returns code for creating an inflight client.
     */
    static for(dirname, filename, clientClass, args) {
        const inflightDir = dirname;
        const inflightFile = (0, path_1.basename)(filename).split(".")[0] + ".inflight";
        return `new (require("${(0, misc_1.normalPath)(`${inflightDir}/${inflightFile}`)}")).${clientClass}(${args.join(", ")})`;
    }
    /**
     * Returns code for implementing `_toInflightType()`.
     */
    static forType(filename, clientClass) {
        return `require("${(0, misc_1.normalPath)(filename)}").${clientClass}`;
    }
    constructor() { }
}
exports.InflightClient = InflightClient;
_a = JSII_RTTI_SYMBOL_1;
InflightClient[_a] = { fqn: "@winglang/sdk.core.InflightClient", version: "0.0.0" };
/**
 * Prepares preflight objects for use in inflight functions.
 *
 * Conventionally, this is used by passing in a `const` object to bind it with the same name
 *
 * ```ts
 * const bucket = new cloud.Bucket(app, "Bucket");
 * const number = 5;
 *
 * lift({ bucket, number })
 *   .inflight(({ bucket, number }) => { ... }))
 * ```
 *
 * However, the name is not required to match the variable in the current scope.
 *
 * This is especially useful/necessary when lifting data via a reference or some other expression
 *
 * ```ts
 * const bucket = new cloud.Bucket(app, "Bucket");
 *
 * lift({ bkt: bucket, sum: 2 + 2, field: bucket.field })
 *   .inflight(({ bkt, sum, field }) => { ... }))
 * ```
 */
function lift(captures) {
    return new Lifter().lift(captures);
}
exports.lift = lift;
/**
 * Creates a inflight function.
 *
 * This function must not reference any variables outside of its scope.
 * If needed, use `lift` to bind variables to the scope of the function.
 *
 * Built-in NodeJS globals are available, such as `console` and `process`.
 * @wing inflight
 */
function inflight(fn) {
    return new Lifter().inflight(fn);
}
exports.inflight = inflight;
/**
 * Create an inflight function from a string.
 */
function importInflight(
/**
 * Raw JavaScript to use as the inflight function.
 */
inflightText, 
/**
 * The lifts the JS needs to be able to access.
 */
lifts) {
    const newLifts = {};
    const newGrants = {};
    // convert the lifts to the correct format for the Lifter
    for (const liftAnnotation of lifts ?? []) {
        if (liftAnnotation.alias === undefined) {
            throw new Error("The alias field is required for all lifts");
        }
        newLifts[liftAnnotation.alias] = liftAnnotation.obj;
        if (liftAnnotation.ops) {
            newGrants[liftAnnotation.alias] = liftAnnotation.ops;
        }
    }
    return (lift(newLifts)
        .grant(newGrants)
        // cast as any because the inflight has already been pre-serialized
        .inflight(inflightText));
}
exports.importInflight = importInflight;
/**
 * Manages the liftable objects and operations for an inflight function.
 */
class Lifter {
    constructor(lifts = {}, grants = {}) {
        this.lifts = lifts;
        this.grants = grants;
    }
    /**
     * Add additional liftable objects to the scope of the inflight function.
     * Any existing liftable objects with the same name will be overwritten.
     *
     * Conventionally, this is used by passing in a `const` object to bind it with the same name
     *
     * ```ts
     * const bucket = new cloud.Bucket(app, "Bucket");
     * const number = 5;
     *
     * lift({ bucket, number })
     *   .inflight(({ bucket, number }) => { ... }))
     * ```
     *
     * However, the name is not required to match the variable in the current scope.
     *
     * This is especially useful/necessary when lifting data via a reference or some other expression
     *
     * ```ts
     * const bucket = new cloud.Bucket(app, "Bucket");
     *
     * lift({ bkt: bucket, sum: 2 + 2, field: bucket.field })
     *   .inflight(({ bkt, sum, field }) => { ... }))
     * ```
     */
    lift(captures) {
        return new Lifter({
            ...this.lifts,
            ...captures,
        }, this.grants);
    }
    /**
     * Grant permissions for lifted resources.
     *
     * By default, all all possible methods are granted to lifted resources.
     * This function restricts those:
     *
     * ```ts
     * const bucket = new cloud.Bucket(app, "Bucket");
     *
     * lift({ bucket })
     *   .grant({ bucket: ["get"] })
     *   .inflight(({ bucket }) => {
     *     await bucket.get("key");
     *     await bucket.set("key", "value"); // Error: set is not granted
     *   });
     * ```
     *
     * fields are always accessible, even if not granted.
     */
    grant(grants) {
        return new Lifter(this.lifts, {
            ...this.grants,
            ...grants,
        });
    }
    /**
     * Create an inflight function with the available lifted data.
     *
     * This function must not reference any variables outside of its scope.
     * If needed, use `lift` again to bind variables to the scope of the function.
     * Bound variables will be available as properties on the `ctx` object passed as the first argument to the function.
     *
     * Built-in NodeJS globals are available, such as `console` and `process`.
     * @wing inflight
     */
    inflight(fn) {
        // This is a simplified version of the Wing compiler's _liftMap generation
        // It specifies what transitive permissions need to be added based on what
        // inflight methods are called on an object
        // The SDK models inflight functions as objects with a "handle" property,
        // so here we annotate that "handle" needs all of the required permissions
        const _liftMap = { handle: [] };
        for (const [key, obj] of Object.entries(this.lifts)) {
            const knownOps = this.grants[key] ??
                Object.keys(obj._liftMap ?? {}).filter((x) => x !== lifting_1.INFLIGHT_INIT_METHOD_NAME // filter "$inflight_init"
                );
            _liftMap.handle.push([obj, knownOps]);
        }
        return {
            _id: closureId(),
            _toInflight: () => {
                // Extremely advanced function serialization
                const serializedFunction = fn.toString();
                return `\
(await (async () => {
  const $func = ${serializedFunction}
  const $ctx = {
  ${Object.entries(this.lifts)
                    .map(([name, liftable]) => `${name}: ${(0, lifting_1.liftObject)(liftable)}`)
                    .join(",\n")}
  };
  let newFunction = async (...args) => {
    return $func($ctx, ...args);
  };
  newFunction.handle = newFunction;
  return newFunction;
}
)())`;
            },
            _liftMap,
            // @ts-expect-error This function's type doesn't actually match, but it will just throw anyways
            [types_1.INFLIGHT_SYMBOL]: () => {
                throw new Error("This is a inflight function and can only be invoked while inflight");
            },
        };
    }
}
//# sourceMappingURL=data:application/json;base64,