"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdatePlan = exports.Simulator = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const fs_1 = require("fs");
const promises_1 = require("fs/promises");
const path_1 = require("path");
const client_1 = require("./client");
const graph_1 = require("./graph");
const serialization_1 = require("./serialization");
const tokens_1 = require("./tokens");
const tree_1 = require("./tree");
const util_1 = require("./util");
const constants_1 = require("../constants");
const core_1 = require("../core");
const misc_1 = require("../shared/misc");
const std_1 = require("../std");
const target_sim_1 = require("../target-sim");
const LOCALHOST_ADDRESS = "127.0.0.1";
const HANDLE_ATTRIBUTE = "handle";
/**
 * If an API call is made to a resource with name as the caller, any permissions
 * checking will be skipped. Used by unit tests and the Wing Console.
 */
const ADMIN_PERMISSION = "admin";
/**
 * A simulator that can be used to test your application locally.
 */
class Simulator {
    constructor(props) {
        // keeps the actual resolved state (props and attrs) of all started resources. this state is
        // merged in when calling `getResourceConfig()`.
        this.state = {};
        const simdir = (0, path_1.resolve)(props.simfile);
        this.statedir = props.stateDir ?? (0, path_1.join)(simdir, ".state");
        this._model = this._loadApp(simdir);
        this._running = "stopped";
        this._handles = new HandleManager();
        this._policyRegistry = new PolicyRegistry();
        this._traces = new Array();
        this._traceSubscribers = new Array();
    }
    _loadApp(simdir) {
        const simJson = (0, path_1.join)(simdir, "simulator.json");
        if (!(0, fs_1.existsSync)(simJson)) {
            throw new Error(`Invalid Wing app (${simdir}) - simulator.json not found.`);
        }
        const schema = (0, misc_1.readJsonSync)(simJson);
        const foundVersion = schema.sdkVersion ?? "unknown";
        const expectedVersion = constants_1.SDK_VERSION;
        if (foundVersion !== expectedVersion) {
            console.error(`WARNING: The simulator directory (${simdir}) was generated with Wing SDK v${foundVersion} but it is being simulated with Wing SDK v${expectedVersion}.`);
        }
        if (schema.resources === undefined) {
            throw new Error(`Incompatible .wsim file. The simulator directory (${simdir}) was generated with Wing SDK v${foundVersion} but it is being simulated with Wing SDK v${expectedVersion}.`);
        }
        const treeJson = (0, path_1.join)(simdir, core_1.TREE_FILE_PATH);
        if (!(0, fs_1.existsSync)(treeJson)) {
            throw new Error(`Invalid Wing app (${simdir}) - ${core_1.TREE_FILE_PATH} not found.`);
        }
        const tree = new tree_1.Tree((0, misc_1.readJsonSync)(treeJson));
        const connectionJson = (0, path_1.join)(simdir, std_1.CONNECTIONS_FILE_PATH);
        if (!(0, fs_1.existsSync)(connectionJson)) {
            throw new Error(`Invalid Wing app (${simdir}) - ${std_1.CONNECTIONS_FILE_PATH} not found.`);
        }
        const connections = (0, misc_1.readJsonSync)(connectionJson).connections;
        const graph = new graph_1.Graph(Object.values(schema.resources));
        return { schema, tree, connections, simdir, graph };
    }
    /**
     * Start the simulator.
     */
    async start() {
        if (this._running !== "stopped") {
            throw new Error("A simulation is already running. Did you mean to call `await simulator.stop()` first?");
        }
        this._running = "starting";
        await this.startServer();
        try {
            await this.startResources();
        }
        catch (err) {
            this.stopServer();
            this._running = "stopped";
            throw err;
        }
    }
    async startResources() {
        const retries = {};
        const queue = this._model.graph.nodes.map((n) => n.path);
        const failed = [];
        while (queue.length > 0) {
            const top = queue.shift();
            try {
                await this.startResource(top);
            }
            catch (e) {
                if (e instanceof UnresolvedTokenError) {
                    retries[top] = (retries[top] ?? 0) + 1;
                    if (retries[top] < 10) {
                        queue.push(top);
                        continue;
                    }
                    else {
                        failed.push(top);
                    }
                }
                this.addSimulatorTrace(top, { message: e.message }, std_1.LogLevel.ERROR);
            }
        }
        // mark as "running" so that we can stop the simulation if needed
        this._running = "running";
        // since some resources failed to start, we are going to stop all resources that were started
        if (failed.length > 0) {
            await this.stop();
            throw new Error(`Failed to start resources: ${failed.map((r) => `"${r}"`).join(", ")}`);
        }
    }
    /**
     * Updates the running simulation with a new version of the app. This will create/update/delete
     * resources as necessary to get to the desired state.
     * @param simDir The path to the new version of the app
     */
    async update(simDir) {
        const newModel = this._loadApp(simDir);
        const plan = await this.planUpdate(this._model.schema.resources, newModel.schema.resources);
        this.addTrace({
            type: std_1.TraceType.SIMULATOR,
            data: {
                message: `Update: ${plan.added.length} added, ${plan.updated.length} updated, ${plan.deleted.length} deleted`,
                update: plan,
            },
            sourcePath: "root",
            sourceType: "Simulator",
            level: std_1.LogLevel.VERBOSE,
            timestamp: new Date().toISOString(),
        });
        // stop all *deleted* and *updated* resources
        for (const c of [...plan.deleted, ...plan.updated]) {
            await this.stopResource(c); // <-- this also stops all dependent resources if needed
        }
        // now update the internal model to the new version
        this._model = newModel;
        // start all *added* and *updated* resources (the updated model basically includes only these)
        // this will also start all dependencies as needed and not touch any resource that is already started
        await this.startResources();
    }
    /**
     * Stop the simulation and clean up all resources.
     */
    async stop() {
        if (this._running === "starting") {
            throw new Error("Cannot stop a simulation that is still starting.");
        }
        if (this._running === "stopping") {
            throw new Error("There is already a stop operation in progress.");
        }
        if (this._running === "stopped") {
            throw new Error("There is no running simulation to stop. Did you mean to call `await simulator.start()` first?");
        }
        this._running = "stopping";
        // just call "stopResource" for all resources. it will stop all dependents as well.
        for (const node of this._model.graph.nodes) {
            await this.stopResource(node.path);
        }
        this.stopServer();
        this._handles.reset();
        this._running = "stopped";
    }
    isStarted(path) {
        return path in this.state;
    }
    async stopResource(path) {
        if (!this.isStarted(path)) {
            return; // resource is already stopped
        }
        // first, stop all dependent resources
        for (const consumer of this._model.graph.tryFind(path)?.dependents ?? []) {
            await this.stopResource(consumer);
        }
        const handle = this.tryGetResourceHandle(path);
        if (!handle) {
            throw new Error(`Resource ${path} could not be cleaned up, no handle for it was found.`);
        }
        try {
            const resource = this._handles.find(handle);
            await this.ensureStateDirExists(path);
            await resource.save(this.getResourceStateDir(path));
            await resource.cleanup();
            this._handles.deallocate(handle);
        }
        catch (err) {
            console.warn(err);
        }
        // remove the resource's policy from the policy registry
        this._policyRegistry.deregister(path);
        this.addSimulatorTrace(path, { message: `${path} stopped` }, std_1.LogLevel.VERBOSE);
        delete this.state[path]; // delete the state of the resource
    }
    addSimulatorTrace(path, data, level) {
        const resourceConfig = this.getResourceConfig(path);
        this.addTrace({
            type: std_1.TraceType.SIMULATOR,
            level,
            data: data,
            sourcePath: resourceConfig.path,
            sourceType: resourceConfig.type,
            timestamp: new Date().toISOString(),
        });
    }
    /**
     * Stop the simulation, reload the simulation tree from the latest version of
     * the app file, and restart the simulation.
     */
    async reload(resetState) {
        await this.stop();
        if (resetState) {
            await (0, promises_1.rm)(this.statedir, { recursive: true });
            this._traces = [];
        }
        this._model = this._loadApp(this._model.simdir);
        await this.start();
    }
    /**
     * Get a list of all resource paths.
     */
    listResources() {
        return this._model.graph.nodes.map((x) => x.path).sort();
    }
    /**
     * Get a list of all traces from the most recent simulation run.
     */
    listTraces() {
        return [...this._traces];
    }
    /**
     * Get a resource client.
     * @returns the resource
     */
    getResource(path) {
        const client = this.tryGetResource(path);
        if (!client) {
            throw new Error(`Resource "${path}" not found.`);
        }
        return client;
    }
    /**
     * Get a resource client.
     * @returns The resource or undefined if not found
     */
    tryGetResource(path) {
        const handle = this.tryGetResourceHandle(path);
        if (handle) {
            return (0, client_1.makeSimulatorClient)(this.url, handle, ADMIN_PERMISSION);
        }
        // backwards compatibility trick: if a unit test requests a resource with a path like "foo/bar"
        // which is not found, but a resource "foo/bar/Resource" exists and its
        // type is @winglang/sdk.sim.Resource, then we will return that client instead
        const childPath = `${path}/Resource`;
        const childConfig = this.tryGetResourceConfig(childPath);
        if (childConfig?.type === "@winglang/sdk.sim.Resource") {
            const childHandle = this.tryGetResourceHandle(childPath);
            if (childHandle) {
                const client = (0, client_1.makeSimulatorClient)(this.url, childHandle, ADMIN_PERMISSION);
                const get = (_target, method, _receiver) => {
                    return async function (...args) {
                        return client.call(method, args);
                    };
                };
                return new Proxy({}, { get });
            }
        }
        return undefined;
    }
    tryGetResourceHandle(path) {
        return this.tryGetResourceConfig(path)?.attrs[HANDLE_ATTRIBUTE];
    }
    /**
     * Obtain a resource's configuration, including its type, props, and attrs.
     * @returns The resource configuration or undefined if not found
     */
    tryGetResourceConfig(path) {
        // shorthand - assume tree root is named "root" by default
        if (path.startsWith("/")) {
            path = `root${path}`;
        }
        const def = this._model.graph.tryFind(path)?.def;
        if (!def) {
            return undefined;
        }
        const state = this.state[path];
        return {
            ...def,
            // merge the actual state (props and attrs) over the desired state in `def`
            ...state,
        };
    }
    /**
     * Obtain a resource's configuration, including its type, props, and attrs.
     * @param path The resource path
     * @returns The resource configuration
     */
    getResourceConfig(path) {
        const config = this.tryGetResourceConfig(path);
        if (!config) {
            throw new Error(`Resource "${path}" not found.`);
        }
        return config;
    }
    /**
     * Obtain a resource's state directory path.
     * @param path The resource path
     * @returns The resource state directory path
     */
    getResourceStateDir(path) {
        const config = this.getResourceConfig(path);
        return (0, path_1.join)(this.statedir, config.addr);
    }
    async ensureStateDirExists(path) {
        const statedir = this.getResourceStateDir(path);
        const statedirExists = await (0, util_1.exists)(statedir);
        if (!statedirExists) {
            await (0, promises_1.mkdir)(statedir, { recursive: true });
        }
    }
    /**
     * Obtain a resource's visual interaction components.
     * @returns An array of UIComponent objects
     */
    getResourceUI(path) {
        let treeData = this.tree().rawDataForNode(path);
        if (!treeData) {
            throw new Error(`Resource "${path}" not found.`);
        }
        return treeData.display?.ui ?? [];
    }
    typeInfo(fqn) {
        const schema = this._model.schema.types[fqn];
        if (!schema) {
            throw new Error(`Unknown simulator type ${fqn}`);
        }
        return schema;
    }
    /**
     * Register a subscriber that will be notified when a trace is emitted by
     * the simulator.
     */
    onTrace(subscriber) {
        this._traceSubscribers.push(subscriber);
    }
    /**
     * Obtain information about the application's construct tree.
     */
    tree() {
        return this._model.tree;
    }
    /**
     * Obtain information about the application's connections.
     */
    connections() {
        return structuredClone(this._model.connections);
    }
    checkPermission(callerHandle, calleeHandle, method) {
        if (callerHandle === ADMIN_PERMISSION) {
            return { granted: true };
        }
        if (method === "then") {
            // Always grant permissions for the "then" method so that an error isn't thrown
            // if `await client` is called on a Proxy object. In JavaScript, `await x` will
            // implicitly call `x.then()`.
            return { granted: true };
        }
        const callerPath = this._handles.tryFindPath(callerHandle);
        if (!callerPath) {
            return {
                granted: false,
                reason: `(Permission checking) No caller resource with handle "${callerHandle}" found.`,
            };
        }
        const calleePath = this._handles.tryFindPath(calleeHandle);
        if (!calleePath) {
            return {
                granted: false,
                reason: `(Permission checking) No callee resource with handle "${calleeHandle}" found.`,
            };
        }
        if (this._policyRegistry.checkPermission(callerHandle, calleeHandle, method)) {
            return { granted: true };
        }
        return {
            granted: false,
            reason: `Resource "${callerPath}" does not have permission to perform operation "${method}" on resource "${calleePath}".`,
        };
    }
    /**
     * Start a server that allows any resource to be accessed via HTTP.
     */
    async startServer() {
        const requestListener = (req, res) => {
            if (!req.url?.startsWith("/v1/call")) {
                res.writeHead(404);
                res.end();
                return;
            }
            let body = "";
            req.on("data", (chunk) => {
                body += chunk;
            });
            req.on("end", () => {
                const request = (0, serialization_1.deserialize)(body);
                const { caller, handle, method, args } = request;
                const resource = this._handles.tryFind(handle);
                // Check if the caller has permission to call the method on the resource
                const grant = this.checkPermission(caller, handle, method);
                if (!grant.granted) {
                    res.writeHead(403, { "Content-Type": "application/json" });
                    res.end((0, serialization_1.serialize)({
                        error: {
                            message: grant.reason,
                        },
                    }), "utf-8");
                    return;
                }
                // If we weren't able to find a resource with the given handle, it could actually
                // be OK if the resource is still starting up or has already been cleaned up.
                // In that case, we return a 500 error with a message that explains what happened.
                if (!resource) {
                    res.writeHead(500, { "Content-Type": "application/json" });
                    if (this._running === "starting") {
                        res.end((0, serialization_1.serialize)({
                            error: {
                                message: `Resource ${handle} not found. It may not have been initialized yet.`,
                            },
                        }), "utf-8");
                        return;
                    }
                    else if (this._running === "stopping") {
                        res.end((0, serialization_1.serialize)({
                            error: {
                                message: `Resource ${handle} not found. It may have been cleaned up already.`,
                            },
                        }), "utf-8");
                        return;
                    }
                    else {
                        res.end((0, serialization_1.serialize)({
                            error: {
                                message: `Internal error - resource ${handle} not found.`,
                            },
                        }), "utf-8");
                        return;
                    }
                }
                const methodExists = resource[method] !== undefined;
                if (!methodExists) {
                    const resourcePath = this._handles.tryFindPath(handle);
                    res.writeHead(500, { "Content-Type": "application/json" });
                    res.end((0, serialization_1.serialize)({
                        error: {
                            message: `Method "${method}" not found on resource ${handle} (${resourcePath}).`,
                        },
                    }), "utf-8");
                    return;
                }
                resource[method](...args)
                    .then((result) => {
                    res.writeHead(200, { "Content-Type": "application/json" });
                    res.end((0, serialization_1.serialize)({ result }), "utf-8");
                })
                    .catch((err) => {
                    res.writeHead(500, { "Content-Type": "application/json" });
                    res.end((0, serialization_1.serialize)({
                        error: {
                            message: err?.message ?? `${err}`,
                            stack: err.stack,
                            name: err.name,
                        },
                    }), "utf-8");
                });
            });
        };
        // only import "http" when this method is called to reduce the time it takes to load Wing SDK
        const http = await Promise.resolve().then(() => __importStar(require("node:http")));
        // start the server, and wait for it to be listening
        const server = http.createServer(requestListener);
        await new Promise((ok) => {
            server.listen(0, LOCALHOST_ADDRESS, () => {
                const addr = server.address();
                if (addr && typeof addr === "object" && addr.port) {
                    this._serverUrl = `http://${addr.address}:${addr.port}`;
                }
                this._server = server;
                ok();
            });
        });
    }
    /**
     * Stop the simulator server.
     */
    stopServer() {
        this._server.close();
    }
    /**
     * The URL that the simulator server is listening on.
     */
    get url() {
        if (!this._serverUrl) {
            throw new Error("Simulator server is not running.");
        }
        return this._serverUrl;
    }
    async startResource(path) {
        if (this.isStarted(path)) {
            return; // already started
        }
        // first lets make sure all my dependencies have been started (depth-first)
        for (const d of this._model.graph.tryFind(path)?.dependencies ?? []) {
            await this.startResource(d);
        }
        const resourceConfig = this.getResourceConfig(path);
        const resolvedProps = this.resolveTokens(path, resourceConfig.props);
        const resolvedPolicy = this.resolveTokens(path, resourceConfig.policy) ?? [];
        // look up the location of the code for the type
        const typeInfo = this.typeInfo(resourceConfig.type);
        // set up a state directory for the resource
        await (0, promises_1.mkdir)(this.getResourceStateDir(resourceConfig.path), {
            recursive: true,
        });
        // initialize the resource state object without attrs for now
        this.state[path] = {
            props: resolvedProps,
            attrs: {},
            policy: resolvedPolicy,
        };
        // create the resource based on its type
        // eslint-disable-next-line @typescript-eslint/no-require-imports
        const ResourceType = require(typeInfo.sourcePath)[typeInfo.className];
        const resourceObject = new ResourceType(resolvedProps);
        // allocate a handle for the resource so others can find it
        const handle = this._handles.allocate(path, resourceObject);
        // if the resource is a policy, add it to the policy registry
        if (resourceConfig.type === target_sim_1.POLICY_FQN) {
            const policy = resolvedProps;
            this._policyRegistry.register(resourceConfig.path, policy);
        }
        else {
            // otherwise, add the resource's inline policy to the policy registry
            const policy = {
                statements: resolvedPolicy,
                principal: handle,
            };
            this._policyRegistry.register(resourceConfig.path, policy);
        }
        // initialize the resource with the simulator context
        const context = this.createContext(resourceConfig, handle);
        const attrs = await resourceObject.init(context);
        // save the current state
        await resourceObject.save();
        // merge the attributes
        this.state[path].attrs = {
            ...this.state[path].attrs,
            ...attrs,
            [HANDLE_ATTRIBUTE]: handle,
        };
        // trace the resource creation
        this.addSimulatorTrace(path, {
            message: `${resourceConfig.path} started`,
        }, std_1.LogLevel.VERBOSE);
    }
    createContext(resourceConfig, resourceHandle) {
        return {
            simdir: this._model.simdir,
            statedir: (0, path_1.join)(this.statedir, resourceConfig.addr),
            resourcePath: resourceConfig.path,
            resourceHandle: resourceHandle,
            serverUrl: this.url,
            getClient: (calleeHandle, asAdmin) => {
                const callerHandle = asAdmin ? ADMIN_PERMISSION : resourceHandle;
                return (0, client_1.makeSimulatorClient)(this.url, calleeHandle, callerHandle);
            },
            addTrace: (trace) => {
                this.addTrace(trace);
            },
            withTrace: async (props) => {
                // TODO: log start time and end time of activity?
                try {
                    let result = await props.activity();
                    this.addTrace({
                        data: {
                            message: props.message,
                            status: "success",
                            result: JSON.stringify(result),
                        },
                        type: std_1.TraceType.RESOURCE,
                        level: std_1.LogLevel.VERBOSE,
                        sourcePath: resourceConfig.path,
                        sourceType: resourceConfig.type,
                        timestamp: new Date().toISOString(),
                    });
                    return result;
                }
                catch (err) {
                    this.addTrace({
                        data: {
                            message: `Error: ${err.message} (${props.message})`,
                            error: err,
                            status: "failure",
                        },
                        type: std_1.TraceType.RESOURCE,
                        level: std_1.LogLevel.VERBOSE,
                        sourcePath: resourceConfig.path,
                        sourceType: resourceConfig.type,
                        timestamp: new Date().toISOString(),
                    });
                    throw err;
                }
            },
            listTraces: () => {
                return [...this._traces];
            },
            setResourceAttributes: (path, attrs) => {
                for (const [key, value] of Object.entries(attrs)) {
                    this.addSimulatorTrace(path, {
                        message: `${path}.${key} = ${value}`,
                    }, std_1.LogLevel.VERBOSE);
                }
                this.state[path].attrs = { ...this.state[path].attrs, ...attrs };
            },
            resourceAttributes: (path) => {
                return this.state[path].attrs;
            },
        };
    }
    addTrace(event) {
        event = Object.freeze(event);
        for (const sub of this._traceSubscribers) {
            sub.callback(event);
        }
        this._traces.push(event);
    }
    /**
     * Return an object with all tokens in it resolved to their appropriate values.
     *
     * A token can be a string like "${app/my_bucket#attrs.handle}". This token would be resolved to
     * the "handle" attribute of the resource at path "app/my_bucket". If that attribute does not
     * exist at the time of resolution (for example, if my_bucket is not being simulated yet), an
     * error will be thrown.
     *
     * Tokens can also be nested, like "${app/my_bucket#attrs.handle}/foo/bar".
     *
     * @param obj The object to resolve tokens in.
     * @returns `undefined` if the token could not be resolved (e.g. needs a dependency), otherwise
     * the resolved value.
     */
    resolveTokens(resolver, obj) {
        return (0, tokens_1.resolveTokens)(obj, (token) => {
            const target = this._model.graph.tryFind(token.path);
            if (!target) {
                throw new Error(`Could not resolve token "${token}" because the resource at path "${token.path}" does not exist.`);
            }
            const r = this.getResourceConfig(target.path);
            if (token.attr) {
                const value = r.attrs[token.attr];
                if (value === undefined) {
                    throw new UnresolvedTokenError(`Unable to resolve attribute '${token.attr}' for resource "${target.path}" referenced by "${resolver}"`);
                }
                return value;
            }
            if (token.prop) {
                return r.props[token.prop];
            }
            throw new Error(`Invalid token: ${token}`);
        });
    }
    /**
     * Given the "current" set of resources and a "next" set of resources, calculate the diff and
     * determine which resources need to be added, updated or deleted.
     *
     * Note that dependencies are not considered here but they are implicitly handled by the
     * `startResource` and `stopResource` methods. So, for example, when a resource is updated,
     * all of it's dependents will be stopped and started again.
     */
    async planUpdate(current, next) {
        // Make sure we're working on a copy of "current"
        current = { ...current };
        const added = [];
        const updated = [];
        const deleted = [];
        for (const [path, nextConfig] of Object.entries(next)) {
            const currConfig = current[path];
            // if the resource is not in "current", it means it was added
            if (!currConfig) {
                added.push(nextConfig.path);
                continue;
            }
            // the resource is already in "current", if it's different from "next", it means it was updated
            if (await this.shouldReplace(path, currConfig, nextConfig)) {
                updated.push(nextConfig.path);
            }
            // remove it from "current" so we know what's left to be deleted
            delete current[path];
        }
        // everything left in "current" is to be deleted
        for (const config of Object.values(current)) {
            deleted.push(config.path);
        }
        return { added, updated, deleted };
    }
    async shouldReplace(path, oldConfig, newConfig) {
        const state = (r) => JSON.stringify({
            props: r.props,
            type: r.type,
            policyStatements: r.policy,
        });
        const invalidated = state(oldConfig) !== state(newConfig);
        // consult the resource's "plan()" method if it has one
        const instance = this.tryGetResource(path);
        const plan = instance ? await instance.plan(invalidated) : UpdatePlan.AUTO;
        switch (plan) {
            case UpdatePlan.SKIP:
                return false;
            case UpdatePlan.REPLACE:
                return true;
            case UpdatePlan.AUTO:
                // Replace the resource if the new configuration is different from the current configuration
                //
                // Note: we're comparing the unresolved configurations, either of which may contain tokens.
                // So even if the configurations may look the same, it's possible that a replacement
                // is still necessary.
                return invalidated;
        }
    }
}
exports.Simulator = Simulator;
_a = JSII_RTTI_SYMBOL_1;
Simulator[_a] = { fqn: "@winglang/sdk.simulator.Simulator", version: "0.0.0" };
class UnresolvedTokenError extends Error {
}
class HandleManager {
    constructor() {
        this.handles = new Map();
        this.paths = new Map();
        this.nextHandle = 0;
    }
    allocate(path, resource) {
        const handle = `sim-${this.nextHandle++}`;
        this.handles.set(handle, resource);
        this.paths.set(handle, path);
        return handle;
    }
    find(handle) {
        const instance = this.tryFind(handle);
        if (!instance) {
            throw new Error(`No resource found with handle "${handle}".`);
        }
        return instance;
    }
    tryFind(handle) {
        return this.handles.get(handle);
    }
    tryFindPath(handle) {
        return this.paths.get(handle);
    }
    deallocate(handle) {
        const instance = this.handles.get(handle);
        if (!instance) {
            throw new Error(`No resource found with handle "${handle}".`);
        }
        this.handles.delete(handle);
        this.paths.delete(handle);
        return instance;
    }
    reset() {
        this.handles.clear();
        this.paths.clear();
        this.nextHandle = 0;
    }
}
/**
 * Determines how updates are performed on this resource.
 */
var UpdatePlan;
(function (UpdatePlan) {
    /**
     * Does nothing. This resource is already in the desired state.
     */
    UpdatePlan["SKIP"] = "SKIP";
    /**
     * Deletes the resource and creates a new instance with the new configuration.
     */
    UpdatePlan["REPLACE"] = "REPLACE";
    /**
     * Auto detect changes in new configuration and replace the resource.
     */
    UpdatePlan["AUTO"] = "AUTO";
})(UpdatePlan || (exports.UpdatePlan = UpdatePlan = {}));
class PolicyRegistry {
    constructor() {
        this.policies = {};
    }
    register(id, policy) {
        if (this.policies[id]) {
            throw new Error(`Policy with id ${id} already registered.`);
        }
        this.policies[id] = policy;
    }
    deregister(id) {
        delete this.policies[id];
    }
    checkPermission(caller, callee, method) {
        for (const policy of Object.values(this.policies)) {
            if (policy.principal === caller) {
                for (const statement of policy.statements) {
                    if (statement.resourceHandle === callee &&
                        statement.operation === method) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
}
//# sourceMappingURL=data:application/json;base64,