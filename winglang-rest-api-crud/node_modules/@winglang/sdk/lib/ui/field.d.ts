import { Construct } from "constructs";
import { VisualComponent } from "./base";
import { UIComponent } from "../core";
import { Duration, IInflight } from "../std";
/**
 * Global identifier for `Field`.
 */
export declare const FIELD_FQN: string;
/**
 * Props for `Field`.
 */
export interface FieldProps {
    /**
     * How often the field should be refreshed.
     * @default - no automatic refresh
     */
    readonly refreshRate?: Duration;
    /**
     * Indicates that this field is a link.
     *
     * @default false
     */
    readonly link?: boolean;
}
/**
 * A field can be used to display a value.
 * @noinflight
 */
export declare class Field extends VisualComponent {
    /**
     * Creates a new ui.Field instance through the app.
     * @internal
     */
    static _newField(scope: Construct, id: string, label: string, handler: IFieldHandler, props?: FieldProps): Field;
    private readonly fn;
    private readonly label;
    private readonly refreshRate;
    private readonly link;
    constructor(scope: Construct, id: string, label: string, handler: IFieldHandler, props?: FieldProps);
    /** @internal */
    _toUIComponent(): UIComponent;
    /** @internal */
    _toInflight(): string;
}
/**
 * A resource with an inflight "handle" method that can be passed to
 * `addField`.
 *
 * @inflight `@winglang/sdk.ui.IFieldHandlerClient`
 */
export interface IFieldHandler extends IInflight {
}
/**
 * Inflight client for `IFieldHandler`.
 */
export interface IFieldHandlerClient {
    /**
     * Function that returns a string to display.
     * @inflight
     */
    handle(): Promise<string>;
}
/**
 * A value field can be used to display a string value.
 * @noinflight
 */
export declare class ValueField extends Field {
    constructor(scope: Construct, id: string, label: string, value: string);
}
