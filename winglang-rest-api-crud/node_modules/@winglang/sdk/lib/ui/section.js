"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Section = exports.SECTION_FQN = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const base_1 = require("./base");
const button_1 = require("./button");
const field_1 = require("./field");
const constants_1 = require("../constants");
const core_1 = require("../core");
/**
 * Global identifier for `Section`.
 */
exports.SECTION_FQN = (0, constants_1.fqnForType)("ui.Section");
/**
 * A section can be used to group other visual components.
 * @noinflight
 */
class Section extends base_1.VisualComponent {
    /**
     * Creates a new ui.Section instance through the app.
     * @internal
     */
    static _newSection(scope, id, props = {}) {
        return core_1.App.of(scope).newAbstract(exports.SECTION_FQN, scope, id, props);
    }
    constructor(scope, id, props = {}) {
        super(scope, id);
        this.subcomponents = [];
        this.label = props.label;
        this.buttonIdx = 1;
        this.fieldIdx = 1;
    }
    /**
     * Adds a visual component to the section. The components
     * will be rendered in the order they were added.
     */
    add(...components) {
        for (const component of components) {
            if (component._newParent !== undefined) {
                throw new Error(`Cannot add ${component.node.path} to ${this.node.path} because it already belongs to ${component._newParent}.`);
            }
            component._newParent = this.node.path;
            this.subcomponents.push(component);
        }
    }
    /**
     * Adds a button to the section. Shorthand for `add(new ui.Button(...))`.
     */
    addButton(label, handler) {
        const id = `Button-${this.buttonIdx++}`;
        this.add(new button_1.Button(this, id, label, handler));
    }
    /**
     * Adds a field to the section. Shorthand for `add(new ui.Field(...))`.
     */
    addField(label, handler, props = {}) {
        const id = `Field-${this.fieldIdx++}`;
        this.add(new field_1.Field(this, id, label, handler, props));
    }
    /** @internal */
    _toUIComponent() {
        return {
            kind: "section",
            label: this.label,
            children: this.subcomponents.map((c) => c._toUIComponent()),
        };
    }
    /** @internal */
    _toInflight() {
        throw new Error("Method not implemented.");
    }
}
exports.Section = Section;
_a = JSII_RTTI_SYMBOL_1;
Section[_a] = { fqn: "@winglang/sdk.ui.Section", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91aS9zZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsaUNBQXlDO0FBQ3pDLHFDQUFrRDtBQUNsRCxtQ0FBMkQ7QUFDM0QsNENBQTBDO0FBQzFDLGtDQUEyQztBQUUzQzs7R0FFRztBQUNVLFFBQUEsV0FBVyxHQUFHLElBQUEsc0JBQVUsRUFBQyxZQUFZLENBQUMsQ0FBQztBQWFwRDs7O0dBR0c7QUFDSCxNQUFhLE9BQVEsU0FBUSxzQkFBZTtJQUMxQzs7O09BR0c7SUFDSSxNQUFNLENBQUMsV0FBVyxDQUN2QixLQUFnQixFQUNoQixFQUFVLEVBQ1YsUUFBc0IsRUFBRTtRQUV4QixPQUFPLFVBQUcsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsV0FBVyxDQUFDLG1CQUFXLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBT0QsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxRQUFzQixFQUFFO1FBQ2hFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFMRixrQkFBYSxHQUFzQixFQUFFLENBQUM7UUFNckQsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQ25CLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO0lBQ3BCLENBQUM7SUFFRDs7O09BR0c7SUFDSSxHQUFHLENBQUMsR0FBRyxVQUFrQztRQUM5QyxLQUFLLE1BQU0sU0FBUyxJQUFJLFVBQVUsRUFBRSxDQUFDO1lBQ25DLElBQUksU0FBUyxDQUFDLFVBQVUsS0FBSyxTQUFTLEVBQUUsQ0FBQztnQkFDdkMsTUFBTSxJQUFJLEtBQUssQ0FDYixjQUFjLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxrQ0FBa0MsU0FBUyxDQUFDLFVBQVUsR0FBRyxDQUNoSCxDQUFDO1lBQ0osQ0FBQztZQUNELFNBQVMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDdEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDckMsQ0FBQztJQUNILENBQUM7SUFFRDs7T0FFRztJQUNJLFNBQVMsQ0FBQyxLQUFhLEVBQUUsT0FBdUI7UUFDckQsTUFBTSxFQUFFLEdBQUcsVUFBVSxJQUFJLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQztRQUN4QyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksZUFBTSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVEOztPQUVHO0lBQ0ksUUFBUSxDQUNiLEtBQWEsRUFDYixPQUFzQixFQUN0QixRQUFvQixFQUFFO1FBRXRCLE1BQU0sRUFBRSxHQUFHLFNBQVMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUM7UUFDdEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLGFBQUssQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQsZ0JBQWdCO0lBQ1QsY0FBYztRQUNuQixPQUFPO1lBQ0wsSUFBSSxFQUFFLFNBQVM7WUFDZixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDakIsUUFBUSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDNUQsQ0FBQztJQUNKLENBQUM7SUFFRCxnQkFBZ0I7SUFDVCxXQUFXO1FBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUM3QyxDQUFDOztBQXpFSCwwQkEwRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgVmlzdWFsQ29tcG9uZW50IH0gZnJvbSBcIi4vYmFzZVwiO1xuaW1wb3J0IHsgQnV0dG9uLCBJQnV0dG9uSGFuZGxlciB9IGZyb20gXCIuL2J1dHRvblwiO1xuaW1wb3J0IHsgRmllbGQsIEZpZWxkUHJvcHMsIElGaWVsZEhhbmRsZXIgfSBmcm9tIFwiLi9maWVsZFwiO1xuaW1wb3J0IHsgZnFuRm9yVHlwZSB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IEFwcCwgVUlDb21wb25lbnQgfSBmcm9tIFwiLi4vY29yZVwiO1xuXG4vKipcbiAqIEdsb2JhbCBpZGVudGlmaWVyIGZvciBgU2VjdGlvbmAuXG4gKi9cbmV4cG9ydCBjb25zdCBTRUNUSU9OX0ZRTiA9IGZxbkZvclR5cGUoXCJ1aS5TZWN0aW9uXCIpO1xuXG4vKipcbiAqIFByb3BzIGZvciBgU2VjdGlvbmAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2VjdGlvblByb3BzIHtcbiAgLyoqXG4gICAqIFRoZSBsYWJlbCBvZiB0aGUgc2VjdGlvbi5cbiAgICogQGRlZmF1bHQgLSBubyBsYWJlbFxuICAgKi9cbiAgcmVhZG9ubHkgbGFiZWw/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogQSBzZWN0aW9uIGNhbiBiZSB1c2VkIHRvIGdyb3VwIG90aGVyIHZpc3VhbCBjb21wb25lbnRzLlxuICogQG5vaW5mbGlnaHRcbiAqL1xuZXhwb3J0IGNsYXNzIFNlY3Rpb24gZXh0ZW5kcyBWaXN1YWxDb21wb25lbnQge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyB1aS5TZWN0aW9uIGluc3RhbmNlIHRocm91Z2ggdGhlIGFwcC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIF9uZXdTZWN0aW9uKFxuICAgIHNjb3BlOiBDb25zdHJ1Y3QsXG4gICAgaWQ6IHN0cmluZyxcbiAgICBwcm9wczogU2VjdGlvblByb3BzID0ge31cbiAgKTogU2VjdGlvbiB7XG4gICAgcmV0dXJuIEFwcC5vZihzY29wZSkubmV3QWJzdHJhY3QoU0VDVElPTl9GUU4sIHNjb3BlLCBpZCwgcHJvcHMpO1xuICB9XG5cbiAgcHJpdmF0ZSByZWFkb25seSBsYWJlbDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICBwcml2YXRlIHJlYWRvbmx5IHN1YmNvbXBvbmVudHM6IFZpc3VhbENvbXBvbmVudFtdID0gW107XG4gIHByaXZhdGUgYnV0dG9uSWR4OiBudW1iZXI7XG4gIHByaXZhdGUgZmllbGRJZHg6IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogU2VjdGlvblByb3BzID0ge30pIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgIHRoaXMubGFiZWwgPSBwcm9wcy5sYWJlbDtcbiAgICB0aGlzLmJ1dHRvbklkeCA9IDE7XG4gICAgdGhpcy5maWVsZElkeCA9IDE7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIHZpc3VhbCBjb21wb25lbnQgdG8gdGhlIHNlY3Rpb24uIFRoZSBjb21wb25lbnRzXG4gICAqIHdpbGwgYmUgcmVuZGVyZWQgaW4gdGhlIG9yZGVyIHRoZXkgd2VyZSBhZGRlZC5cbiAgICovXG4gIHB1YmxpYyBhZGQoLi4uY29tcG9uZW50czogQXJyYXk8VmlzdWFsQ29tcG9uZW50Pik6IHZvaWQge1xuICAgIGZvciAoY29uc3QgY29tcG9uZW50IG9mIGNvbXBvbmVudHMpIHtcbiAgICAgIGlmIChjb21wb25lbnQuX25ld1BhcmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgQ2Fubm90IGFkZCAke2NvbXBvbmVudC5ub2RlLnBhdGh9IHRvICR7dGhpcy5ub2RlLnBhdGh9IGJlY2F1c2UgaXQgYWxyZWFkeSBiZWxvbmdzIHRvICR7Y29tcG9uZW50Ll9uZXdQYXJlbnR9LmBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNvbXBvbmVudC5fbmV3UGFyZW50ID0gdGhpcy5ub2RlLnBhdGg7XG4gICAgICB0aGlzLnN1YmNvbXBvbmVudHMucHVzaChjb21wb25lbnQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgYnV0dG9uIHRvIHRoZSBzZWN0aW9uLiBTaG9ydGhhbmQgZm9yIGBhZGQobmV3IHVpLkJ1dHRvbiguLi4pKWAuXG4gICAqL1xuICBwdWJsaWMgYWRkQnV0dG9uKGxhYmVsOiBzdHJpbmcsIGhhbmRsZXI6IElCdXR0b25IYW5kbGVyKTogdm9pZCB7XG4gICAgY29uc3QgaWQgPSBgQnV0dG9uLSR7dGhpcy5idXR0b25JZHgrK31gO1xuICAgIHRoaXMuYWRkKG5ldyBCdXR0b24odGhpcywgaWQsIGxhYmVsLCBoYW5kbGVyKSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIGZpZWxkIHRvIHRoZSBzZWN0aW9uLiBTaG9ydGhhbmQgZm9yIGBhZGQobmV3IHVpLkZpZWxkKC4uLikpYC5cbiAgICovXG4gIHB1YmxpYyBhZGRGaWVsZChcbiAgICBsYWJlbDogc3RyaW5nLFxuICAgIGhhbmRsZXI6IElGaWVsZEhhbmRsZXIsXG4gICAgcHJvcHM6IEZpZWxkUHJvcHMgPSB7fVxuICApOiB2b2lkIHtcbiAgICBjb25zdCBpZCA9IGBGaWVsZC0ke3RoaXMuZmllbGRJZHgrK31gO1xuICAgIHRoaXMuYWRkKG5ldyBGaWVsZCh0aGlzLCBpZCwgbGFiZWwsIGhhbmRsZXIsIHByb3BzKSk7XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIHB1YmxpYyBfdG9VSUNvbXBvbmVudCgpOiBVSUNvbXBvbmVudCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IFwic2VjdGlvblwiLFxuICAgICAgbGFiZWw6IHRoaXMubGFiZWwsXG4gICAgICBjaGlsZHJlbjogdGhpcy5zdWJjb21wb25lbnRzLm1hcCgoYykgPT4gYy5fdG9VSUNvbXBvbmVudCgpKSxcbiAgICB9O1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwdWJsaWMgX3RvSW5mbGlnaHQoKTogc3RyaW5nIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcbiAgfVxufVxuIl19