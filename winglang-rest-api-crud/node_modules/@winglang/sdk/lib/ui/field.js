"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValueField = exports.Field = exports.FIELD_FQN = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const base_1 = require("./base");
const cloud_1 = require("../cloud");
const constants_1 = require("../constants");
const core_1 = require("../core");
/**
 * Global identifier for `Field`.
 */
exports.FIELD_FQN = (0, constants_1.fqnForType)("ui.Field");
/**
 * A field can be used to display a value.
 * @noinflight
 */
class Field extends base_1.VisualComponent {
    /**
     * Creates a new ui.Field instance through the app.
     * @internal
     */
    static _newField(scope, id, label, handler, props = {}) {
        return core_1.App.of(scope).newAbstract(exports.FIELD_FQN, scope, id, label, handler, props);
    }
    constructor(scope, id, label, handler, props = {}) {
        super(scope, id);
        this.label = label;
        this.refreshRate = props.refreshRate?.seconds;
        this.fn = new cloud_1.Function(this, "Handler", handler);
        this.link = props.link;
    }
    /** @internal */
    _toUIComponent() {
        return {
            kind: "field",
            label: this.label,
            handler: this.fn.node.path,
            refreshRate: this.refreshRate,
            link: this.link,
        };
    }
    /** @internal */
    _toInflight() {
        throw new Error("Method not implemented.");
    }
}
exports.Field = Field;
_a = JSII_RTTI_SYMBOL_1;
Field[_a] = { fqn: "@winglang/sdk.ui.Field", version: "0.0.0" };
/**
 * A value field can be used to display a string value.
 * @noinflight
 */
class ValueField extends Field {
    constructor(scope, id, label, value) {
        const handler = (0, core_1.lift)({ value }).inflight(async (ctx) => {
            return ctx.value;
        });
        super(scope, id, label, handler);
    }
}
exports.ValueField = ValueField;
_b = JSII_RTTI_SYMBOL_1;
ValueField[_b] = { fqn: "@winglang/sdk.ui.ValueField", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdWkvZmllbGQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxpQ0FBeUM7QUFDekMsb0NBQW9DO0FBQ3BDLDRDQUEwQztBQUMxQyxrQ0FBaUQ7QUFHakQ7O0dBRUc7QUFDVSxRQUFBLFNBQVMsR0FBRyxJQUFBLHNCQUFVLEVBQUMsVUFBVSxDQUFDLENBQUM7QUFvQmhEOzs7R0FHRztBQUNILE1BQWEsS0FBTSxTQUFRLHNCQUFlO0lBQ3hDOzs7T0FHRztJQUNJLE1BQU0sQ0FBQyxTQUFTLENBQ3JCLEtBQWdCLEVBQ2hCLEVBQVUsRUFDVixLQUFhLEVBQ2IsT0FBc0IsRUFDdEIsUUFBb0IsRUFBRTtRQUV0QixPQUFPLFVBQUcsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsV0FBVyxDQUM5QixpQkFBUyxFQUNULEtBQUssRUFDTCxFQUFFLEVBQ0YsS0FBSyxFQUNMLE9BQU8sRUFDUCxLQUFLLENBQ04sQ0FBQztJQUNKLENBQUM7SUFPRCxZQUNFLEtBQWdCLEVBQ2hCLEVBQVUsRUFDVixLQUFhLEVBQ2IsT0FBc0IsRUFDdEIsUUFBb0IsRUFBRTtRQUV0QixLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUM7UUFDOUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLGdCQUFRLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNqRCxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7SUFDekIsQ0FBQztJQUVELGdCQUFnQjtJQUNULGNBQWM7UUFDbkIsT0FBTztZQUNMLElBQUksRUFBRSxPQUFPO1lBQ2IsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ2pCLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJO1lBQzFCLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVztZQUM3QixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7U0FDaEIsQ0FBQztJQUNKLENBQUM7SUFFRCxnQkFBZ0I7SUFDVCxXQUFXO1FBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUM3QyxDQUFDOztBQXhESCxzQkF5REM7OztBQXFCRDs7O0dBR0c7QUFDSCxNQUFhLFVBQVcsU0FBUSxLQUFLO0lBQ25DLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBYSxFQUFFLEtBQWE7UUFDcEUsTUFBTSxPQUFPLEdBQUcsSUFBQSxXQUFJLEVBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDckQsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUMsQ0FBQyxDQUFDO1FBRUgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ25DLENBQUM7O0FBUEgsZ0NBUUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgVmlzdWFsQ29tcG9uZW50IH0gZnJvbSBcIi4vYmFzZVwiO1xuaW1wb3J0IHsgRnVuY3Rpb24gfSBmcm9tIFwiLi4vY2xvdWRcIjtcbmltcG9ydCB7IGZxbkZvclR5cGUgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBBcHAsIFVJQ29tcG9uZW50LCBsaWZ0IH0gZnJvbSBcIi4uL2NvcmVcIjtcbmltcG9ydCB7IER1cmF0aW9uLCBJSW5mbGlnaHQgfSBmcm9tIFwiLi4vc3RkXCI7XG5cbi8qKlxuICogR2xvYmFsIGlkZW50aWZpZXIgZm9yIGBGaWVsZGAuXG4gKi9cbmV4cG9ydCBjb25zdCBGSUVMRF9GUU4gPSBmcW5Gb3JUeXBlKFwidWkuRmllbGRcIik7XG5cbi8qKlxuICogUHJvcHMgZm9yIGBGaWVsZGAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRmllbGRQcm9wcyB7XG4gIC8qKlxuICAgKiBIb3cgb2Z0ZW4gdGhlIGZpZWxkIHNob3VsZCBiZSByZWZyZXNoZWQuXG4gICAqIEBkZWZhdWx0IC0gbm8gYXV0b21hdGljIHJlZnJlc2hcbiAgICovXG4gIHJlYWRvbmx5IHJlZnJlc2hSYXRlPzogRHVyYXRpb247XG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyB0aGF0IHRoaXMgZmllbGQgaXMgYSBsaW5rLlxuICAgKlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgcmVhZG9ubHkgbGluaz86IGJvb2xlYW47XG59XG5cbi8qKlxuICogQSBmaWVsZCBjYW4gYmUgdXNlZCB0byBkaXNwbGF5IGEgdmFsdWUuXG4gKiBAbm9pbmZsaWdodFxuICovXG5leHBvcnQgY2xhc3MgRmllbGQgZXh0ZW5kcyBWaXN1YWxDb21wb25lbnQge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyB1aS5GaWVsZCBpbnN0YW5jZSB0aHJvdWdoIHRoZSBhcHAuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBfbmV3RmllbGQoXG4gICAgc2NvcGU6IENvbnN0cnVjdCxcbiAgICBpZDogc3RyaW5nLFxuICAgIGxhYmVsOiBzdHJpbmcsXG4gICAgaGFuZGxlcjogSUZpZWxkSGFuZGxlcixcbiAgICBwcm9wczogRmllbGRQcm9wcyA9IHt9XG4gICk6IEZpZWxkIHtcbiAgICByZXR1cm4gQXBwLm9mKHNjb3BlKS5uZXdBYnN0cmFjdChcbiAgICAgIEZJRUxEX0ZRTixcbiAgICAgIHNjb3BlLFxuICAgICAgaWQsXG4gICAgICBsYWJlbCxcbiAgICAgIGhhbmRsZXIsXG4gICAgICBwcm9wc1xuICAgICk7XG4gIH1cblxuICBwcml2YXRlIHJlYWRvbmx5IGZuOiBGdW5jdGlvbjtcbiAgcHJpdmF0ZSByZWFkb25seSBsYWJlbDogc3RyaW5nO1xuICBwcml2YXRlIHJlYWRvbmx5IHJlZnJlc2hSYXRlOiBudW1iZXIgfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgcmVhZG9ubHkgbGluazogYm9vbGVhbiB8IHVuZGVmaW5lZDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBzY29wZTogQ29uc3RydWN0LFxuICAgIGlkOiBzdHJpbmcsXG4gICAgbGFiZWw6IHN0cmluZyxcbiAgICBoYW5kbGVyOiBJRmllbGRIYW5kbGVyLFxuICAgIHByb3BzOiBGaWVsZFByb3BzID0ge31cbiAgKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgIHRoaXMubGFiZWwgPSBsYWJlbDtcbiAgICB0aGlzLnJlZnJlc2hSYXRlID0gcHJvcHMucmVmcmVzaFJhdGU/LnNlY29uZHM7XG4gICAgdGhpcy5mbiA9IG5ldyBGdW5jdGlvbih0aGlzLCBcIkhhbmRsZXJcIiwgaGFuZGxlcik7XG4gICAgdGhpcy5saW5rID0gcHJvcHMubGluaztcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHVibGljIF90b1VJQ29tcG9uZW50KCk6IFVJQ29tcG9uZW50IHtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogXCJmaWVsZFwiLFxuICAgICAgbGFiZWw6IHRoaXMubGFiZWwsXG4gICAgICBoYW5kbGVyOiB0aGlzLmZuLm5vZGUucGF0aCxcbiAgICAgIHJlZnJlc2hSYXRlOiB0aGlzLnJlZnJlc2hSYXRlLFxuICAgICAgbGluazogdGhpcy5saW5rLFxuICAgIH07XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIHB1YmxpYyBfdG9JbmZsaWdodCgpOiBzdHJpbmcge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xuICB9XG59XG5cbi8qKlxuICogQSByZXNvdXJjZSB3aXRoIGFuIGluZmxpZ2h0IFwiaGFuZGxlXCIgbWV0aG9kIHRoYXQgY2FuIGJlIHBhc3NlZCB0b1xuICogYGFkZEZpZWxkYC5cbiAqXG4gKiBAaW5mbGlnaHQgYEB3aW5nbGFuZy9zZGsudWkuSUZpZWxkSGFuZGxlckNsaWVudGBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJRmllbGRIYW5kbGVyIGV4dGVuZHMgSUluZmxpZ2h0IHt9XG5cbi8qKlxuICogSW5mbGlnaHQgY2xpZW50IGZvciBgSUZpZWxkSGFuZGxlcmAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUZpZWxkSGFuZGxlckNsaWVudCB7XG4gIC8qKlxuICAgKiBGdW5jdGlvbiB0aGF0IHJldHVybnMgYSBzdHJpbmcgdG8gZGlzcGxheS5cbiAgICogQGluZmxpZ2h0XG4gICAqL1xuICBoYW5kbGUoKTogUHJvbWlzZTxzdHJpbmc+O1xufVxuXG4vKipcbiAqIEEgdmFsdWUgZmllbGQgY2FuIGJlIHVzZWQgdG8gZGlzcGxheSBhIHN0cmluZyB2YWx1ZS5cbiAqIEBub2luZmxpZ2h0XG4gKi9cbmV4cG9ydCBjbGFzcyBWYWx1ZUZpZWxkIGV4dGVuZHMgRmllbGQge1xuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBsYWJlbDogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSB7XG4gICAgY29uc3QgaGFuZGxlciA9IGxpZnQoeyB2YWx1ZSB9KS5pbmZsaWdodChhc3luYyAoY3R4KSA9PiB7XG4gICAgICByZXR1cm4gY3R4LnZhbHVlO1xuICAgIH0pO1xuXG4gICAgc3VwZXIoc2NvcGUsIGlkLCBsYWJlbCwgaGFuZGxlcik7XG4gIH1cbn1cbiJdfQ==