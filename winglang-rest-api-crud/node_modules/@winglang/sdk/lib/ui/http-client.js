"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpClient = exports.API_FQN = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const base_1 = require("./base");
const cloud_1 = require("../cloud");
const constants_1 = require("../constants");
const core_1 = require("../core");
/**
 * Global identifier for `HttpClient`.
 */
exports.API_FQN = (0, constants_1.fqnForType)("ui.HttpClient");
/**
 * An HttpClient can be used to make HTTP requests.
 * @noinflight
 */
class HttpClient extends base_1.VisualComponent {
    /**
     * Creates a new ui.HttpClient instance through the app.
     * @internal
     */
    static _newHttpClient(scope, id, label, getUrlHandler, getApiSpecHandler) {
        return core_1.App.of(scope).newAbstract(exports.API_FQN, scope, id, label, getUrlHandler, getApiSpecHandler);
    }
    constructor(scope, id, label, getUrlHandler, getApiSpecHandler) {
        super(scope, id);
        this.label = label;
        this.getUrlfn = new cloud_1.Function(this, "GetUrlHandler", getUrlHandler);
        this.getApiSpecfn = new cloud_1.Function(this, "GetApiSpecHandler", getApiSpecHandler);
    }
    /** @internal */
    _toUIComponent() {
        return {
            kind: "http-client",
            label: this.label,
            getUrlHandler: this.getUrlfn.node.path,
            getApiSpecHandler: this.getApiSpecfn.node.path,
        };
    }
    /** @internal */
    _toInflight() {
        throw new Error("Method not implemented.");
    }
}
exports.HttpClient = HttpClient;
_a = JSII_RTTI_SYMBOL_1;
HttpClient[_a] = { fqn: "@winglang/sdk.ui.HttpClient", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1jbGllbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdWkvaHR0cC1jbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxpQ0FBeUM7QUFDekMsb0NBQW9DO0FBQ3BDLDRDQUEwQztBQUMxQyxrQ0FBMkM7QUFHM0M7O0dBRUc7QUFDVSxRQUFBLE9BQU8sR0FBRyxJQUFBLHNCQUFVLEVBQUMsZUFBZSxDQUFDLENBQUM7QUFFbkQ7OztHQUdHO0FBQ0gsTUFBYSxVQUFXLFNBQVEsc0JBQWU7SUFDN0M7OztPQUdHO0lBQ0ksTUFBTSxDQUFDLGNBQWMsQ0FDMUIsS0FBZ0IsRUFDaEIsRUFBVSxFQUNWLEtBQWEsRUFDYixhQUF1QyxFQUN2QyxpQkFBK0M7UUFFL0MsT0FBTyxVQUFHLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLFdBQVcsQ0FDOUIsZUFBTyxFQUNQLEtBQUssRUFDTCxFQUFFLEVBQ0YsS0FBSyxFQUNMLGFBQWEsRUFDYixpQkFBaUIsQ0FDbEIsQ0FBQztJQUNKLENBQUM7SUFNRCxZQUNFLEtBQWdCLEVBQ2hCLEVBQVUsRUFDVixLQUFhLEVBQ2IsYUFBdUMsRUFDdkMsaUJBQStDO1FBRS9DLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLGdCQUFRLENBQUMsSUFBSSxFQUFFLGVBQWUsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUNuRSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksZ0JBQVEsQ0FDOUIsSUFBSSxFQUNKLG1CQUFtQixFQUNuQixpQkFBaUIsQ0FDbEIsQ0FBQztJQUNKLENBQUM7SUFFRCxnQkFBZ0I7SUFDVCxjQUFjO1FBQ25CLE9BQU87WUFDTCxJQUFJLEVBQUUsYUFBYTtZQUNuQixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDakIsYUFBYSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUk7WUFDdEMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSTtTQUMvQyxDQUFDO0lBQ0osQ0FBQztJQUVELGdCQUFnQjtJQUNULFdBQVc7UUFDaEIsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQzdDLENBQUM7O0FBekRILGdDQTBEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgeyBWaXN1YWxDb21wb25lbnQgfSBmcm9tIFwiLi9iYXNlXCI7XG5pbXBvcnQgeyBGdW5jdGlvbiB9IGZyb20gXCIuLi9jbG91ZFwiO1xuaW1wb3J0IHsgZnFuRm9yVHlwZSB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IEFwcCwgVUlDb21wb25lbnQgfSBmcm9tIFwiLi4vY29yZVwiO1xuaW1wb3J0IHsgSUluZmxpZ2h0IH0gZnJvbSBcIi4uL3N0ZFwiO1xuXG4vKipcbiAqIEdsb2JhbCBpZGVudGlmaWVyIGZvciBgSHR0cENsaWVudGAuXG4gKi9cbmV4cG9ydCBjb25zdCBBUElfRlFOID0gZnFuRm9yVHlwZShcInVpLkh0dHBDbGllbnRcIik7XG5cbi8qKlxuICogQW4gSHR0cENsaWVudCBjYW4gYmUgdXNlZCB0byBtYWtlIEhUVFAgcmVxdWVzdHMuXG4gKiBAbm9pbmZsaWdodFxuICovXG5leHBvcnQgY2xhc3MgSHR0cENsaWVudCBleHRlbmRzIFZpc3VhbENvbXBvbmVudCB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IHVpLkh0dHBDbGllbnQgaW5zdGFuY2UgdGhyb3VnaCB0aGUgYXBwLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgX25ld0h0dHBDbGllbnQoXG4gICAgc2NvcGU6IENvbnN0cnVjdCxcbiAgICBpZDogc3RyaW5nLFxuICAgIGxhYmVsOiBzdHJpbmcsXG4gICAgZ2V0VXJsSGFuZGxlcjogSUh0dHBDbGllbnRHZXRVcmxIYW5kbGVyLFxuICAgIGdldEFwaVNwZWNIYW5kbGVyOiBJSHR0cENsaWVudEdldEFwaVNwZWNIYW5kbGVyXG4gICk6IEh0dHBDbGllbnQge1xuICAgIHJldHVybiBBcHAub2Yoc2NvcGUpLm5ld0Fic3RyYWN0KFxuICAgICAgQVBJX0ZRTixcbiAgICAgIHNjb3BlLFxuICAgICAgaWQsXG4gICAgICBsYWJlbCxcbiAgICAgIGdldFVybEhhbmRsZXIsXG4gICAgICBnZXRBcGlTcGVjSGFuZGxlclxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIHJlYWRvbmx5IGdldFVybGZuOiBGdW5jdGlvbjtcbiAgcHJpdmF0ZSByZWFkb25seSBnZXRBcGlTcGVjZm46IEZ1bmN0aW9uO1xuICBwcml2YXRlIHJlYWRvbmx5IGxhYmVsOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgc2NvcGU6IENvbnN0cnVjdCxcbiAgICBpZDogc3RyaW5nLFxuICAgIGxhYmVsOiBzdHJpbmcsXG4gICAgZ2V0VXJsSGFuZGxlcjogSUh0dHBDbGllbnRHZXRVcmxIYW5kbGVyLFxuICAgIGdldEFwaVNwZWNIYW5kbGVyOiBJSHR0cENsaWVudEdldEFwaVNwZWNIYW5kbGVyXG4gICkge1xuICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICB0aGlzLmxhYmVsID0gbGFiZWw7XG4gICAgdGhpcy5nZXRVcmxmbiA9IG5ldyBGdW5jdGlvbih0aGlzLCBcIkdldFVybEhhbmRsZXJcIiwgZ2V0VXJsSGFuZGxlcik7XG4gICAgdGhpcy5nZXRBcGlTcGVjZm4gPSBuZXcgRnVuY3Rpb24oXG4gICAgICB0aGlzLFxuICAgICAgXCJHZXRBcGlTcGVjSGFuZGxlclwiLFxuICAgICAgZ2V0QXBpU3BlY0hhbmRsZXJcbiAgICApO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwdWJsaWMgX3RvVUlDb21wb25lbnQoKTogVUlDb21wb25lbnQge1xuICAgIHJldHVybiB7XG4gICAgICBraW5kOiBcImh0dHAtY2xpZW50XCIsXG4gICAgICBsYWJlbDogdGhpcy5sYWJlbCxcbiAgICAgIGdldFVybEhhbmRsZXI6IHRoaXMuZ2V0VXJsZm4ubm9kZS5wYXRoLFxuICAgICAgZ2V0QXBpU3BlY0hhbmRsZXI6IHRoaXMuZ2V0QXBpU3BlY2ZuLm5vZGUucGF0aCxcbiAgICB9O1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwdWJsaWMgX3RvSW5mbGlnaHQoKTogc3RyaW5nIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcbiAgfVxufVxuXG4vKipcbiAqIEEgcmVzb3VyY2Ugd2l0aCBhbiBpbmZsaWdodCBcImhhbmRsZVwiIG1ldGhvZCB0aGF0IGNhbiBiZSBwYXNzZWQgdG9cbiAqIGBJSHR0cENsaWVudGAuXG4gKlxuICogQGluZmxpZ2h0IGBAd2luZ2xhbmcvc2RrLnVpLklIdHRwQ2xpZW50R2V0VXJsSGFuZGxlckNsaWVudGBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJSHR0cENsaWVudEdldFVybEhhbmRsZXIgZXh0ZW5kcyBJSW5mbGlnaHQge31cblxuLyoqXG4gKiBBIHJlc291cmNlIHdpdGggYW4gaW5mbGlnaHQgXCJoYW5kbGVcIiBtZXRob2QgdGhhdCBjYW4gYmUgcGFzc2VkIHRvXG4gKiBgSUh0dHBDbGllbnRgLlxuICpcbiAqIEBpbmZsaWdodCBgQHdpbmdsYW5nL3Nkay51aS5JSHR0cENsaWVudEdldEFwaVNwZWNIYW5kbGVyQ2xpZW50YFxuICovXG5leHBvcnQgaW50ZXJmYWNlIElIdHRwQ2xpZW50R2V0QXBpU3BlY0hhbmRsZXIgZXh0ZW5kcyBJSW5mbGlnaHQge31cblxuLyoqXG4gKiBJbmZsaWdodCBjbGllbnQgZm9yIGBJSHR0cENsaWVudEdldFVybEhhbmRsZXJgLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElIdHRwQ2xpZW50R2V0VXJsSGFuZGxlckNsaWVudCB7XG4gIC8qKlxuICAgKiBGdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIFVSTCB0byBtYWtlIGEgcmVxdWVzdCB0by5cbiAgICogQGluZmxpZ2h0XG4gICAqL1xuICBoYW5kbGUoKTogUHJvbWlzZTxzdHJpbmc+O1xufVxuXG4vKipcbiAqIEluZmxpZ2h0IGNsaWVudCBmb3IgYElIdHRwQ2xpZW50R2V0QXBpU3BlY0hhbmRsZXJgLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElIdHRwQ2xpZW50R2V0QXBpU3BlY0hhbmRsZXJDbGllbnQge1xuICAvKipcbiAgICogRnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBPcGVuQVBJIHNwZWMuXG4gICAqIEBpbmZsaWdodFxuICAgKi9cbiAgaGFuZGxlKCk6IFByb21pc2U8c3RyaW5nPjtcbn1cbiJdfQ==