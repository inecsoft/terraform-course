"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Util = exports.SymlinkType = exports.FileType = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const crypto = __importStar(require("crypto"));
const fs = __importStar(require("fs"));
const os = __importStar(require("os"));
const nodePath = __importStar(require("path"));
const glob = __importStar(require("glob"));
const yaml = __importStar(require("yaml"));
const core_1 = require("../core");
const misc_1 = require("../shared/misc");
const std_1 = require("../std");
/**
 * Represents the type of a file system object.
 */
var FileType;
(function (FileType) {
    /** Represents a regular file. */
    FileType["FILE"] = "File";
    /** Represents a directory. */
    FileType["DIRECTORY"] = "Directory";
    /** Represents a symbolic link. */
    FileType["SYMLINK"] = "Symlink";
    /**
     * Represents any type of file system object that is not `FILE`, `DIRECTORY` or `SYMLINK`.
     * This includes sockets, FIFOs (named pipes), block devices, and character devices.
     */
    FileType["OTHER"] = "Other";
})(FileType || (exports.FileType = FileType = {}));
/**
 * Represents the type of the target for creating symbolic links.
 */
var SymlinkType;
(function (SymlinkType) {
    /** Symbolic link that points to a file. */
    SymlinkType["FILE"] = "file";
    /** Symbolic link that points to a directory. */
    SymlinkType["DIRECTORY"] = "dir";
    /** Windows-specific: Symbolic link that points to a directory junction. */
    SymlinkType["JUNCTION"] = "junction";
})(SymlinkType || (exports.SymlinkType = SymlinkType = {}));
/**
 * The fs class is used for interacting with the file system.
 * All file paths must be POSIX file paths (/ instead of \),
 * and will be normalized to the target platform if running on Windows.
 */
class Util {
    /**
     * Join all arguments together and normalize the resulting path.
     * @param paths The array of path need to join.
     * @returns The resulting path after joining all the paths.
     */
    static join(...paths) {
        return (0, misc_1.normalPath)(nodePath.join(...paths));
    }
    /**
     * Retrieve the name of the directory from a given file path.
     * @param path The path to evaluate.
     * @returns The directory name of the path.
     */
    static dirname(path) {
        return (0, misc_1.normalPath)(nodePath.dirname(path));
    }
    /**
     * Retrieve the final segment of a given file path.
     * @param path The path to evaluate.
     * @returns The last portion of a path.
     */
    static basename(path) {
        return nodePath.basename(path);
    }
    /**
     * Solve the relative path from {from} to {to} based on the current working directory.
     * At times we have two absolute paths, and we need to derive the relative path from one to the other.
     * @returns The relative path from {from} to {to}.
     */
    static relative(from, to) {
        return (0, misc_1.normalPath)(nodePath.relative(from, to));
    }
    /**
     * The right-most parameter is considered {to}. Other parameters are considered an array of {from}.
     *
     * Starting from leftmost {from} parameter, resolves {to} to an absolute path.
     *
     * If {to} isn't already absolute, {from} arguments are prepended in right to left order,
     * until an absolute path is found. If after using all {from} paths still no absolute path is found,
     * the current working directory is used as well. The resulting path is normalized,
     * and trailing slashes are removed unless the path gets resolved to the root directory.
     *
     * @param paths A sequence of paths or path segments.
     * @returns The resulting path after performing the resolve operation.
     */
    static absolute(...paths) {
        return (0, misc_1.normalPath)(nodePath.resolve(...paths));
    }
    /**
     * Check if the path exists.
     * @param path The path to evaluate.
     * @returns `true` if the path exists, `false` otherwise.
     */
    static exists(path) {
        return fs.existsSync(path);
    }
    /**
     * Read the contents of the directory.
     * @param dirpath The path to evaluate.
     * @returns The contents of the directory.
     */
    static readdir(dirpath) {
        return fs.readdirSync(dirpath);
    }
    /**
     * If the path exists, read the contents of the directory; otherwise, return `undefined`.
     * @param dirpath The path to evaluate.
     * @returns The contents of the directory if the path exists, `undefined` otherwise.
     */
    static tryReaddir(dirpath) {
        try {
            return Util.readdir(dirpath);
        }
        catch {
            return undefined;
        }
    }
    /**
     * Create a directory.
     * @param dirpath The path to the directory you want to create.
     */
    static mkdir(dirpath, opts) {
        fs.mkdirSync(dirpath, {
            recursive: opts?.recursive ?? true,
            mode: opts?.mode ?? "0777",
        });
    }
    /**
     * Create a temporary directory.
     * Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
     * @param prefix The prefix for the directory to be created, default `wingtemp`.
     * @returns The created directory path.
     */
    static mkdtemp(prefix) {
        if (prefix == undefined) {
            prefix = "wingtemp";
        }
        const dirpath = fs.mkdtempSync(nodePath.join(os.tmpdir(), prefix));
        return (0, misc_1.normalPath)(dirpath);
    }
    /**
     * Read the entire contents of a file.
     * @param filepath The path of the file to be read.
     * @param options The `encoding` can be set to specify the character encoding. And the `flag` can be set to specify the attributes.
     * If a flag is not provided, it defaults to `"r"`.
     * @returns The contents of the `filepath`.
     */
    static readFile(filepath, options) {
        const buf = fs.readFileSync(filepath, options);
        return buf.toString();
    }
    /**
     * If the file exists and can be read successfully, read the entire contents;
     * otherwise, return `undefined`.
     * @param filepath The path of the file to be read.
     * @param options The `encoding` can be set to specify the character encoding, or the `flag` can be set to specify the attributes.
     * @returns The contents of the `filepath`, `undefined` otherwise.
     */
    static tryReadFile(filepath, options) {
        try {
            return Util.readFile(filepath, options);
        }
        catch {
            return undefined;
        }
    }
    /**
     * Read the contents of the file and convert it to JSON.
     * @param filepath The file path of the JSON file.
     * @returns The JSON object contained in the file.
     * @throws Will throw if the content is not in valid JSON format.
     */
    static readJson(filepath) {
        const text = Util.readFile(filepath);
        return JSON.parse(text);
    }
    /**
     * Retrieve the contents of the file and convert it to JSON
     * if the file exists and can be parsed successfully, otherwise, return `undefined`.
     * @param filepath The file path of the JSON file.
     * @returns The JSON object contained in the file, `undefined` otherwise.
     * @throws Will throw if the content is not in valid JSON format.
     */
    static tryReadJson(filepath) {
        try {
            return Util.readJson(filepath);
        }
        catch {
            return undefined;
        }
    }
    /**
     * Convert all YAML objects from a single file into JSON objects.
     * @param filepath The file path of the YAML file.
     * @returns The JSON objects converted from YAML objects in the file.
     * @throws Will throw if the content is not in valid YAML format.
     */
    static readYaml(filepath) {
        const text = Util.readFile(filepath);
        const yamlDocs = yaml.parseAllDocuments(text);
        return yamlDocs.map((doc) => {
            if (doc.contents && doc.contents.toJSON) {
                return doc.contents.toJSON();
            }
            else {
                throw new Error(`Unexpected document structure: ${doc}`);
            }
        });
    }
    /**
     * Convert all YAML objects from a single file into JSON objects
     * if the file exists and can be parsed successfully, `undefined` otherwise.
     * @param filepath The file path of the YAML file.
     * @returns The JSON objects converted from YAML objects in the file, `undefined` otherwise.
     * @throws Will throw if the content is not in valid YAML format.
     */
    static tryReadYaml(filepath) {
        try {
            return Util.readYaml(filepath);
        }
        catch {
            return undefined;
        }
    }
    /**
     * Writes data to a file, replacing the file if it already exists.
     * @param filepath The file path that needs to be written.
     * @param data The data to write.
     * @param options The `encoding` can be set to specify the character encoding. And the `flag` can be set to specify the attributes.
     * If a flag is not provided, it defaults to `"w"`.
     */
    static writeFile(filepath, data, options) {
        fs.writeFileSync(filepath, data, options);
    }
    /**
     * Writes JSON to a file, replacing the file if it already exists.
     * @param filepath The file path that needs to be written.
     * @param obj The JSON object to be dumped.
     */
    static writeJson(filepath, obj) {
        const text = JSON.stringify(obj, null, 2);
        fs.writeFileSync(filepath, text);
    }
    /**
     * Writes multiple YAML objects to a file, replacing the file if it already exists.
     * @param filepath The file path that needs to be written.
     * @param objs The YANL objects to be dumped.
     */
    static writeYaml(filepath, ...objs) {
        const contents = objs.map((o) => yaml.stringify(o, { aliasDuplicateObjects: false }));
        fs.writeFileSync(filepath, contents.join("---\n"));
    }
    /**
     * Appends new data to the end of an existing file
     * @param filepath The file path that needs to be appended.
     * @param data The text to be appended to the file.
     * @param options The `encoding` can be set to specify the character encoding. And the `flag` can be set to specify the attributes.
     * If a flag is not provided, it defaults to `"w"`.
     */
    static appendFile(filepath, data, options) {
        fs.appendFileSync(filepath, data, options);
    }
    /**
     * Remove files and directories (modeled on the standard POSIX `rm`utility). Returns `undefined`.
     * @param path The path to the file or directory you want to remove.
     */
    static remove(path, opts) {
        fs.rmSync(path, {
            force: opts?.force ?? true,
            recursive: opts?.recursive ?? true,
        });
    }
    /**
     * Checks if the given path is a directory and exists.
     * @param path The path to check.
     * @returns `true` if the path is an existing directory, `false` otherwise.
     */
    static isDir(path) {
        try {
            return fs.statSync(path).isDirectory();
        }
        catch {
            return false;
        }
    }
    /**
     * Gets the stats of the given path.
     * @param path The path to get stats for.
     * @returns The stats of the path, formatted as a `Metadata` object.
     */
    static metadata(path) {
        return this._metadata(fs.statSync(path));
    }
    /**
     * Gets the stats of the given path without following symbolic links.
     * @param path The path to get stats for.
     * @returns The stats of the path, formatted as a `Metadata` object.
     */
    static symlinkMetadata(path) {
        return this._metadata(fs.lstatSync(path));
    }
    /**
     * Set the permissions of the file, directory, etc.
     * Expects a permission string like `"755"` or `"644"`.
     * @param path The path of the file or directory.
     * @param permissions The mode to set as a string.
     */
    static setPermissions(path, permissions) {
        fs.chmodSync(path, parseInt(permissions, 8));
    }
    /**
     * Extracts the extension (without the leading dot) from the path, if possible.
     * @param path The path to get extension for.
     * @returns The file extension without the leading dot, or `nil` if:
     *          - The file name starts with a dot (hidden files).
     *          - There is no dot in the file name.
     *          - The dot is the last character in the file name.
     */
    static extension(path) {
        const ext = nodePath.extname(path);
        return !ext || path === ext || path.endsWith(".")
            ? undefined
            : ext.slice(1);
    }
    /**
     * Creates a symbolic link.
     * @param target The path to the target file or directory.
     * @param path The path to the symbolic link to be created.
     * @param type The type of the target. It can be `FILE`, `DIRECTORY`, or `JUNCTION` (Windows only).
     *             Defaults to `FILE` if not specified.
     */
    static symlink(target, path, type = SymlinkType.FILE) {
        fs.symlinkSync(target, path, type);
    }
    /**
     * Match files using the patterns the shell uses.
     *
     * Built with the great `glob` package, based on https://www.npmjs.com/package/glob
  
     * @param pattern The pattern to match.
     * @param options Glob options.
     * @returns List of matching files.
     */
    static glob(pattern, options = {}) {
        return glob.sync(pattern, options);
    }
    /**
     * Calculate an MD5 content hash of all the files that match a glob pattern.
     *
     * @param dir The root directory.
     * @param globPattern The glob pattern to match (defaults to all files and subdirectories).
     * @returns An md5 hash of the file contents.
     */
    static md5(dir, globPattern = "**/*") {
        const hash = crypto.createHash("md5");
        const files = this.glob(globPattern, { nodir: true, cwd: dir });
        for (const f of files) {
            const data = fs.readFileSync(this.join(dir, f));
            hash.update(data);
        }
        return hash.digest("hex");
    }
    /**
     * @internal
     */
    static _toInflightType() {
        return core_1.InflightClient.forType(__filename, this.name);
    }
    /**
     * Returns the `Metadata` object based on the given `fs.Stats` object.
     * @param stats The `fs.Stats` object.
     * @returns The `Metadata` object.
     */
    static _metadata(stats) {
        return {
            fileType: this._fileType(stats),
            size: stats.size,
            permissions: this._formatPermissions(stats.mode),
            accessed: std_1.Datetime.fromDate(stats.atime),
            modified: std_1.Datetime.fromDate(stats.mtime),
            created: std_1.Datetime.fromDate(stats.birthtime),
        };
    }
    /**
     * Returns the type of the file based on the given `fs.Stats` object.
     * @param stats The `fs.Stats` object.
     * @returns The type of the file.
     */
    static _fileType(stats) {
        switch (true) {
            case stats.isFile():
                return FileType.FILE;
            case stats.isDirectory():
                return FileType.DIRECTORY;
            case stats.isSymbolicLink():
                return FileType.SYMLINK;
            default:
                return FileType.OTHER;
        }
    }
    /**
     * Converts a numeric mode into a string representation of its permissions.
     * For example, this will convert the numeric mode `33279` into a `"755"` string.
     * @param mode The numeric mode to convert.
     * @returns A string representation of the permissions.
     */
    static _formatPermissions(mode) {
        const octalString = mode.toString(8);
        return octalString.substring(octalString.length - 3);
    }
}
exports.Util = Util;
_a = JSII_RTTI_SYMBOL_1;
Util[_a] = { fqn: "@winglang/sdk.fs.Util", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,