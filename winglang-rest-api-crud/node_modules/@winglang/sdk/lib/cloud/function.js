"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionInflightMethods = exports.Function = exports.FUNCTION_FQN = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const fs_1 = require("fs");
const path_1 = require("path");
const constants_1 = require("../constants");
const core_1 = require("../core");
const types_1 = require("../core/types");
const resource_names_1 = require("../shared/resource-names");
const std_1 = require("../std");
/**
 * Global identifier for `Function`.
 */
exports.FUNCTION_FQN = (0, constants_1.fqnForType)("cloud.Function");
/**
 * A function.
 *
 * @inflight `@winglang/sdk.cloud.IFunctionClient`
 * @abstract
 */
class Function extends std_1.Resource {
    constructor(scope, id, handler, props = {}) {
        if (new.target === Function) {
            return std_1.Resource._newFromFactory(exports.FUNCTION_FQN, scope, id, handler, props);
        }
        super(scope, id);
        this._env = {};
        std_1.Node.of(this).title = "Function";
        std_1.Node.of(this).description = "A cloud function (FaaS)";
        for (const [key, value] of Object.entries(props.env ?? {})) {
            this.addEnvironment(key, value);
        }
        this.handler = handler;
        const assetName = resource_names_1.ResourceNames.generateName(this, {
            // Avoid characters that may cause path issues
            disallowedRegex: /[><:"/\\|?*\s]/g,
            case: resource_names_1.CaseConventions.LOWERCASE,
            sep: "_",
        });
        const workdir = core_1.App.of(this).workdir;
        (0, fs_1.mkdirSync)(workdir, { recursive: true });
        const entrypoint = (0, path_1.join)(workdir, `${assetName}.cjs`);
        this.entrypoint = entrypoint;
        if (process.env.WING_TARGET) {
            this.addEnvironment("WING_TARGET", process.env.WING_TARGET);
        }
        if (props.concurrency !== undefined && props.concurrency <= 0) {
            throw new Error("concurrency option on cloud.Function must be a positive integer");
        }
    }
    /** @internal */
    _preSynthesize() {
        super._preSynthesize();
        // write the entrypoint next to the partial inflight code emitted by the compiler,
        // so that `require` resolves naturally.
        const lines = this._getCodeLines(this.handler);
        (0, fs_1.writeFileSync)(this.entrypoint, lines.join("\n"));
        // indicates that we are calling the inflight constructor and the
        // inflight "handle" method on the handler resource.
        core_1.Lifting.lift(this.handler, this, ["handle"]);
    }
    /**
     * @internal
     * @param handler IFunctionHandler
     * @returns the function code lines as strings
     */
    _getCodeLines(handler) {
        const inflightClient = handler._toInflight();
        const lines = new Array();
        const client = "$handler";
        lines.push('"use strict";');
        lines.push(`var ${client} = undefined;`);
        lines.push("exports.handler = async function(event) {");
        lines.push(`  ${client} = ${client} ?? (${inflightClient});`);
        lines.push(`  return await ${client}.handle(event);`);
        lines.push("};");
        return lines;
    }
    /**
     * Add an environment variable to the function.
     */
    addEnvironment(name, value) {
        if (this._env[name] !== undefined && this._env[name] !== value) {
            throw new Error(`Environment variable "${name}" already set with a different value.`);
        }
        this._env[name] = value;
    }
    /**
     * Returns the set of environment variables for this function.
     */
    get env() {
        return { ...this._env };
    }
}
exports.Function = Function;
_a = JSII_RTTI_SYMBOL_1;
Function[_a] = { fqn: "@winglang/sdk.cloud.Function", version: "0.0.0" };
/**
 * List of inflight operations available for `Function`.
 * @internal
 */
var FunctionInflightMethods;
(function (FunctionInflightMethods) {
    /** `Function.invoke` */
    FunctionInflightMethods["INVOKE"] = "invoke";
    /** `Function.invokeAsync` */
    FunctionInflightMethods["INVOKE_ASYNC"] = "invokeAsync";
})(FunctionInflightMethods || (exports.FunctionInflightMethods = FunctionInflightMethods = {}));
//# sourceMappingURL=data:application/json;base64,