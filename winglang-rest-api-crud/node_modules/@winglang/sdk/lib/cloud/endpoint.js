"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Endpoint = exports.ENDPOINT_FQN = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const constants_1 = require("../constants");
const std_1 = require("../std");
/**
 * Global identifier for `Endpoint`.
 */
exports.ENDPOINT_FQN = (0, constants_1.fqnForType)("cloud.Endpoint");
/**
 * A cloud Endpoint
 * @inflight `@winglang/sdk.cloud.IEndpointClient`
 * @abstract
 */
class Endpoint extends std_1.Resource {
    /**
     * The endpoint url.
     * @param url
     */
    constructor(scope, id, url, props) {
        if (new.target === Endpoint) {
            return std_1.Resource._newFromFactory(exports.ENDPOINT_FQN, scope, id, url, props);
        }
        super(scope, id);
        std_1.Node.of(this).title = "Endpoint";
        std_1.Node.of(this).description = props?.label ?? "A cloud endpoint";
        this._url = url;
        this._label = props?.label;
        this._browserSupport = props?.browserSupport;
    }
    /**
     * The endpoint url.
     */
    get url() {
        return this._url;
    }
    /**
     * The endpoint label.
     */
    get label() {
        return this._label;
    }
    /**
     * The endpoint browser support.
     */
    get browserSupport() {
        return this._browserSupport;
    }
}
exports.Endpoint = Endpoint;
_a = JSII_RTTI_SYMBOL_1;
Endpoint[_a] = { fqn: "@winglang/sdk.cloud.Endpoint", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5kcG9pbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY2xvdWQvZW5kcG9pbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSw0Q0FBMEM7QUFDMUMsZ0NBQXdDO0FBRXhDOztHQUVHO0FBQ1UsUUFBQSxZQUFZLEdBQUcsSUFBQSxzQkFBVSxFQUFDLGdCQUFnQixDQUFDLENBQUM7QUFvQnpEOzs7O0dBSUc7QUFDSCxNQUFhLFFBQVMsU0FBUSxjQUFRO0lBVXBDOzs7T0FHRztJQUNILFlBQ0UsS0FBZ0IsRUFDaEIsRUFBVSxFQUNWLEdBQVcsRUFDWCxLQUFxQjtRQUVyQixJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssUUFBUSxFQUFFLENBQUM7WUFDNUIsT0FBTyxjQUFRLENBQUMsZUFBZSxDQUFDLG9CQUFZLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDdkUsQ0FBQztRQUVELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsVUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDO1FBQ2pDLFVBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxHQUFHLEtBQUssRUFBRSxLQUFLLElBQUksa0JBQWtCLENBQUM7UUFFL0QsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7UUFDaEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLEVBQUUsS0FBSyxDQUFDO1FBQzNCLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxFQUFFLGNBQWMsQ0FBQztJQUMvQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFXLEdBQUc7UUFDWixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDbkIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBYyxLQUFLO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFjLGNBQWM7UUFDMUIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDO0lBQzlCLENBQUM7O0FBckRILDRCQXNEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgeyBmcW5Gb3JUeXBlIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgTm9kZSwgUmVzb3VyY2UgfSBmcm9tIFwiLi4vc3RkXCI7XG5cbi8qKlxuICogR2xvYmFsIGlkZW50aWZpZXIgZm9yIGBFbmRwb2ludGAuXG4gKi9cbmV4cG9ydCBjb25zdCBFTkRQT0lOVF9GUU4gPSBmcW5Gb3JUeXBlKFwiY2xvdWQuRW5kcG9pbnRcIik7XG5cbi8qKlxuICogT3B0aW9ucyBmb3IgYEVuZHBvaW50YC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBFbmRwb2ludFByb3BzIHtcbiAgLyoqXG4gICAqIFRoZSBlbmRwb2ludCdzIGxhYmVsLiBGb3IgVUkgcHVycG9zZXMuXG4gICAqIEBleGFtcGxlIFwiTXkgRGFzaGJvYXJkXCJcbiAgICogQGRlZmF1bHQgdW5kZWZpbmVkXG4gICAqL1xuICByZWFkb25seSBsYWJlbD86IHN0cmluZztcblxuICAvKipcbiAgICogV2hldGhlciB0aGUgZW5kcG9pbnQgaXMgc3VwcG9ydGVkIHRocm91Z2ggYnJvd3NlcnMuIEZvciBVSSBwdXJwb3Nlcy5cbiAgICogQGRlZmF1bHQgdW5kZWZpbmVkXG4gICAqL1xuICByZWFkb25seSBicm93c2VyU3VwcG9ydD86IGJvb2xlYW47XG59XG5cbi8qKlxuICogQSBjbG91ZCBFbmRwb2ludFxuICogQGluZmxpZ2h0IGBAd2luZ2xhbmcvc2RrLmNsb3VkLklFbmRwb2ludENsaWVudGBcbiAqIEBhYnN0cmFjdFxuICovXG5leHBvcnQgY2xhc3MgRW5kcG9pbnQgZXh0ZW5kcyBSZXNvdXJjZSB7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHJpdmF0ZSBfdXJsITogc3RyaW5nO1xuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHJvdGVjdGVkIF9sYWJlbDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHJvdGVjdGVkIF9icm93c2VyU3VwcG9ydDogYm9vbGVhbiB8IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogVGhlIGVuZHBvaW50IHVybC5cbiAgICogQHBhcmFtIHVybFxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgc2NvcGU6IENvbnN0cnVjdCxcbiAgICBpZDogc3RyaW5nLFxuICAgIHVybDogc3RyaW5nLFxuICAgIHByb3BzPzogRW5kcG9pbnRQcm9wc1xuICApIHtcbiAgICBpZiAobmV3LnRhcmdldCA9PT0gRW5kcG9pbnQpIHtcbiAgICAgIHJldHVybiBSZXNvdXJjZS5fbmV3RnJvbUZhY3RvcnkoRU5EUE9JTlRfRlFOLCBzY29wZSwgaWQsIHVybCwgcHJvcHMpO1xuICAgIH1cblxuICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICBOb2RlLm9mKHRoaXMpLnRpdGxlID0gXCJFbmRwb2ludFwiO1xuICAgIE5vZGUub2YodGhpcykuZGVzY3JpcHRpb24gPSBwcm9wcz8ubGFiZWwgPz8gXCJBIGNsb3VkIGVuZHBvaW50XCI7XG5cbiAgICB0aGlzLl91cmwgPSB1cmw7XG4gICAgdGhpcy5fbGFiZWwgPSBwcm9wcz8ubGFiZWw7XG4gICAgdGhpcy5fYnJvd3NlclN1cHBvcnQgPSBwcm9wcz8uYnJvd3NlclN1cHBvcnQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGVuZHBvaW50IHVybC5cbiAgICovXG4gIHB1YmxpYyBnZXQgdXJsKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3VybDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgZW5kcG9pbnQgbGFiZWwuXG4gICAqL1xuICBwcm90ZWN0ZWQgZ2V0IGxhYmVsKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX2xhYmVsO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBlbmRwb2ludCBicm93c2VyIHN1cHBvcnQuXG4gICAqL1xuICBwcm90ZWN0ZWQgZ2V0IGJyb3dzZXJTdXBwb3J0KCk6IGJvb2xlYW4gfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLl9icm93c2VyU3VwcG9ydDtcbiAgfVxufVxuXG4vKipcbiAqIEluZmxpZ2h0IGludGVyZmFjZSBmb3IgYEVuZHBvaW50YC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJRW5kcG9pbnRDbGllbnQge31cbiJdfQ==