"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecretInflightMethods = exports.Secret = exports.SECRET_FQN = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const constants_1 = require("../constants");
const types_1 = require("../core/types");
const std_1 = require("../std");
/**
 * Global identifier for `Secret`.
 */
exports.SECRET_FQN = (0, constants_1.fqnForType)("cloud.Secret");
/**
 * A cloud secret.
 *
 * @inflight `@winglang/sdk.cloud.ISecretClient`
 * @abstract
 */
class Secret extends std_1.Resource {
    constructor(scope, id, props = {}) {
        if (new.target === Secret) {
            return std_1.Resource._newFromFactory(exports.SECRET_FQN, scope, id, props);
        }
        super(scope, id);
        /** @internal */
        this[_b] = true;
        std_1.Node.of(this).title = "Secret";
        std_1.Node.of(this).description = "A cloud secret";
        this._name = props.name;
    }
    /** Get secret name */
    get name() {
        return this._name;
    }
}
exports.Secret = Secret;
_a = JSII_RTTI_SYMBOL_1, _b = types_1.SECRET_SYMBOL;
Secret[_a] = { fqn: "@winglang/sdk.cloud.Secret", version: "0.0.0" };
/**
 * List of inflight operations available for `Secret`.
 * @internal
 */
var SecretInflightMethods;
(function (SecretInflightMethods) {
    /** `Secret.value` */
    SecretInflightMethods["VALUE"] = "value";
    /** `Secret.valueJson` */
    SecretInflightMethods["VALUE_JSON"] = "valueJson";
})(SecretInflightMethods || (exports.SecretInflightMethods = SecretInflightMethods = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VjcmV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Nsb3VkL3NlY3JldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLDRDQUEwQztBQUMxQyx5Q0FBK0Q7QUFDL0QsZ0NBQThDO0FBRTlDOztHQUVHO0FBQ1UsUUFBQSxVQUFVLEdBQUcsSUFBQSxzQkFBVSxFQUFDLGNBQWMsQ0FBQyxDQUFDO0FBa0JyRDs7Ozs7R0FLRztBQUNILE1BQWEsTUFBTyxTQUFRLGNBQVE7SUFTbEMsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxRQUFxQixFQUFFO1FBQy9ELElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxNQUFNLEVBQUUsQ0FBQztZQUMxQixPQUFPLGNBQVEsQ0FBQyxlQUFlLENBQUMsa0JBQVUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2hFLENBQUM7UUFFRCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBWG5CLGdCQUFnQjtRQUNULFFBQWUsR0FBRyxJQUFJLENBQUM7UUFZNUIsVUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDO1FBQy9CLFVBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxHQUFHLGdCQUFnQixDQUFDO1FBRTdDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztJQUMxQixDQUFDO0lBRUQsc0JBQXNCO0lBQ3RCLElBQVcsSUFBSTtRQUNiLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDOztBQXpCSCx3QkEwQkM7OEJBdEJTLHFCQUFhOztBQXlEdkI7OztHQUdHO0FBQ0gsSUFBWSxxQkFLWDtBQUxELFdBQVkscUJBQXFCO0lBQy9CLHFCQUFxQjtJQUNyQix3Q0FBZSxDQUFBO0lBQ2YseUJBQXlCO0lBQ3pCLGlEQUF3QixDQUFBO0FBQzFCLENBQUMsRUFMVyxxQkFBcUIscUNBQXJCLHFCQUFxQixRQUtoQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgeyBmcW5Gb3JUeXBlIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgSU5GTElHSFRfU1lNQk9MLCBTRUNSRVRfU1lNQk9MIH0gZnJvbSBcIi4uL2NvcmUvdHlwZXNcIjtcbmltcG9ydCB7IEpzb24sIE5vZGUsIFJlc291cmNlIH0gZnJvbSBcIi4uL3N0ZFwiO1xuXG4vKipcbiAqIEdsb2JhbCBpZGVudGlmaWVyIGZvciBgU2VjcmV0YC5cbiAqL1xuZXhwb3J0IGNvbnN0IFNFQ1JFVF9GUU4gPSBmcW5Gb3JUeXBlKFwiY2xvdWQuU2VjcmV0XCIpO1xuXG4vKipcbiAqIE9wdGlvbnMgZm9yIGBTZWNyZXRgLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNlY3JldFByb3BzIHtcbiAgLyoqXG4gICAqIFRoZSBzZWNyZXQncyBuYW1lLlxuICAgKlxuICAgKiBJZiBubyBuYW1lIGlzIHByb3ZpZGVkIHRoZW4gYSBuZXcgc2VjcmV0IGlzIHByb3Zpc2lvbmVkIGluIHRoZSB0YXJnZXQuXG4gICAqIElmIGEgbmFtZSBpcyBwcm92aWRlZCB0aGVuIHRoZSByZXNvdXJjZSB3aWxsIHJlZmVyZW5jZSBhbiBleGlzdGluZ1xuICAgKiBzZWNyZXQgaW4gdGhlIHRhcmdldC5cbiAgICpcbiAgICogQGRlZmF1bHQgLSBhIG5ldyBzZWNyZXQgaXMgcHJvdmlzaW9uZWQgd2l0aCBhIGdlbmVyYXRlZCBuYW1lXG4gICAqL1xuICByZWFkb25seSBuYW1lPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEEgY2xvdWQgc2VjcmV0LlxuICpcbiAqIEBpbmZsaWdodCBgQHdpbmdsYW5nL3Nkay5jbG91ZC5JU2VjcmV0Q2xpZW50YFxuICogQGFic3RyYWN0XG4gKi9cbmV4cG9ydCBjbGFzcyBTZWNyZXQgZXh0ZW5kcyBSZXNvdXJjZSB7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHVibGljIFtJTkZMSUdIVF9TWU1CT0xdPzogSVNlY3JldENsaWVudDtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwdWJsaWMgW1NFQ1JFVF9TWU1CT0xdID0gdHJ1ZTtcblxuICAvKiogQGludGVybmFsICovXG4gIHByb3RlY3RlZCBfbmFtZT86IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogU2VjcmV0UHJvcHMgPSB7fSkge1xuICAgIGlmIChuZXcudGFyZ2V0ID09PSBTZWNyZXQpIHtcbiAgICAgIHJldHVybiBSZXNvdXJjZS5fbmV3RnJvbUZhY3RvcnkoU0VDUkVUX0ZRTiwgc2NvcGUsIGlkLCBwcm9wcyk7XG4gICAgfVxuXG4gICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgIE5vZGUub2YodGhpcykudGl0bGUgPSBcIlNlY3JldFwiO1xuICAgIE5vZGUub2YodGhpcykuZGVzY3JpcHRpb24gPSBcIkEgY2xvdWQgc2VjcmV0XCI7XG5cbiAgICB0aGlzLl9uYW1lID0gcHJvcHMubmFtZTtcbiAgfVxuXG4gIC8qKiBHZXQgc2VjcmV0IG5hbWUgKi9cbiAgcHVibGljIGdldCBuYW1lKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX25hbWU7XG4gIH1cbn1cblxuLyoqXG4gKiBPcHRpb25zIHdoZW4gZ2V0dGluZyBhIHNlY3JldCB2YWx1ZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEdldFNlY3JldFZhbHVlT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGNhY2hlIHRoZSB2YWx1ZVxuICAgKlxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICByZWFkb25seSBjYWNoZT86IGJvb2xlYW47XG59XG5cbi8qKlxuICogSW5mbGlnaHQgaW50ZXJmYWNlIGZvciBgU2VjcmV0YC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJU2VjcmV0Q2xpZW50IHtcbiAgLyoqXG4gICAqIFJldHJpZXZlIHRoZSB2YWx1ZSBvZiB0aGUgc2VjcmV0LlxuICAgKiBAVGhyb3dzIGlmIHRoZSBzZWNyZXQgZG9lc24ndCBleGlzdC5cbiAgICogQFJldHVybnMgdGhlIHNlY3JldCB2YWx1ZSBhcyBzdHJpbmcuXG4gICAqIEBpbmZsaWdodFxuICAgKi9cbiAgdmFsdWUob3B0aW9ucz86IEdldFNlY3JldFZhbHVlT3B0aW9ucyk6IFByb21pc2U8c3RyaW5nPjtcblxuICAvKipcbiAgICogUmV0cmlldmUgdGhlIEpzb24gdmFsdWUgb2YgdGhlIHNlY3JldC5cbiAgICogQFRocm93cyBpZiB0aGUgc2VjcmV0IGRvZXNuJ3QgZXhpc3Qgb3IgY2Fubm90IGJlIHBhcnNlZCBhcyBKc29uXG4gICAqIEBSZXR1cm5zIHRoZSBzZWNyZXQgdmFsdWUgcGFyc2VkIGFzIEpzb24uXG4gICAqIEBpbmZsaWdodFxuICAgKi9cbiAgdmFsdWVKc29uKG9wdGlvbnM/OiBHZXRTZWNyZXRWYWx1ZU9wdGlvbnMpOiBQcm9taXNlPEpzb24+O1xufVxuXG4vKipcbiAqIExpc3Qgb2YgaW5mbGlnaHQgb3BlcmF0aW9ucyBhdmFpbGFibGUgZm9yIGBTZWNyZXRgLlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBlbnVtIFNlY3JldEluZmxpZ2h0TWV0aG9kcyB7XG4gIC8qKiBgU2VjcmV0LnZhbHVlYCAqL1xuICBWQUxVRSA9IFwidmFsdWVcIixcbiAgLyoqIGBTZWNyZXQudmFsdWVKc29uYCAqL1xuICBWQUxVRV9KU09OID0gXCJ2YWx1ZUpzb25cIixcbn1cbiJdfQ==