"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BucketInflightMethods = exports.BucketEventType = exports.BucketSignedUrlAction = exports.Bucket = exports.BUCKET_FQN = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const fs = __importStar(require("fs"));
const path_1 = require("path");
const topic_1 = require("./topic");
const constants_1 = require("../constants");
const core_1 = require("../core");
const errors_1 = require("../core/errors");
const types_1 = require("../core/types");
const std_1 = require("../std");
/**
 * Global identifier for `Bucket`.
 */
exports.BUCKET_FQN = (0, constants_1.fqnForType)("cloud.Bucket");
/**
 * A cloud object store.
 *
 * @inflight `@winglang/sdk.cloud.IBucketClient`
 * @abstract
 */
class Bucket extends std_1.Resource {
    constructor(scope, id, props = {}) {
        if (new.target === Bucket) {
            return std_1.Resource._newFromFactory(exports.BUCKET_FQN, scope, id, props);
        }
        super(scope, id);
        /** @internal */
        this._topics = new Map();
        std_1.Node.of(this).title = "Bucket";
        std_1.Node.of(this).description = "A cloud object store";
    }
    /**
     * Add a file to the bucket that is uploaded when the app is deployed.
     *
     * TODO: In the future this will support uploading any `Blob` type or
     * referencing a file from the local filesystem.
     * @abstract
     */
    addObject(key, body) {
        key;
        body;
        throw new errors_1.AbstractMemberError();
    }
    /**
     * Add a file to the bucket from system folder
     *
     * @param {string} key - The key or name to associate with the file.
     * @param {string} path - The path to the file on the local system.
     * @param {BufferEncoding} encoding - The encoding to use when reading the file. Defaults to "utf-8".
     */
    addFile(key, path, encoding = "utf-8") {
        const app = core_1.App.of(this);
        const data = fs.readFileSync((0, path_1.isAbsolute)(path) ? path : (0, path_1.resolve)(app.entrypointDir, path), { encoding: encoding });
        this.addObject(key, data);
    }
    /**
     * Creates a topic for subscribing to notification events
     * @param actionType
     * @returns the created topic
     */
    createTopic(actionType) {
        const topic = new topic_1.Topic(this, actionType.toLowerCase());
        this.node.addDependency(topic);
        return topic;
    }
    /**
     * Gets topic form the topics map, or creates if not exists
     * @param actionType
     */
    getTopic(actionType) {
        if (!this._topics.has(actionType)) {
            this._topics.set(actionType, this.createTopic(actionType));
        }
        return this._topics.get(actionType);
    }
    /**
     * Creates an inflight handler from inflight code
     * @param eventType
     * @param inflight
     */
    createTopicHandler(eventType, inflight) {
        eventType;
        inflight;
        throw new Error("Method not implemented.");
    }
    /**
     * Creates a bucket event notifier
     * @param eventNames the events to subscribe the inflight function to
     * @param inflight the code to run upon event
     * @param opts
     */
    createBucketEvent(eventNames, inflight, opts) {
        opts;
        if (eventNames.includes(BucketEventType.CREATE)) {
            const topic = this.getTopic(BucketEventType.CREATE).onMessage(this.createTopicHandler(BucketEventType.CREATE, inflight));
            for (const op of [
                BucketInflightMethods.PUT,
                BucketInflightMethods.PUT_JSON,
            ]) {
                std_1.Node.of(this).addConnection({
                    source: this,
                    sourceOp: op,
                    target: topic,
                    targetOp: topic_1.TopicInflightMethods.PUBLISH,
                    name: BucketEventType.CREATE,
                });
            }
        }
        if (eventNames.includes(BucketEventType.UPDATE)) {
            const topic = this.getTopic(BucketEventType.UPDATE).onMessage(this.createTopicHandler(BucketEventType.UPDATE, inflight));
            for (const op of [
                BucketInflightMethods.PUT,
                BucketInflightMethods.PUT_JSON,
            ]) {
                std_1.Node.of(this).addConnection({
                    source: this,
                    sourceOp: op,
                    target: topic,
                    targetOp: topic_1.TopicInflightMethods.PUBLISH,
                    name: BucketEventType.UPDATE,
                });
            }
        }
        if (eventNames.includes(BucketEventType.DELETE)) {
            const topic = this.getTopic(BucketEventType.DELETE).onMessage(this.createTopicHandler(BucketEventType.DELETE, inflight));
            for (const op of [
                BucketInflightMethods.DELETE,
                BucketInflightMethods.TRY_DELETE,
            ]) {
                std_1.Node.of(this).addConnection({
                    source: this,
                    sourceOp: op,
                    target: topic,
                    targetOp: topic_1.TopicInflightMethods.PUBLISH,
                    name: BucketEventType.DELETE,
                });
            }
        }
    }
    /**
     * Run an inflight whenever a file is uploaded to the bucket.
     */
    onCreate(fn, opts) {
        if (opts) {
            console.warn("bucket.onCreate does not support options yet");
        }
        this.createBucketEvent([BucketEventType.CREATE], fn, opts);
    }
    /**
     * Run an inflight whenever a file is deleted from the bucket.
     */
    onDelete(fn, opts) {
        if (opts) {
            console.warn("bucket.onDelete does not support options yet");
        }
        this.createBucketEvent([BucketEventType.DELETE], fn, opts);
    }
    /**
     * Run an inflight whenever a file is updated in the bucket.
     */
    onUpdate(fn, opts) {
        if (opts) {
            console.warn("bucket.onUpdate does not support options yet");
        }
        this.createBucketEvent([BucketEventType.UPDATE], fn, opts);
    }
    /**
     * Run an inflight whenever a file is uploaded, modified, or deleted from the bucket.
     */
    onEvent(fn, opts) {
        if (opts) {
            console.warn("bucket.onEvent does not support options yet");
        }
        this.createBucketEvent([BucketEventType.CREATE, BucketEventType.UPDATE, BucketEventType.DELETE], fn, opts);
    }
}
exports.Bucket = Bucket;
_a = JSII_RTTI_SYMBOL_1;
Bucket[_a] = { fqn: "@winglang/sdk.cloud.Bucket", version: "0.0.0" };
/**
 * Specifies the action permitted by a presigned URL for a bucket.
 */
var BucketSignedUrlAction;
(function (BucketSignedUrlAction) {
    /**
     * Represents a HTTP GET request for a presigned URL, allowing read access for an object in the bucket.
     */
    BucketSignedUrlAction["DOWNLOAD"] = "DOWNLOAD";
    /**
     * Represents a HTTP PUT request for a presigned URL, allowing write access for an object in the bucket.
     */
    BucketSignedUrlAction["UPLOAD"] = "UPLOAD";
})(BucketSignedUrlAction || (exports.BucketSignedUrlAction = BucketSignedUrlAction = {}));
/**
 * Bucket events to subscribe to
 */
var BucketEventType;
(function (BucketEventType) {
    /**
     * Create
     */
    BucketEventType["CREATE"] = "onCreate";
    /**
     * Delete
     */
    BucketEventType["DELETE"] = "onDelete";
    /**
     * Update
     */
    BucketEventType["UPDATE"] = "onUpdate";
})(BucketEventType || (exports.BucketEventType = BucketEventType = {}));
/**
 * List of inflight operations available for `Bucket`.
 * @internal
 */
var BucketInflightMethods;
(function (BucketInflightMethods) {
    /** `Bucket.put` */
    BucketInflightMethods["PUT"] = "put";
    /** `Bucket.get` */
    BucketInflightMethods["GET"] = "get";
    /** `Bucket.list` */
    BucketInflightMethods["LIST"] = "list";
    /** `Bucket.delete` */
    BucketInflightMethods["DELETE"] = "delete";
    /** `Bucket.putJson` */
    BucketInflightMethods["PUT_JSON"] = "putJson";
    /** `Bucket.getJson` */
    BucketInflightMethods["GET_JSON"] = "getJson";
    /** `Bucket.publicUrl` */
    BucketInflightMethods["PUBLIC_URL"] = "publicUrl";
    /** `Bucket.exists` */
    BucketInflightMethods["EXISTS"] = "exists";
    /** `Bucket.tryGet` */
    BucketInflightMethods["TRY_GET"] = "tryGet";
    /** `Bucket.tryGetJson` */
    BucketInflightMethods["TRY_GET_JSON"] = "tryGetJson";
    /** `Bucket.tryDelete` */
    BucketInflightMethods["TRY_DELETE"] = "tryDelete";
    /** `Bucket.signedUrl` */
    BucketInflightMethods["SIGNED_URL"] = "signedUrl";
    /** `Bucket.metadata` */
    BucketInflightMethods["METADATA"] = "metadata";
    /** `Bucket.copy` */
    BucketInflightMethods["COPY"] = "copy";
    /** `Bucket.rename` */
    BucketInflightMethods["RENAME"] = "rename";
})(BucketInflightMethods || (exports.BucketInflightMethods = BucketInflightMethods = {}));
//# sourceMappingURL=data:application/json;base64,