"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TopicInflightMethods = exports.Topic = exports.TOPIC_FQN = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const constants_1 = require("../constants");
const errors_1 = require("../core/errors");
const types_1 = require("../core/types");
const std_1 = require("../std");
exports.TOPIC_FQN = (0, constants_1.fqnForType)("cloud.Topic");
/**
 * A topic.
 *
 * @inflight `@winglang/sdk.cloud.ITopicClient`
 * @abstract
 */
class Topic extends std_1.Resource {
    constructor(scope, id, props = {}) {
        if (new.target === Topic) {
            return std_1.Resource._newFromFactory(exports.TOPIC_FQN, scope, id, props);
        }
        super(scope, id);
        std_1.Node.of(this).title = "Topic";
        std_1.Node.of(this).description = "A pub/sub notification topic";
        props;
    }
    /**
     * Run an inflight whenever an message is published to the topic.
     * @abstract
     */
    onMessage(inflight, props) {
        inflight;
        props;
        throw new errors_1.AbstractMemberError();
    }
    /**
     * Subscribing queue to the topic
     * @abstract
     */
    subscribeQueue(queue, props) {
        queue;
        props;
        throw new errors_1.AbstractMemberError();
    }
}
exports.Topic = Topic;
_a = JSII_RTTI_SYMBOL_1;
Topic[_a] = { fqn: "@winglang/sdk.cloud.Topic", version: "0.0.0" };
/**
 * List of inflight operations available for `Topic`.
 * @internal
 */
var TopicInflightMethods;
(function (TopicInflightMethods) {
    /** `Topic.publish` */
    TopicInflightMethods["PUBLISH"] = "publish";
})(TopicInflightMethods || (exports.TopicInflightMethods = TopicInflightMethods = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9waWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY2xvdWQvdG9waWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFHQSw0Q0FBMEM7QUFDMUMsMkNBQXFEO0FBQ3JELHlDQUFnRDtBQUNoRCxnQ0FBbUQ7QUFFdEMsUUFBQSxTQUFTLEdBQUcsSUFBQSxzQkFBVSxFQUFDLGFBQWEsQ0FBQyxDQUFDO0FBT25EOzs7OztHQUtHO0FBQ0gsTUFBYSxLQUFNLFNBQVEsY0FBUTtJQUlqQyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLFFBQW9CLEVBQUU7UUFDOUQsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLEtBQUssRUFBRSxDQUFDO1lBQ3pCLE9BQU8sY0FBUSxDQUFDLGVBQWUsQ0FBQyxpQkFBUyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDL0QsQ0FBQztRQUVELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsVUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDO1FBQzlCLFVBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxHQUFHLDhCQUE4QixDQUFDO1FBRTNELEtBQUssQ0FBQztJQUNSLENBQUM7SUFFRDs7O09BR0c7SUFDSSxTQUFTLENBQ2QsUUFBZ0MsRUFDaEMsS0FBNkI7UUFFN0IsUUFBUSxDQUFDO1FBQ1QsS0FBSyxDQUFDO1FBQ04sTUFBTSxJQUFJLDRCQUFtQixFQUFFLENBQUM7SUFDbEMsQ0FBQztJQUVEOzs7T0FHRztJQUNJLGNBQWMsQ0FDbkIsS0FBWSxFQUNaLEtBQWtDO1FBRWxDLEtBQUssQ0FBQztRQUNOLEtBQUssQ0FBQztRQUNOLE1BQU0sSUFBSSw0QkFBbUIsRUFBRSxDQUFDO0lBQ2xDLENBQUM7O0FBekNILHNCQTBDQzs7O0FBOENEOzs7R0FHRztBQUNILElBQVksb0JBR1g7QUFIRCxXQUFZLG9CQUFvQjtJQUM5QixzQkFBc0I7SUFDdEIsMkNBQW1CLENBQUE7QUFDckIsQ0FBQyxFQUhXLG9CQUFvQixvQ0FBcEIsb0JBQW9CLFFBRy9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCB7IEZ1bmN0aW9uLCBGdW5jdGlvblByb3BzIH0gZnJvbSBcIi4vZnVuY3Rpb25cIjtcbmltcG9ydCB7IFF1ZXVlLCBRdWV1ZVByb3BzIH0gZnJvbSBcIi4vcXVldWVcIjtcbmltcG9ydCB7IGZxbkZvclR5cGUgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBBYnN0cmFjdE1lbWJlckVycm9yIH0gZnJvbSBcIi4uL2NvcmUvZXJyb3JzXCI7XG5pbXBvcnQgeyBJTkZMSUdIVF9TWU1CT0wgfSBmcm9tIFwiLi4vY29yZS90eXBlc1wiO1xuaW1wb3J0IHsgTm9kZSwgUmVzb3VyY2UsIElJbmZsaWdodCB9IGZyb20gXCIuLi9zdGRcIjtcblxuZXhwb3J0IGNvbnN0IFRPUElDX0ZRTiA9IGZxbkZvclR5cGUoXCJjbG91ZC5Ub3BpY1wiKTtcblxuLyoqXG4gKiBPcHRpb25zIGZvciBgVG9waWNgLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRvcGljUHJvcHMge31cblxuLyoqXG4gKiBBIHRvcGljLlxuICpcbiAqIEBpbmZsaWdodCBgQHdpbmdsYW5nL3Nkay5jbG91ZC5JVG9waWNDbGllbnRgXG4gKiBAYWJzdHJhY3RcbiAqL1xuZXhwb3J0IGNsYXNzIFRvcGljIGV4dGVuZHMgUmVzb3VyY2Uge1xuICAvKiogQGludGVybmFsICovXG4gIHB1YmxpYyBbSU5GTElHSFRfU1lNQk9MXT86IElUb3BpY0NsaWVudDtcblxuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogVG9waWNQcm9wcyA9IHt9KSB7XG4gICAgaWYgKG5ldy50YXJnZXQgPT09IFRvcGljKSB7XG4gICAgICByZXR1cm4gUmVzb3VyY2UuX25ld0Zyb21GYWN0b3J5KFRPUElDX0ZRTiwgc2NvcGUsIGlkLCBwcm9wcyk7XG4gICAgfVxuXG4gICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgIE5vZGUub2YodGhpcykudGl0bGUgPSBcIlRvcGljXCI7XG4gICAgTm9kZS5vZih0aGlzKS5kZXNjcmlwdGlvbiA9IFwiQSBwdWIvc3ViIG5vdGlmaWNhdGlvbiB0b3BpY1wiO1xuXG4gICAgcHJvcHM7XG4gIH1cblxuICAvKipcbiAgICogUnVuIGFuIGluZmxpZ2h0IHdoZW5ldmVyIGFuIG1lc3NhZ2UgaXMgcHVibGlzaGVkIHRvIHRoZSB0b3BpYy5cbiAgICogQGFic3RyYWN0XG4gICAqL1xuICBwdWJsaWMgb25NZXNzYWdlKFxuICAgIGluZmxpZ2h0OiBJVG9waWNPbk1lc3NhZ2VIYW5kbGVyLFxuICAgIHByb3BzPzogVG9waWNPbk1lc3NhZ2VPcHRpb25zXG4gICk6IEZ1bmN0aW9uIHtcbiAgICBpbmZsaWdodDtcbiAgICBwcm9wcztcbiAgICB0aHJvdyBuZXcgQWJzdHJhY3RNZW1iZXJFcnJvcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN1YnNjcmliaW5nIHF1ZXVlIHRvIHRoZSB0b3BpY1xuICAgKiBAYWJzdHJhY3RcbiAgICovXG4gIHB1YmxpYyBzdWJzY3JpYmVRdWV1ZShcbiAgICBxdWV1ZTogUXVldWUsXG4gICAgcHJvcHM/OiBUb3BpY1N1YnNjcmliZVF1ZXVlT3B0aW9uc1xuICApOiB2b2lkIHtcbiAgICBxdWV1ZTtcbiAgICBwcm9wcztcbiAgICB0aHJvdyBuZXcgQWJzdHJhY3RNZW1iZXJFcnJvcigpO1xuICB9XG59XG5cbi8qKlxuICogT3B0aW9ucyBmb3IgYFRvcGljLm9uTWVzc2FnZWAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVG9waWNPbk1lc3NhZ2VPcHRpb25zIGV4dGVuZHMgRnVuY3Rpb25Qcm9wcyB7fVxuLyoqXG4gKiBPcHRpb25zIGZvciBgVG9waWMuc3Vic2NyaWJlUXVldWVgLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRvcGljU3Vic2NyaWJlUXVldWVPcHRpb25zIGV4dGVuZHMgUXVldWVQcm9wcyB7fVxuXG4vKipcbiAqIEluZmxpZ2h0IGludGVyZmFjZSBmb3IgYFRvcGljYC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJVG9waWNDbGllbnQge1xuICAvKipcbiAgICogUHVibGlzaCBtZXNzYWdlcyB0byB0b3BpYywgaWYgbXVsdGlwbGUgbWVzc2FnZXMgYXJlIHBhc3NlZCB0aGVuIHRoZXlcbiAgICogd2lsbCBiZSBwdWJsaXNoZWQgYXMgYSBiYXRjaCBpZiBzdXBwb3J0ZWQgYnkgdGhlIHRhcmdldCBwbGF0Zm9ybVxuICAgKiBAcGFyYW0gbWVzc2FnZXMgUGF5bG9hZCB0byBwdWJsaXNoIHRvIFRvcGljXG4gICAqIEBpbmZsaWdodFxuICAgKi9cbiAgcHVibGlzaCguLi5tZXNzYWdlczogc3RyaW5nW10pOiBQcm9taXNlPHZvaWQ+O1xufVxuXG4vKipcbiAqIEEgcmVzb3VyY2Ugd2l0aCBhbiBpbmZsaWdodCBcImhhbmRsZVwiIG1ldGhvZCB0aGF0IGNhbiBiZSBwYXNzZWQgdG9cbiAqIGBUb3BpYy5vbl9tZXNzYWdlYC5cbiAqXG4gKiBAaW5mbGlnaHQgYEB3aW5nbGFuZy9zZGsuY2xvdWQuSVRvcGljT25NZXNzYWdlSGFuZGxlckNsaWVudGBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJVG9waWNPbk1lc3NhZ2VIYW5kbGVyIGV4dGVuZHMgSUluZmxpZ2h0IHtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBbSU5GTElHSFRfU1lNQk9MXT86IElUb3BpY09uTWVzc2FnZUhhbmRsZXJDbGllbnRbXCJoYW5kbGVcIl07XG59XG5cbi8qKlxuICogSW5mbGlnaHQgY2xpZW50IGZvciBgSVRvcGljT25NZXNzYWdlSGFuZGxlcmAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVRvcGljT25NZXNzYWdlSGFuZGxlckNsaWVudCB7XG4gIC8qKlxuICAgKiBGdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW4gYSBtZXNzYWdlIGlzIHJlY2VpdmVkIGZyb20gdGhlIHRvcGljLlxuICAgKiBAaW5mbGlnaHRcbiAgICovXG4gIGhhbmRsZShldmVudDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPjtcbn1cblxuLyoqXG4gKiBMaXN0IG9mIGluZmxpZ2h0IG9wZXJhdGlvbnMgYXZhaWxhYmxlIGZvciBgVG9waWNgLlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBlbnVtIFRvcGljSW5mbGlnaHRNZXRob2RzIHtcbiAgLyoqIGBUb3BpYy5wdWJsaXNoYCAqL1xuICBQVUJMSVNIID0gXCJwdWJsaXNoXCIsXG59XG4iXX0=