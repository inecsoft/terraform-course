import { Construct } from "constructs";
import { FunctionProps } from "./function";
import { INFLIGHT_SYMBOL } from "../core/types";
import { IInflight, Resource } from "../std";
/**
 * Global identifier for `OnDeploy`.
 */
export declare const ON_DEPLOY_FQN: string;
/**
 * Options for `OnDeploy`.
 */
export interface OnDeployProps extends FunctionProps {
    /**
     * Execute this trigger only after these resources have been provisioned.
     * @default - no additional dependencies
     */
    readonly executeAfter?: Construct[];
    /**
     * Adds this trigger as a dependency on other constructs.
     * @default - no additional dependencies
     */
    readonly executeBefore?: Construct[];
}
/**
 * Run code every time the app is deployed.
 *
 * @inflight `@winglang/sdk.cloud.IOnDeployClient`
 * @abstract
 */
export declare class OnDeploy extends Resource {
    /** @internal */
    [INFLIGHT_SYMBOL]?: IOnDeployClient;
    constructor(scope: Construct, id: string, handler: IOnDeployHandler, props?: OnDeployProps);
}
/**
 * A resource with an inflight "handle" method that can be used by `cloud.OnDeploy`.
 *
 * @inflight `@winglang/sdk.cloud.IOnDeployHandlerClient`
 */
export interface IOnDeployHandler extends IInflight {
    /** @internal */
    [INFLIGHT_SYMBOL]?: IOnDeployHandlerClient["handle"];
}
/**
 * Inflight client for `IOnDeployHandler`.
 */
export interface IOnDeployHandlerClient {
    /**
     * Entrypoint function that will be called when the app is deployed.
     * @inflight
     */
    handle(): Promise<void>;
}
/**
 * Inflight interface for `OnDeploy`.
 */
export interface IOnDeployClient {
}
