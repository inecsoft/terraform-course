"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueueInflightMethods = exports.Queue = exports.DEFAULT_DELIVERY_ATTEMPTS = exports.QUEUE_FQN = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const constants_1 = require("../constants");
const errors_1 = require("../core/errors");
const types_1 = require("../core/types");
const std_1 = require("../std");
/**
 * Global identifier for `Queue`.
 */
exports.QUEUE_FQN = (0, constants_1.fqnForType)("cloud.Queue");
/**
 * Dead-letter queue default retries
 */
exports.DEFAULT_DELIVERY_ATTEMPTS = 1;
/**
 * A queue.
 *
 * @inflight `@winglang/sdk.cloud.IQueueClient`
 * @abstract
 */
class Queue extends std_1.Resource {
    constructor(scope, id, props = {}) {
        if (new.target === Queue) {
            return std_1.Resource._newFromFactory(exports.QUEUE_FQN, scope, id, props);
        }
        super(scope, id);
        std_1.Node.of(this).title = "Queue";
        std_1.Node.of(this).description = "A distributed message queue";
        props;
    }
    /**
     * Create a function to consume messages from this queue.
     * @abstract
     */
    setConsumer(handler, props) {
        handler;
        props;
        throw new errors_1.AbstractMemberError();
    }
}
exports.Queue = Queue;
_a = JSII_RTTI_SYMBOL_1;
Queue[_a] = { fqn: "@winglang/sdk.cloud.Queue", version: "0.0.0" };
/**
 * List of inflight operations available for `Queue`.
 * @internal
 */
var QueueInflightMethods;
(function (QueueInflightMethods) {
    /** `Queue.push` */
    QueueInflightMethods["PUSH"] = "push";
    /** `Queue.purge` */
    QueueInflightMethods["PURGE"] = "purge";
    /** `Queue.approxSize` */
    QueueInflightMethods["APPROX_SIZE"] = "approxSize";
    /** `Queue.pop` */
    QueueInflightMethods["POP"] = "pop";
})(QueueInflightMethods || (exports.QueueInflightMethods = QueueInflightMethods = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVldWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY2xvdWQvcXVldWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQSw0Q0FBMEM7QUFDMUMsMkNBQXFEO0FBQ3JELHlDQUFnRDtBQUNoRCxnQ0FBNkQ7QUFFN0Q7O0dBRUc7QUFDVSxRQUFBLFNBQVMsR0FBRyxJQUFBLHNCQUFVLEVBQUMsYUFBYSxDQUFDLENBQUM7QUFFbkQ7O0dBRUc7QUFDVSxRQUFBLHlCQUF5QixHQUFHLENBQUMsQ0FBQztBQXlDM0M7Ozs7O0dBS0c7QUFDSCxNQUFhLEtBQU0sU0FBUSxjQUFRO0lBSWpDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsUUFBb0IsRUFBRTtRQUM5RCxJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssS0FBSyxFQUFFLENBQUM7WUFDekIsT0FBTyxjQUFRLENBQUMsZUFBZSxDQUFDLGlCQUFTLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMvRCxDQUFDO1FBRUQsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixVQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUM7UUFDOUIsVUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLEdBQUcsNkJBQTZCLENBQUM7UUFFMUQsS0FBSyxDQUFDO0lBQ1IsQ0FBQztJQUVEOzs7T0FHRztJQUNJLFdBQVcsQ0FDaEIsT0FBaUMsRUFDakMsS0FBK0I7UUFFL0IsT0FBTyxDQUFDO1FBQ1IsS0FBSyxDQUFDO1FBQ04sTUFBTSxJQUFJLDRCQUFtQixFQUFFLENBQUM7SUFDbEMsQ0FBQzs7QUE1Qkgsc0JBNkJDOzs7QUFrRUQ7OztHQUdHO0FBQ0gsSUFBWSxvQkFTWDtBQVRELFdBQVksb0JBQW9CO0lBQzlCLG1CQUFtQjtJQUNuQixxQ0FBYSxDQUFBO0lBQ2Isb0JBQW9CO0lBQ3BCLHVDQUFlLENBQUE7SUFDZix5QkFBeUI7SUFDekIsa0RBQTBCLENBQUE7SUFDMUIsa0JBQWtCO0lBQ2xCLG1DQUFXLENBQUE7QUFDYixDQUFDLEVBVFcsb0JBQW9CLG9DQUFwQixvQkFBb0IsUUFTL0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgRnVuY3Rpb24sIEZ1bmN0aW9uUHJvcHMgfSBmcm9tIFwiLi9mdW5jdGlvblwiO1xuaW1wb3J0IHsgZnFuRm9yVHlwZSB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IEFic3RyYWN0TWVtYmVyRXJyb3IgfSBmcm9tIFwiLi4vY29yZS9lcnJvcnNcIjtcbmltcG9ydCB7IElORkxJR0hUX1NZTUJPTCB9IGZyb20gXCIuLi9jb3JlL3R5cGVzXCI7XG5pbXBvcnQgeyBEdXJhdGlvbiwgSUluZmxpZ2h0LCBOb2RlLCBSZXNvdXJjZSB9IGZyb20gXCIuLi9zdGRcIjtcblxuLyoqXG4gKiBHbG9iYWwgaWRlbnRpZmllciBmb3IgYFF1ZXVlYC5cbiAqL1xuZXhwb3J0IGNvbnN0IFFVRVVFX0ZRTiA9IGZxbkZvclR5cGUoXCJjbG91ZC5RdWV1ZVwiKTtcblxuLyoqXG4gKiBEZWFkLWxldHRlciBxdWV1ZSBkZWZhdWx0IHJldHJpZXNcbiAqL1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfREVMSVZFUllfQVRURU1QVFMgPSAxO1xuXG4vKipcbiAqIERlYWQgbGV0dGVyIHF1ZXVlIG9wdGlvbnMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGVhZExldHRlclF1ZXVlUHJvcHMge1xuICAvKipcbiAgICogUXVldWUgdG8gcmVjZWl2ZSBtZXNzYWdlcyB0aGF0IGZhaWxlZCBwcm9jZXNzaW5nLlxuICAgKi9cbiAgcmVhZG9ubHkgcXVldWU6IFF1ZXVlO1xuICAvKipcbiAgICogTnVtYmVyIG9mIHRpbWVzIGEgbWVzc2FnZSB3aWxsIGJlIHByb2Nlc3NlZCBiZWZvcmUgYmVpbmdcbiAgICogc2VudCB0byB0aGUgZGVhZC1sZXR0ZXIgcXVldWUuXG4gICAqIEBkZWZhdWx0IDFcbiAgICovXG4gIHJlYWRvbmx5IG1heERlbGl2ZXJ5QXR0ZW1wdHM/OiBudW1iZXI7XG59XG5cbi8qKlxuICogT3B0aW9ucyBmb3IgYFF1ZXVlYC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBRdWV1ZVByb3BzIHtcbiAgLyoqXG4gICAqIEhvdyBsb25nIGEgcXVldWUncyBjb25zdW1lcnMgaGF2ZSB0byBwcm9jZXNzIGEgbWVzc2FnZS5cbiAgICogQGRlZmF1bHQgMzBzXG4gICAqL1xuICByZWFkb25seSB0aW1lb3V0PzogRHVyYXRpb247XG5cbiAgLyoqXG4gICAqIEhvdyBsb25nIGEgcXVldWUgcmV0YWlucyBhIG1lc3NhZ2UuXG4gICAqIEBkZWZhdWx0IDFoXG4gICAqL1xuICByZWFkb25seSByZXRlbnRpb25QZXJpb2Q/OiBEdXJhdGlvbjtcblxuICAvKipcbiAgICogQSBkZWFkLWxldHRlciBxdWV1ZS5cbiAgICogQGRlZmF1bHQgLSBubyBkZWFkIGxldHRlciBxdWV1ZVxuICAgKi9cbiAgcmVhZG9ubHkgZGxxPzogRGVhZExldHRlclF1ZXVlUHJvcHM7XG59XG5cbi8qKlxuICogQSBxdWV1ZS5cbiAqXG4gKiBAaW5mbGlnaHQgYEB3aW5nbGFuZy9zZGsuY2xvdWQuSVF1ZXVlQ2xpZW50YFxuICogQGFic3RyYWN0XG4gKi9cbmV4cG9ydCBjbGFzcyBRdWV1ZSBleHRlbmRzIFJlc291cmNlIHtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwdWJsaWMgW0lORkxJR0hUX1NZTUJPTF0/OiBJUXVldWVDbGllbnQ7XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFF1ZXVlUHJvcHMgPSB7fSkge1xuICAgIGlmIChuZXcudGFyZ2V0ID09PSBRdWV1ZSkge1xuICAgICAgcmV0dXJuIFJlc291cmNlLl9uZXdGcm9tRmFjdG9yeShRVUVVRV9GUU4sIHNjb3BlLCBpZCwgcHJvcHMpO1xuICAgIH1cblxuICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICBOb2RlLm9mKHRoaXMpLnRpdGxlID0gXCJRdWV1ZVwiO1xuICAgIE5vZGUub2YodGhpcykuZGVzY3JpcHRpb24gPSBcIkEgZGlzdHJpYnV0ZWQgbWVzc2FnZSBxdWV1ZVwiO1xuXG4gICAgcHJvcHM7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgZnVuY3Rpb24gdG8gY29uc3VtZSBtZXNzYWdlcyBmcm9tIHRoaXMgcXVldWUuXG4gICAqIEBhYnN0cmFjdFxuICAgKi9cbiAgcHVibGljIHNldENvbnN1bWVyKFxuICAgIGhhbmRsZXI6IElRdWV1ZVNldENvbnN1bWVySGFuZGxlcixcbiAgICBwcm9wcz86IFF1ZXVlU2V0Q29uc3VtZXJPcHRpb25zXG4gICk6IEZ1bmN0aW9uIHtcbiAgICBoYW5kbGVyO1xuICAgIHByb3BzO1xuICAgIHRocm93IG5ldyBBYnN0cmFjdE1lbWJlckVycm9yKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBPcHRpb25zIGZvciBRdWV1ZS5zZXRDb25zdW1lci5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBRdWV1ZVNldENvbnN1bWVyT3B0aW9ucyBleHRlbmRzIEZ1bmN0aW9uUHJvcHMge1xuICAvKipcbiAgICogVGhlIG1heGltdW0gbnVtYmVyIG9mIG1lc3NhZ2VzIHRvIHNlbmQgdG8gc3Vic2NyaWJlcnMgYXQgb25jZS5cbiAgICogQGRlZmF1bHQgMVxuICAgKi9cbiAgcmVhZG9ubHkgYmF0Y2hTaXplPzogbnVtYmVyO1xufVxuXG4vKipcbiAqIEluZmxpZ2h0IGludGVyZmFjZSBmb3IgYFF1ZXVlYC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJUXVldWVDbGllbnQge1xuICAvKipcbiAgICogUHVzaCBvbmUgb3IgbW9yZSBtZXNzYWdlcyB0byB0aGUgcXVldWUuXG4gICAqIEBwYXJhbSBtZXNzYWdlcyBQYXlsb2FkIHRvIHNlbmQgdG8gdGhlIHF1ZXVlLiBFYWNoIG1lc3NhZ2UgbXVzdCBiZSBub24tZW1wdHkuXG4gICAqIEBpbmZsaWdodFxuICAgKi9cbiAgcHVzaCguLi5tZXNzYWdlczogc3RyaW5nW10pOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBQdXJnZSBhbGwgb2YgdGhlIG1lc3NhZ2VzIGluIHRoZSBxdWV1ZS5cbiAgICogQGluZmxpZ2h0XG4gICAqL1xuICBwdXJnZSgpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZSB0aGUgYXBwcm94aW1hdGUgbnVtYmVyIG9mIG1lc3NhZ2VzIGluIHRoZSBxdWV1ZS5cbiAgICogQGluZmxpZ2h0XG4gICAqL1xuICBhcHByb3hTaXplKCk6IFByb21pc2U8bnVtYmVyPjtcblxuICAvKipcbiAgICogUG9wIGEgbWVzc2FnZSBmcm9tIHRoZSBxdWV1ZS5cbiAgICogQHJldHVybnMgVGhlIG1lc3NhZ2UsIG9yIGBuaWxgIGlmIHRoZSBxdWV1ZSBpcyBlbXB0eS5cbiAgICogQGluZmxpZ2h0XG4gICAqL1xuICBwb3AoKTogUHJvbWlzZTxzdHJpbmcgfCB1bmRlZmluZWQ+O1xufVxuXG4vKipcbiAqIEEgcmVzb3VyY2Ugd2l0aCBhbiBpbmZsaWdodCBcImhhbmRsZVwiIG1ldGhvZCB0aGF0IGNhbiBiZSBwYXNzZWQgdG9cbiAqIGBRdWV1ZS5zZXRDb25zdW1lcmAuXG4gKlxuICogQGluZmxpZ2h0IGBAd2luZ2xhbmcvc2RrLmNsb3VkLklRdWV1ZVNldENvbnN1bWVySGFuZGxlckNsaWVudGBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJUXVldWVTZXRDb25zdW1lckhhbmRsZXIgZXh0ZW5kcyBJSW5mbGlnaHQge1xuICAvKiogQGludGVybmFsICovXG4gIFtJTkZMSUdIVF9TWU1CT0xdPzogSVF1ZXVlU2V0Q29uc3VtZXJIYW5kbGVyQ2xpZW50W1wiaGFuZGxlXCJdO1xufVxuXG4vKipcbiAqIEluZmxpZ2h0IGNsaWVudCBmb3IgYElRdWV1ZVNldENvbnN1bWVySGFuZGxlcmAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVF1ZXVlU2V0Q29uc3VtZXJIYW5kbGVyQ2xpZW50IHtcbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlbiBhIG1lc3NhZ2UgaXMgcmVjZWl2ZWQgZnJvbSB0aGUgcXVldWUuXG4gICAqIEBpbmZsaWdodFxuICAgKi9cbiAgaGFuZGxlKG1lc3NhZ2U6IHN0cmluZyk6IFByb21pc2U8dm9pZD47XG59XG5cbi8qKlxuICogTGlzdCBvZiBpbmZsaWdodCBvcGVyYXRpb25zIGF2YWlsYWJsZSBmb3IgYFF1ZXVlYC5cbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZW51bSBRdWV1ZUluZmxpZ2h0TWV0aG9kcyB7XG4gIC8qKiBgUXVldWUucHVzaGAgKi9cbiAgUFVTSCA9IFwicHVzaFwiLFxuICAvKiogYFF1ZXVlLnB1cmdlYCAqL1xuICBQVVJHRSA9IFwicHVyZ2VcIixcbiAgLyoqIGBRdWV1ZS5hcHByb3hTaXplYCAqL1xuICBBUFBST1hfU0laRSA9IFwiYXBwcm94U2l6ZVwiLFxuICAvKiogYFF1ZXVlLnBvcGAgKi9cbiAgUE9QID0gXCJwb3BcIixcbn1cbiJdfQ==