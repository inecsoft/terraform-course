"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Util = exports.HttpMethod = exports.RequestRedirect = exports.RequestCache = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const url_1 = require("url");
const core_1 = require("../core");
/**
 * The cache mode of the request.
 * It controls how a request will interact with the system's HTTP cache.
 */
var RequestCache;
(function (RequestCache) {
    /**
     * The runtime environment looks for a matching request in its HTTP cache.
     * * If there is a match and it is fresh, it will be returned from the cache.
     * * If there is a match but it is stale, the runtime environment will make a conditional request to the remote server.
     * * If the server indicates that the resource has not changed, it will be returned from the cache.
     * * Otherwise the resource will be downloaded from the server and the cache will be updated.
     * * If there is no match, the runtime environment will make a normal request, and will update the cache with the downloaded resource.
     */
    RequestCache["DEFAULT"] = "default";
    /**
     * The runtime environment fetches the resource from the remote server without first looking in the cache,
     * and will not update the cache with the downloaded resource.
     */
    RequestCache["NO_STORE"] = "no-store";
    /**
     * The runtime environment fetches the resource from the remote server without first looking in the cache,
     * but then will update the cache with the downloaded resource.
     */
    RequestCache["RELOAD"] = "reload";
    /**
     * The runtime environment looks for a matching request in its HTTP cache.
     * * If there is a match, fresh or stale, the runtime environment will make a conditional request to the remote server.
     * * If the server indicates that the resource has not changed, it will be returned from the cache. Otherwise the resource will be downloaded from the server and the cache will be updated.
     * * If there is no match, the runtime environment will make a normal request, and will update the cache with the downloaded resource.
     */
    RequestCache["NO_CACHE"] = "no-cache";
    /**
     * The runtime environment looks for a matching request in its HTTP cache.
     * * If there is a match, fresh or stale, it will be returned from the cache.
     * * If there is no match, the runtime environment will make a normal request, and will update the cache with the downloaded resource.
     */
    RequestCache["FORCE_CACHE"] = "force-cache";
})(RequestCache || (exports.RequestCache = RequestCache = {}));
/**
 * The redirect read-only property that contains the mode for how redirects are handled.
 */
var RequestRedirect;
(function (RequestRedirect) {
    /**
     * Do not follow redirects automatically. The `Location` response header includes the redirect
     * target.
     */
    RequestRedirect["MANUAL"] = "manual";
    /**
     * Follow all redirects incurred when fetching a resource.
     */
    RequestRedirect["FOLLOW"] = "follow";
    /**
     * Return a network error when a request is met with a redirect.
     */
    RequestRedirect["ERROR"] = "error";
})(RequestRedirect || (exports.RequestRedirect = RequestRedirect = {}));
/**
 * The request's method
 */
var HttpMethod;
(function (HttpMethod) {
    /**
     * GET
     */
    HttpMethod["GET"] = "GET";
    /**
     * PUT
     */
    HttpMethod["PUT"] = "PUT";
    /**
     * DELETE
     */
    HttpMethod["DELETE"] = "DELETE";
    /**
     * PATCH
     */
    HttpMethod["PATCH"] = "PATCH";
    /**
     * POST
     */
    HttpMethod["POST"] = "POST";
    /**
     * OPTIONS
     */
    HttpMethod["OPTIONS"] = "OPTIONS";
    /**
     * HEAD
     */
    HttpMethod["HEAD"] = "HEAD";
})(HttpMethod || (exports.HttpMethod = HttpMethod = {}));
/**
 * Default options to attach to any request
 */
const defaultOptions = {
    method: HttpMethod.GET,
    headers: {},
    cache: RequestCache.DEFAULT,
    redirect: RequestRedirect.FOLLOW,
};
/**
 * The Http class is used for calling different HTTP methods and requesting and sending information online,
 *  as well as testing public accessible resources
 * @inflight
 */
class Util {
    /**
     * @internal
     */
    static _toInflightType() {
        return core_1.InflightClient.forType(__filename, this.name);
    }
    /**
     * Executes a HTTP request to a specified URL and provides a formatted response.
     * This method allows various HTTP methods based on the provided options.
     * @throws Only throws if there is a networking error
     * @param url The target URL for the request.
     * @param options Optional parameters for customizing the HTTP request.
     * @inflight
     * @returns the formatted response of the call
     */
    static async fetch(url, options) {
        const res = await fetch(url, { ...defaultOptions, ...options });
        return this._formatResponse(res);
    }
    /**
     * Executes a GET request to a specified URL and provides a formatted response.
     * @param url The target URL for the GET request.
     * @param options Optional parameters for customizing the GET request.
     * @inflight
     * @returns the formatted response of the call
     */
    static async get(url, options) {
        return this.fetch(url, {
            ...options,
            method: HttpMethod.GET,
        });
    }
    /**
     * Executes a POST request to a specified URL and provides a formatted response.
     * @param url The target URL for the POST request.
     * @param options Optional parameters for customizing the POST request.
     * @inflight
     * @returns the formatted response of the call
     */
    static async post(url, options) {
        return this.fetch(url, {
            ...options,
            method: HttpMethod.POST,
        });
    }
    /**
     * Executes a PUT request to a specified URL and provides a formatted response.
     * @param url The target URL for the PUT request.
     * @param options ptional parameters for customizing the PUT request.
     * @inflight
     * @returns the formatted response of the call
     */
    static async put(url, options) {
        return this.fetch(url, {
            ...options,
            method: HttpMethod.PUT,
        });
    }
    /**
     * Executes a PATCH request to a specified URL and provides a formatted response.
     * @param url The target URL for the PATCH request.
     * @param options Optional parameters for customizing the PATCH request.
     * @inflight
     * @returns the formatted response of the call
     */
    static async patch(url, options) {
        return this.fetch(url, {
            ...options,
            method: HttpMethod.PATCH,
        });
    }
    /**
     * Executes a DELETE request to a specified URL and provides a formatted response.
     * @param url The target URL for the DELETE request.
     * @param options  Optional parameters for customizing the DELETE request.
     * @inflight
     * @returns the formatted response of the call
     */
    static async delete(url, options) {
        return this.fetch(url, {
            ...options,
            method: HttpMethod.DELETE,
        });
    }
    /**
     * Parses the input URL String using WHATWG URL API and returns an URL Struct.
     * @param urlString The URL String to be parsed.
     * @throws Will throw an error if the input String is not a valid URL.
     * @inflight
     * @returns An URL Struct.
     */
    static parseUrl(urlString) {
        try {
            const nodeUrl = new url_1.URL(urlString);
            return {
                href: nodeUrl.href,
                protocol: nodeUrl.protocol,
                host: nodeUrl.host,
                hostname: nodeUrl.hostname,
                port: nodeUrl.port,
                pathname: nodeUrl.pathname,
                search: nodeUrl.search,
                hash: nodeUrl.hash,
                origin: nodeUrl.origin,
                username: nodeUrl.username,
                password: nodeUrl.password,
            };
        }
        catch (error) {
            throw new Error(`Invalid URL: ${urlString}`);
        }
    }
    /**
     * Serializes an URL Struct to a String.
     * @param url The URL Struct to be formatted.
     * @throws Will throw an error if the input URL has invalid fields.
     * @inflight
     * @returns A formatted URL String.
     */
    static formatUrl(url, options) {
        try {
            const nodeUrl = new url_1.URL(url.href);
            return (0, url_1.format)(nodeUrl, options);
        }
        catch (error) {
            if (error instanceof Error) {
                throw new Error(`Unable to format URL Struct: ${error.message}`);
            }
            else {
                throw new Error("Unable to format URL Struct: An unknown error occurred");
            }
        }
    }
    static async _formatResponse(response) {
        // convert Headers object into a plain JS object
        const headers = {};
        response.headers?.forEach((val, key) => {
            headers[key] = val;
        });
        return {
            status: response.status,
            url: response.url,
            ok: response.ok,
            headers: headers,
            body: await response.text(),
        };
    }
    constructor() { }
}
exports.Util = Util;
_a = JSII_RTTI_SYMBOL_1;
Util[_a] = { fqn: "@winglang/sdk.http.Util", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,