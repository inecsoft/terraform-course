"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CdktfApp = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const cdktf = __importStar(require("cdktf"));
const safe_stable_stringify_1 = __importDefault(require("safe-stable-stringify"));
const tokens_1 = require("./tokens");
const core_1 = require("../core");
const tokens_2 = require("../core/tokens");
const tree_1 = require("../core/tree");
const TERRAFORM_STACK_NAME = "root";
/**
 * An app that knows how to synthesize constructs into Terraform configuration
 * using cdktf. No polycon factory or Terraform providers are included.
 */
class CdktfApp extends core_1.App {
    constructor(props) {
        const outdir = props.outdir ?? ".";
        const cdktfOutdir = (0, path_1.join)(outdir, ".tmp.cdktf.out");
        (0, fs_1.mkdirSync)(cdktfOutdir, { recursive: true });
        const cdktfApp = new cdktf.App({ outdir: cdktfOutdir });
        const cdktfStack = new cdktf.TerraformStack(cdktfApp, TERRAFORM_STACK_NAME);
        super(cdktfStack, props.rootId ?? "Default", props);
        // TODO: allow the user to specify custom backends
        // https://github.com/winglang/wing/issues/2003
        new cdktf.LocalBackend(cdktfStack, {
            path: "./terraform.tfstate",
        });
        this.outdir = outdir;
        (0, tokens_2.registerTokenResolver)(new tokens_1.CdkTfTokens());
        this._synthHooks = props.synthHooks;
        // HACK: monkey patch the `new` method on the cdktf app (which is the root of the tree) so that
        // we can intercept the creation of resources and replace them with our own.
        cdktfApp.new = (fqn, ctor, scope, id, ...args) => this.new(fqn, ctor, scope, id, ...args);
        cdktfApp.newAbstract = (fqn, scope, id, ...args) => this.newAbstract(fqn, scope, id, ...args);
        cdktfApp.typeForFqn = (fqn) => this.typeForFqn(fqn);
        this.outdir = outdir;
        this.cdktfApp = cdktfApp;
        this.cdktfStack = cdktfStack;
        this.terraformManifestPath = (0, path_1.join)(this.outdir, "main.tf.json");
        this.synthed = false;
    }
    /**
     * Synthesize the app into Terraform configuration in a `cdktf.out` directory.
     *
     * This method returns a cleaned snapshot of the resulting Terraform manifest
     * for unit testing.
     */
    synth() {
        if (this.synthed) {
            return this.synthedOutput;
        }
        // call preSynthesize() on every construct in the tree
        (0, core_1.preSynthesizeAllConstructs)(this);
        if (this._synthHooks?.preSynthesize) {
            this._synthHooks.preSynthesize.forEach((hook) => hook(this));
        }
        // synthesize Terraform files in `outdir/.tmp.cdktf.out/stacks/root`
        this.cdktfApp.synth();
        // move Terraform files from `outdir/.tmp.cdktf.out/stacks/root` to `outdir`
        this.moveCdktfArtifactsToOutdir();
        // rename `outdir/cdk.tf.json` to `outdir/main.tf.json`
        (0, fs_1.renameSync)((0, path_1.join)(this.outdir, "cdk.tf.json"), (0, path_1.join)(this.outdir, `main.tf.json`));
        // delete `outdir/.tmp.cdktf.out`
        (0, fs_1.rmSync)(this.cdktfApp.outdir, { recursive: true, force: true });
        // write `outdir/tree.json`
        (0, tree_1.synthesizeTree)(this, this.outdir);
        // write `outdir/connections.json`
        core_1.Connections.of(this).synth(this.outdir);
        // return a cleaned snapshot of the resulting Terraform manifest for unit testing
        const tfConfig = this.cdktfStack.toTerraform();
        const cleaned = cleanTerraformConfig(tfConfig);
        if (this._synthHooks?.postSynthesize) {
            this._synthHooks.postSynthesize.forEach((hook) => {
                (0, fs_1.writeFileSync)((0, path_1.resolve)(`${this.outdir}/main.tf.json`), JSON.stringify(hook(tfConfig), null, 2));
            });
        }
        if (this._synthHooks?.validate) {
            this._synthHooks.validate.forEach((hook) => hook(tfConfig));
        }
        this.synthed = true;
        this.synthedOutput = (0, safe_stable_stringify_1.default)(cleaned, null, 2) ?? "";
        return this.synthedOutput;
    }
    /**
     * Move files from `outdir/cdktf.out/stacks/root` to `outdir`.
     */
    moveCdktfArtifactsToOutdir() {
        const directoriesToMove = ["assets"];
        const cdktfOutdir = this.cdktfApp.outdir;
        const cdktfStackDir = (0, path_1.join)(cdktfOutdir, this.cdktfApp.manifest.stacks[TERRAFORM_STACK_NAME].workingDirectory);
        const files = (0, fs_1.readdirSync)(cdktfStackDir, { withFileTypes: true });
        for (const file of files) {
            if (file.isFile() || directoriesToMove.includes(file.name)) {
                const source = (0, path_1.join)(cdktfStackDir, file.name);
                const destination = (0, path_1.join)(this.outdir, file.name);
                // If the file is a directory we need to delete contents of previous synthesis
                // or rename will fail
                if ((0, fs_1.existsSync)(destination)) {
                    (0, fs_1.rmSync)(destination, { recursive: true });
                }
                (0, fs_1.renameSync)(source, destination);
            }
        }
    }
}
exports.CdktfApp = CdktfApp;
/**
 * Return a cleaned Terraform template for unit testing
 * https://github.com/hashicorp/terraform-cdk/blob/55009f99f7503e5de2bacb1766ab51547821e6be/packages/cdktf/lib/testing/index.ts#L109
 */
function cleanTerraformConfig(template) {
    function removeMetadata(item) {
        if (item !== null && typeof item === "object") {
            if (Array.isArray(item)) {
                return item.map(removeMetadata);
            }
            const cleanedItem = Object.entries(item)
                // order alphabetically
                .sort(([a], [b]) => a.localeCompare(b))
                .reduce((acc, [key, value]) => ({
                ...acc,
                [key]: removeMetadata(value),
            }), {});
            // Remove metadata
            delete cleanedItem["//"];
            return cleanedItem;
        }
        return item;
    }
    const cleaned = removeMetadata(template);
    cleaned.terraform = undefined;
    cleaned.provider = undefined;
    return cleaned;
}
//# sourceMappingURL=data:application/json;base64,