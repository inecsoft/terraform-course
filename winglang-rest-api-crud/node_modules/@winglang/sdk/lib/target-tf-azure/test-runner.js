"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestRunner = void 0;
const terraform_output_1 = require("cdktf/lib/terraform-output");
const tokens_1 = require("cdktf/lib/tokens");
const function_1 = require("./function");
const core = __importStar(require("../core"));
const std = __importStar(require("../std"));
const OUTPUT_TEST_RUNNER_FUNCTION_IDENTIFIERS = "WING_TEST_RUNNER_FUNCTION_IDENTIFIERS";
/**
 * Tf-Azure implementation of `cloud.TestRunner`.
 *
 * @inflight `@winglang/sdk.cloud.ITestRunnerClient`
 */
class TestRunner extends std.TestRunner {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        // This output is created so the CLI's `wing test` command can obtain a list
        // of all names of test functions by running `terraform output`.
        const output = new terraform_output_1.TerraformOutput(this, "TestFunctionIdentifiers", {
            value: tokens_1.Lazy.stringValue({
                produce: () => {
                    return JSON.stringify([
                        ...this.getTestFunctionIdentifiers().entries(),
                    ]);
                },
            }),
        });
        output.overrideLogicalId(OUTPUT_TEST_RUNNER_FUNCTION_IDENTIFIERS);
    }
    onLift(host, ops) {
        if (!(host instanceof function_1.Function)) {
            throw new Error("TestRunner can only be bound by tfazure.Function for now");
        }
        const testFunctions = this.getTestFunctionIdentifiers();
        host.addEnvironment(this.envTestFunctionIdentifiers(), JSON.stringify([...testFunctions.entries()]));
        super.onLift(host, ops);
    }
    /** @internal */
    _preSynthesize() {
        // add a dependency on each test function
        for (const test of this.findTests()) {
            if (test._fn) {
                this.node.addDependency(test._fn);
            }
        }
        super._preSynthesize();
    }
    getTestFunctionIdentifiers() {
        const arns = new Map();
        for (const test of this.findTests()) {
            if (test._fn) {
                if (!(test._fn instanceof function_1.Function)) {
                    throw new Error(`Unsupported test function type, ${test._fn.node.path} was not a tfazure.Function`);
                }
                arns.set(test.node.path, test._fn.name);
            }
        }
        return arns;
    }
    /** @internal */
    _toInflight() {
        return core.InflightClient.for(__dirname, __filename, "TestRunnerClient", [
            `process.env["${this.envTestFunctionIdentifiers()}"]`,
        ]);
    }
    envTestFunctionIdentifiers() {
        return `TEST_RUNNER_FUNCTIONS_${this.node.addr.slice(-8)}`;
    }
}
exports.TestRunner = TestRunner;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC1ydW5uZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGFyZ2V0LXRmLWF6dXJlL3Rlc3QtcnVubmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsaUVBQTZEO0FBQzdELDZDQUF3QztBQUV4Qyx5Q0FBdUQ7QUFDdkQsOENBQWdDO0FBQ2hDLDRDQUE4QjtBQUU5QixNQUFNLHVDQUF1QyxHQUMzQyx1Q0FBdUMsQ0FBQztBQUUxQzs7OztHQUlHO0FBQ0gsTUFBYSxVQUFXLFNBQVEsR0FBRyxDQUFDLFVBQVU7SUFDNUMsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxRQUE2QixFQUFFO1FBQ3ZFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3hCLDRFQUE0RTtRQUM1RSxnRUFBZ0U7UUFDaEUsTUFBTSxNQUFNLEdBQUcsSUFBSSxrQ0FBZSxDQUFDLElBQUksRUFBRSx5QkFBeUIsRUFBRTtZQUNsRSxLQUFLLEVBQUUsYUFBSSxDQUFDLFdBQVcsQ0FBQztnQkFDdEIsT0FBTyxFQUFFLEdBQUcsRUFBRTtvQkFDWixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7d0JBQ3BCLEdBQUcsSUFBSSxDQUFDLDBCQUEwQixFQUFFLENBQUMsT0FBTyxFQUFFO3FCQUMvQyxDQUFDLENBQUM7Z0JBQ0wsQ0FBQzthQUNGLENBQUM7U0FDSCxDQUFDLENBQUM7UUFFSCxNQUFNLENBQUMsaUJBQWlCLENBQUMsdUNBQXVDLENBQUMsQ0FBQztJQUNwRSxDQUFDO0lBRU0sTUFBTSxDQUFDLElBQXVCLEVBQUUsR0FBYTtRQUNsRCxJQUFJLENBQUMsQ0FBQyxJQUFJLFlBQVksbUJBQWEsQ0FBQyxFQUFFLENBQUM7WUFDckMsTUFBTSxJQUFJLEtBQUssQ0FDYiwwREFBMEQsQ0FDM0QsQ0FBQztRQUNKLENBQUM7UUFFRCxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsQ0FBQztRQUN4RCxJQUFJLENBQUMsY0FBYyxDQUNqQixJQUFJLENBQUMsMEJBQTBCLEVBQUUsRUFDakMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsYUFBYSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FDN0MsQ0FBQztRQUVGLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFRCxnQkFBZ0I7SUFDVCxjQUFjO1FBQ25CLHlDQUF5QztRQUN6QyxLQUFLLE1BQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDO1lBQ3BDLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO2dCQUNiLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNwQyxDQUFDO1FBQ0gsQ0FBQztRQUVELEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRU8sMEJBQTBCO1FBQ2hDLE1BQU0sSUFBSSxHQUFHLElBQUksR0FBRyxFQUFrQixDQUFDO1FBQ3ZDLEtBQUssTUFBTSxJQUFJLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUM7WUFDcEMsSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7Z0JBQ2IsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsWUFBWSxtQkFBYSxDQUFDLEVBQUUsQ0FBQztvQkFDekMsTUFBTSxJQUFJLEtBQUssQ0FDYixtQ0FBbUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSw2QkFBNkIsQ0FDbkYsQ0FBQztnQkFDSixDQUFDO2dCQUNELElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUcsSUFBSSxDQUFDLEdBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDN0QsQ0FBQztRQUNILENBQUM7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxnQkFBZ0I7SUFDVCxXQUFXO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxrQkFBa0IsRUFBRTtZQUN4RSxnQkFBZ0IsSUFBSSxDQUFDLDBCQUEwQixFQUFFLElBQUk7U0FDdEQsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLDBCQUEwQjtRQUNoQyxPQUFPLHlCQUF5QixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzdELENBQUM7Q0FDRjtBQXZFRCxnQ0F1RUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZXJyYWZvcm1PdXRwdXQgfSBmcm9tIFwiY2RrdGYvbGliL3RlcnJhZm9ybS1vdXRwdXRcIjtcbmltcG9ydCB7IExhenkgfSBmcm9tIFwiY2RrdGYvbGliL3Rva2Vuc1wiO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCB7IEZ1bmN0aW9uIGFzIEF6dXJlRnVuY3Rpb24gfSBmcm9tIFwiLi9mdW5jdGlvblwiO1xuaW1wb3J0ICogYXMgY29yZSBmcm9tIFwiLi4vY29yZVwiO1xuaW1wb3J0ICogYXMgc3RkIGZyb20gXCIuLi9zdGRcIjtcblxuY29uc3QgT1VUUFVUX1RFU1RfUlVOTkVSX0ZVTkNUSU9OX0lERU5USUZJRVJTID1cbiAgXCJXSU5HX1RFU1RfUlVOTkVSX0ZVTkNUSU9OX0lERU5USUZJRVJTXCI7XG5cbi8qKlxuICogVGYtQXp1cmUgaW1wbGVtZW50YXRpb24gb2YgYGNsb3VkLlRlc3RSdW5uZXJgLlxuICpcbiAqIEBpbmZsaWdodCBgQHdpbmdsYW5nL3Nkay5jbG91ZC5JVGVzdFJ1bm5lckNsaWVudGBcbiAqL1xuZXhwb3J0IGNsYXNzIFRlc3RSdW5uZXIgZXh0ZW5kcyBzdGQuVGVzdFJ1bm5lciB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBzdGQuVGVzdFJ1bm5lclByb3BzID0ge30pIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcbiAgICAvLyBUaGlzIG91dHB1dCBpcyBjcmVhdGVkIHNvIHRoZSBDTEkncyBgd2luZyB0ZXN0YCBjb21tYW5kIGNhbiBvYnRhaW4gYSBsaXN0XG4gICAgLy8gb2YgYWxsIG5hbWVzIG9mIHRlc3QgZnVuY3Rpb25zIGJ5IHJ1bm5pbmcgYHRlcnJhZm9ybSBvdXRwdXRgLlxuICAgIGNvbnN0IG91dHB1dCA9IG5ldyBUZXJyYWZvcm1PdXRwdXQodGhpcywgXCJUZXN0RnVuY3Rpb25JZGVudGlmaWVyc1wiLCB7XG4gICAgICB2YWx1ZTogTGF6eS5zdHJpbmdWYWx1ZSh7XG4gICAgICAgIHByb2R1Y2U6ICgpID0+IHtcbiAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoW1xuICAgICAgICAgICAgLi4udGhpcy5nZXRUZXN0RnVuY3Rpb25JZGVudGlmaWVycygpLmVudHJpZXMoKSxcbiAgICAgICAgICBdKTtcbiAgICAgICAgfSxcbiAgICAgIH0pLFxuICAgIH0pO1xuXG4gICAgb3V0cHV0Lm92ZXJyaWRlTG9naWNhbElkKE9VVFBVVF9URVNUX1JVTk5FUl9GVU5DVElPTl9JREVOVElGSUVSUyk7XG4gIH1cblxuICBwdWJsaWMgb25MaWZ0KGhvc3Q6IHN0ZC5JSW5mbGlnaHRIb3N0LCBvcHM6IHN0cmluZ1tdKTogdm9pZCB7XG4gICAgaWYgKCEoaG9zdCBpbnN0YW5jZW9mIEF6dXJlRnVuY3Rpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIFwiVGVzdFJ1bm5lciBjYW4gb25seSBiZSBib3VuZCBieSB0ZmF6dXJlLkZ1bmN0aW9uIGZvciBub3dcIlxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCB0ZXN0RnVuY3Rpb25zID0gdGhpcy5nZXRUZXN0RnVuY3Rpb25JZGVudGlmaWVycygpO1xuICAgIGhvc3QuYWRkRW52aXJvbm1lbnQoXG4gICAgICB0aGlzLmVudlRlc3RGdW5jdGlvbklkZW50aWZpZXJzKCksXG4gICAgICBKU09OLnN0cmluZ2lmeShbLi4udGVzdEZ1bmN0aW9ucy5lbnRyaWVzKCldKVxuICAgICk7XG5cbiAgICBzdXBlci5vbkxpZnQoaG9zdCwgb3BzKTtcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHVibGljIF9wcmVTeW50aGVzaXplKCk6IHZvaWQge1xuICAgIC8vIGFkZCBhIGRlcGVuZGVuY3kgb24gZWFjaCB0ZXN0IGZ1bmN0aW9uXG4gICAgZm9yIChjb25zdCB0ZXN0IG9mIHRoaXMuZmluZFRlc3RzKCkpIHtcbiAgICAgIGlmICh0ZXN0Ll9mbikge1xuICAgICAgICB0aGlzLm5vZGUuYWRkRGVwZW5kZW5jeSh0ZXN0Ll9mbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3VwZXIuX3ByZVN5bnRoZXNpemUoKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0VGVzdEZ1bmN0aW9uSWRlbnRpZmllcnMoKTogTWFwPHN0cmluZywgc3RyaW5nPiB7XG4gICAgY29uc3QgYXJucyA9IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmc+KCk7XG4gICAgZm9yIChjb25zdCB0ZXN0IG9mIHRoaXMuZmluZFRlc3RzKCkpIHtcbiAgICAgIGlmICh0ZXN0Ll9mbikge1xuICAgICAgICBpZiAoISh0ZXN0Ll9mbiBpbnN0YW5jZW9mIEF6dXJlRnVuY3Rpb24pKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgYFVuc3VwcG9ydGVkIHRlc3QgZnVuY3Rpb24gdHlwZSwgJHt0ZXN0Ll9mbi5ub2RlLnBhdGh9IHdhcyBub3QgYSB0ZmF6dXJlLkZ1bmN0aW9uYFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgYXJucy5zZXQodGVzdC5ub2RlLnBhdGgsICh0ZXN0Ll9mbiBhcyBBenVyZUZ1bmN0aW9uKS5uYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFybnM7XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIHB1YmxpYyBfdG9JbmZsaWdodCgpOiBzdHJpbmcge1xuICAgIHJldHVybiBjb3JlLkluZmxpZ2h0Q2xpZW50LmZvcihfX2Rpcm5hbWUsIF9fZmlsZW5hbWUsIFwiVGVzdFJ1bm5lckNsaWVudFwiLCBbXG4gICAgICBgcHJvY2Vzcy5lbnZbXCIke3RoaXMuZW52VGVzdEZ1bmN0aW9uSWRlbnRpZmllcnMoKX1cIl1gLFxuICAgIF0pO1xuICB9XG5cbiAgcHJpdmF0ZSBlbnZUZXN0RnVuY3Rpb25JZGVudGlmaWVycygpOiBzdHJpbmcge1xuICAgIHJldHVybiBgVEVTVF9SVU5ORVJfRlVOQ1RJT05TXyR7dGhpcy5ub2RlLmFkZHIuc2xpY2UoLTgpfWA7XG4gIH1cbn1cbiJdfQ==