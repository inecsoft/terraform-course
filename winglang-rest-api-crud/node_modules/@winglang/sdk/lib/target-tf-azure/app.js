"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.App = void 0;
const bucket_1 = require("./bucket");
const counter_1 = require("./counter");
const function_1 = require("./function");
const internal_1 = require("./internal");
const test_runner_1 = require("./test-runner");
const application_insights_1 = require("../.gen/providers/azurerm/application-insights");
const log_analytics_workspace_1 = require("../.gen/providers/azurerm/log-analytics-workspace");
const provider_1 = require("../.gen/providers/azurerm/provider");
const resource_group_1 = require("../.gen/providers/azurerm/resource-group");
const service_plan_1 = require("../.gen/providers/azurerm/service-plan");
const storage_account_1 = require("../.gen/providers/azurerm/storage-account");
const cloud_1 = require("../cloud");
const resource_names_1 = require("../shared/resource-names");
const app_1 = require("../shared-tf/app");
const std_1 = require("../std");
/**
 * ResourceGroup names are limited to 90 characters.
 * You can use alphanumeric characters, hyphens, and underscores,
 * parentheses and periods.
 */
const RESOURCEGROUP_NAME_OPTS = {
    maxLen: 90,
    disallowedRegex: /([^a-zA-Z0-9\-\_\(\)\.]+)/g,
};
/**
 * Configuration options for generating a name for Azure Log Analytics Workspace.
 *
 * - The workspace name must be between 4 and 63 characters.
 * - The workspace name can contain only letters, numbers, and hyphens (`"-"`).
 * - The hyphen (`"-"`) should not be the first or the last character in the name.
 */
const LOG_ANALYTICS_WORKSPACE_NAME_OPTS = {
    maxLen: 63,
    disallowedRegex: /([^a-zA-Z0-9\-]+)/g,
};
/**
 * StorageAccount names are limited to 24 characters.
 * You can only use alphanumeric characters.
 */
const STORAGEACCOUNT_NAME_OPTS = {
    maxLen: 24,
    case: resource_names_1.CaseConventions.LOWERCASE,
    disallowedRegex: /([^a-z0-9]+)/g,
    sep: "",
};
const SERVICEPLAN_NAME_OPTS = {
    maxLen: 50,
    disallowedRegex: /([^a-zA-Z0-9\-]+)/g,
};
/**
 * An app that knows how to synthesize constructs into a Terraform configuration
 * for Azure resources.
 */
class App extends app_1.CdktfApp {
    constructor(props) {
        super(props);
        this._target = "tf-azure";
        this.location = props.location ?? process.env.AZURE_LOCATION;
        test_runner_1.TestRunner._createTree(this, props.rootConstruct);
        // Using env variable for location is work around until we are
        // able to implement https://github.com/winglang/wing/issues/493 (policy as infrastructure)
        if (this.location === undefined) {
            throw new Error("Location must be specified in the AZURE_LOCATION environment variable");
        }
        new provider_1.AzurermProvider(this, "azure", {
            features: {
                // To be able to run terraform destroy during tests, and in a reasonable time
                resourceGroup: { preventDeletionIfContainsResources: false },
            },
        });
        Object.defineProperty(this, internal_1.APP_AZURE_TF_SYMBOL, {
            value: this,
            enumerable: false,
            writable: false,
        });
    }
    get logAnalyticsWorkspace() {
        if (!this._logAnalyticsWorkspace) {
            this._logAnalyticsWorkspace = new log_analytics_workspace_1.LogAnalyticsWorkspace(this, "LogAnalyticsWorkspace", {
                location: this.location,
                resourceGroupName: this.resourceGroup.name,
                name: resource_names_1.ResourceNames.generateName(this, LOG_ANALYTICS_WORKSPACE_NAME_OPTS),
            });
        }
        return this._logAnalyticsWorkspace;
    }
    get applicationInsights() {
        if (!this._applicationInsights) {
            this._applicationInsights = new application_insights_1.ApplicationInsights(this, `ApplicationInsights`, {
                name: `application-insights`,
                resourceGroupName: this.resourceGroup.name,
                location: this.resourceGroup.location,
                applicationType: "web",
                workspaceId: this.logAnalyticsWorkspace.id,
            });
        }
        return this._applicationInsights;
    }
    /**
     * Get resource group using lazy initialization
     */
    get resourceGroup() {
        if (!this._resourceGroup) {
            this._resourceGroup = new resource_group_1.ResourceGroup(this, "ResourceGroup", {
                location: this.location,
                name: resource_names_1.ResourceNames.generateName(this, RESOURCEGROUP_NAME_OPTS),
            });
        }
        return this._resourceGroup;
    }
    /**
     * Get storage account using lazy initialization
     */
    get storageAccount() {
        if (!this._storageAccount) {
            this._storageAccount = new storage_account_1.StorageAccount(this, "StorageAccount", {
                name: resource_names_1.ResourceNames.generateName(this, STORAGEACCOUNT_NAME_OPTS),
                resourceGroupName: this.resourceGroup.name,
                location: this.resourceGroup.location,
                accountTier: "Standard",
                accountReplicationType: "LRS",
            });
        }
        return this._storageAccount;
    }
    /**
     * Get service plan using lazy initialization
     */
    get servicePlan() {
        if (!this._servicePlan) {
            this._servicePlan = new service_plan_1.ServicePlan(this, "ServicePlan", {
                name: resource_names_1.ResourceNames.generateName(this, SERVICEPLAN_NAME_OPTS),
                resourceGroupName: this.resourceGroup.name,
                location: this.resourceGroup.location,
                osType: "Linux",
                // Dynamic Stock Keeping Unit (SKU)
                // https://learn.microsoft.com/en-us/partner-center/developer/product-resources#sku
                skuName: "Y1",
            });
        }
        return this._servicePlan;
    }
    typeForFqn(fqn) {
        switch (fqn) {
            case std_1.TEST_RUNNER_FQN:
                return test_runner_1.TestRunner;
            case cloud_1.FUNCTION_FQN:
                return function_1.Function;
            case cloud_1.BUCKET_FQN:
                return bucket_1.Bucket;
            case cloud_1.COUNTER_FQN:
                return counter_1.Counter;
        }
        return undefined;
    }
}
exports.App = App;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RhcmdldC10Zi1henVyZS9hcHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEscUNBQWtDO0FBQ2xDLHVDQUFvQztBQUNwQyx5Q0FBc0M7QUFDdEMseUNBQWlEO0FBQ2pELCtDQUEyQztBQUMzQyx5RkFBcUY7QUFDckYsK0ZBQTBGO0FBQzFGLGlFQUFxRTtBQUNyRSw2RUFBeUU7QUFDekUseUVBQXFFO0FBQ3JFLCtFQUEyRTtBQUMzRSxvQ0FBaUU7QUFFakUsNkRBSWtDO0FBQ2xDLDBDQUE0QztBQUM1QyxnQ0FBeUM7QUFVekM7Ozs7R0FJRztBQUNILE1BQU0sdUJBQXVCLEdBQWdCO0lBQzNDLE1BQU0sRUFBRSxFQUFFO0lBQ1YsZUFBZSxFQUFFLDRCQUE0QjtDQUM5QyxDQUFDO0FBRUY7Ozs7OztHQU1HO0FBQ0gsTUFBTSxpQ0FBaUMsR0FBZ0I7SUFDckQsTUFBTSxFQUFFLEVBQUU7SUFDVixlQUFlLEVBQUUsb0JBQW9CO0NBQ3RDLENBQUM7QUFFRjs7O0dBR0c7QUFDSCxNQUFNLHdCQUF3QixHQUFnQjtJQUM1QyxNQUFNLEVBQUUsRUFBRTtJQUNWLElBQUksRUFBRSxnQ0FBZSxDQUFDLFNBQVM7SUFDL0IsZUFBZSxFQUFFLGVBQWU7SUFDaEMsR0FBRyxFQUFFLEVBQUU7Q0FDUixDQUFDO0FBRUYsTUFBTSxxQkFBcUIsR0FBZ0I7SUFDekMsTUFBTSxFQUFFLEVBQUU7SUFDVixlQUFlLEVBQUUsb0JBQW9CO0NBQ3RDLENBQUM7QUFFRjs7O0dBR0c7QUFDSCxNQUFhLEdBQUksU0FBUSxjQUFRO0lBYS9CLFlBQVksS0FBb0I7UUFDOUIsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBUkMsWUFBTyxHQUFHLFVBQVUsQ0FBQztRQVNuQyxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUM7UUFD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QUNELE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUM5QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFXLFdBQVc7UUFDcEIsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUN2QixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksMEJBQVcsQ0FBQyxJQUFJLEVBQUUsYUFBYSxFQUFFO2dCQUN2RCxJQUFJLEVBQUUsOEJBQWEsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLHFCQUFxQixDQUFDO2dCQUM3RCxpQkFBaUIsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUk7Z0JBQzFDLFFBQVEsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVE7Z0JBQ3JDLE1BQU0sRUFBRSxPQUFPO2dCQUNmLG1DQUFtQztnQkFDbkMsbUZBQW1GO2dCQUNuRixPQUFPLEVBQUUsSUFBSTthQUNkLENBQUMsQ0FBQztRQUNMLENBQUM7UUFDRCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDM0IsQ0FBQztJQUVTLFVBQVUsQ0FBQyxHQUFXO1FBQzlCLFFBQVEsR0FBRyxFQUFFLENBQUM7WUFDWixLQUFLLHFCQUFlO2dCQUNsQixPQUFPLHdCQUFVLENBQUM7WUFFcEIsS0FBSyxvQkFBWTtnQkFDZixPQUFPLG1CQUFRLENBQUM7WUFFbEIsS0FBSyxrQkFBVTtnQkFDYixPQUFPLGVBQU0sQ0FBQztZQUVoQixLQUFLLG1CQUFXO2dCQUNkLE9BQU8saUJBQU8sQ0FBQztRQUNuQixDQUFDO1FBRUQsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztDQUNGO0FBMUlELGtCQTBJQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJ1Y2tldCB9IGZyb20gXCIuL2J1Y2tldFwiO1xuaW1wb3J0IHsgQ291bnRlciB9IGZyb20gXCIuL2NvdW50ZXJcIjtcbmltcG9ydCB7IEZ1bmN0aW9uIH0gZnJvbSBcIi4vZnVuY3Rpb25cIjtcbmltcG9ydCB7IEFQUF9BWlVSRV9URl9TWU1CT0wgfSBmcm9tIFwiLi9pbnRlcm5hbFwiO1xuaW1wb3J0IHsgVGVzdFJ1bm5lciB9IGZyb20gXCIuL3Rlc3QtcnVubmVyXCI7XG5pbXBvcnQgeyBBcHBsaWNhdGlvbkluc2lnaHRzIH0gZnJvbSBcIi4uLy5nZW4vcHJvdmlkZXJzL2F6dXJlcm0vYXBwbGljYXRpb24taW5zaWdodHNcIjtcbmltcG9ydCB7IExvZ0FuYWx5dGljc1dvcmtzcGFjZSB9IGZyb20gXCIuLi8uZ2VuL3Byb3ZpZGVycy9henVyZXJtL2xvZy1hbmFseXRpY3Mtd29ya3NwYWNlXCI7XG5pbXBvcnQgeyBBenVyZXJtUHJvdmlkZXIgfSBmcm9tIFwiLi4vLmdlbi9wcm92aWRlcnMvYXp1cmVybS9wcm92aWRlclwiO1xuaW1wb3J0IHsgUmVzb3VyY2VHcm91cCB9IGZyb20gXCIuLi8uZ2VuL3Byb3ZpZGVycy9henVyZXJtL3Jlc291cmNlLWdyb3VwXCI7XG5pbXBvcnQgeyBTZXJ2aWNlUGxhbiB9IGZyb20gXCIuLi8uZ2VuL3Byb3ZpZGVycy9henVyZXJtL3NlcnZpY2UtcGxhblwiO1xuaW1wb3J0IHsgU3RvcmFnZUFjY291bnQgfSBmcm9tIFwiLi4vLmdlbi9wcm92aWRlcnMvYXp1cmVybS9zdG9yYWdlLWFjY291bnRcIjtcbmltcG9ydCB7IEJVQ0tFVF9GUU4sIEZVTkNUSU9OX0ZRTiwgQ09VTlRFUl9GUU4gfSBmcm9tIFwiLi4vY2xvdWRcIjtcbmltcG9ydCB7IEFwcFByb3BzIH0gZnJvbSBcIi4uL2NvcmVcIjtcbmltcG9ydCB7XG4gIENhc2VDb252ZW50aW9ucyxcbiAgTmFtZU9wdGlvbnMsXG4gIFJlc291cmNlTmFtZXMsXG59IGZyb20gXCIuLi9zaGFyZWQvcmVzb3VyY2UtbmFtZXNcIjtcbmltcG9ydCB7IENka3RmQXBwIH0gZnJvbSBcIi4uL3NoYXJlZC10Zi9hcHBcIjtcbmltcG9ydCB7IFRFU1RfUlVOTkVSX0ZRTiB9IGZyb20gXCIuLi9zdGRcIjtcblxuLyoqXG4gKiBBenVyZSBhcHAgcHJvcHNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBenVyZUFwcFByb3BzIGV4dGVuZHMgQXBwUHJvcHMge1xuICAvKiogTG9jYXRpb24gZm9yIHJlc291cmNlcyB0byBiZSBkZXBsb3llZCB0byAqL1xuICByZWFkb25seSBsb2NhdGlvbjogc3RyaW5nO1xufVxuXG4vKipcbiAqIFJlc291cmNlR3JvdXAgbmFtZXMgYXJlIGxpbWl0ZWQgdG8gOTAgY2hhcmFjdGVycy5cbiAqIFlvdSBjYW4gdXNlIGFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzLCBoeXBoZW5zLCBhbmQgdW5kZXJzY29yZXMsXG4gKiBwYXJlbnRoZXNlcyBhbmQgcGVyaW9kcy5cbiAqL1xuY29uc3QgUkVTT1VSQ0VHUk9VUF9OQU1FX09QVFM6IE5hbWVPcHRpb25zID0ge1xuICBtYXhMZW46IDkwLFxuICBkaXNhbGxvd2VkUmVnZXg6IC8oW15hLXpBLVowLTlcXC1cXF9cXChcXClcXC5dKykvZyxcbn07XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciBnZW5lcmF0aW5nIGEgbmFtZSBmb3IgQXp1cmUgTG9nIEFuYWx5dGljcyBXb3Jrc3BhY2UuXG4gKlxuICogLSBUaGUgd29ya3NwYWNlIG5hbWUgbXVzdCBiZSBiZXR3ZWVuIDQgYW5kIDYzIGNoYXJhY3RlcnMuXG4gKiAtIFRoZSB3b3Jrc3BhY2UgbmFtZSBjYW4gY29udGFpbiBvbmx5IGxldHRlcnMsIG51bWJlcnMsIGFuZCBoeXBoZW5zIChgXCItXCJgKS5cbiAqIC0gVGhlIGh5cGhlbiAoYFwiLVwiYCkgc2hvdWxkIG5vdCBiZSB0aGUgZmlyc3Qgb3IgdGhlIGxhc3QgY2hhcmFjdGVyIGluIHRoZSBuYW1lLlxuICovXG5jb25zdCBMT0dfQU5BTFlUSUNTX1dPUktTUEFDRV9OQU1FX09QVFM6IE5hbWVPcHRpb25zID0ge1xuICBtYXhMZW46IDYzLFxuICBkaXNhbGxvd2VkUmVnZXg6IC8oW15hLXpBLVowLTlcXC1dKykvZyxcbn07XG5cbi8qKlxuICogU3RvcmFnZUFjY291bnQgbmFtZXMgYXJlIGxpbWl0ZWQgdG8gMjQgY2hhcmFjdGVycy5cbiAqIFlvdSBjYW4gb25seSB1c2UgYWxwaGFudW1lcmljIGNoYXJhY3RlcnMuXG4gKi9cbmNvbnN0IFNUT1JBR0VBQ0NPVU5UX05BTUVfT1BUUzogTmFtZU9wdGlvbnMgPSB7XG4gIG1heExlbjogMjQsXG4gIGNhc2U6IENhc2VDb252ZW50aW9ucy5MT1dFUkNBU0UsXG4gIGRpc2FsbG93ZWRSZWdleDogLyhbXmEtejAtOV0rKS9nLFxuICBzZXA6IFwiXCIsXG59O1xuXG5jb25zdCBTRVJWSUNFUExBTl9OQU1FX09QVFM6IE5hbWVPcHRpb25zID0ge1xuICBtYXhMZW46IDUwLFxuICBkaXNhbGxvd2VkUmVnZXg6IC8oW15hLXpBLVowLTlcXC1dKykvZyxcbn07XG5cbi8qKlxuICogQW4gYXBwIHRoYXQga25vd3MgaG93IHRvIHN5bnRoZXNpemUgY29uc3RydWN0cyBpbnRvIGEgVGVycmFmb3JtIGNvbmZpZ3VyYXRpb25cbiAqIGZvciBBenVyZSByZXNvdXJjZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBBcHAgZXh0ZW5kcyBDZGt0ZkFwcCB7XG4gIC8qKlxuICAgKiBUaGUgbG9jYXRpb24gY29udGV4dCBvZiB0aGUgQXBwXG4gICAqIEBsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvYXp1cmVybS9sYXRlc3QvZG9jcy9yZXNvdXJjZXMvcmVzb3VyY2VfZ3JvdXAjbG9jYXRpb25cbiAgICogKi9cbiAgcHVibGljIHJlYWRvbmx5IGxvY2F0aW9uOiBzdHJpbmc7XG4gIHB1YmxpYyByZWFkb25seSBfdGFyZ2V0ID0gXCJ0Zi1henVyZVwiO1xuICBwcml2YXRlIF9yZXNvdXJjZUdyb3VwPzogUmVzb3VyY2VHcm91cDtcbiAgcHJpdmF0ZSBfc3RvcmFnZUFjY291bnQ/OiBTdG9yYWdlQWNjb3VudDtcbiAgcHJpdmF0ZSBfc2VydmljZVBsYW4/OiBTZXJ2aWNlUGxhbjtcbiAgcHJpdmF0ZSBfYXBwbGljYXRpb25JbnNpZ2h0cz86IEFwcGxpY2F0aW9uSW5zaWdodHM7XG4gIHByaXZhdGUgX2xvZ0FuYWx5dGljc1dvcmtzcGFjZT86IExvZ0FuYWx5dGljc1dvcmtzcGFjZTtcblxuICBjb25zdHJ1Y3Rvcihwcm9wczogQXp1cmVBcHBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLmxvY2F0aW9uID0gcHJvcHMubG9jYXRpb24gPz8gcHJvY2Vzcy5lbnYuQVpVUkVfTE9DQVRJT047XG4gICAgVGVzdFJ1bm5lci5fY3JlYXRlVHJlZSh0aGlzLCBwcm9wcy5yb290Q29uc3RydWN0KTtcbiAgICAvLyBVc2luZyBlbnYgdmFyaWFibGUgZm9yIGxvY2F0aW9uIGlzIHdvcmsgYXJvdW5kIHVudGlsIHdlIGFyZVxuICAgIC8vIGFibGUgdG8gaW1wbGVtZW50IGh0dHBzOi8vZ2l0aHViLmNvbS93aW5nbGFuZy93aW5nL2lzc3Vlcy80OTMgKHBvbGljeSBhcyBpbmZyYXN0cnVjdHVyZSlcbiAgICBpZiAodGhpcy5sb2NhdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIFwiTG9jYXRpb24gbXVzdCBiZSBzcGVjaWZpZWQgaW4gdGhlIEFaVVJFX0xPQ0FUSU9OIGVudmlyb25tZW50IHZhcmlhYmxlXCJcbiAgICAgICk7XG4gICAgfVxuXG4gICAgbmV3IEF6dXJlcm1Qcm92aWRlcih0aGlzLCBcImF6dXJlXCIsIHtcbiAgICAgIGZlYXR1cmVzOiB7XG4gICAgICAgIC8vIFRvIGJlIGFibGUgdG8gcnVuIHRlcnJhZm9ybSBkZXN0cm95IGR1cmluZyB0ZXN0cywgYW5kIGluIGEgcmVhc29uYWJsZSB0aW1lXG4gICAgICAgIHJlc291cmNlR3JvdXA6IHsgcHJldmVudERlbGV0aW9uSWZDb250YWluc1Jlc291cmNlczogZmFsc2UgfSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgQVBQX0FaVVJFX1RGX1NZTUJPTCwge1xuICAgICAgdmFsdWU6IHRoaXMsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgbG9nQW5hbHl0aWNzV29ya3NwYWNlKCkge1xuICAgIGlmICghdGhpcy5fbG9nQW5hbHl0aWNzV29ya3NwYWNlKSB7XG4gICAgICB0aGlzLl9sb2dBbmFseXRpY3NXb3Jrc3BhY2UgPSBuZXcgTG9nQW5hbHl0aWNzV29ya3NwYWNlKFxuICAgICAgICB0aGlzLFxuICAgICAgICBcIkxvZ0FuYWx5dGljc1dvcmtzcGFjZVwiLFxuICAgICAgICB7XG4gICAgICAgICAgbG9jYXRpb246IHRoaXMubG9jYXRpb24sXG4gICAgICAgICAgcmVzb3VyY2VHcm91cE5hbWU6IHRoaXMucmVzb3VyY2VHcm91cC5uYW1lLFxuICAgICAgICAgIG5hbWU6IFJlc291cmNlTmFtZXMuZ2VuZXJhdGVOYW1lKFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIExPR19BTkFMWVRJQ1NfV09SS1NQQUNFX05BTUVfT1BUU1xuICAgICAgICAgICksXG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9sb2dBbmFseXRpY3NXb3Jrc3BhY2U7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGFwcGxpY2F0aW9uSW5zaWdodHMoKSB7XG4gICAgaWYgKCF0aGlzLl9hcHBsaWNhdGlvbkluc2lnaHRzKSB7XG4gICAgICB0aGlzLl9hcHBsaWNhdGlvbkluc2lnaHRzID0gbmV3IEFwcGxpY2F0aW9uSW5zaWdodHMoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIGBBcHBsaWNhdGlvbkluc2lnaHRzYCxcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6IGBhcHBsaWNhdGlvbi1pbnNpZ2h0c2AsXG4gICAgICAgICAgcmVzb3VyY2VHcm91cE5hbWU6IHRoaXMucmVzb3VyY2VHcm91cC5uYW1lLFxuICAgICAgICAgIGxvY2F0aW9uOiB0aGlzLnJlc291cmNlR3JvdXAubG9jYXRpb24sXG4gICAgICAgICAgYXBwbGljYXRpb25UeXBlOiBcIndlYlwiLFxuICAgICAgICAgIHdvcmtzcGFjZUlkOiB0aGlzLmxvZ0FuYWx5dGljc1dvcmtzcGFjZS5pZCxcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2FwcGxpY2F0aW9uSW5zaWdodHM7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHJlc291cmNlIGdyb3VwIHVzaW5nIGxhenkgaW5pdGlhbGl6YXRpb25cbiAgICovXG4gIHB1YmxpYyBnZXQgcmVzb3VyY2VHcm91cCgpIHtcbiAgICBpZiAoIXRoaXMuX3Jlc291cmNlR3JvdXApIHtcbiAgICAgIHRoaXMuX3Jlc291cmNlR3JvdXAgPSBuZXcgUmVzb3VyY2VHcm91cCh0aGlzLCBcIlJlc291cmNlR3JvdXBcIiwge1xuICAgICAgICBsb2NhdGlvbjogdGhpcy5sb2NhdGlvbixcbiAgICAgICAgbmFtZTogUmVzb3VyY2VOYW1lcy5nZW5lcmF0ZU5hbWUodGhpcywgUkVTT1VSQ0VHUk9VUF9OQU1FX09QVFMpLFxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9yZXNvdXJjZUdyb3VwO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBzdG9yYWdlIGFjY291bnQgdXNpbmcgbGF6eSBpbml0aWFsaXphdGlvblxuICAgKi9cbiAgcHVibGljIGdldCBzdG9yYWdlQWNjb3VudCgpIHtcbiAgICBpZiAoIXRoaXMuX3N0b3JhZ2VBY2NvdW50KSB7XG4gICAgICB0aGlzLl9zdG9yYWdlQWNjb3VudCA9IG5ldyBTdG9yYWdlQWNjb3VudCh0aGlzLCBcIlN0b3JhZ2VBY2NvdW50XCIsIHtcbiAgICAgICAgbmFtZTogUmVzb3VyY2VOYW1lcy5nZW5lcmF0ZU5hbWUodGhpcywgU1RPUkFHRUFDQ09VTlRfTkFNRV9PUFRTKSxcbiAgICAgICAgcmVzb3VyY2VHcm91cE5hbWU6IHRoaXMucmVzb3VyY2VHcm91cC5uYW1lLFxuICAgICAgICBsb2NhdGlvbjogdGhpcy5yZXNvdXJjZUdyb3VwLmxvY2F0aW9uLFxuICAgICAgICBhY2NvdW50VGllcjogXCJTdGFuZGFyZFwiLFxuICAgICAgICBhY2NvdW50UmVwbGljYXRpb25UeXBlOiBcIkxSU1wiLFxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9zdG9yYWdlQWNjb3VudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgc2VydmljZSBwbGFuIHVzaW5nIGxhenkgaW5pdGlhbGl6YXRpb25cbiAgICovXG4gIHB1YmxpYyBnZXQgc2VydmljZVBsYW4oKSB7XG4gICAgaWYgKCF0aGlzLl9zZXJ2aWNlUGxhbikge1xuICAgICAgdGhpcy5fc2VydmljZVBsYW4gPSBuZXcgU2VydmljZVBsYW4odGhpcywgXCJTZXJ2aWNlUGxhblwiLCB7XG4gICAgICAgIG5hbWU6IFJlc291cmNlTmFtZXMuZ2VuZXJhdGVOYW1lKHRoaXMsIFNFUlZJQ0VQTEFOX05BTUVfT1BUUyksXG4gICAgICAgIHJlc291cmNlR3JvdXBOYW1lOiB0aGlzLnJlc291cmNlR3JvdXAubmFtZSxcbiAgICAgICAgbG9jYXRpb246IHRoaXMucmVzb3VyY2VHcm91cC5sb2NhdGlvbixcbiAgICAgICAgb3NUeXBlOiBcIkxpbnV4XCIsXG4gICAgICAgIC8vIER5bmFtaWMgU3RvY2sgS2VlcGluZyBVbml0IChTS1UpXG4gICAgICAgIC8vIGh0dHBzOi8vbGVhcm4ubWljcm9zb2Z0LmNvbS9lbi11cy9wYXJ0bmVyLWNlbnRlci9kZXZlbG9wZXIvcHJvZHVjdC1yZXNvdXJjZXMjc2t1XG4gICAgICAgIHNrdU5hbWU6IFwiWTFcIixcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fc2VydmljZVBsYW47XG4gIH1cblxuICBwcm90ZWN0ZWQgdHlwZUZvckZxbihmcW46IHN0cmluZyk6IGFueSB7XG4gICAgc3dpdGNoIChmcW4pIHtcbiAgICAgIGNhc2UgVEVTVF9SVU5ORVJfRlFOOlxuICAgICAgICByZXR1cm4gVGVzdFJ1bm5lcjtcblxuICAgICAgY2FzZSBGVU5DVElPTl9GUU46XG4gICAgICAgIHJldHVybiBGdW5jdGlvbjtcblxuICAgICAgY2FzZSBCVUNLRVRfRlFOOlxuICAgICAgICByZXR1cm4gQnVja2V0O1xuXG4gICAgICBjYXNlIENPVU5URVJfRlFOOlxuICAgICAgICByZXR1cm4gQ291bnRlcjtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG4iXX0=