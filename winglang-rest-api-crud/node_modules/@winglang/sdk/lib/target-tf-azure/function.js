"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Function = void 0;
const fs = __importStar(require("fs"));
const cdktf_1 = require("cdktf");
const app_1 = require("./app");
const bucket_1 = require("./bucket");
const __1 = require("..");
const linux_function_app_1 = require("../.gen/providers/azurerm/linux-function-app");
const role_assignment_1 = require("../.gen/providers/azurerm/role-assignment");
const storage_blob_1 = require("../.gen/providers/azurerm/storage-blob");
const cloud = __importStar(require("../cloud"));
const errors_1 = require("../core/errors");
const bundling_1 = require("../shared/bundling");
const resource_names_1 = require("../shared/resource-names");
/**
 * Function names are limited to 32 characters.
 * You can use alphanumeric characters.
 * https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/resource-name-rules#microsoftweb
 */
const FUNCTION_NAME_OPTS = {
    maxLen: 32,
    disallowedRegex: /[^a-z0-9]+/g,
    case: resource_names_1.CaseConventions.LOWERCASE,
};
/**
 * Azure implementation of `cloud.Function`.
 *
 * @inflight `@winglang/sdk.cloud.IFunctionClient`
 */
class Function extends cloud.Function {
    constructor(scope, id, inflight, props = {}) {
        super(scope, id, inflight, props);
        this.permissions = new Map();
        const app = app_1.App.of(this);
        this.storageAccount = app.storageAccount;
        this.resourceGroup = app.resourceGroup;
        this.servicePlan = app.servicePlan;
        this.applicationInsights = app.applicationInsights;
        this.functionName = resource_names_1.ResourceNames.generateName(this, FUNCTION_NAME_OPTS);
        const functionIdentityType = "SystemAssigned";
        const functionRuntime = "node";
        const functionNodeVersion = "20"; // support fetch
        // Create Bucket to store function code
        const functionCodeBucket = new bucket_1.Bucket(this, "FunctionBucket");
        if (props.concurrency != null) {
            throw new errors_1.NotImplementedError("Function concurrency isn't implemented yet on the current target.");
        }
        // throw an error if props.memory is defined for an Azure function
        if (props.memory) {
            throw new errors_1.NotImplementedError("memory is an invalid parameter on Azure", {
                resource: this.constructor.name,
                operation: "memory",
            });
        }
        // TODO: will be uncommented when fixing https://github.com/winglang/wing/issues/4494
        // const timeout = props.timeout ?? Duration.fromMinutes(1);
        if (props.timeout) {
            throw new errors_1.NotImplementedError("Function.timeout is not implemented yet on tf-azure target.", {
                issue: "https://github.com/winglang/wing/issues/4494",
                resource: this.constructor.name,
                operation: "timeout",
            });
        }
        // Upload zip asset to storage account
        const functionCodeBlob = new storage_blob_1.StorageBlob(this, "CodeBlob", {
            name: `${this.functionName}.zip`,
            storageAccountName: this.storageAccount.name,
            storageContainerName: functionCodeBucket.storageContainer.name,
            type: "Block",
            source: cdktf_1.Lazy.stringValue({
                produce: () => {
                    if (!this.assetPath) {
                        throw new Error("assetPath was not set");
                    }
                    return this.assetPath;
                },
            }),
        });
        // Create the function
        this.function = new linux_function_app_1.LinuxFunctionApp(this, "Function", {
            name: this.functionName,
            resourceGroupName: this.resourceGroup.name,
            location: this.resourceGroup.location,
            servicePlanId: this.servicePlan.id,
            storageAccountName: this.storageAccount.name,
            identity: {
                type: functionIdentityType,
            },
            storageAccountAccessKey: this.storageAccount.primaryAccessKey,
            siteConfig: {
                applicationStack: {
                    nodeVersion: functionNodeVersion,
                },
                applicationInsightsConnectionString: this.applicationInsights.connectionString,
                applicationInsightsKey: this.applicationInsights.instrumentationKey,
            },
            httpsOnly: true,
            appSettings: cdktf_1.Lazy.anyValue({
                produce: () => ({
                    ...this.env,
                    WEBSITE_RUN_FROM_PACKAGE: `https://${this.storageAccount.name}.blob.core.windows.net/${functionCodeBucket.storageContainer.name}/${functionCodeBlob.name}`,
                    FUNCTIONS_WORKER_RUNTIME: functionRuntime,
                }),
            }),
        });
        // Apply permissions from bound resources
        for (const key of this.permissions.keys() || []) {
            const scopedRoleAssignment = this.permissions?.get(key);
            new role_assignment_1.RoleAssignment(this, `RoleAssignment${key}`, {
                scope: scopedRoleAssignment.scope,
                roleDefinitionName: scopedRoleAssignment.roleDefinitionName,
                principalId: this.function.identity.principalId,
            });
        }
        const roleAssignment = {
            principalId: this.function.identity.principalId,
            roleDefinitionName: bucket_1.StorageAccountPermissions.READ,
            scope: this.storageAccount.id,
        };
        // Add permissions to read function code
        new role_assignment_1.RoleAssignment(this, `ReadLambdaCodeAssignment`, roleAssignment);
        this.permissions.set(`${this.storageAccount.node.addr.substring(-8)}_${bucket_1.StorageAccountPermissions.READ}`, roleAssignment);
    }
    /** @internal */
    _preSynthesize() {
        super._preSynthesize();
        const bundle = (0, bundling_1.createBundle)(this.entrypoint);
        const codeDir = bundle.directory;
        // Package up code in azure expected format
        const outDir = `${codeDir}/${this.functionName}`;
        // Move index.js to function name directory. Every Azure function in a function app
        // must be in its own folder containing an index.js and function.json files
        fs.mkdirSync(`${codeDir}/${this.functionName}`);
        fs.renameSync(bundle.outfilePath, `${outDir}/index.js`);
        // As per documentation "a function must have exactly one trigger" so for now
        // by default a function will support http get requests
        // when we lift other resources like queues or topics this function.json will need to
        // be overwritten with the correct trigger
        // https://learn.microsoft.com/en-us/azure/azure-functions/functions-triggers-bindings?tabs=csharp
        fs.writeFileSync(`${outDir}/function.json`, JSON.stringify({
            bindings: [
                {
                    authLevel: "anonymous", // TODO: this auth level will be changed with https://github.com/winglang/wing/issues/4497
                    type: "httpTrigger",
                    direction: "in",
                    name: "req",
                    methods: ["get", "post"],
                },
                {
                    type: "http",
                    direction: "out",
                    name: "res",
                },
            ],
        }));
        // Write host.json file to set function timeout (must be set in root of function app)
        // https://learn.microsoft.com/en-us/azure/azure-functions/functions-host-json
        // this means that timeout is set for all functions in the function app
        fs.writeFileSync(`${codeDir}/host.json`, JSON.stringify({
            version: "2.0",
            //TODO: need to read the documentation and parse the number in the right way,
            // while not surpassing the limits, since it will be resulted in a hard to detect error
            functionTimeout: `00:01:00`,
        }));
        // Create zip asset from function code
        const asset = new cdktf_1.TerraformAsset(this, "Asset", {
            path: `${codeDir}`,
            type: cdktf_1.AssetType.ARCHIVE,
        });
        this.assetPath = asset.path;
    }
    /**
     * Function name, used for invocation
     */
    get name() {
        return this.function.name;
    }
    /**
     *  Adds role to function for given azure scope
     *
     * @param scopedResource - The resource to which the role assignment will be scoped.
     * @param scopedRoleAssignment - The mapping of azure scope to role definition name.
     */
    addPermission(scopedResource, scopedRoleAssignment) {
        const uniqueId = scopedResource.node.addr.substring(-8);
        const permissionsKey = `${uniqueId}_${scopedRoleAssignment.roleDefinitionName}`;
        // If the function has already been initialized attach the role assignment directly
        if (this.function) {
            if (this.permissions.has(permissionsKey)) {
                return; // already exists
            }
            new role_assignment_1.RoleAssignment(this, `RoleAssignment${permissionsKey}`, {
                scope: scopedRoleAssignment.scope,
                roleDefinitionName: scopedRoleAssignment.roleDefinitionName,
                principalId: this.function.identity.principalId,
            });
        }
        this.permissions.set(permissionsKey, scopedRoleAssignment);
    }
    _getCodeLines(handler) {
        const inflightClient = handler._toInflight();
        const lines = new Array();
        lines.push('"use strict";');
        lines.push("module.exports = async function(context, req) {");
        lines.push(`  const body = await (${inflightClient}).handle(context.req.body ?? "");`);
        lines.push(`  context.res = { body };`);
        lines.push(`};`);
        return lines;
    }
    /** @internal */
    get _liftMap() {
        return {
            [cloud.FunctionInflightMethods.INVOKE]: [[this.handler, ["handle"]]],
        };
    }
    onLift(host, ops) {
        //TODO: add permissions here when changing auth level: https://github.com/winglang/wing/issues/4497
        host.addEnvironment(this.envName(), this.function.name);
        super.onLift(host, ops);
    }
    /** @internal */
    _toInflight() {
        return __1.core.InflightClient.for(__dirname.replace("target-tf-azure", "shared-azure"), __filename, "FunctionClient", [`process.env["${this.envName()}"]`]);
    }
    envName() {
        return `FUNCTION_NAME_${this.node.addr.slice(-8)}`;
    }
}
exports.Function = Function;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVuY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGFyZ2V0LXRmLWF6dXJlL2Z1bmN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsdUNBQXlCO0FBQ3pCLGlDQUF3RDtBQUV4RCwrQkFBNEI7QUFDNUIscUNBQTZEO0FBQzdELDBCQUEwQjtBQUUxQixxRkFBZ0Y7QUFFaEYsK0VBQTJFO0FBRzNFLHlFQUFxRTtBQUNyRSxnREFBa0M7QUFFbEMsMkNBQXFEO0FBQ3JELGlEQUFrRDtBQUNsRCw2REFJa0M7QUFHbEM7Ozs7R0FJRztBQUNILE1BQU0sa0JBQWtCLEdBQWdCO0lBQ3RDLE1BQU0sRUFBRSxFQUFFO0lBQ1YsZUFBZSxFQUFFLGFBQWE7SUFDOUIsSUFBSSxFQUFFLGdDQUFlLENBQUMsU0FBUztDQUNoQyxDQUFDO0FBWUY7Ozs7R0FJRztBQUNILE1BQWEsUUFBUyxTQUFRLEtBQUssQ0FBQyxRQUFRO0lBVTFDLFlBQ0UsS0FBZ0IsRUFDaEIsRUFBVSxFQUNWLFFBQWdDLEVBQ2hDLFFBQTZCLEVBQUU7UUFFL0IsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBVjVCLGdCQUFXLEdBQXNDLElBQUksR0FBRyxFQUFFLENBQUM7UUFZakUsTUFBTSxHQUFHLEdBQUcsU0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQVEsQ0FBQztRQUNoQyxJQUFJLENBQUMsY0FBYyxHQUFHLEdBQUcsQ0FBQyxjQUFjLENBQUM7UUFDekMsSUFBSSxDQUFDLGFBQWEsR0FBRyxHQUFHLENBQUMsYUFBYSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQztRQUNuQyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsR0FBRyxDQUFDLG1CQUFtQixDQUFDO1FBRW5ELElBQUksQ0FBQyxZQUFZLEdBQUcs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QUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FDNUIsU0FBUyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxjQUFjLENBQUMsRUFDcEQsVUFBVSxFQUNWLGdCQUFnQixFQUNoQixDQUFDLGdCQUFnQixJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUNyQyxDQUFDO0lBQ0osQ0FBQztJQUVPLE9BQU87UUFDYixPQUFPLGlCQUFpQixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ3JELENBQUM7Q0FDRjtBQTlRRCw0QkE4UUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBmcyBmcm9tIFwiZnNcIjtcbmltcG9ydCB7IEFzc2V0VHlwZSwgTGF6eSwgVGVycmFmb3JtQXNzZXQgfSBmcm9tIFwiY2RrdGZcIjtcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgeyBBcHAgfSBmcm9tIFwiLi9hcHBcIjtcbmltcG9ydCB7IEJ1Y2tldCwgU3RvcmFnZUFjY291bnRQZXJtaXNzaW9ucyB9IGZyb20gXCIuL2J1Y2tldFwiO1xuaW1wb3J0IHsgY29yZSB9IGZyb20gXCIuLlwiO1xuaW1wb3J0IHsgQXBwbGljYXRpb25JbnNpZ2h0cyB9IGZyb20gXCIuLi8uZ2VuL3Byb3ZpZGVycy9henVyZXJtL2FwcGxpY2F0aW9uLWluc2lnaHRzXCI7XG5pbXBvcnQgeyBMaW51eEZ1bmN0aW9uQXBwIH0gZnJvbSBcIi4uLy5nZW4vcHJvdmlkZXJzL2F6dXJlcm0vbGludXgtZnVuY3Rpb24tYXBwXCI7XG5pbXBvcnQgeyBSZXNvdXJjZUdyb3VwIH0gZnJvbSBcIi4uLy5nZW4vcHJvdmlkZXJzL2F6dXJlcm0vcmVzb3VyY2UtZ3JvdXBcIjtcbmltcG9ydCB7IFJvbGVBc3NpZ25tZW50IH0gZnJvbSBcIi4uLy5nZW4vcHJvdmlkZXJzL2F6dXJlcm0vcm9sZS1hc3NpZ25tZW50XCI7XG5pbXBvcnQgeyBTZXJ2aWNlUGxhbiB9IGZyb20gXCIuLi8uZ2VuL3Byb3ZpZGVycy9henVyZXJtL3NlcnZpY2UtcGxhblwiO1xuaW1wb3J0IHsgU3RvcmFnZUFjY291bnQgfSBmcm9tIFwiLi4vLmdlbi9wcm92aWRlcnMvYXp1cmVybS9zdG9yYWdlLWFjY291bnRcIjtcbmltcG9ydCB7IFN0b3JhZ2VCbG9iIH0gZnJvbSBcIi4uLy5nZW4vcHJvdmlkZXJzL2F6dXJlcm0vc3RvcmFnZS1ibG9iXCI7XG5pbXBvcnQgKiBhcyBjbG91ZCBmcm9tIFwiLi4vY2xvdWRcIjtcbmltcG9ydCB7IExpZnRNYXAgfSBmcm9tIFwiLi4vY29yZVwiO1xuaW1wb3J0IHsgTm90SW1wbGVtZW50ZWRFcnJvciB9IGZyb20gXCIuLi9jb3JlL2Vycm9yc1wiO1xuaW1wb3J0IHsgY3JlYXRlQnVuZGxlIH0gZnJvbSBcIi4uL3NoYXJlZC9idW5kbGluZ1wiO1xuaW1wb3J0IHtcbiAgQ2FzZUNvbnZlbnRpb25zLFxuICBOYW1lT3B0aW9ucyxcbiAgUmVzb3VyY2VOYW1lcyxcbn0gZnJvbSBcIi4uL3NoYXJlZC9yZXNvdXJjZS1uYW1lc1wiO1xuaW1wb3J0IHsgSUluZmxpZ2h0SG9zdCB9IGZyb20gXCIuLi9zdGRcIjtcblxuLyoqXG4gKiBGdW5jdGlvbiBuYW1lcyBhcmUgbGltaXRlZCB0byAzMiBjaGFyYWN0ZXJzLlxuICogWW91IGNhbiB1c2UgYWxwaGFudW1lcmljIGNoYXJhY3RlcnMuXG4gKiBodHRwczovL2xlYXJuLm1pY3Jvc29mdC5jb20vZW4tdXMvYXp1cmUvYXp1cmUtcmVzb3VyY2UtbWFuYWdlci9tYW5hZ2VtZW50L3Jlc291cmNlLW5hbWUtcnVsZXMjbWljcm9zb2Z0d2ViXG4gKi9cbmNvbnN0IEZVTkNUSU9OX05BTUVfT1BUUzogTmFtZU9wdGlvbnMgPSB7XG4gIG1heExlbjogMzIsXG4gIGRpc2FsbG93ZWRSZWdleDogL1teYS16MC05XSsvZyxcbiAgY2FzZTogQ2FzZUNvbnZlbnRpb25zLkxPV0VSQ0FTRSxcbn07XG5cbi8qKlxuICogQXp1cmUgc2NvcGVkIHJvbGUgYXNzaWdubWVudC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTY29wZWRSb2xlQXNzaWdubWVudCB7XG4gIC8qKiBUaGUgYXp1cmUgc2NvcGUgaWUuIC9zdWJzY3JpcHRpb24veHh4eHgveXl5eXkvenp6ICovXG4gIHJlYWRvbmx5IHNjb3BlOiBzdHJpbmc7XG4gIC8qKiBSb2xlIGRlZmluaXRpb24gdG8gYXNzaWduICovXG4gIHJlYWRvbmx5IHJvbGVEZWZpbml0aW9uTmFtZTogc3RyaW5nO1xufVxuXG4vKipcbiAqIEF6dXJlIGltcGxlbWVudGF0aW9uIG9mIGBjbG91ZC5GdW5jdGlvbmAuXG4gKlxuICogQGluZmxpZ2h0IGBAd2luZ2xhbmcvc2RrLmNsb3VkLklGdW5jdGlvbkNsaWVudGBcbiAqL1xuZXhwb3J0IGNsYXNzIEZ1bmN0aW9uIGV4dGVuZHMgY2xvdWQuRnVuY3Rpb24ge1xuICBwcml2YXRlIHJlYWRvbmx5IGZ1bmN0aW9uOiBMaW51eEZ1bmN0aW9uQXBwO1xuICBwcml2YXRlIHJlYWRvbmx5IHNlcnZpY2VQbGFuOiBTZXJ2aWNlUGxhbjtcbiAgcHJpdmF0ZSByZWFkb25seSBzdG9yYWdlQWNjb3VudDogU3RvcmFnZUFjY291bnQ7XG4gIHByaXZhdGUgcmVhZG9ubHkgcmVzb3VyY2VHcm91cDogUmVzb3VyY2VHcm91cDtcbiAgcHJpdmF0ZSByZWFkb25seSBhcHBsaWNhdGlvbkluc2lnaHRzOiBBcHBsaWNhdGlvbkluc2lnaHRzO1xuICBwcml2YXRlIHBlcm1pc3Npb25zOiBNYXA8c3RyaW5nLCBTY29wZWRSb2xlQXNzaWdubWVudD4gPSBuZXcgTWFwKCk7XG4gIHByaXZhdGUgcmVhZG9ubHkgZnVuY3Rpb25OYW1lOiBzdHJpbmc7XG4gIHByaXZhdGUgYXNzZXRQYXRoOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgc2NvcGU6IENvbnN0cnVjdCxcbiAgICBpZDogc3RyaW5nLFxuICAgIGluZmxpZ2h0OiBjbG91ZC5JRnVuY3Rpb25IYW5kbGVyLFxuICAgIHByb3BzOiBjbG91ZC5GdW5jdGlvblByb3BzID0ge31cbiAgKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCBpbmZsaWdodCwgcHJvcHMpO1xuXG4gICAgY29uc3QgYXBwID0gQXBwLm9mKHRoaXMpIGFzIEFwcDtcbiAgICB0aGlzLnN0b3JhZ2VBY2NvdW50ID0gYXBwLnN0b3JhZ2VBY2NvdW50O1xuICAgIHRoaXMucmVzb3VyY2VHcm91cCA9IGFwcC5yZXNvdXJjZUdyb3VwO1xuICAgIHRoaXMuc2VydmljZVBsYW4gPSBhcHAuc2VydmljZVBsYW47XG4gICAgdGhpcy5hcHBsaWNhdGlvbkluc2lnaHRzID0gYXBwLmFwcGxpY2F0aW9uSW5zaWdodHM7XG5cbiAgICB0aGlzLmZ1bmN0aW9uTmFtZSA9IFJlc291cmNlTmFtZXMuZ2VuZXJhdGVOYW1lKHRoaXMsIEZVTkNUSU9OX05BTUVfT1BUUyk7XG4gICAgY29uc3QgZnVuY3Rpb25JZGVudGl0eVR5cGUgPSBcIlN5c3RlbUFzc2lnbmVkXCI7XG4gICAgY29uc3QgZnVuY3Rpb25SdW50aW1lID0gXCJub2RlXCI7XG4gICAgY29uc3QgZnVuY3Rpb25Ob2RlVmVyc2lvbiA9IFwiMjBcIjsgLy8gc3VwcG9ydCBmZXRjaFxuXG4gICAgLy8gQ3JlYXRlIEJ1Y2tldCB0byBzdG9yZSBmdW5jdGlvbiBjb2RlXG4gICAgY29uc3QgZnVuY3Rpb25Db2RlQnVja2V0ID0gbmV3IEJ1Y2tldCh0aGlzLCBcIkZ1bmN0aW9uQnVja2V0XCIpO1xuXG4gICAgaWYgKHByb3BzLmNvbmN1cnJlbmN5ICE9IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBOb3RJbXBsZW1lbnRlZEVycm9yKFxuICAgICAgICBcIkZ1bmN0aW9uIGNvbmN1cnJlbmN5IGlzbid0IGltcGxlbWVudGVkIHlldCBvbiB0aGUgY3VycmVudCB0YXJnZXQuXCJcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gdGhyb3cgYW4gZXJyb3IgaWYgcHJvcHMubWVtb3J5IGlzIGRlZmluZWQgZm9yIGFuIEF6dXJlIGZ1bmN0aW9uXG4gICAgaWYgKHByb3BzLm1lbW9yeSkge1xuICAgICAgdGhyb3cgbmV3IE5vdEltcGxlbWVudGVkRXJyb3IoXCJtZW1vcnkgaXMgYW4gaW52YWxpZCBwYXJhbWV0ZXIgb24gQXp1cmVcIiwge1xuICAgICAgICByZXNvdXJjZTogdGhpcy5jb25zdHJ1Y3Rvci5uYW1lLFxuICAgICAgICBvcGVyYXRpb246IFwibWVtb3J5XCIsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBUT0RPOiB3aWxsIGJlIHVuY29tbWVudGVkIHdoZW4gZml4aW5nIGh0dHBzOi8vZ2l0aHViLmNvbS93aW5nbGFuZy93aW5nL2lzc3Vlcy80NDk0XG4gICAgLy8gY29uc3QgdGltZW91dCA9IHByb3BzLnRpbWVvdXQgPz8gRHVyYXRpb24uZnJvbU1pbnV0ZXMoMSk7XG4gICAgaWYgKHByb3BzLnRpbWVvdXQpIHtcbiAgICAgIHRocm93IG5ldyBOb3RJbXBsZW1lbnRlZEVycm9yKFxuICAgICAgICBcIkZ1bmN0aW9uLnRpbWVvdXQgaXMgbm90IGltcGxlbWVudGVkIHlldCBvbiB0Zi1henVyZSB0YXJnZXQuXCIsXG4gICAgICAgIHtcbiAgICAgICAgICBpc3N1ZTogXCJodHRwczovL2dpdGh1Yi5jb20vd2luZ2xhbmcvd2luZy9pc3N1ZXMvNDQ5NFwiLFxuICAgICAgICAgIHJlc291cmNlOiB0aGlzLmNvbnN0cnVjdG9yLm5hbWUsXG4gICAgICAgICAgb3BlcmF0aW9uOiBcInRpbWVvdXRcIixcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBVcGxvYWQgemlwIGFzc2V0IHRvIHN0b3JhZ2UgYWNjb3VudFxuICAgIGNvbnN0IGZ1bmN0aW9uQ29kZUJsb2IgPSBuZXcgU3RvcmFnZUJsb2IodGhpcywgXCJDb2RlQmxvYlwiLCB7XG4gICAgICBuYW1lOiBgJHt0aGlzLmZ1bmN0aW9uTmFtZX0uemlwYCxcbiAgICAgIHN0b3JhZ2VBY2NvdW50TmFtZTogdGhpcy5zdG9yYWdlQWNjb3VudC5uYW1lLFxuICAgICAgc3RvcmFnZUNvbnRhaW5lck5hbWU6IGZ1bmN0aW9uQ29kZUJ1Y2tldC5zdG9yYWdlQ29udGFpbmVyLm5hbWUsXG4gICAgICB0eXBlOiBcIkJsb2NrXCIsXG4gICAgICBzb3VyY2U6IExhenkuc3RyaW5nVmFsdWUoe1xuICAgICAgICBwcm9kdWNlOiAoKSA9PiB7XG4gICAgICAgICAgaWYgKCF0aGlzLmFzc2V0UGF0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYXNzZXRQYXRoIHdhcyBub3Qgc2V0XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhpcy5hc3NldFBhdGg7XG4gICAgICAgIH0sXG4gICAgICB9KSxcbiAgICB9KTtcblxuICAgIC8vIENyZWF0ZSB0aGUgZnVuY3Rpb25cbiAgICB0aGlzLmZ1bmN0aW9uID0gbmV3IExpbnV4RnVuY3Rpb25BcHAodGhpcywgXCJGdW5jdGlvblwiLCB7XG4gICAgICBuYW1lOiB0aGlzLmZ1bmN0aW9uTmFtZSxcbiAgICAgIHJlc291cmNlR3JvdXBOYW1lOiB0aGlzLnJlc291cmNlR3JvdXAubmFtZSxcbiAgICAgIGxvY2F0aW9uOiB0aGlzLnJlc291cmNlR3JvdXAubG9jYXRpb24sXG4gICAgICBzZXJ2aWNlUGxhbklkOiB0aGlzLnNlcnZpY2VQbGFuLmlkLFxuICAgICAgc3RvcmFnZUFjY291bnROYW1lOiB0aGlzLnN0b3JhZ2VBY2NvdW50Lm5hbWUsXG4gICAgICBpZGVudGl0eToge1xuICAgICAgICB0eXBlOiBmdW5jdGlvbklkZW50aXR5VHlwZSxcbiAgICAgIH0sXG4gICAgICBzdG9yYWdlQWNjb3VudEFjY2Vzc0tleTogdGhpcy5zdG9yYWdlQWNjb3VudC5wcmltYXJ5QWNjZXNzS2V5LFxuICAgICAgc2l0ZUNvbmZpZzoge1xuICAgICAgICBhcHBsaWNhdGlvblN0YWNrOiB7XG4gICAgICAgICAgbm9kZVZlcnNpb246IGZ1bmN0aW9uTm9kZVZlcnNpb24sXG4gICAgICAgIH0sXG4gICAgICAgIGFwcGxpY2F0aW9uSW5zaWdodHNDb25uZWN0aW9uU3RyaW5nOlxuICAgICAgICAgIHRoaXMuYXBwbGljYXRpb25JbnNpZ2h0cy5jb25uZWN0aW9uU3RyaW5nLFxuICAgICAgICBhcHBsaWNhdGlvbkluc2lnaHRzS2V5OiB0aGlzLmFwcGxpY2F0aW9uSW5zaWdodHMuaW5zdHJ1bWVudGF0aW9uS2V5LFxuICAgICAgfSxcbiAgICAgIGh0dHBzT25seTogdHJ1ZSxcbiAgICAgIGFwcFNldHRpbmdzOiBMYXp5LmFueVZhbHVlKHtcbiAgICAgICAgcHJvZHVjZTogKCkgPT4gKHtcbiAgICAgICAgICAuLi50aGlzLmVudixcbiAgICAgICAgICBXRUJTSVRFX1JVTl9GUk9NX1BBQ0tBR0U6IGBodHRwczovLyR7dGhpcy5zdG9yYWdlQWNjb3VudC5uYW1lfS5ibG9iLmNvcmUud2luZG93cy5uZXQvJHtmdW5jdGlvbkNvZGVCdWNrZXQuc3RvcmFnZUNvbnRhaW5lci5uYW1lfS8ke2Z1bmN0aW9uQ29kZUJsb2IubmFtZX1gLFxuICAgICAgICAgIEZVTkNUSU9OU19XT1JLRVJfUlVOVElNRTogZnVuY3Rpb25SdW50aW1lLFxuICAgICAgICB9KSxcbiAgICAgIH0pIGFzIGFueSxcbiAgICB9KTtcblxuICAgIC8vIEFwcGx5IHBlcm1pc3Npb25zIGZyb20gYm91bmQgcmVzb3VyY2VzXG4gICAgZm9yIChjb25zdCBrZXkgb2YgdGhpcy5wZXJtaXNzaW9ucy5rZXlzKCkgfHwgW10pIHtcbiAgICAgIGNvbnN0IHNjb3BlZFJvbGVBc3NpZ25tZW50ID0gdGhpcy5wZXJtaXNzaW9ucz8uZ2V0KFxuICAgICAgICBrZXlcbiAgICAgICkgYXMgU2NvcGVkUm9sZUFzc2lnbm1lbnQ7XG4gICAgICBuZXcgUm9sZUFzc2lnbm1lbnQodGhpcywgYFJvbGVBc3NpZ25tZW50JHtrZXl9YCwge1xuICAgICAgICBzY29wZTogc2NvcGVkUm9sZUFzc2lnbm1lbnQuc2NvcGUsXG4gICAgICAgIHJvbGVEZWZpbml0aW9uTmFtZTogc2NvcGVkUm9sZUFzc2lnbm1lbnQucm9sZURlZmluaXRpb25OYW1lLFxuICAgICAgICBwcmluY2lwYWxJZDogdGhpcy5mdW5jdGlvbi5pZGVudGl0eS5wcmluY2lwYWxJZCxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHJvbGVBc3NpZ25tZW50ID0ge1xuICAgICAgcHJpbmNpcGFsSWQ6IHRoaXMuZnVuY3Rpb24uaWRlbnRpdHkucHJpbmNpcGFsSWQsXG4gICAgICByb2xlRGVmaW5pdGlvbk5hbWU6IFN0b3JhZ2VBY2NvdW50UGVybWlzc2lvbnMuUkVBRCxcbiAgICAgIHNjb3BlOiB0aGlzLnN0b3JhZ2VBY2NvdW50LmlkLFxuICAgIH07XG4gICAgLy8gQWRkIHBlcm1pc3Npb25zIHRvIHJlYWQgZnVuY3Rpb24gY29kZVxuICAgIG5ldyBSb2xlQXNzaWdubWVudCh0aGlzLCBgUmVhZExhbWJkYUNvZGVBc3NpZ25tZW50YCwgcm9sZUFzc2lnbm1lbnQpO1xuXG4gICAgdGhpcy5wZXJtaXNzaW9ucy5zZXQoXG4gICAgICBgJHt0aGlzLnN0b3JhZ2VBY2NvdW50Lm5vZGUuYWRkci5zdWJzdHJpbmcoLTgpfV8ke1xuICAgICAgICBTdG9yYWdlQWNjb3VudFBlcm1pc3Npb25zLlJFQURcbiAgICAgIH1gLFxuICAgICAgcm9sZUFzc2lnbm1lbnRcbiAgICApO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwdWJsaWMgX3ByZVN5bnRoZXNpemUoKTogdm9pZCB7XG4gICAgc3VwZXIuX3ByZVN5bnRoZXNpemUoKTtcblxuICAgIGNvbnN0IGJ1bmRsZSA9IGNyZWF0ZUJ1bmRsZSh0aGlzLmVudHJ5cG9pbnQpO1xuICAgIGNvbnN0IGNvZGVEaXIgPSBidW5kbGUuZGlyZWN0b3J5O1xuXG4gICAgLy8gUGFja2FnZSB1cCBjb2RlIGluIGF6dXJlIGV4cGVjdGVkIGZvcm1hdFxuICAgIGNvbnN0IG91dERpciA9IGAke2NvZGVEaXJ9LyR7dGhpcy5mdW5jdGlvbk5hbWV9YDtcblxuICAgIC8vIE1vdmUgaW5kZXguanMgdG8gZnVuY3Rpb24gbmFtZSBkaXJlY3RvcnkuIEV2ZXJ5IEF6dXJlIGZ1bmN0aW9uIGluIGEgZnVuY3Rpb24gYXBwXG4gICAgLy8gbXVzdCBiZSBpbiBpdHMgb3duIGZvbGRlciBjb250YWluaW5nIGFuIGluZGV4LmpzIGFuZCBmdW5jdGlvbi5qc29uIGZpbGVzXG4gICAgZnMubWtkaXJTeW5jKGAke2NvZGVEaXJ9LyR7dGhpcy5mdW5jdGlvbk5hbWV9YCk7XG4gICAgZnMucmVuYW1lU3luYyhidW5kbGUub3V0ZmlsZVBhdGgsIGAke291dERpcn0vaW5kZXguanNgKTtcblxuICAgIC8vIEFzIHBlciBkb2N1bWVudGF0aW9uIFwiYSBmdW5jdGlvbiBtdXN0IGhhdmUgZXhhY3RseSBvbmUgdHJpZ2dlclwiIHNvIGZvciBub3dcbiAgICAvLyBieSBkZWZhdWx0IGEgZnVuY3Rpb24gd2lsbCBzdXBwb3J0IGh0dHAgZ2V0IHJlcXVlc3RzXG4gICAgLy8gd2hlbiB3ZSBsaWZ0IG90aGVyIHJlc291cmNlcyBsaWtlIHF1ZXVlcyBvciB0b3BpY3MgdGhpcyBmdW5jdGlvbi5qc29uIHdpbGwgbmVlZCB0b1xuICAgIC8vIGJlIG92ZXJ3cml0dGVuIHdpdGggdGhlIGNvcnJlY3QgdHJpZ2dlclxuICAgIC8vIGh0dHBzOi8vbGVhcm4ubWljcm9zb2Z0LmNvbS9lbi11cy9henVyZS9henVyZS1mdW5jdGlvbnMvZnVuY3Rpb25zLXRyaWdnZXJzLWJpbmRpbmdzP3RhYnM9Y3NoYXJwXG4gICAgZnMud3JpdGVGaWxlU3luYyhcbiAgICAgIGAke291dERpcn0vZnVuY3Rpb24uanNvbmAsXG4gICAgICBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGJpbmRpbmdzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgYXV0aExldmVsOiBcImFub255bW91c1wiLCAvLyBUT0RPOiB0aGlzIGF1dGggbGV2ZWwgd2lsbCBiZSBjaGFuZ2VkIHdpdGggaHR0cHM6Ly9naXRodWIuY29tL3dpbmdsYW5nL3dpbmcvaXNzdWVzLzQ0OTdcbiAgICAgICAgICAgIHR5cGU6IFwiaHR0cFRyaWdnZXJcIixcbiAgICAgICAgICAgIGRpcmVjdGlvbjogXCJpblwiLFxuICAgICAgICAgICAgbmFtZTogXCJyZXFcIixcbiAgICAgICAgICAgIG1ldGhvZHM6IFtcImdldFwiLCBcInBvc3RcIl0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiBcImh0dHBcIixcbiAgICAgICAgICAgIGRpcmVjdGlvbjogXCJvdXRcIixcbiAgICAgICAgICAgIG5hbWU6IFwicmVzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH0pXG4gICAgKTtcblxuICAgIC8vIFdyaXRlIGhvc3QuanNvbiBmaWxlIHRvIHNldCBmdW5jdGlvbiB0aW1lb3V0IChtdXN0IGJlIHNldCBpbiByb290IG9mIGZ1bmN0aW9uIGFwcClcbiAgICAvLyBodHRwczovL2xlYXJuLm1pY3Jvc29mdC5jb20vZW4tdXMvYXp1cmUvYXp1cmUtZnVuY3Rpb25zL2Z1bmN0aW9ucy1ob3N0LWpzb25cbiAgICAvLyB0aGlzIG1lYW5zIHRoYXQgdGltZW91dCBpcyBzZXQgZm9yIGFsbCBmdW5jdGlvbnMgaW4gdGhlIGZ1bmN0aW9uIGFwcFxuICAgIGZzLndyaXRlRmlsZVN5bmMoXG4gICAgICBgJHtjb2RlRGlyfS9ob3N0Lmpzb25gLFxuICAgICAgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICB2ZXJzaW9uOiBcIjIuMFwiLFxuICAgICAgICAvL1RPRE86IG5lZWQgdG8gcmVhZCB0aGUgZG9jdW1lbnRhdGlvbiBhbmQgcGFyc2UgdGhlIG51bWJlciBpbiB0aGUgcmlnaHQgd2F5LFxuICAgICAgICAvLyB3aGlsZSBub3Qgc3VycGFzc2luZyB0aGUgbGltaXRzLCBzaW5jZSBpdCB3aWxsIGJlIHJlc3VsdGVkIGluIGEgaGFyZCB0byBkZXRlY3QgZXJyb3JcbiAgICAgICAgZnVuY3Rpb25UaW1lb3V0OiBgMDA6MDE6MDBgLFxuICAgICAgfSlcbiAgICApO1xuXG4gICAgLy8gQ3JlYXRlIHppcCBhc3NldCBmcm9tIGZ1bmN0aW9uIGNvZGVcbiAgICBjb25zdCBhc3NldCA9IG5ldyBUZXJyYWZvcm1Bc3NldCh0aGlzLCBcIkFzc2V0XCIsIHtcbiAgICAgIHBhdGg6IGAke2NvZGVEaXJ9YCxcbiAgICAgIHR5cGU6IEFzc2V0VHlwZS5BUkNISVZFLFxuICAgIH0pO1xuXG4gICAgdGhpcy5hc3NldFBhdGggPSBhc3NldC5wYXRoO1xuICB9XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIG5hbWUsIHVzZWQgZm9yIGludm9jYXRpb25cbiAgICovXG4gIGdldCBuYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZnVuY3Rpb24ubmFtZTtcbiAgfVxuXG4gIC8qKlxuICAgKiAgQWRkcyByb2xlIHRvIGZ1bmN0aW9uIGZvciBnaXZlbiBhenVyZSBzY29wZVxuICAgKlxuICAgKiBAcGFyYW0gc2NvcGVkUmVzb3VyY2UgLSBUaGUgcmVzb3VyY2UgdG8gd2hpY2ggdGhlIHJvbGUgYXNzaWdubWVudCB3aWxsIGJlIHNjb3BlZC5cbiAgICogQHBhcmFtIHNjb3BlZFJvbGVBc3NpZ25tZW50IC0gVGhlIG1hcHBpbmcgb2YgYXp1cmUgc2NvcGUgdG8gcm9sZSBkZWZpbml0aW9uIG5hbWUuXG4gICAqL1xuICBwdWJsaWMgYWRkUGVybWlzc2lvbihcbiAgICBzY29wZWRSZXNvdXJjZTogQ29uc3RydWN0LFxuICAgIHNjb3BlZFJvbGVBc3NpZ25tZW50OiBTY29wZWRSb2xlQXNzaWdubWVudFxuICApIHtcbiAgICBjb25zdCB1bmlxdWVJZCA9IHNjb3BlZFJlc291cmNlLm5vZGUuYWRkci5zdWJzdHJpbmcoLTgpO1xuICAgIGNvbnN0IHBlcm1pc3Npb25zS2V5ID0gYCR7dW5pcXVlSWR9XyR7c2NvcGVkUm9sZUFzc2lnbm1lbnQucm9sZURlZmluaXRpb25OYW1lfWA7XG4gICAgLy8gSWYgdGhlIGZ1bmN0aW9uIGhhcyBhbHJlYWR5IGJlZW4gaW5pdGlhbGl6ZWQgYXR0YWNoIHRoZSByb2xlIGFzc2lnbm1lbnQgZGlyZWN0bHlcbiAgICBpZiAodGhpcy5mdW5jdGlvbikge1xuICAgICAgaWYgKHRoaXMucGVybWlzc2lvbnMuaGFzKHBlcm1pc3Npb25zS2V5KSkge1xuICAgICAgICByZXR1cm47IC8vIGFscmVhZHkgZXhpc3RzXG4gICAgICB9XG5cbiAgICAgIG5ldyBSb2xlQXNzaWdubWVudCh0aGlzLCBgUm9sZUFzc2lnbm1lbnQke3Blcm1pc3Npb25zS2V5fWAsIHtcbiAgICAgICAgc2NvcGU6IHNjb3BlZFJvbGVBc3NpZ25tZW50LnNjb3BlLFxuICAgICAgICByb2xlRGVmaW5pdGlvbk5hbWU6IHNjb3BlZFJvbGVBc3NpZ25tZW50LnJvbGVEZWZpbml0aW9uTmFtZSxcbiAgICAgICAgcHJpbmNpcGFsSWQ6IHRoaXMuZnVuY3Rpb24uaWRlbnRpdHkucHJpbmNpcGFsSWQsXG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5wZXJtaXNzaW9ucy5zZXQocGVybWlzc2lvbnNLZXksIHNjb3BlZFJvbGVBc3NpZ25tZW50KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBfZ2V0Q29kZUxpbmVzKGhhbmRsZXI6IGNsb3VkLklGdW5jdGlvbkhhbmRsZXIpOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgaW5mbGlnaHRDbGllbnQgPSBoYW5kbGVyLl90b0luZmxpZ2h0KCk7XG4gICAgY29uc3QgbGluZXMgPSBuZXcgQXJyYXk8c3RyaW5nPigpO1xuXG4gICAgbGluZXMucHVzaCgnXCJ1c2Ugc3RyaWN0XCI7Jyk7XG4gICAgbGluZXMucHVzaChcIm1vZHVsZS5leHBvcnRzID0gYXN5bmMgZnVuY3Rpb24oY29udGV4dCwgcmVxKSB7XCIpO1xuICAgIGxpbmVzLnB1c2goXG4gICAgICBgICBjb25zdCBib2R5ID0gYXdhaXQgKCR7aW5mbGlnaHRDbGllbnR9KS5oYW5kbGUoY29udGV4dC5yZXEuYm9keSA/PyBcIlwiKTtgXG4gICAgKTtcbiAgICBsaW5lcy5wdXNoKGAgIGNvbnRleHQucmVzID0geyBib2R5IH07YCk7XG4gICAgbGluZXMucHVzaChgfTtgKTtcblxuICAgIHJldHVybiBsaW5lcztcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHVibGljIGdldCBfbGlmdE1hcCgpOiBMaWZ0TWFwIHtcbiAgICByZXR1cm4ge1xuICAgICAgW2Nsb3VkLkZ1bmN0aW9uSW5mbGlnaHRNZXRob2RzLklOVk9LRV06IFtbdGhpcy5oYW5kbGVyLCBbXCJoYW5kbGVcIl1dXSxcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIG9uTGlmdChob3N0OiBJSW5mbGlnaHRIb3N0LCBvcHM6IHN0cmluZ1tdKTogdm9pZCB7XG4gICAgLy9UT0RPOiBhZGQgcGVybWlzc2lvbnMgaGVyZSB3aGVuIGNoYW5naW5nIGF1dGggbGV2ZWw6IGh0dHBzOi8vZ2l0aHViLmNvbS93aW5nbGFuZy93aW5nL2lzc3Vlcy80NDk3XG4gICAgaG9zdC5hZGRFbnZpcm9ubWVudCh0aGlzLmVudk5hbWUoKSwgdGhpcy5mdW5jdGlvbi5uYW1lKTtcblxuICAgIHN1cGVyLm9uTGlmdChob3N0LCBvcHMpO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwdWJsaWMgX3RvSW5mbGlnaHQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gY29yZS5JbmZsaWdodENsaWVudC5mb3IoXG4gICAgICBfX2Rpcm5hbWUucmVwbGFjZShcInRhcmdldC10Zi1henVyZVwiLCBcInNoYXJlZC1henVyZVwiKSxcbiAgICAgIF9fZmlsZW5hbWUsXG4gICAgICBcIkZ1bmN0aW9uQ2xpZW50XCIsXG4gICAgICBbYHByb2Nlc3MuZW52W1wiJHt0aGlzLmVudk5hbWUoKX1cIl1gXVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGVudk5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYEZVTkNUSU9OX05BTUVfJHt0aGlzLm5vZGUuYWRkci5zbGljZSgtOCl9YDtcbiAgfVxufVxuIl19