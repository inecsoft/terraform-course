"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bucket = void 0;
const app_1 = require("./app");
const function_1 = require("./function");
const permissions_1 = require("./permissions");
const project_service_1 = require("../.gen/providers/google/project-service");
const storage_bucket_1 = require("../.gen/providers/google/storage-bucket");
const storage_bucket_iam_member_1 = require("../.gen/providers/google/storage-bucket-iam-member");
const storage_bucket_object_1 = require("../.gen/providers/google/storage-bucket-object");
const id_1 = require("../.gen/providers/random/id");
const cloud = __importStar(require("../cloud"));
const core_1 = require("../core");
const errors_1 = require("../core/errors");
const resource_names_1 = require("../shared/resource-names");
/**
 * Bucket names must be between 3 and 63 characters. We reserve 9 characters for
 * a random ID, so the maximum length is 54.
 *
 * You can use lowercase alphanumeric characters, dashes (-), underscores (_),
 * and dots (.). However, names containing dots require verification, so we
 * generate names without dots by default.
 *
 * We skip generating a hash since we need to append a random string to the
 * bucket name to make it globally unique.
 *
 * See: https://cloud.google.com/storage/docs/naming-buckets
 */
const BUCKET_NAME_OPTS = {
    maxLen: 54,
    case: resource_names_1.CaseConventions.LOWERCASE,
    disallowedRegex: /([^a-z0-9_\-]+)/g,
    includeHash: false,
};
/**
 * GCP implementation of `cloud.Bucket`.
 *
 * @inflight `@winglang/sdk.cloud.IBucketClient`
 */
class Bucket extends cloud.Bucket {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        const bucketName = resource_names_1.ResourceNames.generateName(this, BUCKET_NAME_OPTS);
        // GCP bucket names must be globally unique, but the Terraform resource
        // provider doesn't provide a mechanism like `bucketPrefix` as AWS does,
        // so we must generate a random string to append to the bucket name.
        //
        // The random string must be managed in Terraform state so that it doesn't
        // change on every subsequent compile or deployment.
        const randomId = new id_1.Id(this, "Id", {
            byteLength: 4, // 4 bytes = 8 hex characters
        });
        const isTestEnvironment = app_1.App.of(scope).isTestEnvironment;
        // Enable `IAM Service Account Credentials API` for the project
        // This is disabled by default, but required for generating presigned URLs
        const iamServiceAccountCredentialsApi = new project_service_1.ProjectService(this, "IamServiceAccountCredentialsApi", {
            service: "iamcredentials.googleapis.com",
            disableDependentServices: false,
            disableOnDestroy: false,
        });
        this.bucket = new storage_bucket_1.StorageBucket(this, "Default", {
            name: bucketName + "-" + randomId.hex,
            location: app_1.App.of(this).region,
            // recommended by GCP: https://cloud.google.com/storage/docs/uniform-bucket-level-access#should-you-use
            uniformBucketLevelAccess: true,
            publicAccessPrevention: props.public ? "inherited" : "enforced",
            forceDestroy: !!isTestEnvironment,
            dependsOn: [iamServiceAccountCredentialsApi],
        });
        if (props.public) {
            // https://cloud.google.com/storage/docs/access-control/making-data-public#terraform
            new storage_bucket_iam_member_1.StorageBucketIamMember(this, "PublicAccessIamMember", {
                bucket: this.bucket.name,
                role: "roles/storage.objectViewer",
                member: "allUsers",
            });
        }
    }
    /** @internal */
    get _liftMap() {
        return {
            [cloud.BucketInflightMethods.DELETE]: [],
            [cloud.BucketInflightMethods.GET]: [],
            [cloud.BucketInflightMethods.GET_JSON]: [],
            [cloud.BucketInflightMethods.LIST]: [],
            [cloud.BucketInflightMethods.PUT]: [],
            [cloud.BucketInflightMethods.PUT_JSON]: [],
            [cloud.BucketInflightMethods.PUBLIC_URL]: [],
            [cloud.BucketInflightMethods.EXISTS]: [],
            [cloud.BucketInflightMethods.TRY_GET]: [],
            [cloud.BucketInflightMethods.TRY_GET_JSON]: [],
            [cloud.BucketInflightMethods.TRY_DELETE]: [],
            [cloud.BucketInflightMethods.METADATA]: [],
            [cloud.BucketInflightMethods.COPY]: [],
            [cloud.BucketInflightMethods.RENAME]: [],
            [cloud.BucketInflightMethods.SIGNED_URL]: [],
        };
    }
    addObject(key, body) {
        new storage_bucket_object_1.StorageBucketObject(this, `Object-${key}`, {
            bucket: this.bucket.id,
            name: key,
            content: body,
        });
    }
    /**
     * Run an inflight whenever a file is uploaded to the bucket.
     */
    onCreate(fn, opts) {
        fn;
        opts;
        throw new errors_1.NotImplementedError("onCreate method isn't implemented yet on the current target.", {
            resource: this.constructor.name,
            operation: cloud.BucketEventType.CREATE,
        });
    }
    /**
     * Run an inflight whenever a file is deleted from the bucket.
     */
    onDelete(fn, opts) {
        fn;
        opts;
        throw new errors_1.NotImplementedError("onDelete method isn't implemented yet on the current target.", {
            resource: this.constructor.name,
            operation: cloud.BucketEventType.DELETE,
        });
    }
    /**
     * Run an inflight whenever a file is updated in the bucket.
     */
    onUpdate(fn, opts) {
        fn;
        opts;
        throw new errors_1.NotImplementedError("onUpdate method isn't implemented yet on the current target.", {
            resource: this.constructor.name,
            operation: cloud.BucketEventType.UPDATE,
        });
    }
    /**
     * Run an inflight whenever a file is uploaded, modified, or deleted from the bucket.
     */
    onEvent(fn, opts) {
        fn;
        opts;
        throw new errors_1.NotImplementedError("onEvent method isn't implemented yet on the current target.", { resource: this.constructor.name, operation: "onEvent" });
    }
    onLift(host, ops) {
        if (!(host instanceof function_1.Function)) {
            throw new Error("buckets can only be bound by tfgcp.Function for now");
        }
        const permissions = (0, permissions_1.calculateBucketPermissions)(ops);
        host.addPermissions(permissions);
        host.addEnvironment(this.envName(), this.bucket.name);
        super.onLift(host, ops);
    }
    /** @internal */
    _toInflight() {
        return core_1.InflightClient.for(__dirname.replace("target-tf-gcp", "shared-gcp"), __filename, "BucketClient", [`process.env["${this.envName()}"]`]);
    }
    envName() {
        return `BUCKET_NAME_${this.node.addr.slice(-8)}`;
    }
}
exports.Bucket = Bucket;
//# sourceMappingURL=data:application/json;base64,