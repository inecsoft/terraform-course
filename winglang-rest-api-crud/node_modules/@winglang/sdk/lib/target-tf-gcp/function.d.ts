import { Construct } from "constructs";
import { ServiceAccount } from "../.gen/providers/google/service-account";
import * as cloud from "../cloud";
import { LiftMap } from "../core";
import { IInflightHost } from "../std";
/**
 * Interface for GCP Cloud Function
 */
export interface IGcpFunction {
    /**
     * GCP Function Name
     */
    readonly name: string;
    /**
     * GCP HTTPS Trigger URL
     */
    readonly httpsTriggerUrl: string;
}
/**
 * GCP implementation of `cloud.Function`.
 *
 * @inflight `@winglang/sdk.cloud.IFunctionClient`
 */
export declare class Function extends cloud.Function {
    /**
     * Attempts to cast an IInflightHost to an IGcpFunction if it is one.
     * @param host The IInflightHost instance to check and cast.
     * @returns An IGcpFunction if the host is a GCP function, undefined otherwise.
     */
    static from(host: IInflightHost): IGcpFunction | undefined;
    /**
     * Checks if the given object is an instance of IGcpFunction.
     * @param obj The object to check.
     * @returns true if the object is an IGcpFunction, false otherwise.
     */
    private static isGcpFunction;
    private readonly function;
    private readonly functionServiceAccount;
    private readonly functionCustomRole;
    private readonly permissions;
    private assetPath;
    constructor(scope: Construct, id: string, inflight: cloud.IFunctionHandler, props?: cloud.FunctionProps);
    /**
     * @internal
     * @param handler IFunctionHandler
     * @returns the function code lines as strings
     */
    protected _getCodeLines(handler: cloud.IFunctionHandler): string[];
    /** @internal */
    _preSynthesize(): void;
    get functionName(): string;
    get serviceAccountEmail(): string;
    get project(): string;
    get region(): string;
    /** @internal */
    get _liftMap(): LiftMap;
    /** @internal */
    _toInflight(): string;
    addPermissions(permissions: string[]): void;
    onLift(host: IInflightHost, ops: string[]): void;
    /**
     * Grants the given service account permission to invoke this function.
     * @param serviceAccount The service account to grant invoke permissions to.
     * @internal
     */
    _addPermissionToInvoke(serviceAccount: ServiceAccount): void;
    /** @internal */
    _getHttpsTriggerUrl(): string;
    private envName;
    private regionEnv;
    private projectEnv;
}
