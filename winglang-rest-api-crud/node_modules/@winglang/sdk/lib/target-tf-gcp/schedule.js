"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Schedule = void 0;
const app_1 = require("./app");
const function_1 = require("./function");
const cloud_scheduler_job_1 = require("../.gen/providers/google/cloud-scheduler-job");
const service_account_1 = require("../.gen/providers/google/service-account");
const cloud = __importStar(require("../cloud"));
const core = __importStar(require("../core"));
const std_1 = require("../std");
/**
 * GCP implementation of `cloud.Schedule`.
 *
 * @inflight `@winglang/sdk.cloud.IScheduleClient`
 */
class Schedule extends cloud.Schedule {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        // private readonly scheduler: CloudSchedulerJob;
        this.handlers = {};
        const { rate, cron } = props;
        /*
         * A schedule is defined using the unix-cron string format (* * * * *) which
         * is a set of five fields in a line, indicating when the job should be executed.
         * https://cloud.google.com/scheduler/docs/configuring/cron-job-schedules
         */
        this.scheduleExpression = (rate ? `*/${rate.minutes} * * * *` : cron);
    }
    onTick(inflight, props = {}) {
        const uniqueId = this.node.addr.substring(0, 8);
        const functionHandler = core.lift({ inflight }).inflight(async (ctx) => {
            await ctx.inflight();
        });
        let cronFunction = this.handlers[inflight._id];
        if (cronFunction) {
            return cronFunction;
        }
        cronFunction = new function_1.Function(this, app_1.App.of(this).makeId(this, "OnTick"), functionHandler, props);
        this.handlers[inflight._id] = cronFunction;
        // create scheduler service account
        const schedulerServiceAccount = new service_account_1.ServiceAccount(this, "SchedulerServiceAccount", {
            accountId: `scheduler-${uniqueId}-sa`,
            displayName: `Service Account for scheduler-${uniqueId}`,
        });
        // allow scheduler service account to invoke cron function
        cronFunction._addPermissionToInvoke(schedulerServiceAccount);
        // create scheduler
        new cloud_scheduler_job_1.CloudSchedulerJob(this, "Scheduler", {
            name: `scheduler-${uniqueId}`,
            description: `Trigger ${cronFunction.functionName}`,
            schedule: this.scheduleExpression,
            timeZone: "Etc/UTC",
            attemptDeadline: "300s",
            httpTarget: {
                httpMethod: "GET",
                uri: cronFunction._getHttpsTriggerUrl(),
                oidcToken: {
                    serviceAccountEmail: schedulerServiceAccount.email,
                },
            },
        });
        std_1.Node.of(this).addConnection({
            source: this,
            sourceOp: cloud.ScheduleInflightMethods.TICK,
            target: cronFunction,
            targetOp: cloud.FunctionInflightMethods.INVOKE,
            name: "onTick()",
        });
        return cronFunction;
    }
    /** @internal */
    _toInflight() {
        return core.InflightClient.for(__dirname.replace("target-tf-gcp", "shared-gcp"), __filename, "ScheduleClient", [`process.env["${this.envName()}"]`]);
    }
    envName() {
        return `SCHEDULE_EVENT_${this.node.addr.slice(-8)}`;
    }
}
exports.Schedule = Schedule;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZWR1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGFyZ2V0LXRmLWdjcC9zY2hlZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBLCtCQUE0QjtBQUM1Qix5Q0FBc0M7QUFDdEMsc0ZBQWlGO0FBQ2pGLDhFQUEwRTtBQUMxRSxnREFBa0M7QUFDbEMsOENBQWdDO0FBQ2hDLGdDQUE4QjtBQUU5Qjs7OztHQUlHO0FBQ0gsTUFBYSxRQUFTLFNBQVEsS0FBSyxDQUFDLFFBQVE7SUFLMUMsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxRQUE2QixFQUFFO1FBQ3ZFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBSjFCLGlEQUFpRDtRQUNoQyxhQUFRLEdBQTZCLEVBQUUsQ0FBQztRQUt2RCxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQztRQUU3Qjs7OztXQUlHO1FBQ0gsSUFBSSxDQUFDLGtCQUFrQixHQUFHLENBQ3hCLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsT0FBTyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDaEMsQ0FBQztJQUNkLENBQUM7SUFFTSxNQUFNLENBQ1gsUUFBc0MsRUFDdEMsUUFBcUMsRUFBRTtRQUV2QyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRWhELE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDckUsTUFBTSxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDdkIsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMvQyxJQUFJLFlBQVksRUFBRSxDQUFDO1lBQ2pCLE9BQU8sWUFBWSxDQUFDO1FBQ3RCLENBQUM7UUFFRCxZQUFZLEdBQUcsSUFBSSxtQkFBUSxDQUN6QixJQUFJLEVBQ0osU0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxFQUNuQyxlQUFlLEVBQ2YsS0FBSyxDQUNOLENBQUM7UUFDRixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxZQUFZLENBQUM7UUFFM0MsbUNBQW1DO1FBQ25DLE1BQU0sdUJBQXVCLEdBQUcsSUFBSSxnQ0FBYyxDQUNoRCxJQUFJLEVBQ0oseUJBQXlCLEVBQ3pCO1lBQ0UsU0FBUyxFQUFFLGFBQWEsUUFBUSxLQUFLO1lBQ3JDLFdBQVcsRUFBRSxpQ0FBaUMsUUFBUSxFQUFFO1NBQ3pELENBQ0YsQ0FBQztRQUVGLDBEQUEwRDtRQUMxRCxZQUFZLENBQUMsc0JBQXNCLENBQUMsdUJBQXVCLENBQUMsQ0FBQztRQUU3RCxtQkFBbUI7UUFDbkIsSUFBSSx1Q0FBaUIsQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFO1lBQ3ZDLElBQUksRUFBRSxhQUFhLFFBQVEsRUFBRTtZQUM3QixXQUFXLEVBQUUsV0FBVyxZQUFZLENBQUMsWUFBWSxFQUFFO1lBQ25ELFFBQVEsRUFBRSxJQUFJLENBQUMsa0JBQWtCO1lBQ2pDLFFBQVEsRUFBRSxTQUFTO1lBQ25CLGVBQWUsRUFBRSxNQUFNO1lBQ3ZCLFVBQVUsRUFBRTtnQkFDVixVQUFVLEVBQUUsS0FBSztnQkFDakIsR0FBRyxFQUFFLFlBQVksQ0FBQyxtQkFBbUIsRUFBRTtnQkFDdkMsU0FBUyxFQUFFO29CQUNULG1CQUFtQixFQUFFLHVCQUF1QixDQUFDLEtBQUs7aUJBQ25EO2FBQ0Y7U0FDRixDQUFDLENBQUM7UUFFSCxVQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLGFBQWEsQ0FBQztZQUMxQixNQUFNLEVBQUUsSUFBSTtZQUNaLFFBQVEsRUFBRSxLQUFLLENBQUMsdUJBQXVCLENBQUMsSUFBSTtZQUM1QyxNQUFNLEVBQUUsWUFBWTtZQUNwQixRQUFRLEVBQUUsS0FBSyxDQUFDLHVCQUF1QixDQUFDLE1BQU07WUFDOUMsSUFBSSxFQUFFLFVBQVU7U0FDakIsQ0FBQyxDQUFDO1FBRUgsT0FBTyxZQUFZLENBQUM7SUFDdEIsQ0FBQztJQUVELGdCQUFnQjtJQUNULFdBQVc7UUFDaEIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FDNUIsU0FBUyxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsWUFBWSxDQUFDLEVBQ2hELFVBQVUsRUFDVixnQkFBZ0IsRUFDaEIsQ0FBQyxnQkFBZ0IsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FDckMsQ0FBQztJQUNKLENBQUM7SUFFTyxPQUFPO1FBQ2IsT0FBTyxrQkFBa0IsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUN0RCxDQUFDO0NBQ0Y7QUFoR0QsNEJBZ0dDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCB7IEFwcCB9IGZyb20gXCIuL2FwcFwiO1xuaW1wb3J0IHsgRnVuY3Rpb24gfSBmcm9tIFwiLi9mdW5jdGlvblwiO1xuaW1wb3J0IHsgQ2xvdWRTY2hlZHVsZXJKb2IgfSBmcm9tIFwiLi4vLmdlbi9wcm92aWRlcnMvZ29vZ2xlL2Nsb3VkLXNjaGVkdWxlci1qb2JcIjtcbmltcG9ydCB7IFNlcnZpY2VBY2NvdW50IH0gZnJvbSBcIi4uLy5nZW4vcHJvdmlkZXJzL2dvb2dsZS9zZXJ2aWNlLWFjY291bnRcIjtcbmltcG9ydCAqIGFzIGNsb3VkIGZyb20gXCIuLi9jbG91ZFwiO1xuaW1wb3J0ICogYXMgY29yZSBmcm9tIFwiLi4vY29yZVwiO1xuaW1wb3J0IHsgTm9kZSB9IGZyb20gXCIuLi9zdGRcIjtcblxuLyoqXG4gKiBHQ1AgaW1wbGVtZW50YXRpb24gb2YgYGNsb3VkLlNjaGVkdWxlYC5cbiAqXG4gKiBAaW5mbGlnaHQgYEB3aW5nbGFuZy9zZGsuY2xvdWQuSVNjaGVkdWxlQ2xpZW50YFxuICovXG5leHBvcnQgY2xhc3MgU2NoZWR1bGUgZXh0ZW5kcyBjbG91ZC5TY2hlZHVsZSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgc2NoZWR1bGVFeHByZXNzaW9uOiBzdHJpbmc7XG4gIC8vIHByaXZhdGUgcmVhZG9ubHkgc2NoZWR1bGVyOiBDbG91ZFNjaGVkdWxlckpvYjtcbiAgcHJpdmF0ZSByZWFkb25seSBoYW5kbGVyczogUmVjb3JkPHN0cmluZywgRnVuY3Rpb24+ID0ge307XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IGNsb3VkLlNjaGVkdWxlUHJvcHMgPSB7fSkge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xuXG4gICAgY29uc3QgeyByYXRlLCBjcm9uIH0gPSBwcm9wcztcblxuICAgIC8qXG4gICAgICogQSBzY2hlZHVsZSBpcyBkZWZpbmVkIHVzaW5nIHRoZSB1bml4LWNyb24gc3RyaW5nIGZvcm1hdCAoKiAqICogKiAqKSB3aGljaFxuICAgICAqIGlzIGEgc2V0IG9mIGZpdmUgZmllbGRzIGluIGEgbGluZSwgaW5kaWNhdGluZyB3aGVuIHRoZSBqb2Igc2hvdWxkIGJlIGV4ZWN1dGVkLlxuICAgICAqIGh0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbS9zY2hlZHVsZXIvZG9jcy9jb25maWd1cmluZy9jcm9uLWpvYi1zY2hlZHVsZXNcbiAgICAgKi9cbiAgICB0aGlzLnNjaGVkdWxlRXhwcmVzc2lvbiA9IChcbiAgICAgIHJhdGUgPyBgKi8ke3JhdGUubWludXRlc30gKiAqICogKmAgOiBjcm9uXG4gICAgKSBhcyBzdHJpbmc7XG4gIH1cblxuICBwdWJsaWMgb25UaWNrKFxuICAgIGluZmxpZ2h0OiBjbG91ZC5JU2NoZWR1bGVPblRpY2tIYW5kbGVyLFxuICAgIHByb3BzOiBjbG91ZC5TY2hlZHVsZU9uVGlja09wdGlvbnMgPSB7fVxuICApOiBjbG91ZC5GdW5jdGlvbiB7XG4gICAgY29uc3QgdW5pcXVlSWQgPSB0aGlzLm5vZGUuYWRkci5zdWJzdHJpbmcoMCwgOCk7XG5cbiAgICBjb25zdCBmdW5jdGlvbkhhbmRsZXIgPSBjb3JlLmxpZnQoeyBpbmZsaWdodCB9KS5pbmZsaWdodChhc3luYyAoY3R4KSA9PiB7XG4gICAgICBhd2FpdCBjdHguaW5mbGlnaHQoKTtcbiAgICB9KTtcblxuICAgIGxldCBjcm9uRnVuY3Rpb24gPSB0aGlzLmhhbmRsZXJzW2luZmxpZ2h0Ll9pZF07XG4gICAgaWYgKGNyb25GdW5jdGlvbikge1xuICAgICAgcmV0dXJuIGNyb25GdW5jdGlvbjtcbiAgICB9XG5cbiAgICBjcm9uRnVuY3Rpb24gPSBuZXcgRnVuY3Rpb24oXG4gICAgICB0aGlzLFxuICAgICAgQXBwLm9mKHRoaXMpLm1ha2VJZCh0aGlzLCBcIk9uVGlja1wiKSxcbiAgICAgIGZ1bmN0aW9uSGFuZGxlcixcbiAgICAgIHByb3BzXG4gICAgKTtcbiAgICB0aGlzLmhhbmRsZXJzW2luZmxpZ2h0Ll9pZF0gPSBjcm9uRnVuY3Rpb247XG5cbiAgICAvLyBjcmVhdGUgc2NoZWR1bGVyIHNlcnZpY2UgYWNjb3VudFxuICAgIGNvbnN0IHNjaGVkdWxlclNlcnZpY2VBY2NvdW50ID0gbmV3IFNlcnZpY2VBY2NvdW50KFxuICAgICAgdGhpcyxcbiAgICAgIFwiU2NoZWR1bGVyU2VydmljZUFjY291bnRcIixcbiAgICAgIHtcbiAgICAgICAgYWNjb3VudElkOiBgc2NoZWR1bGVyLSR7dW5pcXVlSWR9LXNhYCxcbiAgICAgICAgZGlzcGxheU5hbWU6IGBTZXJ2aWNlIEFjY291bnQgZm9yIHNjaGVkdWxlci0ke3VuaXF1ZUlkfWAsXG4gICAgICB9XG4gICAgKTtcblxuICAgIC8vIGFsbG93IHNjaGVkdWxlciBzZXJ2aWNlIGFjY291bnQgdG8gaW52b2tlIGNyb24gZnVuY3Rpb25cbiAgICBjcm9uRnVuY3Rpb24uX2FkZFBlcm1pc3Npb25Ub0ludm9rZShzY2hlZHVsZXJTZXJ2aWNlQWNjb3VudCk7XG5cbiAgICAvLyBjcmVhdGUgc2NoZWR1bGVyXG4gICAgbmV3IENsb3VkU2NoZWR1bGVySm9iKHRoaXMsIFwiU2NoZWR1bGVyXCIsIHtcbiAgICAgIG5hbWU6IGBzY2hlZHVsZXItJHt1bmlxdWVJZH1gLFxuICAgICAgZGVzY3JpcHRpb246IGBUcmlnZ2VyICR7Y3JvbkZ1bmN0aW9uLmZ1bmN0aW9uTmFtZX1gLFxuICAgICAgc2NoZWR1bGU6IHRoaXMuc2NoZWR1bGVFeHByZXNzaW9uLFxuICAgICAgdGltZVpvbmU6IFwiRXRjL1VUQ1wiLFxuICAgICAgYXR0ZW1wdERlYWRsaW5lOiBcIjMwMHNcIixcbiAgICAgIGh0dHBUYXJnZXQ6IHtcbiAgICAgICAgaHR0cE1ldGhvZDogXCJHRVRcIixcbiAgICAgICAgdXJpOiBjcm9uRnVuY3Rpb24uX2dldEh0dHBzVHJpZ2dlclVybCgpLFxuICAgICAgICBvaWRjVG9rZW46IHtcbiAgICAgICAgICBzZXJ2aWNlQWNjb3VudEVtYWlsOiBzY2hlZHVsZXJTZXJ2aWNlQWNjb3VudC5lbWFpbCxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBOb2RlLm9mKHRoaXMpLmFkZENvbm5lY3Rpb24oe1xuICAgICAgc291cmNlOiB0aGlzLFxuICAgICAgc291cmNlT3A6IGNsb3VkLlNjaGVkdWxlSW5mbGlnaHRNZXRob2RzLlRJQ0ssXG4gICAgICB0YXJnZXQ6IGNyb25GdW5jdGlvbixcbiAgICAgIHRhcmdldE9wOiBjbG91ZC5GdW5jdGlvbkluZmxpZ2h0TWV0aG9kcy5JTlZPS0UsXG4gICAgICBuYW1lOiBcIm9uVGljaygpXCIsXG4gICAgfSk7XG5cbiAgICByZXR1cm4gY3JvbkZ1bmN0aW9uO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwdWJsaWMgX3RvSW5mbGlnaHQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gY29yZS5JbmZsaWdodENsaWVudC5mb3IoXG4gICAgICBfX2Rpcm5hbWUucmVwbGFjZShcInRhcmdldC10Zi1nY3BcIiwgXCJzaGFyZWQtZ2NwXCIpLFxuICAgICAgX19maWxlbmFtZSxcbiAgICAgIFwiU2NoZWR1bGVDbGllbnRcIixcbiAgICAgIFtgcHJvY2Vzcy5lbnZbXCIke3RoaXMuZW52TmFtZSgpfVwiXWBdXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgZW52TmFtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiBgU0NIRURVTEVfRVZFTlRfJHt0aGlzLm5vZGUuYWRkci5zbGljZSgtOCl9YDtcbiAgfVxufVxuIl19