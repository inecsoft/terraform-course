import { Construct } from "constructs";
import { StorageBucket } from "../.gen/providers/google/storage-bucket";
import * as cloud from "../cloud";
import { LiftMap } from "../core";
import { IInflightHost } from "../std";
/**
 * GCP implementation of `cloud.Bucket`.
 *
 * @inflight `@winglang/sdk.cloud.IBucketClient`
 */
export declare class Bucket extends cloud.Bucket {
    readonly bucket: StorageBucket;
    constructor(scope: Construct, id: string, props?: cloud.BucketProps);
    /** @internal */
    get _liftMap(): LiftMap;
    addObject(key: string, body: string): void;
    /**
     * Run an inflight whenever a file is uploaded to the bucket.
     */
    onCreate(fn: cloud.IBucketEventHandler, opts?: cloud.BucketOnCreateOptions): void;
    /**
     * Run an inflight whenever a file is deleted from the bucket.
     */
    onDelete(fn: cloud.IBucketEventHandler, opts?: cloud.BucketOnDeleteOptions): void;
    /**
     * Run an inflight whenever a file is updated in the bucket.
     */
    onUpdate(fn: cloud.IBucketEventHandler, opts?: cloud.BucketOnUpdateOptions): void;
    /**
     * Run an inflight whenever a file is uploaded, modified, or deleted from the bucket.
     */
    onEvent(fn: cloud.IBucketEventHandler, opts?: cloud.BucketOnEventOptions): void;
    onLift(host: IInflightHost, ops: string[]): void;
    /** @internal */
    _toInflight(): string;
    private envName;
}
