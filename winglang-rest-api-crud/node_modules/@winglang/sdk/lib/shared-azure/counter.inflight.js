"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CounterClient = void 0;
const data_tables_1 = require("@azure/data-tables");
const COUNTER_ID = "counter";
const PARTITION_KEY = "partitionKey";
class CounterClient {
    constructor(storageAccountName, storageTableName, accountKeyVariable, initial = 0) {
        this.storageAccountName = storageAccountName;
        this.storageTableName = storageTableName;
        this.accountKeyVariable = accountKeyVariable;
        this.initial = initial;
        if (!process.env[this.accountKeyVariable]) {
            throw new Error("missing storage account key");
        }
        const credentials = new data_tables_1.AzureNamedKeyCredential(this.storageAccountName, process.env[this.accountKeyVariable]);
        this.client = new data_tables_1.TableClient(`https://${this.storageAccountName}.table.core.windows.net`, this.storageTableName, credentials);
    }
    async inc(amount = 1, key = COUNTER_ID) {
        const entity = await this._getEntity(key);
        const currentValue = entity?.counterValue ?? this.initial;
        const newValue = currentValue + amount;
        await this._upsertEntity(key, newValue);
        return currentValue;
    }
    async dec(amount = 1, key = COUNTER_ID) {
        return this.inc(-1 * amount, key);
    }
    async peek(key = COUNTER_ID) {
        const entity = await this._getEntity(key);
        return entity?.counterValue ?? this.initial;
    }
    async set(value, key = COUNTER_ID) {
        await this._upsertEntity(key, value);
    }
    async _getEntity(key) {
        try {
            return await this.client.getEntity(PARTITION_KEY, key);
        }
        catch (error) {
            return undefined;
        }
    }
    async _upsertEntity(key, value) {
        const entity = {
            partitionKey: PARTITION_KEY,
            rowKey: key,
            counterValue: value,
        };
        await this.client.upsertEntity(entity);
    }
}
exports.CounterClient = CounterClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnRlci5pbmZsaWdodC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zaGFyZWQtYXp1cmUvY291bnRlci5pbmZsaWdodC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxvREFBMEU7QUFHMUUsTUFBTSxVQUFVLEdBQUcsU0FBUyxDQUFDO0FBQzdCLE1BQU0sYUFBYSxHQUFHLGNBQWMsQ0FBQztBQUVyQyxNQUFhLGFBQWE7SUFHeEIsWUFDbUIsa0JBQTBCLEVBQzFCLGdCQUF3QixFQUN4QixrQkFBMEIsRUFDMUIsVUFBa0IsQ0FBQztRQUhuQix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQVE7UUFDMUIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFRO1FBQ3hCLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBUTtRQUMxQixZQUFPLEdBQVAsT0FBTyxDQUFZO1FBRXBDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQUM7WUFDMUMsTUFBTSxJQUFJLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO1FBQ2pELENBQUM7UUFFRCxNQUFNLFdBQVcsR0FBRyxJQUFJLHFDQUF1QixDQUM3QyxJQUFJLENBQUMsa0JBQWtCLEVBQ3ZCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFXLENBQy9DLENBQUM7UUFFRixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUkseUJBQVcsQ0FDM0IsV0FBVyxJQUFJLENBQUMsa0JBQWtCLHlCQUF5QixFQUMzRCxJQUFJLENBQUMsZ0JBQWdCLEVBQ3JCLFdBQVcsQ0FDWixDQUFDO0lBQ0osQ0FBQztJQUVNLEtBQUssQ0FBQyxHQUFHLENBQ2QsU0FBaUIsQ0FBQyxFQUNsQixNQUFjLFVBQVU7UUFFeEIsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzFDLE1BQU0sWUFBWSxHQUFJLE1BQU0sRUFBRSxZQUF1QixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDdEUsTUFBTSxRQUFRLEdBQUcsWUFBWSxHQUFHLE1BQU0sQ0FBQztRQUN2QyxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3hDLE9BQU8sWUFBWSxDQUFDO0lBQ3RCLENBQUM7SUFFTSxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsTUFBYyxVQUFVO1FBQ25ELE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVNLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBYyxVQUFVO1FBQ3hDLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMxQyxPQUFRLE1BQU0sRUFBRSxZQUF1QixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDMUQsQ0FBQztJQUVNLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBYSxFQUFFLE1BQWMsVUFBVTtRQUN0RCxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFTyxLQUFLLENBQUMsVUFBVSxDQUN0QixHQUFXO1FBRVgsSUFBSSxDQUFDO1lBQ0gsT0FBTyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN6RCxDQUFDO1FBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztZQUNmLE9BQU8sU0FBUyxDQUFDO1FBQ25CLENBQUM7SUFDSCxDQUFDO0lBRU8sS0FBSyxDQUFDLGFBQWEsQ0FBQyxHQUFXLEVBQUUsS0FBYTtRQUNwRCxNQUFNLE1BQU0sR0FBRztZQUNiLFlBQVksRUFBRSxhQUFhO1lBQzNCLE1BQU0sRUFBRSxHQUFHO1lBQ1gsWUFBWSxFQUFFLEtBQUs7U0FDcEIsQ0FBQztRQUNGLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDekMsQ0FBQztDQUNGO0FBbkVELHNDQW1FQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRhYmxlQ2xpZW50LCBBenVyZU5hbWVkS2V5Q3JlZGVudGlhbCB9IGZyb20gXCJAYXp1cmUvZGF0YS10YWJsZXNcIjtcbmltcG9ydCB0eXBlIHsgSUNvdW50ZXJDbGllbnQgfSBmcm9tIFwiLi4vY2xvdWRcIjtcblxuY29uc3QgQ09VTlRFUl9JRCA9IFwiY291bnRlclwiO1xuY29uc3QgUEFSVElUSU9OX0tFWSA9IFwicGFydGl0aW9uS2V5XCI7XG5cbmV4cG9ydCBjbGFzcyBDb3VudGVyQ2xpZW50IGltcGxlbWVudHMgSUNvdW50ZXJDbGllbnQge1xuICBwcml2YXRlIGNsaWVudDogVGFibGVDbGllbnQ7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBzdG9yYWdlQWNjb3VudE5hbWU6IHN0cmluZyxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHN0b3JhZ2VUYWJsZU5hbWU6IHN0cmluZyxcbiAgICBwcml2YXRlIHJlYWRvbmx5IGFjY291bnRLZXlWYXJpYWJsZTogc3RyaW5nLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgaW5pdGlhbDogbnVtYmVyID0gMFxuICApIHtcbiAgICBpZiAoIXByb2Nlc3MuZW52W3RoaXMuYWNjb3VudEtleVZhcmlhYmxlXSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwibWlzc2luZyBzdG9yYWdlIGFjY291bnQga2V5XCIpO1xuICAgIH1cblxuICAgIGNvbnN0IGNyZWRlbnRpYWxzID0gbmV3IEF6dXJlTmFtZWRLZXlDcmVkZW50aWFsKFxuICAgICAgdGhpcy5zdG9yYWdlQWNjb3VudE5hbWUsXG4gICAgICBwcm9jZXNzLmVudlt0aGlzLmFjY291bnRLZXlWYXJpYWJsZV0gYXMgc3RyaW5nXG4gICAgKTtcblxuICAgIHRoaXMuY2xpZW50ID0gbmV3IFRhYmxlQ2xpZW50KFxuICAgICAgYGh0dHBzOi8vJHt0aGlzLnN0b3JhZ2VBY2NvdW50TmFtZX0udGFibGUuY29yZS53aW5kb3dzLm5ldGAsXG4gICAgICB0aGlzLnN0b3JhZ2VUYWJsZU5hbWUsXG4gICAgICBjcmVkZW50aWFsc1xuICAgICk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgaW5jKFxuICAgIGFtb3VudDogbnVtYmVyID0gMSxcbiAgICBrZXk6IHN0cmluZyA9IENPVU5URVJfSURcbiAgKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICBjb25zdCBlbnRpdHkgPSBhd2FpdCB0aGlzLl9nZXRFbnRpdHkoa2V5KTtcbiAgICBjb25zdCBjdXJyZW50VmFsdWUgPSAoZW50aXR5Py5jb3VudGVyVmFsdWUgYXMgbnVtYmVyKSA/PyB0aGlzLmluaXRpYWw7XG4gICAgY29uc3QgbmV3VmFsdWUgPSBjdXJyZW50VmFsdWUgKyBhbW91bnQ7XG4gICAgYXdhaXQgdGhpcy5fdXBzZXJ0RW50aXR5KGtleSwgbmV3VmFsdWUpO1xuICAgIHJldHVybiBjdXJyZW50VmFsdWU7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZGVjKGFtb3VudCA9IDEsIGtleTogc3RyaW5nID0gQ09VTlRFUl9JRCk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgcmV0dXJuIHRoaXMuaW5jKC0xICogYW1vdW50LCBrZXkpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHBlZWsoa2V5OiBzdHJpbmcgPSBDT1VOVEVSX0lEKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICBjb25zdCBlbnRpdHkgPSBhd2FpdCB0aGlzLl9nZXRFbnRpdHkoa2V5KTtcbiAgICByZXR1cm4gKGVudGl0eT8uY291bnRlclZhbHVlIGFzIG51bWJlcikgPz8gdGhpcy5pbml0aWFsO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHNldCh2YWx1ZTogbnVtYmVyLCBrZXk6IHN0cmluZyA9IENPVU5URVJfSUQpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCB0aGlzLl91cHNlcnRFbnRpdHkoa2V5LCB2YWx1ZSk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIF9nZXRFbnRpdHkoXG4gICAga2V5OiBzdHJpbmdcbiAgKTogUHJvbWlzZTxSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiB8IHVuZGVmaW5lZD4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jbGllbnQuZ2V0RW50aXR5KFBBUlRJVElPTl9LRVksIGtleSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBfdXBzZXJ0RW50aXR5KGtleTogc3RyaW5nLCB2YWx1ZTogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgZW50aXR5ID0ge1xuICAgICAgcGFydGl0aW9uS2V5OiBQQVJUSVRJT05fS0VZLFxuICAgICAgcm93S2V5OiBrZXksXG4gICAgICBjb3VudGVyVmFsdWU6IHZhbHVlLFxuICAgIH07XG4gICAgYXdhaXQgdGhpcy5jbGllbnQudXBzZXJ0RW50aXR5KGVudGl0eSk7XG4gIH1cbn1cbiJdfQ==