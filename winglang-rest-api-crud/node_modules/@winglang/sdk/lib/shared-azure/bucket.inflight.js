"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BucketClient = void 0;
const identity_1 = require("@azure/identity");
const storage_blob_1 = require("@azure/storage-blob");
const mime_types_1 = __importDefault(require("mime-types"));
const std_1 = require("../std");
class BucketClient {
    constructor(bucketName, storageAccount, blobServiceClient) {
        this.defaultAzureCredential = new identity_1.DefaultAzureCredential();
        this.bucketName = bucketName;
        this.storageAccount = storageAccount;
        this.blobServiceClient =
            blobServiceClient ??
                new storage_blob_1.BlobServiceClient(`https://${storageAccount}.blob.core.windows.net`, this.defaultAzureCredential);
        this.containerClient = this.blobServiceClient.getContainerClient(this.bucketName);
    }
    /**
     * Check if an object exists in the bucket
     *
     * @param key Key of the object
     */
    async exists(key) {
        const blobClient = this.containerClient.getBlobClient(key);
        return blobClient.exists();
    }
    /**
     * Put object into bucket with given body contents
     *
     * @param key Key of the object
     * @param body string contents of the object
     */
    async put(key, body, opts) {
        const blobClient = this.containerClient.getBlockBlobClient(key);
        const options = {
            blobHTTPHeaders: {
                blobContentType: (opts?.contentType ?? mime_types_1.default.lookup(key)) || "application/octet-stream",
            },
        };
        await blobClient.upload(body, body.length, options);
    }
    /**
     * Put Json object into bucket with given body contents
     *
     * @param key Key of the object
     * @param body Json object
     */
    async putJson(key, body) {
        await this.put(key, JSON.stringify(body, null, 2), {
            contentType: "application/json",
        });
    }
    /**
     * Get an object from the bucket
     *
     * @param key Key of the object
     * @returns string content of the object as string
     */
    async get(key, options) {
        const blobClient = this.containerClient.getBlobClient(key);
        let downloadResponse;
        try {
            const start = options?.startByte !== undefined ? options.startByte : 0;
            const length = options?.endByte !== undefined ? options.endByte - start : undefined;
            downloadResponse = await blobClient.download(start, length);
        }
        catch (e) {
            throw new Error(`Object does not exist (key=${key}).`);
        }
        if (downloadResponse.readableStreamBody === undefined) {
            return "";
        }
        try {
            return new TextDecoder("utf8", { fatal: true }).decode(await this.streamToBuffer(downloadResponse.readableStreamBody));
        }
        catch (e) {
            throw new Error(`Object contents could not be read as text (key=${key}): ${e.stack})}`);
        }
    }
    /**
     * Get an object from the bucket if it exists
     *
     * @param key Key of the object
     * @returns string content of the object as string
     */
    async tryGet(key, options) {
        if (await this.exists(key)) {
            return this.get(key, options);
        }
        return undefined;
    }
    /**
     * Get a Json object from the bucket
     *
     * @param key Key of the object
     * @returns Json content of the object
     */
    async getJson(key) {
        return JSON.parse(await this.get(key));
    }
    /**
     * Get a Json object from the bucket if it exists
     *
     * @param key Key of the object
     * @returns Json content of the object
     */
    async tryGetJson(key) {
        if (await this.exists(key)) {
            return this.getJson(key);
        }
        return undefined;
    }
    /**
     * Delete an object from the bucket
     *
     * @param key Key of the object
     * @param opts Option object supporting additional strategies to delete item from a bucket
     */
    async delete(key, opts = {}) {
        const mustExist = opts.mustExist ?? false;
        const blockBlobClient = this.containerClient.getBlockBlobClient(key);
        try {
            await blockBlobClient.delete();
        }
        catch (err) {
            const error = err;
            if (error.details.errorCode === "BlobNotFound") {
                if (mustExist) {
                    throw new Error(`Object does not exist (key=${key}).`);
                }
                else {
                    return;
                }
            }
            throw Error(`Failed to delete object (key=${key}).`);
        }
    }
    /**
     * Delete an object from the bucket if it exists
     *
     * @param key Key of the object
     * @param opts Option object supporting additional strategies to delete item from a bucket
     */
    async tryDelete(key) {
        if (await this.exists(key)) {
            await this.delete(key);
            return true;
        }
        return false;
    }
    /**
     * List all keys in the bucket
     *
     * @param prefix Limits the response to keys that begin with the specified prefix
     */
    async list(prefix) {
        const list = [];
        for await (const blob of this.containerClient.listBlobsFlat({ prefix })) {
            list.push(blob.name);
        }
        return list;
    }
    async signedUrl(key, options) {
        options;
        throw new Error(`signedUrl is not implemented yet for tf-azure (key=${key})`);
    }
    /**
     * Returns a url to the given file.
     * @Throws if the file is not public or if object does not exist.
     */
    // TODO: NOT SUPPORTED!! - see https://github.com/winglang/wing/issues/5117
    async publicUrl(key) {
        // this returns an optional `blobPublicAccess` prop - if exists the bucket is public
        const accessPolicy = await this.containerClient.getAccessPolicy();
        if (!accessPolicy?.blobPublicAccess) {
            throw new Error("Cannot provide public url for a non-public bucket");
        }
        if (!(await this.exists(key))) {
            throw new Error(`Cannot provide public url for a non-existent key (key=${key})`);
        }
        return encodeURI(`https://${this.storageAccount}.blob.core.windows.net/${this.bucketName}/${key}`);
    }
    /**
     * Get the metadata of an object in the bucket.
     * @param key Key of the object.
     * @throws if the object does not exist.
     */
    async metadata(key) {
        const blobClient = this.containerClient.getBlobClient(key);
        try {
            const properties = await blobClient.getProperties();
            return {
                contentType: properties.contentType,
                lastModified: std_1.Datetime.fromDate(properties.lastModified),
                size: properties.contentLength,
            };
        }
        catch (error) {
            throw new Error(`Object does not exist (key=${key}).`);
        }
    }
    /**
     * Copy object within the bucket
     *
     * @param srcKey The key of the source object you wish to copy.
     * @param dstKey The key of the destination object after copying.
     * @throws if `srcKey` object doesn't exist.
     */
    async copy(srcKey, dstKey) {
        const srcBlobUrl = this.containerClient.getBlobClient(srcKey).url;
        const dstBlobClient = this.containerClient.getBlockBlobClient(dstKey);
        try {
            await dstBlobClient.syncCopyFromURL(srcBlobUrl);
        }
        catch (error) {
            throw new Error(`Source object does not exist (srcKey=${srcKey}).`);
        }
    }
    /**
     * Move object within the container
     *
     * @param srcKey The key of the source object you wish to rename.
     * @param dstKey The key of the destination object after rename.
     * @throws if `srcKey` object doesn't exist or if it matches `dstKey`.
     */
    async rename(srcKey, dstKey) {
        return Promise.reject(`rename is not implemented: (srcKey=${srcKey}, dstKey=${dstKey})`);
    }
    /**
     * Required helper function for node js only.
     *
     * See https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/storage/storage-blob
     */
    streamToBuffer(stream) {
        return new Promise((resolve, reject) => {
            const chunks = [];
            stream.on("data", (data) => {
                chunks.push(Buffer.isBuffer(data) ? data : Buffer.from(data));
            });
            stream.on("end", () => {
                resolve(Buffer.concat(chunks));
            });
            stream.on("error", reject);
        });
    }
}
exports.BucketClient = BucketClient;
//# sourceMappingURL=data:application/json;base64,