"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionClient = void 0;
const http_1 = require("../http");
class FunctionClient {
    constructor(functionName) {
        this.functionName = functionName;
    }
    /**
     * Invoke the function, passing the given payload as an argument.
     *  @returns the function returned payload only
     */
    async invoke(payload) {
        try {
            const res = await http_1.Util.post(`https://${this.functionName}.azurewebsites.net/api/${this.functionName}`, { body: payload });
            if (!res.ok) {
                throw new Error(res.body || "Invocation Error");
            }
            return res.body;
        }
        catch (error) {
            throw new Error(`Error while invoking the function ${this.functionName}:\n${error.message}`);
        }
    }
    /**
     * Invokes the function asynchronously, passing the given payload as an argument.
     * @returns immediately once the event has been handed off to AWS Lambda.
     */
    async invokeAsync(payload) {
        payload;
        throw new Error("invokeAsync is not implemented");
    }
    /**
     * Invoke the function, passing the given payload as an argument.
     *
     * @returns the function returned payload and logs
     */
    async invokeWithLogs(payload) {
        console.error("Test invocation on tf-azure doesn't include logs yet");
        //TODO: add traces to tf-azure tests- https://github.com/winglang/wing/issues/4574
        return [await this.invoke(payload), []];
    }
}
exports.FunctionClient = FunctionClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVuY3Rpb24uaW5mbGlnaHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2hhcmVkLWF6dXJlL2Z1bmN0aW9uLmluZmxpZ2h0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLGtDQUF1QztBQUd2QyxNQUFhLGNBQWM7SUFDekIsWUFBb0IsWUFBb0I7UUFBcEIsaUJBQVksR0FBWixZQUFZLENBQVE7SUFBRyxDQUFDO0lBRTVDOzs7T0FHRztJQUNJLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBZ0I7UUFDbEMsSUFBSSxDQUFDO1lBQ0gsTUFBTSxHQUFHLEdBQUcsTUFBTSxXQUFJLENBQUMsSUFBSSxDQUN6QixXQUFXLElBQUksQ0FBQyxZQUFZLDBCQUEwQixJQUFJLENBQUMsWUFBWSxFQUFFLEVBQ3pFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUNsQixDQUFDO1lBQ0YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQztnQkFDWixNQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksa0JBQWtCLENBQUMsQ0FBQztZQUNsRCxDQUFDO1lBQ0QsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDO1FBQ2xCLENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2YsTUFBTSxJQUFJLEtBQUssQ0FDYixxQ0FBcUMsSUFBSSxDQUFDLFlBQVksTUFDbkQsS0FBZSxDQUFDLE9BQ25CLEVBQUUsQ0FDSCxDQUFDO1FBQ0osQ0FBQztJQUNILENBQUM7SUFFRDs7O09BR0c7SUFDSSxLQUFLLENBQUMsV0FBVyxDQUFDLE9BQWU7UUFDdEMsT0FBTyxDQUFDO1FBQ1IsTUFBTSxJQUFJLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksS0FBSyxDQUFDLGNBQWMsQ0FDekIsT0FBZ0I7UUFFaEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxzREFBc0QsQ0FBQyxDQUFDO1FBQ3RFLGtGQUFrRjtRQUNsRixPQUFPLENBQUMsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzFDLENBQUM7Q0FDRjtBQS9DRCx3Q0ErQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJRnVuY3Rpb25DbGllbnQgfSBmcm9tIFwiLi4vY2xvdWRcIjtcbmltcG9ydCB7IFV0aWwgYXMgaHR0cCB9IGZyb20gXCIuLi9odHRwXCI7XG5pbXBvcnQgeyBUcmFjZSB9IGZyb20gXCIuLi9zdGRcIjtcblxuZXhwb3J0IGNsYXNzIEZ1bmN0aW9uQ2xpZW50IGltcGxlbWVudHMgSUZ1bmN0aW9uQ2xpZW50IHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBmdW5jdGlvbk5hbWU6IHN0cmluZykge31cblxuICAvKipcbiAgICogSW52b2tlIHRoZSBmdW5jdGlvbiwgcGFzc2luZyB0aGUgZ2l2ZW4gcGF5bG9hZCBhcyBhbiBhcmd1bWVudC5cbiAgICogIEByZXR1cm5zIHRoZSBmdW5jdGlvbiByZXR1cm5lZCBwYXlsb2FkIG9ubHlcbiAgICovXG4gIHB1YmxpYyBhc3luYyBpbnZva2UocGF5bG9hZD86IHN0cmluZyk6IFByb21pc2U8c3RyaW5nIHwgdW5kZWZpbmVkPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGh0dHAucG9zdChcbiAgICAgICAgYGh0dHBzOi8vJHt0aGlzLmZ1bmN0aW9uTmFtZX0uYXp1cmV3ZWJzaXRlcy5uZXQvYXBpLyR7dGhpcy5mdW5jdGlvbk5hbWV9YCxcbiAgICAgICAgeyBib2R5OiBwYXlsb2FkIH1cbiAgICAgICk7XG4gICAgICBpZiAoIXJlcy5vaykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzLmJvZHkgfHwgXCJJbnZvY2F0aW9uIEVycm9yXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlcy5ib2R5O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBFcnJvciB3aGlsZSBpbnZva2luZyB0aGUgZnVuY3Rpb24gJHt0aGlzLmZ1bmN0aW9uTmFtZX06XFxuJHtcbiAgICAgICAgICAoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2VcbiAgICAgICAgfWBcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZXMgdGhlIGZ1bmN0aW9uIGFzeW5jaHJvbm91c2x5LCBwYXNzaW5nIHRoZSBnaXZlbiBwYXlsb2FkIGFzIGFuIGFyZ3VtZW50LlxuICAgKiBAcmV0dXJucyBpbW1lZGlhdGVseSBvbmNlIHRoZSBldmVudCBoYXMgYmVlbiBoYW5kZWQgb2ZmIHRvIEFXUyBMYW1iZGEuXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgaW52b2tlQXN5bmMocGF5bG9hZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcGF5bG9hZDtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZva2VBc3luYyBpcyBub3QgaW1wbGVtZW50ZWRcIik7XG4gIH1cblxuICAvKipcbiAgICogSW52b2tlIHRoZSBmdW5jdGlvbiwgcGFzc2luZyB0aGUgZ2l2ZW4gcGF5bG9hZCBhcyBhbiBhcmd1bWVudC5cbiAgICpcbiAgICogQHJldHVybnMgdGhlIGZ1bmN0aW9uIHJldHVybmVkIHBheWxvYWQgYW5kIGxvZ3NcbiAgICovXG4gIHB1YmxpYyBhc3luYyBpbnZva2VXaXRoTG9ncyhcbiAgICBwYXlsb2FkPzogc3RyaW5nXG4gICk6IFByb21pc2U8W3N0cmluZyB8IHVuZGVmaW5lZCwgVHJhY2VbXV0+IHtcbiAgICBjb25zb2xlLmVycm9yKFwiVGVzdCBpbnZvY2F0aW9uIG9uIHRmLWF6dXJlIGRvZXNuJ3QgaW5jbHVkZSBsb2dzIHlldFwiKTtcbiAgICAvL1RPRE86IGFkZCB0cmFjZXMgdG8gdGYtYXp1cmUgdGVzdHMtIGh0dHBzOi8vZ2l0aHViLmNvbS93aW5nbGFuZy93aW5nL2lzc3Vlcy80NTc0XG4gICAgcmV0dXJuIFthd2FpdCB0aGlzLmludm9rZShwYXlsb2FkKSwgW11dO1xuICB9XG59XG4iXX0=