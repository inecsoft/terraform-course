/**
 * Options for rounding a number.
 */
export interface RoundingOptions {
    /**
     * The number of decimal places to round to.
     */
    readonly decimalPlaces?: number;
}
/**
 * Utility class for mathematical operations.
 */
export declare class Util {
    /**
     * The mathematical constant representing the ratio of a circle's circumference to its diameter.
     */
    static readonly PI: number;
    /**
     * The mathematical constant representing the ratio of a circle's circumference to the radius.
     */
    static readonly TAU: number;
    /**
     * Euler's number, a mathematical constant approximately equal to 2.71828.
     */
    static readonly E: number;
    /**
     * Positive infinity constant
     */
    static readonly INF: number;
    /**
     * @internal
     */
    static _toInflightType(): string;
    /**
     * Checks if a number is prime.
     * @param n The number to check for primality.
     */
    static isPrime(n: number): boolean;
    /**
     * Returns the absolute value of a number.
     * @param value The input number.
     */
    static abs(value: number): number;
    /**
     * Calculates the median value of an array of numbers.
     * @param arr - The array of numbers.
     */
    static median(arr: number[]): number;
    /**
     * Calculates the mode values of an array of numbers.
     * @param arr - The array of numbers.
     */
    static mode(arr: number[]): number[];
    /**
     * Calculates the mean value of an array of numbers.
     * @param arr - The array of numbers.
     */
    static arithmeticMean(arr: number[]): number;
    /**
     * Calculates the geometric mean of an array of numbers.
     * @param arr - The array of numbers.
     */
    static geometricMean(arr: number[]): number;
    /**
     * Calculates the harmonic mean of an array of numbers.
     * @param arr - The array of numbers.
     */
    static harmonicMean(arr: number[]): number;
    /**
     * Returns the largest integer less than or equal to a given number.
     * @param value The input number.
     */
    static floor(value: number): number;
    /**
     * Returns the smallest integer greater than or equal to a given number.
     * @param value The input number.
     */
    static ceil(value: number): number;
    /**
     * Rounds the given number to the nearest integer.
     * @param value - The number to be rounded.
     */
    static round(value: number, options?: RoundingOptions): number;
    /**
     * Returns the minimum value from an array of numbers.
     * @param arr The array of numbers.
     */
    static min(arr: number[]): number;
    /**
     * Returns the maximum value from an array of numbers.
     * @param arr The array of numbers.
     */
    static max(arr: number[]): number;
    /**
     * Returns the square root of a number.
     * @param value A number greater than or equal to 0.
     */
    static sqrt(value: number): number;
    /**
     * Calculates the nth Fibonacci number.
     * @param n - The position of the Fibonacci number to calculate.
     */
    static fibonacci(n: number): number;
    /**
     * Calculates the factorial of a given number.
     * @param n - The number to calculate the factorial for.
     */
    static factorial(n: number): number;
    /**
     * Calculates the number of combinations for choosing r items from a total of n items.
     * @param n - The total number of items.
     * @param r - The number of items to be chosen.
     */
    static combinations(n: number, r: number): number;
    /**
     * Calculate the length of the vector from the origin to the point given by the coordinates
     * @param coordinates Array of coordinates
     * @returns
     */
    static hypot(coordinates: number[]): number;
    /**
     * Convert degrees to radians
     * @param degrees Degree value
     */
    static degreesToRadians(degrees: number): number;
    /**
     * Convert radians to degrees
     * @param radians Radians value
     */
    static radiansToDegrees(radians: number): number;
    /**
     * Returns the natural logarithm (base e) of a number.
     * @param value The input number.
     */
    static log(value: number): number;
    /**
     * Returns the base-2 logarithm of a number.
     * @param value The input number.
     */
    static log2(value: number): number;
    /**
     * Returns the base-10 logarithm of a number.
     * @param value The input number.
     */
    static log10(value: number): number;
    /**
     * Returns 1 or -1, indicating the sign of the number passed as an argument, 0 for 0.
     * @param value The input number.
     */
    static sign(value: number): number;
    /**
     * Returns the sine of a number in radians.
     * @param value A number representing an angle in radians.
     */
    static sin(value: number): number;
    /**
     * Returns the cosine of a number in radians.
     * @param value A number representing an angle in radians.
     */
    static cos(value: number): number;
    /**
     * Returns the tangent of a number in radians.
     * @param value A number representing an angle in radians.
     */
    static tan(value: number): number;
    /**
     * Returns the inverse sine (in radians) of a number.
     * @param value A number between -1 and 1, inclusive, representing the angle's sine value.
     */
    static asin(value: number): number;
    /**
     * Returns the inverse cosine (in radians) of a number.
     * @param value A number between -1 and 1, inclusive, representing the angle's cosine value.
     */
    static acos(value: number): number;
    /**
     * Returns the inverse tangent (in radians) of a number.
     * @param value A number.
     */
    static atan(value: number): number;
    /**
     * Returns the angle in the plane (in radians) between the positive x-axis and the ray from
     * (0, 0) to the point (x, y), for Math.atan2(y, x).
     * @param y The y coordinate of the point.
     * @param x The x coordinate of the point.
     */
    static atan2(y: number, x: number): number;
    /**
     * Calculates the secant of an angle (in radians).
     *
     * @param value The angle in radians.
     * @returns The secant value of the angle.
     */
    static sec(value: number): number;
    /**
     * Calculates the cosecant of an angle (in radians).
     *
     * @param value The angle in radians.
     * @returns The cosecant value of the angle.
     */
    static csc(value: number): number;
    /**
     * Calculates the cotangent of an angle (in radians).
     *
     * @param value The angle in radians.
     * @returns The cotangent value of the angle.
     */
    static cot(value: number): number;
    /**
     * Calculates the inverse secant (asec) of a number.
     *
     * @param value A number equal or greater than |1|, representing the secant value.
     * @returns The inverse secant (asec) in radians.
     */
    static asec(value: number): number;
    /**
     * Calculates the inverse cosecant (acsc) of a number.
     *
     * @param value A number equal or greater than |1|, representing the cosecant value.
     * @returns The inverse cosecant (acsc) in radians.
     */
    static acsc(value: number): number;
    /**
     * Calculates the inverse cotangent (acot) of a number.
     *
     * @param value A number representing the cotangent value.
     * @returns The inverse cotangent (acot) in radians.
     */
    static acot(value: number): number;
    /**
     * Generates a pseudo-random number between 0 and max (default of 1).
     * @param max - The maximum value of the random number.
     * @returns A pseudo-random number between 0 and max.
     */
    static random(max: number | undefined): number;
    /**
     * Convert a value to a new number base
     *
     * @param value The number to be converted
     * @param base The base of the new value
     * @returns A string representation of the new number
     */
    static toRadix(value: number, base: number): string;
    private constructor();
}
