/**
 * The Util class provides methods for making assertions in tests,
 * such as comparing two strings for equality with rich error messages.
 * @inflight
 */
export declare class Util {
    /**
     * @internal
     */
    static _toInflightType(): string;
    /**
     * Compares two values for equality.
     * @param expected The expected value.
     * @param actual The value to test.
     * @throws Will throw an error if the actual value does not match the expected value.
     * @returns void
     */
    static equal(actual: unknown, expected: unknown): void;
    /**
     * Compares two values for inequality.
     * @param expected The expected value.
     * @param actual The value to test.
     * @throws Will throw an error if the actual value matches the expected value.
     * @returns void
     */
    static notEqual(actual: unknown, expected: unknown): void;
    /**
     * Checks if a value is nil.
     * @param actual The value to test.
     * @throws Will throw an error if the actual value is not nil.
     * @returns void
     */
    static nil(actual: unknown): void;
    /**
     * Checks if a value is not nil.
     * @param actual The value to test.
     * @throws Will throw an error if the actual value is nil.
     * @returns void
     */
    static notNil(actual: unknown): void;
    /**
     * Checks if a string matches a regular expression pattern.
     * @param actual The string to test.
     * @param expected The regular expression pattern to match against.
     * @throws Will throw an error if the actual value does not match the expected regular expression pattern.
     * @returns void
     */
    static match(actual: string, expected: string): void;
    /**
     * Checks if a string does not match a regular expression pattern.
     * @param actual The string to test.
     * @param expected The regular expression pattern to check against.
     * @throws Will throw an error if the actual value matches the expected regular expression pattern.
     * @returns void
     */
    static doesNotMatch(actual: string, expected: string): void;
    /**
     * Marks a test as failed.
     * @param message An optional message to include with the failure.
     * @throws Always throws an error with the provided message.
     * @returns void
     */
    static fail(message?: string): void;
    /**
     * Asserts that a condition is truthy.
     * @param condition The condition to test.
     * @param message An optional message to include if the condition is falsy.
     * @throws Will throw an error if the condition is falsy.
     * @returns void
     */
    static ok(condition: boolean, message?: string): void;
    private constructor();
}
