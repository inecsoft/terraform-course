"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Util = exports.Stdio = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const child_process_1 = require("child_process");
const crypto_1 = require("crypto");
const util_1 = require("util");
const nanoid_1 = require("nanoid");
const ulid_1 = require("ulid");
const uuid_1 = require("uuid");
const child_process_2 = require("./child-process");
const core_1 = require("../core");
const std_1 = require("../std");
const execPromise = (0, util_1.promisify)(child_process_1.exec);
const execFilePromise = (0, util_1.promisify)(child_process_1.execFile);
/**
 * Describes what to do with a standard I/O stream for a child process.
 */
var Stdio;
(function (Stdio) {
    /**
     * The child inherits from the corresponding parent descriptor.
     */
    Stdio["INHERIT"] = "inherit";
    /**
     * A new pipe should be arranged to connect the parent and child processes.
     */
    Stdio["PIPED"] = "pipe";
    /**
     * This stream will be ignored. This is the equivalent of attaching the stream to /dev/null.
     */
    Stdio["NULL"] = "ignore";
})(Stdio || (exports.Stdio = Stdio = {}));
/**
 * Utility functions.
 */
class Util {
    /**
     * Executes a command in the shell and returns its standard output.
     * @param command The command string to execute in the shell.
     * @param opts `ShellOptions`, such as the working directory and environment variables.
     * @returns The standard output of the shell command.
     * @throws An error if the shell command execution fails or returns a non-zero exit code.
     */
    static async shell(command, opts) {
        const shellOpts = {
            windowsHide: true,
            cwd: opts?.cwd,
            env: opts?.inheritEnv === true
                ? { ...process.env, ...opts?.env }
                : { ...opts?.env },
        };
        const createErrorMessage = (error) => {
            if (error.stderr) {
                return `Error executing command "${command}". Exited with error: ${error.stderr}`;
            }
            return `Error executing command "${command}". Exited with error code: ${error.code}`;
        };
        try {
            const { stdout } = await execPromise(command, shellOpts);
            return stdout.toString();
        }
        catch (error) {
            const errorMessage = createErrorMessage(error);
            if (opts?.throw !== false) {
                throw new Error(errorMessage);
            }
            return errorMessage;
        }
    }
    /**
     * Execute a program with the given arguments, wait for it to finish, and
     * return its outputs.
     * @param program The program to execute.
     * @param args An array of arguments to pass to the program.
     * @param opts `ExecOptions`, such as the working directory and environment variables.
     * @returns A struct containing `stdout`, `stderr` and exit `status` of the executed program.
     */
    static async exec(program, args, opts) {
        const execOpts = {
            windowsHide: true,
            shell: false,
            cwd: opts?.cwd,
            env: opts?.inheritEnv === true
                ? { ...process.env, ...opts?.env }
                : { ...opts?.env },
        };
        try {
            const { stdout, stderr } = await execFilePromise(program, args, execOpts);
            return {
                stdout: stdout.toString(),
                stderr: stderr.toString(),
                status: 0,
            };
        }
        catch (error) {
            if (error.code === "ENOENT") {
                throw new Error(`Program not found: ${error.message}`);
            }
            else {
                return {
                    stdout: error.stdout.toString(),
                    stderr: error.stderr.toString(),
                    status: error.code,
                };
            }
        }
    }
    /**
     * Execute a program with the given arguments, and return a `ChildProcess`
     * object that can be used to interact with the process while it is running.
     * @param program - The program to execute.
     * @param args - An array of arguments to pass to the program.
     * @param opts - Spawn options including working directory, environment variables, and stdio configurations.
     * @returns The `ChildProcess` instance associated with the spawned process.
     * @inflight
     */
    static spawn(program, args, opts) {
        return new child_process_2.ChildProcess(program, args, opts);
    }
    /**
     * Returns the value of an environment variable. Throws if not found or empty.
     * @param name The name of the environment variable.
     */
    static env(name) {
        const value = Util.tryEnv(name);
        if (!value) {
            throw new Error(`Environment variable ${name} not found.`);
        }
        return value;
    }
    /**
     * Returns the value of an environment variable. Returns `nil` if not found or empty.
     * @param name The name of the environment variable.
     * @returns The value of the environment variable or `nil`.
     */
    static tryEnv(name) {
        return process.env[name];
    }
    /**
     * Sets the given name and value as an environment variable.
     * @param name The name of the environment variable.
     * @param value The value of the environment variable.
     */
    static setEnv(name, value) {
        process.env[name] = value;
    }
    /**
     * Converts a string from UTF-8 to base64.
     * @param stringToEncode The name of the UTF-8 string to encode.
     * @param url If `true`, a URL-safe base64 string is returned.
     * @returns The base64 string.
     */
    static base64Encode(stringToEncode, url) {
        return Buffer.from(stringToEncode).toString(url ? "base64url" : "base64");
    }
    /**
     * Converts a string from base64 to UTF-8.
     * @param stringToDecode base64 string to decode.
     * @param url If `true`, the source is expected to be a URL-safe base64 string.
     * @returns The UTF-8 string.
     */
    static base64Decode(stringToDecode, url) {
        return Buffer.from(stringToDecode, url ? "base64url" : "base64").toString("utf8");
    }
    /**
     * Suspends execution for a given duration.
     * @param delay The time to suspend execution.
     * @inflight
     */
    static async sleep(delay) {
        return new Promise((resolve) => setTimeout(resolve, delay.seconds * 1000));
    }
    /**
     * Run a predicate repeatedly, waiting until it returns true or until the timeout elapses.
     * If the timeout elapses, the function throws an error.
     *
     * Alternatively, you can pass `throws: false` to suppress the error, and instead return a boolean
     * indicating whether the predicate returned true within the timeout.
     *
     * @param predicate The function that will be evaluated.
     * @param props Timeout and interval values, default to one 1m timeout and 0.1sec interval.
     * @throws Will throw if the given predicate throws.
     * @returns True if predicate is truthful within timeout.
     * @inflight
     */
    static async waitUntil(predicate, props = {}) {
        const timeout = props.timeout ?? std_1.Duration.fromMinutes(1);
        const interval = props.interval ?? std_1.Duration.fromSeconds(0.1);
        const f = predicate;
        let elapsed = 0;
        while (elapsed < timeout.seconds) {
            if (await f()) {
                return true;
            }
            // not taking account the real elapsed time just the sum of intervals till timeout
            // it might be that predicate takes a long time and it is not considered inside timeout
            elapsed += interval.seconds;
            await this.sleep(interval);
        }
        if (props.throws !== false) {
            throw new Error("Timeout elapsed");
        }
        return false;
    }
    /**
     * Computes the SHA256 hash of the given data.
     * @param data - The string to be hashed.
     */
    static sha256(data) {
        return (0, crypto_1.createHash)("sha256").update(data).digest("hex");
    }
    /**
     * Generates a version 4 UUID.
     */
    static uuidv4() {
        return (0, uuid_1.v4)();
    }
    /**
     * Generates a unique ID using the nanoid library.
     # @link https://github.com/ai/nanoid
     * @param options - Optional options object for generating the ID.
     */
    static nanoid(options) {
        const size = options?.size ?? 21;
        const nano = options?.alphabet
            ? (0, nanoid_1.customAlphabet)(options.alphabet, size)
            : undefined;
        return nano ? nano(size) : (0, nanoid_1.nanoid)(size);
    }
    /**
     * Generates universally unique lexicographically sortable identifier.
     # @link https://github.com/ulid/javascript
     * @param options - Optional options object for generating the ID.
     */
    static ulid(options) {
        const seed = options?.seed;
        return (0, ulid_1.ulid)(seed);
    }
    /**
     * Returns a string identifying the operating system platform.
     * @returns The operating system platform
     * @example "linux", "darwin", "win32"
     */
    static os() {
        return process.platform;
    }
    /**
     * @internal
     */
    static _toInflightType() {
        return core_1.InflightClient.forType(__filename, this.name);
    }
    constructor() { }
}
exports.Util = Util;
_a = JSII_RTTI_SYMBOL_1;
Util[_a] = { fqn: "@winglang/sdk.util.Util", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,