"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChildProcess = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const child_process_1 = require("child_process");
const util_1 = require("./util");
const core_1 = require("../core");
/**
 * Handle to a running child process.
 */
class ChildProcess {
    /**
     * @internal
     */
    static _toInflightType() {
        return core_1.InflightClient.forType(__filename, this.name);
    }
    constructor(program, args, opts) {
        /**
         * The accumulated standard output from the child process.
         */
        this.stdout = "";
        /**
         * The accumulated standard error from the child process.
         */
        this.stderr = "";
        /**
         * The exit status of the child process. Null if the process has not yet finished.
         */
        this.exitStatus = null;
        const spawnOpts = {
            cwd: opts?.cwd,
            env: opts?.inheritEnv
                ? { ...process.env, ...opts.env }
                : { ...opts?.env },
            stdio: [
                opts?.stdin ?? util_1.Stdio.PIPED,
                opts?.stdout ?? util_1.Stdio.PIPED,
                opts?.stderr ?? util_1.Stdio.PIPED,
            ],
        };
        // Spawn the child process with the provided options
        this.child = (0, child_process_1.spawn)(program, args, spawnOpts);
        this.pid = this.child.pid;
        this.child.on("exit", (code) => {
            this.exitStatus = code;
        });
    }
    /**
     * Kill the process.
     * @param signal - the signal to send to the process (defaults to SIGTERM)
     */
    kill(signal = 15) {
        this.child.kill(signal);
    }
    /**
     * Wait for the process to finish and return its output.
     * Calling this method multiple times will return the same output.
     */
    async wait() {
        if (this.exitStatus !== null) {
            return {
                stdout: this.stdout,
                stderr: this.stderr,
                status: this.exitStatus,
            };
        }
        return new Promise((resolve, reject) => {
            const cleanup = () => {
                this.child.off("exit", onExit);
                this.child.off("error", onError);
                if (this.child.stdout) {
                    this.child.stdout.off("data", onDataStdout);
                }
                if (this.child.stderr) {
                    this.child.stderr.off("data", onDataStderr);
                }
            };
            const onExit = (code, signal) => {
                cleanup();
                if (code !== null) {
                    resolve({ stdout: this.stdout, stderr: this.stderr, status: code });
                }
                else {
                    reject(new Error(`Process terminated by signal ${signal}`));
                }
            };
            const onError = (error) => {
                cleanup();
                reject(error);
            };
            const onDataStdout = (data) => {
                this.stdout += data.toString();
            };
            const onDataStderr = (data) => {
                this.stderr += data.toString();
            };
            this.child.on("exit", onExit);
            this.child.on("error", onError);
            if (this.child.stdout) {
                this.child.stdout.on("data", onDataStdout);
            }
            if (this.child.stderr) {
                this.child.stderr.on("data", onDataStderr);
            }
        });
    }
}
exports.ChildProcess = ChildProcess;
_a = JSII_RTTI_SYMBOL_1;
ChildProcess[_a] = { fqn: "@winglang/sdk.util.ChildProcess", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,