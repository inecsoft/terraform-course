import { ChildProcess } from "./child-process";
import { Duration, IInflight } from "../std";
/**
 * Describes what to do with a standard I/O stream for a child process.
 */
export declare enum Stdio {
    /**
     * The child inherits from the corresponding parent descriptor.
     */
    INHERIT = "inherit",
    /**
     * A new pipe should be arranged to connect the parent and child processes.
     */
    PIPED = "pipe",
    /**
     * This stream will be ignored. This is the equivalent of attaching the stream to /dev/null.
     */
    NULL = "ignore"
}
/**
 * Output of a finished process.
 */
export interface Output {
    /**
     * The standard output of a finished process.
     */
    readonly stdout: string;
    /**
     * The standard error of a finished process.
     */
    readonly stderr: string;
    /**
     * A process's exit status.
     */
    readonly status: number;
}
/**
 * Base command options.
 */
export interface CommandOptions {
    /**
     * Path to a directory to run the command in.
     * @default - the default working directory of the host
     */
    readonly cwd?: string;
    /**
     * Environment variables.
     * @default - no environment variables
     */
    readonly env?: {
        [key: string]: string;
    };
    /**
     * Whether to inherit environment variables from the host's environment.
     * @default false
     */
    readonly inheritEnv?: boolean;
}
/**
 * Additional options for `util.exec()`
 */
export interface ExecOptions extends CommandOptions {
}
/**
 * Additional options for `util.shell()`
 */
export interface ShellOptions extends CommandOptions {
    /**
     * Whether to throw an error on command execution failure.
     * @default true
     */
    readonly throw?: boolean;
}
/**
 * Additional options for `util.spawn()`
 */
export interface SpawnOptions extends CommandOptions {
    /**
     * Configuration for the process's standard input stream.
     * @default - Stdio.INHERIT
     */
    readonly stdin?: Stdio;
    /**
     * Configuration for the process's standard output stream.
     * @default - Stdio.INHERIT
     */
    readonly stdout?: Stdio;
    /**
     * Configuration for the process's standard error stream.
     * @default - Stdio.INHERIT
     */
    readonly stderr?: Stdio;
}
/**
 * Properties for `util.waitUntil`.
 */
export interface WaitUntilProps {
    /**
     * The timeout for keep trying predicate
     * @default 1m
     */
    readonly timeout?: Duration;
    /**
     * Interval between predicate retries
     * @default 0.1s
     */
    readonly interval?: Duration;
    /**
     * Whether to throw an error if the timeout elapses.
     * @default true
     */
    readonly throws?: boolean;
}
/**
 * A predicate with an inflight "handle" method that can be passed to
 * `util.busyWait`.
 * @inflight `@winglang/sdk.util.IPredicateHandlerClient`
 */
export interface IPredicateHandler extends IInflight {
}
/**
 * Inflight client for `IPredicateHandler`.
 */
export interface IPredicateHandlerClient {
    /**
     * The Predicate function that is called
     * @inflight
     */
    handle(): Promise<boolean>;
}
/**
 * Options to generating a unique ID
 */
export interface NanoidOptions {
    /**
     * Size of ID
     * @default 21
     */
    readonly size?: number;
    /**
     * Characters that make up the alphabet to generate the ID, limited to 256 characters or fewer.
     */
    readonly alphabet?: string;
}
/**
 * Options to generate universally unique lexicographically sortable identifiers.
 */
export interface UlidOptions {
    /**
     * You can also input a seed time which will consistently give you the same string for the time component. This is useful for migrating to ulid.
     * @default Date.now()
     */
    readonly seed?: number;
}
/**
 * Utility functions.
 */
export declare class Util {
    /**
     * Executes a command in the shell and returns its standard output.
     * @param command The command string to execute in the shell.
     * @param opts `ShellOptions`, such as the working directory and environment variables.
     * @returns The standard output of the shell command.
     * @throws An error if the shell command execution fails or returns a non-zero exit code.
     */
    static shell(command: string, opts?: ShellOptions): Promise<String>;
    /**
     * Execute a program with the given arguments, wait for it to finish, and
     * return its outputs.
     * @param program The program to execute.
     * @param args An array of arguments to pass to the program.
     * @param opts `ExecOptions`, such as the working directory and environment variables.
     * @returns A struct containing `stdout`, `stderr` and exit `status` of the executed program.
     */
    static exec(program: string, args: Array<string>, opts?: ExecOptions): Promise<Output>;
    /**
     * Execute a program with the given arguments, and return a `ChildProcess`
     * object that can be used to interact with the process while it is running.
     * @param program - The program to execute.
     * @param args - An array of arguments to pass to the program.
     * @param opts - Spawn options including working directory, environment variables, and stdio configurations.
     * @returns The `ChildProcess` instance associated with the spawned process.
     * @inflight
     */
    static spawn(program: string, args: Array<string>, opts?: SpawnOptions): ChildProcess;
    /**
     * Returns the value of an environment variable. Throws if not found or empty.
     * @param name The name of the environment variable.
     */
    static env(name: string): string;
    /**
     * Returns the value of an environment variable. Returns `nil` if not found or empty.
     * @param name The name of the environment variable.
     * @returns The value of the environment variable or `nil`.
     */
    static tryEnv(name: string): string | undefined;
    /**
     * Sets the given name and value as an environment variable.
     * @param name The name of the environment variable.
     * @param value The value of the environment variable.
     */
    static setEnv(name: string, value: string): void;
    /**
     * Converts a string from UTF-8 to base64.
     * @param stringToEncode The name of the UTF-8 string to encode.
     * @param url If `true`, a URL-safe base64 string is returned.
     * @returns The base64 string.
     */
    static base64Encode(stringToEncode: string, url?: boolean): string;
    /**
     * Converts a string from base64 to UTF-8.
     * @param stringToDecode base64 string to decode.
     * @param url If `true`, the source is expected to be a URL-safe base64 string.
     * @returns The UTF-8 string.
     */
    static base64Decode(stringToDecode: string, url?: boolean): string;
    /**
     * Suspends execution for a given duration.
     * @param delay The time to suspend execution.
     * @inflight
     */
    static sleep(delay: Duration): Promise<void>;
    /**
     * Run a predicate repeatedly, waiting until it returns true or until the timeout elapses.
     * If the timeout elapses, the function throws an error.
     *
     * Alternatively, you can pass `throws: false` to suppress the error, and instead return a boolean
     * indicating whether the predicate returned true within the timeout.
     *
     * @param predicate The function that will be evaluated.
     * @param props Timeout and interval values, default to one 1m timeout and 0.1sec interval.
     * @throws Will throw if the given predicate throws.
     * @returns True if predicate is truthful within timeout.
     * @inflight
     */
    static waitUntil(predicate: IPredicateHandler, props?: WaitUntilProps): Promise<boolean>;
    /**
     * Computes the SHA256 hash of the given data.
     * @param data - The string to be hashed.
     */
    static sha256(data: string): string;
    /**
     * Generates a version 4 UUID.
     */
    static uuidv4(): string;
    /**
     * Generates a unique ID using the nanoid library.
     # @link https://github.com/ai/nanoid
     * @param options - Optional options object for generating the ID.
     */
    static nanoid(options?: NanoidOptions): string;
    /**
     * Generates universally unique lexicographically sortable identifier.
     # @link https://github.com/ulid/javascript
     * @param options - Optional options object for generating the ID.
     */
    static ulid(options?: UlidOptions): string;
    /**
     * Returns a string identifying the operating system platform.
     * @returns The operating system platform
     * @example "linux", "darwin", "win32"
     */
    static os(): string;
    /**
     * @internal
     */
    static _toInflightType(): string;
    private constructor();
}
