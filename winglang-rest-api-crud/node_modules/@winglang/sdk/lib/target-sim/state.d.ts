import { ISimulatorResource } from "./resource";
import { LiftMap } from "../core";
import { INFLIGHT_SYMBOL } from "../core/types";
import { ToSimulatorOutput } from "../simulator";
import { IInflightHost, Json, Resource } from "../std";
/**
 * Global identifier for `State`.
 */
export declare const STATE_FQN: string;
/**
 * Key/value in-memory state for the simulator.
 *
 * Use the preflight method `token(key)` to obtain a token that can be used to reference the value
 * of the state at runtime.
 *
 * During deployment (i.e. `cloud.OnDeploy` or `cloud.Service` startup), you must call the inflight
 * method `set(key, value)` to set the runtime value. The value will be available at runtime through
 * the inflight method `get(key)` (or resolved as a token).
 *
 * See tests for examples.
 *
 * @inflight `@winglang/sdk.sim.IStateClient`
 */
export declare class State extends Resource implements ISimulatorResource {
    /** @internal */
    [INFLIGHT_SYMBOL]?: IStateClient;
    /**
     * Returns a token that can be used to retrieve the value of the state after the simulation has
     * run.
     * @param key The object key retrieved through the inflight `state.get()`.
     */
    token(key: string): string;
    /** @internal */
    get _liftMap(): LiftMap;
    /** @internal */
    _toInflight(): string;
    onLift(host: IInflightHost, ops: string[]): void;
    toSimulator(): ToSimulatorOutput;
}
/**
 * Inflight interface for `State`.
 */
export interface IStateClient {
    /**
     * Sets the state of runtime a runtime object.
     * @param key The object's key
     * @param value The object's value
     * @inflight
     */
    set(key: string, value: Json): Promise<void>;
    /**
     * Gets the runtime state of this object. Throws if there is no value for the given key.
     * @param key The object's key
     * @inflight
     */
    get(key: string): Promise<Json>;
    /**
     * Checks if runtime state exists for this object and returns it's value. If no value exists,
     * returns `nil`.
     *
     * @param key The object's key
     * @inflight
     */
    tryGet(key: string): Promise<Json | undefined>;
}
/**
 * List of inflight operations available for `State`.
 * @internal
 */
export declare enum StateInflightMethods {
    /** `State.set` */
    SET = "set",
    /** `State.get` */
    GET = "get",
    /**`State.tryGet` */
    TRY_GET = "tryGet"
}
