import { Construct } from "constructs";
import { ISimulatorInflightHost, ISimulatorResource } from "./resource";
import * as cloud from "../cloud";
import { LiftMap } from "../core";
import { ToSimulatorOutput } from "../simulator/simulator";
import { IInflightHost, IResource } from "../std";
export declare const ENV_WING_SIM_INFLIGHT_RESOURCE_PATH = "WING_SIM_INFLIGHT_RESOURCE_PATH";
export declare const ENV_WING_SIM_INFLIGHT_RESOURCE_TYPE = "WING_SIM_INFLIGHT_RESOURCE_TYPE";
/**
 * Simulator implementation of `cloud.Function`.
 *
 * @inflight `@winglang/sdk.cloud.IFunctionClient`
 */
export declare class Function extends cloud.Function implements ISimulatorResource, ISimulatorInflightHost {
    private readonly timeout;
    private readonly concurrency;
    private readonly permissions;
    constructor(scope: Construct, id: string, inflight: cloud.IFunctionHandler, props?: cloud.FunctionProps);
    addPermission(resource: IResource, op: string): void;
    toSimulator(): ToSimulatorOutput;
    /** @internal */
    get _liftMap(): LiftMap;
    onLift(host: IInflightHost, ops: string[]): void;
    /** @internal */
    _toInflight(): string;
}
/**
 * Simulator-specific inflight methods for `cloud.Function`.
 */
export declare enum FunctionInflightMethods {
    HAS_AVAILABLE_WORKERS = "hasAvailableWorkers"
}
