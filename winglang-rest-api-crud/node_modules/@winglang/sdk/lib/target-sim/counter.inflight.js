"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CounterBackend = void 0;
const fs = __importStar(require("fs"));
const path_1 = require("path");
const util_1 = require("./util");
const VALUES_FILENAME = "values.json";
class CounterBackend {
    constructor(ctx, props) {
        this.ctx = ctx;
        this.initial = props.initial ?? 0;
        this.values = new Map().set("default", this.initial);
    }
    async onStart() {
        // Load the values from disk
        const valuesFile = (0, path_1.join)(this.ctx.statedir(), VALUES_FILENAME);
        const valueFilesExists = await (0, util_1.exists)(valuesFile);
        if (valueFilesExists) {
            const valuesContents = await fs.promises.readFile(valuesFile, "utf-8");
            const values = JSON.parse(valuesContents);
            this.values = new Map(values);
        }
    }
    async onStop() {
        // Save the values to disk
        fs.writeFileSync((0, path_1.join)(this.ctx.statedir(), VALUES_FILENAME), JSON.stringify(Array.from(this.values.entries())));
    }
    async inc(amount = 1, key = "default") {
        const prev = this.values.get(key) ?? this.initial;
        this.values.set(key, prev + amount);
        return prev;
    }
    async dec(amount = 1, key = "default") {
        const prev = this.values.get(key) ?? this.initial;
        this.values.set(key, prev - amount);
        return prev;
    }
    async peek(key = "default") {
        return this.values.get(key) ?? this.initial;
    }
    async set(value, key = "default") {
        this.values.set(key, value);
    }
}
exports.CounterBackend = CounterBackend;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnRlci5pbmZsaWdodC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90YXJnZXQtc2ltL2NvdW50ZXIuaW5mbGlnaHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSx1Q0FBeUI7QUFDekIsK0JBQTRCO0FBRzVCLGlDQUFnQztBQUdoQyxNQUFNLGVBQWUsR0FBRyxhQUFhLENBQUM7QUFFdEMsTUFBYSxjQUFjO0lBS3pCLFlBQW1CLEdBQXFCLEVBQUUsS0FBMEI7UUFDbEUsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDZixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRU0sS0FBSyxDQUFDLE9BQU87UUFDbEIsNEJBQTRCO1FBQzVCLE1BQU0sVUFBVSxHQUFHLElBQUEsV0FBSSxFQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFDOUQsTUFBTSxnQkFBZ0IsR0FBRyxNQUFNLElBQUEsYUFBTSxFQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2xELElBQUksZ0JBQWdCLEVBQUUsQ0FBQztZQUNyQixNQUFNLGNBQWMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQztZQUN2RSxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBQzFDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDaEMsQ0FBQztJQUNILENBQUM7SUFFTSxLQUFLLENBQUMsTUFBTTtRQUNqQiwwQkFBMEI7UUFDMUIsRUFBRSxDQUFDLGFBQWEsQ0FDZCxJQUFBLFdBQUksRUFBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxFQUFFLGVBQWUsQ0FBQyxFQUMxQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQ2xELENBQUM7SUFDSixDQUFDO0lBRU0sS0FBSyxDQUFDLEdBQUcsQ0FDZCxTQUFpQixDQUFDLEVBQ2xCLE1BQWMsU0FBUztRQUV2QixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ2xELElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLEdBQUcsTUFBTSxDQUFDLENBQUM7UUFDcEMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sS0FBSyxDQUFDLEdBQUcsQ0FDZCxTQUFpQixDQUFDLEVBQ2xCLE1BQWMsU0FBUztRQUV2QixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ2xELElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLEdBQUcsTUFBTSxDQUFDLENBQUM7UUFDcEMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFjLFNBQVM7UUFDdkMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQzlDLENBQUM7SUFFTSxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQWEsRUFBRSxNQUFjLFNBQVM7UUFDckQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzlCLENBQUM7Q0FDRjtBQXZERCx3Q0F1REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBmcyBmcm9tIFwiZnNcIjtcbmltcG9ydCB7IGpvaW4gfSBmcm9tIFwicGF0aFwiO1xuaW1wb3J0IHsgQ291bnRlckJhY2tlbmRQcm9wcyB9IGZyb20gXCIuL2NvdW50ZXJcIjtcbmltcG9ydCB7IElSZXNvdXJjZSwgSVJlc291cmNlQ29udGV4dCB9IGZyb20gXCIuL3Jlc291cmNlXCI7XG5pbXBvcnQgeyBleGlzdHMgfSBmcm9tIFwiLi91dGlsXCI7XG5pbXBvcnQgeyBJQ291bnRlckNsaWVudCB9IGZyb20gXCIuLi9jbG91ZFwiO1xuXG5jb25zdCBWQUxVRVNfRklMRU5BTUUgPSBcInZhbHVlcy5qc29uXCI7XG5cbmV4cG9ydCBjbGFzcyBDb3VudGVyQmFja2VuZCBpbXBsZW1lbnRzIElDb3VudGVyQ2xpZW50LCBJUmVzb3VyY2Uge1xuICBwcml2YXRlIHZhbHVlczogTWFwPHN0cmluZywgbnVtYmVyPjtcbiAgcHJpdmF0ZSBpbml0aWFsOiBudW1iZXI7XG4gIHByaXZhdGUgY3R4OiBJUmVzb3VyY2VDb250ZXh0O1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihjdHg6IElSZXNvdXJjZUNvbnRleHQsIHByb3BzOiBDb3VudGVyQmFja2VuZFByb3BzKSB7XG4gICAgdGhpcy5jdHggPSBjdHg7XG4gICAgdGhpcy5pbml0aWFsID0gcHJvcHMuaW5pdGlhbCA/PyAwO1xuICAgIHRoaXMudmFsdWVzID0gbmV3IE1hcCgpLnNldChcImRlZmF1bHRcIiwgdGhpcy5pbml0aWFsKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBvblN0YXJ0KCk6IFByb21pc2U8dm9pZD4ge1xuICAgIC8vIExvYWQgdGhlIHZhbHVlcyBmcm9tIGRpc2tcbiAgICBjb25zdCB2YWx1ZXNGaWxlID0gam9pbih0aGlzLmN0eC5zdGF0ZWRpcigpLCBWQUxVRVNfRklMRU5BTUUpO1xuICAgIGNvbnN0IHZhbHVlRmlsZXNFeGlzdHMgPSBhd2FpdCBleGlzdHModmFsdWVzRmlsZSk7XG4gICAgaWYgKHZhbHVlRmlsZXNFeGlzdHMpIHtcbiAgICAgIGNvbnN0IHZhbHVlc0NvbnRlbnRzID0gYXdhaXQgZnMucHJvbWlzZXMucmVhZEZpbGUodmFsdWVzRmlsZSwgXCJ1dGYtOFwiKTtcbiAgICAgIGNvbnN0IHZhbHVlcyA9IEpTT04ucGFyc2UodmFsdWVzQ29udGVudHMpO1xuICAgICAgdGhpcy52YWx1ZXMgPSBuZXcgTWFwKHZhbHVlcyk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFzeW5jIG9uU3RvcCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAvLyBTYXZlIHRoZSB2YWx1ZXMgdG8gZGlza1xuICAgIGZzLndyaXRlRmlsZVN5bmMoXG4gICAgICBqb2luKHRoaXMuY3R4LnN0YXRlZGlyKCksIFZBTFVFU19GSUxFTkFNRSksXG4gICAgICBKU09OLnN0cmluZ2lmeShBcnJheS5mcm9tKHRoaXMudmFsdWVzLmVudHJpZXMoKSkpXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBpbmMoXG4gICAgYW1vdW50OiBudW1iZXIgPSAxLFxuICAgIGtleTogc3RyaW5nID0gXCJkZWZhdWx0XCJcbiAgKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICBjb25zdCBwcmV2ID0gdGhpcy52YWx1ZXMuZ2V0KGtleSkgPz8gdGhpcy5pbml0aWFsO1xuICAgIHRoaXMudmFsdWVzLnNldChrZXksIHByZXYgKyBhbW91bnQpO1xuICAgIHJldHVybiBwcmV2O1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGRlYyhcbiAgICBhbW91bnQ6IG51bWJlciA9IDEsXG4gICAga2V5OiBzdHJpbmcgPSBcImRlZmF1bHRcIlxuICApOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIGNvbnN0IHByZXYgPSB0aGlzLnZhbHVlcy5nZXQoa2V5KSA/PyB0aGlzLmluaXRpYWw7XG4gICAgdGhpcy52YWx1ZXMuc2V0KGtleSwgcHJldiAtIGFtb3VudCk7XG4gICAgcmV0dXJuIHByZXY7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgcGVlayhrZXk6IHN0cmluZyA9IFwiZGVmYXVsdFwiKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZXMuZ2V0KGtleSkgPz8gdGhpcy5pbml0aWFsO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHNldCh2YWx1ZTogbnVtYmVyLCBrZXk6IHN0cmluZyA9IFwiZGVmYXVsdFwiKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdGhpcy52YWx1ZXMuc2V0KGtleSwgdmFsdWUpO1xuICB9XG59XG4iXX0=