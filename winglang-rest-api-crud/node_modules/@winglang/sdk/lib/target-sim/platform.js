"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Platform = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = require("path");
const app_1 = require("./app");
/**
 * Sim Platform
 */
class Platform {
    constructor() {
        /** Platform model */
        this.target = "sim";
    }
    newApp(appProps) {
        return new app_1.App(appProps);
    }
    async storeSecrets(secrets) {
        let existingSecretsContent = "";
        const envFile = (0, path_1.join)(process.env.WING_SOURCE_DIR, ".env");
        try {
            existingSecretsContent = fs_1.default.readFileSync(envFile, "utf8");
        }
        catch (error) { }
        const existingSecrets = existingSecretsContent
            .split("\n")
            .filter((line) => line.trim() !== "")
            .reduce((s, line) => {
            const [key, value] = line.split("=", 2);
            s[key] = value;
            return s;
        }, {});
        for (const key in secrets) {
            existingSecrets[key] = secrets[key];
        }
        const updatedContent = Object.entries(existingSecrets)
            .map(([key, value]) => `${key}=${value}`)
            .join("\n");
        fs_1.default.writeFileSync(envFile, updatedContent);
        console.log(`${Object.keys(secrets).length} secret(s) stored in .env`);
    }
}
exports.Platform = Platform;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxhdGZvcm0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGFyZ2V0LXNpbS9wbGF0Zm9ybS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSw0Q0FBb0I7QUFDcEIsK0JBQTRCO0FBQzVCLCtCQUE0QjtBQUc1Qjs7R0FFRztBQUNILE1BQWEsUUFBUTtJQUFyQjtRQUNFLHFCQUFxQjtRQUNMLFdBQU0sR0FBRyxLQUFLLENBQUM7SUFtQ2pDLENBQUM7SUFqQ1EsTUFBTSxDQUFDLFFBQWE7UUFDekIsT0FBTyxJQUFJLFNBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBRU0sS0FBSyxDQUFDLFlBQVksQ0FBQyxPQUErQjtRQUN2RCxJQUFJLHNCQUFzQixHQUFHLEVBQUUsQ0FBQztRQUNoQyxNQUFNLE9BQU8sR0FBRyxJQUFBLFdBQUksRUFBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWdCLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFM0QsSUFBSSxDQUFDO1lBQ0gsc0JBQXNCLEdBQUcsWUFBRSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDNUQsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUMsQ0FBQSxDQUFDO1FBRWxCLE1BQU0sZUFBZSxHQUFHLHNCQUFzQjthQUMzQyxLQUFLLENBQUMsSUFBSSxDQUFDO2FBQ1gsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDO2FBQ3BDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRTtZQUNsQixNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDZixPQUFPLENBQUMsQ0FBQztRQUNYLENBQUMsRUFBRSxFQUErQixDQUFDLENBQUM7UUFFdEMsS0FBSyxNQUFNLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztZQUMxQixlQUFlLENBQUMsR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3RDLENBQUM7UUFFRCxNQUFNLGNBQWMsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQzthQUNuRCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7YUFDeEMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRWQsWUFBRSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFFMUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSwyQkFBMkIsQ0FBQyxDQUFDO0lBQ3pFLENBQUM7Q0FDRjtBQXJDRCw0QkFxQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMgZnJvbSBcImZzXCI7XG5pbXBvcnQgeyBqb2luIH0gZnJvbSBcInBhdGhcIjtcbmltcG9ydCB7IEFwcCB9IGZyb20gXCIuL2FwcFwiO1xuaW1wb3J0IHsgSVBsYXRmb3JtIH0gZnJvbSBcIi4uL3BsYXRmb3JtXCI7XG5cbi8qKlxuICogU2ltIFBsYXRmb3JtXG4gKi9cbmV4cG9ydCBjbGFzcyBQbGF0Zm9ybSBpbXBsZW1lbnRzIElQbGF0Zm9ybSB7XG4gIC8qKiBQbGF0Zm9ybSBtb2RlbCAqL1xuICBwdWJsaWMgcmVhZG9ubHkgdGFyZ2V0ID0gXCJzaW1cIjtcblxuICBwdWJsaWMgbmV3QXBwKGFwcFByb3BzOiBhbnkpOiBhbnkge1xuICAgIHJldHVybiBuZXcgQXBwKGFwcFByb3BzKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzdG9yZVNlY3JldHMoc2VjcmV0czogUmVjb3JkPHN0cmluZywgc3RyaW5nPik6IFByb21pc2U8dm9pZD4ge1xuICAgIGxldCBleGlzdGluZ1NlY3JldHNDb250ZW50ID0gXCJcIjtcbiAgICBjb25zdCBlbnZGaWxlID0gam9pbihwcm9jZXNzLmVudi5XSU5HX1NPVVJDRV9ESVIhLCBcIi5lbnZcIik7XG5cbiAgICB0cnkge1xuICAgICAgZXhpc3RpbmdTZWNyZXRzQ29udGVudCA9IGZzLnJlYWRGaWxlU3luYyhlbnZGaWxlLCBcInV0ZjhcIik7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHt9XG5cbiAgICBjb25zdCBleGlzdGluZ1NlY3JldHMgPSBleGlzdGluZ1NlY3JldHNDb250ZW50XG4gICAgICAuc3BsaXQoXCJcXG5cIilcbiAgICAgIC5maWx0ZXIoKGxpbmUpID0+IGxpbmUudHJpbSgpICE9PSBcIlwiKVxuICAgICAgLnJlZHVjZSgocywgbGluZSkgPT4ge1xuICAgICAgICBjb25zdCBba2V5LCB2YWx1ZV0gPSBsaW5lLnNwbGl0KFwiPVwiLCAyKTtcbiAgICAgICAgc1trZXldID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBzO1xuICAgICAgfSwge30gYXMgeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSk7XG5cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBzZWNyZXRzKSB7XG4gICAgICBleGlzdGluZ1NlY3JldHNba2V5XSA9IHNlY3JldHNba2V5XTtcbiAgICB9XG5cbiAgICBjb25zdCB1cGRhdGVkQ29udGVudCA9IE9iamVjdC5lbnRyaWVzKGV4aXN0aW5nU2VjcmV0cylcbiAgICAgIC5tYXAoKFtrZXksIHZhbHVlXSkgPT4gYCR7a2V5fT0ke3ZhbHVlfWApXG4gICAgICAuam9pbihcIlxcblwiKTtcblxuICAgIGZzLndyaXRlRmlsZVN5bmMoZW52RmlsZSwgdXBkYXRlZENvbnRlbnQpO1xuXG4gICAgY29uc29sZS5sb2coYCR7T2JqZWN0LmtleXMoc2VjcmV0cykubGVuZ3RofSBzZWNyZXQocykgc3RvcmVkIGluIC5lbnZgKTtcbiAgfVxufVxuIl19