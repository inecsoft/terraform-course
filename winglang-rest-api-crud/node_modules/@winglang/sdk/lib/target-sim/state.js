"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.StateInflightMethods = exports.State = exports.STATE_FQN = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const tokens_1 = require("./tokens");
const util_1 = require("./util");
const constants_1 = require("../constants");
const types_1 = require("../core/types");
const std_1 = require("../std");
/**
 * Global identifier for `State`.
 */
exports.STATE_FQN = (0, constants_1.fqnForType)("sim.State");
/**
 * Key/value in-memory state for the simulator.
 *
 * Use the preflight method `token(key)` to obtain a token that can be used to reference the value
 * of the state at runtime.
 *
 * During deployment (i.e. `cloud.OnDeploy` or `cloud.Service` startup), you must call the inflight
 * method `set(key, value)` to set the runtime value. The value will be available at runtime through
 * the inflight method `get(key)` (or resolved as a token).
 *
 * See tests for examples.
 *
 * @inflight `@winglang/sdk.sim.IStateClient`
 */
class State extends std_1.Resource {
    /**
     * Returns a token that can be used to retrieve the value of the state after the simulation has
     * run.
     * @param key The object key retrieved through the inflight `state.get()`.
     */
    token(key) {
        return (0, tokens_1.simulatorAttrToken)(this, key);
    }
    /** @internal */
    get _liftMap() {
        return {
            [StateInflightMethods.GET]: [],
            [StateInflightMethods.SET]: [],
            [StateInflightMethods.TRY_GET]: [],
        };
    }
    /** @internal */
    _toInflight() {
        return (0, util_1.makeSimulatorJsClient)(__filename, this);
    }
    onLift(host, ops) {
        (0, util_1.bindSimulatorResource)(__filename, this, host, ops);
        super.onLift(host, ops);
    }
    toSimulator() {
        const props = {};
        return {
            type: exports.STATE_FQN,
            props,
        };
    }
}
exports.State = State;
_a = JSII_RTTI_SYMBOL_1;
State[_a] = { fqn: "@winglang/sdk.sim.State", version: "0.0.0" };
/**
 * List of inflight operations available for `State`.
 * @internal
 */
var StateInflightMethods;
(function (StateInflightMethods) {
    /** `State.set` */
    StateInflightMethods["SET"] = "set";
    /** `State.get` */
    StateInflightMethods["GET"] = "get";
    /**`State.tryGet` */
    StateInflightMethods["TRY_GET"] = "tryGet";
})(StateInflightMethods || (exports.StateInflightMethods = StateInflightMethods = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGFyZ2V0LXNpbS9zdGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUVBLHFDQUE4QztBQUM5QyxpQ0FBc0U7QUFDdEUsNENBQTBDO0FBRTFDLHlDQUFnRDtBQUVoRCxnQ0FBdUQ7QUFFdkQ7O0dBRUc7QUFDVSxRQUFBLFNBQVMsR0FBRyxJQUFBLHNCQUFVLEVBQUMsV0FBVyxDQUFDLENBQUM7QUFFakQ7Ozs7Ozs7Ozs7Ozs7R0FhRztBQUNILE1BQWEsS0FBTSxTQUFRLGNBQVE7SUFJakM7Ozs7T0FJRztJQUNJLEtBQUssQ0FBQyxHQUFXO1FBQ3RCLE9BQU8sSUFBQSwyQkFBa0IsRUFBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELGdCQUFnQjtJQUNoQixJQUFXLFFBQVE7UUFDakIsT0FBTztZQUNMLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRTtZQUM5QixDQUFDLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUU7WUFDOUIsQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFO1NBQ25DLENBQUM7SUFDSixDQUFDO0lBRUQsZ0JBQWdCO0lBQ1QsV0FBVztRQUNoQixPQUFPLElBQUEsNEJBQXFCLEVBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFTSxNQUFNLENBQUMsSUFBbUIsRUFBRSxHQUFhO1FBQzlDLElBQUEsNEJBQXFCLEVBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDbkQsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVNLFdBQVc7UUFDaEIsTUFBTSxLQUFLLEdBQWdCLEVBQUUsQ0FBQztRQUM5QixPQUFPO1lBQ0wsSUFBSSxFQUFFLGlCQUFTO1lBQ2YsS0FBSztTQUNOLENBQUM7SUFDSixDQUFDOztBQXRDSCxzQkF1Q0M7OztBQStCRDs7O0dBR0c7QUFDSCxJQUFZLG9CQU9YO0FBUEQsV0FBWSxvQkFBb0I7SUFDOUIsa0JBQWtCO0lBQ2xCLG1DQUFXLENBQUE7SUFDWCxrQkFBa0I7SUFDbEIsbUNBQVcsQ0FBQTtJQUNYLG9CQUFvQjtJQUNwQiwwQ0FBa0IsQ0FBQTtBQUNwQixDQUFDLEVBUFcsb0JBQW9CLG9DQUFwQixvQkFBb0IsUUFPL0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJU2ltdWxhdG9yUmVzb3VyY2UgfSBmcm9tIFwiLi9yZXNvdXJjZVwiO1xuaW1wb3J0IHsgU3RhdGVTY2hlbWEgfSBmcm9tIFwiLi9zY2hlbWEtcmVzb3VyY2VzXCI7XG5pbXBvcnQgeyBzaW11bGF0b3JBdHRyVG9rZW4gfSBmcm9tIFwiLi90b2tlbnNcIjtcbmltcG9ydCB7IGJpbmRTaW11bGF0b3JSZXNvdXJjZSwgbWFrZVNpbXVsYXRvckpzQ2xpZW50IH0gZnJvbSBcIi4vdXRpbFwiO1xuaW1wb3J0IHsgZnFuRm9yVHlwZSB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IExpZnRNYXAgfSBmcm9tIFwiLi4vY29yZVwiO1xuaW1wb3J0IHsgSU5GTElHSFRfU1lNQk9MIH0gZnJvbSBcIi4uL2NvcmUvdHlwZXNcIjtcbmltcG9ydCB7IFRvU2ltdWxhdG9yT3V0cHV0IH0gZnJvbSBcIi4uL3NpbXVsYXRvclwiO1xuaW1wb3J0IHsgSUluZmxpZ2h0SG9zdCwgSnNvbiwgUmVzb3VyY2UgfSBmcm9tIFwiLi4vc3RkXCI7XG5cbi8qKlxuICogR2xvYmFsIGlkZW50aWZpZXIgZm9yIGBTdGF0ZWAuXG4gKi9cbmV4cG9ydCBjb25zdCBTVEFURV9GUU4gPSBmcW5Gb3JUeXBlKFwic2ltLlN0YXRlXCIpO1xuXG4vKipcbiAqIEtleS92YWx1ZSBpbi1tZW1vcnkgc3RhdGUgZm9yIHRoZSBzaW11bGF0b3IuXG4gKlxuICogVXNlIHRoZSBwcmVmbGlnaHQgbWV0aG9kIGB0b2tlbihrZXkpYCB0byBvYnRhaW4gYSB0b2tlbiB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlZmVyZW5jZSB0aGUgdmFsdWVcbiAqIG9mIHRoZSBzdGF0ZSBhdCBydW50aW1lLlxuICpcbiAqIER1cmluZyBkZXBsb3ltZW50IChpLmUuIGBjbG91ZC5PbkRlcGxveWAgb3IgYGNsb3VkLlNlcnZpY2VgIHN0YXJ0dXApLCB5b3UgbXVzdCBjYWxsIHRoZSBpbmZsaWdodFxuICogbWV0aG9kIGBzZXQoa2V5LCB2YWx1ZSlgIHRvIHNldCB0aGUgcnVudGltZSB2YWx1ZS4gVGhlIHZhbHVlIHdpbGwgYmUgYXZhaWxhYmxlIGF0IHJ1bnRpbWUgdGhyb3VnaFxuICogdGhlIGluZmxpZ2h0IG1ldGhvZCBgZ2V0KGtleSlgIChvciByZXNvbHZlZCBhcyBhIHRva2VuKS5cbiAqXG4gKiBTZWUgdGVzdHMgZm9yIGV4YW1wbGVzLlxuICpcbiAqIEBpbmZsaWdodCBgQHdpbmdsYW5nL3Nkay5zaW0uSVN0YXRlQ2xpZW50YFxuICovXG5leHBvcnQgY2xhc3MgU3RhdGUgZXh0ZW5kcyBSZXNvdXJjZSBpbXBsZW1lbnRzIElTaW11bGF0b3JSZXNvdXJjZSB7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHVibGljIFtJTkZMSUdIVF9TWU1CT0xdPzogSVN0YXRlQ2xpZW50O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgdG9rZW4gdGhhdCBjYW4gYmUgdXNlZCB0byByZXRyaWV2ZSB0aGUgdmFsdWUgb2YgdGhlIHN0YXRlIGFmdGVyIHRoZSBzaW11bGF0aW9uIGhhc1xuICAgKiBydW4uXG4gICAqIEBwYXJhbSBrZXkgVGhlIG9iamVjdCBrZXkgcmV0cmlldmVkIHRocm91Z2ggdGhlIGluZmxpZ2h0IGBzdGF0ZS5nZXQoKWAuXG4gICAqL1xuICBwdWJsaWMgdG9rZW4oa2V5OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBzaW11bGF0b3JBdHRyVG9rZW4odGhpcywga2V5KTtcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHVibGljIGdldCBfbGlmdE1hcCgpOiBMaWZ0TWFwIHtcbiAgICByZXR1cm4ge1xuICAgICAgW1N0YXRlSW5mbGlnaHRNZXRob2RzLkdFVF06IFtdLFxuICAgICAgW1N0YXRlSW5mbGlnaHRNZXRob2RzLlNFVF06IFtdLFxuICAgICAgW1N0YXRlSW5mbGlnaHRNZXRob2RzLlRSWV9HRVRdOiBbXSxcbiAgICB9O1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwdWJsaWMgX3RvSW5mbGlnaHQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gbWFrZVNpbXVsYXRvckpzQ2xpZW50KF9fZmlsZW5hbWUsIHRoaXMpO1xuICB9XG5cbiAgcHVibGljIG9uTGlmdChob3N0OiBJSW5mbGlnaHRIb3N0LCBvcHM6IHN0cmluZ1tdKTogdm9pZCB7XG4gICAgYmluZFNpbXVsYXRvclJlc291cmNlKF9fZmlsZW5hbWUsIHRoaXMsIGhvc3QsIG9wcyk7XG4gICAgc3VwZXIub25MaWZ0KGhvc3QsIG9wcyk7XG4gIH1cblxuICBwdWJsaWMgdG9TaW11bGF0b3IoKTogVG9TaW11bGF0b3JPdXRwdXQge1xuICAgIGNvbnN0IHByb3BzOiBTdGF0ZVNjaGVtYSA9IHt9O1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBTVEFURV9GUU4sXG4gICAgICBwcm9wcyxcbiAgICB9O1xuICB9XG59XG5cbi8qKlxuICogSW5mbGlnaHQgaW50ZXJmYWNlIGZvciBgU3RhdGVgLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElTdGF0ZUNsaWVudCB7XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBzdGF0ZSBvZiBydW50aW1lIGEgcnVudGltZSBvYmplY3QuXG4gICAqIEBwYXJhbSBrZXkgVGhlIG9iamVjdCdzIGtleVxuICAgKiBAcGFyYW0gdmFsdWUgVGhlIG9iamVjdCdzIHZhbHVlXG4gICAqIEBpbmZsaWdodFxuICAgKi9cbiAgc2V0KGtleTogc3RyaW5nLCB2YWx1ZTogSnNvbik6IFByb21pc2U8dm9pZD47XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHJ1bnRpbWUgc3RhdGUgb2YgdGhpcyBvYmplY3QuIFRocm93cyBpZiB0aGVyZSBpcyBubyB2YWx1ZSBmb3IgdGhlIGdpdmVuIGtleS5cbiAgICogQHBhcmFtIGtleSBUaGUgb2JqZWN0J3Mga2V5XG4gICAqIEBpbmZsaWdodFxuICAgKi9cbiAgZ2V0KGtleTogc3RyaW5nKTogUHJvbWlzZTxKc29uPjtcblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHJ1bnRpbWUgc3RhdGUgZXhpc3RzIGZvciB0aGlzIG9iamVjdCBhbmQgcmV0dXJucyBpdCdzIHZhbHVlLiBJZiBubyB2YWx1ZSBleGlzdHMsXG4gICAqIHJldHVybnMgYG5pbGAuXG4gICAqXG4gICAqIEBwYXJhbSBrZXkgVGhlIG9iamVjdCdzIGtleVxuICAgKiBAaW5mbGlnaHRcbiAgICovXG4gIHRyeUdldChrZXk6IHN0cmluZyk6IFByb21pc2U8SnNvbiB8IHVuZGVmaW5lZD47XG59XG5cbi8qKlxuICogTGlzdCBvZiBpbmZsaWdodCBvcGVyYXRpb25zIGF2YWlsYWJsZSBmb3IgYFN0YXRlYC5cbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZW51bSBTdGF0ZUluZmxpZ2h0TWV0aG9kcyB7XG4gIC8qKiBgU3RhdGUuc2V0YCAqL1xuICBTRVQgPSBcInNldFwiLFxuICAvKiogYFN0YXRlLmdldGAgKi9cbiAgR0VUID0gXCJnZXRcIixcbiAgLyoqYFN0YXRlLnRyeUdldGAgKi9cbiAgVFJZX0dFVCA9IFwidHJ5R2V0XCIsXG59XG4iXX0=