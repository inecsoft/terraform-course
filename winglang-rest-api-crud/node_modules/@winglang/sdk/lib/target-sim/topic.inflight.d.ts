import { IEventPublisher } from "./event-mapping";
import { TopicAttributes, TopicSchema, EventSubscription, ResourceHandle } from "./schema-resources";
import { ITopicClient } from "../cloud";
import { ISimulatorContext, ISimulatorResourceInstance, UpdatePlan } from "../simulator/simulator";
export declare class Topic implements ITopicClient, ISimulatorResourceInstance, IEventPublisher {
    private readonly subscribers;
    private _context;
    constructor(_props: TopicSchema);
    private get context();
    init(context: ISimulatorContext): Promise<TopicAttributes>;
    cleanup(): Promise<void>;
    save(): Promise<void>;
    plan(): Promise<UpdatePlan>;
    private publishMessage;
    addEventSubscription(subscriber: ResourceHandle, subscriptionProps: EventSubscription): Promise<void>;
    removeEventSubscription(subscriber: string): Promise<void>;
    publish(...messages: string[]): Promise<void>;
}
