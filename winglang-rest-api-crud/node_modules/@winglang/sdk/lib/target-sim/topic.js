"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TopicOnMessageHandler = exports.Topic = void 0;
const app_1 = require("./app");
const event_mapping_1 = require("./event-mapping");
const policy_1 = require("./policy");
const util_1 = require("./util");
const cloud_1 = require("../cloud");
const cloud = __importStar(require("../cloud"));
const core_1 = require("../core");
const std_1 = require("../std");
/**
 * Simulator implementation of `cloud.Topic`
 *
 * @inflight `@winglang/sdk.cloud.ITopicClient`
 */
class Topic extends cloud.Topic {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        this.policy = new policy_1.Policy(this, "Policy", { principal: this });
    }
    onMessage(inflight, props = {}) {
        const functionHandler = TopicOnMessageHandler.toFunctionHandler(inflight);
        const fn = new cloud_1.Function(this, app_1.App.of(this).makeId(this, "OnMessage"), functionHandler, props);
        std_1.Node.of(fn).sourceModule = std_1.SDK_SOURCE_MODULE;
        std_1.Node.of(fn).title = "onMessage()";
        new event_mapping_1.EventMapping(this, app_1.App.of(this).makeId(this, "TopicEventMapping"), {
            subscriber: fn,
            publisher: this,
            subscriptionProps: {},
        });
        std_1.Node.of(this).addConnection({
            source: this,
            sourceOp: cloud.TopicInflightMethods.PUBLISH,
            target: fn,
            targetOp: cloud.FunctionInflightMethods.INVOKE,
            name: "onMessage()",
        });
        this.policy.addStatement(fn, cloud.FunctionInflightMethods.INVOKE_ASYNC);
        return fn;
    }
    subscribeQueue(queue) {
        const fn = new cloud_1.Function(this, app_1.App.of(this).makeId(this, "subscribeQueue"), (0, core_1.lift)({ queue })
            .grant({ queue: ["push"] })
            .inflight(async (ctx, event) => {
            await ctx.queue.push(event);
            return undefined;
        }), {});
        std_1.Node.of(fn).sourceModule = std_1.SDK_SOURCE_MODULE;
        std_1.Node.of(fn).title = "subscribeQueue()";
        new event_mapping_1.EventMapping(this, app_1.App.of(this).makeId(this, "TopicEventMapping"), {
            subscriber: fn,
            publisher: this,
            subscriptionProps: {},
        });
        std_1.Node.of(this).addConnection({
            source: this,
            sourceOp: cloud.TopicInflightMethods.PUBLISH,
            target: fn,
            targetOp: cloud.FunctionInflightMethods.INVOKE_ASYNC,
            name: "subscribeQueue()",
        });
        this.policy.addStatement(fn, cloud.FunctionInflightMethods.INVOKE_ASYNC);
    }
    onLift(host, ops) {
        (0, util_1.bindSimulatorResource)(__filename, this, host, ops);
        super.onLift(host, ops);
    }
    /** @internal */
    _toInflight() {
        return (0, util_1.makeSimulatorJsClient)(__filename, this);
    }
    /** @internal */
    get _liftMap() {
        return {
            [cloud.QueueInflightMethods.PUSH]: [],
            [cloud.TopicInflightMethods.PUBLISH]: [],
        };
    }
    toSimulator() {
        const props = {};
        return {
            type: cloud.TOPIC_FQN,
            props,
        };
    }
}
exports.Topic = Topic;
/**
 * Utility class to work with topic message handlers.
 */
class TopicOnMessageHandler {
    /**
     * Converts a `cloud.ITopicOnMessageHandler` to a `cloud.IFunctionHandler`
     * @param handler the handler to convert
     * @returns the function handler
     */
    static toFunctionHandler(handler) {
        return (0, core_1.lift)({ handler }).inflight(async (ctx, event) => {
            await ctx.handler(event);
            return undefined;
        });
    }
}
exports.TopicOnMessageHandler = TopicOnMessageHandler;
//# sourceMappingURL=data:application/json;base64,