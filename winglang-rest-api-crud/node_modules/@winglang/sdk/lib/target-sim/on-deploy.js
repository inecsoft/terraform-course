"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OnDeploy = void 0;
const tokens_1 = require("./tokens");
const util_1 = require("./util");
const cloud = __importStar(require("../cloud"));
const std_1 = require("../std");
class OnDeploy extends cloud.OnDeploy {
    constructor(scope, id, handler, props = {}) {
        super(scope, id, handler, props);
        this.fn = new cloud.Function(this, "Function", handler, props);
        std_1.Node.of(this.fn).sourceModule = std_1.SDK_SOURCE_MODULE;
        this.node.addDependency(this.fn);
        for (const c of props.executeBefore ?? []) {
            c.node.addDependency(this);
        }
        for (const c of props.executeAfter ?? []) {
            this.node.addDependency(c);
        }
    }
    toSimulator() {
        const props = {
            functionHandle: (0, tokens_1.simulatorHandleToken)(this.fn),
        };
        return {
            type: cloud.ON_DEPLOY_FQN,
            props,
        };
    }
    onLift(host, ops) {
        (0, util_1.bindSimulatorResource)(__filename, this, host, ops);
        super.onLift(host, ops);
    }
    /** @internal */
    _toInflight() {
        return (0, util_1.makeSimulatorJsClient)(__filename, this);
    }
}
exports.OnDeploy = OnDeploy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib24tZGVwbG95LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RhcmdldC1zaW0vb24tZGVwbG95LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUEscUNBQWdEO0FBQ2hELGlDQUFzRTtBQUN0RSxnREFBa0M7QUFFbEMsZ0NBQTJFO0FBRTNFLE1BQWEsUUFBUyxTQUFRLEtBQUssQ0FBQyxRQUFRO0lBRTFDLFlBQ0UsS0FBZ0IsRUFDaEIsRUFBVSxFQUNWLE9BQStCLEVBQy9CLFFBQTZCLEVBQUU7UUFFL0IsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRWpDLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsT0FBb0IsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUM1RSxVQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxZQUFZLEdBQUcsdUJBQWlCLENBQUM7UUFFbEQsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRWpDLEtBQUssTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLGFBQWEsSUFBSSxFQUFFLEVBQUUsQ0FBQztZQUMxQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3QixDQUFDO1FBRUQsS0FBSyxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsWUFBWSxJQUFJLEVBQUUsRUFBRSxDQUFDO1lBQ3pDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdCLENBQUM7SUFDSCxDQUFDO0lBRU0sV0FBVztRQUNoQixNQUFNLEtBQUssR0FBbUI7WUFDNUIsY0FBYyxFQUFFLElBQUEsNkJBQW9CLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztTQUM5QyxDQUFDO1FBQ0YsT0FBTztZQUNMLElBQUksRUFBRSxLQUFLLENBQUMsYUFBYTtZQUN6QixLQUFLO1NBQ04sQ0FBQztJQUNKLENBQUM7SUFFTSxNQUFNLENBQUMsSUFBbUIsRUFBRSxHQUFhO1FBQzlDLElBQUEsNEJBQXFCLEVBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDbkQsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVELGdCQUFnQjtJQUNULFdBQVc7UUFDaEIsT0FBTyxJQUFBLDRCQUFxQixFQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNqRCxDQUFDO0NBQ0Y7QUEzQ0QsNEJBMkNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCB7IE9uRGVwbG95U2NoZW1hIH0gZnJvbSBcIi4vc2NoZW1hLXJlc291cmNlc1wiO1xuaW1wb3J0IHsgc2ltdWxhdG9ySGFuZGxlVG9rZW4gfSBmcm9tIFwiLi90b2tlbnNcIjtcbmltcG9ydCB7IGJpbmRTaW11bGF0b3JSZXNvdXJjZSwgbWFrZVNpbXVsYXRvckpzQ2xpZW50IH0gZnJvbSBcIi4vdXRpbFwiO1xuaW1wb3J0ICogYXMgY2xvdWQgZnJvbSBcIi4uL2Nsb3VkXCI7XG5pbXBvcnQgeyBUb1NpbXVsYXRvck91dHB1dCB9IGZyb20gXCIuLi9zaW11bGF0b3JcIjtcbmltcG9ydCB7IElJbmZsaWdodCwgSUluZmxpZ2h0SG9zdCwgTm9kZSwgU0RLX1NPVVJDRV9NT0RVTEUgfSBmcm9tIFwiLi4vc3RkXCI7XG5cbmV4cG9ydCBjbGFzcyBPbkRlcGxveSBleHRlbmRzIGNsb3VkLk9uRGVwbG95IHtcbiAgcHJpdmF0ZSByZWFkb25seSBmbjogY2xvdWQuRnVuY3Rpb247XG4gIGNvbnN0cnVjdG9yKFxuICAgIHNjb3BlOiBDb25zdHJ1Y3QsXG4gICAgaWQ6IHN0cmluZyxcbiAgICBoYW5kbGVyOiBjbG91ZC5JT25EZXBsb3lIYW5kbGVyLFxuICAgIHByb3BzOiBjbG91ZC5PbkRlcGxveVByb3BzID0ge31cbiAgKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCBoYW5kbGVyLCBwcm9wcyk7XG5cbiAgICB0aGlzLmZuID0gbmV3IGNsb3VkLkZ1bmN0aW9uKHRoaXMsIFwiRnVuY3Rpb25cIiwgaGFuZGxlciBhcyBJSW5mbGlnaHQsIHByb3BzKTtcbiAgICBOb2RlLm9mKHRoaXMuZm4pLnNvdXJjZU1vZHVsZSA9IFNES19TT1VSQ0VfTU9EVUxFO1xuXG4gICAgdGhpcy5ub2RlLmFkZERlcGVuZGVuY3kodGhpcy5mbik7XG5cbiAgICBmb3IgKGNvbnN0IGMgb2YgcHJvcHMuZXhlY3V0ZUJlZm9yZSA/PyBbXSkge1xuICAgICAgYy5ub2RlLmFkZERlcGVuZGVuY3kodGhpcyk7XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBjIG9mIHByb3BzLmV4ZWN1dGVBZnRlciA/PyBbXSkge1xuICAgICAgdGhpcy5ub2RlLmFkZERlcGVuZGVuY3koYyk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHRvU2ltdWxhdG9yKCk6IFRvU2ltdWxhdG9yT3V0cHV0IHtcbiAgICBjb25zdCBwcm9wczogT25EZXBsb3lTY2hlbWEgPSB7XG4gICAgICBmdW5jdGlvbkhhbmRsZTogc2ltdWxhdG9ySGFuZGxlVG9rZW4odGhpcy5mbiksXG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogY2xvdWQuT05fREVQTE9ZX0ZRTixcbiAgICAgIHByb3BzLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMgb25MaWZ0KGhvc3Q6IElJbmZsaWdodEhvc3QsIG9wczogc3RyaW5nW10pOiB2b2lkIHtcbiAgICBiaW5kU2ltdWxhdG9yUmVzb3VyY2UoX19maWxlbmFtZSwgdGhpcywgaG9zdCwgb3BzKTtcbiAgICBzdXBlci5vbkxpZnQoaG9zdCwgb3BzKTtcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHVibGljIF90b0luZmxpZ2h0KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIG1ha2VTaW11bGF0b3JKc0NsaWVudChfX2ZpbGVuYW1lLCB0aGlzKTtcbiAgfVxufVxuIl19