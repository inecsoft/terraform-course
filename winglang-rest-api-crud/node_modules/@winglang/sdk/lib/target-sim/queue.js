"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueueSetConsumerHandler = exports.Queue = void 0;
const app_1 = require("./app");
const event_mapping_1 = require("./event-mapping");
const function_1 = require("./function");
const policy_1 = require("./policy");
const tokens_1 = require("./tokens");
const util_1 = require("./util");
const cloud = __importStar(require("../cloud"));
const core_1 = require("../core");
const errors_1 = require("../core/errors");
const std_1 = require("../std");
/**
 * Simulator implementation of `cloud.Queue`.
 *
 * @inflight `@winglang/sdk.cloud.IQueueClient`
 */
class Queue extends cloud.Queue {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        if (props.timeout) {
            throw new errors_1.NotImplementedError("Queue.timeout is not supported on the sim platform yet.", {
                issue: "https://github.com/winglang/wing/issues/1980",
                resource: this.constructor.name,
                operation: "timeout",
            });
        }
        this.timeout = props.timeout ?? std_1.Duration.fromSeconds(30);
        this.retentionPeriod = props.retentionPeriod ?? std_1.Duration.fromHours(1);
        if (this.retentionPeriod.seconds < this.timeout.seconds) {
            throw new Error("Retention period must be greater than or equal to timeout");
        }
        this.policy = new policy_1.Policy(this, "Policy", { principal: this });
        if (props.dlq && props.dlq.queue) {
            this.dlq = props.dlq;
            this.policy.addStatement(this.dlq.queue, cloud.QueueInflightMethods.PUSH);
            std_1.Node.of(this).addConnection({
                source: this,
                sourceOp: cloud.QueueInflightMethods.POP,
                target: this.dlq.queue,
                targetOp: cloud.QueueInflightMethods.PUSH,
                name: "dead-letter queue",
            });
        }
    }
    /** @internal */
    get _liftMap() {
        return {
            [cloud.QueueInflightMethods.PUSH]: [],
            [cloud.QueueInflightMethods.PURGE]: [],
            [cloud.QueueInflightMethods.APPROX_SIZE]: [],
            [cloud.QueueInflightMethods.POP]: [],
        };
    }
    setConsumer(inflight, props = {}) {
        const functionHandler = QueueSetConsumerHandler.toFunctionHandler(inflight);
        const fn = new cloud.Function(this, app_1.App.of(this).makeId(this, "Consumer"), functionHandler, props);
        const fnNode = std_1.Node.of(fn);
        fnNode.sourceModule = std_1.SDK_SOURCE_MODULE;
        fnNode.title = "setConsumer()";
        const mapping = new event_mapping_1.EventMapping(this, app_1.App.of(this).makeId(this, "QueueEventMapping"), {
            subscriber: fn,
            publisher: this,
            subscriptionProps: {
                batchSize: props.batchSize ?? 1,
            },
        });
        this.policy.addStatement(fn, cloud.FunctionInflightMethods.INVOKE);
        this.policy.addStatement(fn, function_1.FunctionInflightMethods.HAS_AVAILABLE_WORKERS);
        mapping.node.addDependency(this.policy);
        std_1.Node.of(this).addConnection({
            source: this,
            sourceOp: cloud.QueueInflightMethods.PUSH,
            target: fn,
            targetOp: cloud.FunctionInflightMethods.INVOKE,
            name: "setConsumer()",
        });
        return fn;
    }
    toSimulator() {
        const props = {
            timeout: this.timeout.seconds,
            retentionPeriod: this.retentionPeriod.seconds,
            dlq: this.dlq
                ? {
                    dlqHandler: (0, tokens_1.simulatorHandleToken)(this.dlq.queue),
                    maxDeliveryAttempts: this.dlq.maxDeliveryAttempts ?? cloud.DEFAULT_DELIVERY_ATTEMPTS,
                }
                : undefined,
        };
        return {
            type: cloud.QUEUE_FQN,
            props,
        };
    }
    onLift(host, ops) {
        (0, util_1.bindSimulatorResource)(__filename, this, host, ops);
        super.onLift(host, ops);
    }
    /** @internal */
    _toInflight() {
        return (0, util_1.makeSimulatorJsClient)(__filename, this);
    }
}
exports.Queue = Queue;
/**
 * Utility class to work with queue set consumer handlers.
 */
class QueueSetConsumerHandler {
    /**
     * Converts from a `cloud.IQueueSetConsumerHandler` to a `cloud.IFunctionHandler`.
     * @param handler The handler to convert.
     * @returns The function handler.
     */
    static toFunctionHandler(handler) {
        return (0, core_1.lift)({ handler }).inflight(async (ctx, event) => {
            const batchItemFailures = [];
            let parsed = JSON.parse(event ?? "{}");
            if (!parsed.messages)
                throw new Error('No "messages" field in event.');
            for (const $message of parsed.messages) {
                try {
                    await ctx.handler($message.payload);
                }
                catch (error) {
                    // TODO: an error from user code is getting dropped - bad! https://github.com/winglang/wing/issues/6445
                    batchItemFailures.push($message);
                }
            }
            return batchItemFailures.length > 0
                ? JSON.stringify(batchItemFailures)
                : undefined;
        });
    }
}
exports.QueueSetConsumerHandler = QueueSetConsumerHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVldWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGFyZ2V0LXNpbS9xdWV1ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBLCtCQUE0QjtBQUM1QixtREFBK0M7QUFDL0MseUNBQW1GO0FBQ25GLHFDQUFrQztBQUdsQyxxQ0FBZ0Q7QUFDaEQsaUNBQXNFO0FBQ3RFLGdEQUFrQztBQUNsQyxrQ0FBd0M7QUFDeEMsMkNBQXFEO0FBRXJELGdDQUEwRTtBQUUxRTs7OztHQUlHO0FBQ0gsTUFBYSxLQUFNLFNBQVEsS0FBSyxDQUFDLEtBQUs7SUFNcEMsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxRQUEwQixFQUFFO1FBQ3BFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXhCLElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2xCLE1BQU0sSUFBSSw0QkFBbUIsQ0FDM0IseURBQXlELEVBQ3pEO2dCQUNFLEtBQUssRUFBRSw4Q0FBOEM7Z0JBQ3JELFFBQVEsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUk7Z0JBQy9CLFNBQVMsRUFBRSxTQUFTO2FBQ3JCLENBQ0YsQ0FBQztRQUNKLENBQUM7UUFFRCxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLElBQUksY0FBUSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN6RCxJQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQyxlQUFlLElBQUksY0FBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUV0RSxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDeEQsTUFBTSxJQUFJLEtBQUssQ0FDYiwyREFBMkQsQ0FDNUQsQ0FBQztRQUNKLENBQUM7UUFFRCxJ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LEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ3JELE1BQU0saUJBQWlCLEdBQUcsRUFBRSxDQUFDO1lBQzdCLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxDQUFDO1lBQ3ZDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUTtnQkFBRSxNQUFNLElBQUksS0FBSyxDQUFDLCtCQUErQixDQUFDLENBQUM7WUFDdkUsS0FBSyxNQUFNLFFBQVEsSUFBSSxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7Z0JBQ3ZDLElBQUksQ0FBQztvQkFDSCxNQUFNLEdBQUcsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUN0QyxDQUFDO2dCQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7b0JBQ2YsdUdBQXVHO29CQUN2RyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ25DLENBQUM7WUFDSCxDQUFDO1lBQ0QsT0FBTyxpQkFBaUIsQ0FBQyxNQUFNLEdBQUcsQ0FBQztnQkFDakMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUM7Z0JBQ25DLENBQUMsQ0FBQyxTQUFTLENBQUM7UUFDaEIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUExQkQsMERBMEJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCB7IEFwcCB9IGZyb20gXCIuL2FwcFwiO1xuaW1wb3J0IHsgRXZlbnRNYXBwaW5nIH0gZnJvbSBcIi4vZXZlbnQtbWFwcGluZ1wiO1xuaW1wb3J0IHsgRnVuY3Rpb25JbmZsaWdodE1ldGhvZHMgYXMgU2ltRnVuY3Rpb25JbmZsaWdodE1ldGhvZHMgfSBmcm9tIFwiLi9mdW5jdGlvblwiO1xuaW1wb3J0IHsgUG9saWN5IH0gZnJvbSBcIi4vcG9saWN5XCI7XG5pbXBvcnQgeyBJU2ltdWxhdG9yUmVzb3VyY2UgfSBmcm9tIFwiLi9yZXNvdXJjZVwiO1xuaW1wb3J0IHsgUXVldWVTY2hlbWEgfSBmcm9tIFwiLi9zY2hlbWEtcmVzb3VyY2VzXCI7XG5pbXBvcnQgeyBzaW11bGF0b3JIYW5kbGVUb2tlbiB9IGZyb20gXCIuL3Rva2Vuc1wiO1xuaW1wb3J0IHsgYmluZFNpbXVsYXRvclJlc291cmNlLCBtYWtlU2ltdWxhdG9ySnNDbGllbnQgfSBmcm9tIFwiLi91dGlsXCI7XG5pbXBvcnQgKiBhcyBjbG91ZCBmcm9tIFwiLi4vY2xvdWRcIjtcbmltcG9ydCB7IGxpZnQsIExpZnRNYXAgfSBmcm9tIFwiLi4vY29yZVwiO1xuaW1wb3J0IHsgTm90SW1wbGVtZW50ZWRFcnJvciB9IGZyb20gXCIuLi9jb3JlL2Vycm9yc1wiO1xuaW1wb3J0IHsgVG9TaW11bGF0b3JPdXRwdXQgfSBmcm9tIFwiLi4vc2ltdWxhdG9yXCI7XG5pbXBvcnQgeyBEdXJhdGlvbiwgSUluZmxpZ2h0SG9zdCwgTm9kZSwgU0RLX1NPVVJDRV9NT0RVTEUgfSBmcm9tIFwiLi4vc3RkXCI7XG5cbi8qKlxuICogU2ltdWxhdG9yIGltcGxlbWVudGF0aW9uIG9mIGBjbG91ZC5RdWV1ZWAuXG4gKlxuICogQGluZmxpZ2h0IGBAd2luZ2xhbmcvc2RrLmNsb3VkLklRdWV1ZUNsaWVudGBcbiAqL1xuZXhwb3J0IGNsYXNzIFF1ZXVlIGV4dGVuZHMgY2xvdWQuUXVldWUgaW1wbGVtZW50cyBJU2ltdWxhdG9yUmVzb3VyY2Uge1xuICBwcml2YXRlIHJlYWRvbmx5IHRpbWVvdXQ6IER1cmF0aW9uO1xuICBwcml2YXRlIHJlYWRvbmx5IHJldGVudGlvblBlcmlvZDogRHVyYXRpb247XG4gIHByaXZhdGUgcmVhZG9ubHkgZGxxPzogY2xvdWQuRGVhZExldHRlclF1ZXVlUHJvcHM7XG4gIHByaXZhdGUgcmVhZG9ubHkgcG9saWN5OiBQb2xpY3k7XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IGNsb3VkLlF1ZXVlUHJvcHMgPSB7fSkge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xuXG4gICAgaWYgKHByb3BzLnRpbWVvdXQpIHtcbiAgICAgIHRocm93IG5ldyBOb3RJbXBsZW1lbnRlZEVycm9yKFxuICAgICAgICBcIlF1ZXVlLnRpbWVvdXQgaXMgbm90IHN1cHBvcnRlZCBvbiB0aGUgc2ltIHBsYXRmb3JtIHlldC5cIixcbiAgICAgICAge1xuICAgICAgICAgIGlzc3VlOiBcImh0dHBzOi8vZ2l0aHViLmNvbS93aW5nbGFuZy93aW5nL2lzc3Vlcy8xOTgwXCIsXG4gICAgICAgICAgcmVzb3VyY2U6IHRoaXMuY29uc3RydWN0b3IubmFtZSxcbiAgICAgICAgICBvcGVyYXRpb246IFwidGltZW91dFwiLFxuICAgICAgICB9XG4gICAgICApO1xuICAgIH1cblxuICAgIHRoaXMudGltZW91dCA9IHByb3BzLnRpbWVvdXQgPz8gRHVyYXRpb24uZnJvbVNlY29uZHMoMzApO1xuICAgIHRoaXMucmV0ZW50aW9uUGVyaW9kID0gcHJvcHMucmV0ZW50aW9uUGVyaW9kID8/IER1cmF0aW9uLmZyb21Ib3VycygxKTtcblxuICAgIGlmICh0aGlzLnJldGVudGlvblBlcmlvZC5zZWNvbmRzIDwgdGhpcy50aW1lb3V0LnNlY29uZHMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgXCJSZXRlbnRpb24gcGVyaW9kIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHRpbWVvdXRcIlxuICAgICAgKTtcbiAgICB9XG5cbiAgICB0aGlzLnBvbGljeSA9IG5ldyBQb2xpY3kodGhpcywgXCJQb2xpY3lcIiwgeyBwcmluY2lwYWw6IHRoaXMgfSk7XG5cbiAgICBpZiAocHJvcHMuZGxxICYmIHByb3BzLmRscS5xdWV1ZSkge1xuICAgICAgdGhpcy5kbHEgPSBwcm9wcy5kbHE7XG5cbiAgICAgIHRoaXMucG9saWN5LmFkZFN0YXRlbWVudCh0aGlzLmRscS5xdWV1ZSwgY2xvdWQuUXVldWVJbmZsaWdodE1ldGhvZHMuUFVTSCk7XG5cbiAgICAgIE5vZGUub2YodGhpcykuYWRkQ29ubmVjdGlvbih7XG4gICAgICAgIHNvdXJjZTogdGhpcyxcbiAgICAgICAgc291cmNlT3A6IGNsb3VkLlF1ZXVlSW5mbGlnaHRNZXRob2RzLlBPUCxcbiAgICAgICAgdGFyZ2V0OiB0aGlzLmRscS5xdWV1ZSxcbiAgICAgICAgdGFyZ2V0T3A6IGNsb3VkLlF1ZXVlSW5mbGlnaHRNZXRob2RzLlBVU0gsXG4gICAgICAgIG5hbWU6IFwiZGVhZC1sZXR0ZXIgcXVldWVcIixcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHVibGljIGdldCBfbGlmdE1hcCgpOiBMaWZ0TWFwIHtcbiAgICByZXR1cm4ge1xuICAgICAgW2Nsb3VkLlF1ZXVlSW5mbGlnaHRNZXRob2RzLlBVU0hdOiBbXSxcbiAgICAgIFtjbG91ZC5RdWV1ZUluZmxpZ2h0TWV0aG9kcy5QVVJHRV06IFtdLFxuICAgICAgW2Nsb3VkLlF1ZXVlSW5mbGlnaHRNZXRob2RzLkFQUFJPWF9TSVpFXTogW10sXG4gICAgICBbY2xvdWQuUXVldWVJbmZsaWdodE1ldGhvZHMuUE9QXTogW10sXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRDb25zdW1lcihcbiAgICBpbmZsaWdodDogY2xvdWQuSVF1ZXVlU2V0Q29uc3VtZXJIYW5kbGVyLFxuICAgIHByb3BzOiBjbG91ZC5RdWV1ZVNldENvbnN1bWVyT3B0aW9ucyA9IHt9XG4gICk6IGNsb3VkLkZ1bmN0aW9uIHtcbiAgICBjb25zdCBmdW5jdGlvbkhhbmRsZXIgPSBRdWV1ZVNldENvbnN1bWVySGFuZGxlci50b0Z1bmN0aW9uSGFuZGxlcihpbmZsaWdodCk7XG4gICAgY29uc3QgZm4gPSBuZXcgY2xvdWQuRnVuY3Rpb24oXG4gICAgICB0aGlzLFxuICAgICAgQXBwLm9mKHRoaXMpLm1ha2VJZCh0aGlzLCBcIkNvbnN1bWVyXCIpLFxuICAgICAgZnVuY3Rpb25IYW5kbGVyLFxuICAgICAgcHJvcHNcbiAgICApO1xuICAgIGNvbnN0IGZuTm9kZSA9IE5vZGUub2YoZm4pO1xuICAgIGZuTm9kZS5zb3VyY2VNb2R1bGUgPSBTREtfU09VUkNFX01PRFVMRTtcbiAgICBmbk5vZGUudGl0bGUgPSBcInNldENvbnN1bWVyKClcIjtcblxuICAgIGNvbnN0IG1hcHBpbmcgPSBuZXcgRXZlbnRNYXBwaW5nKFxuICAgICAgdGhpcyxcbiAgICAgIEFwcC5vZih0aGlzKS5tYWtlSWQodGhpcywgXCJRdWV1ZUV2ZW50TWFwcGluZ1wiKSxcbiAgICAgIHtcbiAgICAgICAgc3Vic2NyaWJlcjogZm4sXG4gICAgICAgIHB1Ymxpc2hlcjogdGhpcyxcbiAgICAgICAgc3Vic2NyaXB0aW9uUHJvcHM6IHtcbiAgICAgICAgICBiYXRjaFNpemU6IHByb3BzLmJhdGNoU2l6ZSA/PyAxLFxuICAgICAgICB9LFxuICAgICAgfVxuICAgICk7XG5cbiAgICB0aGlzLnBvbGljeS5hZGRTdGF0ZW1lbnQoZm4sIGNsb3VkLkZ1bmN0aW9uSW5mbGlnaHRNZXRob2RzLklOVk9LRSk7XG4gICAgdGhpcy5wb2xpY3kuYWRkU3RhdGVtZW50KFxuICAgICAgZm4sXG4gICAgICBTaW1GdW5jdGlvbkluZmxpZ2h0TWV0aG9kcy5IQVNfQVZBSUxBQkxFX1dPUktFUlNcbiAgICApO1xuICAgIG1hcHBpbmcubm9kZS5hZGREZXBlbmRlbmN5KHRoaXMucG9saWN5KTtcblxuICAgIE5vZGUub2YodGhpcykuYWRkQ29ubmVjdGlvbih7XG4gICAgICBzb3VyY2U6IHRoaXMsXG4gICAgICBzb3VyY2VPcDogY2xvdWQuUXVldWVJbmZsaWdodE1ldGhvZHMuUFVTSCxcbiAgICAgIHRhcmdldDogZm4sXG4gICAgICB0YXJnZXRPcDogY2xvdWQuRnVuY3Rpb25JbmZsaWdodE1ldGhvZHMuSU5WT0tFLFxuICAgICAgbmFtZTogXCJzZXRDb25zdW1lcigpXCIsXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZm47XG4gIH1cblxuICBwdWJsaWMgdG9TaW11bGF0b3IoKTogVG9TaW11bGF0b3JPdXRwdXQge1xuICAgIGNvbnN0IHByb3BzOiBRdWV1ZVNjaGVtYSA9IHtcbiAgICAgIHRpbWVvdXQ6IHRoaXMudGltZW91dC5zZWNvbmRzLFxuICAgICAgcmV0ZW50aW9uUGVyaW9kOiB0aGlzLnJldGVudGlvblBlcmlvZC5zZWNvbmRzLFxuICAgICAgZGxxOiB0aGlzLmRscVxuICAgICAgICA/IHtcbiAgICAgICAgICAgIGRscUhhbmRsZXI6IHNpbXVsYXRvckhhbmRsZVRva2VuKHRoaXMuZGxxLnF1ZXVlKSxcbiAgICAgICAgICAgIG1heERlbGl2ZXJ5QXR0ZW1wdHM6XG4gICAgICAgICAgICAgIHRoaXMuZGxxLm1heERlbGl2ZXJ5QXR0ZW1wdHMgPz8gY2xvdWQuREVGQVVMVF9ERUxJVkVSWV9BVFRFTVBUUyxcbiAgICAgICAgICB9XG4gICAgICAgIDogdW5kZWZpbmVkLFxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IGNsb3VkLlFVRVVFX0ZRTixcbiAgICAgIHByb3BzLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMgb25MaWZ0KGhvc3Q6IElJbmZsaWdodEhvc3QsIG9wczogc3RyaW5nW10pOiB2b2lkIHtcbiAgICBiaW5kU2ltdWxhdG9yUmVzb3VyY2UoX19maWxlbmFtZSwgdGhpcywgaG9zdCwgb3BzKTtcbiAgICBzdXBlci5vbkxpZnQoaG9zdCwgb3BzKTtcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHVibGljIF90b0luZmxpZ2h0KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIG1ha2VTaW11bGF0b3JKc0NsaWVudChfX2ZpbGVuYW1lLCB0aGlzKTtcbiAgfVxufVxuXG4vKipcbiAqIFV0aWxpdHkgY2xhc3MgdG8gd29yayB3aXRoIHF1ZXVlIHNldCBjb25zdW1lciBoYW5kbGVycy5cbiAqL1xuZXhwb3J0IGNsYXNzIFF1ZXVlU2V0Q29uc3VtZXJIYW5kbGVyIHtcbiAgLyoqXG4gICAqIENvbnZlcnRzIGZyb20gYSBgY2xvdWQuSVF1ZXVlU2V0Q29uc3VtZXJIYW5kbGVyYCB0byBhIGBjbG91ZC5JRnVuY3Rpb25IYW5kbGVyYC5cbiAgICogQHBhcmFtIGhhbmRsZXIgVGhlIGhhbmRsZXIgdG8gY29udmVydC5cbiAgICogQHJldHVybnMgVGhlIGZ1bmN0aW9uIGhhbmRsZXIuXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHRvRnVuY3Rpb25IYW5kbGVyKFxuICAgIGhhbmRsZXI6IGNsb3VkLklRdWV1ZVNldENvbnN1bWVySGFuZGxlclxuICApOiBjbG91ZC5JRnVuY3Rpb25IYW5kbGVyIHtcbiAgICByZXR1cm4gbGlmdCh7IGhhbmRsZXIgfSkuaW5mbGlnaHQoYXN5bmMgKGN0eCwgZXZlbnQpID0+IHtcbiAgICAgIGNvbnN0IGJhdGNoSXRlbUZhaWx1cmVzID0gW107XG4gICAgICBsZXQgcGFyc2VkID0gSlNPTi5wYXJzZShldmVudCA/PyBcInt9XCIpO1xuICAgICAgaWYgKCFwYXJzZWQubWVzc2FnZXMpIHRocm93IG5ldyBFcnJvcignTm8gXCJtZXNzYWdlc1wiIGZpZWxkIGluIGV2ZW50LicpO1xuICAgICAgZm9yIChjb25zdCAkbWVzc2FnZSBvZiBwYXJzZWQubWVzc2FnZXMpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBhd2FpdCBjdHguaGFuZGxlcigkbWVzc2FnZS5wYXlsb2FkKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAvLyBUT0RPOiBhbiBlcnJvciBmcm9tIHVzZXIgY29kZSBpcyBnZXR0aW5nIGRyb3BwZWQgLSBiYWQhIGh0dHBzOi8vZ2l0aHViLmNvbS93aW5nbGFuZy93aW5nL2lzc3Vlcy82NDQ1XG4gICAgICAgICAgYmF0Y2hJdGVtRmFpbHVyZXMucHVzaCgkbWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXRjaEl0ZW1GYWlsdXJlcy5sZW5ndGggPiAwXG4gICAgICAgID8gSlNPTi5zdHJpbmdpZnkoYmF0Y2hJdGVtRmFpbHVyZXMpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH0pO1xuICB9XG59XG4iXX0=