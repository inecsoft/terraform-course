import { Construct } from "constructs";
import { ISimulatorResource } from "./resource";
import { EventSubscription, ResourceHandle } from "./schema-resources";
import { LiftMap } from "../core";
import { ISimulatorResourceInstance, ToSimulatorOutput } from "../simulator/simulator";
import { IInflightHost, IResource, Resource } from "../std";
/**
 * Interface shared by all event publishing simulator resources.
 */
export interface IEventPublisher extends ISimulatorResourceInstance {
    /**
     * Adds event subscription to publisher client.
     * @param subscriber the subscriber function
     * @param subscriptionProps additional subscription properties
     */
    addEventSubscription: (subscriber: ResourceHandle, subscriptionProps: EventSubscription) => Promise<void>;
    /**
     * Removes event subscription from the publisher client.
     * @param subscriber the subscriber function
     * @param subscriptionProps additional subscription properties
     */
    removeEventSubscription: (subscriber: ResourceHandle) => Promise<void>;
}
export declare const EVENT_MAPPING_FQN: string;
export interface EventMappingProps {
    subscriber: IResource;
    publisher: IResource;
    subscriptionProps: EventSubscription;
}
/**
 * Implementation of `sim.EventMapping`.
 *
 * @inflight `@winglang/sdk.sim.EventMapping`
 */
export declare class EventMapping extends Resource implements ISimulatorResource {
    private readonly _eventProps;
    constructor(scope: Construct, id: string, props: EventMappingProps);
    /** @internal */
    get _liftMap(): LiftMap;
    get eventProps(): EventMappingProps;
    toSimulator(): ToSimulatorOutput;
    onLift(host: IInflightHost, ops: string[]): void;
    _toInflight(): string;
}
