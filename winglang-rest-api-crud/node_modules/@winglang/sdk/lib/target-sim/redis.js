"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Redis = void 0;
const container_1 = require("./container");
const util_1 = require("./util");
const ex = __importStar(require("../ex"));
/**
 * Simulator implementation of `redis.Redis`.
 *
 * @inflight `@winglang/sdk.redis.IRedisClient`
 */
class Redis extends ex.Redis {
    constructor(scope, id) {
        super(scope, id);
        this.WING_REDIS_IMAGE = process.env.WING_REDIS_IMAGE ??
            // Redis version 7.0.9
            "redis@sha256:e50c7e23f79ae81351beacb20e004720d4bed657415e68c2b1a2b5557c075ce0";
        const c = new container_1.Container(this, "Container", {
            name: "redis",
            image: this.WING_REDIS_IMAGE,
            containerPort: 6379,
        });
        if (!c.hostPort) {
            throw new Error("Failed to get host port for the redis container");
        }
        this.hostPort = c.hostPort;
    }
    toSimulator() {
        const props = {
            port: this.hostPort,
        };
        return {
            type: ex.REDIS_FQN,
            props,
        };
    }
    onLift(host, ops) {
        (0, util_1.bindSimulatorResource)(__filename, this, host, ops);
        super.onLift(host, ops);
    }
    /** @internal */
    get _liftMap() {
        return {
            [ex.RedisInflightMethods.URL]: [],
            [ex.RedisInflightMethods.SET]: [],
            [ex.RedisInflightMethods.GET]: [],
            [ex.RedisInflightMethods.HSET]: [],
            [ex.RedisInflightMethods.HGET]: [],
            [ex.RedisInflightMethods.SADD]: [],
            [ex.RedisInflightMethods.SMEMBERS]: [],
            [ex.RedisInflightMethods.DEL]: [],
        };
    }
    /** @internal */
    _toInflight() {
        return (0, util_1.makeSimulatorJsClient)(__filename, this);
    }
}
exports.Redis = Redis;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVkaXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGFyZ2V0LXNpbS9yZWRpcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBLDJDQUF3QztBQUd4QyxpQ0FBc0U7QUFFdEUsMENBQTRCO0FBSTVCOzs7O0dBSUc7QUFDSCxNQUFhLEtBQU0sU0FBUSxFQUFFLENBQUMsS0FBSztJQVFqQyxZQUFZLEtBQWdCLEVBQUUsRUFBVTtRQUN0QyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBUkYscUJBQWdCLEdBQy9CLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCO1lBQzVCLHNCQUFzQjtZQUN0QiwrRUFBK0UsQ0FBQztRQU9oRixNQUFNLENBQUMsR0FBRyxJQUFJLHFCQUFTLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRTtZQUN6QyxJQUFJLEVBQUUsT0FBTztZQUNiLEtBQUssRUFBRSxJQUFJLENBQUMsZ0JBQWdCO1lBQzVCLGFBQWEsRUFBRSxJQUFJO1NBQ3BCLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDaEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxpREFBaUQsQ0FBQyxDQUFDO1FBQ3JFLENBQUM7UUFFRCxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUM7SUFDN0IsQ0FBQztJQUVNLFdBQVc7UUFDaEIsTUFBTSxLQUFLLEdBQWdCO1lBQ3pCLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUTtTQUNwQixDQUFDO1FBQ0YsT0FBTztZQUNMLElBQUksRUFBRSxFQUFFLENBQUMsU0FBUztZQUNsQixLQUFLO1NBQ04sQ0FBQztJQUNKLENBQUM7SUFFTSxNQUFNLENBQUMsSUFBbUIsRUFBRSxHQUFhO1FBQzlDLElBQUEsNEJBQXFCLEVBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDbkQsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVELGdCQUFnQjtJQUNoQixJQUFXLFFBQVE7UUFDakIsT0FBTztZQUNMLENBQUMsRUFBRSxDQUFDLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUU7WUFDakMsQ0FBQyxFQUFFLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRTtZQUNqQyxDQUFDLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFO1lBQ2pDLENBQUMsRUFBRSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDbEMsQ0FBQyxFQUFFLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUNsQyxDQUFDLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFO1lBQ2xDLENBQUMsRUFBRSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUU7WUFDdEMsQ0FBQyxFQUFFLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRTtTQUNsQyxDQUFDO0lBQ0osQ0FBQztJQUVELGdCQUFnQjtJQUNULFdBQVc7UUFDaEIsT0FBTyxJQUFBLDRCQUFxQixFQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNqRCxDQUFDO0NBQ0Y7QUF6REQsc0JBeURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCB7IENvbnRhaW5lciB9IGZyb20gXCIuL2NvbnRhaW5lclwiO1xuaW1wb3J0IHsgSVNpbXVsYXRvclJlc291cmNlIH0gZnJvbSBcIi4vcmVzb3VyY2VcIjtcbmltcG9ydCB7IFJlZGlzU2NoZW1hIH0gZnJvbSBcIi4vc2NoZW1hLXJlc291cmNlc1wiO1xuaW1wb3J0IHsgYmluZFNpbXVsYXRvclJlc291cmNlLCBtYWtlU2ltdWxhdG9ySnNDbGllbnQgfSBmcm9tIFwiLi91dGlsXCI7XG5pbXBvcnQgeyBMaWZ0TWFwIH0gZnJvbSBcIi4uL2NvcmVcIjtcbmltcG9ydCAqIGFzIGV4IGZyb20gXCIuLi9leFwiO1xuaW1wb3J0IHsgVG9TaW11bGF0b3JPdXRwdXQgfSBmcm9tIFwiLi4vc2ltdWxhdG9yXCI7XG5pbXBvcnQgeyBJSW5mbGlnaHRIb3N0IH0gZnJvbSBcIi4uL3N0ZFwiO1xuXG4vKipcbiAqIFNpbXVsYXRvciBpbXBsZW1lbnRhdGlvbiBvZiBgcmVkaXMuUmVkaXNgLlxuICpcbiAqIEBpbmZsaWdodCBgQHdpbmdsYW5nL3Nkay5yZWRpcy5JUmVkaXNDbGllbnRgXG4gKi9cbmV4cG9ydCBjbGFzcyBSZWRpcyBleHRlbmRzIGV4LlJlZGlzIGltcGxlbWVudHMgSVNpbXVsYXRvclJlc291cmNlIHtcbiAgcHJpdmF0ZSByZWFkb25seSBXSU5HX1JFRElTX0lNQUdFID1cbiAgICBwcm9jZXNzLmVudi5XSU5HX1JFRElTX0lNQUdFID8/XG4gICAgLy8gUmVkaXMgdmVyc2lvbiA3LjAuOVxuICAgIFwicmVkaXNAc2hhMjU2OmU1MGM3ZTIzZjc5YWU4MTM1MWJlYWNiMjBlMDA0NzIwZDRiZWQ2NTc0MTVlNjhjMmIxYTJiNTU1N2MwNzVjZTBcIjtcblxuICBwcml2YXRlIHJlYWRvbmx5IGhvc3RQb3J0OiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICBjb25zdCBjID0gbmV3IENvbnRhaW5lcih0aGlzLCBcIkNvbnRhaW5lclwiLCB7XG4gICAgICBuYW1lOiBcInJlZGlzXCIsXG4gICAgICBpbWFnZTogdGhpcy5XSU5HX1JFRElTX0lNQUdFLFxuICAgICAgY29udGFpbmVyUG9ydDogNjM3OSxcbiAgICB9KTtcblxuICAgIGlmICghYy5ob3N0UG9ydCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGdldCBob3N0IHBvcnQgZm9yIHRoZSByZWRpcyBjb250YWluZXJcIik7XG4gICAgfVxuXG4gICAgdGhpcy5ob3N0UG9ydCA9IGMuaG9zdFBvcnQ7XG4gIH1cblxuICBwdWJsaWMgdG9TaW11bGF0b3IoKTogVG9TaW11bGF0b3JPdXRwdXQge1xuICAgIGNvbnN0IHByb3BzOiBSZWRpc1NjaGVtYSA9IHtcbiAgICAgIHBvcnQ6IHRoaXMuaG9zdFBvcnQsXG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogZXguUkVESVNfRlFOLFxuICAgICAgcHJvcHMsXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBvbkxpZnQoaG9zdDogSUluZmxpZ2h0SG9zdCwgb3BzOiBzdHJpbmdbXSk6IHZvaWQge1xuICAgIGJpbmRTaW11bGF0b3JSZXNvdXJjZShfX2ZpbGVuYW1lLCB0aGlzLCBob3N0LCBvcHMpO1xuICAgIHN1cGVyLm9uTGlmdChob3N0LCBvcHMpO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwdWJsaWMgZ2V0IF9saWZ0TWFwKCk6IExpZnRNYXAge1xuICAgIHJldHVybiB7XG4gICAgICBbZXguUmVkaXNJbmZsaWdodE1ldGhvZHMuVVJMXTogW10sXG4gICAgICBbZXguUmVkaXNJbmZsaWdodE1ldGhvZHMuU0VUXTogW10sXG4gICAgICBbZXguUmVkaXNJbmZsaWdodE1ldGhvZHMuR0VUXTogW10sXG4gICAgICBbZXguUmVkaXNJbmZsaWdodE1ldGhvZHMuSFNFVF06IFtdLFxuICAgICAgW2V4LlJlZGlzSW5mbGlnaHRNZXRob2RzLkhHRVRdOiBbXSxcbiAgICAgIFtleC5SZWRpc0luZmxpZ2h0TWV0aG9kcy5TQUREXTogW10sXG4gICAgICBbZXguUmVkaXNJbmZsaWdodE1ldGhvZHMuU01FTUJFUlNdOiBbXSxcbiAgICAgIFtleC5SZWRpc0luZmxpZ2h0TWV0aG9kcy5ERUxdOiBbXSxcbiAgICB9O1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwdWJsaWMgX3RvSW5mbGlnaHQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gbWFrZVNpbXVsYXRvckpzQ2xpZW50KF9fZmlsZW5hbWUsIHRoaXMpO1xuICB9XG59XG4iXX0=