"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScheduleOnTickHandler = exports.Schedule = void 0;
const app_1 = require("./app");
const event_mapping_1 = require("./event-mapping");
const policy_1 = require("./policy");
const util_1 = require("./util");
const cloud_1 = require("../cloud");
const cloud = __importStar(require("../cloud"));
const core_1 = require("../core");
const std_1 = require("../std");
/**
 * Simulator implementation of `cloud.Schedule`.
 *
 * @inflight `@winglang/sdk.cloud.IScheduleClient`
 */
class Schedule extends cloud.Schedule {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        const { rate, cron } = props;
        this.cronExpression = cron ?? (0, util_1.convertDurationToCronExpression)(rate);
        this.policy = new policy_1.Policy(this, "Policy", { principal: this });
    }
    onTick(inflight, props = {}) {
        const functionHandler = ScheduleOnTickHandler.toFunctionHandler(inflight);
        const fn = new cloud_1.Function(this, app_1.App.of(this).makeId(this, "OnTick"), functionHandler, props);
        std_1.Node.of(fn).sourceModule = std_1.SDK_SOURCE_MODULE;
        std_1.Node.of(fn).title = "onTick()";
        new event_mapping_1.EventMapping(this, app_1.App.of(this).makeId(this, "OnTickMapping"), {
            subscriber: fn,
            publisher: this,
            subscriptionProps: {},
        });
        std_1.Node.of(this).addConnection({
            source: this,
            sourceOp: cloud.ScheduleInflightMethods.TICK,
            target: fn,
            targetOp: cloud.FunctionInflightMethods.INVOKE,
            name: "onTick()",
        });
        this.policy.addStatement(fn, cloud.FunctionInflightMethods.INVOKE);
        return fn;
    }
    toSimulator() {
        const props = {
            cronExpression: this.cronExpression,
        };
        return {
            type: cloud.SCHEDULE_FQN,
            props,
        };
    }
    /** @internal */
    _toInflight() {
        return (0, util_1.makeSimulatorJsClient)(__filename, this);
    }
    onLift(host, ops) {
        (0, util_1.bindSimulatorResource)(__filename, this, host, ops);
        super.onLift(host, ops);
    }
}
exports.Schedule = Schedule;
/**
 * Utility class to work with schedule on tick handlers.
 */
class ScheduleOnTickHandler {
    /**
     * Converts a `cloud.IScheduleOnTickHandler` to a `cloud.IFunctionHandler`.
     * @param handler the handler to convert
     * @returns the function handler
     */
    static toFunctionHandler(handler) {
        return (0, core_1.lift)({ handler }).inflight(async (ctx) => {
            await ctx.handler();
            return undefined;
        });
    }
}
exports.ScheduleOnTickHandler = ScheduleOnTickHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZWR1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGFyZ2V0LXNpbS9zY2hlZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBLCtCQUE0QjtBQUM1QixtREFBK0M7QUFDL0MscUNBQWtDO0FBR2xDLGlDQUlnQjtBQUNoQixvQ0FBb0M7QUFDcEMsZ0RBQWtDO0FBQ2xDLGtDQUErQjtBQUUvQixnQ0FBZ0U7QUFFaEU7Ozs7R0FJRztBQUNILE1BQWEsUUFBUyxTQUFRLEtBQUssQ0FBQyxRQUFRO0lBSTFDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsUUFBNkIsRUFBRTtRQUN2RSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN4QixNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQztRQUU3QixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksSUFBSSxJQUFBLHNDQUErQixFQUFDLElBQUssQ0FBQyxDQUFDO1FBQ3JFLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxlQUFNLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFTSxNQUFNLENBQ1gsUUFBc0MsRUFDdEMsUUFBcUMsRUFBRTtRQUV2QyxNQUFNLGVBQWUsR0FBRyxxQkFBcUIsQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMxRSxNQUFNLEVBQUUsR0FBRyxJQUFJLGdCQUFRLENBQ3JCLElBQUksRUFDSixTQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLEVBQ25DLGVBQWUsRUFDZixLQUFLLENBQ04sQ0FBQztRQUNGLFVBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsWUFBWSxHQUFHLHVCQUFpQixDQUFDO1FBQzdDLFVBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxHQUFHLFVBQVUsQ0FBQztRQUUvQixJQUFJLDRCQUFZLENBQUMsSUFBSSxFQUFFLFNBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxlQUFlLENBQUMsRUFBRTtZQUNqRSxVQUFVLEVBQUUsRUFBRTtZQUNkLFNBQVMsRUFBRSxJQUFJO1lBQ2YsaUJBQWlCLEVBQUUsRUFBRTtTQUN0QixDQUFDLENBQUM7UUFFSCxVQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLGFBQWEsQ0FBQztZQUMxQixNQUFNLEVBQUUsSUFBSTtZQUNaLFFBQVEsRUFBRSxLQUFLLENBQUMsdUJBQXVCLENBQUMsSUFBSTtZQUM1QyxNQUFNLEVBQUUsRUFBRTtZQUNWLFFBQVEsRUFBRSxLQUFLLENBQUMsdUJBQXVCLENBQUMsTUFBTTtZQUM5QyxJQUFJLEVBQUUsVUFBVTtTQUNqQixDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRW5FLE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQztJQUVNLFdBQVc7UUFDaEIsTUFBTSxLQUFLLEdBQW1CO1lBQzVCLGNBQWMsRUFBRSxJQUFJLENBQUMsY0FBYztTQUNwQyxDQUFDO1FBQ0YsT0FBTztZQUNMLElBQUksRUFBRSxLQUFLLENBQUMsWUFBWTtZQUN4QixLQUFLO1NBQ04sQ0FBQztJQUNKLENBQUM7SUFFRCxnQkFBZ0I7SUFDVCxXQUFXO1FBQ2hCLE9BQU8sSUFBQSw0QkFBcUIsRUFBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVNLE1BQU0sQ0FBQyxJQUFtQixFQUFFLEdBQWE7UUFDOUMsSUFBQSw0QkFBcUIsRUFBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNuRCxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUMxQixDQUFDO0NBQ0Y7QUEvREQsNEJBK0RDO0FBRUQ7O0dBRUc7QUFDSCxNQUFhLHFCQUFxQjtJQUNoQzs7OztPQUlHO0lBQ0ksTUFBTSxDQUFDLGlCQUFpQixDQUM3QixPQUFxQztRQUVyQyxPQUFPLElBQUEsV0FBSSxFQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFO1lBQzlDLE1BQU0sR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ3BCLE9BQU8sU0FBUyxDQUFDO1FBQ25CLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBZEQsc0RBY0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4vYXBwXCI7XG5pbXBvcnQgeyBFdmVudE1hcHBpbmcgfSBmcm9tIFwiLi9ldmVudC1tYXBwaW5nXCI7XG5pbXBvcnQgeyBQb2xpY3kgfSBmcm9tIFwiLi9wb2xpY3lcIjtcbmltcG9ydCB7IElTaW11bGF0b3JSZXNvdXJjZSB9IGZyb20gXCIuL3Jlc291cmNlXCI7XG5pbXBvcnQgeyBTY2hlZHVsZVNjaGVtYSB9IGZyb20gXCIuL3NjaGVtYS1yZXNvdXJjZXNcIjtcbmltcG9ydCB7XG4gIGJpbmRTaW11bGF0b3JSZXNvdXJjZSxcbiAgbWFrZVNpbXVsYXRvckpzQ2xpZW50LFxuICBjb252ZXJ0RHVyYXRpb25Ub0Nyb25FeHByZXNzaW9uLFxufSBmcm9tIFwiLi91dGlsXCI7XG5pbXBvcnQgeyBGdW5jdGlvbiB9IGZyb20gXCIuLi9jbG91ZFwiO1xuaW1wb3J0ICogYXMgY2xvdWQgZnJvbSBcIi4uL2Nsb3VkXCI7XG5pbXBvcnQgeyBsaWZ0IH0gZnJvbSBcIi4uL2NvcmVcIjtcbmltcG9ydCB7IFRvU2ltdWxhdG9yT3V0cHV0IH0gZnJvbSBcIi4uL3NpbXVsYXRvclwiO1xuaW1wb3J0IHsgSUluZmxpZ2h0SG9zdCwgTm9kZSwgU0RLX1NPVVJDRV9NT0RVTEUgfSBmcm9tIFwiLi4vc3RkXCI7XG5cbi8qKlxuICogU2ltdWxhdG9yIGltcGxlbWVudGF0aW9uIG9mIGBjbG91ZC5TY2hlZHVsZWAuXG4gKlxuICogQGluZmxpZ2h0IGBAd2luZ2xhbmcvc2RrLmNsb3VkLklTY2hlZHVsZUNsaWVudGBcbiAqL1xuZXhwb3J0IGNsYXNzIFNjaGVkdWxlIGV4dGVuZHMgY2xvdWQuU2NoZWR1bGUgaW1wbGVtZW50cyBJU2ltdWxhdG9yUmVzb3VyY2Uge1xuICBwcml2YXRlIHJlYWRvbmx5IGNyb25FeHByZXNzaW9uOiBzdHJpbmc7XG4gIHByaXZhdGUgcmVhZG9ubHkgcG9saWN5OiBQb2xpY3k7XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IGNsb3VkLlNjaGVkdWxlUHJvcHMgPSB7fSkge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xuICAgIGNvbnN0IHsgcmF0ZSwgY3JvbiB9ID0gcHJvcHM7XG5cbiAgICB0aGlzLmNyb25FeHByZXNzaW9uID0gY3JvbiA/PyBjb252ZXJ0RHVyYXRpb25Ub0Nyb25FeHByZXNzaW9uKHJhdGUhKTtcbiAgICB0aGlzLnBvbGljeSA9IG5ldyBQb2xpY3kodGhpcywgXCJQb2xpY3lcIiwgeyBwcmluY2lwYWw6IHRoaXMgfSk7XG4gIH1cblxuICBwdWJsaWMgb25UaWNrKFxuICAgIGluZmxpZ2h0OiBjbG91ZC5JU2NoZWR1bGVPblRpY2tIYW5kbGVyLFxuICAgIHByb3BzOiBjbG91ZC5TY2hlZHVsZU9uVGlja09wdGlvbnMgPSB7fVxuICApOiBjbG91ZC5GdW5jdGlvbiB7XG4gICAgY29uc3QgZnVuY3Rpb25IYW5kbGVyID0gU2NoZWR1bGVPblRpY2tIYW5kbGVyLnRvRnVuY3Rpb25IYW5kbGVyKGluZmxpZ2h0KTtcbiAgICBjb25zdCBmbiA9IG5ldyBGdW5jdGlvbihcbiAgICAgIHRoaXMsXG4gICAgICBBcHAub2YodGhpcykubWFrZUlkKHRoaXMsIFwiT25UaWNrXCIpLFxuICAgICAgZnVuY3Rpb25IYW5kbGVyLFxuICAgICAgcHJvcHNcbiAgICApO1xuICAgIE5vZGUub2YoZm4pLnNvdXJjZU1vZHVsZSA9IFNES19TT1VSQ0VfTU9EVUxFO1xuICAgIE5vZGUub2YoZm4pLnRpdGxlID0gXCJvblRpY2soKVwiO1xuXG4gICAgbmV3IEV2ZW50TWFwcGluZyh0aGlzLCBBcHAub2YodGhpcykubWFrZUlkKHRoaXMsIFwiT25UaWNrTWFwcGluZ1wiKSwge1xuICAgICAgc3Vic2NyaWJlcjogZm4sXG4gICAgICBwdWJsaXNoZXI6IHRoaXMsXG4gICAgICBzdWJzY3JpcHRpb25Qcm9wczoge30sXG4gICAgfSk7XG5cbiAgICBOb2RlLm9mKHRoaXMpLmFkZENvbm5lY3Rpb24oe1xuICAgICAgc291cmNlOiB0aGlzLFxuICAgICAgc291cmNlT3A6IGNsb3VkLlNjaGVkdWxlSW5mbGlnaHRNZXRob2RzLlRJQ0ssXG4gICAgICB0YXJnZXQ6IGZuLFxuICAgICAgdGFyZ2V0T3A6IGNsb3VkLkZ1bmN0aW9uSW5mbGlnaHRNZXRob2RzLklOVk9LRSxcbiAgICAgIG5hbWU6IFwib25UaWNrKClcIixcbiAgICB9KTtcbiAgICB0aGlzLnBvbGljeS5hZGRTdGF0ZW1lbnQoZm4sIGNsb3VkLkZ1bmN0aW9uSW5mbGlnaHRNZXRob2RzLklOVk9LRSk7XG5cbiAgICByZXR1cm4gZm47XG4gIH1cblxuICBwdWJsaWMgdG9TaW11bGF0b3IoKTogVG9TaW11bGF0b3JPdXRwdXQge1xuICAgIGNvbnN0IHByb3BzOiBTY2hlZHVsZVNjaGVtYSA9IHtcbiAgICAgIGNyb25FeHByZXNzaW9uOiB0aGlzLmNyb25FeHByZXNzaW9uLFxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IGNsb3VkLlNDSEVEVUxFX0ZRTixcbiAgICAgIHByb3BzLFxuICAgIH07XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIHB1YmxpYyBfdG9JbmZsaWdodCgpOiBzdHJpbmcge1xuICAgIHJldHVybiBtYWtlU2ltdWxhdG9ySnNDbGllbnQoX19maWxlbmFtZSwgdGhpcyk7XG4gIH1cblxuICBwdWJsaWMgb25MaWZ0KGhvc3Q6IElJbmZsaWdodEhvc3QsIG9wczogc3RyaW5nW10pOiB2b2lkIHtcbiAgICBiaW5kU2ltdWxhdG9yUmVzb3VyY2UoX19maWxlbmFtZSwgdGhpcywgaG9zdCwgb3BzKTtcbiAgICBzdXBlci5vbkxpZnQoaG9zdCwgb3BzKTtcbiAgfVxufVxuXG4vKipcbiAqIFV0aWxpdHkgY2xhc3MgdG8gd29yayB3aXRoIHNjaGVkdWxlIG9uIHRpY2sgaGFuZGxlcnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBTY2hlZHVsZU9uVGlja0hhbmRsZXIge1xuICAvKipcbiAgICogQ29udmVydHMgYSBgY2xvdWQuSVNjaGVkdWxlT25UaWNrSGFuZGxlcmAgdG8gYSBgY2xvdWQuSUZ1bmN0aW9uSGFuZGxlcmAuXG4gICAqIEBwYXJhbSBoYW5kbGVyIHRoZSBoYW5kbGVyIHRvIGNvbnZlcnRcbiAgICogQHJldHVybnMgdGhlIGZ1bmN0aW9uIGhhbmRsZXJcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgdG9GdW5jdGlvbkhhbmRsZXIoXG4gICAgaGFuZGxlcjogY2xvdWQuSVNjaGVkdWxlT25UaWNrSGFuZGxlclxuICApOiBjbG91ZC5JRnVuY3Rpb25IYW5kbGVyIHtcbiAgICByZXR1cm4gbGlmdCh7IGhhbmRsZXIgfSkuaW5mbGlnaHQoYXN5bmMgKGN0eCkgPT4ge1xuICAgICAgYXdhaXQgY3R4LmhhbmRsZXIoKTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==