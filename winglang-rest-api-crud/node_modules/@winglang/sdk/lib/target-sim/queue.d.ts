import { Construct } from "constructs";
import { ISimulatorResource } from "./resource";
import * as cloud from "../cloud";
import { LiftMap } from "../core";
import { ToSimulatorOutput } from "../simulator";
import { IInflightHost } from "../std";
/**
 * Simulator implementation of `cloud.Queue`.
 *
 * @inflight `@winglang/sdk.cloud.IQueueClient`
 */
export declare class Queue extends cloud.Queue implements ISimulatorResource {
    private readonly timeout;
    private readonly retentionPeriod;
    private readonly dlq?;
    private readonly policy;
    constructor(scope: Construct, id: string, props?: cloud.QueueProps);
    /** @internal */
    get _liftMap(): LiftMap;
    setConsumer(inflight: cloud.IQueueSetConsumerHandler, props?: cloud.QueueSetConsumerOptions): cloud.Function;
    toSimulator(): ToSimulatorOutput;
    onLift(host: IInflightHost, ops: string[]): void;
    /** @internal */
    _toInflight(): string;
}
/**
 * Utility class to work with queue set consumer handlers.
 */
export declare class QueueSetConsumerHandler {
    /**
     * Converts from a `cloud.IQueueSetConsumerHandler` to a `cloud.IFunctionHandler`.
     * @param handler The handler to convert.
     * @returns The function handler.
     */
    static toFunctionHandler(handler: cloud.IQueueSetConsumerHandler): cloud.IFunctionHandler;
}
