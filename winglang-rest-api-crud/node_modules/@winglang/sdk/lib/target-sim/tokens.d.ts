import { ITokenResolver } from "../core/tokens";
import { IInflightHost, IResource } from "../std";
/**
 * Produce a token that will be replaced with the handle of a resource
 * when the simulator is started. This can be inserted to an environment variable
 * so that the real value can be used by an inflight function.
 */
export declare function simulatorHandleToken(resource: IResource): string;
/**
 * Produce a token that will be replaced with a deploy-time resource attribute
 * when the simulator is started.
 */
export declare function simulatorAttrToken(resource: IResource, attrName: string): string;
/**
 * Regular expression that matches a simulator token. This is a sequence of
 * characters that can appear in the middle of any string in the following format:
 *
 * ${wsim#path/to/resource#property.path}
 */
export declare const SIMULATOR_TOKEN_REGEX: RegExp;
/**
 * The same as SIMULATOR_TOKEN_REGEX, but it must match the entire string.
 */
export declare const SIMULATOR_TOKEN_REGEX_FULL: RegExp;
/**
 * Returns true is the given value is a Simulator token.
 */
export declare function isSimulatorToken(value: string): boolean;
/**
 * Represents values that can only be resolved after the app is synthesized.
 * Tokens values are captured as environment variable, and resolved through the compilation target token mechanism.
 */
export declare class SimTokens implements ITokenResolver {
    /**
     * Returns true is the given value is a Simulator token.
     */
    isToken(value: any): boolean;
    /**
     * Lifts a value into an inflight context.
     */
    lift(value: any): string;
    /**
     * Lifts the given token to the host.
     */
    onLiftValue(host: IInflightHost, value: any): void;
}
