import { Construct } from "constructs";
import { ISimulatorResource } from "./resource";
import * as cloud from "../cloud";
import { ToSimulatorOutput } from "../simulator/simulator";
import { IInflightHost } from "../std";
/**
 * Simulator implementation of `cloud.Api`.
 *
 * @inflight `@winglang/sdk.cloud.IApiClient`
 */
export declare class Api extends cloud.Api implements ISimulatorResource {
    private readonly handlers;
    private readonly endpoint;
    private readonly policy;
    constructor(scope: Construct, id: string, props?: cloud.ApiProps);
    protected get _endpoint(): cloud.Endpoint;
    private createOrGetFunction;
    private addEndpoint;
    /**
     * Add a inflight to handle GET requests to a path.
     * @param path path to add
     * @param inflight Inflight to handle request
     * @param props Additional props
     */
    get(path: string, inflight: cloud.IApiEndpointHandler, props?: cloud.ApiGetOptions | undefined): void;
    /**
     * Add a inflight to handle POST requests to a path.
     * @param path path to add
     * @param inflight Inflight to handle request
     * @param props Additional props
     */
    post(path: string, inflight: cloud.IApiEndpointHandler, props?: cloud.ApiPostOptions | undefined): void;
    /**
     * Add a inflight to handle PUT requests to a path.
     * @param path path to add
     * @param inflight Inflight to handle request
     * @param props Additional props
     */
    put(path: string, inflight: cloud.IApiEndpointHandler, props?: cloud.ApiPutOptions | undefined): void;
    /**
     * Add a inflight to handle DELETE requests to a path.
     * @param path path to add
     * @param inflight Inflight to handle request
     * @param props Additional props
     */
    delete(path: string, inflight: cloud.IApiEndpointHandler, props?: cloud.ApiDeleteOptions | undefined): void;
    /**
     * Add a inflight to handle PATCH requests to a path.
     * @param path path to add
     * @param inflight Inflight to handle request
     * @param props Additional props
     */
    patch(path: string, inflight: cloud.IApiEndpointHandler, props?: cloud.ApiPatchOptions | undefined): void;
    /**
     * Add a inflight to handle OPTIONS requests to a path.
     * @param path path to add
     * @param inflight Inflight to handle request
     * @param props Additional props
     */
    options(path: string, inflight: cloud.IApiEndpointHandler, props?: cloud.ApiOptionsOptions | undefined): void;
    /**
     * Add a inflight to handle HEAD requests to a path.
     * @param path path to add
     * @param inflight Inflight to handle request
     * @param props Additional props
     */
    head(path: string, inflight: cloud.IApiEndpointHandler, props?: cloud.ApiHeadOptions | undefined): void;
    /**
     * Add a inflight to handle CONNECT requests to a path.
     * @param path path to add
     * @param inflight Inflight to handle request
     * @param props Additional props
     */
    connect(path: string, inflight: cloud.IApiEndpointHandler, props?: cloud.ApiConnectOptions | undefined): void;
    toSimulator(): ToSimulatorOutput;
    onLift(host: IInflightHost, ops: string[]): void;
    /** @internal */
    _toInflight(): string;
}
