"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BucketEventHandler = exports.Bucket = void 0;
const policy_1 = require("./policy");
const tokens_1 = require("./tokens");
const util_1 = require("./util");
const cloud = __importStar(require("../cloud"));
const core_1 = require("../core");
/**
 * Simulator implementation of `cloud.Bucket`.
 *
 * @inflight `@winglang/sdk.cloud.IBucketClient`
 */
class Bucket extends cloud.Bucket {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        this.initialObjects = {};
        this.public = props.public ?? false;
        this.policy = new policy_1.Policy(this, "Policy", { principal: this });
    }
    /** @internal */
    get _liftMap() {
        return {
            [cloud.BucketInflightMethods.DELETE]: [],
            [cloud.BucketInflightMethods.GET]: [],
            [cloud.BucketInflightMethods.GET_JSON]: [],
            [cloud.BucketInflightMethods.LIST]: [],
            [cloud.BucketInflightMethods.PUT]: [],
            [cloud.BucketInflightMethods.PUT_JSON]: [],
            [cloud.BucketInflightMethods.PUBLIC_URL]: [],
            [cloud.BucketInflightMethods.EXISTS]: [],
            [cloud.BucketInflightMethods.TRY_GET]: [],
            [cloud.BucketInflightMethods.TRY_GET_JSON]: [],
            [cloud.BucketInflightMethods.TRY_DELETE]: [],
            [cloud.BucketInflightMethods.METADATA]: [],
            [cloud.BucketInflightMethods.COPY]: [],
            [cloud.BucketInflightMethods.RENAME]: [],
        };
    }
    /**
     * Iterates over the topics and supply their sim handler
     * @returns an object of Bucket event types (keys) and their topic handlers (values)
     */
    convertTopicsToHandles() {
        const topicMap = {};
        this._topics.forEach((value, key) => {
            topicMap[key] = (0, tokens_1.simulatorHandleToken)(value);
        });
        return topicMap;
    }
    addObject(key, body) {
        this.initialObjects[key] = body;
    }
    createTopicHandler(eventType, inflight) {
        return BucketEventHandler.toTopicOnMessageHandler(inflight, eventType);
    }
    onCreate(fn, opts) {
        super.onCreate(fn, opts);
        const topic = this.getTopic(cloud.BucketEventType.CREATE);
        this.policy.addStatement(topic, cloud.TopicInflightMethods.PUBLISH);
    }
    onDelete(fn, opts) {
        super.onDelete(fn, opts);
        const topic = this.getTopic(cloud.BucketEventType.DELETE);
        this.policy.addStatement(topic, cloud.TopicInflightMethods.PUBLISH);
    }
    onUpdate(fn, opts) {
        super.onUpdate(fn, opts);
        const topic = this.getTopic(cloud.BucketEventType.UPDATE);
        this.policy.addStatement(topic, cloud.TopicInflightMethods.PUBLISH);
    }
    onEvent(fn, opts) {
        super.onEvent(fn, opts);
        const createTopic = this.getTopic(cloud.BucketEventType.CREATE);
        this.policy.addStatement(createTopic, cloud.TopicInflightMethods.PUBLISH);
        const deleteTopic = this.getTopic(cloud.BucketEventType.DELETE);
        this.policy.addStatement(deleteTopic, cloud.TopicInflightMethods.PUBLISH);
        const updateTopic = this.getTopic(cloud.BucketEventType.UPDATE);
        this.policy.addStatement(updateTopic, cloud.TopicInflightMethods.PUBLISH);
    }
    toSimulator() {
        const props = {
            public: this.public,
            initialObjects: this.initialObjects,
            topics: this.convertTopicsToHandles(),
        };
        return {
            type: cloud.BUCKET_FQN,
            props,
        };
    }
    onLift(host, ops) {
        (0, util_1.bindSimulatorResource)(__filename, this, host, ops);
        super.onLift(host, ops);
    }
    /** @internal */
    _toInflight() {
        return (0, util_1.makeSimulatorJsClient)(__filename, this);
    }
}
exports.Bucket = Bucket;
/**
 * Utility class to work with bucket event handlers.
 */
class BucketEventHandler {
    /**
     * Converts a `cloud.IBucketEventHandler` to a `cloud.ITopicOnMessageHandler`.
     * @param handler the handler to convert
     * @param eventType the event type
     * @returns the on message handler.
     */
    static toTopicOnMessageHandler(handler, eventType) {
        return (0, core_1.lift)({ handler, eventType }).inflight(async (ctx, event) => {
            return ctx.handler(event, ctx.eventType);
        });
    }
}
exports.BucketEventHandler = BucketEventHandler;
//# sourceMappingURL=data:application/json;base64,