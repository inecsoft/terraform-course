"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Table = void 0;
const util_1 = require("./util");
const ex = __importStar(require("../ex"));
/**
 * Simulator implementation of `ex.Table`.
 *
 * @inflight `@winglang/sdk.ex.ITableClient`
 */
class Table extends ex.Table {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        this.initialRows = {};
    }
    addRow(key, row) {
        this.initialRows[key] = { ...row, [this.primaryKey]: key };
    }
    toSimulator() {
        const props = {
            name: this.name,
            columns: this.columns,
            primaryKey: this.primaryKey,
            initialRows: this.initialRows,
        };
        return {
            type: ex.TABLE_FQN,
            props,
        };
    }
    /** @internal */
    get _liftMap() {
        return {
            [ex.TableInflightMethods.INSERT]: [],
            [ex.TableInflightMethods.UPSERT]: [],
            [ex.TableInflightMethods.UPDATE]: [],
            [ex.TableInflightMethods.DELETE]: [],
            [ex.TableInflightMethods.GET]: [],
            [ex.TableInflightMethods.TRYGET]: [],
            [ex.TableInflightMethods.LIST]: [],
        };
    }
    onLift(host, ops) {
        (0, util_1.bindSimulatorResource)(__filename, this, host, ops);
        super.onLift(host, ops);
    }
    /** @internal */
    _toInflight() {
        return (0, util_1.makeSimulatorJsClient)(__filename, this);
    }
}
exports.Table = Table;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGFyZ2V0LXNpbS90YWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUdBLGlDQUFzRTtBQUV0RSwwQ0FBNEI7QUFJNUI7Ozs7R0FJRztBQUNILE1BQWEsS0FBTSxTQUFRLEVBQUUsQ0FBQyxLQUFLO0lBRWpDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsUUFBdUIsRUFBRTtRQUNqRSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUZULGdCQUFXLEdBQXlCLEVBQUUsQ0FBQztJQUd4RCxDQUFDO0lBRU0sTUFBTSxDQUFDLEdBQVcsRUFBRSxHQUFTO1FBQ2xDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxHQUFHLEVBQVUsQ0FBQztJQUNyRSxDQUFDO0lBRU0sV0FBVztRQUNoQixNQUFNLEtBQUssR0FBZ0I7WUFDekIsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2YsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO1lBQ3JCLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVTtZQUMzQixXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVc7U0FDOUIsQ0FBQztRQUNGLE9BQU87WUFDTCxJQUFJLEVBQUUsRUFBRSxDQUFDLFNBQVM7WUFDbEIsS0FBSztTQUNOLENBQUM7SUFDSixDQUFDO0lBRUQsZ0JBQWdCO0lBQ2hCLElBQVcsUUFBUTtRQUNqQixPQUFPO1lBQ0wsQ0FBQyxFQUFFLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRTtZQUNwQyxDQUFDLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFO1lBQ3BDLENBQUMsRUFBRSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUU7WUFDcEMsQ0FBQyxFQUFFLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRTtZQUNwQyxDQUFDLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFO1lBQ2pDLENBQUMsRUFBRSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUU7WUFDcEMsQ0FBQyxFQUFFLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRTtTQUNuQyxDQUFDO0lBQ0osQ0FBQztJQUVNLE1BQU0sQ0FBQyxJQUFtQixFQUFFLEdBQWE7UUFDOUMsSUFBQSw0QkFBcUIsRUFBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNuRCxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQsZ0JBQWdCO0lBQ1QsV0FBVztRQUNoQixPQUFPLElBQUEsNEJBQXFCLEVBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2pELENBQUM7Q0FDRjtBQTdDRCxzQkE2Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgSVNpbXVsYXRvclJlc291cmNlIH0gZnJvbSBcIi4vcmVzb3VyY2VcIjtcbmltcG9ydCB7IFRhYmxlU2NoZW1hIH0gZnJvbSBcIi4vc2NoZW1hLXJlc291cmNlc1wiO1xuaW1wb3J0IHsgYmluZFNpbXVsYXRvclJlc291cmNlLCBtYWtlU2ltdWxhdG9ySnNDbGllbnQgfSBmcm9tIFwiLi91dGlsXCI7XG5pbXBvcnQgeyBMaWZ0TWFwIH0gZnJvbSBcIi4uL2NvcmVcIjtcbmltcG9ydCAqIGFzIGV4IGZyb20gXCIuLi9leFwiO1xuaW1wb3J0IHsgVG9TaW11bGF0b3JPdXRwdXQgfSBmcm9tIFwiLi4vc2ltdWxhdG9yL3NpbXVsYXRvclwiO1xuaW1wb3J0IHsgSnNvbiwgSUluZmxpZ2h0SG9zdCB9IGZyb20gXCIuLi9zdGRcIjtcblxuLyoqXG4gKiBTaW11bGF0b3IgaW1wbGVtZW50YXRpb24gb2YgYGV4LlRhYmxlYC5cbiAqXG4gKiBAaW5mbGlnaHQgYEB3aW5nbGFuZy9zZGsuZXguSVRhYmxlQ2xpZW50YFxuICovXG5leHBvcnQgY2xhc3MgVGFibGUgZXh0ZW5kcyBleC5UYWJsZSBpbXBsZW1lbnRzIElTaW11bGF0b3JSZXNvdXJjZSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgaW5pdGlhbFJvd3M6IFJlY29yZDxzdHJpbmcsIEpzb24+ID0ge307XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBleC5UYWJsZVByb3BzID0ge30pIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcbiAgfVxuXG4gIHB1YmxpYyBhZGRSb3coa2V5OiBzdHJpbmcsIHJvdzogSnNvbik6IHZvaWQge1xuICAgIHRoaXMuaW5pdGlhbFJvd3Nba2V5XSA9IHsgLi4ucm93LCBbdGhpcy5wcmltYXJ5S2V5XToga2V5IH0gYXMgSnNvbjtcbiAgfVxuXG4gIHB1YmxpYyB0b1NpbXVsYXRvcigpOiBUb1NpbXVsYXRvck91dHB1dCB7XG4gICAgY29uc3QgcHJvcHM6IFRhYmxlU2NoZW1hID0ge1xuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgY29sdW1uczogdGhpcy5jb2x1bW5zLFxuICAgICAgcHJpbWFyeUtleTogdGhpcy5wcmltYXJ5S2V5LFxuICAgICAgaW5pdGlhbFJvd3M6IHRoaXMuaW5pdGlhbFJvd3MsXG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogZXguVEFCTEVfRlFOLFxuICAgICAgcHJvcHMsXG4gICAgfTtcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHVibGljIGdldCBfbGlmdE1hcCgpOiBMaWZ0TWFwIHtcbiAgICByZXR1cm4ge1xuICAgICAgW2V4LlRhYmxlSW5mbGlnaHRNZXRob2RzLklOU0VSVF06IFtdLFxuICAgICAgW2V4LlRhYmxlSW5mbGlnaHRNZXRob2RzLlVQU0VSVF06IFtdLFxuICAgICAgW2V4LlRhYmxlSW5mbGlnaHRNZXRob2RzLlVQREFURV06IFtdLFxuICAgICAgW2V4LlRhYmxlSW5mbGlnaHRNZXRob2RzLkRFTEVURV06IFtdLFxuICAgICAgW2V4LlRhYmxlSW5mbGlnaHRNZXRob2RzLkdFVF06IFtdLFxuICAgICAgW2V4LlRhYmxlSW5mbGlnaHRNZXRob2RzLlRSWUdFVF06IFtdLFxuICAgICAgW2V4LlRhYmxlSW5mbGlnaHRNZXRob2RzLkxJU1RdOiBbXSxcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIG9uTGlmdChob3N0OiBJSW5mbGlnaHRIb3N0LCBvcHM6IHN0cmluZ1tdKTogdm9pZCB7XG4gICAgYmluZFNpbXVsYXRvclJlc291cmNlKF9fZmlsZW5hbWUsIHRoaXMsIGhvc3QsIG9wcyk7XG4gICAgc3VwZXIub25MaWZ0KGhvc3QsIG9wcyk7XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIHB1YmxpYyBfdG9JbmZsaWdodCgpOiBzdHJpbmcge1xuICAgIHJldHVybiBtYWtlU2ltdWxhdG9ySnNDbGllbnQoX19maWxlbmFtZSwgdGhpcyk7XG4gIH1cbn1cbiJdfQ==