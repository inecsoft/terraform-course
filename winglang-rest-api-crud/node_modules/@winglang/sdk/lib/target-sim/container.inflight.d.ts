import { IContainerClient } from "./container";
import { ContainerAttributes, ContainerSchema } from "./schema-resources";
import { ISimulatorContext, ISimulatorResourceInstance, UpdatePlan } from "../simulator/simulator";
export declare class Container implements IContainerClient, ISimulatorResourceInstance {
    private readonly props;
    private readonly imageTag;
    private readonly containerName;
    private _context;
    private managedVolumes;
    private child;
    constructor(props: ContainerSchema);
    private get context();
    init(context: ISimulatorContext): Promise<ContainerAttributes>;
    start(context: ISimulatorContext): Promise<ContainerAttributes>;
    /**
     * Builds or pulls the docker image used by this container.
     */
    private prepareImage;
    private createEnvFile;
    private tryInspect;
    cleanup(): Promise<void>;
    save(): Promise<void>;
    private loadState;
    private docker;
    private dockerSpawn;
    private saveState;
    plan(): Promise<UpdatePlan>;
    private addTrace;
}
