"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Table = void 0;
const table_utils_1 = require("../shared/table-utils");
const simulator_1 = require("../simulator/simulator");
class Table {
    constructor(props) {
        this.name = props.name;
        this.columns = props.columns;
        this.primaryKey = props.primaryKey;
        this.table = new Map();
        this.initialRows = props.initialRows ?? {};
    }
    get context() {
        if (!this._context) {
            throw new Error("Cannot access context during class construction");
        }
        return this._context;
    }
    async init(context) {
        this._context = context;
        for (const [key, row] of Object.entries(this.initialRows)) {
            await this.context.withTrace({
                message: `Adding initial row (key=${key}).`,
                activity: async () => {
                    return this.table.set(key, row);
                },
            });
        }
        return {};
    }
    async cleanup() { }
    async save() { }
    async plan() {
        return simulator_1.UpdatePlan.AUTO;
    }
    async insert(key, row) {
        (0, table_utils_1.validateRow)(row, this.columns);
        const anyRow = row;
        return this.context.withTrace({
            message: `insert row ${key} into the table ${this.name}.`,
            activity: async () => {
                if (await this.tryGet(key)) {
                    throw new Error(`The primary key "${key}" already exists in the "${this.name}" table.`);
                }
                let item = {};
                item[this.primaryKey] = key;
                for (const column of Object.keys(this.columns)) {
                    item[column] = anyRow[column];
                }
                this.table.set(key, item);
            },
        });
    }
    async upsert(key, row) {
        (0, table_utils_1.validateRow)(row, this.columns);
        const anyRow = row;
        return this.context.withTrace({
            message: `upsert row ${key} into the table ${this.name}.`,
            activity: async () => {
                let item = {};
                item[this.primaryKey] = key;
                for (const column of Object.keys(this.columns)) {
                    item[column] = anyRow[column];
                }
                this.table.set(key, item);
            },
        });
    }
    async update(key, row) {
        (0, table_utils_1.validateRow)(row, this.columns);
        const anyRow = row;
        return this.context.withTrace({
            message: `update row ${key} in table ${this.name}.`,
            activity: async () => {
                try {
                    let item = await this.get(key);
                    for (const column of Object.keys(this.columns)) {
                        if (anyRow[column]) {
                            item[column] = anyRow[column];
                        }
                    }
                    this.table.set(key, item);
                }
                catch {
                    throw new Error(`The primary key "${key}" was not found in the "${this.name}" table.`);
                }
            },
        });
    }
    async delete(key) {
        return this.context.withTrace({
            message: `remove row ${key} from table ${this.name}.`,
            activity: async () => {
                if (!this.table.delete(key)) {
                    throw new Error(`The primary key "${key}" not found in the "${this.name}" table.`);
                }
            },
        });
    }
    async get(key) {
        return this.context.withTrace({
            message: `get row ${key} from table ${this.name}.`,
            activity: async () => {
                let item = this.table.get(key);
                if (item) {
                    return item;
                }
                throw new Error(`Row does not exist (key=${key})`);
            },
        });
    }
    async tryGet(key) {
        if (this.table.has(key)) {
            return this.get(key);
        }
        return undefined;
    }
    async list() {
        return this.context.withTrace({
            message: `list all rows from table ${this.name}.`,
            activity: async () => {
                return Array.from(this.table.values());
            },
        });
    }
}
exports.Table = Table;
//# sourceMappingURL=data:application/json;base64,