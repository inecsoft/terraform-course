"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Secret = void 0;
const cloud_1 = require("../cloud");
const simulator_1 = require("../simulator/simulator");
const std_1 = require("../std");
class Secret {
    constructor(props) {
        this.name = props.name;
    }
    get context() {
        if (!this._context) {
            throw new Error("Cannot access context during class construction");
        }
        return this._context;
    }
    async init(context) {
        this._context = context;
        return {};
    }
    async cleanup() { }
    async save() { }
    async plan() {
        return simulator_1.UpdatePlan.AUTO;
    }
    async value() {
        this.context.addTrace({
            data: {
                message: "Get value",
            },
            level: std_1.LogLevel.VERBOSE,
            sourcePath: this.context.resourcePath,
            sourceType: cloud_1.SECRET_FQN,
            type: std_1.TraceType.RESOURCE,
            timestamp: new Date().toISOString(),
        });
        const secretValue = process.env[this.name];
        if (!secretValue) {
            throw new Error(`No value for secret ${this.name}\n(hint: try running the "wing secrets -t TARGET" to store secret)`);
        }
        return secretValue;
    }
    async valueJson() {
        return JSON.parse(await this.value());
    }
}
exports.Secret = Secret;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VjcmV0LmluZmxpZ2h0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RhcmdldC1zaW0vc2VjcmV0LmluZmxpZ2h0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLG9DQUFxRDtBQUNyRCxzREFJZ0M7QUFDaEMsZ0NBQW1EO0FBRW5ELE1BQWEsTUFBTTtJQUlqQixZQUFZLEtBQW1CO1FBQzdCLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztJQUN6QixDQUFDO0lBRUQsSUFBWSxPQUFPO1FBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDbkIsTUFBTSxJQUFJLEtBQUssQ0FBQyxpREFBaUQsQ0FBQyxDQUFDO1FBQ3JFLENBQUM7UUFDRCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQztJQUVNLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBMEI7UUFDMUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7UUFDeEIsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRU0sS0FBSyxDQUFDLE9BQU8sS0FBbUIsQ0FBQztJQUVqQyxLQUFLLENBQUMsSUFBSSxLQUFtQixDQUFDO0lBRTlCLEtBQUssQ0FBQyxJQUFJO1FBQ2YsT0FBTyxzQkFBVSxDQUFDLElBQUksQ0FBQztJQUN6QixDQUFDO0lBRU0sS0FBSyxDQUFDLEtBQUs7UUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUM7WUFDcEIsSUFBSSxFQUFFO2dCQUNKLE9BQU8sRUFBRSxXQUFXO2FBQ3JCO1lBQ0QsS0FBSyxFQUFFLGNBQVEsQ0FBQyxPQUFPO1lBQ3ZCLFVBQVUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVk7WUFDckMsVUFBVSxFQUFFLGtCQUFVO1lBQ3RCLElBQUksRUFBRSxlQUFTLENBQUMsUUFBUTtZQUN4QixTQUFTLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUU7U0FDcEMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFM0MsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ2pCLE1BQU0sSUFBSSxLQUFLLENBQ2IsdUJBQXVCLElBQUksQ0FBQyxJQUFJLG9FQUFvRSxDQUNyRyxDQUFDO1FBQ0osQ0FBQztRQUVELE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7SUFFTSxLQUFLLENBQUMsU0FBUztRQUNwQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUN4QyxDQUFDO0NBQ0Y7QUF0REQsd0JBc0RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2VjcmV0QXR0cmlidXRlcywgU2VjcmV0U2NoZW1hIH0gZnJvbSBcIi4vc2NoZW1hLXJlc291cmNlc1wiO1xuaW1wb3J0IHsgSVNlY3JldENsaWVudCwgU0VDUkVUX0ZRTiB9IGZyb20gXCIuLi9jbG91ZFwiO1xuaW1wb3J0IHtcbiAgSVNpbXVsYXRvckNvbnRleHQsXG4gIElTaW11bGF0b3JSZXNvdXJjZUluc3RhbmNlLFxuICBVcGRhdGVQbGFuLFxufSBmcm9tIFwiLi4vc2ltdWxhdG9yL3NpbXVsYXRvclwiO1xuaW1wb3J0IHsgSnNvbiwgTG9nTGV2ZWwsIFRyYWNlVHlwZSB9IGZyb20gXCIuLi9zdGRcIjtcblxuZXhwb3J0IGNsYXNzIFNlY3JldCBpbXBsZW1lbnRzIElTZWNyZXRDbGllbnQsIElTaW11bGF0b3JSZXNvdXJjZUluc3RhbmNlIHtcbiAgcHJpdmF0ZSBfY29udGV4dDogSVNpbXVsYXRvckNvbnRleHQgfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBTZWNyZXRTY2hlbWEpIHtcbiAgICB0aGlzLm5hbWUgPSBwcm9wcy5uYW1lO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXQgY29udGV4dCgpOiBJU2ltdWxhdG9yQ29udGV4dCB7XG4gICAgaWYgKCF0aGlzLl9jb250ZXh0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgYWNjZXNzIGNvbnRleHQgZHVyaW5nIGNsYXNzIGNvbnN0cnVjdGlvblwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHQ7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgaW5pdChjb250ZXh0OiBJU2ltdWxhdG9yQ29udGV4dCk6IFByb21pc2U8U2VjcmV0QXR0cmlidXRlcz4ge1xuICAgIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBjbGVhbnVwKCk6IFByb21pc2U8dm9pZD4ge31cblxuICBwdWJsaWMgYXN5bmMgc2F2ZSgpOiBQcm9taXNlPHZvaWQ+IHt9XG5cbiAgcHVibGljIGFzeW5jIHBsYW4oKSB7XG4gICAgcmV0dXJuIFVwZGF0ZVBsYW4uQVVUTztcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyB2YWx1ZSgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHRoaXMuY29udGV4dC5hZGRUcmFjZSh7XG4gICAgICBkYXRhOiB7XG4gICAgICAgIG1lc3NhZ2U6IFwiR2V0IHZhbHVlXCIsXG4gICAgICB9LFxuICAgICAgbGV2ZWw6IExvZ0xldmVsLlZFUkJPU0UsXG4gICAgICBzb3VyY2VQYXRoOiB0aGlzLmNvbnRleHQucmVzb3VyY2VQYXRoLFxuICAgICAgc291cmNlVHlwZTogU0VDUkVUX0ZRTixcbiAgICAgIHR5cGU6IFRyYWNlVHlwZS5SRVNPVVJDRSxcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgIH0pO1xuXG4gICAgY29uc3Qgc2VjcmV0VmFsdWUgPSBwcm9jZXNzLmVudlt0aGlzLm5hbWVdO1xuXG4gICAgaWYgKCFzZWNyZXRWYWx1ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgTm8gdmFsdWUgZm9yIHNlY3JldCAke3RoaXMubmFtZX1cXG4oaGludDogdHJ5IHJ1bm5pbmcgdGhlIFwid2luZyBzZWNyZXRzIC10IFRBUkdFVFwiIHRvIHN0b3JlIHNlY3JldClgXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBzZWNyZXRWYWx1ZTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyB2YWx1ZUpzb24oKTogUHJvbWlzZTxKc29uPiB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoYXdhaXQgdGhpcy52YWx1ZSgpKTtcbiAgfVxufVxuIl19