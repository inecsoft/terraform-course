"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Service = void 0;
const path_1 = require("path");
const tokens_1 = require("./tokens");
const util_1 = require("./util");
const cloud = __importStar(require("../cloud"));
const core_1 = require("../core");
class Service extends cloud.Service {
    constructor(scope, id, handler, props = {}) {
        super(scope, id, handler, props);
        this.permissions = [];
        this.autoStart = props.autoStart ?? true;
    }
    addPermission(resource, op) {
        this.permissions.push([resource, op]);
    }
    toSimulator() {
        const policy = [];
        for (const [resource, operation] of this.permissions) {
            policy.push({
                operation,
                resourceHandle: (0, tokens_1.simulatorHandleToken)(resource),
            });
        }
        const props = {
            environmentVariables: this.env,
            sourceCodeFile: (0, path_1.relative)(core_1.App.of(this).outdir, this.entrypoint),
            autoStart: this.autoStart,
        };
        return {
            type: cloud.SERVICE_FQN,
            props,
            policy,
        };
    }
    /** @internal */
    get _liftMap() {
        return {
            [cloud.ServiceInflightMethods.START]: [],
            [cloud.ServiceInflightMethods.STOP]: [],
            [cloud.ServiceInflightMethods.STARTED]: [],
        };
    }
    onLift(host, ops) {
        (0, util_1.bindSimulatorResource)(__filename, this, host, ops);
        super.onLift(host, ops);
    }
    _toInflight() {
        return (0, util_1.makeSimulatorJsClient)(__filename, this);
    }
}
exports.Service = Service;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90YXJnZXQtc2ltL3NlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwrQkFBZ0M7QUFJaEMscUNBQWdEO0FBQ2hELGlDQUFzRTtBQUN0RSxnREFBa0M7QUFDbEMsa0NBQXVDO0FBSXZDLE1BQWEsT0FDWCxTQUFRLEtBQUssQ0FBQyxPQUFPO0lBTXJCLFlBQ0UsS0FBZ0IsRUFDaEIsRUFBVSxFQUNWLE9BQThCLEVBQzlCLFFBQTRCLEVBQUU7UUFFOUIsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBVGxCLGdCQUFXLEdBQStCLEVBQUUsQ0FBQztRQVU1RCxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDO0lBQzNDLENBQUM7SUFFTSxhQUFhLENBQUMsUUFBbUIsRUFBRSxFQUFVO1FBQ2xELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVNLFdBQVc7UUFDaEIsTUFBTSxNQUFNLEdBQTJCLEVBQUUsQ0FBQztRQUMxQyxLQUFLLE1BQU0sQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3JELE1BQU0sQ0FBQyxJQUFJLENBQUM7Z0JBQ1YsU0FBUztnQkFDVCxjQUFjLEVBQUUsSUFBQSw2QkFBb0IsRUFBQyxRQUFRLENBQUM7YUFDL0MsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUNELE1BQU0sS0FBSyxHQUFrQjtZQUMzQixvQkFBb0IsRUFBRSxJQUFJLENBQUMsR0FBRztZQUM5QixjQUFjLEVBQUUsSUFBQSxlQUFRLEVBQUMsVUFBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQztZQUM5RCxTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVM7U0FDMUIsQ0FBQztRQUNGLE9BQU87WUFDTCxJQUFJLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDdkIsS0FBSztZQUNMLE1BQU07U0FDUCxDQUFDO0lBQ0osQ0FBQztJQUVELGdCQUFnQjtJQUNoQixJQUFXLFFBQVE7UUFDakIsT0FBTztZQUNMLENBQUMsS0FBSyxDQUFDLHNCQUFzQixDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUU7WUFDeEMsQ0FBQyxLQUFLLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUN2QyxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFO1NBQzNDLENBQUM7SUFDSixDQUFDO0lBRU0sTUFBTSxDQUFDLElBQW1CLEVBQUUsR0FBYTtRQUM5QyxJQUFBLDRCQUFxQixFQUFDLFVBQVUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ25ELEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFTSxXQUFXO1FBQ2hCLE9BQU8sSUFBQSw0QkFBcUIsRUFBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDakQsQ0FBQztDQUNGO0FBMURELDBCQTBEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbGF0aXZlIH0gZnJvbSBcInBhdGhcIjtcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgeyBJU2ltdWxhdG9ySW5mbGlnaHRIb3N0LCBJU2ltdWxhdG9yUmVzb3VyY2UgfSBmcm9tIFwiLi9yZXNvdXJjZVwiO1xuaW1wb3J0IHsgU2VydmljZVNjaGVtYSB9IGZyb20gXCIuL3NjaGVtYS1yZXNvdXJjZXNcIjtcbmltcG9ydCB7IHNpbXVsYXRvckhhbmRsZVRva2VuIH0gZnJvbSBcIi4vdG9rZW5zXCI7XG5pbXBvcnQgeyBiaW5kU2ltdWxhdG9yUmVzb3VyY2UsIG1ha2VTaW11bGF0b3JKc0NsaWVudCB9IGZyb20gXCIuL3V0aWxcIjtcbmltcG9ydCAqIGFzIGNsb3VkIGZyb20gXCIuLi9jbG91ZFwiO1xuaW1wb3J0IHsgQXBwLCBMaWZ0TWFwIH0gZnJvbSBcIi4uL2NvcmVcIjtcbmltcG9ydCB7IFBvbGljeVN0YXRlbWVudCwgVG9TaW11bGF0b3JPdXRwdXQgfSBmcm9tIFwiLi4vc2ltdWxhdG9yXCI7XG5pbXBvcnQgeyBJSW5mbGlnaHRIb3N0LCBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vc3RkXCI7XG5cbmV4cG9ydCBjbGFzcyBTZXJ2aWNlXG4gIGV4dGVuZHMgY2xvdWQuU2VydmljZVxuICBpbXBsZW1lbnRzIElTaW11bGF0b3JSZXNvdXJjZSwgSVNpbXVsYXRvckluZmxpZ2h0SG9zdFxue1xuICBwcml2YXRlIHJlYWRvbmx5IHBlcm1pc3Npb25zOiBBcnJheTxbSVJlc291cmNlLCBzdHJpbmddPiA9IFtdO1xuICBwcml2YXRlIHJlYWRvbmx5IGF1dG9TdGFydDogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBzY29wZTogQ29uc3RydWN0LFxuICAgIGlkOiBzdHJpbmcsXG4gICAgaGFuZGxlcjogY2xvdWQuSVNlcnZpY2VIYW5kbGVyLFxuICAgIHByb3BzOiBjbG91ZC5TZXJ2aWNlUHJvcHMgPSB7fVxuICApIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIGhhbmRsZXIsIHByb3BzKTtcbiAgICB0aGlzLmF1dG9TdGFydCA9IHByb3BzLmF1dG9TdGFydCA/PyB0cnVlO1xuICB9XG5cbiAgcHVibGljIGFkZFBlcm1pc3Npb24ocmVzb3VyY2U6IElSZXNvdXJjZSwgb3A6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMucGVybWlzc2lvbnMucHVzaChbcmVzb3VyY2UsIG9wXSk7XG4gIH1cblxuICBwdWJsaWMgdG9TaW11bGF0b3IoKTogVG9TaW11bGF0b3JPdXRwdXQge1xuICAgIGNvbnN0IHBvbGljeTogQXJyYXk8UG9saWN5U3RhdGVtZW50PiA9IFtdO1xuICAgIGZvciAoY29uc3QgW3Jlc291cmNlLCBvcGVyYXRpb25dIG9mIHRoaXMucGVybWlzc2lvbnMpIHtcbiAgICAgIHBvbGljeS5wdXNoKHtcbiAgICAgICAgb3BlcmF0aW9uLFxuICAgICAgICByZXNvdXJjZUhhbmRsZTogc2ltdWxhdG9ySGFuZGxlVG9rZW4ocmVzb3VyY2UpLFxuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IHByb3BzOiBTZXJ2aWNlU2NoZW1hID0ge1xuICAgICAgZW52aXJvbm1lbnRWYXJpYWJsZXM6IHRoaXMuZW52LFxuICAgICAgc291cmNlQ29kZUZpbGU6IHJlbGF0aXZlKEFwcC5vZih0aGlzKS5vdXRkaXIsIHRoaXMuZW50cnlwb2ludCksXG4gICAgICBhdXRvU3RhcnQ6IHRoaXMuYXV0b1N0YXJ0LFxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IGNsb3VkLlNFUlZJQ0VfRlFOLFxuICAgICAgcHJvcHMsXG4gICAgICBwb2xpY3ksXG4gICAgfTtcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHVibGljIGdldCBfbGlmdE1hcCgpOiBMaWZ0TWFwIHtcbiAgICByZXR1cm4ge1xuICAgICAgW2Nsb3VkLlNlcnZpY2VJbmZsaWdodE1ldGhvZHMuU1RBUlRdOiBbXSxcbiAgICAgIFtjbG91ZC5TZXJ2aWNlSW5mbGlnaHRNZXRob2RzLlNUT1BdOiBbXSxcbiAgICAgIFtjbG91ZC5TZXJ2aWNlSW5mbGlnaHRNZXRob2RzLlNUQVJURURdOiBbXSxcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIG9uTGlmdChob3N0OiBJSW5mbGlnaHRIb3N0LCBvcHM6IHN0cmluZ1tdKTogdm9pZCB7XG4gICAgYmluZFNpbXVsYXRvclJlc291cmNlKF9fZmlsZW5hbWUsIHRoaXMsIGhvc3QsIG9wcyk7XG4gICAgc3VwZXIub25MaWZ0KGhvc3QsIG9wcyk7XG4gIH1cblxuICBwdWJsaWMgX3RvSW5mbGlnaHQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gbWFrZVNpbXVsYXRvckpzQ2xpZW50KF9fZmlsZW5hbWUsIHRoaXMpO1xuICB9XG59XG4iXX0=