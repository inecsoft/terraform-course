"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Api = void 0;
const app_1 = require("./app");
const event_mapping_1 = require("./event-mapping");
const policy_1 = require("./policy");
const tokens_1 = require("./tokens");
const util_1 = require("./util");
const cloud_1 = require("../cloud");
const cloud = __importStar(require("../cloud"));
const core_1 = require("../core");
const std_1 = require("../std");
/**
 * Simulator implementation of `cloud.Api`.
 *
 * @inflight `@winglang/sdk.cloud.IApiClient`
 */
class Api extends cloud.Api {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        this.handlers = {};
        this.endpoint = new cloud.Endpoint(this, "Endpoint", (0, tokens_1.simulatorAttrToken)(this, "url"), { label: `Api ${this.node.path}` });
        std_1.Node.of(this.endpoint).hidden = true;
        this.policy = new policy_1.Policy(this, "Policy", { principal: this });
    }
    get _endpoint() {
        return this.endpoint;
    }
    createOrGetFunction(inflight, props, pathPattern, method) {
        let handler = this.handlers[inflight._id];
        if (handler) {
            const routes = handler.mapping.eventProps.subscriptionProps
                .routes;
            routes.push({
                pathPattern,
                method,
            });
            return handler.func;
        }
        const functionHandler = (0, core_1.lift)({ handler: inflight }).inflight(async (ctx, event) => {
            if (!event) {
                throw new Error("invalid API request event");
            }
            let req = JSON.parse(event);
            const response = await ctx.handler(req);
            if (!response) {
                return undefined;
            }
            else {
                return JSON.stringify(response);
            }
        });
        const fn = new cloud_1.Function(this, app_1.App.of(this).makeId(this, "OnRequestHandler"), functionHandler, props);
        std_1.Node.of(fn).sourceModule = std_1.SDK_SOURCE_MODULE;
        std_1.Node.of(fn).title = `${method.toUpperCase()} ${pathPattern}`;
        std_1.Node.of(fn).hidden = true;
        const eventMapping = new event_mapping_1.EventMapping(this, app_1.App.of(this).makeId(this, "ApiEventMapping"), {
            publisher: this,
            subscriber: fn,
            subscriptionProps: {
                routes: [
                    {
                        pathPattern,
                        method,
                    },
                ],
            },
        });
        this.handlers[inflight._id] = {
            func: fn,
            mapping: eventMapping,
        };
        return fn;
    }
    addEndpoint(path, method, inflight, props) {
        this._validatePath(path);
        this._addToSpec(path, method, undefined, this.corsOptions);
        const fn = this.createOrGetFunction(inflight, props, path, method);
        std_1.Node.of(this).addConnection({
            source: this,
            sourceOp: cloud.ApiInflightMethods.REQUEST,
            target: fn,
            targetOp: cloud.FunctionInflightMethods.INVOKE,
            name: `${method.toLowerCase()} ${path}`,
        });
        this.policy.addStatement(fn, cloud.FunctionInflightMethods.INVOKE);
    }
    /**
     * Add a inflight to handle GET requests to a path.
     * @param path path to add
     * @param inflight Inflight to handle request
     * @param props Additional props
     */
    get(path, inflight, props) {
        this.addEndpoint(path, cloud.HttpMethod.GET, inflight, props);
    }
    /**
     * Add a inflight to handle POST requests to a path.
     * @param path path to add
     * @param inflight Inflight to handle request
     * @param props Additional props
     */
    post(path, inflight, props) {
        this.addEndpoint(path, cloud.HttpMethod.POST, inflight, props);
    }
    /**
     * Add a inflight to handle PUT requests to a path.
     * @param path path to add
     * @param inflight Inflight to handle request
     * @param props Additional props
     */
    put(path, inflight, props) {
        this.addEndpoint(path, cloud.HttpMethod.PUT, inflight, props);
    }
    /**
     * Add a inflight to handle DELETE requests to a path.
     * @param path path to add
     * @param inflight Inflight to handle request
     * @param props Additional props
     */
    delete(path, inflight, props) {
        this.addEndpoint(path, cloud.HttpMethod.DELETE, inflight, props);
    }
    /**
     * Add a inflight to handle PATCH requests to a path.
     * @param path path to add
     * @param inflight Inflight to handle request
     * @param props Additional props
     */
    patch(path, inflight, props) {
        this.addEndpoint(path, cloud.HttpMethod.PATCH, inflight, props);
    }
    /**
     * Add a inflight to handle OPTIONS requests to a path.
     * @param path path to add
     * @param inflight Inflight to handle request
     * @param props Additional props
     */
    options(path, inflight, props) {
        this.addEndpoint(path, cloud.HttpMethod.OPTIONS, inflight, props);
    }
    /**
     * Add a inflight to handle HEAD requests to a path.
     * @param path path to add
     * @param inflight Inflight to handle request
     * @param props Additional props
     */
    head(path, inflight, props) {
        this.addEndpoint(path, cloud.HttpMethod.HEAD, inflight, props);
    }
    /**
     * Add a inflight to handle CONNECT requests to a path.
     * @param path path to add
     * @param inflight Inflight to handle request
     * @param props Additional props
     */
    connect(path, inflight, props) {
        this.addEndpoint(path, cloud.HttpMethod.CONNECT, inflight, props);
    }
    toSimulator() {
        const props = {
            openApiSpec: this._getOpenApiSpec(),
            corsHeaders: cloud.Api.renderCorsHeaders(this.corsOptions),
        };
        return {
            type: cloud.API_FQN,
            props,
        };
    }
    onLift(host, ops) {
        (0, util_1.bindSimulatorResource)(__filename, this, host, ops);
        super.onLift(host, ops);
    }
    /** @internal */
    _toInflight() {
        return (0, util_1.makeSimulatorJsClient)(__filename, this);
    }
}
exports.Api = Api;
//# sourceMappingURL=data:application/json;base64,