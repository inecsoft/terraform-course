import { BucketAttributes, BucketSchema } from "./schema-resources";
import { BucketSignedUrlOptions, IBucketClient, ObjectMetadata, BucketPutOptions, BucketDeleteOptions, BucketGetOptions, BucketTryGetOptions } from "../cloud";
import { ISimulatorContext, ISimulatorResourceInstance, UpdatePlan } from "../simulator/simulator";
import { Json } from "../std";
export declare const METADATA_FILENAME = "metadata.json";
export declare class Bucket implements IBucketClient, ISimulatorResourceInstance {
    private _fileDir;
    private _context;
    private readonly initialObjects;
    private readonly _public;
    private readonly topicHandlers;
    private _metadata;
    constructor(props: BucketSchema);
    private get context();
    init(context: ISimulatorContext): Promise<BucketAttributes>;
    cleanup(): Promise<void>;
    plan(): Promise<UpdatePlan>;
    save(): Promise<void>;
    private notifyListeners;
    exists(key: string): Promise<boolean>;
    put(key: string, value: string, opts?: BucketPutOptions): Promise<void>;
    putJson(key: string, body: Json): Promise<void>;
    get(key: string, options?: BucketGetOptions): Promise<string>;
    tryGet(key: string, options?: BucketTryGetOptions): Promise<string | undefined>;
    getJson(key: string): Promise<Json>;
    tryGetJson(key: string): Promise<Json | undefined>;
    delete(key: string, opts?: BucketDeleteOptions): Promise<void>;
    tryDelete(key: string): Promise<boolean>;
    list(prefix?: string): Promise<string[]>;
    publicUrl(key: string): Promise<string>;
    signedUrl(key: string, options?: BucketSignedUrlOptions): Promise<any>;
    /**
     * Get the metadata of an object in the bucket.
     * @param key Key of the object.
     * @throws if the object does not exist.
     */
    metadata(key: string): Promise<ObjectMetadata>;
    copy(srcKey: string, dstKey: string): Promise<void>;
    rename(srcKey: string, dstKey: string): Promise<void>;
    private addFile;
    private hashKey;
    private addTrace;
}
