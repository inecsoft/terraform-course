"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventMapping = exports.EVENT_MAPPING_FQN = void 0;
const tokens_1 = require("./tokens");
const util_1 = require("./util");
const constants_1 = require("../constants");
const std_1 = require("../std");
exports.EVENT_MAPPING_FQN = (0, constants_1.fqnForType)("sim.EventMapping");
/**
 * Implementation of `sim.EventMapping`.
 *
 * @inflight `@winglang/sdk.sim.EventMapping`
 */
class EventMapping extends std_1.Resource {
    constructor(scope, id, props) {
        super(scope, id);
        this._eventProps = props;
        std_1.Node.of(this).hidden = true;
        // Add dependencies to the publisher and subscriber
        this.node.addDependency(props.subscriber);
        this.node.addDependency(props.publisher);
    }
    /** @internal */
    get _liftMap() {
        return {};
    }
    get eventProps() {
        return this._eventProps;
    }
    toSimulator() {
        const props = {
            subscriber: (0, tokens_1.simulatorHandleToken)(this.eventProps.subscriber),
            publisher: (0, tokens_1.simulatorHandleToken)(this.eventProps.publisher),
            subscriptionProps: this.eventProps.subscriptionProps,
        };
        return {
            type: exports.EVENT_MAPPING_FQN,
            props,
        };
    }
    onLift(host, ops) {
        (0, util_1.bindSimulatorResource)(__filename, this, host, ops);
        super.onLift(host, ops);
    }
    _toInflight() {
        return (0, util_1.makeSimulatorJsClient)(__filename, this);
    }
}
exports.EventMapping = EventMapping;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQtbWFwcGluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90YXJnZXQtc2ltL2V2ZW50LW1hcHBpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBT0EscUNBQWdEO0FBQ2hELGlDQUFzRTtBQUN0RSw0Q0FBMEM7QUFNMUMsZ0NBQWtFO0FBd0JyRCxRQUFBLGlCQUFpQixHQUFHLElBQUEsc0JBQVUsRUFBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBUWhFOzs7O0dBSUc7QUFDSCxNQUFhLFlBQWEsU0FBUSxjQUFRO0lBR3hDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBd0I7UUFDaEUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztRQUN6QixVQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFFNUIsbURBQW1EO1FBQ25ELElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMxQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELGdCQUFnQjtJQUNoQixJQUFXLFFBQVE7UUFDakIsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRUQsSUFBVyxVQUFVO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDO0lBRU0sV0FBVztRQUNoQixNQUFNLEtBQUssR0FBdUI7WUFDaEMsVUFBVSxFQUFFLElBQUEsNkJBQW9CLEVBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUM7WUFDNUQsU0FBUyxFQUFFLElBQUEsNkJBQW9CLEVBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUM7WUFDMUQsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUI7U0FDckQsQ0FBQztRQUNGLE9BQU87WUFDTCxJQUFJLEVBQUUseUJBQWlCO1lBQ3ZCLEtBQUs7U0FDTixDQUFDO0lBQ0osQ0FBQztJQUVNLE1BQU0sQ0FBQyxJQUFtQixFQUFFLEdBQWE7UUFDOUMsSUFBQSw0QkFBcUIsRUFBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNuRCxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRU0sV0FBVztRQUNoQixPQUFPLElBQUEsNEJBQXFCLEVBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2pELENBQUM7Q0FDRjtBQTFDRCxvQ0EwQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgSVNpbXVsYXRvclJlc291cmNlIH0gZnJvbSBcIi4vcmVzb3VyY2VcIjtcbmltcG9ydCB7XG4gIEV2ZW50TWFwcGluZ1NjaGVtYSxcbiAgRXZlbnRTdWJzY3JpcHRpb24sXG4gIFJlc291cmNlSGFuZGxlLFxufSBmcm9tIFwiLi9zY2hlbWEtcmVzb3VyY2VzXCI7XG5pbXBvcnQgeyBzaW11bGF0b3JIYW5kbGVUb2tlbiB9IGZyb20gXCIuL3Rva2Vuc1wiO1xuaW1wb3J0IHsgYmluZFNpbXVsYXRvclJlc291cmNlLCBtYWtlU2ltdWxhdG9ySnNDbGllbnQgfSBmcm9tIFwiLi91dGlsXCI7XG5pbXBvcnQgeyBmcW5Gb3JUeXBlIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgTGlmdE1hcCB9IGZyb20gXCIuLi9jb3JlXCI7XG5pbXBvcnQge1xuICBJU2ltdWxhdG9yUmVzb3VyY2VJbnN0YW5jZSxcbiAgVG9TaW11bGF0b3JPdXRwdXQsXG59IGZyb20gXCIuLi9zaW11bGF0b3Ivc2ltdWxhdG9yXCI7XG5pbXBvcnQgeyBJSW5mbGlnaHRIb3N0LCBJUmVzb3VyY2UsIE5vZGUsIFJlc291cmNlIH0gZnJvbSBcIi4uL3N0ZFwiO1xuXG4vKipcbiAqIEludGVyZmFjZSBzaGFyZWQgYnkgYWxsIGV2ZW50IHB1Ymxpc2hpbmcgc2ltdWxhdG9yIHJlc291cmNlcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJRXZlbnRQdWJsaXNoZXIgZXh0ZW5kcyBJU2ltdWxhdG9yUmVzb3VyY2VJbnN0YW5jZSB7XG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IHN1YnNjcmlwdGlvbiB0byBwdWJsaXNoZXIgY2xpZW50LlxuICAgKiBAcGFyYW0gc3Vic2NyaWJlciB0aGUgc3Vic2NyaWJlciBmdW5jdGlvblxuICAgKiBAcGFyYW0gc3Vic2NyaXB0aW9uUHJvcHMgYWRkaXRpb25hbCBzdWJzY3JpcHRpb24gcHJvcGVydGllc1xuICAgKi9cbiAgYWRkRXZlbnRTdWJzY3JpcHRpb246IChcbiAgICBzdWJzY3JpYmVyOiBSZXNvdXJjZUhhbmRsZSxcbiAgICBzdWJzY3JpcHRpb25Qcm9wczogRXZlbnRTdWJzY3JpcHRpb25cbiAgKSA9PiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGV2ZW50IHN1YnNjcmlwdGlvbiBmcm9tIHRoZSBwdWJsaXNoZXIgY2xpZW50LlxuICAgKiBAcGFyYW0gc3Vic2NyaWJlciB0aGUgc3Vic2NyaWJlciBmdW5jdGlvblxuICAgKiBAcGFyYW0gc3Vic2NyaXB0aW9uUHJvcHMgYWRkaXRpb25hbCBzdWJzY3JpcHRpb24gcHJvcGVydGllc1xuICAgKi9cbiAgcmVtb3ZlRXZlbnRTdWJzY3JpcHRpb246IChzdWJzY3JpYmVyOiBSZXNvdXJjZUhhbmRsZSkgPT4gUHJvbWlzZTx2b2lkPjtcbn1cblxuZXhwb3J0IGNvbnN0IEVWRU5UX01BUFBJTkdfRlFOID0gZnFuRm9yVHlwZShcInNpbS5FdmVudE1hcHBpbmdcIik7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXZlbnRNYXBwaW5nUHJvcHMge1xuICBzdWJzY3JpYmVyOiBJUmVzb3VyY2U7XG4gIHB1Ymxpc2hlcjogSVJlc291cmNlO1xuICBzdWJzY3JpcHRpb25Qcm9wczogRXZlbnRTdWJzY3JpcHRpb247XG59XG5cbi8qKlxuICogSW1wbGVtZW50YXRpb24gb2YgYHNpbS5FdmVudE1hcHBpbmdgLlxuICpcbiAqIEBpbmZsaWdodCBgQHdpbmdsYW5nL3Nkay5zaW0uRXZlbnRNYXBwaW5nYFxuICovXG5leHBvcnQgY2xhc3MgRXZlbnRNYXBwaW5nIGV4dGVuZHMgUmVzb3VyY2UgaW1wbGVtZW50cyBJU2ltdWxhdG9yUmVzb3VyY2Uge1xuICBwcml2YXRlIHJlYWRvbmx5IF9ldmVudFByb3BzOiBFdmVudE1hcHBpbmdQcm9wcztcblxuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogRXZlbnRNYXBwaW5nUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgIHRoaXMuX2V2ZW50UHJvcHMgPSBwcm9wcztcbiAgICBOb2RlLm9mKHRoaXMpLmhpZGRlbiA9IHRydWU7XG5cbiAgICAvLyBBZGQgZGVwZW5kZW5jaWVzIHRvIHRoZSBwdWJsaXNoZXIgYW5kIHN1YnNjcmliZXJcbiAgICB0aGlzLm5vZGUuYWRkRGVwZW5kZW5jeShwcm9wcy5zdWJzY3JpYmVyKTtcbiAgICB0aGlzLm5vZGUuYWRkRGVwZW5kZW5jeShwcm9wcy5wdWJsaXNoZXIpO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwdWJsaWMgZ2V0IF9saWZ0TWFwKCk6IExpZnRNYXAge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgZXZlbnRQcm9wcygpOiBFdmVudE1hcHBpbmdQcm9wcyB7XG4gICAgcmV0dXJuIHRoaXMuX2V2ZW50UHJvcHM7XG4gIH1cblxuICBwdWJsaWMgdG9TaW11bGF0b3IoKTogVG9TaW11bGF0b3JPdXRwdXQge1xuICAgIGNvbnN0IHByb3BzOiBFdmVudE1hcHBpbmdTY2hlbWEgPSB7XG4gICAgICBzdWJzY3JpYmVyOiBzaW11bGF0b3JIYW5kbGVUb2tlbih0aGlzLmV2ZW50UHJvcHMuc3Vic2NyaWJlciksXG4gICAgICBwdWJsaXNoZXI6IHNpbXVsYXRvckhhbmRsZVRva2VuKHRoaXMuZXZlbnRQcm9wcy5wdWJsaXNoZXIpLFxuICAgICAgc3Vic2NyaXB0aW9uUHJvcHM6IHRoaXMuZXZlbnRQcm9wcy5zdWJzY3JpcHRpb25Qcm9wcyxcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBFVkVOVF9NQVBQSU5HX0ZRTixcbiAgICAgIHByb3BzLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMgb25MaWZ0KGhvc3Q6IElJbmZsaWdodEhvc3QsIG9wczogc3RyaW5nW10pOiB2b2lkIHtcbiAgICBiaW5kU2ltdWxhdG9yUmVzb3VyY2UoX19maWxlbmFtZSwgdGhpcywgaG9zdCwgb3BzKTtcbiAgICBzdXBlci5vbkxpZnQoaG9zdCwgb3BzKTtcbiAgfVxuXG4gIHB1YmxpYyBfdG9JbmZsaWdodCgpOiBzdHJpbmcge1xuICAgIHJldHVybiBtYWtlU2ltdWxhdG9ySnNDbGllbnQoX19maWxlbmFtZSwgdGhpcyk7XG4gIH1cbn1cbiJdfQ==