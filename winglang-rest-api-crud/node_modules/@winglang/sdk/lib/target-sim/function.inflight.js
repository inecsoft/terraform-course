"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Function = void 0;
const promises_1 = require("fs/promises");
const path = __importStar(require("path"));
const cloud_1 = require("../cloud");
const sandbox_1 = require("../shared/sandbox");
const simulator_1 = require("../simulator/simulator");
const std_1 = require("../std");
class Function {
    constructor(props) {
        this.workers = new Array();
        this.sourceCodeFile = props.sourceCodeFile;
        if (props.sourceCodeLanguage !== "javascript") {
            throw new Error("Only JavaScript is supported");
        }
        this.env = props.environmentVariables ?? {};
        this.timeout = props.timeout;
        this.maxWorkers = props.concurrency;
    }
    get context() {
        if (!this._context) {
            throw new Error("Cannot access context during class construction");
        }
        return this._context;
    }
    async init(context) {
        this._context = context;
        this.originalFile = path.resolve(context.simdir, this.sourceCodeFile);
        this.createBundlePromise = this.createBundle();
        return {};
    }
    async cleanup() {
        // We wait for the bundle to be created since there's no way to otherwise cancel the work.
        // If the simulator runs for a short time (and cloud.Function is created and then deleted)
        // and the bundling code is allowed to run after the simulator has stopped, it might fail
        // and throw an error to the user because the files the simulator was using may no longer be there there.
        await this.createBundlePromise;
        await Promise.allSettled(this.workers.map((w) => w.cleanup()));
    }
    async save() { }
    async plan(invalidated) {
        // If our function config changed, always replace
        if (invalidated) {
            return simulator_1.UpdatePlan.REPLACE;
        }
        // Make sure that we don't have an ongoing bundle operation
        await this.ensureBundled();
        // Check if any of the bundled files have changed since the last bundling
        const inputFiles = this.bundle.inputFiles;
        const modifiedFiles = await filesModifiedSince(inputFiles, process.cwd(), this.bundle.time);
        if (modifiedFiles.length > 0) {
            this.addTrace(`Files modified since last bundling: [${modifiedFiles
                .map((x) => `"${x}"`)
                .join(", ")}]`, std_1.TraceType.SIMULATOR, std_1.LogLevel.VERBOSE);
            return simulator_1.UpdatePlan.REPLACE;
        }
        return simulator_1.UpdatePlan.SKIP;
    }
    async invoke(payload) {
        return this.context.withTrace({
            message: `Invoke (payload=${JSON.stringify(payload)}).`,
            activity: async () => {
                const worker = await this.findAvailableWorker();
                if (!worker) {
                    throw new Error("Too many requests, the function has reached its concurrency limit.");
                }
                try {
                    return await worker.call("handler", payload);
                }
                catch (err) {
                    if (err instanceof sandbox_1.SandboxTimeoutError) {
                        throw new Error(`Function timed out (it was configured with a timeout of ${this.timeout}ms).`);
                    }
                    else {
                        throw err;
                    }
                }
            },
        });
    }
    async invokeAsync(payload) {
        await this.context.withTrace({
            message: `InvokeAsync (payload=${JSON.stringify(payload)}).`,
            activity: async () => {
                const worker = await this.findAvailableWorker();
                if (!worker) {
                    throw new Error("Too many requests, the function has reached its concurrency limit.");
                }
                process.nextTick(() => {
                    void worker.call("handler", payload).catch((e) => {
                        // If the call fails, we log the error and continue since we've already
                        // handed control back to the caller.
                        this.context.addTrace({
                            data: {
                                message: `InvokeAsync (payload=${JSON.stringify(payload)}) failure.`,
                                status: "failure",
                                error: e,
                            },
                            type: std_1.TraceType.LOG,
                            level: std_1.LogLevel.ERROR,
                            sourcePath: this.context.resourcePath,
                            sourceType: cloud_1.FUNCTION_FQN,
                            timestamp: new Date().toISOString(),
                        });
                    });
                });
            },
        });
    }
    async createBundle() {
        this.bundle = await sandbox_1.Sandbox.createBundle(this.originalFile, (msg, level) => {
            this.addTrace(msg, std_1.TraceType.RESOURCE, level);
        });
    }
    async ensureBundled() {
        await this.createBundlePromise;
        if (!this.bundle) {
            throw new Error("Bundle not created");
        }
    }
    // Used internally by cloud.Queue to apply backpressure
    async hasAvailableWorkers() {
        return (this.workers.length < this.maxWorkers ||
            this.workers.some((w) => w.isAvailable()));
    }
    async findAvailableWorker() {
        const worker = this.workers.find((w) => w.isAvailable());
        if (worker) {
            return worker;
        }
        if (this.workers.length < this.maxWorkers) {
            const newWorker = await this.initWorker();
            this.workers.push(newWorker);
            return newWorker;
        }
        return undefined;
    }
    async initWorker() {
        // ensure inflight code is bundled before we create any workers
        await this.ensureBundled();
        return new sandbox_1.Sandbox(this.bundle.outfilePath, {
            env: {
                ...this.env,
                WING_SIMULATOR_CALLER: this.context.resourceHandle,
                WING_SIMULATOR_URL: this.context.serverUrl,
            },
            timeout: this.timeout,
            log: (internal, level, message) => {
                this.addTrace(message, internal ? std_1.TraceType.SIMULATOR : std_1.TraceType.LOG, level);
            },
        });
    }
    addTrace(message, type, level) {
        this.context.addTrace({
            data: { message },
            type,
            level,
            sourcePath: this.context.resourcePath,
            sourceType: cloud_1.FUNCTION_FQN,
            timestamp: new Date().toISOString(),
        });
    }
}
exports.Function = Function;
async function filesModifiedSince(filePaths, directory, dateTime) {
    const absolutePaths = filePaths.map((filePath) => path.resolve(directory, filePath));
    try {
        const statsPromises = absolutePaths.map((filePath) => (0, promises_1.stat)(filePath));
        const stats = await Promise.all(statsPromises);
        const changedFiles = new Array();
        for (let i = 0; i < absolutePaths.length; i++) {
            if (stats[i].mtime > dateTime) {
                changedFiles.push(absolutePaths[i]);
            }
        }
        return changedFiles;
    }
    catch (error) {
        console.error("Error checking file modification times:", error);
        throw error;
    }
}
//# sourceMappingURL=data:application/json;base64,