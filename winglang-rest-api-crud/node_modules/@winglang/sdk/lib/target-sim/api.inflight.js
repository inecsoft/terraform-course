"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Api = void 0;
const fs = __importStar(require("fs"));
const net_1 = require("net");
const path_1 = require("path");
const express_1 = __importDefault(require("express"));
const util_1 = require("./util");
const cloud_1 = require("../cloud");
const simulator_1 = require("../simulator/simulator");
const std_1 = require("../std");
const LOCALHOST_ADDRESS = "127.0.0.1";
const STATE_FILENAME = "state.json";
class Api {
    constructor(props) {
        this.routes = [];
        const { corsHeaders } = props;
        // Set up an express server that handles the routes.
        this.app = (0, express_1.default)();
        // we parse all requests as text and leave the parsing to the inflight handler
        // matching the limit to aws api gateway's payload size limit:
        // https://docs.aws.amazon.com/apigateway/latest/developerguide/limits.html
        this.app.use(express_1.default.text({ limit: "10mb", type: "*/*" }));
        // Set up CORS headers for options requests.
        if (corsHeaders) {
            this.app.use((req, res, next) => {
                const method = req.method && req.method.toUpperCase && req.method.toUpperCase();
                if (method === "OPTIONS") {
                    for (const [key, value] of Object.entries(corsHeaders.optionsResponse)) {
                        res.setHeader(key, value);
                    }
                    res.status(204).send();
                }
                else {
                    for (const [key, value] of Object.entries(corsHeaders.defaultResponse)) {
                        res.setHeader(key, value);
                    }
                    next();
                }
            });
        }
    }
    get context() {
        if (!this._context) {
            throw new Error("Cannot access context during class construction");
        }
        return this._context;
    }
    async init(context) {
        this._context = context;
        // Check for a previous state file to see if there was a port that was previously being used
        // if so, try to use it out of convenience
        let lastPort;
        const state = await this.loadState();
        if (state.lastPort) {
            const portAvailable = await isPortAvailable(state.lastPort);
            if (portAvailable) {
                lastPort = state.lastPort;
            }
        }
        // `server.address()` returns `null` until the server is listening
        // on a port. We use a promise to wait for the server to start
        // listening before returning the URL.
        const addrInfo = await new Promise((resolve, reject) => {
            this.server = this.app.listen(lastPort ?? 0, LOCALHOST_ADDRESS, () => {
                const addr = this.server?.address();
                if (addr && typeof addr === "object" && addr.port) {
                    resolve(addr);
                }
                else {
                    reject(new Error("No address found"));
                }
            });
        });
        this.port = addrInfo.port;
        this.url = `http://${addrInfo.address}:${addrInfo.port}`;
        this.addTrace(`Server listening on ${this.url}`, std_1.LogLevel.VERBOSE);
        return {
            url: this.url,
        };
    }
    async cleanup() {
        this.addTrace(`Closing server on ${this.url}`, std_1.LogLevel.VERBOSE);
        return new Promise((resolve, reject) => {
            this.server?.close((err) => {
                if (err) {
                    return reject(err);
                }
                this.server?.closeAllConnections();
                return resolve();
            });
        });
    }
    async save() {
        await this.saveState({ lastPort: this.port });
    }
    async plan() {
        return simulator_1.UpdatePlan.AUTO;
    }
    async loadState() {
        const stateFileExists = await (0, util_1.exists)((0, path_1.join)(this.context.statedir, STATE_FILENAME));
        if (stateFileExists) {
            const stateFileContents = await fs.promises.readFile((0, path_1.join)(this.context.statedir, STATE_FILENAME), "utf-8");
            return JSON.parse(stateFileContents);
        }
        else {
            return {};
        }
    }
    async saveState(state) {
        fs.writeFileSync((0, path_1.join)(this.context.statedir, STATE_FILENAME), JSON.stringify(state));
    }
    async addEventSubscription(subscriber, subscriptionProps) {
        const routes = subscriptionProps.routes;
        for (const route of routes) {
            const s = {
                functionHandle: subscriber,
                method: route.method,
                pathPattern: route.pathPattern,
            };
            this.populateRoute(s, subscriber);
            // Keep track of the internal express function so we can remove it later
            // Each layer object in express looks something like this:
            //
            // Layer {
            //   handle: [Function: bound dispatch],
            //   name: 'bound dispatch',
            //   params: undefined,
            //   path: undefined,
            //   keys: [ [Object] ],
            //   regexp: /^\/foo\/(?:([^\/]+?))\/?$/i { fast_star: false, fast_slash: false },
            //   route: Route { path: '/foo/:bar', stack: [Array], methods: [Object] }
            // }
            const expressRouteHandle = this.app._router.stack[this.app._router.stack.length - 1];
            this.routes.push({
                ...s,
                expressLayer: expressRouteHandle,
            });
        }
    }
    async removeEventSubscription(subscriber) {
        const index = this.routes.findIndex((s) => s.functionHandle === subscriber);
        if (index === -1) {
            this.addTrace(`Internal error: No route found for subscriber ${subscriber}.`, std_1.LogLevel.WARNING);
            return;
        }
        const layer = this.routes[index].expressLayer;
        const layerIndex = this.app._router.stack.indexOf(layer);
        if (layerIndex === -1) {
            this.addTrace(`Internal error: No express layer found for route ${this.routes[index].pathPattern}.`, std_1.LogLevel.WARNING);
            return;
        }
        this.app._router.stack.splice(layerIndex, 1);
        this.routes.splice(index, 1);
    }
    populateRoute(route, functionHandle) {
        const method = route.method.toLowerCase();
        const fnClient = this.context.getClient(functionHandle);
        this.app[method](transformRoutePath(route.pathPattern), asyncMiddleware(async (req, res, next) => {
            this.addTrace(`Processing "${route.method} ${route.pathPattern}" params=${JSON.stringify(req.params)}).`, std_1.LogLevel.VERBOSE);
            const apiRequest = transformRequest(req);
            try {
                const responseString = await fnClient.invoke(JSON.stringify(apiRequest));
                const response = JSON.parse(responseString ?? "{}");
                const status = response.status ?? cloud_1.DEFAULT_RESPONSE_STATUS;
                res.status(status);
                for (const [key, value] of Object.entries(response?.headers ?? {})) {
                    res.set(key, value);
                }
                if (response?.body !== undefined) {
                    res.send(response.body);
                }
                else {
                    res.end();
                }
                this.addTrace(`${route.method} ${route.pathPattern} - ${status}.`, std_1.LogLevel.VERBOSE);
            }
            catch (err) {
                return next(err);
            }
        }));
    }
    addTrace(message, level) {
        this.context.addTrace({
            type: std_1.TraceType.RESOURCE,
            level,
            data: {
                message,
            },
            sourcePath: this.context.resourcePath,
            sourceType: cloud_1.API_FQN,
            timestamp: new Date().toISOString(),
        });
    }
}
exports.Api = Api;
function transformRequest(req) {
    return {
        headers: (0, cloud_1.sanitizeParamLikeObject)(req.headers),
        body: Object.keys(req.body).length > 0 ? req.body : "",
        method: (0, cloud_1.parseHttpMethod)(req.method),
        path: req.path,
        query: (0, cloud_1.sanitizeParamLikeObject)(req.query),
        vars: req.params,
    };
}
function transformRoutePath(route) {
    // route validation is done in the preflight file
    return route.replace(/{/g, ":").replace(/}/g, "");
}
// express v4 doesn't natively handle async request handlers, so we need to
// wrap them in a middleware function
function asyncMiddleware(fn) {
    return (req, res, next) => {
        Promise.resolve(fn(req, res, next)).catch(next);
    };
}
async function isPortAvailable(port) {
    return new Promise((resolve, _reject) => {
        const s = new net_1.Socket();
        s.once("error", (err) => {
            s.destroy();
            if (err.code !== "ECONNREFUSED") {
                resolve(false);
            }
            else {
                // connection refused means the port is not used
                resolve(true);
            }
        });
        s.once("connect", () => {
            s.destroy();
            // connection successful means the port is used
            resolve(false);
        });
        s.connect(port, LOCALHOST_ADDRESS);
    });
}
//# sourceMappingURL=data:application/json;base64,