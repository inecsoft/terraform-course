import { IConstruct, ConstructOrder, IDependable, MetadataOptions, IValidation } from "constructs";
import { ParameterRegistrar } from "../platform";
export declare const APP_SYMBOL: unique symbol;
export declare const CONNECTIONS_FILE_PATH = "connections.json";
export declare const SDK_SOURCE_MODULE = "@winglang/sdk";
/**
 * The internal node of a construct.
 */
export declare class Node {
    private readonly construct;
    /**
     * Marks a type as the root of the tree.
     * @param rootConstructor
     * @internal
     */
    static _markRoot(rootConstructor: any): void;
    /**
     * Return the internal construct node.
     */
    static of(construct: IConstruct): Node;
    /**
     * Title of the construct for display purposes.
     */
    title?: string;
    /**
     * Description of the construct for display purposes.
     */
    description?: string;
    /**
     * The source file or library where the construct was defined.
     */
    sourceModule?: string;
    /**
     * Whether the construct should be hidden by default in tree visualizations.
     */
    hidden?: boolean;
    /**
     * The color of the construct for display purposes.
     * Supported colors are:
     * - orange
     * - sky
     * - emerald
     * - lime
     * - pink
     * - amber
     * - cyan
     * - purple
     * - red
     * - violet
     * - slate
     */
    color?: string;
    /**
     * The icon of the construct for display purposes.
     * Supported icons are from Heroicons:
     * - https://heroicons.com/
     * e.g.
     * - "academic-cap"
     */
    icon?: string;
    private readonly _constructsNode;
    private readonly _connections;
    private _app;
    private _root;
    private constructor();
    /**
     * Adds a connection between two constructs. A connection is a piece of
     * metadata describing how one construct is related to another construct.
     */
    addConnection(props: AddConnectionProps): void;
    /**
     * Returns the scope in which this construct is defined.
     *
     * The value is `undefined` at the root of the construct scope tree.
     */
    get scope(): IConstruct | undefined;
    /**
     * The id of this construct within the current scope.
     *
     * This is a a scope-unique id. To obtain an app-unique id for this construct, use `addr`.
     */
    get id(): string;
    /**
     * The full, absolute path of this construct in the tree.
     *
     * Components are separated by '/'.
     */
    get path(): string;
    /**
     * Returns an opaque tree-unique address for this construct.
     *
     * Addresses are 42 characters hexadecimal strings. They begin with "c8"
     * followed by 40 lowercase hexadecimal characters (0-9a-f).
     *
     * Addresses are calculated using a SHA-1 of the components of the construct
     * path.
     *
     * To enable refactorings of construct trees, constructs with the ID `Default`
     * will be excluded from the calculation. In those cases constructs in the
     * same tree may have the same addreess.
     *
     * @example c83a2846e506bcc5f10682b564084bca2d275709ee
     */
    get addr(): string;
    /**
     * Return a direct child by id, or undefined
     *
     * @param id Identifier of direct child
     * @returns the child if found, or undefined
     */
    tryFindChild(id: string): IConstruct | undefined;
    /**
     * Return a direct child by id
     *
     * Throws an error if the child is not found.
     *
     * @param id Identifier of direct child
     * @returns Child with the given id.
     */
    findChild(id: string): IConstruct;
    /**
     * Returns the child construct that has the id `Default` or `Resource"`.
     * This is usually the construct that provides the bulk of the underlying functionality.
     * Useful for modifications of the underlying construct that are not available at the higher levels.
     *
     * @throws if there is more than one child
     * @returns a construct or undefined if there is no default child
     */
    get defaultChild(): IConstruct | undefined;
    /**
     * Override the defaultChild property.
     *
     * This should only be used in the cases where the correct
     * default child is not named 'Resource' or 'Default' as it
     * should be.
     *
     * If you set this to undefined, the default behavior of finding
     * the child named 'Resource' or 'Default' will be used.
     */
    set defaultChild(value: IConstruct | undefined);
    /**
     * All direct children of this construct.
     */
    get children(): IConstruct[];
    /**
     * Return this construct and all of its children in the given order
     */
    findAll(order?: ConstructOrder): IConstruct[];
    /**
     * This can be used to set contextual values.
     * Context must be set before any children are added, since children may consult context info during construction.
     * If the key already exists, it will be overridden.
     * @param key The context key
     * @param value The context value
     */
    setContext(key: string, value: any): void;
    /**
     * Retrieves a value from tree context if present. Otherwise, would throw an error.
     *
     * Context is usually initialized at the root, but can be overridden at any point in the tree.
     *
     * @param key The context key
     * @returns The context value or throws error if there is no context value for this key
     */
    getContext(key: string): any;
    /**
     * Retrieves a value from tree context.
     *
     * Context is usually initialized at the root, but can be overridden at any point in the tree.
     *
     * @param key The context key
     * @returns The context value or `undefined` if there is no context value for this key.
     */
    tryGetContext(key: string): any;
    /**
     * An immutable array of metadata objects associated with this construct.
     * This can be used, for example, to implement support for deprecation notices, source mapping, etc.
     */
    get metadata(): import("constructs").MetadataEntry[];
    /**
     * Adds a metadata entry to this construct.
     * Entries are arbitrary values and will also include a stack trace to allow tracing back to
     * the code location for when the entry was added. It can be used, for example, to include source
     * mapping in CloudFormation templates to improve diagnostics.
     *
     * @param type a string denoting the type of metadata
     * @param data the value of the metadata (can be a Token). If null/undefined, metadata will not be added.
     * @param options options
     */
    addMetadata(type: string, data: any, options?: MetadataOptions): void;
    /**
     * All parent scopes of this construct.
     *
     * @returns a list of parent scopes. The last element in the list will always
     * be the current construct and the first element will be the root of the
     * tree.
     */
    get scopes(): IConstruct[];
    /**
     * Returns the root of the construct tree (the `cloud.App` object).
     *
     * Similar to `app`.
     *
     * @returns The root of the construct tree.
     */
    get root(): IConstruct;
    /**
     * Returns the root of the construct tree (the `cloud.App` object).
     *
     * Similar to `root`.
     *
     * @returns The root of the construct tree.
     */
    get app(): IApp;
    /**
     * Returns true if this construct or the scopes in which it is defined are
     * locked.
     */
    get locked(): boolean;
    /**
     * Add an ordering dependency on another construct.
     *
     * An `IDependable`
     */
    addDependency(...deps: IDependable[]): void;
    /**
     * Return all dependencies registered on this node (non-recursive).
     */
    get dependencies(): IConstruct[];
    /**
     * Remove the child with the given name, if present.
     *
     * @returns Whether a child with the given name was deleted.
     * @experimental
     */
    tryRemoveChild(childName: string): boolean;
    /**
     * Adds a validation to this construct.
     *
     * When `node.validate()` is called, the `validate()` method will be called on
     * all validations and all errors will be returned.
     *
     * @param validation The validation object
     */
    addValidation(validation: IValidation): void;
    /**
     * Validates this construct.
     *
     * Invokes the `validate()` method on all validations added through
     * `addValidation()`.
     *
     * @returns an array of validation error messages associated with this
     * construct.
     */
    validate(): string[];
    /**
     * Locks this construct from allowing more children to be added. After this
     * call, no more children can be added to this construct or to any children.
     */
    lock(): void;
    /**
     * Returns the root app.
     */
    private findApp;
    private findRoot;
}
/**
 * Props for `Node.addConnection`.
 */
export interface AddConnectionProps {
    /**
     * The source of the connection.
     */
    readonly source: IConstruct;
    /**
     * An operation that the source construct supports.
     * @default - no operation
     */
    readonly sourceOp?: string;
    /**
     * The target of the connection.
     */
    readonly target: IConstruct;
    /**
     * An operation that the target construct supports.
     * @default - no operation
     */
    readonly targetOp?: string;
    /**
     * A name for the connection.
     */
    readonly name: string;
}
/**
 * Represents a Wing application.
 */
export interface IApp extends IConstruct {
    /**
     * Type marker.
     * @internal
     **/
    readonly [APP_SYMBOL]: true;
    /**
     * The `.wing` directory into which you can emit artifacts during preflight.
     */
    readonly workdir: string;
    /**
     * `true` if this is a testing environment
     */
    readonly isTestEnvironment: boolean;
    /**
     * The directory of the entrypoint of the current program.
     */
    readonly entrypointDir: string;
    /**
     * The application's parameter registrar
     */
    readonly parameters: ParameterRegistrar;
    /**
     * Generate a unique ID for the given scope and prefix. The newly generated ID is
     * guaranteed to be unique within the given scope.
     * It will have the form '{prefix}{n}', where '{prefix}' is the given prefix and '{n}' is an
     * ascending sequence of integers starting from '0'.
     *
     * @param scope to guarantee uniqueness in
     * @param prefix prepended to the unique identifier
     */
    makeId(scope: IConstruct, prefix?: string): string;
}
