import { Construct } from "constructs";
import { Function, FunctionProps } from "../cloud/function";
import { LiftMap } from "../core";
import { IInflight, Resource } from "../std";
/**
 * Global identifier for `Test`.
 */
export declare const TEST_FQN: string;
/**
 * Properties for `Test`.
 *
 * This is the type users see when constructing a std.Test instance.
 * @skipDocs
 */
export interface TestProps extends FunctionProps {
}
/**
 * Inflight interface for `Test`.
 * @skipDocs
 */
export interface ITestClient {
}
/**
 * A unit test.
 *
 * @inflight `@winglang/sdk.std.ITestClient`
 * @skipDocs
 */
export declare class Test extends Resource {
    /**
     * The function that will be called when the test is run. This will only be created
     * if the app is compiled with `wing test` for a non-simulator target.
     * @internal
     */
    readonly _fn: Function | undefined;
    constructor(scope: Construct, id: string, inflight: ITestHandler, props?: TestProps);
    /** @internal */
    get _liftMap(): LiftMap;
    /** @internal */
    _toInflight(): string;
}
/**
 * Interface with an inflight "handle" method that can be used to construct
 * a `std.Test`.
 *
 * @inflight `@winglang/sdk.std.ITestHandlerClient`
 * @skipDocs
 */
export interface ITestHandler extends IInflight {
}
/**
 * Inflight client for `ITestHandler`.
 * @skipDocs
 */
export interface ITestHandlerClient {
    /**
     * Inflight function that will be called when the test is run.
     * @inflight
     */
    handle(): Promise<void>;
}
