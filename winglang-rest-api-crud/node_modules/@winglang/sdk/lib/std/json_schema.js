"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonSchema = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const ajv_1 = __importDefault(require("ajv"));
const core_1 = require("../core");
const util_1 = require("../platform/util");
/**
 * Struct Schema
 */
class JsonSchema {
    /**
     * @internal
     */
    static _toInflightType(schema) {
        return core_1.InflightClient.forType(__filename, `${this.name}._createJsonSchema(${JSON.stringify(schema)})`);
    }
    /**
     * Static method for creating a StructSchema used for lifting a struct to an inflight type
     *
     * @internal
     */
    static _createJsonSchema(schema) {
        return new JsonSchema(schema);
    }
    constructor(schema) {
        this._rawSchema = schema;
        this.validator = new ajv_1.default({ allErrors: true, allowUnionTypes: true });
    }
    /**
     * Attempt to validate a json object against the schema
     *
     * @param obj the Json object to validate
     * @throws an error if the json object is not valid
     */
    validate(obj, options) {
        if (options?.unsafe) {
            return; // skip validation
        }
        const validator = this.validator.compile(this._rawSchema);
        const valid = validator(obj);
        if (!valid) {
            const schemaId = this._rawSchema.$id.replace("/", "");
            throw new Error(`unable to parse ${schemaId}:\n- ${validator.errors
                ?.map((error) => schemaId + error.instancePath + " " + error.message)
                .join("\n- ")}`);
        }
    }
    /**
     * Retrieve the json schema as a string
     *
     * @returns the schema as a string
     */
    asStr() {
        return JSON.stringify(this._rawSchema);
    }
    /** @internal */
    _fromJson(obj, validateOptions) {
        this.validate(obj, validateOptions);
        const fields = (0, util_1.extractFieldsFromSchema)(this._rawSchema);
        // Filter rawParameters based on the schema
        const filteredParameters = (0, util_1.filterParametersBySchema)(fields, obj);
        return filteredParameters;
    }
    /** @internal */
    _tryFromJson(obj) {
        try {
            return this._fromJson(obj);
        }
        catch {
            return undefined;
        }
    }
    /** @internal */
    _tryParseJson(json) {
        try {
            return this._fromJson(JSON.parse(json));
        }
        catch {
            return undefined;
        }
    }
    /** @internal */
    _toInflightType() {
        return JsonSchema._toInflightType(this._rawSchema);
    }
}
exports.JsonSchema = JsonSchema;
_a = JSII_RTTI_SYMBOL_1;
JsonSchema[_a] = { fqn: "@winglang/sdk.std.JsonSchema", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbl9zY2hlbWEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc3RkL2pzb25fc2NoZW1hLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsOENBQXNCO0FBRXRCLGtDQUF5QztBQUN6QywyQ0FHMEI7QUFFMUI7O0dBRUc7QUFDSCxNQUFhLFVBQVU7SUFDckI7O09BRUc7SUFDSSxNQUFNLENBQUMsZUFBZSxDQUFDLE1BQVk7UUFDeEMsT0FBTyxxQkFBYyxDQUFDLE9BQU8sQ0FDM0IsVUFBVSxFQUNWLEdBQUcsSUFBSSxDQUFDLElBQUksc0JBQXNCLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FDNUQsQ0FBQztJQUNKLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksTUFBTSxDQUFDLGlCQUFpQixDQUFDLE1BQVk7UUFDMUMsT0FBTyxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBTUQsWUFBWSxNQUFZO1FBQ3RCLElBQUksQ0FBQyxVQUFVLEdBQUcsTUFBTSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxhQUFHLENBQUMsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLGVBQWUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLFFBQVEsQ0FBQyxHQUFTLEVBQUUsT0FBK0I7UUFDeEQsSUFBSSxPQUFPLEVBQUUsTUFBTSxFQUFFLENBQUM7WUFDcEIsT0FBTyxDQUFDLGtCQUFrQjtRQUM1QixDQUFDO1FBQ0QsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzFELE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM3QixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDWCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ3RELE1BQU0sSUFBSSxLQUFLLENBQ2IsbUJBQW1CLFFBQVEsUUFBUSxTQUFTLENBQUMsTUFBTTtnQkFDakQsRUFBRSxHQUFHLENBQ0gsQ0FBQyxLQUFVLEVBQUUsRUFBRSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsWUFBWSxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUNwRTtpQkFDQSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FDbEIsQ0FBQztRQUNKLENBQUM7SUFDSCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLEtBQUs7UUFDVixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxnQkFBZ0I7SUFDVCxTQUFTLENBQUMsR0FBUyxFQUFFLGVBQXVDO1FBQ2pFLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sTUFBTSxHQUFHLElBQUEsOEJBQXVCLEVBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3hELDJDQUEyQztRQUMzQyxNQUFNLGtCQUFrQixHQUFHLElBQUEsK0JBQXdCLEVBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ2pFLE9BQU8sa0JBQWtCLENBQUM7SUFDNUIsQ0FBQztJQUVELGdCQUFnQjtJQUNULFlBQVksQ0FBQyxHQUFTO1FBQzNCLElBQUksQ0FBQztZQUNILE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM3QixDQUFDO1FBQUMsTUFBTSxDQUFDO1lBQ1AsT0FBTyxTQUFTLENBQUM7UUFDbkIsQ0FBQztJQUNILENBQUM7SUFFRCxnQkFBZ0I7SUFDVCxhQUFhLENBQUMsSUFBd0I7UUFDM0MsSUFBSSxDQUFDO1lBQ0gsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSyxDQUFDLENBQUMsQ0FBQztRQUMzQyxDQUFDO1FBQUMsTUFBTSxDQUFDO1lBQ1AsT0FBTyxTQUFTLENBQUM7UUFDbkIsQ0FBQztJQUNILENBQUM7SUFFRCxnQkFBZ0I7SUFDVCxlQUFlO1FBQ3BCLE9BQU8sVUFBVSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDckQsQ0FBQzs7QUE1RkgsZ0NBNkZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEFqdiBmcm9tIFwiYWp2XCI7XG5pbXBvcnQgeyBKc29uLCBKc29uVmFsaWRhdGlvbk9wdGlvbnMgfSBmcm9tIFwiLi9qc29uXCI7XG5pbXBvcnQgeyBJbmZsaWdodENsaWVudCB9IGZyb20gXCIuLi9jb3JlXCI7XG5pbXBvcnQge1xuICBleHRyYWN0RmllbGRzRnJvbVNjaGVtYSxcbiAgZmlsdGVyUGFyYW1ldGVyc0J5U2NoZW1hLFxufSBmcm9tIFwiLi4vcGxhdGZvcm0vdXRpbFwiO1xuXG4vKipcbiAqIFN0cnVjdCBTY2hlbWFcbiAqL1xuZXhwb3J0IGNsYXNzIEpzb25TY2hlbWEge1xuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIF90b0luZmxpZ2h0VHlwZShzY2hlbWE6IEpzb24pIHtcbiAgICByZXR1cm4gSW5mbGlnaHRDbGllbnQuZm9yVHlwZShcbiAgICAgIF9fZmlsZW5hbWUsXG4gICAgICBgJHt0aGlzLm5hbWV9Ll9jcmVhdGVKc29uU2NoZW1hKCR7SlNPTi5zdHJpbmdpZnkoc2NoZW1hKX0pYFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogU3RhdGljIG1ldGhvZCBmb3IgY3JlYXRpbmcgYSBTdHJ1Y3RTY2hlbWEgdXNlZCBmb3IgbGlmdGluZyBhIHN0cnVjdCB0byBhbiBpbmZsaWdodCB0eXBlXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBfY3JlYXRlSnNvblNjaGVtYShzY2hlbWE6IEpzb24pOiBKc29uU2NoZW1hIHtcbiAgICByZXR1cm4gbmV3IEpzb25TY2hlbWEoc2NoZW1hKTtcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHVibGljIF9yYXdTY2hlbWE6IGFueTtcbiAgcHJpdmF0ZSB2YWxpZGF0b3I6IEFqdjtcblxuICBjb25zdHJ1Y3RvcihzY2hlbWE6IEpzb24pIHtcbiAgICB0aGlzLl9yYXdTY2hlbWEgPSBzY2hlbWE7XG4gICAgdGhpcy52YWxpZGF0b3IgPSBuZXcgQWp2KHsgYWxsRXJyb3JzOiB0cnVlLCBhbGxvd1VuaW9uVHlwZXM6IHRydWUgfSk7XG4gIH1cblxuICAvKipcbiAgICogQXR0ZW1wdCB0byB2YWxpZGF0ZSBhIGpzb24gb2JqZWN0IGFnYWluc3QgdGhlIHNjaGVtYVxuICAgKlxuICAgKiBAcGFyYW0gb2JqIHRoZSBKc29uIG9iamVjdCB0byB2YWxpZGF0ZVxuICAgKiBAdGhyb3dzIGFuIGVycm9yIGlmIHRoZSBqc29uIG9iamVjdCBpcyBub3QgdmFsaWRcbiAgICovXG4gIHB1YmxpYyB2YWxpZGF0ZShvYmo6IEpzb24sIG9wdGlvbnM/OiBKc29uVmFsaWRhdGlvbk9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucz8udW5zYWZlKSB7XG4gICAgICByZXR1cm47IC8vIHNraXAgdmFsaWRhdGlvblxuICAgIH1cbiAgICBjb25zdCB2YWxpZGF0b3IgPSB0aGlzLnZhbGlkYXRvci5jb21waWxlKHRoaXMuX3Jhd1NjaGVtYSk7XG4gICAgY29uc3QgdmFsaWQgPSB2YWxpZGF0b3Iob2JqKTtcbiAgICBpZiAoIXZhbGlkKSB7XG4gICAgICBjb25zdCBzY2hlbWFJZCA9IHRoaXMuX3Jhd1NjaGVtYS4kaWQucmVwbGFjZShcIi9cIiwgXCJcIik7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGB1bmFibGUgdG8gcGFyc2UgJHtzY2hlbWFJZH06XFxuLSAke3ZhbGlkYXRvci5lcnJvcnNcbiAgICAgICAgICA/Lm1hcChcbiAgICAgICAgICAgIChlcnJvcjogYW55KSA9PiBzY2hlbWFJZCArIGVycm9yLmluc3RhbmNlUGF0aCArIFwiIFwiICsgZXJyb3IubWVzc2FnZVxuICAgICAgICAgIClcbiAgICAgICAgICAuam9pbihcIlxcbi0gXCIpfWBcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlIHRoZSBqc29uIHNjaGVtYSBhcyBhIHN0cmluZ1xuICAgKlxuICAgKiBAcmV0dXJucyB0aGUgc2NoZW1hIGFzIGEgc3RyaW5nXG4gICAqL1xuICBwdWJsaWMgYXNTdHIoKTogU3RyaW5nIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy5fcmF3U2NoZW1hKTtcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHVibGljIF9mcm9tSnNvbihvYmo6IEpzb24sIHZhbGlkYXRlT3B0aW9ucz86IEpzb25WYWxpZGF0aW9uT3B0aW9ucykge1xuICAgIHRoaXMudmFsaWRhdGUob2JqLCB2YWxpZGF0ZU9wdGlvbnMpO1xuICAgIGNvbnN0IGZpZWxkcyA9IGV4dHJhY3RGaWVsZHNGcm9tU2NoZW1hKHRoaXMuX3Jhd1NjaGVtYSk7XG4gICAgLy8gRmlsdGVyIHJhd1BhcmFtZXRlcnMgYmFzZWQgb24gdGhlIHNjaGVtYVxuICAgIGNvbnN0IGZpbHRlcmVkUGFyYW1ldGVycyA9IGZpbHRlclBhcmFtZXRlcnNCeVNjaGVtYShmaWVsZHMsIG9iaik7XG4gICAgcmV0dXJuIGZpbHRlcmVkUGFyYW1ldGVycztcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHVibGljIF90cnlGcm9tSnNvbihvYmo6IEpzb24pIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHRoaXMuX2Zyb21Kc29uKG9iaik7XG4gICAgfSBjYXRjaCB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHVibGljIF90cnlQYXJzZUpzb24oanNvbjogc3RyaW5nIHwgdW5kZWZpbmVkKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB0aGlzLl9mcm9tSnNvbihKU09OLnBhcnNlKGpzb24hKSk7XG4gICAgfSBjYXRjaCB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHVibGljIF90b0luZmxpZ2h0VHlwZSgpIHtcbiAgICByZXR1cm4gSnNvblNjaGVtYS5fdG9JbmZsaWdodFR5cGUodGhpcy5fcmF3U2NoZW1hKTtcbiAgfVxufVxuIl19