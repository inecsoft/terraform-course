import { ILiftable } from "./resource";
/**
 * Represents a length of time.
 * @wingType duration
 */
export declare class Duration implements ILiftable {
    /**
     * @internal
     */
    static _toInflightType(): string;
    /**
     * Create a Duration representing an amount of years
     *
     * @param amount the amount of Years the `Duration` will represent.
     * @returns a new `Duration` representing `amount` Years.
     */
    static fromYears(amount: number): Duration;
    /**
     * Create a Duration representing an amount of months
     *
     * @param amount the amount of Months the `Duration` will represent.
     * @returns a new `Duration` representing `amount` Months.
     */
    static fromMonths(amount: number): Duration;
    /**
     * Create a Duration representing an amount of days
     *
     * @param amount the amount of Days the `Duration` will represent.
     * @returns a new `Duration` representing `amount` Days.
     */
    static fromDays(amount: number): Duration;
    /**
     * Create a Duration representing an amount of hours
     *
     * @param amount the amount of Hours the `Duration` will represent.
     * @returns a new `Duration` representing `amount` Hours.
     */
    static fromHours(amount: number): Duration;
    /**
     * Create a Duration representing an amount of minutes
     *
     * @param amount the amount of Minutes the `Duration` will represent.
     * @returns a new `Duration` representing `amount` Minutes.
     */
    static fromMinutes(amount: number): Duration;
    /**
     * Create a Duration representing an amount of seconds
     *
     * @param amount the amount of Seconds the `Duration` will represent.
     * @returns a new `Duration` representing `amount` Seconds.
     */
    static fromSeconds(amount: number): Duration;
    /**
     * Create a Duration representing an amount of milliseconds
     *
     * @param amount the amount of Milliseconds the `Duration` will represent.
     * @returns a new `Duration` representing `amount` Milliseconds.
     */
    static fromMilliseconds(amount: number): Duration;
    /**
     * Return the total number of seconds in this Duration
     *
     * @returns the value of this `Duration` expressed in Seconds.
     */
    readonly seconds: number;
    private constructor();
    /**
     * Return the total number of milliseconds in this Duration
     *
     * @returns the value of this `Duration` expressed in Milliseconds.
     */
    get milliseconds(): number;
    /**
     * Return the total number of minutes in this Duration
     *
     * @returns the value of this `Duration` expressed in Minutes.
     */
    get minutes(): number;
    /**
     * Return the total number of hours in this Duration
     *
     * @returns the value of this `Duration` expressed in Hours.
     */
    get hours(): number;
    /**
     * Return the total number of days in this Duration
     *
     * @returns the value of this `Duration` expressed in Days.
     */
    get days(): number;
    /**
     * Return the total number of months in this Duration
     *
     * @returns the value of this `Duration` expressed in Months.
     */
    get months(): number;
    /**
     * Return the total number of years in this Duration
     *
     * @returns the value of this `Duration` expressed in Years.
     */
    get years(): number;
    /** @internal */
    _toInflight(): string;
}
