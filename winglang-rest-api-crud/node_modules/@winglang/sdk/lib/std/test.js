"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Test = exports.TEST_FQN = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const constants_1 = require("../constants");
const core_1 = require("../core");
const std_1 = require("../std");
/**
 * Global identifier for `Test`.
 */
exports.TEST_FQN = (0, constants_1.fqnForType)("std.Test");
/**
 * A unit test.
 *
 * @inflight `@winglang/sdk.std.ITestClient`
 * @skipDocs
 */
class Test extends std_1.Resource {
    constructor(scope, id, inflight, props = {}) {
        super(scope, id);
        std_1.Node.of(this).title = "Test";
        std_1.Node.of(this).description = "A cloud unit test.";
        this._fn = core_1.App.of(this)?._testRunner?._addTestFunction(this, "Handler", inflight, props);
        if (!this._fn) {
            std_1.Node.of(this).hidden = true;
        }
    }
    /** @internal */
    get _liftMap() {
        return {};
    }
    /** @internal */
    _toInflight() {
        throw new Error("unimplemented");
    }
}
exports.Test = Test;
_a = JSII_RTTI_SYMBOL_1;
Test[_a] = { fqn: "@winglang/sdk.std.Test", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdGQvdGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUVBLDRDQUEwQztBQUMxQyxrQ0FBdUM7QUFDdkMsZ0NBQW1EO0FBRW5EOztHQUVHO0FBQ1UsUUFBQSxRQUFRLEdBQUcsSUFBQSxzQkFBVSxFQUFDLFVBQVUsQ0FBQyxDQUFDO0FBZ0IvQzs7Ozs7R0FLRztBQUNILE1BQWEsSUFBSyxTQUFRLGNBQVE7SUFRaEMsWUFDRSxLQUFnQixFQUNoQixFQUFVLEVBQ1YsUUFBc0IsRUFDdEIsUUFBbUIsRUFBRTtRQUVyQixLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLFVBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQztRQUM3QixVQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsR0FBRyxvQkFBb0IsQ0FBQztRQUVqRCxJQUFJLENBQUMsR0FBRyxHQUFHLFVBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixDQUNwRCxJQUFJLEVBQ0osU0FBUyxFQUNULFFBQVEsRUFDUixLQUFLLENBQ04sQ0FBQztRQUNGLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDZCxVQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDOUIsQ0FBQztJQUNILENBQUM7SUFFRCxnQkFBZ0I7SUFDaEIsSUFBVyxRQUFRO1FBQ2pCLE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQztJQUVELGdCQUFnQjtJQUNULFdBQVc7UUFDaEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUNuQyxDQUFDOztBQXRDSCxvQkF1Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgRnVuY3Rpb24sIEZ1bmN0aW9uUHJvcHMgfSBmcm9tIFwiLi4vY2xvdWQvZnVuY3Rpb25cIjtcbmltcG9ydCB7IGZxbkZvclR5cGUgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBBcHAsIExpZnRNYXAgfSBmcm9tIFwiLi4vY29yZVwiO1xuaW1wb3J0IHsgTm9kZSwgSUluZmxpZ2h0LCBSZXNvdXJjZSB9IGZyb20gXCIuLi9zdGRcIjtcblxuLyoqXG4gKiBHbG9iYWwgaWRlbnRpZmllciBmb3IgYFRlc3RgLlxuICovXG5leHBvcnQgY29uc3QgVEVTVF9GUU4gPSBmcW5Gb3JUeXBlKFwic3RkLlRlc3RcIik7XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgYFRlc3RgLlxuICpcbiAqIFRoaXMgaXMgdGhlIHR5cGUgdXNlcnMgc2VlIHdoZW4gY29uc3RydWN0aW5nIGEgc3RkLlRlc3QgaW5zdGFuY2UuXG4gKiBAc2tpcERvY3NcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUZXN0UHJvcHMgZXh0ZW5kcyBGdW5jdGlvblByb3BzIHt9XG5cbi8qKlxuICogSW5mbGlnaHQgaW50ZXJmYWNlIGZvciBgVGVzdGAuXG4gKiBAc2tpcERvY3NcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJVGVzdENsaWVudCB7fVxuXG4vKipcbiAqIEEgdW5pdCB0ZXN0LlxuICpcbiAqIEBpbmZsaWdodCBgQHdpbmdsYW5nL3Nkay5zdGQuSVRlc3RDbGllbnRgXG4gKiBAc2tpcERvY3NcbiAqL1xuZXhwb3J0IGNsYXNzIFRlc3QgZXh0ZW5kcyBSZXNvdXJjZSB7XG4gIC8qKlxuICAgKiBUaGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSB0ZXN0IGlzIHJ1bi4gVGhpcyB3aWxsIG9ubHkgYmUgY3JlYXRlZFxuICAgKiBpZiB0aGUgYXBwIGlzIGNvbXBpbGVkIHdpdGggYHdpbmcgdGVzdGAgZm9yIGEgbm9uLXNpbXVsYXRvciB0YXJnZXQuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IF9mbjogRnVuY3Rpb24gfCB1bmRlZmluZWQ7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgc2NvcGU6IENvbnN0cnVjdCxcbiAgICBpZDogc3RyaW5nLFxuICAgIGluZmxpZ2h0OiBJVGVzdEhhbmRsZXIsXG4gICAgcHJvcHM6IFRlc3RQcm9wcyA9IHt9XG4gICkge1xuICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICBOb2RlLm9mKHRoaXMpLnRpdGxlID0gXCJUZXN0XCI7XG4gICAgTm9kZS5vZih0aGlzKS5kZXNjcmlwdGlvbiA9IFwiQSBjbG91ZCB1bml0IHRlc3QuXCI7XG5cbiAgICB0aGlzLl9mbiA9IEFwcC5vZih0aGlzKT8uX3Rlc3RSdW5uZXI/Ll9hZGRUZXN0RnVuY3Rpb24oXG4gICAgICB0aGlzLFxuICAgICAgXCJIYW5kbGVyXCIsXG4gICAgICBpbmZsaWdodCxcbiAgICAgIHByb3BzXG4gICAgKTtcbiAgICBpZiAoIXRoaXMuX2ZuKSB7XG4gICAgICBOb2RlLm9mKHRoaXMpLmhpZGRlbiA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwdWJsaWMgZ2V0IF9saWZ0TWFwKCk6IExpZnRNYXAge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHVibGljIF90b0luZmxpZ2h0KCk6IHN0cmluZyB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwidW5pbXBsZW1lbnRlZFwiKTtcbiAgfVxufVxuXG4vKipcbiAqIEludGVyZmFjZSB3aXRoIGFuIGluZmxpZ2h0IFwiaGFuZGxlXCIgbWV0aG9kIHRoYXQgY2FuIGJlIHVzZWQgdG8gY29uc3RydWN0XG4gKiBhIGBzdGQuVGVzdGAuXG4gKlxuICogQGluZmxpZ2h0IGBAd2luZ2xhbmcvc2RrLnN0ZC5JVGVzdEhhbmRsZXJDbGllbnRgXG4gKiBAc2tpcERvY3NcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJVGVzdEhhbmRsZXIgZXh0ZW5kcyBJSW5mbGlnaHQge31cblxuLyoqXG4gKiBJbmZsaWdodCBjbGllbnQgZm9yIGBJVGVzdEhhbmRsZXJgLlxuICogQHNraXBEb2NzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVRlc3RIYW5kbGVyQ2xpZW50IHtcbiAgLyoqXG4gICAqIEluZmxpZ2h0IGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlbiB0aGUgdGVzdCBpcyBydW4uXG4gICAqIEBpbmZsaWdodFxuICAgKi9cbiAgaGFuZGxlKCk6IFByb21pc2U8dm9pZD47XG59XG4iXX0=