import { Construct } from "constructs";
import { Resource } from "./resource";
import { Test } from "./test";
import { Function, FunctionProps, IFunctionHandler } from "../cloud";
import { App, LiftMap } from "../core";
/**
 * Global identifier for `TestRunner`.
 */
export declare const TEST_RUNNER_FQN: string;
/**
 * Properties for `TestRunner`.
 * @skipDocs
 */
export interface TestRunnerProps {
}
/**
 * A test engine.
 *
 * @inflight `@winglang/sdk.std.ITestRunnerClient`
 * @skipDocs
 * @abstract
 */
export declare class TestRunner extends Resource {
    /**
     * Instantiate one or more copies of a tree inside of an app based
     * on how many isolated environments are needed for testing.
     * @internal
     */
    static _createTree(app: App, Root: any): void;
    /**
     * List of isolated environment names where we've already created a cloud.Function
     * for a unit test. We keep track of these so that we don't synthesize
     * multiple test functions into the same isolated environment.
     */
    private _synthedEnvs;
    /**
     * List of test paths that we have already created a cloud.Function for.
     * We keep track of these so that we don't create identical test functions in multiple
     * isolated environments.
     */
    private _synthedTests;
    constructor(scope: Construct, id: string, props?: TestRunnerProps);
    /** @internal */
    _addTestFunction(scope: Construct, id: string, inflight: IFunctionHandler, props: FunctionProps): Function | undefined;
    /** @internal */
    get _liftMap(): LiftMap;
    /**
     * Find all tests in the construct tree.
     * @returns A list of tests.
     */
    findTests(): Test[];
}
/**
 * Inflight interface for `TestRunner`.
 * @skipDocs
 */
export interface ITestRunnerClient {
    /**
     * List all tests available for this test engine.
     * @inflight
     * @returns A list of test names.
     */
    listTests(): Promise<string[]>;
    /**
     * Run a test with a given path and return the result.
     * @inflight
     */
    runTest(path: string): Promise<TestResult>;
}
/**
 * A result of a single test.
 * @skipDocs
 */
export interface TestResult {
    /**
     * The path of the test.
     */
    readonly path: string;
    /**
     * Whether the test passed.
     */
    readonly pass: boolean;
    /**
     * Whether the test contains code that is unsupported by the target.
     */
    readonly unsupported?: boolean;
    /**
     * Unsupported resource tested
     */
    readonly unsupportedResource?: string;
    /**
     * Unsupported method used in test
     */
    readonly unsupportedOperation?: string;
    /**
     * Place for extra test runner arguments that can be added through platforms
     */
    readonly args?: Record<string, unknown>;
    /**
     * The error message if the test failed.
     */
    readonly error?: string;
    /**
     * List of traces emitted during the test.
     */
    readonly traces: Trace[];
}
/**
 * A trace emitted during simulation.
 * @skipDocs
 */
export interface Trace {
    /**
     * A JSON blob with structured data.
     */
    readonly data: any;
    /**
     * The type of the source that emitted the trace.
     */
    readonly sourceType: string;
    /**
     * The path of the resource that emitted the trace.
     */
    readonly sourcePath: string;
    /**
     * The type of a trace.
     */
    readonly type: TraceType;
    /**
     * The log level of the event.
     */
    readonly level: LogLevel;
    /**
     * The timestamp of the event, in ISO 8601 format.
     * @example 2020-01-01T00:00:00.000Z
     */
    readonly timestamp: string;
}
/**
 * Log level
 */
export declare enum LogLevel {
    /**
     * Mostly used for debugging
     */
    VERBOSE = "verbose",
    /**
     * Information that is useful to developers
     */
    INFO = "info",
    /**
     * Warnings that are not errors, but may require attention
     */
    WARNING = "warning",
    /**
     * Errors that should be addressed
     */
    ERROR = "error"
}
/**
 * The type of a trace.
 * @skipDocs
 */
export declare enum TraceType {
    /**
     * A trace representing simulator activity.
     */
    SIMULATOR = "simulator",
    /**
     * A trace representing a resource activity.
     */
    RESOURCE = "resource",
    /**
     * A trace representing a message emitted by the logger.
     */
    LOG = "log"
}
/**
 * List of inflight operations available for `TestRunner`.
 * @internal
 */
export declare enum TestRunnerInflightMethods {
    /** `TestRunner.runTest` */
    RUN_TEST = "runTest",
    /** `TestRunner.listTests` */
    LIST_TESTS = "listTests"
}
