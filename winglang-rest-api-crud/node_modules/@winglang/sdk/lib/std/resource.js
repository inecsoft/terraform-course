"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoIdResource = exports.Resource = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const constructs_1 = require("constructs");
const core_1 = require("../core");
const errors_1 = require("../core/errors");
const std_1 = require("../std");
function hasLiftMap(x) {
    return x != null && typeof x._liftMap === "object";
}
/**
 * Shared behavior between all Wing SDK resources.
 * @skipDocs
 * @noinflight
 */
class Resource extends constructs_1.Construct {
    /**
     * A hook called by the Wing compiler once for each inflight host that needs to
     * use this type inflight. The list of requested inflight methods
     * needed by the inflight host are given by `ops`.
     *
     * This method is commonly used for adding permissions, environment variables, or
     * other capabilities to the inflight host.
     */
    static onLiftType(host, ops) {
        host;
        ops;
    }
    /**
     * Generates an asynchronous JavaScript statement which can be used to create an inflight client
     * for a resource.
     *
     * NOTE: This statement must be executed within an async context.
     */
    static toInflight(obj) {
        return obj._toInflight();
    }
    /**
     * Create an instance of this resource with the current App factory.
     * This is commonly used in the constructor of a pseudo-abstract resource class before the super() call.
     *
     * @example
     * ```ts
     * export class MyResource extends Resource {
     *   constructor(scope: Construct, id: string, props: MyResourceProps) {
     *     if (new.target === MyResource) {
     *      return MyResource._newFromFactory(MYRESOURCE_FQN, scope, id, props);
     *     }
     *     super(scope, id);
     *     // ...
     *  ```
     *
     * @internal
     */
    static _newFromFactory(fqn, scope, id, ...props) {
        return core_1.App.of(scope).newAbstract(fqn, scope, id, ...props);
    }
    /**
     * Return a code snippet that can be used to reference this resource inflight.
     *
     * @internal
     * @abstract
     */
    _toInflight() {
        throw new errors_1.AbstractMemberError();
    }
    /**
     * A hook called by the Wing compiler once for each inflight host that needs to
     * use this resource inflight.
     *
     * You can override this method to perform additional logic like granting
     * IAM permissions to the host based on what methods are being called. But
     * you must call `super.bind(host, ops)` to ensure that the resource is
     * actually bound.
     */
    onLift(host, ops) {
        host;
        ops;
    }
    /**
     * A hook for performing operations after the tree of resources has been
     * created, but before they are synthesized.
     *
     * Currently used for binding resources to hosts.
     *
     * @internal
     */
    _preSynthesize() {
        if (hasLiftMap(this) && !(this instanceof AutoIdResource)) {
            addConnectionsFromLiftMap(this, this._liftMap);
        }
    }
}
exports.Resource = Resource;
_a = JSII_RTTI_SYMBOL_1;
Resource[_a] = { fqn: "@winglang/sdk.std.Resource", version: "0.0.0" };
function addConnectionsFromLiftMap(construct, liftData, baseOp) {
    for (const [op, liftEntries] of Object.entries(liftData)) {
        for (const [dep, depOps] of liftEntries) {
            if (constructs_1.Construct.isConstruct(dep) && !(dep instanceof AutoIdResource)) {
                // case 1: dep is an ordinary resource
                for (const depOp of depOps) {
                    std_1.Node.of(construct).addConnection({
                        source: construct,
                        sourceOp: baseOp ?? op,
                        target: dep,
                        targetOp: depOp,
                        name: depOp,
                    });
                }
            }
            else if (hasLiftMap(dep)) {
                // case 2: dep is an inflight
                addConnectionsFromLiftMap(construct, dep._liftMap, baseOp ?? op);
            }
        }
    }
}
/**
 * A resource that has an automatically generated id.
 * Used by the Wing compiler to generate unique ids for auto generated resources
 * from inflight function closures.
 * @noinflight
 */
class AutoIdResource extends Resource {
    constructor(scope, idPrefix = "") {
        const id = core_1.App.of(scope).makeId(scope, idPrefix ? `${idPrefix}_` : "");
        super(scope, id);
    }
}
exports.AutoIdResource = AutoIdResource;
_b = JSII_RTTI_SYMBOL_1;
AutoIdResource[_b] = { fqn: "@winglang/sdk.std.AutoIdResource", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,