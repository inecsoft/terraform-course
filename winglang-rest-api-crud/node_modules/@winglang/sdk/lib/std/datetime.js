"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Datetime = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const inflight_1 = require("../core/inflight");
const misc_1 = require("../shared/misc");
/**
 * Represents a local or UTC date object
 * @wingType datetime
 */
class Datetime {
    /**
     * @internal
     */
    static _toInflightType() {
        return inflight_1.InflightClient.forType(__filename, this.name);
    }
    /**
     * Create a Datetime from UTC timezone
     *
     * @returns a new `Datetime` from current time in UTC timezone
     */
    static utcNow() {
        return new Datetime();
    }
    /**
     * Create a Datetime from local system timezone
     *
     * @returns a new `Datetime` from current time in system timezone
     */
    static systemNow() {
        const date = new Date();
        date.setTime(date.getTime() - date.getTimezoneOffset() * 60 * 1000);
        return new Datetime(date, date.getTimezoneOffset());
    }
    /**
     * Create a Datetime from an ISO-8601 string
     *
     * @returns a new `Datetime` in UTC timezone
     * @param iso ISO-8601 string
     */
    static fromIso(iso) {
        return new Datetime(new Date(iso));
    }
    /**
     * Create a Datetime from a JavaScript Date object.
     *
     * @param date The JavaScript Date object.
     * @returns a new `Datetime` instance.
     */
    static fromDate(date) {
        return this.fromIso(date.toISOString());
    }
    /**
     * Create a Datetime from Datetime components
     *
     * @param c DatetimeComponents
     * @returns a new `Datetime`
     */
    static fromComponents(c) {
        const date = new Date(Date.UTC(c.year, c.month, c.day, c.hour, c.min, c.sec, c.ms));
        return new Datetime(date, c.tz);
    }
    constructor(date = new Date(), timezoneOffset = 0) {
        /** @internal */
        this._timezoneOffset = 0;
        this._date = date;
        this._timezoneOffset = timezoneOffset;
    }
    /** @internal */
    _toInflight() {
        return `(require("${(0, misc_1.normalPath)(__filename)}").Datetime.fromIso("${this.toIso()}"))`;
    }
    /**
     * Return a timestamp of non-leap year seconds since epoch
     *
     * @returns a number representing the current timestamp in seconds
     */
    get timestamp() {
        return this.timestampMs / 1000;
    }
    /**
     * Return a timestamp of non-leap year milliseconds since epoch
     *
     * @returns a number representing the current timestamp in milliseconds
     */
    get timestampMs() {
        // since converting between timezones/ declaring a date in a timezone other than the local or UTC
        // isn't native to js, we keep the date in a UTC time, then retrieving back the the original timestamp,
        // this way the date components (hours, month, day, minutes, etc..) are persistent
        // and retrieved in the same order for all of the different constructing methods and the timestamp is correct.
        return this._date.valueOf() + this._timezoneOffset * 60 * 1000;
    }
    /**
     * Returns the hour of the local machine time or in utc
     *
     * @returns a number representing the datetime's hour
     */
    get hours() {
        return this._date.getUTCHours();
    }
    /**
     * Returns the minute of the local machine time or in utc
     *
     * @returns a number representing the datetime's minute
     */
    get min() {
        return this._date.getUTCMinutes();
    }
    /**
     * Returns the seconds of the local machine time or in utc
     *
     * @returns a number representing the datetime's seconds
     */
    get sec() {
        return this._date.getUTCSeconds();
    }
    /**
     * Returns the milliseconds of the local machine time or in utc
     *  *
     * @returns a number representing the datetime's milliseconds
     */
    get ms() {
        return this._date.getUTCMilliseconds();
    }
    /**
     * Returns the day of month in the local machine time or in utc (1 - 31)
     *
     * @returns a number representing the datetime's day of month
     */
    get dayOfMonth() {
        return this._date.getUTCDate();
    }
    /**
     * Returns the day in month of the local machine time or in utc (0 - 6)
     *
     * @returns a number representing the datetime's day of week
     */
    get dayOfWeek() {
        return this._date.getUTCDay();
    }
    /**
     * Returns the month of the local machine time or in utc (0 - 11)
     *
     * @returns a number representing the datetime's month
     */
    get month() {
        return this._date.getUTCMonth();
    }
    /**
     * Returns the year of the local machine time or in utc
     *
     * @returns a number representing the datetime's year
     */
    get year() {
        return this._date.getUTCFullYear();
    }
    /**
     * Returns the offset in minutes from UTC
     *
     * @returns a number representing the datetime's offset in minutes from UTC
     */
    get timezone() {
        return this._timezoneOffset;
    }
    /**
     * Returns a Datetime represents the same date in utc
     *
     * @returns a datetime representing the datetime's date in UTC
     */
    toUtc() {
        return new Datetime(new Date(this.timestampMs));
    }
    /**
     * Returns ISO-8601 string
     *
     * @returns a ISO-8601 string representation of the datetime
     */
    toIso() {
        return new Date(this.timestampMs).toISOString();
    }
}
exports.Datetime = Datetime;
_a = JSII_RTTI_SYMBOL_1;
Datetime[_a] = { fqn: "@winglang/sdk.std.Datetime", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,