"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Regex = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const core_1 = require("../core");
const misc_1 = require("../shared/misc");
/**
 * Represents a compiled regular expression pattern.
 * @wingType regex
 */
class Regex {
    /**
     * @internal
     */
    static _toInflightType() {
        return core_1.InflightClient.forType(__filename, this.name);
    }
    /**
     * Compiles the provided regex pattern into a `Regex` object.
     * @param pattern The regex pattern to compile.
     * @returns A new `Regex` object representing the compiled pattern.
     */
    static compile(pattern) {
        return new Regex(pattern);
    }
    /**
     * Constructs a new `Regex` object with the specified pattern.
     * @param pattern The regular expression pattern.
     */
    constructor(pattern) {
        this._regex = new RegExp(pattern);
    }
    /** @internal */
    _toInflight() {
        return `(new (require("${(0, misc_1.normalPath)(__filename)}").Regex)(${this._regex}))`;
    }
    /**
     * Checks if the regular expression matches the provided text.
     * @param text The text to check against.
     * @returns `true` if there is a match, otherwise `false`.
     */
    test(text) {
        return this._regex.test(text);
    }
    /**
     * Finds the first occurrence of the pattern within the text.
     * @param text The text to search within.
     * @returns The first match if found, otherwise `undefined`.
     */
    find(text) {
        const result = text.match(this._regex);
        return result ? result[0] : undefined;
    }
    /**
     * Finds the start and end index of the first match within the text.
     * @param text The text to search within.
     * @returns An array containing the start and end index of the match if found, otherwise `undefined`.
     */
    findIndex(text) {
        const result = this._regex.exec(text);
        return result ? [result.index, result.index + result[0].length] : undefined;
    }
    /**
     * Finds the first match and its submatches.
     * @param text The text to search within.
     * @returns An array containing the match and all submatches.
     */
    findSubmatch(text) {
        const result = text.match(this._regex);
        if (result) {
            return [result[0], ...result.slice(1)];
        }
        return undefined;
    }
    /**
     * Finds the start and end index of the match and all submatches.
     * @param text The text to search within.
     * @returns An array containing arrays of start and end indices for the match and all submatches.
     */
    findSubmatchIndex(text) {
        const result = this._regex.exec(text);
        if (!result) {
            return undefined;
        }
        // Initialize the array with the match's start and end indices
        const indices = [[result.index, result.index + result[0].length]];
        // Add submatch indices
        result.slice(1).forEach((submatch) => {
            const start = text.indexOf(submatch, indices[indices.length - 1][0]);
            const end = start + submatch.length;
            indices.push([start, end]);
        });
        return indices;
    }
    /**
     * Finds all non-overlapping occurrences of the pattern within the text.
     * Returns an empty array if no matches are found.
     * @param text The text to search within.
     * @returns An array containing all matches found.
     */
    findAll(text) {
        const globalRegex = this.getGlobalRegex();
        return [...text.matchAll(globalRegex)].map((match) => match[0]);
    }
    /**
     * Finds the start and end index of all matches within the text.
     * Indices are zero-based.
     * @param text The text to search within.
     * @returns An array containing arrays of start and end indices for each match found.
     */
    findAllIndex(text) {
        const matches = [];
        const globalRegex = this.getGlobalRegex();
        for (const match of text.matchAll(globalRegex)) {
            if (match.index !== undefined) {
                matches.push([match.index, match.index + match[0].length]);
            }
        }
        return matches;
    }
    /**
     * Replaces all occurrences of the match with a replacement string.
     * @param text The text to search and replace within.
     * @param replacement The replacement string.
     * @returns The resulting text after all replacements.
     */
    replaceAll(text, replacement) {
        const globalRegex = this.getGlobalRegex();
        return text.replace(globalRegex, replacement);
    }
    /**
     * Helper method to get the global version of a regex.
     * @returns The current regex if it's already global, otherwise a new global regex.
     */
    getGlobalRegex() {
        return this._regex.global ? this._regex : new RegExp(this._regex, "g");
    }
}
exports.Regex = Regex;
_a = JSII_RTTI_SYMBOL_1;
Regex[_a] = { fqn: "@winglang/sdk.std.Regex", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,