import { ILiftable } from "./resource";
/**
 * Represents a compiled regular expression pattern.
 * @wingType regex
 */
export declare class Regex implements ILiftable {
    /**
     * @internal
     */
    static _toInflightType(): string;
    /**
     * Compiles the provided regex pattern into a `Regex` object.
     * @param pattern The regex pattern to compile.
     * @returns A new `Regex` object representing the compiled pattern.
     */
    static compile(pattern: string): Regex;
    /** @internal */
    private readonly _regex;
    /**
     * Constructs a new `Regex` object with the specified pattern.
     * @param pattern The regular expression pattern.
     */
    private constructor();
    /** @internal */
    _toInflight(): string;
    /**
     * Checks if the regular expression matches the provided text.
     * @param text The text to check against.
     * @returns `true` if there is a match, otherwise `false`.
     */
    test(text: string): boolean;
    /**
     * Finds the first occurrence of the pattern within the text.
     * @param text The text to search within.
     * @returns The first match if found, otherwise `undefined`.
     */
    find(text: string): string | undefined;
    /**
     * Finds the start and end index of the first match within the text.
     * @param text The text to search within.
     * @returns An array containing the start and end index of the match if found, otherwise `undefined`.
     */
    findIndex(text: string): number[] | undefined;
    /**
     * Finds the first match and its submatches.
     * @param text The text to search within.
     * @returns An array containing the match and all submatches.
     */
    findSubmatch(text: string): string[] | undefined;
    /**
     * Finds the start and end index of the match and all submatches.
     * @param text The text to search within.
     * @returns An array containing arrays of start and end indices for the match and all submatches.
     */
    findSubmatchIndex(text: string): number[][] | undefined;
    /**
     * Finds all non-overlapping occurrences of the pattern within the text.
     * Returns an empty array if no matches are found.
     * @param text The text to search within.
     * @returns An array containing all matches found.
     */
    findAll(text: string): string[];
    /**
     * Finds the start and end index of all matches within the text.
     * Indices are zero-based.
     * @param text The text to search within.
     * @returns An array containing arrays of start and end indices for each match found.
     */
    findAllIndex(text: string): number[][];
    /**
     * Replaces all occurrences of the match with a replacement string.
     * @param text The text to search and replace within.
     * @param replacement The replacement string.
     * @returns The resulting text after all replacements.
     */
    replaceAll(text: string, replacement: string): string;
    /**
     * Helper method to get the global version of a regex.
     * @returns The current regex if it's already global, otherwise a new global regex.
     */
    private getGlobalRegex;
}
