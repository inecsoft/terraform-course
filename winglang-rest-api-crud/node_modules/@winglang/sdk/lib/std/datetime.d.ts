import { ILiftable } from "./resource";
/**
 * Interface that is used for setting Datetime date
 */
export interface DatetimeComponents {
    /**
     * Year
     */
    readonly year: number;
    /**
     * Month
     */
    readonly month: number;
    /**
     * Day
     */
    readonly day: number;
    /**
     * Hours
     */
    readonly hour: number;
    /**
     * Minutes
     */
    readonly min: number;
    /**
     * Seconds
     */
    readonly sec: number;
    /**
     * Milliseconds
     */
    readonly ms: number;
    /**
     *  Timezone offset in minutes from UTC
     */
    readonly tz: number;
}
/**
 * Represents a local or UTC date object
 * @wingType datetime
 */
export declare class Datetime implements ILiftable {
    /**
     * @internal
     */
    static _toInflightType(): string;
    /**
     * Create a Datetime from UTC timezone
     *
     * @returns a new `Datetime` from current time in UTC timezone
     */
    static utcNow(): Datetime;
    /**
     * Create a Datetime from local system timezone
     *
     * @returns a new `Datetime` from current time in system timezone
     */
    static systemNow(): Datetime;
    /**
     * Create a Datetime from an ISO-8601 string
     *
     * @returns a new `Datetime` in UTC timezone
     * @param iso ISO-8601 string
     */
    static fromIso(iso: string): Datetime;
    /**
     * Create a Datetime from a JavaScript Date object.
     *
     * @param date The JavaScript Date object.
     * @returns a new `Datetime` instance.
     */
    static fromDate(date: Date): Datetime;
    /**
     * Create a Datetime from Datetime components
     *
     * @param c DatetimeComponents
     * @returns a new `Datetime`
     */
    static fromComponents(c: DatetimeComponents): Datetime;
    /** @internal */
    private readonly _date;
    /** @internal */
    private readonly _timezoneOffset;
    private constructor();
    /** @internal */
    _toInflight(): string;
    /**
     * Return a timestamp of non-leap year seconds since epoch
     *
     * @returns a number representing the current timestamp in seconds
     */
    get timestamp(): number;
    /**
     * Return a timestamp of non-leap year milliseconds since epoch
     *
     * @returns a number representing the current timestamp in milliseconds
     */
    get timestampMs(): number;
    /**
     * Returns the hour of the local machine time or in utc
     *
     * @returns a number representing the datetime's hour
     */
    get hours(): number;
    /**
     * Returns the minute of the local machine time or in utc
     *
     * @returns a number representing the datetime's minute
     */
    get min(): number;
    /**
     * Returns the seconds of the local machine time or in utc
     *
     * @returns a number representing the datetime's seconds
     */
    get sec(): number;
    /**
     * Returns the milliseconds of the local machine time or in utc
     *  *
     * @returns a number representing the datetime's milliseconds
     */
    get ms(): number;
    /**
     * Returns the day of month in the local machine time or in utc (1 - 31)
     *
     * @returns a number representing the datetime's day of month
     */
    get dayOfMonth(): number;
    /**
     * Returns the day in month of the local machine time or in utc (0 - 6)
     *
     * @returns a number representing the datetime's day of week
     */
    get dayOfWeek(): number;
    /**
     * Returns the month of the local machine time or in utc (0 - 11)
     *
     * @returns a number representing the datetime's month
     */
    get month(): number;
    /**
     * Returns the year of the local machine time or in utc
     *
     * @returns a number representing the datetime's year
     */
    get year(): number;
    /**
     * Returns the offset in minutes from UTC
     *
     * @returns a number representing the datetime's offset in minutes from UTC
     */
    get timezone(): number;
    /**
     * Returns a Datetime represents the same date in utc
     *
     * @returns a datetime representing the datetime's date in UTC
     */
    toUtc(): Datetime;
    /**
     * Returns ISO-8601 string
     *
     * @returns a ISO-8601 string representation of the datetime
     */
    toIso(): string;
}
