"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Duration = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const core_1 = require("../core");
const misc_1 = require("../shared/misc");
/**
 * Represents a length of time.
 * @wingType duration
 */
class Duration {
    /**
     * @internal
     */
    static _toInflightType() {
        return core_1.InflightClient.forType(__filename, this.name);
    }
    /**
     * Create a Duration representing an amount of years
     *
     * @param amount the amount of Years the `Duration` will represent.
     * @returns a new `Duration` representing `amount` Years.
     */
    static fromYears(amount) {
        return new Duration(amount * 60 * 60 * 24 * 365);
    }
    /**
     * Create a Duration representing an amount of months
     *
     * @param amount the amount of Months the `Duration` will represent.
     * @returns a new `Duration` representing `amount` Months.
     */
    static fromMonths(amount) {
        return new Duration((amount * 60 * 60 * 24 * 365) / 12);
    }
    /**
     * Create a Duration representing an amount of days
     *
     * @param amount the amount of Days the `Duration` will represent.
     * @returns a new `Duration` representing `amount` Days.
     */
    static fromDays(amount) {
        return new Duration(amount * 60 * 60 * 24);
    }
    /**
     * Create a Duration representing an amount of hours
     *
     * @param amount the amount of Hours the `Duration` will represent.
     * @returns a new `Duration` representing `amount` Hours.
     */
    static fromHours(amount) {
        return new Duration(amount * 60 * 60);
    }
    /**
     * Create a Duration representing an amount of minutes
     *
     * @param amount the amount of Minutes the `Duration` will represent.
     * @returns a new `Duration` representing `amount` Minutes.
     */
    static fromMinutes(amount) {
        return new Duration(amount * 60);
    }
    /**
     * Create a Duration representing an amount of seconds
     *
     * @param amount the amount of Seconds the `Duration` will represent.
     * @returns a new `Duration` representing `amount` Seconds.
     */
    static fromSeconds(amount) {
        return new Duration(amount);
    }
    /**
     * Create a Duration representing an amount of milliseconds
     *
     * @param amount the amount of Milliseconds the `Duration` will represent.
     * @returns a new `Duration` representing `amount` Milliseconds.
     */
    static fromMilliseconds(amount) {
        return new Duration(amount / 1000);
    }
    constructor(seconds) {
        this.seconds = seconds;
    }
    /**
     * Return the total number of milliseconds in this Duration
     *
     * @returns the value of this `Duration` expressed in Milliseconds.
     */
    get milliseconds() {
        return this.seconds * 1000;
    }
    /**
     * Return the total number of minutes in this Duration
     *
     * @returns the value of this `Duration` expressed in Minutes.
     */
    get minutes() {
        return this.seconds / 60;
    }
    /**
     * Return the total number of hours in this Duration
     *
     * @returns the value of this `Duration` expressed in Hours.
     */
    get hours() {
        return this.minutes / 60;
    }
    /**
     * Return the total number of days in this Duration
     *
     * @returns the value of this `Duration` expressed in Days.
     */
    get days() {
        return this.hours / 24;
    }
    /**
     * Return the total number of months in this Duration
     *
     * @returns the value of this `Duration` expressed in Months.
     */
    get months() {
        return this.years * 12;
    }
    /**
     * Return the total number of years in this Duration
     *
     * @returns the value of this `Duration` expressed in Years.
     */
    get years() {
        return this.days / 365;
    }
    /** @internal */
    _toInflight() {
        return `(new (require("${(0, misc_1.normalPath)(__filename)}").Duration)(${this.seconds}))`;
    }
}
exports.Duration = Duration;
_a = JSII_RTTI_SYMBOL_1;
Duration[_a] = { fqn: "@winglang/sdk.std.Duration", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,