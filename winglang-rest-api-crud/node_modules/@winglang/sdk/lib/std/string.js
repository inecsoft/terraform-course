"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.String = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const json_schema_1 = require("./json_schema");
const core_1 = require("../core");
/**
 * String
 * @wingType str
 */
class String {
    /**
     * @internal
     */
    static _toInflightType() {
        return core_1.InflightClient.forType(__filename, this.name);
    }
    /**
     * Parse string from Json.
     *
     * @param json to create string from.
     * @returns a string.
     */
    static fromJson(json, options) {
        const schema = json_schema_1.JsonSchema._createJsonSchema({
            $id: "string",
            type: "string",
        });
        schema.validate(json, options);
        return json;
    }
    constructor() { }
    /**
     * The length of the string.
     */
    get length() {
        throw new Error("Abstract");
    }
    /**
     * Returns the character at the specified index.
     *
     * @macro ((args) => { if ($args$ >= $self$.length || $args$ + $self$.length < 0) {throw new Error("index out of bounds")}; return $self$.at($args$) })($args$)
     *
     * @param index position of the character.
     * @returns string at the specified index.
     */
    at(index) {
        index;
        throw new Error("Abstract");
    }
    /**
     * Combines the text of two (or more) strings and returns a new string.
     *
     * @param strN one or more strings to concatenate to this string.
     * @returns a new combined string.
     */
    concat(strN) {
        strN;
        throw new Error("Abstract");
    }
    /**
     * Checks if string includes substring.
     *
     * @macro $self$.includes($args$)
     *
     * @param searchString substring to search for.
     * @returns true if string includes substring.
     */
    contains(searchString) {
        searchString;
        throw new Error("Macro");
    }
    /**
     * Does this string end with the given searchString?
     *
     * @macro $self$.endsWith($args$)
     *
     * @param searchString substring to search for.
     * @returns true if string ends with searchString.
     */
    endsWith(searchString) {
        searchString;
        throw new Error("Abstract");
    }
    /**
     * Returns the index of the first occurrence of searchString found.
     *
     * @macro $self$.indexOf($args$)
     *
     * @param searchString substring to search for.
     * @returns the index of the first occurrence of searchString found, or -1 if not found.
     */
    indexOf(searchString) {
        searchString;
        throw new Error("Macro");
    }
    /**
     * Returns this string in lower case.
     *
     * @macro $self$.toLocaleLowerCase()
     *
     * @returns a new lower case string.
     */
    lowercase() {
        throw new Error("Macro");
    }
    /**
     * Splits string by separator.
     *
     * @param separator separator to split by.
     * @returns array of strings.
     */
    split(separator) {
        separator;
        throw new Error("Abstract");
    }
    /**
     * Does this string start with the given searchString?
     *
     * @macro $self$.startsWith($args$)
     *
     * @param searchString substring to search for.
     * @returns true if string starts with searchString.
     */
    startsWith(searchString) {
        searchString;
        throw new Error("Abstract");
    }
    /**
     * Returns a string between indexStart, indexEnd.
     *
     * @param indexStart index of the character we slice at.
     * @param indexEnd optional - index of the character we end slicing at.
     * @returns the string contained from indexStart to indexEnd.
     */
    substring(indexStart, indexEnd) {
        indexStart;
        indexEnd;
        throw new Error("Abstract");
    }
    /**
     * Replaces the first occurence of a substring within a string.
     *
     * @macro $self$.replace($args$)
     *
     * @param searchString The substring to search for.
     * @param replaceString The replacement substring.
     * @returns The modified string after replacement.
     */
    replace(searchString, replaceString) {
        searchString;
        replaceString;
        throw new Error("Abstract");
    }
    /**
     * Replaces all occurrences of a substring within a string.
     *
     * @macro $self$.replaceAll($args$)
     *
     * @param searchString The substring to search for.
     * @param replaceString The replacement substring.
     * @returns The modified string after replacement.
     */
    replaceAll(searchString, replaceString) {
        searchString;
        replaceString;
        throw new Error("Abstract");
    }
    /**
     * Removes white spaces from start and end of this string.
     *
     * @returns a new string with white spaces removed from start and end.
     */
    trim() {
        throw new Error("Abstract");
    }
    /**
     * Returns this string in upper case.
     *
     * @macro $self$.toLocaleUpperCase()
     *
     * @returns a new upper case string.
     */
    uppercase() {
        throw new Error("Macro");
    }
}
exports.String = String;
_a = JSII_RTTI_SYMBOL_1;
String[_a] = { fqn: "@winglang/sdk.std.String", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,