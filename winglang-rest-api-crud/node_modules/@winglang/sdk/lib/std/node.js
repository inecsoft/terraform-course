"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Node = exports.SDK_SOURCE_MODULE = exports.CONNECTIONS_FILE_PATH = exports.APP_SYMBOL = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const constructs_1 = require("constructs");
const connections_1 = require("../core/connections");
const NODE_SYMBOL = Symbol.for("@winglang/sdk.std.Node");
exports.APP_SYMBOL = Symbol.for("@winglang/sdk.std.Node/app");
const ROOT_SYMBOL = Symbol.for("@winglang/sdk.std.Node/root");
exports.CONNECTIONS_FILE_PATH = "connections.json";
exports.SDK_SOURCE_MODULE = "@winglang/sdk";
/**
 * The internal node of a construct.
 */
class Node {
    /**
     * Marks a type as the root of the tree.
     * @param rootConstructor
     * @internal
     */
    static _markRoot(rootConstructor) {
        rootConstructor[ROOT_SYMBOL] = true;
    }
    /**
     * Return the internal construct node.
     */
    static of(construct) {
        let node = construct[NODE_SYMBOL];
        if (!node) {
            node = new Node(construct);
            construct[NODE_SYMBOL] = node;
        }
        return node;
    }
    constructor(construct) {
        this.construct = construct;
        this._constructsNode = construct.node;
        this._connections = connections_1.Connections.of(construct); // tree-unique instance
    }
    /**
     * Adds a connection between two constructs. A connection is a piece of
     * metadata describing how one construct is related to another construct.
     */
    addConnection(props) {
        this._connections.add(props);
    }
    // ---- constructs 10.x APIs ----
    // https://github.com/aws/constructs/blob/10.x/src/construct.ts
    /**
     * Returns the scope in which this construct is defined.
     *
     * The value is `undefined` at the root of the construct scope tree.
     */
    get scope() {
        return this._constructsNode.scope;
    }
    /**
     * The id of this construct within the current scope.
     *
     * This is a a scope-unique id. To obtain an app-unique id for this construct, use `addr`.
     */
    get id() {
        return this._constructsNode.id;
    }
    /**
     * The full, absolute path of this construct in the tree.
     *
     * Components are separated by '/'.
     */
    get path() {
        return this._constructsNode.path;
    }
    /**
     * Returns an opaque tree-unique address for this construct.
     *
     * Addresses are 42 characters hexadecimal strings. They begin with "c8"
     * followed by 40 lowercase hexadecimal characters (0-9a-f).
     *
     * Addresses are calculated using a SHA-1 of the components of the construct
     * path.
     *
     * To enable refactorings of construct trees, constructs with the ID `Default`
     * will be excluded from the calculation. In those cases constructs in the
     * same tree may have the same addreess.
     *
     * @example c83a2846e506bcc5f10682b564084bca2d275709ee
     */
    get addr() {
        return this._constructsNode.addr;
    }
    /**
     * Return a direct child by id, or undefined
     *
     * @param id Identifier of direct child
     * @returns the child if found, or undefined
     */
    tryFindChild(id) {
        return this._constructsNode.tryFindChild(id);
    }
    /**
     * Return a direct child by id
     *
     * Throws an error if the child is not found.
     *
     * @param id Identifier of direct child
     * @returns Child with the given id.
     */
    findChild(id) {
        return this._constructsNode.findChild(id);
    }
    /**
     * Returns the child construct that has the id `Default` or `Resource"`.
     * This is usually the construct that provides the bulk of the underlying functionality.
     * Useful for modifications of the underlying construct that are not available at the higher levels.
     *
     * @throws if there is more than one child
     * @returns a construct or undefined if there is no default child
     */
    get defaultChild() {
        return this._constructsNode.defaultChild;
    }
    /**
     * Override the defaultChild property.
     *
     * This should only be used in the cases where the correct
     * default child is not named 'Resource' or 'Default' as it
     * should be.
     *
     * If you set this to undefined, the default behavior of finding
     * the child named 'Resource' or 'Default' will be used.
     */
    set defaultChild(value) {
        this._constructsNode.defaultChild = value;
    }
    /**
     * All direct children of this construct.
     */
    get children() {
        return this._constructsNode.children;
    }
    /**
     * Return this construct and all of its children in the given order
     */
    findAll(order = constructs_1.ConstructOrder.PREORDER) {
        return this._constructsNode.findAll(order);
    }
    /**
     * This can be used to set contextual values.
     * Context must be set before any children are added, since children may consult context info during construction.
     * If the key already exists, it will be overridden.
     * @param key The context key
     * @param value The context value
     */
    setContext(key, value) {
        this._constructsNode.setContext(key, value);
    }
    /**
     * Retrieves a value from tree context if present. Otherwise, would throw an error.
     *
     * Context is usually initialized at the root, but can be overridden at any point in the tree.
     *
     * @param key The context key
     * @returns The context value or throws error if there is no context value for this key
     */
    getContext(key) {
        return this._constructsNode.getContext(key);
    }
    /**
     * Retrieves a value from tree context.
     *
     * Context is usually initialized at the root, but can be overridden at any point in the tree.
     *
     * @param key The context key
     * @returns The context value or `undefined` if there is no context value for this key.
     */
    tryGetContext(key) {
        return this._constructsNode.tryGetContext(key);
    }
    /**
     * An immutable array of metadata objects associated with this construct.
     * This can be used, for example, to implement support for deprecation notices, source mapping, etc.
     */
    get metadata() {
        return this._constructsNode.metadata;
    }
    /**
     * Adds a metadata entry to this construct.
     * Entries are arbitrary values and will also include a stack trace to allow tracing back to
     * the code location for when the entry was added. It can be used, for example, to include source
     * mapping in CloudFormation templates to improve diagnostics.
     *
     * @param type a string denoting the type of metadata
     * @param data the value of the metadata (can be a Token). If null/undefined, metadata will not be added.
     * @param options options
     */
    addMetadata(type, data, options = {}) {
        this._constructsNode.addMetadata(type, data, options);
    }
    /**
     * All parent scopes of this construct.
     *
     * @returns a list of parent scopes. The last element in the list will always
     * be the current construct and the first element will be the root of the
     * tree.
     */
    get scopes() {
        return this._constructsNode.scopes;
    }
    /**
     * Returns the root of the construct tree (the `cloud.App` object).
     *
     * Similar to `app`.
     *
     * @returns The root of the construct tree.
     */
    get root() {
        if (!this._root) {
            this._root = this.findRoot(this.construct);
        }
        return this._root;
    }
    /**
     * Returns the root of the construct tree (the `cloud.App` object).
     *
     * Similar to `root`.
     *
     * @returns The root of the construct tree.
     */
    get app() {
        if (!this._app) {
            this._app = this.findApp(this.construct);
        }
        return this._app;
    }
    /**
     * Returns true if this construct or the scopes in which it is defined are
     * locked.
     */
    get locked() {
        return this._constructsNode.locked;
    }
    /**
     * Add an ordering dependency on another construct.
     *
     * An `IDependable`
     */
    addDependency(...deps) {
        this._constructsNode.addDependency(...deps);
    }
    /**
     * Return all dependencies registered on this node (non-recursive).
     */
    get dependencies() {
        return this._constructsNode.dependencies;
    }
    /**
     * Remove the child with the given name, if present.
     *
     * @returns Whether a child with the given name was deleted.
     * @experimental
     */
    tryRemoveChild(childName) {
        return this._constructsNode.tryRemoveChild(childName);
    }
    /**
     * Adds a validation to this construct.
     *
     * When `node.validate()` is called, the `validate()` method will be called on
     * all validations and all errors will be returned.
     *
     * @param validation The validation object
     */
    addValidation(validation) {
        this._constructsNode.addValidation(validation);
    }
    /**
     * Validates this construct.
     *
     * Invokes the `validate()` method on all validations added through
     * `addValidation()`.
     *
     * @returns an array of validation error messages associated with this
     * construct.
     */
    validate() {
        return this._constructsNode.validate();
    }
    /**
     * Locks this construct from allowing more children to be added. After this
     * call, no more children can be added to this construct or to any children.
     */
    lock() {
        this._constructsNode.lock();
    }
    /**
     * Returns the root app.
     */
    findApp(scope) {
        if (isApp(scope)) {
            return scope;
        }
        if (!scope.node.scope) {
            throw new Error("Cannot find root app");
        }
        return this.findApp(scope.node.scope);
    }
    findRoot(scope) {
        if (isRoot(scope)) {
            return scope;
        }
        if (!scope.node.scope) {
            throw new Error("Cannot find root construct");
        }
        return this.findRoot(scope.node.scope);
    }
}
exports.Node = Node;
_a = JSII_RTTI_SYMBOL_1;
Node[_a] = { fqn: "@winglang/sdk.std.Node", version: "0.0.0" };
function isApp(x) {
    return x && x[exports.APP_SYMBOL];
}
function isRoot(x) {
    return x && x.constructor && x.constructor[ROOT_SYMBOL];
}
//# sourceMappingURL=data:application/json;base64,