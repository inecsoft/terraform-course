import type { Construct } from "constructs";
import type { Node } from "./std/node";
export declare function eq(a: any, b: any): boolean;
export declare function neq(a: any, b: any): boolean;
export declare function assert(condition: any, message: string): asserts condition;
export declare function range(start: number, end: number, inclusive: boolean): Generator<number, void, unknown>;
export declare function nodeof(construct: Construct): Node;
export declare function normalPath(p: string): string;
export declare function unwrap<T>(value: T): T | never;
export declare function lookup(obj: any, index: string | number): any;
export declare function assign(obj: any, index: string | number, kind: "=" | "+=" | "-=", value: any): void;
export declare function createExternRequire(dirname: string): (externPath: string) => any;
export declare function resolveDirname(outdir: string, relativeSourceDir: string): string;
