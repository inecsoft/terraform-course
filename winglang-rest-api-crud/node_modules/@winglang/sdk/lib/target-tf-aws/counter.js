"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Counter = void 0;
const dynamodb_table_1 = require("../.gen/providers/aws/dynamodb-table");
const cloud = __importStar(require("../cloud"));
const core = __importStar(require("../core"));
const resource_names_1 = require("../shared/resource-names");
const shared_aws_1 = require("../shared-aws");
const commons_1 = require("../shared-aws/commons");
const permissions_1 = require("../shared-aws/permissions");
/**
 * Counter (Table) names must be between 3 and 255 characters.
 * You can use alphanumeric characters, dot (.), dash (-), and underscores (_).
 */
const NAME_OPTS = {
    maxLen: 255,
    disallowedRegex: /[^a-zA-Z0-9\_\.\-]+/g,
    prefix: "wing-counter-",
};
/**
 * AWS implementation of `cloud.Counter`.
 *
 * @inflight `@winglang/sdk.cloud.ICounterClient`
 */
class Counter extends cloud.Counter {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        this.table = new dynamodb_table_1.DynamodbTable(this, "Default", {
            name: resource_names_1.ResourceNames.generateName(this, NAME_OPTS),
            attribute: [{ name: commons_1.COUNTER_HASH_KEY, type: "S" }],
            hashKey: commons_1.COUNTER_HASH_KEY,
            billingMode: "PAY_PER_REQUEST",
        });
    }
    /** @internal */
    get _liftMap() {
        return {
            [cloud.CounterInflightMethods.INC]: [],
            [cloud.CounterInflightMethods.DEC]: [],
            [cloud.CounterInflightMethods.PEEK]: [],
            [cloud.CounterInflightMethods.SET]: [],
        };
    }
    onLift(host, ops) {
        if (!shared_aws_1.AwsInflightHost.isAwsInflightHost(host)) {
            throw new Error("Host is expected to implement `IAwsInfightHost`");
        }
        host.addPolicyStatements(...(0, permissions_1.calculateCounterPermissions)(this.table.arn, ops));
        host.addEnvironment(this.envName(), this.table.name);
        super.onLift(host, ops);
    }
    /** @internal */
    _toInflight() {
        return core.InflightClient.for(__dirname.replace("target-tf-aws", "shared-aws"), __filename, "CounterClient", [`process.env["${this.envName()}"]`, `${this.initial}`]);
    }
    envName() {
        return `DYNAMODB_TABLE_NAME_${this.node.addr.slice(-8)}`;
    }
    get dynamoTableArn() {
        return this.table.arn;
    }
    get dynamoTableName() {
        return this.table.name;
    }
}
exports.Counter = Counter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90YXJnZXQtdGYtYXdzL2NvdW50ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSx5RUFBcUU7QUFDckUsZ0RBQWtDO0FBQ2xDLDhDQUFnQztBQUNoQyw2REFBc0U7QUFDdEUsOENBQWdEO0FBQ2hELG1EQUF5RDtBQUV6RCwyREFBd0U7QUFHeEU7OztHQUdHO0FBQ0gsTUFBTSxTQUFTLEdBQWdCO0lBQzdCLE1BQU0sRUFBRSxHQUFHO0lBQ1gsZUFBZSxFQUFFLHNCQUFzQjtJQUN2QyxNQUFNLEVBQUUsZUFBZTtDQUN4QixDQUFDO0FBRUY7Ozs7R0FJRztBQUNILE1BQWEsT0FBUSxTQUFRLEtBQUssQ0FBQyxPQUFPO0lBR3hDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsUUFBNEIsRUFBRTtRQUN0RSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksOEJBQWEsQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFO1lBQzlDLElBQUksRUFBRSw4QkFBYSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDO1lBQ2pELFNBQVMsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLDBCQUFnQixFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQztZQUNsRCxPQUFPLEVBQUUsMEJBQWdCO1lBQ3pCLFdBQVcsRUFBRSxpQkFBaUI7U0FDL0IsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGdCQUFnQjtJQUNoQixJQUFXLFFBQVE7UUFDakIsT0FBTztZQUNMLENBQUMsS0FBSyxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUU7WUFDdEMsQ0FBQyxLQUFLLENBQUMsc0JBQXNCLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRTtZQUN0QyxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFO1lBQ3ZDLENBQUMsS0FBSyxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUU7U0FDdkMsQ0FBQztJQUNKLENBQUM7SUFFTSxNQUFNLENBQUMsSUFBbUIsRUFBRSxHQUFhO1FBQzlDLElBQUksQ0FBQyw0QkFBZSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDN0MsTUFBTSxJQUFJLEtBQUssQ0FBQyxpREFBaUQsQ0FBQyxDQUFDO1FBQ3JFLENBQUM7UUFFRCxJQUFJLENBQUMsbUJBQW1CLENBQ3RCLEdBQUcsSUFBQSx5Q0FBMkIsRUFBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FDcEQsQ0FBQztRQUVGLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFckQsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVELGdCQUFnQjtJQUNULFdBQVc7UUFDaEIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FDNUIsU0FBUyxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsWUFBWSxDQUFDLEVBQ2hELFVBQVUsRUFDVixlQUFlLEVBQ2YsQ0FBQyxnQkFBZ0IsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FDeEQsQ0FBQztJQUNKLENBQUM7SUFFTyxPQUFPO1FBQ2IsT0FBTyx1QkFBdUIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUMzRCxDQUFDO0lBRUQsSUFBVyxjQUFjO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7SUFDeEIsQ0FBQztJQUVELElBQVcsZUFBZTtRQUN4QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO0lBQ3pCLENBQUM7Q0FDRjtBQTNERCwwQkEyREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgRHluYW1vZGJUYWJsZSB9IGZyb20gXCIuLi8uZ2VuL3Byb3ZpZGVycy9hd3MvZHluYW1vZGItdGFibGVcIjtcbmltcG9ydCAqIGFzIGNsb3VkIGZyb20gXCIuLi9jbG91ZFwiO1xuaW1wb3J0ICogYXMgY29yZSBmcm9tIFwiLi4vY29yZVwiO1xuaW1wb3J0IHsgTmFtZU9wdGlvbnMsIFJlc291cmNlTmFtZXMgfSBmcm9tIFwiLi4vc2hhcmVkL3Jlc291cmNlLW5hbWVzXCI7XG5pbXBvcnQgeyBBd3NJbmZsaWdodEhvc3QgfSBmcm9tIFwiLi4vc2hhcmVkLWF3c1wiO1xuaW1wb3J0IHsgQ09VTlRFUl9IQVNIX0tFWSB9IGZyb20gXCIuLi9zaGFyZWQtYXdzL2NvbW1vbnNcIjtcbmltcG9ydCB7IElBd3NDb3VudGVyIH0gZnJvbSBcIi4uL3NoYXJlZC1hd3MvY291bnRlclwiO1xuaW1wb3J0IHsgY2FsY3VsYXRlQ291bnRlclBlcm1pc3Npb25zIH0gZnJvbSBcIi4uL3NoYXJlZC1hd3MvcGVybWlzc2lvbnNcIjtcbmltcG9ydCB7IElJbmZsaWdodEhvc3QgfSBmcm9tIFwiLi4vc3RkXCI7XG5cbi8qKlxuICogQ291bnRlciAoVGFibGUpIG5hbWVzIG11c3QgYmUgYmV0d2VlbiAzIGFuZCAyNTUgY2hhcmFjdGVycy5cbiAqIFlvdSBjYW4gdXNlIGFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzLCBkb3QgKC4pLCBkYXNoICgtKSwgYW5kIHVuZGVyc2NvcmVzIChfKS5cbiAqL1xuY29uc3QgTkFNRV9PUFRTOiBOYW1lT3B0aW9ucyA9IHtcbiAgbWF4TGVuOiAyNTUsXG4gIGRpc2FsbG93ZWRSZWdleDogL1teYS16QS1aMC05XFxfXFwuXFwtXSsvZyxcbiAgcHJlZml4OiBcIndpbmctY291bnRlci1cIixcbn07XG5cbi8qKlxuICogQVdTIGltcGxlbWVudGF0aW9uIG9mIGBjbG91ZC5Db3VudGVyYC5cbiAqXG4gKiBAaW5mbGlnaHQgYEB3aW5nbGFuZy9zZGsuY2xvdWQuSUNvdW50ZXJDbGllbnRgXG4gKi9cbmV4cG9ydCBjbGFzcyBDb3VudGVyIGV4dGVuZHMgY2xvdWQuQ291bnRlciBpbXBsZW1lbnRzIElBd3NDb3VudGVyIHtcbiAgcHJpdmF0ZSByZWFkb25seSB0YWJsZTogRHluYW1vZGJUYWJsZTtcblxuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogY2xvdWQuQ291bnRlclByb3BzID0ge30pIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcblxuICAgIHRoaXMudGFibGUgPSBuZXcgRHluYW1vZGJUYWJsZSh0aGlzLCBcIkRlZmF1bHRcIiwge1xuICAgICAgbmFtZTogUmVzb3VyY2VOYW1lcy5nZW5lcmF0ZU5hbWUodGhpcywgTkFNRV9PUFRTKSxcbiAgICAgIGF0dHJpYnV0ZTogW3sgbmFtZTogQ09VTlRFUl9IQVNIX0tFWSwgdHlwZTogXCJTXCIgfV0sXG4gICAgICBoYXNoS2V5OiBDT1VOVEVSX0hBU0hfS0VZLFxuICAgICAgYmlsbGluZ01vZGU6IFwiUEFZX1BFUl9SRVFVRVNUXCIsXG4gICAgfSk7XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIHB1YmxpYyBnZXQgX2xpZnRNYXAoKTogY29yZS5MaWZ0TWFwIHtcbiAgICByZXR1cm4ge1xuICAgICAgW2Nsb3VkLkNvdW50ZXJJbmZsaWdodE1ldGhvZHMuSU5DXTogW10sXG4gICAgICBbY2xvdWQuQ291bnRlckluZmxpZ2h0TWV0aG9kcy5ERUNdOiBbXSxcbiAgICAgIFtjbG91ZC5Db3VudGVySW5mbGlnaHRNZXRob2RzLlBFRUtdOiBbXSxcbiAgICAgIFtjbG91ZC5Db3VudGVySW5mbGlnaHRNZXRob2RzLlNFVF06IFtdLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMgb25MaWZ0KGhvc3Q6IElJbmZsaWdodEhvc3QsIG9wczogc3RyaW5nW10pOiB2b2lkIHtcbiAgICBpZiAoIUF3c0luZmxpZ2h0SG9zdC5pc0F3c0luZmxpZ2h0SG9zdChob3N0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSG9zdCBpcyBleHBlY3RlZCB0byBpbXBsZW1lbnQgYElBd3NJbmZpZ2h0SG9zdGBcIik7XG4gICAgfVxuXG4gICAgaG9zdC5hZGRQb2xpY3lTdGF0ZW1lbnRzKFxuICAgICAgLi4uY2FsY3VsYXRlQ291bnRlclBlcm1pc3Npb25zKHRoaXMudGFibGUuYXJuLCBvcHMpXG4gICAgKTtcblxuICAgIGhvc3QuYWRkRW52aXJvbm1lbnQodGhpcy5lbnZOYW1lKCksIHRoaXMudGFibGUubmFtZSk7XG5cbiAgICBzdXBlci5vbkxpZnQoaG9zdCwgb3BzKTtcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHVibGljIF90b0luZmxpZ2h0KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGNvcmUuSW5mbGlnaHRDbGllbnQuZm9yKFxuICAgICAgX19kaXJuYW1lLnJlcGxhY2UoXCJ0YXJnZXQtdGYtYXdzXCIsIFwic2hhcmVkLWF3c1wiKSxcbiAgICAgIF9fZmlsZW5hbWUsXG4gICAgICBcIkNvdW50ZXJDbGllbnRcIixcbiAgICAgIFtgcHJvY2Vzcy5lbnZbXCIke3RoaXMuZW52TmFtZSgpfVwiXWAsIGAke3RoaXMuaW5pdGlhbH1gXVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGVudk5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYERZTkFNT0RCX1RBQkxFX05BTUVfJHt0aGlzLm5vZGUuYWRkci5zbGljZSgtOCl9YDtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgZHluYW1vVGFibGVBcm4oKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy50YWJsZS5hcm47XG4gIH1cblxuICBwdWJsaWMgZ2V0IGR5bmFtb1RhYmxlTmFtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnRhYmxlLm5hbWU7XG4gIH1cbn1cbiJdfQ==