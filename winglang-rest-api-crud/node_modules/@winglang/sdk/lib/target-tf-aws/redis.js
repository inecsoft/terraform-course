"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Redis = void 0;
const app_1 = require("./app");
const elasticache_cluster_1 = require("../.gen/providers/aws/elasticache-cluster");
const elasticache_subnet_group_1 = require("../.gen/providers/aws/elasticache-subnet-group");
const security_group_1 = require("../.gen/providers/aws/security-group");
const core = __importStar(require("../core"));
const ex = __importStar(require("../ex"));
const resource_names_1 = require("../shared/resource-names");
const shared_aws_1 = require("../shared-aws");
const ELASTICACHE_NAME_OPTS = {
    maxLen: 50,
    disallowedRegex: /([^a-zA-Z0-9]+)/g,
    case: resource_names_1.CaseConventions.LOWERCASE,
};
class Redis extends ex.Redis {
    constructor(scope, id) {
        super(scope, id);
        if (process.env.REDIS_ENGINE_VERSION &&
            !process.env.REDIS_PARAMETER_GROUP_NAME) {
            throw new Error("REDIS_PARAMETER_GROUP_NAME must be set if REDIS_ENGINE_VERSION is set");
        }
        const engine = "redis";
        const engineVersion = process.env.REDIS_ENGINE_VERSION ?? "6.2";
        const nodeType = process.env.REDIS_CLUSTER_NODE_TYPE ?? "cache.t4g.small";
        const parameterGroupName = process.env.REDIS_PARAMETER_GROUP_NAME ?? "default.redis6.x";
        const REDIS_PORT = 6379;
        const app = app_1.App.of(this);
        const vpc = app.vpc;
        this.subnets = app.subnets.private;
        this.securityGroups = [];
        const clusterName = resource_names_1.ResourceNames.generateName(this, ELASTICACHE_NAME_OPTS);
        for (const subnet of this.subnets) {
            this.securityGroups.push(new security_group_1.SecurityGroup(this, `${subnet.id.slice(-8)}securityGroup`, {
                vpcId: vpc.id,
                name: `${this.node.addr.slice(-8)}-securityGroup`,
                ingress: [
                    {
                        cidrBlocks: [subnet.cidrBlock],
                        fromPort: REDIS_PORT,
                        toPort: REDIS_PORT,
                        protocol: "tcp",
                        selfAttribute: true,
                    },
                ],
                egress: [
                    {
                        cidrBlocks: ["0.0.0.0/0"],
                        fromPort: 0,
                        toPort: 0,
                        protocol: "-1",
                    },
                ],
            }));
        }
        const subnetGroup = new elasticache_subnet_group_1.ElasticacheSubnetGroup(this, "RedisSubnetGroup", {
            name: `${clusterName}-subnetGroup`,
            subnetIds: [...this.subnets.map((s) => s.id)],
        });
        const cluster = new elasticache_cluster_1.ElasticacheCluster(this, "RedisCluster", {
            clusterId: clusterName,
            engine,
            engineVersion,
            nodeType,
            parameterGroupName,
            availabilityZone: this.subnets[0].availabilityZone,
            subnetGroupName: subnetGroup.name,
            securityGroupIds: [...this.securityGroups.map((s) => s.id)],
            numCacheNodes: 1, // This number will always be 1 for Redis
        });
        this.clusterId = cluster.clusterId;
        this.clusterArn = cluster.arn;
    }
    /** @internal */
    get _liftMap() {
        return {
            [ex.RedisInflightMethods.URL]: [],
            [ex.RedisInflightMethods.SET]: [],
            [ex.RedisInflightMethods.GET]: [],
            [ex.RedisInflightMethods.HSET]: [],
            [ex.RedisInflightMethods.HGET]: [],
            [ex.RedisInflightMethods.SADD]: [],
            [ex.RedisInflightMethods.SMEMBERS]: [],
            [ex.RedisInflightMethods.DEL]: [],
        };
    }
    onLift(host, ops) {
        const env = this.envName();
        if (!shared_aws_1.AwsInflightHost.isAwsInflightHost(host)) {
            throw new Error("Host is expected to implement `IAwsInfightHost`");
        }
        // Ops do not matter here since the client connects directly to the cluster.
        // The only thing that we need to use AWS API for is to get the cluster endpoint
        // from the cluster ID.
        host.addPolicyStatements({
            actions: ["elasticache:Describe*"],
            resources: [this.clusterArn],
        });
        host.addEnvironment(env, this.clusterId);
        host.addNetwork({
            securityGroupIds: [...this.securityGroups.map((s) => s.id)],
            subnetIds: [...this.subnets.map((s) => s.id)],
        });
        super.onLift(host, ops);
    }
    /** @internal */
    _toInflight() {
        return core.InflightClient.for(__dirname, __filename, "RedisClient", [
            `process.env["${this.envName()}"]`,
        ]);
    }
    envName() {
        return `REDIS_CLUSTER_ID_${this.node.addr.slice(-8)}`;
    }
}
exports.Redis = Redis;
//# sourceMappingURL=data:application/json;base64,