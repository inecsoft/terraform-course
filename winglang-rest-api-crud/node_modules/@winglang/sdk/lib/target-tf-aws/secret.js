"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Secret = void 0;
const cdktf_1 = require("cdktf");
const data_aws_secretsmanager_secret_1 = require("../.gen/providers/aws/data-aws-secretsmanager-secret");
const secretsmanager_secret_1 = require("../.gen/providers/aws/secretsmanager-secret");
const cloud = __importStar(require("../cloud"));
const core = __importStar(require("../core"));
const resource_names_1 = require("../shared/resource-names");
const shared_aws_1 = require("../shared-aws");
const permissions_1 = require("../shared-aws/permissions");
/**
 * The secret name can contain ASCII letters, numbers, and the following characters: /_+=.@-
 */
const NAME_OPTS = {
    disallowedRegex: /[^\w/+=.@-]+/g,
};
/**
 * AWS implementation of `cloud.Secret`
 *
 * @inflight `@winglang/sdk.cloud.ISecretClient`
 */
class Secret extends cloud.Secret {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        if (props.name) {
            this.secret = new data_aws_secretsmanager_secret_1.DataAwsSecretsmanagerSecret(this, "Default", {
                name: props.name,
            });
        }
        else {
            (this._name = resource_names_1.ResourceNames.generateName(this, NAME_OPTS)),
                (this.secret = new secretsmanager_secret_1.SecretsmanagerSecret(this, "Default", {
                    name: this._name,
                }));
            new cdktf_1.TerraformOutput(this, "SecretArn", {
                value: this.secret.arn,
            });
        }
    }
    /** @internal */
    get _liftMap() {
        return {
            [cloud.SecretInflightMethods.VALUE]: [],
            [cloud.SecretInflightMethods.VALUE_JSON]: [],
        };
    }
    onLift(host, ops) {
        if (!shared_aws_1.AwsInflightHost.isAwsInflightHost(host)) {
            throw new Error("Host is expected to implement `IAwsInfightHost`");
        }
        host.addPolicyStatements(...(0, permissions_1.calculateSecretPermissions)(this.secret.arn, ops));
        host.addEnvironment(this.envName(), this.secret.arn);
        super.onLift(host, ops);
    }
    /** @internal */
    _toInflight() {
        return core.InflightClient.for(__dirname.replace("target-tf-aws", "shared-aws"), __filename, "SecretClient", [`process.env["${this.envName()}"]`]);
    }
    envName() {
        return `SECRET_ARN_${this.node.addr.slice(-8)}`;
    }
}
exports.Secret = Secret;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VjcmV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RhcmdldC10Zi1hd3Mvc2VjcmV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsaUNBQXdDO0FBRXhDLHlHQUFtRztBQUNuRyx1RkFBbUY7QUFDbkYsZ0RBQWtDO0FBQ2xDLDhDQUFnQztBQUNoQyw2REFBc0U7QUFDdEUsOENBQWdEO0FBQ2hELDJEQUF1RTtBQUd2RTs7R0FFRztBQUNILE1BQU0sU0FBUyxHQUFnQjtJQUM3QixlQUFlLEVBQUUsZUFBZTtDQUNqQyxDQUFDO0FBRUY7Ozs7R0FJRztBQUNILE1BQWEsTUFBTyxTQUFRLEtBQUssQ0FBQyxNQUFNO0lBR3RDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsUUFBMkIsRUFBRTtRQUNyRSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4QixJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNmLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSw0REFBMkIsQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFO2dCQUM3RCxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7YUFDakIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQzthQUFNLENBQUM7WUFDTixDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsOEJBQWEsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO2dCQUN4RCxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSw0Q0FBb0IsQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFO29CQUN2RCxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUs7aUJBQ2pCLENBQUMsQ0FBQyxDQUFDO1lBRU4sSUFBSSx1QkFBZSxDQUFDLElBQUksRUFBRSxXQUFXLEVBQUU7Z0JBQ3JDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUc7YUFDdkIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztJQUNILENBQUM7SUFFRCxnQkFBZ0I7SUFDaEIsSUFBVyxRQUFRO1FBQ2pCLE9BQU87WUFDTCxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFO1lBQ3ZDLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLFVBQVUsQ0FBQyxFQUFFLEVBQUU7U0FDN0MsQ0FBQztJQUNKLENBQUM7SUFFTSxNQUFNLENBQUMsSUFBbUIsRUFBRSxHQUFhO1FBQzlDLElBQUksQ0FBQyw0QkFBZSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDN0MsTUFBTSxJQUFJLEtBQUssQ0FBQyxpREFBaUQsQ0FBQyxDQUFDO1FBQ3JFLENBQUM7UUFFRCxJQUFJLENBQUMsbUJBQW1CLENBQ3RCLEdBQUcsSUFBQSx3Q0FBMEIsRUFBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FDcEQsQ0FBQztRQUVGLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFckQsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVELGdCQUFnQjtJQUNULFdBQVc7UUFDaEIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FDNUIsU0FBUyxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsWUFBWSxDQUFDLEVBQ2hELFVBQVUsRUFDVixjQUFjLEVBQ2QsQ0FBQyxnQkFBZ0IsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FDckMsQ0FBQztJQUNKLENBQUM7SUFFTyxPQUFPO1FBQ2IsT0FBTyxjQUFjLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDbEQsQ0FBQztDQUNGO0FBekRELHdCQXlEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlcnJhZm9ybU91dHB1dCB9IGZyb20gXCJjZGt0ZlwiO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCB7IERhdGFBd3NTZWNyZXRzbWFuYWdlclNlY3JldCB9IGZyb20gXCIuLi8uZ2VuL3Byb3ZpZGVycy9hd3MvZGF0YS1hd3Mtc2VjcmV0c21hbmFnZXItc2VjcmV0XCI7XG5pbXBvcnQgeyBTZWNyZXRzbWFuYWdlclNlY3JldCB9IGZyb20gXCIuLi8uZ2VuL3Byb3ZpZGVycy9hd3Mvc2VjcmV0c21hbmFnZXItc2VjcmV0XCI7XG5pbXBvcnQgKiBhcyBjbG91ZCBmcm9tIFwiLi4vY2xvdWRcIjtcbmltcG9ydCAqIGFzIGNvcmUgZnJvbSBcIi4uL2NvcmVcIjtcbmltcG9ydCB7IE5hbWVPcHRpb25zLCBSZXNvdXJjZU5hbWVzIH0gZnJvbSBcIi4uL3NoYXJlZC9yZXNvdXJjZS1uYW1lc1wiO1xuaW1wb3J0IHsgQXdzSW5mbGlnaHRIb3N0IH0gZnJvbSBcIi4uL3NoYXJlZC1hd3NcIjtcbmltcG9ydCB7IGNhbGN1bGF0ZVNlY3JldFBlcm1pc3Npb25zIH0gZnJvbSBcIi4uL3NoYXJlZC1hd3MvcGVybWlzc2lvbnNcIjtcbmltcG9ydCB7IElJbmZsaWdodEhvc3QgfSBmcm9tIFwiLi4vc3RkXCI7XG5cbi8qKlxuICogVGhlIHNlY3JldCBuYW1lIGNhbiBjb250YWluIEFTQ0lJIGxldHRlcnMsIG51bWJlcnMsIGFuZCB0aGUgZm9sbG93aW5nIGNoYXJhY3RlcnM6IC9fKz0uQC1cbiAqL1xuY29uc3QgTkFNRV9PUFRTOiBOYW1lT3B0aW9ucyA9IHtcbiAgZGlzYWxsb3dlZFJlZ2V4OiAvW15cXHcvKz0uQC1dKy9nLFxufTtcblxuLyoqXG4gKiBBV1MgaW1wbGVtZW50YXRpb24gb2YgYGNsb3VkLlNlY3JldGBcbiAqXG4gKiBAaW5mbGlnaHQgYEB3aW5nbGFuZy9zZGsuY2xvdWQuSVNlY3JldENsaWVudGBcbiAqL1xuZXhwb3J0IGNsYXNzIFNlY3JldCBleHRlbmRzIGNsb3VkLlNlY3JldCB7XG4gIHByaXZhdGUgcmVhZG9ubHkgc2VjcmV0OiBEYXRhQXdzU2VjcmV0c21hbmFnZXJTZWNyZXQgfCBTZWNyZXRzbWFuYWdlclNlY3JldDtcblxuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogY2xvdWQuU2VjcmV0UHJvcHMgPSB7fSkge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xuXG4gICAgaWYgKHByb3BzLm5hbWUpIHtcbiAgICAgIHRoaXMuc2VjcmV0ID0gbmV3IERhdGFBd3NTZWNyZXRzbWFuYWdlclNlY3JldCh0aGlzLCBcIkRlZmF1bHRcIiwge1xuICAgICAgICBuYW1lOiBwcm9wcy5uYW1lLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICh0aGlzLl9uYW1lID0gUmVzb3VyY2VOYW1lcy5nZW5lcmF0ZU5hbWUodGhpcywgTkFNRV9PUFRTKSksXG4gICAgICAgICh0aGlzLnNlY3JldCA9IG5ldyBTZWNyZXRzbWFuYWdlclNlY3JldCh0aGlzLCBcIkRlZmF1bHRcIiwge1xuICAgICAgICAgIG5hbWU6IHRoaXMuX25hbWUsXG4gICAgICAgIH0pKTtcblxuICAgICAgbmV3IFRlcnJhZm9ybU91dHB1dCh0aGlzLCBcIlNlY3JldEFyblwiLCB7XG4gICAgICAgIHZhbHVlOiB0aGlzLnNlY3JldC5hcm4sXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIHB1YmxpYyBnZXQgX2xpZnRNYXAoKTogY29yZS5MaWZ0TWFwIHtcbiAgICByZXR1cm4ge1xuICAgICAgW2Nsb3VkLlNlY3JldEluZmxpZ2h0TWV0aG9kcy5WQUxVRV06IFtdLFxuICAgICAgW2Nsb3VkLlNlY3JldEluZmxpZ2h0TWV0aG9kcy5WQUxVRV9KU09OXTogW10sXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBvbkxpZnQoaG9zdDogSUluZmxpZ2h0SG9zdCwgb3BzOiBzdHJpbmdbXSk6IHZvaWQge1xuICAgIGlmICghQXdzSW5mbGlnaHRIb3N0LmlzQXdzSW5mbGlnaHRIb3N0KGhvc3QpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJIb3N0IGlzIGV4cGVjdGVkIHRvIGltcGxlbWVudCBgSUF3c0luZmlnaHRIb3N0YFwiKTtcbiAgICB9XG5cbiAgICBob3N0LmFkZFBvbGljeVN0YXRlbWVudHMoXG4gICAgICAuLi5jYWxjdWxhdGVTZWNyZXRQZXJtaXNzaW9ucyh0aGlzLnNlY3JldC5hcm4sIG9wcylcbiAgICApO1xuXG4gICAgaG9zdC5hZGRFbnZpcm9ubWVudCh0aGlzLmVudk5hbWUoKSwgdGhpcy5zZWNyZXQuYXJuKTtcblxuICAgIHN1cGVyLm9uTGlmdChob3N0LCBvcHMpO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwdWJsaWMgX3RvSW5mbGlnaHQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gY29yZS5JbmZsaWdodENsaWVudC5mb3IoXG4gICAgICBfX2Rpcm5hbWUucmVwbGFjZShcInRhcmdldC10Zi1hd3NcIiwgXCJzaGFyZWQtYXdzXCIpLFxuICAgICAgX19maWxlbmFtZSxcbiAgICAgIFwiU2VjcmV0Q2xpZW50XCIsXG4gICAgICBbYHByb2Nlc3MuZW52W1wiJHt0aGlzLmVudk5hbWUoKX1cIl1gXVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGVudk5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYFNFQ1JFVF9BUk5fJHt0aGlzLm5vZGUuYWRkci5zbGljZSgtOCl9YDtcbiAgfVxufVxuIl19