import { Construct } from "constructs";
import { LambdaPermission } from "../.gen/providers/aws/lambda-permission";
import * as cloud from "../cloud";
import * as core from "../core";
import { IAwsFunction, NetworkConfig, PolicyStatement } from "../shared-aws";
import { IInflightHost, Resource } from "../std";
/**
 * Options for granting invoke permissions to the current function
 */
export interface FunctionPermissionsOptions {
    /**
     * Used for keeping function's versioning.
     */
    readonly qualifier?: string;
}
/**
 * AWS implementation of `cloud.Function`.
 *
 * @inflight `@winglang/sdk.cloud.IFunctionClient`
 */
export declare class Function extends cloud.Function implements IAwsFunction {
    private readonly function;
    private readonly role;
    private policyStatements?;
    private subnets?;
    private vpcPermissionsAdded;
    private securityGroups?;
    /**
     * Qualified Function ARN
     * @returns Qualified ARN of the function
     */
    readonly qualifiedArn: string;
    /** Function INVOKE_ARN */
    readonly invokeArn: string;
    /** Permissions  */
    permissions: LambdaPermission;
    /** Name of the AWS Lambda function in the account/region */
    readonly name: string;
    private assetPath;
    private bundleHash;
    constructor(scope: Construct, id: string, inflight: cloud.IFunctionHandler, props?: cloud.FunctionProps);
    /** @internal */
    _preSynthesize(): void;
    /** @internal */
    get _liftMap(): core.LiftMap;
    onLift(host: IInflightHost, ops: string[]): void;
    /** @internal */
    _toInflight(): string;
    /**
     * Add VPC configurations to lambda function
     */
    addNetwork(vpcConfig: NetworkConfig): void;
    /**
     * Add a policy statement to the Lambda role.
     */
    addPolicyStatements(...statements: PolicyStatement[]): void;
    /**
     * Grants the given identity permissions to invoke this function.
     * @param principal The AWS principal to grant invoke permissions to (e.g. "s3.amazonaws.com", "events.amazonaws.com", "sns.amazonaws.com")
     */
    addPermissionToInvoke(source: Resource, principal: string, sourceArn: string, options?: FunctionPermissionsOptions): void;
    private envName;
    /**
     * Unqualified Function ARN
     * @returns Unqualified ARN of the function
     */
    get functionArn(): string;
    get functionName(): string;
    /**
     * @internal
     */
    protected _getCodeLines(handler: cloud.IFunctionHandler): string[];
}
