import { Construct } from "constructs";
import * as cloud from "../cloud";
import { IAwsApi } from "../shared-aws";
import { IInflightHost } from "../std";
/**
 * AWS Implementation of `cloud.Api`.
 */
export declare class Api extends cloud.Api implements IAwsApi {
    private readonly api;
    private readonly handlers;
    private readonly endpoint;
    constructor(scope: Construct, id: string, props?: cloud.ApiProps);
    protected get _endpoint(): cloud.Endpoint;
    /**
     * Build the http requests
     *
     * @param method http method
     * @param path path to add
     * @param inflight Inflight to handle request
     * @param props Additional props
     */
    private httpRequests;
    /**
     * Add a inflight to handle GET requests to a path.
     * @param path path to add
     * @param inflight Inflight to handle request
     * @param props Additional props
     */
    get(path: string, inflight: cloud.IApiEndpointHandler, props?: cloud.ApiGetOptions): void;
    /**
     * Add a inflight to handle POST requests to a path.
     * @param path path to add
     * @param inflight Inflight to handle request
     * @param props Additional props
     */
    post(path: string, inflight: cloud.IApiEndpointHandler, props?: cloud.ApiPostOptions): void;
    /**
     * Add a inflight to handle PUT requests to a path.
     * @param path path to add
     * @param inflight Inflight to handle request
     * @param props Additional props
     */
    put(path: string, inflight: cloud.IApiEndpointHandler, props?: cloud.ApiPutOptions): void;
    /**
     * Add a inflight to handle DELETE requests to a path.
     * @param path path to add
     * @param inflight Inflight to handle request
     * @param props Additional props
     */
    delete(path: string, inflight: cloud.IApiEndpointHandler, props?: cloud.ApiDeleteOptions): void;
    /**
     * Add a inflight to handle PATCH requests to a path.
     * @param path path to add
     * @param inflight Inflight to handle request
     * @param props Additional props
     */
    patch(path: string, inflight: cloud.IApiEndpointHandler, props?: cloud.ApiPatchOptions): void;
    /**
     * Add a inflight to handle OPTIONS requests to a path.
     * @param path path to add
     * @param inflight Inflight to handle request
     * @param props Additional props
     */
    options(path: string, inflight: cloud.IApiEndpointHandler, props?: cloud.ApiOptionsOptions): void;
    /**
     * Add a inflight to handle HEAD requests to a path.
     * @param path path to add
     * @param inflight Inflight to handle request
     * @param props Additional props
     */
    head(path: string, inflight: cloud.IApiEndpointHandler, props?: cloud.ApiHeadOptions): void;
    /**
     * Add a inflight to handle CONNECT requests to a path.
     * @param path path to add
     * @param inflight Inflight to handle request
     * @param props Additional props
     */
    connect(path: string, inflight: cloud.IApiEndpointHandler, props?: cloud.ApiConnectOptions): void;
    /**
     * Add a inflight handler to the stack
     * @param inflight Inflight to add to the API
     * @param props Endpoint props
     * @returns AWS Lambda Function
     */
    private addHandler;
    /**
     * Add an inflight handler to the stack
     * Ensures that we don't create duplicate inflight handlers.
     * @param inflight Inflight to add to the API
     * @returns Inflight handler as a AWS Lambda Function
     */
    private addInflightHandler;
    /** @internal */
    onLift(host: IInflightHost, ops: string[]): void;
    /** @internal */
    _toInflight(): string;
    private urlEnvName;
    get restApiArn(): string;
    get restApiId(): string;
    get restApiName(): string;
    get stageName(): string;
    get invokeUrl(): string;
    get deploymentId(): string;
}
