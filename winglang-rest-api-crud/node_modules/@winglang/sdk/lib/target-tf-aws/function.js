"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Function = void 0;
const cdktf_1 = require("cdktf");
const app_1 = require("./app");
const cloudwatch_log_group_1 = require("../.gen/providers/aws/cloudwatch-log-group");
const iam_role_1 = require("../.gen/providers/aws/iam-role");
const iam_role_policy_1 = require("../.gen/providers/aws/iam-role-policy");
const iam_role_policy_attachment_1 = require("../.gen/providers/aws/iam-role-policy-attachment");
const lambda_function_1 = require("../.gen/providers/aws/lambda-function");
const lambda_permission_1 = require("../.gen/providers/aws/lambda-permission");
const s3_object_1 = require("../.gen/providers/aws/s3-object");
const security_group_1 = require("../.gen/providers/aws/security-group");
const cloud = __importStar(require("../cloud"));
const core = __importStar(require("../core"));
const errors_1 = require("../core/errors");
const bundling_1 = require("../shared/bundling");
const function_1 = require("../shared/function");
const resource_names_1 = require("../shared/resource-names");
const shared_aws_1 = require("../shared-aws");
const function_util_1 = require("../shared-aws/function-util");
const duration_1 = require("../std/duration");
/**
 * Function names are limited to 64 characters.
 * You can use alphanumeric characters, hyphens (-), and underscores (_).
 */
const FUNCTION_NAME_OPTS = {
    maxLen: 64,
    disallowedRegex: /[^a-zA-Z0-9\_\-]+/g,
};
/**
 * AWS implementation of `cloud.Function`.
 *
 * @inflight `@winglang/sdk.cloud.IFunctionClient`
 */
class Function extends cloud.Function {
    constructor(scope, id, inflight, props = {}) {
        super(scope, id, inflight, props);
        this.vpcPermissionsAdded = false;
        if (props.concurrency != null) {
            throw new errors_1.NotImplementedError("Function concurrency isn't implemented yet on the current target.");
        }
        // Create unique S3 bucket for hosting Lambda code
        const app = app_1.App.of(this);
        const bucket = app.codeBucket;
        // Choose an object name so that:
        // - whenever code changes, the object name changes
        // - even if two functions have the same code, they get different names
        //   (separation of concerns)
        let bundleHashToken = cdktf_1.Lazy.stringValue({
            produce: () => {
                if (!this.bundleHash) {
                    throw new Error("bundleHash was not set");
                }
                return this.bundleHash;
            },
        });
        const objectKey = `asset.${this.node.addr}.${bundleHashToken}.zip`;
        // Upload Lambda zip file to newly created S3 bucket
        const lambdaArchive = new s3_object_1.S3Object(this, "S3Object", {
            bucket: bucket.bucket,
            key: objectKey,
            source: cdktf_1.Lazy.stringValue({
                produce: () => {
                    if (!this.assetPath) {
                        throw new Error("assetPath was not set");
                    }
                    return this.assetPath;
                },
            }),
        });
        // Create Lambda role
        this.role = new iam_role_1.IamRole(this, "IamRole", {
            assumeRolePolicy: JSON.stringify({
                Version: "2012-10-17",
                Statement: [
                    {
                        Action: "sts:AssumeRole",
                        Principal: {
                            Service: "lambda.amazonaws.com",
                        },
                        Effect: "Allow",
                    },
                ],
            }),
        });
        // Add policy to Lambda role for any custom policy statements, such as
        // those needed by bound resources
        new iam_role_policy_1.IamRolePolicy(this, "IamRolePolicy", {
            role: this.role.name,
            policy: cdktf_1.Lazy.stringValue({
                produce: () => {
                    this.policyStatements = this.policyStatements ?? [];
                    if (this.policyStatements.length !== 0) {
                        return JSON.stringify({
                            Version: "2012-10-17",
                            Statement: this.policyStatements,
                        });
                    }
                    // policy must contain at least one statement, so include a no-op statement
                    return JSON.stringify({
                        Version: "2012-10-17",
                        Statement: [
                            {
                                Effect: "Allow",
                                Action: "none:null",
                                Resource: "*",
                            },
                        ],
                    });
                },
            }),
        });
        // Add execution role for lambda to write to CloudWatch logs
        new iam_role_policy_attachment_1.IamRolePolicyAttachment(this, "IamRolePolicyAttachment", {
            policyArn: "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
            role: this.role.name,
        });
        this.name = resource_names_1.ResourceNames.generateName(this, FUNCTION_NAME_OPTS);
        // validate memory size
        if (props.memory && (props.memory < 128 || props.memory > 10240)) {
            throw new Error("Memory for AWS Lambda function should be in between 128 and 10240");
        }
        if (!props.logRetentionDays || props.logRetentionDays >= 0) {
            new cloudwatch_log_group_1.CloudwatchLogGroup(this, "CloudwatchLogGroup", {
                name: `/aws/lambda/${this.name}`,
                retentionInDays: props.logRetentionDays ?? 30,
            });
        }
        else {
            // Negative value means Infinite retention
        }
        // Create Lambda function
        this.function = new lambda_function_1.LambdaFunction(this, "Default", {
            functionName: this.name,
            s3Bucket: bucket.bucket,
            s3Key: lambdaArchive.key,
            handler: "index.handler",
            runtime: "nodejs20.x",
            role: this.role.arn,
            publish: true,
            vpcConfig: {
                subnetIds: cdktf_1.Lazy.listValue({
                    produce: () => this.subnets ? Array.from(this.subnets.values()) : [],
                }),
                securityGroupIds: cdktf_1.Lazy.listValue({
                    produce: () => this.securityGroups ? Array.from(this.securityGroups.values()) : [],
                }),
            },
            environment: {
                variables: cdktf_1.Lazy.anyValue({
                    produce: () => ({
                        ...this.env,
                        // enable source maps
                        NODE_OPTIONS: [
                            ...(this.env.NODE_OPTIONS === undefined
                                ? []
                                : this.env.NODE_OPTIONS.split(" ")),
                            "--enable-source-maps",
                        ].join(" "),
                    }),
                }),
            },
            timeout: props.timeout
                ? props.timeout.seconds
                : duration_1.Duration.fromMinutes(1).seconds,
            memorySize: props.memory ?? function_1.DEFAULT_MEMORY_SIZE,
            architectures: ["arm64"],
        });
        if (app.parameters.value("tf-aws/vpc_lambda") === true) {
            const sg = new security_group_1.SecurityGroup(this, `${id}SecurityGroup`, {
                vpcId: app.vpc.id,
                egress: [
                    {
                        cidrBlocks: ["0.0.0.0/0"],
                        fromPort: 0,
                        toPort: 0,
                        protocol: "-1",
                    },
                ],
            });
            this.addNetwork({
                subnetIds: [...app.subnets.private.map((s) => s.id)],
                securityGroupIds: [sg.id],
            });
        }
        this.qualifiedArn = this.function.qualifiedArn;
        this.invokeArn = this.function.invokeArn;
        // terraform rejects templates with zero environment variables
        this.addEnvironment("WING_FUNCTION_NAME", this.name);
    }
    /** @internal */
    _preSynthesize() {
        super._preSynthesize();
        // write the entrypoint next to the partial inflight code emitted by the compiler, so that
        // `require` resolves naturally.
        const bundle = (0, bundling_1.createBundle)(this.entrypoint, shared_aws_1.externalLibraries);
        // would prefer to create TerraformAsset in the constructor, but using a CDKTF token for
        // the "path" argument isn't supported
        const asset = new cdktf_1.TerraformAsset(this, "Asset", {
            path: bundle.directory,
            type: cdktf_1.AssetType.ARCHIVE,
        });
        this.bundleHash = bundle.hash;
        this.assetPath = asset.path;
    }
    /** @internal */
    get _liftMap() {
        return {
            [cloud.FunctionInflightMethods.INVOKE]: [[this.handler, ["handle"]]],
            [cloud.FunctionInflightMethods.INVOKE_ASYNC]: [
                [this.handler, ["handle"]],
            ],
        };
    }
    onLift(host, ops) {
        if (!shared_aws_1.AwsInflightHost.isAwsInflightHost(host)) {
            throw new Error("Host is expected to implement `IAwsInfightHost`");
        }
        if (ops.includes(cloud.FunctionInflightMethods.INVOKE) ||
            ops.includes(cloud.FunctionInflightMethods.INVOKE_ASYNC)) {
            host.addPolicyStatements({
                actions: ["lambda:InvokeFunction"],
                resources: [`${this.function.arn}`],
            });
        }
        // The function name needs to be passed through an environment variable since
        // it may not be resolved until deployment time.
        host.addEnvironment(this.envName(), this.function.arn);
        super.onLift(host, ops);
    }
    /** @internal */
    _toInflight() {
        return core.InflightClient.for(__dirname.replace("target-tf-aws", "shared-aws"), __filename, "FunctionClient", [`process.env["${this.envName()}"], "${this.node.path}"`]);
    }
    /**
     * Add VPC configurations to lambda function
     */
    addNetwork(vpcConfig) {
        if (!this.subnets || !this.securityGroups) {
            this.subnets = new Set();
            this.securityGroups = new Set();
        }
        vpcConfig.subnetIds.forEach((subnet) => this.subnets.add(subnet));
        vpcConfig.securityGroupIds.forEach((sg) => this.securityGroups.add(sg));
        if (!this.vpcPermissionsAdded) {
            this.addPolicyStatements({
                effect: shared_aws_1.Effect.ALLOW,
                actions: [
                    "ec2:CreateNetworkInterface",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DeleteNetworkInterface",
                    "ec2:DescribeSubnets",
                    "ec2:DescribeSecurityGroups",
                ],
                resources: ["*"],
            });
            this.vpcPermissionsAdded = true;
        }
    }
    /**
     * Add a policy statement to the Lambda role.
     */
    addPolicyStatements(...statements) {
        // we do lazy initialization here because addPolicyStatements() might be called through the
        // constructor chain of the Function base class which means that our constructor might not have
        // been called yet... yes, ugly.
        if (!this.policyStatements) {
            this.policyStatements = [];
        }
        for (const statement of statements) {
            this.policyStatements.push({
                Action: statement.actions,
                Resource: statement.resources,
                Effect: statement.effect ?? "Allow",
            });
        }
    }
    /**
     * Grants the given identity permissions to invoke this function.
     * @param principal The AWS principal to grant invoke permissions to (e.g. "s3.amazonaws.com", "events.amazonaws.com", "sns.amazonaws.com")
     */
    addPermissionToInvoke(source, principal, sourceArn, options = { qualifier: this.function.version }) {
        this.permissions = new lambda_permission_1.LambdaPermission(this, `InvokePermission-${source.node.addr}`, {
            functionName: this.functionName,
            action: "lambda:InvokeFunction",
            principal: principal,
            sourceArn: sourceArn,
            ...options,
        });
    }
    envName() {
        return `FUNCTION_NAME_${this.node.addr.slice(-8)}`;
    }
    /**
     * Unqualified Function ARN
     * @returns Unqualified ARN of the function
     */
    get functionArn() {
        return this.function.arn;
    }
    get functionName() {
        return this.function.functionName;
    }
    /**
     * @internal
     */
    _getCodeLines(handler) {
        return (0, function_util_1.makeAwsLambdaHandler)(handler);
    }
}
exports.Function = Function;
//# sourceMappingURL=data:application/json;base64,