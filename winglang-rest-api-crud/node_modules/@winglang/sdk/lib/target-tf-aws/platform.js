"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Platform = void 0;
const app_1 = require("./app");
/**
 * AWS Terraform Platform
 */
class Platform {
    constructor() {
        /** Platform model */
        this.target = "tf-aws";
        this.parameters = {
            $id: "tf-aws-parameters",
            type: "object",
            properties: {
                "tf-aws": {
                    type: "object",
                    properties: {
                        vpc: {
                            type: "string",
                            description: "Determine whether to create a new VPC or use an existing one",
                            enum: ["new", "existing"],
                        },
                        vpc_id: {
                            description: "If using an existing VPC, provide the VPC ID",
                            type: "string",
                        },
                        private_subnet_ids: {
                            description: "If using an existing VPC, provide the private subnet ID",
                            type: "array",
                            items: {
                                type: "string",
                            },
                        },
                        public_subnet_ids: {
                            description: "If using an existing VPC, provide the public subnet ID",
                            type: "array",
                            items: {
                                type: "string",
                            },
                        },
                        vpc_api_gateway: {
                            description: "Whether Api gateways should be deployed in a VPC",
                            type: "boolean",
                        },
                        vpc_lambda: {
                            description: "Whether Lambda functions should be deployed in a VPC",
                            type: "boolean",
                        },
                    },
                    allOf: [
                        {
                            $comment: "if vpc is existing, then we need to require the vpc_id, private_subnet_ids",
                            if: { properties: { vpc: { const: "existing" } } },
                            then: {
                                required: ["vpc_id", "private_subnet_ids"],
                            },
                        },
                    ],
                },
            },
        };
    }
    newApp(appProps) {
        return new app_1.App(appProps);
    }
    async storeSecrets(secrets) {
        const { SecretsManagerClient, GetSecretValueCommand, CreateSecretCommand, UpdateSecretCommand, } = await Promise.resolve().then(() => __importStar(require("@aws-sdk/client-secrets-manager")));
        console.log("Storing secrets in AWS Secrets Manager");
        const client = new SecretsManagerClient({});
        for (const [name, value] of Object.entries(secrets)) {
            try {
                // Attempt to retrieve the secret to check if it exists
                await client.send(new GetSecretValueCommand({ SecretId: name }));
                console.log(`Secret ${name} exists, updating it.`);
                await client.send(new UpdateSecretCommand({
                    SecretId: name,
                    SecretString: value,
                }));
            }
            catch (error) {
                if (error.name === "ResourceNotFoundException") {
                    // If the secret does not exist, create it
                    console.log(`Secret ${name} does not exist, creating it.`);
                    await client.send(new CreateSecretCommand({
                        Name: name,
                        SecretString: value,
                    }));
                }
                else {
                    console.error(`Failed to store secret ${name}:`, error);
                    throw error;
                }
            }
        }
        console.log(`${Object.keys(secrets).length} secret(s) stored AWS Secrets Manager`);
    }
}
exports.Platform = Platform;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxhdGZvcm0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGFyZ2V0LXRmLWF3cy9wbGF0Zm9ybS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLCtCQUE0QjtBQUc1Qjs7R0FFRztBQUNILE1BQWEsUUFBUTtJQUFyQjtRQUNFLHFCQUFxQjtRQUNMLFdBQU0sR0FBRyxRQUFRLENBQUM7UUFFbEIsZUFBVSxHQUFHO1lBQzNCLEdBQUcsRUFBRSxtQkFBbUI7WUFDeEIsSUFBSSxFQUFFLFFBQVE7WUFDZCxVQUFVLEVBQUU7Z0JBQ1YsUUFBUSxFQUFFO29CQUNSLElBQUksRUFBRSxRQUFRO29CQUNkLFVBQVUsRUFBRTt3QkFDVixHQUFHLEVBQUU7NEJBQ0gsSUFBSSxFQUFFLFFBQVE7NEJBQ2QsV0FBVyxFQUNULDhEQUE4RDs0QkFDaEUsSUFBSSxFQUFFLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQzt5QkFDMUI7d0JBQ0QsTUFBTSxFQUFFOzRCQUNOLFdBQVcsRUFBRSw4Q0FBOEM7NEJBQzNELElBQUksRUFBRSxRQUFRO3lCQUNmO3dCQUNELGtCQUFrQixFQUFFOzRCQUNsQixXQUFXLEVBQ1QseURBQXlEOzRCQUMzRCxJQUFJLEVBQUUsT0FBTzs0QkFDYixLQUFLLEVBQUU7Z0NBQ0wsSUFBSSxFQUFFLFFBQVE7NkJBQ2Y7eUJBQ0Y7d0JBQ0QsaUJBQWlCLEVBQUU7NEJBQ2pCLFdBQVcsRUFDVCx3REFBd0Q7NEJBQzFELElBQUksRUFBRSxPQUFPOzRCQUNiLEtBQUssRUFBRTtnQ0FDTCxJQUFJLEVBQUUsUUFBUTs2QkFDZjt5QkFDRjt3QkFDRCxlQUFlLEVBQUU7NEJBQ2YsV0FBVyxFQUFFLGtEQUFrRDs0QkFDL0QsSUFBSSxFQUFFLFNBQVM7eUJBQ2hCO3dCQUNELFVBQVUsRUFBRTs0QkFDVixXQUFXLEVBQUUsc0RBQXNEOzRCQUNuRSxJQUFJLEVBQUUsU0FBUzt5QkFDaEI7cUJBQ0Y7b0JBQ0QsS0FBSyxFQUFFO3dCQUNMOzRCQUNFLFFBQVEsRUFDTiw0RUFBNEU7NEJBQzlFLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFOzRCQUNsRCxJQUFJLEVBQUU7Z0NBQ0osUUFBUSxFQUFFLENBQUMsUUFBUSxFQUFFLG9CQUFvQixDQUFDOzZCQUMzQzt5QkFDRjtxQkFDRjtpQkFDRjthQUNGO1NBQ0YsQ0FBQztJQWlESixDQUFDO0lBL0NRLE1BQU0sQ0FBRSxRQUFhO1FBQzFCLE9BQU8sSUFBSSxTQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVNLEtBQUssQ0FBQyxZQUFZLENBQUMsT0FBK0I7UUFDdkQsTUFBTSxFQUNKLG9CQUFvQixFQUNwQixxQkFBcUIsRUFDckIsbUJBQW1CLEVBQ25CLG1CQUFtQixHQUNwQixHQUFHLHdEQUFhLGlDQUFpQyxHQUFDLENBQUM7UUFFcEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO1FBQ3RELE1BQU0sTUFBTSxHQUFHLElBQUksb0JBQW9CLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFNUMsS0FBSyxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUNwRCxJQUFJLENBQUM7Z0JBQ0gsdURBQXVEO2dCQUN2RCxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxxQkFBcUIsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ2pFLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxJQUFJLHVCQUF1QixDQUFDLENBQUM7Z0JBQ25ELE1BQU0sTUFBTSxDQUFDLElBQUksQ0FDZixJQUFJLG1CQUFtQixDQUFDO29CQUN0QixRQUFRLEVBQUUsSUFBSTtvQkFDZCxZQUFZLEVBQUUsS0FBSztpQkFDcEIsQ0FBQyxDQUNILENBQUM7WUFDSixDQUFDO1lBQUMsT0FBTyxLQUFVLEVBQUUsQ0FBQztnQkFDcEIsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLDJCQUEyQixFQUFFLENBQUM7b0JBQy9DLDBDQUEwQztvQkFDMUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUksK0JBQStCLENBQUMsQ0FBQztvQkFDM0QsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUNmLElBQUksbUJBQW1CLENBQUM7d0JBQ3RCLElBQUksRUFBRSxJQUFJO3dCQUNWLFlBQVksRUFBRSxLQUFLO3FCQUNwQixDQUFDLENBQ0gsQ0FBQztnQkFDSixDQUFDO3FCQUFNLENBQUM7b0JBQ04sT0FBTyxDQUFDLEtBQUssQ0FBQywwQkFBMEIsSUFBSSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7b0JBQ3hELE1BQU0sS0FBSyxDQUFDO2dCQUNkLENBQUM7WUFDSCxDQUFDO1FBQ0gsQ0FBQztRQUVELE9BQU8sQ0FBQyxHQUFHLENBQ1QsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sdUNBQXVDLENBQ3RFLENBQUM7SUFDSixDQUFDO0NBQ0Y7QUEzR0QsNEJBMkdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4vYXBwXCI7XG5pbXBvcnQgeyBJUGxhdGZvcm0gfSBmcm9tIFwiLi4vcGxhdGZvcm1cIjtcblxuLyoqXG4gKiBBV1MgVGVycmFmb3JtIFBsYXRmb3JtXG4gKi9cbmV4cG9ydCBjbGFzcyBQbGF0Zm9ybSBpbXBsZW1lbnRzIElQbGF0Zm9ybSB7XG4gIC8qKiBQbGF0Zm9ybSBtb2RlbCAqL1xuICBwdWJsaWMgcmVhZG9ubHkgdGFyZ2V0ID0gXCJ0Zi1hd3NcIjtcblxuICBwdWJsaWMgcmVhZG9ubHkgcGFyYW1ldGVycyA9IHtcbiAgICAkaWQ6IFwidGYtYXdzLXBhcmFtZXRlcnNcIixcbiAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgIFwidGYtYXdzXCI6IHtcbiAgICAgICAgdHlwZTogXCJvYmplY3RcIixcbiAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgIHZwYzoge1xuICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICBcIkRldGVybWluZSB3aGV0aGVyIHRvIGNyZWF0ZSBhIG5ldyBWUEMgb3IgdXNlIGFuIGV4aXN0aW5nIG9uZVwiLFxuICAgICAgICAgICAgZW51bTogW1wibmV3XCIsIFwiZXhpc3RpbmdcIl0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICB2cGNfaWQ6IHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIklmIHVzaW5nIGFuIGV4aXN0aW5nIFZQQywgcHJvdmlkZSB0aGUgVlBDIElEXCIsXG4gICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgcHJpdmF0ZV9zdWJuZXRfaWRzOiB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgXCJJZiB1c2luZyBhbiBleGlzdGluZyBWUEMsIHByb3ZpZGUgdGhlIHByaXZhdGUgc3VibmV0IElEXCIsXG4gICAgICAgICAgICB0eXBlOiBcImFycmF5XCIsXG4gICAgICAgICAgICBpdGVtczoge1xuICAgICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHB1YmxpY19zdWJuZXRfaWRzOiB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgXCJJZiB1c2luZyBhbiBleGlzdGluZyBWUEMsIHByb3ZpZGUgdGhlIHB1YmxpYyBzdWJuZXQgSURcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYXJyYXlcIixcbiAgICAgICAgICAgIGl0ZW1zOiB7XG4gICAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgdnBjX2FwaV9nYXRld2F5OiB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJXaGV0aGVyIEFwaSBnYXRld2F5cyBzaG91bGQgYmUgZGVwbG95ZWQgaW4gYSBWUENcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYm9vbGVhblwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgdnBjX2xhbWJkYToge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiV2hldGhlciBMYW1iZGEgZnVuY3Rpb25zIHNob3VsZCBiZSBkZXBsb3llZCBpbiBhIFZQQ1wiLFxuICAgICAgICAgICAgdHlwZTogXCJib29sZWFuXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgYWxsT2Y6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICAkY29tbWVudDpcbiAgICAgICAgICAgICAgXCJpZiB2cGMgaXMgZXhpc3RpbmcsIHRoZW4gd2UgbmVlZCB0byByZXF1aXJlIHRoZSB2cGNfaWQsIHByaXZhdGVfc3VibmV0X2lkc1wiLFxuICAgICAgICAgICAgaWY6IHsgcHJvcGVydGllczogeyB2cGM6IHsgY29uc3Q6IFwiZXhpc3RpbmdcIiB9IH0gfSxcbiAgICAgICAgICAgIHRoZW46IHtcbiAgICAgICAgICAgICAgcmVxdWlyZWQ6IFtcInZwY19pZFwiLCBcInByaXZhdGVfc3VibmV0X2lkc1wiXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcblxuICBwdWJsaWMgbmV3QXBwPyhhcHBQcm9wczogYW55KTogYW55IHtcbiAgICByZXR1cm4gbmV3IEFwcChhcHBQcm9wcyk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgc3RvcmVTZWNyZXRzKHNlY3JldHM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCB7XG4gICAgICBTZWNyZXRzTWFuYWdlckNsaWVudCxcbiAgICAgIEdldFNlY3JldFZhbHVlQ29tbWFuZCxcbiAgICAgIENyZWF0ZVNlY3JldENvbW1hbmQsXG4gICAgICBVcGRhdGVTZWNyZXRDb21tYW5kLFxuICAgIH0gPSBhd2FpdCBpbXBvcnQoXCJAYXdzLXNkay9jbGllbnQtc2VjcmV0cy1tYW5hZ2VyXCIpO1xuXG4gICAgY29uc29sZS5sb2coXCJTdG9yaW5nIHNlY3JldHMgaW4gQVdTIFNlY3JldHMgTWFuYWdlclwiKTtcbiAgICBjb25zdCBjbGllbnQgPSBuZXcgU2VjcmV0c01hbmFnZXJDbGllbnQoe30pO1xuXG4gICAgZm9yIChjb25zdCBbbmFtZSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHNlY3JldHMpKSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBBdHRlbXB0IHRvIHJldHJpZXZlIHRoZSBzZWNyZXQgdG8gY2hlY2sgaWYgaXQgZXhpc3RzXG4gICAgICAgIGF3YWl0IGNsaWVudC5zZW5kKG5ldyBHZXRTZWNyZXRWYWx1ZUNvbW1hbmQoeyBTZWNyZXRJZDogbmFtZSB9KSk7XG4gICAgICAgIGNvbnNvbGUubG9nKGBTZWNyZXQgJHtuYW1lfSBleGlzdHMsIHVwZGF0aW5nIGl0LmApO1xuICAgICAgICBhd2FpdCBjbGllbnQuc2VuZChcbiAgICAgICAgICBuZXcgVXBkYXRlU2VjcmV0Q29tbWFuZCh7XG4gICAgICAgICAgICBTZWNyZXRJZDogbmFtZSxcbiAgICAgICAgICAgIFNlY3JldFN0cmluZzogdmFsdWUsXG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgICAgaWYgKGVycm9yLm5hbWUgPT09IFwiUmVzb3VyY2VOb3RGb3VuZEV4Y2VwdGlvblwiKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIHNlY3JldCBkb2VzIG5vdCBleGlzdCwgY3JlYXRlIGl0XG4gICAgICAgICAgY29uc29sZS5sb2coYFNlY3JldCAke25hbWV9IGRvZXMgbm90IGV4aXN0LCBjcmVhdGluZyBpdC5gKTtcbiAgICAgICAgICBhd2FpdCBjbGllbnQuc2VuZChcbiAgICAgICAgICAgIG5ldyBDcmVhdGVTZWNyZXRDb21tYW5kKHtcbiAgICAgICAgICAgICAgTmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgU2VjcmV0U3RyaW5nOiB2YWx1ZSxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gc3RvcmUgc2VjcmV0ICR7bmFtZX06YCwgZXJyb3IpO1xuICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc29sZS5sb2coXG4gICAgICBgJHtPYmplY3Qua2V5cyhzZWNyZXRzKS5sZW5ndGh9IHNlY3JldChzKSBzdG9yZWQgQVdTIFNlY3JldHMgTWFuYWdlcmBcbiAgICApO1xuICB9XG59XG4iXX0=