"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Schedule = void 0;
const app_1 = require("./app");
const function_1 = require("./function");
const cloudwatch_event_rule_1 = require("../.gen/providers/aws/cloudwatch-event-rule");
const cloudwatch_event_target_1 = require("../.gen/providers/aws/cloudwatch-event-target");
const cloud = __importStar(require("../cloud"));
const core = __importStar(require("../core"));
const schedule_1 = require("../shared-aws/schedule");
const std_1 = require("../std");
/**
 * AWS implementation of `cloud.Schedule`.
 *
 * @inflight `@winglang/sdk.cloud.IScheduleClient`
 */
class Schedule extends cloud.Schedule {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        this.handlers = {};
        const { rate, cron } = props;
        this.scheduleExpression = rate
            ? rate.minutes === 1
                ? `rate(${rate.minutes} minute)`
                : `rate(${rate.minutes} minutes)`
            : `cron(${(0, schedule_1.convertUnixCronToAWSCron)(cron)})`;
        this.rule = new cloudwatch_event_rule_1.CloudwatchEventRule(this, "Schedule", {
            scheduleExpression: this.scheduleExpression,
        });
    }
    onTick(inflight, props = {}) {
        const functionHandler = schedule_1.ScheduleOnTickHandler.toFunctionHandler(inflight);
        let fn = this.handlers[inflight._id];
        if (fn) {
            return fn;
        }
        fn = new function_1.Function(this, app_1.App.of(this).makeId(this, "OnTick"), functionHandler, props);
        this.handlers[inflight._id] = fn;
        // TODO: remove this constraint by adding generic permission APIs to cloud.Function
        if (!(fn instanceof function_1.Function)) {
            throw new Error("Schedule only supports creating tfaws.Function right now");
        }
        fn.addPermissionToInvoke(this, "events.amazonaws.com", this.rule.arn);
        new cloudwatch_event_target_1.CloudwatchEventTarget(this, app_1.App.of(this).makeId(this, "ScheduleTarget"), {
            arn: fn.qualifiedArn,
            rule: this.rule.name,
        });
        std_1.Node.of(this).addConnection({
            source: this,
            sourceOp: cloud.ScheduleInflightMethods.TICK,
            target: fn,
            targetOp: cloud.FunctionInflightMethods.INVOKE,
            name: "onTick()",
        });
        return fn;
    }
    /** @internal */
    _toInflight() {
        return core.InflightClient.for(__dirname.replace("target-tf-aws", "shared-aws"), __filename, "ScheduleClient", [`process.env["${this.envName()}"]`]);
    }
    envName() {
        return `SCHEDULE_EVENT_${this.node.addr.slice(-8)}`;
    }
}
exports.Schedule = Schedule;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZWR1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGFyZ2V0LXRmLWF3cy9zY2hlZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBLCtCQUE0QjtBQUM1Qix5Q0FBc0M7QUFDdEMsdUZBQWtGO0FBQ2xGLDJGQUFzRjtBQUN0RixnREFBa0M7QUFDbEMsOENBQWdDO0FBQ2hDLHFEQUdnQztBQUNoQyxnQ0FBOEI7QUFFOUI7Ozs7R0FJRztBQUNILE1BQWEsUUFBUyxTQUFRLEtBQUssQ0FBQyxRQUFRO0lBSzFDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsUUFBNkIsRUFBRTtRQUN2RSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUhULGFBQVEsR0FBNkIsRUFBRSxDQUFDO1FBS3ZELE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDO1FBRTdCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJO1lBQzVCLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLENBQUM7Z0JBQ2xCLENBQUMsQ0FBQyxRQUFRLElBQUksQ0FBQyxPQUFPLFVBQVU7Z0JBQ2hDLENBQUMsQ0FBQyxRQUFRLElBQUksQ0FBQyxPQUFPLFdBQVc7WUFDbkMsQ0FBQyxDQUFDLFFBQVEsSUFBQSxtQ0FBd0IsRUFBQyxJQUFLLENBQUMsR0FBRyxDQUFDO1FBRS9DLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSwyQ0FBbUIsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFO1lBQ3BELGtCQUFrQixFQUFFLElBQUksQ0FBQyxrQkFBa0I7U0FDNUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVNLE1BQU0sQ0FDWCxRQUFzQyxFQUN0QyxRQUFxQyxFQUFFO1FBRXZDLE1BQU0sZUFBZSxHQUFHLGdDQUFxQixDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3JDLElBQUksRUFBRSxFQUFFLENBQUM7WUFDUCxPQUFPLEVBQUUsQ0FBQztRQUNaLENBQUM7UUFFRCxFQUFFLEdBQUcsSUFBSSxtQkFBUSxDQUNmLElBQUksRUFDSixTQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLEVBQ25DLGVBQWUsRUFDZixLQUFLLENBQ04sQ0FBQztRQUNGLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUVqQyxtRkFBbUY7UUFDbkYsSUFBSSxDQUFDLENBQUMsRUFBRSxZQUFZLG1CQUFRLENBQUMsRUFBRSxDQUFDO1lBQzlCLE1BQU0sSUFBSSxLQUFLLENBQ2IsMERBQTBELENBQzNELENBQUM7UUFDSixDQUFDO1FBRUQsRUFBRSxDQUFDLHFCQUFxQixDQUFDLElBQUksRUFBRSxzQkFBc0IsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXRFLElBQUksK0NBQXFCLENBQ3ZCLElBQUksRUFDSixTQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLENBQUMsRUFDM0M7WUFDRSxHQUFHLEVBQUUsRUFBRSxDQUFDLFlBQVk7WUFDcEIsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSTtTQUNyQixDQUNGLENBQUM7UUFFRixVQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLGFBQWEsQ0FBQztZQUMxQixNQUFNLEVBQUUsSUFBSTtZQUNaLFFBQVEsRUFBRSxLQUFLLENBQUMsdUJBQXVCLENBQUMsSUFBSTtZQUM1QyxNQUFNLEVBQUUsRUFBRTtZQUNWLFFBQVEsRUFBRSxLQUFLLENBQUMsdUJBQXVCLENBQUMsTUFBTTtZQUM5QyxJQUFJLEVBQUUsVUFBVTtTQUNqQixDQUFDLENBQUM7UUFFSCxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFRCxnQkFBZ0I7SUFDVCxXQUFXO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQzVCLFNBQVMsQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFLFlBQVksQ0FBQyxFQUNoRCxVQUFVLEVBQ1YsZ0JBQWdCLEVBQ2hCLENBQUMsZ0JBQWdCLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQ3JDLENBQUM7SUFDSixDQUFDO0lBRU8sT0FBTztRQUNiLE9BQU8sa0JBQWtCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDdEQsQ0FBQztDQUNGO0FBakZELDRCQWlGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgeyBBcHAgfSBmcm9tIFwiLi9hcHBcIjtcbmltcG9ydCB7IEZ1bmN0aW9uIH0gZnJvbSBcIi4vZnVuY3Rpb25cIjtcbmltcG9ydCB7IENsb3Vkd2F0Y2hFdmVudFJ1bGUgfSBmcm9tIFwiLi4vLmdlbi9wcm92aWRlcnMvYXdzL2Nsb3Vkd2F0Y2gtZXZlbnQtcnVsZVwiO1xuaW1wb3J0IHsgQ2xvdWR3YXRjaEV2ZW50VGFyZ2V0IH0gZnJvbSBcIi4uLy5nZW4vcHJvdmlkZXJzL2F3cy9jbG91ZHdhdGNoLWV2ZW50LXRhcmdldFwiO1xuaW1wb3J0ICogYXMgY2xvdWQgZnJvbSBcIi4uL2Nsb3VkXCI7XG5pbXBvcnQgKiBhcyBjb3JlIGZyb20gXCIuLi9jb3JlXCI7XG5pbXBvcnQge1xuICBTY2hlZHVsZU9uVGlja0hhbmRsZXIsXG4gIGNvbnZlcnRVbml4Q3JvblRvQVdTQ3Jvbixcbn0gZnJvbSBcIi4uL3NoYXJlZC1hd3Mvc2NoZWR1bGVcIjtcbmltcG9ydCB7IE5vZGUgfSBmcm9tIFwiLi4vc3RkXCI7XG5cbi8qKlxuICogQVdTIGltcGxlbWVudGF0aW9uIG9mIGBjbG91ZC5TY2hlZHVsZWAuXG4gKlxuICogQGluZmxpZ2h0IGBAd2luZ2xhbmcvc2RrLmNsb3VkLklTY2hlZHVsZUNsaWVudGBcbiAqL1xuZXhwb3J0IGNsYXNzIFNjaGVkdWxlIGV4dGVuZHMgY2xvdWQuU2NoZWR1bGUge1xuICBwcml2YXRlIHJlYWRvbmx5IHNjaGVkdWxlRXhwcmVzc2lvbjogc3RyaW5nO1xuICBwcml2YXRlIHJlYWRvbmx5IHJ1bGU6IENsb3Vkd2F0Y2hFdmVudFJ1bGU7XG4gIHByaXZhdGUgcmVhZG9ubHkgaGFuZGxlcnM6IFJlY29yZDxzdHJpbmcsIEZ1bmN0aW9uPiA9IHt9O1xuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBjbG91ZC5TY2hlZHVsZVByb3BzID0ge30pIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcblxuICAgIGNvbnN0IHsgcmF0ZSwgY3JvbiB9ID0gcHJvcHM7XG5cbiAgICB0aGlzLnNjaGVkdWxlRXhwcmVzc2lvbiA9IHJhdGVcbiAgICAgID8gcmF0ZS5taW51dGVzID09PSAxXG4gICAgICAgID8gYHJhdGUoJHtyYXRlLm1pbnV0ZXN9IG1pbnV0ZSlgXG4gICAgICAgIDogYHJhdGUoJHtyYXRlLm1pbnV0ZXN9IG1pbnV0ZXMpYFxuICAgICAgOiBgY3Jvbigke2NvbnZlcnRVbml4Q3JvblRvQVdTQ3Jvbihjcm9uISl9KWA7XG5cbiAgICB0aGlzLnJ1bGUgPSBuZXcgQ2xvdWR3YXRjaEV2ZW50UnVsZSh0aGlzLCBcIlNjaGVkdWxlXCIsIHtcbiAgICAgIHNjaGVkdWxlRXhwcmVzc2lvbjogdGhpcy5zY2hlZHVsZUV4cHJlc3Npb24sXG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgb25UaWNrKFxuICAgIGluZmxpZ2h0OiBjbG91ZC5JU2NoZWR1bGVPblRpY2tIYW5kbGVyLFxuICAgIHByb3BzOiBjbG91ZC5TY2hlZHVsZU9uVGlja09wdGlvbnMgPSB7fVxuICApOiBjbG91ZC5GdW5jdGlvbiB7XG4gICAgY29uc3QgZnVuY3Rpb25IYW5kbGVyID0gU2NoZWR1bGVPblRpY2tIYW5kbGVyLnRvRnVuY3Rpb25IYW5kbGVyKGluZmxpZ2h0KTtcbiAgICBsZXQgZm4gPSB0aGlzLmhhbmRsZXJzW2luZmxpZ2h0Ll9pZF07XG4gICAgaWYgKGZuKSB7XG4gICAgICByZXR1cm4gZm47XG4gICAgfVxuXG4gICAgZm4gPSBuZXcgRnVuY3Rpb24oXG4gICAgICB0aGlzLFxuICAgICAgQXBwLm9mKHRoaXMpLm1ha2VJZCh0aGlzLCBcIk9uVGlja1wiKSxcbiAgICAgIGZ1bmN0aW9uSGFuZGxlcixcbiAgICAgIHByb3BzXG4gICAgKTtcbiAgICB0aGlzLmhhbmRsZXJzW2luZmxpZ2h0Ll9pZF0gPSBmbjtcblxuICAgIC8vIFRPRE86IHJlbW92ZSB0aGlzIGNvbnN0cmFpbnQgYnkgYWRkaW5nIGdlbmVyaWMgcGVybWlzc2lvbiBBUElzIHRvIGNsb3VkLkZ1bmN0aW9uXG4gICAgaWYgKCEoZm4gaW5zdGFuY2VvZiBGdW5jdGlvbikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgXCJTY2hlZHVsZSBvbmx5IHN1cHBvcnRzIGNyZWF0aW5nIHRmYXdzLkZ1bmN0aW9uIHJpZ2h0IG5vd1wiXG4gICAgICApO1xuICAgIH1cblxuICAgIGZuLmFkZFBlcm1pc3Npb25Ub0ludm9rZSh0aGlzLCBcImV2ZW50cy5hbWF6b25hd3MuY29tXCIsIHRoaXMucnVsZS5hcm4pO1xuXG4gICAgbmV3IENsb3Vkd2F0Y2hFdmVudFRhcmdldChcbiAgICAgIHRoaXMsXG4gICAgICBBcHAub2YodGhpcykubWFrZUlkKHRoaXMsIFwiU2NoZWR1bGVUYXJnZXRcIiksXG4gICAgICB7XG4gICAgICAgIGFybjogZm4ucXVhbGlmaWVkQXJuLFxuICAgICAgICBydWxlOiB0aGlzLnJ1bGUubmFtZSxcbiAgICAgIH1cbiAgICApO1xuXG4gICAgTm9kZS5vZih0aGlzKS5hZGRDb25uZWN0aW9uKHtcbiAgICAgIHNvdXJjZTogdGhpcyxcbiAgICAgIHNvdXJjZU9wOiBjbG91ZC5TY2hlZHVsZUluZmxpZ2h0TWV0aG9kcy5USUNLLFxuICAgICAgdGFyZ2V0OiBmbixcbiAgICAgIHRhcmdldE9wOiBjbG91ZC5GdW5jdGlvbkluZmxpZ2h0TWV0aG9kcy5JTlZPS0UsXG4gICAgICBuYW1lOiBcIm9uVGljaygpXCIsXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZm47XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIHB1YmxpYyBfdG9JbmZsaWdodCgpOiBzdHJpbmcge1xuICAgIHJldHVybiBjb3JlLkluZmxpZ2h0Q2xpZW50LmZvcihcbiAgICAgIF9fZGlybmFtZS5yZXBsYWNlKFwidGFyZ2V0LXRmLWF3c1wiLCBcInNoYXJlZC1hd3NcIiksXG4gICAgICBfX2ZpbGVuYW1lLFxuICAgICAgXCJTY2hlZHVsZUNsaWVudFwiLFxuICAgICAgW2Bwcm9jZXNzLmVudltcIiR7dGhpcy5lbnZOYW1lKCl9XCJdYF1cbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBlbnZOYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGBTQ0hFRFVMRV9FVkVOVF8ke3RoaXMubm9kZS5hZGRyLnNsaWNlKC04KX1gO1xuICB9XG59XG4iXX0=