"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeAwsLambdaHandler = void 0;
function makeAwsLambdaHandler(handler) {
    const inflightClient = handler._toInflight();
    const lines = new Array();
    const client = "$handler";
    lines.push('"use strict";');
    lines.push(`var ${client} = undefined;`);
    lines.push("exports.handler = async function(event, context) {");
    lines.push("  try {");
    lines.push("    if (globalThis.$awsLambdaContext === undefined) {");
    lines.push("      globalThis.$awsLambdaContext = context;");
    lines.push(`      ${client} = ${client} ?? (${inflightClient});`);
    lines.push("    } else {");
    lines.push("      throw new Error(");
    lines.push("        'An AWS Lambda context object was already defined.'");
    lines.push("      );");
    lines.push("    }");
    // important: we're calling handle() within a try block, but there's no catch block
    // because we want to let the error propagate to the AWS Lambda runtime
    lines.push(`    return await ${client}.handle(event === null ? undefined : event);`);
    lines.push("  } finally {");
    lines.push("    globalThis.$awsLambdaContext = undefined;");
    lines.push("  }");
    lines.push("};");
    return lines;
}
exports.makeAwsLambdaHandler = makeAwsLambdaHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVuY3Rpb24tdXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zaGFyZWQtYXdzL2Z1bmN0aW9uLXV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsU0FBZ0Isb0JBQW9CLENBQ2xDLE9BQStCO0lBRS9CLE1BQU0sY0FBYyxHQUFHLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUM3QyxNQUFNLEtBQUssR0FBRyxJQUFJLEtBQUssRUFBVSxDQUFDO0lBQ2xDLE1BQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQztJQUUxQixLQUFLLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQzVCLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxNQUFNLGVBQWUsQ0FBQyxDQUFDO0lBQ3pDLEtBQUssQ0FBQyxJQUFJLENBQUMsb0RBQW9ELENBQUMsQ0FBQztJQUNqRSxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3RCLEtBQUssQ0FBQyxJQUFJLENBQUMsdURBQXVELENBQUMsQ0FBQztJQUNwRSxLQUFLLENBQUMsSUFBSSxDQUFDLCtDQUErQyxDQUFDLENBQUM7SUFDNUQsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLE1BQU0sTUFBTSxNQUFNLFFBQVEsY0FBYyxJQUFJLENBQUMsQ0FBQztJQUNsRSxLQUFLLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzNCLEtBQUssQ0FBQyxJQUFJLENBQUMsd0JBQXdCLENBQUMsQ0FBQztJQUNyQyxLQUFLLENBQUMsSUFBSSxDQUFDLDZEQUE2RCxDQUFDLENBQUM7SUFDMUUsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN2QixLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRXBCLG1GQUFtRjtJQUNuRix1RUFBdUU7SUFDdkUsS0FBSyxDQUFDLElBQUksQ0FDUixvQkFBb0IsTUFBTSw4Q0FBOEMsQ0FDekUsQ0FBQztJQUNGLEtBQUssQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDNUIsS0FBSyxDQUFDLElBQUksQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO0lBQzVELEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEIsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVqQixPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUEvQkQsb0RBK0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2xvdWQgZnJvbSBcIi4uL2Nsb3VkXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlQXdzTGFtYmRhSGFuZGxlcihcbiAgaGFuZGxlcjogY2xvdWQuSUZ1bmN0aW9uSGFuZGxlclxuKTogc3RyaW5nW10ge1xuICBjb25zdCBpbmZsaWdodENsaWVudCA9IGhhbmRsZXIuX3RvSW5mbGlnaHQoKTtcbiAgY29uc3QgbGluZXMgPSBuZXcgQXJyYXk8c3RyaW5nPigpO1xuICBjb25zdCBjbGllbnQgPSBcIiRoYW5kbGVyXCI7XG5cbiAgbGluZXMucHVzaCgnXCJ1c2Ugc3RyaWN0XCI7Jyk7XG4gIGxpbmVzLnB1c2goYHZhciAke2NsaWVudH0gPSB1bmRlZmluZWQ7YCk7XG4gIGxpbmVzLnB1c2goXCJleHBvcnRzLmhhbmRsZXIgPSBhc3luYyBmdW5jdGlvbihldmVudCwgY29udGV4dCkge1wiKTtcbiAgbGluZXMucHVzaChcIiAgdHJ5IHtcIik7XG4gIGxpbmVzLnB1c2goXCIgICAgaWYgKGdsb2JhbFRoaXMuJGF3c0xhbWJkYUNvbnRleHQgPT09IHVuZGVmaW5lZCkge1wiKTtcbiAgbGluZXMucHVzaChcIiAgICAgIGdsb2JhbFRoaXMuJGF3c0xhbWJkYUNvbnRleHQgPSBjb250ZXh0O1wiKTtcbiAgbGluZXMucHVzaChgICAgICAgJHtjbGllbnR9ID0gJHtjbGllbnR9ID8/ICgke2luZmxpZ2h0Q2xpZW50fSk7YCk7XG4gIGxpbmVzLnB1c2goXCIgICAgfSBlbHNlIHtcIik7XG4gIGxpbmVzLnB1c2goXCIgICAgICB0aHJvdyBuZXcgRXJyb3IoXCIpO1xuICBsaW5lcy5wdXNoKFwiICAgICAgICAnQW4gQVdTIExhbWJkYSBjb250ZXh0IG9iamVjdCB3YXMgYWxyZWFkeSBkZWZpbmVkLidcIik7XG4gIGxpbmVzLnB1c2goXCIgICAgICApO1wiKTtcbiAgbGluZXMucHVzaChcIiAgICB9XCIpO1xuXG4gIC8vIGltcG9ydGFudDogd2UncmUgY2FsbGluZyBoYW5kbGUoKSB3aXRoaW4gYSB0cnkgYmxvY2ssIGJ1dCB0aGVyZSdzIG5vIGNhdGNoIGJsb2NrXG4gIC8vIGJlY2F1c2Ugd2Ugd2FudCB0byBsZXQgdGhlIGVycm9yIHByb3BhZ2F0ZSB0byB0aGUgQVdTIExhbWJkYSBydW50aW1lXG4gIGxpbmVzLnB1c2goXG4gICAgYCAgICByZXR1cm4gYXdhaXQgJHtjbGllbnR9LmhhbmRsZShldmVudCA9PT0gbnVsbCA/IHVuZGVmaW5lZCA6IGV2ZW50KTtgXG4gICk7XG4gIGxpbmVzLnB1c2goXCIgIH0gZmluYWxseSB7XCIpO1xuICBsaW5lcy5wdXNoKFwiICAgIGdsb2JhbFRoaXMuJGF3c0xhbWJkYUNvbnRleHQgPSB1bmRlZmluZWQ7XCIpO1xuICBsaW5lcy5wdXNoKFwiICB9XCIpO1xuICBsaW5lcy5wdXNoKFwifTtcIik7XG5cbiAgcmV0dXJuIGxpbmVzO1xufVxuIl19