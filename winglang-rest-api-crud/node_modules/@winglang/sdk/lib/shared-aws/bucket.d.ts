import { Construct } from "constructs";
import { cloud } from "..";
import { LiftMap } from "../core";
import { INFLIGHT_SYMBOL } from "../core/types";
import { IInflightHost, Resource } from "../std";
/**
 * A shared interface for AWS buckets.
 */
export interface IAwsBucket {
    /**
     * AWS Bucket arn
     */
    readonly bucketArn: string;
    /**
     * AWS Bucket name
     */
    readonly bucketName: string;
}
/**
 * A helper class for working with AWS buckets.
 */
export declare class Bucket {
    /**
     * If the bucket is an AWS Bucket, return a helper interface for
     * working with it.
     * @param bucket The cloud.Bucket.
     */
    static from(bucket: cloud.Bucket): IAwsBucket | undefined;
    private static isAwsBucket;
}
/**
 * A few inflight methods that can be used with an AWS bucket.
 */
export interface IAwsBucketClient extends cloud.IBucketClient {
    /**
     * Get the region of the bucket.
     * @inflight
     */
    bucketRegion(): Promise<string>;
}
/**
 * A reference to an external S3 bucket.
 * @inflight `@winglang/sdk.aws.IAwsBucketClient`
 */
export declare class BucketRef extends Resource {
    /** @internal */
    [INFLIGHT_SYMBOL]?: IAwsBucketClient;
    /**
     * The Name of this bucket.
     */
    readonly bucketName: string;
    /**
     * The ARN of this bucket.
     */
    readonly bucketArn: string;
    constructor(scope: Construct, id: string, bucketName: string);
    onLift(host: IInflightHost, ops: string[]): void;
    /** @internal */
    _toInflight(): string;
    private envName;
    /** @internal */
    get _liftMap(): LiftMap;
    private addUserInterface;
}
/**
 * Utility class to work with bucket event handlers.
 */
export declare class BucketEventHandler {
    /**
     * Converts a `cloud.IBucketEventHandler` to a `cloud.ITopicOnMessageHandler`.
     * @param handler the handler to convert
     * @param eventType the event type
     * @returns the on message handler.
     */
    static toTopicOnMessageHandler(handler: cloud.IBucketEventHandler, eventType: cloud.BucketEventType): cloud.ITopicOnMessageHandler;
}
