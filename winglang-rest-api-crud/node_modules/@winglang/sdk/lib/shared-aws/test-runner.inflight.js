"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestRunnerClient = void 0;
const function_inflight_1 = require("./function.inflight");
class TestRunnerClient {
    constructor(tests) {
        // Expects a JSON string of the form:
        // [
        //   ["testPath1", "functionArn1"],
        //   ["testPath2", "functionArn2"],
        //   ...
        // ]
        this.tests = new Map(JSON.parse(tests));
    }
    async listTests() {
        return Array.from(this.tests.keys());
    }
    async runTest(path) {
        let functionArn = this.tests.get(path);
        if (!functionArn) {
            throw new Error(`No test found with path "${path}"`);
        }
        const client = new function_inflight_1.FunctionClient(functionArn, path);
        let traces = [];
        let pass = false;
        let error;
        try {
            const [_, functionTraces] = await client.invokeWithLogs("");
            traces.push(...functionTraces);
            pass = true;
        }
        catch (e) {
            error = e.stack;
        }
        return {
            path,
            pass,
            error,
            traces,
        };
    }
}
exports.TestRunnerClient = TestRunnerClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC1ydW5uZXIuaW5mbGlnaHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2hhcmVkLWF3cy90ZXN0LXJ1bm5lci5pbmZsaWdodC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwyREFBcUQ7QUFHckQsTUFBYSxnQkFBZ0I7SUFJM0IsWUFBWSxLQUFhO1FBQ3ZCLHFDQUFxQztRQUNyQyxJQUFJO1FBQ0osbUNBQW1DO1FBQ25DLG1DQUFtQztRQUNuQyxRQUFRO1FBQ1IsSUFBSTtRQUNKLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQXVCLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBRU0sS0FBSyxDQUFDLFNBQVM7UUFDcEIsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRU0sS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFZO1FBQy9CLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNqQixNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixJQUFJLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZELENBQUM7UUFDRCxNQUFNLE1BQU0sR0FBRyxJQUFJLGtDQUFjLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3JELElBQUksTUFBTSxHQUFZLEVBQUUsQ0FBQztRQUN6QixJQUFJLElBQUksR0FBRyxLQUFLLENBQUM7UUFDakIsSUFBSSxLQUF5QixDQUFDO1FBRTlCLElBQUksQ0FBQztZQUNILE1BQU0sQ0FBQyxDQUFDLEVBQUUsY0FBYyxDQUFDLEdBQUcsTUFBTSxNQUFNLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzVELE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxjQUFjLENBQUMsQ0FBQztZQUMvQixJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2QsQ0FBQztRQUFDLE9BQU8sQ0FBTSxFQUFFLENBQUM7WUFDaEIsS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDbEIsQ0FBQztRQUNELE9BQU87WUFDTCxJQUFJO1lBQ0osSUFBSTtZQUNKLEtBQUs7WUFDTCxNQUFNO1NBQ1AsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQTFDRCw0Q0EwQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGdW5jdGlvbkNsaWVudCB9IGZyb20gXCIuL2Z1bmN0aW9uLmluZmxpZ2h0XCI7XG5pbXBvcnQgeyBJVGVzdFJ1bm5lckNsaWVudCwgVGVzdFJlc3VsdCwgVHJhY2UgfSBmcm9tIFwiLi4vc3RkXCI7XG5cbmV4cG9ydCBjbGFzcyBUZXN0UnVubmVyQ2xpZW50IGltcGxlbWVudHMgSVRlc3RSdW5uZXJDbGllbnQge1xuICAvLyBBIG1hcCBmcm9tIHRlc3QgbmFtZXMgdG8gdGhlaXIgY29ycmVzcG9uZGluZyBmdW5jdGlvbiBBUk5zLlxuICBwcml2YXRlIHJlYWRvbmx5IHRlc3RzOiBNYXA8c3RyaW5nLCBzdHJpbmc+O1xuXG4gIGNvbnN0cnVjdG9yKHRlc3RzOiBzdHJpbmcpIHtcbiAgICAvLyBFeHBlY3RzIGEgSlNPTiBzdHJpbmcgb2YgdGhlIGZvcm06XG4gICAgLy8gW1xuICAgIC8vICAgW1widGVzdFBhdGgxXCIsIFwiZnVuY3Rpb25Bcm4xXCJdLFxuICAgIC8vICAgW1widGVzdFBhdGgyXCIsIFwiZnVuY3Rpb25Bcm4yXCJdLFxuICAgIC8vICAgLi4uXG4gICAgLy8gXVxuICAgIHRoaXMudGVzdHMgPSBuZXcgTWFwKEpTT04ucGFyc2UodGVzdHMpIGFzIFtzdHJpbmcsIHN0cmluZ11bXSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgbGlzdFRlc3RzKCk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnRlc3RzLmtleXMoKSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgcnVuVGVzdChwYXRoOiBzdHJpbmcpOiBQcm9taXNlPFRlc3RSZXN1bHQ+IHtcbiAgICBsZXQgZnVuY3Rpb25Bcm4gPSB0aGlzLnRlc3RzLmdldChwYXRoKTtcbiAgICBpZiAoIWZ1bmN0aW9uQXJuKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIHRlc3QgZm91bmQgd2l0aCBwYXRoIFwiJHtwYXRofVwiYCk7XG4gICAgfVxuICAgIGNvbnN0IGNsaWVudCA9IG5ldyBGdW5jdGlvbkNsaWVudChmdW5jdGlvbkFybiwgcGF0aCk7XG4gICAgbGV0IHRyYWNlczogVHJhY2VbXSA9IFtdO1xuICAgIGxldCBwYXNzID0gZmFsc2U7XG4gICAgbGV0IGVycm9yOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgW18sIGZ1bmN0aW9uVHJhY2VzXSA9IGF3YWl0IGNsaWVudC5pbnZva2VXaXRoTG9ncyhcIlwiKTtcbiAgICAgIHRyYWNlcy5wdXNoKC4uLmZ1bmN0aW9uVHJhY2VzKTtcbiAgICAgIHBhc3MgPSB0cnVlO1xuICAgIH0gY2F0Y2ggKGU6IGFueSkge1xuICAgICAgZXJyb3IgPSBlLnN0YWNrO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgcGF0aCxcbiAgICAgIHBhc3MsXG4gICAgICBlcnJvcixcbiAgICAgIHRyYWNlcyxcbiAgICB9O1xuICB9XG59XG4iXX0=