"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CounterClient = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const commons_1 = require("./commons");
const AMOUNT_TOKEN = "amount";
const INITIAL_VALUE_TOKEN = "initial";
const COUNTER_ID = "counter";
const VALUE_ATTRIBUTE = "counter_value";
const SET_VALUE = "set_value";
class CounterClient {
    constructor(tableName, initial = 0, client = new client_dynamodb_1.DynamoDBClient({})) {
        this.tableName = tableName;
        this.initial = initial;
        this.client = client;
    }
    async inc(amount = 1, key = COUNTER_ID) {
        const command = new client_dynamodb_1.UpdateItemCommand({
            TableName: this.tableName,
            Key: { [commons_1.COUNTER_HASH_KEY]: { S: key } },
            UpdateExpression: `SET ${VALUE_ATTRIBUTE} = if_not_exists(${VALUE_ATTRIBUTE}, :${INITIAL_VALUE_TOKEN}) + :${AMOUNT_TOKEN}`,
            ExpressionAttributeValues: {
                [`:${AMOUNT_TOKEN}`]: { N: `${amount}` },
                [`:${INITIAL_VALUE_TOKEN}`]: { N: `${this.initial}` },
            },
            ReturnValues: "UPDATED_NEW",
        });
        const result = await this.client.send(command);
        let newValue = result.Attributes?.[VALUE_ATTRIBUTE].N;
        if (!newValue) {
            throw new Error(`${VALUE_ATTRIBUTE} attribute not found on table.`);
        }
        // return the old value
        return parseInt(newValue) - amount;
    }
    async dec(amount = 1, key = COUNTER_ID) {
        return this.inc(-1 * amount, key);
    }
    async peek(key = COUNTER_ID) {
        const command = new client_dynamodb_1.GetItemCommand({
            TableName: this.tableName,
            Key: { [commons_1.COUNTER_HASH_KEY]: { S: key } },
        });
        const result = await this.client.send(command);
        let currentValue = result.Item?.[VALUE_ATTRIBUTE].N;
        if (currentValue === undefined) {
            return this.initial;
        }
        return parseInt(currentValue);
    }
    async set(value, key = COUNTER_ID) {
        const command = new client_dynamodb_1.UpdateItemCommand({
            TableName: this.tableName,
            Key: { [commons_1.COUNTER_HASH_KEY]: { S: key } },
            UpdateExpression: `SET ${VALUE_ATTRIBUTE} = :${SET_VALUE}`,
            ExpressionAttributeValues: {
                [`:${SET_VALUE}`]: { N: `${value}` },
            },
            ReturnValues: "UPDATED_NEW",
        });
        await this.client.send(command);
        return;
    }
}
exports.CounterClient = CounterClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnRlci5pbmZsaWdodC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zaGFyZWQtYXdzL2NvdW50ZXIuaW5mbGlnaHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOERBSWtDO0FBQ2xDLHVDQUE2QztBQUc3QyxNQUFNLFlBQVksR0FBRyxRQUFRLENBQUM7QUFDOUIsTUFBTSxtQkFBbUIsR0FBRyxTQUFTLENBQUM7QUFDdEMsTUFBTSxVQUFVLEdBQUcsU0FBUyxDQUFDO0FBQzdCLE1BQU0sZUFBZSxHQUFHLGVBQWUsQ0FBQztBQUN4QyxNQUFNLFNBQVMsR0FBRyxXQUFXLENBQUM7QUFFOUIsTUFBYSxhQUFhO0lBQ3hCLFlBQ21CLFNBQWlCLEVBQ2pCLFVBQWtCLENBQUMsRUFDbkIsU0FBUyxJQUFJLGdDQUFjLENBQUMsRUFBRSxDQUFDO1FBRi9CLGNBQVMsR0FBVCxTQUFTLENBQVE7UUFDakIsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUNuQixXQUFNLEdBQU4sTUFBTSxDQUF5QjtJQUMvQyxDQUFDO0lBRUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxVQUFVO1FBQzNDLE1BQU0sT0FBTyxHQUFHLElBQUksbUNBQWlCLENBQUM7WUFDcEMsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1lBQ3pCLEdBQUcsRUFBRSxFQUFFLENBQUMsMEJBQWdCLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUN2QyxnQkFBZ0IsRUFBRSxPQUFPLGVBQWUsb0JBQW9CLGVBQWUsTUFBTSxtQkFBbUIsUUFBUSxZQUFZLEVBQUU7WUFDMUgseUJBQXlCLEVBQUU7Z0JBQ3pCLENBQUMsSUFBSSxZQUFZLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsTUFBTSxFQUFFLEVBQUU7Z0JBQ3hDLENBQUMsSUFBSSxtQkFBbUIsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUU7YUFDdEQ7WUFDRCxZQUFZLEVBQUUsYUFBYTtTQUM1QixDQUFDLENBQUM7UUFFSCxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQy9DLElBQUksUUFBUSxHQUFHLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ2QsTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLGVBQWUsZ0NBQWdDLENBQUMsQ0FBQztRQUN0RSxDQUFDO1FBRUQsdUJBQXVCO1FBQ3ZCLE9BQU8sUUFBUSxDQUFDLFFBQVEsQ0FBQyxHQUFHLE1BQU0sQ0FBQztJQUNyQyxDQUFDO0lBRU0sS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLE1BQWMsVUFBVTtRQUNuRCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFTSxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQWMsVUFBVTtRQUN4QyxNQUFNLE9BQU8sR0FBRyxJQUFJLGdDQUFjLENBQUM7WUFDakMsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1lBQ3pCLEdBQUcsRUFBRSxFQUFFLENBQUMsMEJBQWdCLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRTtTQUN4QyxDQUFDLENBQUM7UUFFSCxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQy9DLElBQUksWUFBWSxHQUFHLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEQsSUFBSSxZQUFZLEtBQUssU0FBUyxFQUFFLENBQUM7WUFDL0IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3RCLENBQUM7UUFFRCxPQUFPLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRU0sS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFhLEVBQUUsTUFBYyxVQUFVO1FBQ3RELE1BQU0sT0FBTyxHQUFHLElBQUksbUNBQWlCLENBQUM7WUFDcEMsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1lBQ3pCLEdBQUcsRUFBRSxFQUFFLENBQUMsMEJBQWdCLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUN2QyxnQkFBZ0IsRUFBRSxPQUFPLGVBQWUsT0FBTyxTQUFTLEVBQUU7WUFDMUQseUJBQXlCLEVBQUU7Z0JBQ3pCLENBQUMsSUFBSSxTQUFTLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsS0FBSyxFQUFFLEVBQUU7YUFDckM7WUFDRCxZQUFZLEVBQUUsYUFBYTtTQUM1QixDQUFDLENBQUM7UUFFSCxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRWhDLE9BQU87SUFDVCxDQUFDO0NBQ0Y7QUEvREQsc0NBK0RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgVXBkYXRlSXRlbUNvbW1hbmQsXG4gIEdldEl0ZW1Db21tYW5kLFxuICBEeW5hbW9EQkNsaWVudCxcbn0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1keW5hbW9kYlwiO1xuaW1wb3J0IHsgQ09VTlRFUl9IQVNIX0tFWSB9IGZyb20gXCIuL2NvbW1vbnNcIjtcbmltcG9ydCB0eXBlIHsgSUNvdW50ZXJDbGllbnQgfSBmcm9tIFwiLi4vY2xvdWRcIjtcblxuY29uc3QgQU1PVU5UX1RPS0VOID0gXCJhbW91bnRcIjtcbmNvbnN0IElOSVRJQUxfVkFMVUVfVE9LRU4gPSBcImluaXRpYWxcIjtcbmNvbnN0IENPVU5URVJfSUQgPSBcImNvdW50ZXJcIjtcbmNvbnN0IFZBTFVFX0FUVFJJQlVURSA9IFwiY291bnRlcl92YWx1ZVwiO1xuY29uc3QgU0VUX1ZBTFVFID0gXCJzZXRfdmFsdWVcIjtcblxuZXhwb3J0IGNsYXNzIENvdW50ZXJDbGllbnQgaW1wbGVtZW50cyBJQ291bnRlckNsaWVudCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgdGFibGVOYW1lOiBzdHJpbmcsXG4gICAgcHJpdmF0ZSByZWFkb25seSBpbml0aWFsOiBudW1iZXIgPSAwLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgY2xpZW50ID0gbmV3IER5bmFtb0RCQ2xpZW50KHt9KVxuICApIHt9XG5cbiAgcHVibGljIGFzeW5jIGluYyhhbW91bnQgPSAxLCBrZXkgPSBDT1VOVEVSX0lEKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICBjb25zdCBjb21tYW5kID0gbmV3IFVwZGF0ZUl0ZW1Db21tYW5kKHtcbiAgICAgIFRhYmxlTmFtZTogdGhpcy50YWJsZU5hbWUsXG4gICAgICBLZXk6IHsgW0NPVU5URVJfSEFTSF9LRVldOiB7IFM6IGtleSB9IH0sXG4gICAgICBVcGRhdGVFeHByZXNzaW9uOiBgU0VUICR7VkFMVUVfQVRUUklCVVRFfSA9IGlmX25vdF9leGlzdHMoJHtWQUxVRV9BVFRSSUJVVEV9LCA6JHtJTklUSUFMX1ZBTFVFX1RPS0VOfSkgKyA6JHtBTU9VTlRfVE9LRU59YCxcbiAgICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM6IHtcbiAgICAgICAgW2A6JHtBTU9VTlRfVE9LRU59YF06IHsgTjogYCR7YW1vdW50fWAgfSxcbiAgICAgICAgW2A6JHtJTklUSUFMX1ZBTFVFX1RPS0VOfWBdOiB7IE46IGAke3RoaXMuaW5pdGlhbH1gIH0sXG4gICAgICB9LFxuICAgICAgUmV0dXJuVmFsdWVzOiBcIlVQREFURURfTkVXXCIsXG4gICAgfSk7XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmNsaWVudC5zZW5kKGNvbW1hbmQpO1xuICAgIGxldCBuZXdWYWx1ZSA9IHJlc3VsdC5BdHRyaWJ1dGVzPy5bVkFMVUVfQVRUUklCVVRFXS5OO1xuICAgIGlmICghbmV3VmFsdWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgJHtWQUxVRV9BVFRSSUJVVEV9IGF0dHJpYnV0ZSBub3QgZm91bmQgb24gdGFibGUuYCk7XG4gICAgfVxuXG4gICAgLy8gcmV0dXJuIHRoZSBvbGQgdmFsdWVcbiAgICByZXR1cm4gcGFyc2VJbnQobmV3VmFsdWUpIC0gYW1vdW50O1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGRlYyhhbW91bnQgPSAxLCBrZXk6IHN0cmluZyA9IENPVU5URVJfSUQpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIHJldHVybiB0aGlzLmluYygtMSAqIGFtb3VudCwga2V5KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBwZWVrKGtleTogc3RyaW5nID0gQ09VTlRFUl9JRCk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgY29uc3QgY29tbWFuZCA9IG5ldyBHZXRJdGVtQ29tbWFuZCh7XG4gICAgICBUYWJsZU5hbWU6IHRoaXMudGFibGVOYW1lLFxuICAgICAgS2V5OiB7IFtDT1VOVEVSX0hBU0hfS0VZXTogeyBTOiBrZXkgfSB9LFxuICAgIH0pO1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5jbGllbnQuc2VuZChjb21tYW5kKTtcbiAgICBsZXQgY3VycmVudFZhbHVlID0gcmVzdWx0Lkl0ZW0/LltWQUxVRV9BVFRSSUJVVEVdLk47XG4gICAgaWYgKGN1cnJlbnRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbml0aWFsO1xuICAgIH1cblxuICAgIHJldHVybiBwYXJzZUludChjdXJyZW50VmFsdWUpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHNldCh2YWx1ZTogbnVtYmVyLCBrZXk6IHN0cmluZyA9IENPVU5URVJfSUQpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBjb21tYW5kID0gbmV3IFVwZGF0ZUl0ZW1Db21tYW5kKHtcbiAgICAgIFRhYmxlTmFtZTogdGhpcy50YWJsZU5hbWUsXG4gICAgICBLZXk6IHsgW0NPVU5URVJfSEFTSF9LRVldOiB7IFM6IGtleSB9IH0sXG4gICAgICBVcGRhdGVFeHByZXNzaW9uOiBgU0VUICR7VkFMVUVfQVRUUklCVVRFfSA9IDoke1NFVF9WQUxVRX1gLFxuICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczoge1xuICAgICAgICBbYDoke1NFVF9WQUxVRX1gXTogeyBOOiBgJHt2YWx1ZX1gIH0sXG4gICAgICB9LFxuICAgICAgUmV0dXJuVmFsdWVzOiBcIlVQREFURURfTkVXXCIsXG4gICAgfSk7XG5cbiAgICBhd2FpdCB0aGlzLmNsaWVudC5zZW5kKGNvbW1hbmQpO1xuXG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=