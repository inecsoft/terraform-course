"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TableClient = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const util_dynamodb_1 = require("@aws-sdk/util-dynamodb");
const table_utils_1 = require("../shared/table-utils");
class TableClient {
    constructor(tableName, primaryKey, columns, client = new client_dynamodb_1.DynamoDBClient({})) {
        this.tableName = tableName;
        this.primaryKey = primaryKey;
        this.columns = columns;
        this.client = client;
    }
    async insert(key, row) {
        (0, table_utils_1.validateRow)(row, JSON.parse(this.columns));
        let insertRow = { [this.primaryKey]: key, ...row };
        try {
            const command = new client_dynamodb_1.PutItemCommand({
                TableName: this.tableName,
                Item: (0, util_dynamodb_1.marshall)(insertRow),
                ConditionExpression: `attribute_not_exists(#primary_key)`,
                ExpressionAttributeNames: {
                    "#primary_key": this.primaryKey,
                },
            });
            await this.client.send(command);
        }
        catch (e) {
            if (e instanceof client_dynamodb_1.ConditionalCheckFailedException) {
                throw new Error(`The primary key "${key}" already exists in the "${this.tableName}" table: ${e.stack})}`);
            }
            throw new Error(e.stack);
        }
    }
    async upsert(key, row) {
        (0, table_utils_1.validateRow)(row, JSON.parse(this.columns));
        let insertRow = { [this.primaryKey]: key, ...row };
        const command = new client_dynamodb_1.PutItemCommand({
            TableName: this.tableName,
            Item: (0, util_dynamodb_1.marshall)(insertRow),
        });
        await this.client.send(command);
    }
    async update(key, row) {
        (0, table_utils_1.validateRow)(row, JSON.parse(this.columns));
        let itemKey = { [this.primaryKey]: key };
        let updateExpression = [];
        let expressionAttributes = {};
        const item = (0, util_dynamodb_1.marshall)(row);
        for (const [id, value] of Object.entries(item)) {
            if (id !== this.primaryKey) {
                updateExpression.push(`${id} = :${id}`);
                expressionAttributes[`:${id}`] = value;
            }
        }
        const command = new client_dynamodb_1.UpdateItemCommand({
            TableName: this.tableName,
            Key: (0, util_dynamodb_1.marshall)(itemKey),
            UpdateExpression: `set ${updateExpression.toString()}`,
            ExpressionAttributeValues: expressionAttributes,
        });
        await this.client.send(command);
    }
    async delete(key) {
        const command = new client_dynamodb_1.DeleteItemCommand({
            TableName: this.tableName,
            Key: { [this.primaryKey]: { S: key } },
        });
        await this.client.send(command);
    }
    async get(key) {
        const result = await this.tryGetJson(key);
        if (!result) {
            throw new Error(`Row does not exist (key=${key})`);
        }
        return result;
    }
    async tryGet(key) {
        return this.tryGetJson(key);
    }
    async list() {
        const command = new client_dynamodb_1.ScanCommand({
            TableName: this.tableName,
        });
        const result = await this.client.send(command);
        const response = [];
        for (const item of result.Items) {
            response.push((0, util_dynamodb_1.unmarshall)(item));
        }
        return response;
    }
    async tryGetJson(key) {
        const command = new client_dynamodb_1.GetItemCommand({
            TableName: this.tableName,
            Key: { [this.primaryKey]: { S: key } },
        });
        const result = await this.client.send(command);
        if (result.Item) {
            return (0, util_dynamodb_1.unmarshall)(result.Item);
        }
        return undefined;
    }
}
exports.TableClient = TableClient;
//# sourceMappingURL=data:application/json;base64,