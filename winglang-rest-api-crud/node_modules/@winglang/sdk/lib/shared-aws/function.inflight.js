"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseLogs = exports.FunctionClient = void 0;
const client_lambda_1 = require("@aws-sdk/client-lambda");
const util_utf8_1 = require("@smithy/util-utf8");
const std_1 = require("../std");
class FunctionClient {
    static async context() {
        const obj = globalThis.$awsLambdaContext;
        if (!obj) {
            return undefined;
        }
        // workaround for the fact that JSII doesn't allow methods to start with "get"
        obj.remainingTimeInMillis = obj.getRemainingTimeInMillis;
        return obj;
    }
    constructor(functionArn, constructPath, lambdaClient = new client_lambda_1.LambdaClient({})) {
        this.functionArn = functionArn;
        this.constructPath = constructPath;
        this.lambdaClient = lambdaClient;
    }
    /**
     * Invokes the function with a payload and waits for the result.
     *  @returns the function response payload.
     */
    async invoke(payload) {
        const command = new client_lambda_1.InvokeCommand({
            FunctionName: this.functionArn,
            // If payload is undefined, pass json `null` as the payload to the function
            // to ensure the received event will be `null` (which will be converted to `undefined` in the function code)
            // If the Payload is undefined, the resulting event will instead be `{}`
            Payload: (0, util_utf8_1.fromUtf8)(payload !== undefined ? JSON.stringify(payload) : "null"),
        });
        const response = await this.lambdaClient.send(command);
        return parseCommandOutput(response, this.functionArn);
    }
    /**
     * Kicks off the execution of the function with a payload and returns immediately while the function is running.
     * @returns immediately once the event has been handed off to AWS Lambda.
     */
    async invokeAsync(payload) {
        const command = new client_lambda_1.InvokeCommand({
            FunctionName: this.functionArn,
            Payload: (0, util_utf8_1.fromUtf8)(JSON.stringify(payload)),
            InvocationType: "Event",
        });
        const response = await this.lambdaClient.send(command);
        if (response.StatusCode !== 202) {
            console.error("Error: " + response.FunctionError);
            console.error(response.Payload ? (0, util_utf8_1.toUtf8)(response.Payload) : "");
            throw new Error(`Failed to enqueue event. Received status code: ${response.StatusCode}`);
        }
    }
    /**
     * Invokes the function synchronously, passing the given payload as an argument.
     * @returns the function response payload with execution logs included.
     */
    async invokeWithLogs(payload) {
        const command = new client_lambda_1.InvokeCommand({
            FunctionName: this.functionArn,
            Payload: (0, util_utf8_1.fromUtf8)(JSON.stringify(payload)),
            LogType: client_lambda_1.LogType.Tail,
        });
        const response = await this.lambdaClient.send(command);
        const logs = Buffer.from(response.LogResult ?? "", "base64").toString();
        const traces = parseLogs(logs, this.constructPath);
        const value = parseCommandOutput(response, this.functionArn);
        if (!value) {
            return ["", traces];
        }
        if (typeof value !== "string") {
            throw new Error(`function returned value of type ${typeof value}, not string`);
        }
        return ["", traces];
    }
}
exports.FunctionClient = FunctionClient;
function parseCommandOutput(payload, functionArn) {
    if (payload.FunctionError) {
        let errorText = (0, util_utf8_1.toUtf8)(payload.Payload);
        let errorData;
        try {
            errorData = JSON.parse(errorText);
        }
        catch (_) { }
        if (errorData && "errorMessage" in errorData) {
            let errorMessage = `Invoke failed with message: "${errorData.errorMessage}"\nLogs: ${cloudwatchLogsPath(functionArn)}`;
            errorMessage = errorMessage.replace("Task timed out after", "Function timed out after");
            const newError = new Error();
            newError.message = errorMessage;
            newError.name = errorData.errorType;
            newError.stack = errorData.trace?.join("\n");
            throw newError;
        }
        throw new Error(`Invoke failed with message: "${payload.FunctionError}"\nLogs: ${cloudwatchLogsPath(functionArn)}\nFull Error: "${errorText}"`);
    }
    if (!payload.Payload) {
        return undefined;
    }
    else {
        const returnObject = JSON.parse((0, util_utf8_1.toUtf8)(payload.Payload));
        return returnObject === null ? undefined : returnObject;
    }
}
function cloudwatchLogsPath(functionArn) {
    const functionName = encodeURIComponent(functionArn.split(":").slice(-1)[0]);
    const region = functionArn.split(":")[3];
    return `https://${region}.console.aws.amazon.com/cloudwatch/home?region=${region}#logsV2:log-groups/log-group/%2Faws%2Flambda%2F${functionName}`;
}
function parseLogs(logs, sourcePath) {
    const lines = logs.split("\n");
    const traces = [];
    for (const line of lines) {
        const parts = line.split("\t");
        // 2023-08-04T16:40:47.309Z 6beb7628-d0c3-4fe9-bf5a-d64c559aa25f INFO hello
        // 2023-08-04T16:40:47.309Z 6beb7628-d0c3-4fe9-bf5a-d64c559aa25f Task timed out after 3.0 seconds
        if (parts.length >= 3 &&
            parts[0].match(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z$/) !==
                null &&
            parts[1].match(/^[0-9a-fA-F-]{36}$/) !== null) {
            const timestamp = parts[0];
            if (parts.slice(2).join(" ").startsWith("Task timed out after")) {
                continue;
            }
            const message = parts.slice(3).join(" ");
            const trace = {
                data: { message },
                timestamp,
                sourceType: "@winglang/sdk.cloud.Function",
                sourcePath,
                type: std_1.TraceType.LOG,
                level: std_1.LogLevel.INFO,
            };
            traces.push(trace);
        }
    }
    return traces;
}
exports.parseLogs = parseLogs;
//# sourceMappingURL=data:application/json;base64,