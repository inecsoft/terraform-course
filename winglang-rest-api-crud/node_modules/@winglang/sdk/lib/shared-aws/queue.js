"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueueSetConsumerHandler = exports.QueueRef = exports.Queue = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const inflight_host_1 = require("./inflight-host");
const permissions_1 = require("./permissions");
const util_1 = require("./util");
const __1 = require("..");
const core_1 = require("../core");
const types_1 = require("../core/types");
const std_1 = require("../std");
/**
 * A helper class for working with AWS queues.
 */
class Queue {
    /**
     * If the queue is an AWS SQS, return a helper interface for
     * working with it.
     * @param queue The cloud.Queue.
     */
    static from(queue) {
        if (this.isAwsQueue(queue)) {
            return queue;
        }
        return undefined;
    }
    static isAwsQueue(obj) {
        return (typeof obj.queueArn === "string" &&
            typeof obj.queueName === "string" &&
            typeof obj.queueUrl === "string");
    }
}
exports.Queue = Queue;
_a = JSII_RTTI_SYMBOL_1;
Queue[_a] = { fqn: "@winglang/sdk.aws.Queue", version: "0.0.0" };
/**
 * A reference to an external SQS queue.
 *
 * @inflight `@winglang/sdk.aws.IAwsQueueClient`
 */
class QueueRef extends std_1.Resource {
    constructor(scope, id, queueArn) {
        super(scope, id);
        if (!(0, util_1.isValidArn)(queueArn, "sqs")) {
            throw new Error(`"${queueArn}" is not a valid Amazon SQS ARN`);
        }
        this.queueArn = queueArn;
        this.addUserInterface();
    }
    onLift(host, ops) {
        // if this is an AWS function, add the necessary IAM permissions
        if (inflight_host_1.AwsInflightHost.isAwsInflightHost(host)) {
            host.addPolicyStatements(...(0, permissions_1.calculateQueuePermissions)(this.queueArn, ops));
        }
        host.addEnvironment(this.envName(), this.queueArn);
        super.onLift(host, ops);
    }
    /** @internal */
    _toInflight() {
        return core_1.InflightClient.for(__dirname, __filename, "QueueClient", [
            `process.env["${this.envName()}"]`,
        ]);
    }
    envName() {
        return `QUEUE_ARN_${this.node.addr.slice(-8)}`;
    }
    /** @internal */
    get _liftMap() {
        return {
            ["queueUrl"]: [], // AWS-specific
            [__1.cloud.QueueInflightMethods.PUSH]: [],
            [__1.cloud.QueueInflightMethods.PURGE]: [],
            [__1.cloud.QueueInflightMethods.APPROX_SIZE]: [],
            [__1.cloud.QueueInflightMethods.POP]: [],
        };
    }
    addUserInterface() {
        std_1.Node.of(this).color = "pink";
        const queueUrlHandler = (0, core_1.lift)({ queue: this }).inflight(async (ctx) => {
            try {
                return await ctx.queue.queueUrl();
            }
            catch (e) {
                return e.message;
            }
        });
        new __1.ui.Field(this, "QueueUrlField", "SQS Queue URL", queueUrlHandler, {
            link: true,
        });
        const awsConsoleHandler = (0, core_1.lift)({ queue: this }).inflight(async (ctx) => {
            try {
                const url = await ctx.queue.queueUrl();
                const x = new URL(url);
                const region = x.hostname.split(".")[1];
                return ("https://" +
                    region +
                    ".console.aws.amazon.com/sqs/v3/home?region=" +
                    region +
                    "#/queues/" +
                    encodeURIComponent(url));
            }
            catch (e) {
                return e.message;
            }
        });
        new __1.ui.Field(this, "AwsConsoleField", "AWS Console", awsConsoleHandler, {
            link: true,
        });
        new __1.ui.ValueField(this, "QueueArnField", "SQS Queue ARN", this.queueArn);
    }
}
exports.QueueRef = QueueRef;
_b = JSII_RTTI_SYMBOL_1;
QueueRef[_b] = { fqn: "@winglang/sdk.aws.QueueRef", version: "0.0.0" };
/**
 * Utility class for working with the queue consumer handler.
 */
class QueueSetConsumerHandler {
    /**
     * Converts a queue consumer handler to a function handler.
     * @param handler The queue consumer handler.
     * @returns The function handler.
     */
    static toFunctionHandler(handler) {
        return (0, core_1.lift)({ handler }).inflight(async (ctx, event) => {
            const batchItemFailures = [];
            for (const record of event.Records ?? []) {
                try {
                    await ctx.handler(record.body);
                }
                catch (error) {
                    batchItemFailures.push({
                        itemIdentifier: record.messageId,
                    });
                }
            }
            return { batchItemFailures };
        });
    }
}
exports.QueueSetConsumerHandler = QueueSetConsumerHandler;
_c = JSII_RTTI_SYMBOL_1;
QueueSetConsumerHandler[_c] = { fqn: "@winglang/sdk.aws.QueueSetConsumerHandler", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,