"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.apigwFunctionHandler = void 0;
const cloud_1 = require("../cloud");
async function apigwFunctionHandler(request, handlerFunction, headers) {
    const apiRequest = mapApigatewayEventToCloudApiRequest(request);
    const apiResponse = (await handlerFunction(apiRequest)) ?? {};
    return mapCloudApiResponseToApigatewayResponse(apiResponse, headers);
}
exports.apigwFunctionHandler = apigwFunctionHandler;
/**
 * Map a Cloud API response to an API Gateway response
 * @param resp Cloud API response
 * @returns API Gateway response
 */
function mapCloudApiResponseToApigatewayResponse(resp, corsHeaders) {
    return {
        statusCode: resp.status ?? cloud_1.DEFAULT_RESPONSE_STATUS,
        body: resp.body ?? "",
        headers: {
            "Content-Type": "application/json",
            ...corsHeaders,
            ...resp.headers,
        },
    };
}
/**
 * Map an API Gateway event to a Cloud API request
 * @param request API Gateway event
 * @returns Cloud API request
 */
function mapApigatewayEventToCloudApiRequest(request) {
    const query = {
        ...request.queryStringParameters,
        ...request.multiValueQueryStringParameters,
    };
    return {
        path: request.path,
        body: parseBody(request),
        headers: request.headers,
        method: (0, cloud_1.parseHttpMethod)(request.httpMethod),
        query: (0, cloud_1.sanitizeParamLikeObject)(query),
        vars: (0, cloud_1.sanitizeParamLikeObject)(request.pathParameters ?? {}),
    };
}
/**
 * Parse body to JSON or empty string
 * @param body body
 * @returns JSON body
 */
function parseBody(request) {
    if (!request.body)
        return "";
    const contentType = Object.entries(request.headers).find(([key, _]) => key.toLowerCase() === "content-type")?.[1];
    if (contentType === "application/x-www-form-urlencoded") {
        return JSON.stringify(Object.fromEntries(new URLSearchParams(request.body)));
    }
    return request.body;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLXV0aWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2hhcmVkLWF3cy9hcGktdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSxvQ0FNa0I7QUFFWCxLQUFLLFVBQVUsb0JBQW9CLENBQ3hDLE9BQTZCLEVBQzdCLGVBRXNDLEVBQ3RDLE9BQWdDO0lBRWhDLE1BQU0sVUFBVSxHQUFHLG1DQUFtQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2hFLE1BQU0sV0FBVyxHQUFHLENBQUMsTUFBTSxlQUFlLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDOUQsT0FBTyx1Q0FBdUMsQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDdkUsQ0FBQztBQVZELG9EQVVDO0FBRUQ7Ozs7R0FJRztBQUNILFNBQVMsdUNBQXVDLENBQzlDLElBQWlCLEVBQ2pCLFdBQW9DO0lBRXBDLE9BQU87UUFDTCxVQUFVLEVBQUUsSUFBSSxDQUFDLE1BQU0sSUFBSSwrQkFBdUI7UUFDbEQsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRTtRQUNyQixPQUFPLEVBQUU7WUFDUCxjQUFjLEVBQUUsa0JBQWtCO1lBQ2xDLEdBQUcsV0FBVztZQUNkLEdBQUcsSUFBSSxDQUFDLE9BQU87U0FDaEI7S0FDRixDQUFDO0FBQ0osQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxTQUFTLG1DQUFtQyxDQUMxQyxPQUE2QjtJQUU3QixNQUFNLEtBQUssR0FBRztRQUNaLEdBQUcsT0FBTyxDQUFDLHFCQUFxQjtRQUNoQyxHQUFHLE9BQU8sQ0FBQywrQkFBK0I7S0FDM0MsQ0FBQztJQUVGLE9BQU87UUFDTCxJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUk7UUFDbEIsSUFBSSxFQUFFLFNBQVMsQ0FBQyxPQUFPLENBQUM7UUFDeEIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFpQztRQUNsRCxNQUFNLEVBQUUsSUFBQSx1QkFBZSxFQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7UUFDM0MsS0FBSyxFQUFFLElBQUEsK0JBQXVCLEVBQUMsS0FBSyxDQUFDO1FBQ3JDLElBQUksRUFBRSxJQUFBLCtCQUF1QixFQUFDLE9BQU8sQ0FBQyxjQUFjLElBQUksRUFBRSxDQUFDO0tBQzVELENBQUM7QUFDSixDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILFNBQVMsU0FBUyxDQUFDLE9BQTZCO0lBQzlDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSTtRQUFFLE9BQU8sRUFBRSxDQUFDO0lBRTdCLE1BQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDdEQsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxLQUFLLGNBQWMsQ0FDbkQsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsSUFBSSxXQUFXLEtBQUssbUNBQW1DLEVBQUUsQ0FBQztRQUN4RCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQ25CLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxlQUFlLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQ3RELENBQUM7SUFDSixDQUFDO0lBQ0QsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDO0FBQ3RCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEFQSUdhdGV3YXlQcm94eUV2ZW50LCBBUElHYXRld2F5UHJveHlSZXN1bHQgfSBmcm9tIFwiYXdzLWxhbWJkYVwiO1xuaW1wb3J0IHsgY2xvdWQgfSBmcm9tIFwiLi5cIjtcbmltcG9ydCB7XG4gIEFwaVJlcXVlc3QsXG4gIEFwaVJlc3BvbnNlLFxuICBERUZBVUxUX1JFU1BPTlNFX1NUQVRVUyxcbiAgcGFyc2VIdHRwTWV0aG9kLFxuICBzYW5pdGl6ZVBhcmFtTGlrZU9iamVjdCxcbn0gZnJvbSBcIi4uL2Nsb3VkXCI7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhcGlnd0Z1bmN0aW9uSGFuZGxlcihcbiAgcmVxdWVzdDogQVBJR2F0ZXdheVByb3h5RXZlbnQsXG4gIGhhbmRsZXJGdW5jdGlvbjogKFxuICAgIHJlcXVlc3Q6IGNsb3VkLkFwaVJlcXVlc3RcbiAgKSA9PiBQcm9taXNlPHZvaWQgfCBjbG91ZC5BcGlSZXNwb25zZT4sXG4gIGhlYWRlcnM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+XG4pIHtcbiAgY29uc3QgYXBpUmVxdWVzdCA9IG1hcEFwaWdhdGV3YXlFdmVudFRvQ2xvdWRBcGlSZXF1ZXN0KHJlcXVlc3QpO1xuICBjb25zdCBhcGlSZXNwb25zZSA9IChhd2FpdCBoYW5kbGVyRnVuY3Rpb24oYXBpUmVxdWVzdCkpID8/IHt9O1xuICByZXR1cm4gbWFwQ2xvdWRBcGlSZXNwb25zZVRvQXBpZ2F0ZXdheVJlc3BvbnNlKGFwaVJlc3BvbnNlLCBoZWFkZXJzKTtcbn1cblxuLyoqXG4gKiBNYXAgYSBDbG91ZCBBUEkgcmVzcG9uc2UgdG8gYW4gQVBJIEdhdGV3YXkgcmVzcG9uc2VcbiAqIEBwYXJhbSByZXNwIENsb3VkIEFQSSByZXNwb25zZVxuICogQHJldHVybnMgQVBJIEdhdGV3YXkgcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gbWFwQ2xvdWRBcGlSZXNwb25zZVRvQXBpZ2F0ZXdheVJlc3BvbnNlKFxuICByZXNwOiBBcGlSZXNwb25zZSxcbiAgY29yc0hlYWRlcnM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+XG4pOiBBUElHYXRld2F5UHJveHlSZXN1bHQge1xuICByZXR1cm4ge1xuICAgIHN0YXR1c0NvZGU6IHJlc3Auc3RhdHVzID8/IERFRkFVTFRfUkVTUE9OU0VfU1RBVFVTLFxuICAgIGJvZHk6IHJlc3AuYm9keSA/PyBcIlwiLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgLi4uY29yc0hlYWRlcnMsXG4gICAgICAuLi5yZXNwLmhlYWRlcnMsXG4gICAgfSxcbiAgfTtcbn1cblxuLyoqXG4gKiBNYXAgYW4gQVBJIEdhdGV3YXkgZXZlbnQgdG8gYSBDbG91ZCBBUEkgcmVxdWVzdFxuICogQHBhcmFtIHJlcXVlc3QgQVBJIEdhdGV3YXkgZXZlbnRcbiAqIEByZXR1cm5zIENsb3VkIEFQSSByZXF1ZXN0XG4gKi9cbmZ1bmN0aW9uIG1hcEFwaWdhdGV3YXlFdmVudFRvQ2xvdWRBcGlSZXF1ZXN0KFxuICByZXF1ZXN0OiBBUElHYXRld2F5UHJveHlFdmVudFxuKTogQXBpUmVxdWVzdCB7XG4gIGNvbnN0IHF1ZXJ5ID0ge1xuICAgIC4uLnJlcXVlc3QucXVlcnlTdHJpbmdQYXJhbWV0ZXJzLFxuICAgIC4uLnJlcXVlc3QubXVsdGlWYWx1ZVF1ZXJ5U3RyaW5nUGFyYW1ldGVycyxcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHBhdGg6IHJlcXVlc3QucGF0aCxcbiAgICBib2R5OiBwYXJzZUJvZHkocmVxdWVzdCksXG4gICAgaGVhZGVyczogcmVxdWVzdC5oZWFkZXJzIGFzIFJlY29yZDxzdHJpbmcsIHN0cmluZz4sXG4gICAgbWV0aG9kOiBwYXJzZUh0dHBNZXRob2QocmVxdWVzdC5odHRwTWV0aG9kKSxcbiAgICBxdWVyeTogc2FuaXRpemVQYXJhbUxpa2VPYmplY3QocXVlcnkpLFxuICAgIHZhcnM6IHNhbml0aXplUGFyYW1MaWtlT2JqZWN0KHJlcXVlc3QucGF0aFBhcmFtZXRlcnMgPz8ge30pLFxuICB9O1xufVxuXG4vKipcbiAqIFBhcnNlIGJvZHkgdG8gSlNPTiBvciBlbXB0eSBzdHJpbmdcbiAqIEBwYXJhbSBib2R5IGJvZHlcbiAqIEByZXR1cm5zIEpTT04gYm9keVxuICovXG5mdW5jdGlvbiBwYXJzZUJvZHkocmVxdWVzdDogQVBJR2F0ZXdheVByb3h5RXZlbnQpOiBzdHJpbmcge1xuICBpZiAoIXJlcXVlc3QuYm9keSkgcmV0dXJuIFwiXCI7XG5cbiAgY29uc3QgY29udGVudFR5cGUgPSBPYmplY3QuZW50cmllcyhyZXF1ZXN0LmhlYWRlcnMpLmZpbmQoXG4gICAgKFtrZXksIF9dKSA9PiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gXCJjb250ZW50LXR5cGVcIlxuICApPy5bMV07XG4gIGlmIChjb250ZW50VHlwZSA9PT0gXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIikge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShcbiAgICAgIE9iamVjdC5mcm9tRW50cmllcyhuZXcgVVJMU2VhcmNoUGFyYW1zKHJlcXVlc3QuYm9keSkpXG4gICAgKTtcbiAgfVxuICByZXR1cm4gcmVxdWVzdC5ib2R5O1xufVxuIl19