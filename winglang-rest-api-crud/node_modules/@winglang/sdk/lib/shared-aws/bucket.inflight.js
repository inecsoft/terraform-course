"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BucketClient = void 0;
const consumers = __importStar(require("stream/consumers"));
const client_s3_1 = require("@aws-sdk/client-s3");
const s3_request_presigner_1 = require("@aws-sdk/s3-request-presigner");
const mime_types_1 = __importDefault(require("mime-types"));
const cloud_1 = require("../cloud");
const std_1 = require("../std");
class BucketClient {
    constructor(bucketName, s3Client = new client_s3_1.S3Client({})) {
        this.bucketName = bucketName;
        this.s3Client = s3Client;
    }
    async bucketRegion() {
        const res = await this.s3Client.send(new client_s3_1.HeadBucketCommand({
            Bucket: this.bucketName,
        }));
        if (!res.BucketRegion) {
            throw new Error(`Failed to get region of the bucket (bucket=${this.bucketName}).`);
        }
        return res.BucketRegion;
    }
    /**
     * Check if an object exists in the bucket
     *
     * @param key Key of the object
     */
    async exists(key) {
        const command = new client_s3_1.HeadObjectCommand({
            Bucket: this.bucketName,
            Key: key,
        });
        try {
            await this.s3Client.send(command);
            return true;
        }
        catch (error) {
            if (error instanceof client_s3_1.NotFound) {
                return false;
            }
            throw error;
        }
    }
    /**
     * Put object into bucket with given body contents
     *
     * @param key Key of the object
     * @param body string contents of the object
     */
    async put(key, body, opts) {
        const command = new client_s3_1.PutObjectCommand({
            Bucket: this.bucketName,
            Key: key,
            Body: body,
            ContentType: (opts?.contentType ?? mime_types_1.default.lookup(key)) || "application/octet-stream",
        });
        await this.s3Client.send(command);
    }
    /**
     * Put Json object into bucket with given body contents
     *
     * @param key Key of the object
     * @param body Json object
     */
    async putJson(key, body) {
        await this.put(key, JSON.stringify(body, null, 2), {
            contentType: "application/json",
        });
    }
    /**
     * See https://github.com/aws/aws-sdk-js-v3/issues/1877
     */
    async getObjectContent(key, options) {
        const getObjectParams = {
            Bucket: this.bucketName,
            Key: key,
        };
        // Conditionally add the `Range` parameter
        if (options?.startByte !== undefined || options?.endByte !== undefined) {
            const startByte = options?.startByte ?? 0;
            const endByte = options?.endByte ?? "";
            getObjectParams.Range = `bytes=${startByte}-${endByte}`;
        }
        const command = new client_s3_1.GetObjectCommand(getObjectParams);
        try {
            const resp = await this.s3Client.send(command);
            const objectContent = resp.Body;
            try {
                return new TextDecoder("utf8", { fatal: true }).decode(await consumers.buffer(objectContent));
            }
            catch (e) {
                throw new Error(`Object content could not be read as text (key=${key}): ${e.stack})}`);
            }
        }
        catch (e) {
            if (e instanceof client_s3_1.NoSuchKey) {
                return undefined;
            }
            throw new Error(e.stack);
        }
    }
    /**
     * Get an object from the bucket
     *
     * @param key Key of the object
     * @returns content of the object
     */
    async get(key, options) {
        const objectContent = await this.getObjectContent(key, options);
        if (objectContent !== undefined) {
            return objectContent;
        }
        throw new Error(`Object does not exist (key=${key}).`);
    }
    /**
     * Get an object from the bucket if it exists
     *
     * @param key Key of the object
     * @returns content of the object
     */
    async tryGet(key, options) {
        return this.getObjectContent(key, options);
    }
    /**
     * Get a Json object from the bucket
     *
     * @param key Key of the object
     * @returns Json content of the object
     */
    async getJson(key) {
        return JSON.parse(await this.get(key));
    }
    /**
     * Get a Json object from the bucket if it exists
     *
     * @param key Key of the object
     * @returns Json content of the object
     */
    async tryGetJson(key) {
        const objectContent = await this.tryGet(key);
        if (objectContent !== undefined) {
            return JSON.parse(objectContent);
        }
        else {
            return undefined;
        }
    }
    /**
     * Delete an object from the bucket
     *
     * @param key Key of the object
     * @param opts Option object supporting additional strategies to delete item from a bucket
     */
    async delete(key, opts) {
        const mustExist = opts?.mustExist ?? false;
        if (mustExist && !(await this.exists(key))) {
            throw new Error(`Object does not exist (key=${key}).`);
        }
        const command = new client_s3_1.DeleteObjectCommand({
            Key: key,
            Bucket: this.bucketName,
        });
        try {
            await this.s3Client.send(command);
        }
        catch (error) {
            if (!mustExist && error instanceof client_s3_1.NoSuchKey) {
                return;
            }
            throw new Error(`Failed to delete object (key=${key}).`);
        }
    }
    /**
     * Delete an object from the bucket if it exists
     *
     * @param key Key of the object
     * @param opts Option object supporting additional strategies to delete item from a bucket
     */
    async tryDelete(key) {
        if (await this.exists(key)) {
            await this.delete(key);
            return true;
        }
        return false;
    }
    /**
     * List all keys in the bucket.
     * @param prefix Limits the response to keys that begin with the specified prefix
     * TODO - add pagination support, currently returns all existing keys in the bucket
     * https://github.com/winglang/wing/issues/315
     */
    async list(prefix) {
        const list = [];
        let fetchMore = true;
        let marker = undefined;
        while (fetchMore) {
            const command = new client_s3_1.ListObjectsV2Command({
                Bucket: this.bucketName,
                Prefix: prefix,
                StartAfter: marker,
            });
            const resp = await this.s3Client.send(command);
            for (const content of resp.Contents ?? []) {
                if (content.Key === undefined) {
                    continue;
                }
                list.push(content.Key);
            }
            fetchMore = resp?.IsTruncated ?? false;
            marker = list.length > 0 ? list.at(-1) : undefined;
        }
        return list;
    }
    /**
     * Copy an object to a new location in the bucket. If the destination object
     * already exists, it will be overwritten.
     * @param srcKey The key of the source object you wish to copy.
     * @param dstKey The key of the destination object after copying.
     */
    async copy(srcKey, dstKey) {
        try {
            // Get properties of the source object
            const headResult = await this.s3Client.send(new client_s3_1.HeadObjectCommand({
                Bucket: this.bucketName,
                Key: srcKey,
            }));
            // Equivalent to `aws s3 cp --copy-props` in AWS CLI v2
            const command = new client_s3_1.CopyObjectCommand({
                Bucket: this.bucketName,
                CopySource: `${this.bucketName}/${srcKey}`,
                Key: dstKey,
                MetadataDirective: "REPLACE",
                // Properties carried over from the source object
                ContentType: headResult?.ContentType,
                ContentLanguage: headResult?.ContentLanguage,
                ContentEncoding: headResult?.ContentEncoding,
                ContentDisposition: headResult?.ContentDisposition,
                CacheControl: headResult?.CacheControl,
                Expires: headResult?.Expires,
                Metadata: headResult?.Metadata,
            });
            await this.s3Client.send(command);
        }
        catch (error) {
            if (error instanceof client_s3_1.NotFound) {
                throw new Error(`Source object does not exist (srcKey=${srcKey}).`);
            }
            throw error;
        }
    }
    /**
     * Move an object to a new location in the bucket. If the destination object
     * already exists, it will be overwritten. Returns once the renaming is finished.
     * @param srcKey The key of the source object you wish to rename.
     * @param dstKey The key of the destination object after renaming.
     * @throws if `srcKey` object doesn't exist or if it matches `dstKey`.
     * @inflight
     */
    async rename(srcKey, dstKey) {
        if (srcKey === dstKey) {
            throw new Error(`Renaming an object to its current name is not a valid operation (srcKey=${srcKey}, dstKey=${dstKey}).`);
        }
        await this.copy(srcKey, dstKey);
        await this.delete(srcKey);
    }
    /**
     * Checks if the bucket is public
     * @returns true if the bucket is public and false otherwise
     */
    async checkIfPublic() {
        const command = new client_s3_1.GetPublicAccessBlockCommand({
            Bucket: this.bucketName,
        });
        const resp = await this.s3Client.send(command);
        return (!resp.PublicAccessBlockConfiguration?.BlockPublicAcls &&
            !resp.PublicAccessBlockConfiguration?.BlockPublicPolicy &&
            !resp.PublicAccessBlockConfiguration?.RestrictPublicBuckets &&
            !resp.PublicAccessBlockConfiguration?.IgnorePublicAcls);
    }
    /**
     * Returns a url to the given file.
     * @Throws if the file is not public or if object does not exist.
     */
    async publicUrl(key) {
        if (!(await this.checkIfPublic())) {
            throw new Error("Cannot provide public url for a non-public bucket");
        }
        if (!(await this.exists(key))) {
            throw new Error(`Cannot provide public url for a non-existent key (key=${key})`);
        }
        const region = await this.getLocation();
        return encodeURI(`https://${this.bucketName}.s3.${region}.amazonaws.com/${key}`);
    }
    /**
     * Returns a presigned URL for the specified key in the bucket.
     * @param key The key of the object in the bucket.
     * @param opts The options including the action and the duration for the signed URL.
     * @returns The presigned URL string.
     * @inflight
     */
    async signedUrl(key, opts) {
        let s3Command;
        // Set default action to DOWNLOAD if not provided
        const action = opts?.action ?? cloud_1.BucketSignedUrlAction.DOWNLOAD;
        // Set the S3 command
        switch (action) {
            case cloud_1.BucketSignedUrlAction.DOWNLOAD:
                if (!(await this.exists(key))) {
                    throw new Error(`Cannot provide signed url for a non-existent key (key=${key})`);
                }
                s3Command = new client_s3_1.GetObjectCommand({
                    Bucket: this.bucketName,
                    Key: key,
                });
                break;
            case cloud_1.BucketSignedUrlAction.UPLOAD:
                s3Command = new client_s3_1.PutObjectCommand({
                    Bucket: this.bucketName,
                    Key: key,
                });
                break;
            default:
                throw new Error(`Invalid action: ${opts?.action}`);
        }
        // Generate the presigned URL
        const signedUrl = await (0, s3_request_presigner_1.getSignedUrl)(this.s3Client, s3Command, {
            expiresIn: opts?.duration?.seconds ?? 900,
        });
        return signedUrl;
    }
    /**
     * Get the metadata of an object in the bucket.
     * @param key Key of the object.
     */
    async metadata(key) {
        const command = new client_s3_1.HeadObjectCommand({
            Bucket: this.bucketName,
            Key: key,
        });
        try {
            const resp = await this.s3Client.send(command);
            return {
                contentType: resp.ContentType,
                lastModified: std_1.Datetime.fromDate(resp.LastModified),
                size: resp.ContentLength,
            };
        }
        catch (error) {
            // 403 is thrown if s3:ListObject is not granted.
            if (error instanceof client_s3_1.NotFound || error.name === "403") {
                throw new Error(`Object does not exist (key=${key}).`);
            }
            throw error;
        }
    }
    async getLocation() {
        const command = new client_s3_1.GetBucketLocationCommand({
            Bucket: this.bucketName,
        });
        //Buckets in Region us-east-1 have a LocationConstraint of null.
        //https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketLocation.html#API_GetBucketLocation_ResponseSyntax
        const { LocationConstraint: region = "us-east-1" } = await this.s3Client.send(command);
        return region;
    }
}
exports.BucketClient = BucketClient;
//# sourceMappingURL=data:application/json;base64,