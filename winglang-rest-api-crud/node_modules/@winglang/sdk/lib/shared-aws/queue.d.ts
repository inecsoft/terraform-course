import { Construct } from "constructs";
import { cloud } from "..";
import { LiftMap } from "../core";
import { INFLIGHT_SYMBOL } from "../core/types";
import { IInflightHost, Resource } from "../std";
/**
 * A shared interface for AWS queues.
 */
export interface IAwsQueue {
    /**
     * AWS Queue arn
     */
    readonly queueArn: string;
    /**
     * AWS Queue name
     */
    readonly queueName: string;
    /**
     * AWS Queue url
     */
    readonly queueUrl: string;
}
/**
 * A helper class for working with AWS queues.
 */
export declare class Queue {
    /**
     * If the queue is an AWS SQS, return a helper interface for
     * working with it.
     * @param queue The cloud.Queue.
     */
    static from(queue: cloud.Queue): IAwsQueue | undefined;
    private static isAwsQueue;
}
/**
 * The inflight API for AWS queues.
 */
export interface IAwsQueueClient extends cloud.IQueueClient {
    /**
     * Get the queue URL.
     * @inflight
     */
    queueUrl(): Promise<string>;
}
/**
 * A reference to an external SQS queue.
 *
 * @inflight `@winglang/sdk.aws.IAwsQueueClient`
 */
export declare class QueueRef extends Resource {
    /** @internal */
    [INFLIGHT_SYMBOL]?: IAwsQueueClient;
    /**
     * The ARN of this queue.
     */
    readonly queueArn: string;
    constructor(scope: Construct, id: string, queueArn: string);
    onLift(host: IInflightHost, ops: string[]): void;
    /** @internal */
    _toInflight(): string;
    private envName;
    /** @internal */
    get _liftMap(): LiftMap;
    private addUserInterface;
}
/**
 * Utility class for working with the queue consumer handler.
 */
export declare class QueueSetConsumerHandler {
    /**
     * Converts a queue consumer handler to a function handler.
     * @param handler The queue consumer handler.
     * @returns The function handler.
     */
    static toFunctionHandler(handler: cloud.IQueueSetConsumerHandler): cloud.IFunctionHandler;
}
