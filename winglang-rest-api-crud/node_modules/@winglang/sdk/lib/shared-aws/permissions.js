"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculateSecretPermissions = exports.calculateBucketPermissions = exports.calculateCounterPermissions = exports.calculateQueuePermissions = exports.calculateTopicPermissions = void 0;
const cloud = __importStar(require("../cloud"));
function calculateTopicPermissions(arn, ops) {
    const policies = [];
    if (ops.includes(cloud.TopicInflightMethods.PUBLISH)) {
        policies.push({
            actions: ["sns:Publish"],
            resources: [arn],
        });
    }
    return policies;
}
exports.calculateTopicPermissions = calculateTopicPermissions;
function calculateQueuePermissions(arn, ops) {
    const policies = [];
    // this is always needed in order to resolve URL from ARN/name
    policies.push({
        actions: ["sqs:GetQueueUrl"],
        resources: [arn],
    });
    if (ops.includes(cloud.QueueInflightMethods.PUSH)) {
        policies.push({
            actions: ["sqs:SendMessage"],
            resources: [arn],
        });
    }
    if (ops.includes(cloud.QueueInflightMethods.PURGE)) {
        policies.push({
            actions: ["sqs:PurgeQueue"],
            resources: [arn],
        });
    }
    if (ops.includes(cloud.QueueInflightMethods.APPROX_SIZE)) {
        policies.push({
            actions: ["sqs:GetQueueAttributes"],
            resources: [arn],
        });
    }
    if (ops.includes(cloud.QueueInflightMethods.POP)) {
        policies.push({
            actions: ["sqs:ReceiveMessage", "sqs:DeleteMessage"],
            resources: [arn],
        });
    }
    return policies;
}
exports.calculateQueuePermissions = calculateQueuePermissions;
function calculateCounterPermissions(arn, ops) {
    const policies = [];
    if (ops.includes(cloud.CounterInflightMethods.INC) ||
        ops.includes(cloud.CounterInflightMethods.DEC) ||
        ops.includes(cloud.CounterInflightMethods.SET)) {
        policies.push({
            actions: ["dynamodb:UpdateItem"],
            resources: [arn],
        });
    }
    if (ops.includes(cloud.CounterInflightMethods.PEEK)) {
        policies.push({
            actions: ["dynamodb:GetItem"],
            resources: [arn],
        });
    }
    return policies;
}
exports.calculateCounterPermissions = calculateCounterPermissions;
function calculateBucketPermissions(arn, ops) {
    const actions = [];
    // const policies: PolicyStatement[] = [];
    // contains a check if an object exists/list
    if (ops.includes(cloud.BucketInflightMethods.PUBLIC_URL) ||
        ops.includes(cloud.BucketInflightMethods.SIGNED_URL) ||
        ops.includes(cloud.BucketInflightMethods.LIST) ||
        ops.includes(cloud.BucketInflightMethods.EXISTS) ||
        ops.includes(cloud.BucketInflightMethods.TRY_GET) ||
        ops.includes(cloud.BucketInflightMethods.TRY_GET_JSON) ||
        ops.includes(cloud.BucketInflightMethods.TRY_DELETE) ||
        // get requires list permissions too https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/client/s3/command/GetObjectCommand/
        ops.includes(cloud.BucketInflightMethods.GET) ||
        ops.includes(cloud.BucketInflightMethods.GET_JSON)) {
        actions.push("s3:List*");
    }
    // putting an object
    if (ops.includes(cloud.BucketInflightMethods.PUT) ||
        ops.includes(cloud.BucketInflightMethods.PUT_JSON) ||
        ops.includes(cloud.BucketInflightMethods.SIGNED_URL)) {
        actions.push("s3:PutObject*", "s3:Abort*");
    }
    // getting an object
    if (ops.includes(cloud.BucketInflightMethods.GET) ||
        ops.includes(cloud.BucketInflightMethods.GET_JSON) ||
        ops.includes(cloud.BucketInflightMethods.METADATA) ||
        ops.includes(cloud.BucketInflightMethods.LIST) ||
        ops.includes(cloud.BucketInflightMethods.TRY_GET) ||
        ops.includes(cloud.BucketInflightMethods.TRY_GET_JSON) ||
        ops.includes(cloud.BucketInflightMethods.TRY_DELETE) ||
        ops.includes(cloud.BucketInflightMethods.PUBLIC_URL) ||
        ops.includes(cloud.BucketInflightMethods.SIGNED_URL) ||
        ops.includes(cloud.BucketInflightMethods.EXISTS)) {
        actions.push("s3:GetObject*", "s3:GetBucket*");
    }
    // accessing the publicAccessBlock
    if (ops.includes(cloud.BucketInflightMethods.PUBLIC_URL)) {
        actions.push("s3:GetBucketPublicAccessBlock");
    }
    // deleting an object
    if (ops.includes(cloud.BucketInflightMethods.TRY_DELETE) ||
        ops.includes(cloud.BucketInflightMethods.DELETE) ||
        ops.includes(cloud.BucketInflightMethods.RENAME)) {
        actions.push("s3:DeleteObject*", "s3:DeleteObjectVersion*", "s3:PutLifecycleConfiguration*");
    }
    // copying an object
    if (ops.includes(cloud.BucketInflightMethods.COPY) ||
        ops.includes(cloud.BucketInflightMethods.RENAME)) {
        actions.push("s3:CopyObject");
    }
    if (actions.length === 0) {
        return [];
    }
    return [{ actions, resources: [arn, `${arn}/*`] }];
}
exports.calculateBucketPermissions = calculateBucketPermissions;
function calculateSecretPermissions(arn, ops) {
    const policies = [];
    if (ops.includes(cloud.SecretInflightMethods.VALUE) ||
        ops.includes(cloud.SecretInflightMethods.VALUE_JSON)) {
        policies.push({
            actions: ["secretsmanager:GetSecretValue"],
            resources: [arn],
        });
    }
    return policies;
}
exports.calculateSecretPermissions = calculateSecretPermissions;
//# sourceMappingURL=data:application/json;base64,