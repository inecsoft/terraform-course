"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BucketEventHandler = exports.BucketRef = exports.Bucket = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const inflight_host_1 = require("./inflight-host");
const permissions_1 = require("./permissions");
const __1 = require("..");
const core_1 = require("../core");
const types_1 = require("../core/types");
const std_1 = require("../std");
/**
 * A helper class for working with AWS buckets.
 */
class Bucket {
    /**
     * If the bucket is an AWS Bucket, return a helper interface for
     * working with it.
     * @param bucket The cloud.Bucket.
     */
    static from(bucket) {
        if (this.isAwsBucket(bucket)) {
            return bucket;
        }
        return undefined;
    }
    static isAwsBucket(obj) {
        return (typeof obj.bucketArn === "string" && typeof obj.bucketName === "string");
    }
}
exports.Bucket = Bucket;
_a = JSII_RTTI_SYMBOL_1;
Bucket[_a] = { fqn: "@winglang/sdk.aws.Bucket", version: "0.0.0" };
/**
 * A reference to an external S3 bucket.
 * @inflight `@winglang/sdk.aws.IAwsBucketClient`
 */
class BucketRef extends std_1.Resource {
    constructor(scope, id, bucketName) {
        super(scope, id);
        this.bucketName = bucketName;
        this.bucketArn = `arn:aws:s3:::${bucketName}`;
        this.addUserInterface();
    }
    onLift(host, ops) {
        if (inflight_host_1.AwsInflightHost.isAwsInflightHost(host)) {
            host.addPolicyStatements(...(0, permissions_1.calculateBucketPermissions)(this.bucketArn, ops));
        }
        // The bucket name needs to be passed through an environment variable since
        // it may not be resolved until deployment time.
        host.addEnvironment(this.envName(), this.bucketName);
        super.onLift(host, ops);
    }
    /** @internal */
    _toInflight() {
        return core_1.InflightClient.for(__dirname, __filename, "BucketClient", [
            `process.env["${this.envName()}"]`,
        ]);
    }
    envName() {
        return `BUCKET_NAME_${this.node.addr.slice(-8)}`;
    }
    /** @internal */
    get _liftMap() {
        return {
            [__1.cloud.BucketInflightMethods.DELETE]: [],
            [__1.cloud.BucketInflightMethods.GET]: [],
            [__1.cloud.BucketInflightMethods.GET_JSON]: [],
            [__1.cloud.BucketInflightMethods.LIST]: [],
            [__1.cloud.BucketInflightMethods.PUT]: [],
            [__1.cloud.BucketInflightMethods.PUT_JSON]: [],
            [__1.cloud.BucketInflightMethods.PUBLIC_URL]: [],
            [__1.cloud.BucketInflightMethods.EXISTS]: [],
            [__1.cloud.BucketInflightMethods.TRY_GET]: [],
            [__1.cloud.BucketInflightMethods.TRY_GET_JSON]: [],
            [__1.cloud.BucketInflightMethods.TRY_DELETE]: [],
            [__1.cloud.BucketInflightMethods.SIGNED_URL]: [],
            [__1.cloud.BucketInflightMethods.METADATA]: [],
            [__1.cloud.BucketInflightMethods.COPY]: [],
            [__1.cloud.BucketInflightMethods.RENAME]: [],
            bucketRegion: [],
        };
    }
    addUserInterface() {
        std_1.Node.of(this).color = "amber";
        const awsConsoleHandler = (0, core_1.lift)({
            bucket: this,
            bucketName: this.bucketName,
        }).inflight(async (ctx) => {
            try {
                const region = await ctx.bucket.bucketRegion();
                return ("https://" +
                    region +
                    ".console.aws.amazon.com/s3/buckets/" +
                    ctx.bucketName +
                    "?region=" +
                    region);
            }
            catch (e) {
                return e.message;
            }
        });
        new __1.ui.Field(this, "AwsConsoleField", "AWS Console", awsConsoleHandler, {
            link: true,
        });
        new __1.ui.ValueField(this, "BucketNameField", "Bucket Name", this.bucketName);
        new __1.ui.ValueField(this, "BucketArnField", "Bucket ARN", this.bucketArn);
        new __1.ui.FileBrowser(this, "FileBrowser", "File Browser", {
            put: (0, core_1.lift)({ bucket: this }).inflight(async (ctx, fileName, fileContent) => {
                await ctx.bucket.put(fileName, fileContent);
            }),
            get: (0, core_1.lift)({ bucket: this }).inflight(async (ctx, fileName) => {
                return ctx.bucket.get(fileName);
            }),
            delete: (0, core_1.lift)({ bucket: this }).inflight(async (ctx, fileName) => {
                await ctx.bucket.delete(fileName);
            }),
            list: (0, core_1.lift)({ bucket: this }).inflight(async (ctx) => {
                return ctx.bucket.list();
            }),
        });
    }
}
exports.BucketRef = BucketRef;
_b = JSII_RTTI_SYMBOL_1;
BucketRef[_b] = { fqn: "@winglang/sdk.aws.BucketRef", version: "0.0.0" };
/**
 * Utility class to work with bucket event handlers.
 */
class BucketEventHandler {
    /**
     * Converts a `cloud.IBucketEventHandler` to a `cloud.ITopicOnMessageHandler`.
     * @param handler the handler to convert
     * @param eventType the event type
     * @returns the on message handler.
     */
    static toTopicOnMessageHandler(handler, eventType) {
        return (0, core_1.lift)({ handler, eventType }).inflight(async (ctx, event) => {
            try {
                const message = JSON.parse(event);
                if (message?.Event === "s3:TestEvent") {
                    // aws sends a test event to the topic before of the actual one, we're ignoring it for now
                    return;
                }
                return await ctx.handler(message.Records[0].s3.object.key, ctx.eventType);
            }
            catch (error) {
                console.warn("Error parsing the notification event message: ", error);
                console.warn("Event: ", event);
            }
        });
    }
}
exports.BucketEventHandler = BucketEventHandler;
_c = JSII_RTTI_SYMBOL_1;
BucketEventHandler[_c] = { fqn: "@winglang/sdk.aws.BucketEventHandler", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,