import { S3Client } from "@aws-sdk/client-s3";
import { IAwsBucketClient } from "./bucket";
import { ObjectMetadata, BucketPutOptions, BucketDeleteOptions, BucketSignedUrlOptions, BucketGetOptions, BucketTryGetOptions } from "../cloud";
import { Json } from "../std";
export declare class BucketClient implements IAwsBucketClient {
    private readonly bucketName;
    private readonly s3Client;
    constructor(bucketName: string, s3Client?: S3Client);
    bucketRegion(): Promise<string>;
    /**
     * Check if an object exists in the bucket
     *
     * @param key Key of the object
     */
    exists(key: string): Promise<boolean>;
    /**
     * Put object into bucket with given body contents
     *
     * @param key Key of the object
     * @param body string contents of the object
     */
    put(key: string, body: string, opts?: BucketPutOptions): Promise<void>;
    /**
     * Put Json object into bucket with given body contents
     *
     * @param key Key of the object
     * @param body Json object
     */
    putJson(key: string, body: Json): Promise<void>;
    /**
     * See https://github.com/aws/aws-sdk-js-v3/issues/1877
     */
    private getObjectContent;
    /**
     * Get an object from the bucket
     *
     * @param key Key of the object
     * @returns content of the object
     */
    get(key: string, options?: BucketGetOptions): Promise<string>;
    /**
     * Get an object from the bucket if it exists
     *
     * @param key Key of the object
     * @returns content of the object
     */
    tryGet(key: string, options?: BucketTryGetOptions): Promise<string | undefined>;
    /**
     * Get a Json object from the bucket
     *
     * @param key Key of the object
     * @returns Json content of the object
     */
    getJson(key: string): Promise<Json>;
    /**
     * Get a Json object from the bucket if it exists
     *
     * @param key Key of the object
     * @returns Json content of the object
     */
    tryGetJson(key: string): Promise<Json | undefined>;
    /**
     * Delete an object from the bucket
     *
     * @param key Key of the object
     * @param opts Option object supporting additional strategies to delete item from a bucket
     */
    delete(key: string, opts?: BucketDeleteOptions): Promise<void>;
    /**
     * Delete an object from the bucket if it exists
     *
     * @param key Key of the object
     * @param opts Option object supporting additional strategies to delete item from a bucket
     */
    tryDelete(key: string): Promise<boolean>;
    /**
     * List all keys in the bucket.
     * @param prefix Limits the response to keys that begin with the specified prefix
     * TODO - add pagination support, currently returns all existing keys in the bucket
     * https://github.com/winglang/wing/issues/315
     */
    list(prefix?: string): Promise<string[]>;
    /**
     * Copy an object to a new location in the bucket. If the destination object
     * already exists, it will be overwritten.
     * @param srcKey The key of the source object you wish to copy.
     * @param dstKey The key of the destination object after copying.
     */
    copy(srcKey: string, dstKey: string): Promise<void>;
    /**
     * Move an object to a new location in the bucket. If the destination object
     * already exists, it will be overwritten. Returns once the renaming is finished.
     * @param srcKey The key of the source object you wish to rename.
     * @param dstKey The key of the destination object after renaming.
     * @throws if `srcKey` object doesn't exist or if it matches `dstKey`.
     * @inflight
     */
    rename(srcKey: string, dstKey: string): Promise<void>;
    /**
     * Checks if the bucket is public
     * @returns true if the bucket is public and false otherwise
     */
    private checkIfPublic;
    /**
     * Returns a url to the given file.
     * @Throws if the file is not public or if object does not exist.
     */
    publicUrl(key: string): Promise<string>;
    /**
     * Returns a presigned URL for the specified key in the bucket.
     * @param key The key of the object in the bucket.
     * @param opts The options including the action and the duration for the signed URL.
     * @returns The presigned URL string.
     * @inflight
     */
    signedUrl(key: string, opts?: BucketSignedUrlOptions): Promise<string>;
    /**
     * Get the metadata of an object in the bucket.
     * @param key Key of the object.
     */
    metadata(key: string): Promise<ObjectMetadata>;
    private getLocation;
}
