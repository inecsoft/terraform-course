"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedisClientBase = exports.RedisInflightMethods = exports.Redis = exports.REDIS_FQN = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const constants_1 = require("../constants");
const types_1 = require("../core/types");
const std_1 = require("../std");
/**
 * Global identifier for `Redis`.
 */
exports.REDIS_FQN = (0, constants_1.fqnForType)("ex.Redis");
/**
 * A cloud redis db.
 *
 * @inflight `@winglang/sdk.ex.IRedisClient`
 * @abstract
 */
class Redis extends std_1.Resource {
    constructor(scope, id) {
        if (new.target === Redis) {
            return std_1.Resource._newFromFactory(exports.REDIS_FQN, scope, id);
        }
        super(scope, id);
        std_1.Node.of(this).title = "Redis";
        std_1.Node.of(this).description = "A Redis server";
    }
    /** @internal */
    get _liftMap() {
        return {};
    }
}
exports.Redis = Redis;
_a = JSII_RTTI_SYMBOL_1;
Redis[_a] = { fqn: "@winglang/sdk.ex.Redis", version: "0.0.0" };
/**
 * List of inflight operations available for `Redis`.
 * @internal
 */
var RedisInflightMethods;
(function (RedisInflightMethods) {
    /** `Redis.url` */
    RedisInflightMethods["URL"] = "url";
    /** `Redis.set` */
    RedisInflightMethods["SET"] = "set";
    /** `Redis.get` */
    RedisInflightMethods["GET"] = "get";
    /** `Redis.hset` */
    RedisInflightMethods["HSET"] = "hset";
    /** `Redis.hget` */
    RedisInflightMethods["HGET"] = "hget";
    /** `Redis.sadd` */
    RedisInflightMethods["SADD"] = "sadd";
    /** `Redis.smembers` */
    RedisInflightMethods["SMEMBERS"] = "smembers";
    /** `Redis.del` */
    RedisInflightMethods["DEL"] = "del";
})(RedisInflightMethods || (exports.RedisInflightMethods = RedisInflightMethods = {}));
/**
 * Base class for `Redis` Client.
 */
class RedisClientBase {
    async set(key, value) {
        let redis = await this.rawClient();
        await redis.set(key, value);
    }
    async get(key) {
        let redis = await this.rawClient();
        let result = (await redis.get(key)) ?? undefined; // for wing to return nil
        return result;
    }
    async hset(key, field, value) {
        const redis = await this.rawClient();
        const result = await redis.hset(key, field, value);
        return result;
    }
    async hget(key, field) {
        const redis = await this.rawClient();
        const result = await redis.hget(key, field);
        return result;
    }
    async sadd(key, value) {
        const redis = await this.rawClient();
        const result = await redis.sadd(key, value);
        return result;
    }
    async smembers(key) {
        const redis = await this.rawClient();
        const result = await redis.smembers(key);
        return result ?? [];
    }
    async del(key) {
        const redis = await this.rawClient();
        const result = await redis.del(key);
        return result;
    }
}
exports.RedisClientBase = RedisClientBase;
_b = JSII_RTTI_SYMBOL_1;
RedisClientBase[_b] = { fqn: "@winglang/sdk.ex.RedisClientBase", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,