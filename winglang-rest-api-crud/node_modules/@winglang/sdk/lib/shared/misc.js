"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isPath = exports.shell = exports.runCommand = exports.normalPath = exports.readJsonSync = void 0;
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const util_1 = require("util");
const execPromise = (0, util_1.promisify)(child_process_1.exec);
const execFilePromise = (0, util_1.promisify)(child_process_1.execFile);
function readJsonSync(file) {
    return JSON.parse((0, fs_1.readFileSync)(file, "utf-8"));
}
exports.readJsonSync = readJsonSync;
/**
 * Normalize windows paths to be posix-like.
 */
function normalPath(path) {
    if (process.platform === "win32") {
        return (path
            // force posix path separator
            .replace(/\\+/g, "/"));
    }
    else {
        return path;
    }
}
exports.normalPath = normalPath;
/**
 * Just a helpful wrapper around `execFile` that returns a promise.
 */
async function runCommand(cmd, args, options) {
    const { stdout } = await execFilePromise(cmd, args, options);
    return stdout;
}
exports.runCommand = runCommand;
/**
 * Just a helpful wrapper around `exec` that returns a promise.
 * This will run commands through the shell, while `runCommand` doesn't.
 */
async function shell(cmd, args, options) {
    const { stdout } = await execPromise(cmd + " " + args.join(" "), options);
    return stdout;
}
exports.shell = shell;
function isPath(s) {
    s = normalPath(s);
    return s.startsWith("./") || s.startsWith("../") || s.startsWith("/");
}
exports.isPath = isPath;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlzYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zaGFyZWQvbWlzYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxpREFBNkU7QUFDN0UsMkJBQWtDO0FBQ2xDLCtCQUFpQztBQUVqQyxNQUFNLFdBQVcsR0FBRyxJQUFBLGdCQUFTLEVBQUMsb0JBQUksQ0FBQyxDQUFDO0FBQ3BDLE1BQU0sZUFBZSxHQUFHLElBQUEsZ0JBQVMsRUFBQyx3QkFBUSxDQUFDLENBQUM7QUFFNUMsU0FBZ0IsWUFBWSxDQUFDLElBQVk7SUFDdkMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUEsaUJBQVksRUFBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUNqRCxDQUFDO0FBRkQsb0NBRUM7QUFFRDs7R0FFRztBQUNILFNBQWdCLFVBQVUsQ0FBQyxJQUFZO0lBQ3JDLElBQUksT0FBTyxDQUFDLFFBQVEsS0FBSyxPQUFPLEVBQUUsQ0FBQztRQUNqQyxPQUFPLENBQ0wsSUFBSTtZQUNGLDZCQUE2QjthQUM1QixPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUN4QixDQUFDO0lBQ0osQ0FBQztTQUFNLENBQUM7UUFDTixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7QUFDSCxDQUFDO0FBVkQsZ0NBVUM7QUFFRDs7R0FFRztBQUNJLEtBQUssVUFBVSxVQUFVLENBQzlCLEdBQVcsRUFDWCxJQUFjLEVBQ2QsT0FBeUI7SUFFekIsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLE1BQU0sZUFBZSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDN0QsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQVBELGdDQU9DO0FBRUQ7OztHQUdHO0FBQ0ksS0FBSyxVQUFVLEtBQUssQ0FDekIsR0FBVyxFQUNYLElBQWMsRUFDZCxPQUFxQjtJQUVyQixNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsTUFBTSxXQUFXLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzFFLE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFQRCxzQkFPQztBQUVELFNBQWdCLE1BQU0sQ0FBQyxDQUFTO0lBQzlCLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEIsT0FBTyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN4RSxDQUFDO0FBSEQsd0JBR0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeGVjT3B0aW9ucywgRXhlY0ZpbGVPcHRpb25zLCBleGVjLCBleGVjRmlsZSB9IGZyb20gXCJjaGlsZF9wcm9jZXNzXCI7XG5pbXBvcnQgeyByZWFkRmlsZVN5bmMgfSBmcm9tIFwiZnNcIjtcbmltcG9ydCB7IHByb21pc2lmeSB9IGZyb20gXCJ1dGlsXCI7XG5cbmNvbnN0IGV4ZWNQcm9taXNlID0gcHJvbWlzaWZ5KGV4ZWMpO1xuY29uc3QgZXhlY0ZpbGVQcm9taXNlID0gcHJvbWlzaWZ5KGV4ZWNGaWxlKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlYWRKc29uU3luYyhmaWxlOiBzdHJpbmcpIHtcbiAgcmV0dXJuIEpTT04ucGFyc2UocmVhZEZpbGVTeW5jKGZpbGUsIFwidXRmLThcIikpO1xufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSB3aW5kb3dzIHBhdGhzIHRvIGJlIHBvc2l4LWxpa2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxQYXRoKHBhdGg6IHN0cmluZykge1xuICBpZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gXCJ3aW4zMlwiKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHBhdGhcbiAgICAgICAgLy8gZm9yY2UgcG9zaXggcGF0aCBzZXBhcmF0b3JcbiAgICAgICAgLnJlcGxhY2UoL1xcXFwrL2csIFwiL1wiKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHBhdGg7XG4gIH1cbn1cblxuLyoqXG4gKiBKdXN0IGEgaGVscGZ1bCB3cmFwcGVyIGFyb3VuZCBgZXhlY0ZpbGVgIHRoYXQgcmV0dXJucyBhIHByb21pc2UuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBydW5Db21tYW5kKFxuICBjbWQ6IHN0cmluZyxcbiAgYXJnczogc3RyaW5nW10sXG4gIG9wdGlvbnM/OiBFeGVjRmlsZU9wdGlvbnNcbik6IFByb21pc2U8YW55PiB7XG4gIGNvbnN0IHsgc3Rkb3V0IH0gPSBhd2FpdCBleGVjRmlsZVByb21pc2UoY21kLCBhcmdzLCBvcHRpb25zKTtcbiAgcmV0dXJuIHN0ZG91dDtcbn1cblxuLyoqXG4gKiBKdXN0IGEgaGVscGZ1bCB3cmFwcGVyIGFyb3VuZCBgZXhlY2AgdGhhdCByZXR1cm5zIGEgcHJvbWlzZS5cbiAqIFRoaXMgd2lsbCBydW4gY29tbWFuZHMgdGhyb3VnaCB0aGUgc2hlbGwsIHdoaWxlIGBydW5Db21tYW5kYCBkb2Vzbid0LlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2hlbGwoXG4gIGNtZDogc3RyaW5nLFxuICBhcmdzOiBzdHJpbmdbXSxcbiAgb3B0aW9ucz86IEV4ZWNPcHRpb25zXG4pOiBQcm9taXNlPGFueT4ge1xuICBjb25zdCB7IHN0ZG91dCB9ID0gYXdhaXQgZXhlY1Byb21pc2UoY21kICsgXCIgXCIgKyBhcmdzLmpvaW4oXCIgXCIpLCBvcHRpb25zKTtcbiAgcmV0dXJuIHN0ZG91dDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUGF0aChzOiBzdHJpbmcpIHtcbiAgcyA9IG5vcm1hbFBhdGgocyk7XG4gIHJldHVybiBzLnN0YXJ0c1dpdGgoXCIuL1wiKSB8fCBzLnN0YXJ0c1dpdGgoXCIuLi9cIikgfHwgcy5zdGFydHNXaXRoKFwiL1wiKTtcbn1cbiJdfQ==