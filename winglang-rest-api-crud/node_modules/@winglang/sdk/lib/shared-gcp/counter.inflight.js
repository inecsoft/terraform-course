"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CounterClient = void 0;
const datastore_1 = require("@google-cloud/datastore");
const DEFAULT_COUNTER_KEY = "counter";
const COUNTER_ENTITY_KIND = "Counter";
class CounterClient {
    constructor(databaseName, initial = 0) {
        this.databaseName = databaseName;
        this.initial = initial;
        this.client = new datastore_1.Datastore({ databaseId: this.databaseName });
    }
    async inc(amount = 1, key = DEFAULT_COUNTER_KEY) {
        const currentValue = await this._getCounterValue(key);
        const newValue = currentValue + amount;
        await this._updateCounter(key, newValue);
        // Return the previous value before the increment
        return currentValue;
    }
    async dec(amount = 1, key = DEFAULT_COUNTER_KEY) {
        const currentValue = await this._getCounterValue(key);
        const newValue = currentValue - amount;
        await this._updateCounter(key, newValue);
        // Return the previous value before the decrement
        return currentValue;
    }
    async set(value, key = DEFAULT_COUNTER_KEY) {
        await this._updateCounter(key, value);
    }
    async peek(key = DEFAULT_COUNTER_KEY) {
        return this._getCounterValue(key);
    }
    async _getCounterValue(key) {
        const counterKey = this.client.key([COUNTER_ENTITY_KIND, key]);
        // Fetch the counter from the datastore
        const [existingCounter] = await this.client.get(counterKey);
        // If the counter exists, return its current count
        // Else, initialize it with the `initial` value
        if (existingCounter) {
            return existingCounter.count;
        }
        else {
            await this._initCounter(key);
            return this.initial;
        }
    }
    async _initCounter(key) {
        const counterEntity = {
            key: this.client.key([COUNTER_ENTITY_KIND, key]),
            data: { count: this.initial },
        };
        await this.client.insert(counterEntity);
    }
    async _updateCounter(key, newValue) {
        const counterEntity = {
            key: this.client.key([COUNTER_ENTITY_KIND, key]),
            data: { count: newValue },
        };
        await this.client.save(counterEntity);
    }
}
exports.CounterClient = CounterClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnRlci5pbmZsaWdodC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zaGFyZWQtZ2NwL2NvdW50ZXIuaW5mbGlnaHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsdURBQW9EO0FBR3BELE1BQU0sbUJBQW1CLEdBQUcsU0FBUyxDQUFDO0FBQ3RDLE1BQU0sbUJBQW1CLEdBQUcsU0FBUyxDQUFDO0FBRXRDLE1BQWEsYUFBYTtJQUd4QixZQUNtQixZQUFvQixFQUNwQixVQUFrQixDQUFDO1FBRG5CLGlCQUFZLEdBQVosWUFBWSxDQUFRO1FBQ3BCLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFFcEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLHFCQUFTLENBQUMsRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUVNLEtBQUssQ0FBQyxHQUFHLENBQ2QsU0FBaUIsQ0FBQyxFQUNsQixNQUFjLG1CQUFtQjtRQUVqQyxNQUFNLFlBQVksR0FBRyxNQUFNLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN0RCxNQUFNLFFBQVEsR0FBRyxZQUFZLEdBQUcsTUFBTSxDQUFDO1FBRXZDLE1BQU0sSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFFekMsaURBQWlEO1FBQ2pELE9BQU8sWUFBWSxDQUFDO0lBQ3RCLENBQUM7SUFFTSxLQUFLLENBQUMsR0FBRyxDQUNkLFNBQWlCLENBQUMsRUFDbEIsTUFBYyxtQkFBbUI7UUFFakMsTUFBTSxZQUFZLEdBQUcsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdEQsTUFBTSxRQUFRLEdBQUcsWUFBWSxHQUFHLE1BQU0sQ0FBQztRQUV2QyxNQUFNLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRXpDLGlEQUFpRDtRQUNqRCxPQUFPLFlBQVksQ0FBQztJQUN0QixDQUFDO0lBRU0sS0FBSyxDQUFDLEdBQUcsQ0FDZCxLQUFhLEVBQ2IsTUFBYyxtQkFBbUI7UUFFakMsTUFBTSxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRU0sS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFjLG1CQUFtQjtRQUNqRCxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRU8sS0FBSyxDQUFDLGdCQUFnQixDQUFDLEdBQVc7UUFDeEMsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBRS9ELHVDQUF1QztRQUN2QyxNQUFNLENBQUMsZUFBZSxDQUFDLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUU1RCxrREFBa0Q7UUFDbEQsK0NBQStDO1FBQy9DLElBQUksZUFBZSxFQUFFLENBQUM7WUFDcEIsT0FBTyxlQUFlLENBQUMsS0FBSyxDQUFDO1FBQy9CLENBQUM7YUFBTSxDQUFDO1lBQ04sTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzdCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN0QixDQUFDO0lBQ0gsQ0FBQztJQUVPLEtBQUssQ0FBQyxZQUFZLENBQUMsR0FBVztRQUNwQyxNQUFNLGFBQWEsR0FBRztZQUNwQixHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNoRCxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRTtTQUM5QixDQUFDO1FBRUYsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRU8sS0FBSyxDQUFDLGNBQWMsQ0FBQyxHQUFXLEVBQUUsUUFBZ0I7UUFDeEQsTUFBTSxhQUFhLEdBQUc7WUFDcEIsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDaEQsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRTtTQUMxQixDQUFDO1FBRUYsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN4QyxDQUFDO0NBQ0Y7QUFoRkQsc0NBZ0ZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGF0YXN0b3JlIH0gZnJvbSBcIkBnb29nbGUtY2xvdWQvZGF0YXN0b3JlXCI7XG5pbXBvcnQgdHlwZSB7IElDb3VudGVyQ2xpZW50IH0gZnJvbSBcIi4uL2Nsb3VkXCI7XG5cbmNvbnN0IERFRkFVTFRfQ09VTlRFUl9LRVkgPSBcImNvdW50ZXJcIjtcbmNvbnN0IENPVU5URVJfRU5USVRZX0tJTkQgPSBcIkNvdW50ZXJcIjtcblxuZXhwb3J0IGNsYXNzIENvdW50ZXJDbGllbnQgaW1wbGVtZW50cyBJQ291bnRlckNsaWVudCB7XG4gIHByaXZhdGUgcmVhZG9ubHkgY2xpZW50OiBEYXRhc3RvcmU7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBkYXRhYmFzZU5hbWU6IHN0cmluZyxcbiAgICBwcml2YXRlIHJlYWRvbmx5IGluaXRpYWw6IG51bWJlciA9IDBcbiAgKSB7XG4gICAgdGhpcy5jbGllbnQgPSBuZXcgRGF0YXN0b3JlKHsgZGF0YWJhc2VJZDogdGhpcy5kYXRhYmFzZU5hbWUgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgaW5jKFxuICAgIGFtb3VudDogbnVtYmVyID0gMSxcbiAgICBrZXk6IHN0cmluZyA9IERFRkFVTFRfQ09VTlRFUl9LRVlcbiAgKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICBjb25zdCBjdXJyZW50VmFsdWUgPSBhd2FpdCB0aGlzLl9nZXRDb3VudGVyVmFsdWUoa2V5KTtcbiAgICBjb25zdCBuZXdWYWx1ZSA9IGN1cnJlbnRWYWx1ZSArIGFtb3VudDtcblxuICAgIGF3YWl0IHRoaXMuX3VwZGF0ZUNvdW50ZXIoa2V5LCBuZXdWYWx1ZSk7XG5cbiAgICAvLyBSZXR1cm4gdGhlIHByZXZpb3VzIHZhbHVlIGJlZm9yZSB0aGUgaW5jcmVtZW50XG4gICAgcmV0dXJuIGN1cnJlbnRWYWx1ZTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBkZWMoXG4gICAgYW1vdW50OiBudW1iZXIgPSAxLFxuICAgIGtleTogc3RyaW5nID0gREVGQVVMVF9DT1VOVEVSX0tFWVxuICApOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IGF3YWl0IHRoaXMuX2dldENvdW50ZXJWYWx1ZShrZXkpO1xuICAgIGNvbnN0IG5ld1ZhbHVlID0gY3VycmVudFZhbHVlIC0gYW1vdW50O1xuXG4gICAgYXdhaXQgdGhpcy5fdXBkYXRlQ291bnRlcihrZXksIG5ld1ZhbHVlKTtcblxuICAgIC8vIFJldHVybiB0aGUgcHJldmlvdXMgdmFsdWUgYmVmb3JlIHRoZSBkZWNyZW1lbnRcbiAgICByZXR1cm4gY3VycmVudFZhbHVlO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHNldChcbiAgICB2YWx1ZTogbnVtYmVyLFxuICAgIGtleTogc3RyaW5nID0gREVGQVVMVF9DT1VOVEVSX0tFWVxuICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCB0aGlzLl91cGRhdGVDb3VudGVyKGtleSwgdmFsdWUpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHBlZWsoa2V5OiBzdHJpbmcgPSBERUZBVUxUX0NPVU5URVJfS0VZKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0Q291bnRlclZhbHVlKGtleSk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIF9nZXRDb3VudGVyVmFsdWUoa2V5OiBzdHJpbmcpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIGNvbnN0IGNvdW50ZXJLZXkgPSB0aGlzLmNsaWVudC5rZXkoW0NPVU5URVJfRU5USVRZX0tJTkQsIGtleV0pO1xuXG4gICAgLy8gRmV0Y2ggdGhlIGNvdW50ZXIgZnJvbSB0aGUgZGF0YXN0b3JlXG4gICAgY29uc3QgW2V4aXN0aW5nQ291bnRlcl0gPSBhd2FpdCB0aGlzLmNsaWVudC5nZXQoY291bnRlcktleSk7XG5cbiAgICAvLyBJZiB0aGUgY291bnRlciBleGlzdHMsIHJldHVybiBpdHMgY3VycmVudCBjb3VudFxuICAgIC8vIEVsc2UsIGluaXRpYWxpemUgaXQgd2l0aCB0aGUgYGluaXRpYWxgIHZhbHVlXG4gICAgaWYgKGV4aXN0aW5nQ291bnRlcikge1xuICAgICAgcmV0dXJuIGV4aXN0aW5nQ291bnRlci5jb3VudDtcbiAgICB9IGVsc2Uge1xuICAgICAgYXdhaXQgdGhpcy5faW5pdENvdW50ZXIoa2V5KTtcbiAgICAgIHJldHVybiB0aGlzLmluaXRpYWw7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBfaW5pdENvdW50ZXIoa2V5OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBjb3VudGVyRW50aXR5ID0ge1xuICAgICAga2V5OiB0aGlzLmNsaWVudC5rZXkoW0NPVU5URVJfRU5USVRZX0tJTkQsIGtleV0pLFxuICAgICAgZGF0YTogeyBjb3VudDogdGhpcy5pbml0aWFsIH0sXG4gICAgfTtcblxuICAgIGF3YWl0IHRoaXMuY2xpZW50Lmluc2VydChjb3VudGVyRW50aXR5KTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgX3VwZGF0ZUNvdW50ZXIoa2V5OiBzdHJpbmcsIG5ld1ZhbHVlOiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBjb3VudGVyRW50aXR5ID0ge1xuICAgICAga2V5OiB0aGlzLmNsaWVudC5rZXkoW0NPVU5URVJfRU5USVRZX0tJTkQsIGtleV0pLFxuICAgICAgZGF0YTogeyBjb3VudDogbmV3VmFsdWUgfSxcbiAgICB9O1xuXG4gICAgYXdhaXQgdGhpcy5jbGllbnQuc2F2ZShjb3VudGVyRW50aXR5KTtcbiAgfVxufVxuIl19