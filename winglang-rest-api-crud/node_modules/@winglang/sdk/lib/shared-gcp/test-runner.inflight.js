"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestRunnerClient = void 0;
const child_process_1 = require("child_process");
const function_inflight_1 = require("./function.inflight");
class TestRunnerClient {
    constructor(tests) {
        // Expects a JSON string of the form:
        // [
        //   ["testPath1", "functionArn1"],
        //   ["testPath2", "functionArn2"],
        //   ...
        // ]
        this.tests = new Map(JSON.parse(tests));
        this.token = (0, child_process_1.execSync)("gcloud auth print-identity-token")
            .toString()
            .replace("\n", "");
    }
    async listTests() {
        return Array.from(this.tests.keys());
    }
    async runTest(path) {
        let functionArn = this.tests.get(path);
        if (!functionArn) {
            throw new Error(`No test found with path "${path}"`);
        }
        const client = new function_inflight_1.FunctionClient(functionArn, process.env.GOOGLE_PROJECT_ID, process.env.GOOGLE_REGION);
        let traces = [];
        let pass = false;
        let error;
        try {
            const [_, functionTraces] = await client.invokeWithLogs("", this.token);
            traces.push(...functionTraces);
            pass = true;
        }
        catch (e) {
            error = e.stack;
        }
        return {
            path,
            pass,
            error,
            traces,
        };
    }
}
exports.TestRunnerClient = TestRunnerClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC1ydW5uZXIuaW5mbGlnaHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2hhcmVkLWdjcC90ZXN0LXJ1bm5lci5pbmZsaWdodC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxpREFBeUM7QUFDekMsMkRBQXFEO0FBR3JELE1BQWEsZ0JBQWdCO0lBSzNCLFlBQVksS0FBYTtRQUN2QixxQ0FBcUM7UUFDckMsSUFBSTtRQUNKLG1DQUFtQztRQUNuQyxtQ0FBbUM7UUFDbkMsUUFBUTtRQUNSLElBQUk7UUFDSixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUF1QixDQUFDLENBQUM7UUFDOUQsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFBLHdCQUFRLEVBQUMsa0NBQWtDLENBQUM7YUFDdEQsUUFBUSxFQUFFO2FBQ1YsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBRU0sS0FBSyxDQUFDLFNBQVM7UUFDcEIsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRU0sS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFZO1FBQy9CLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNqQixNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixJQUFJLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZELENBQUM7UUFFRCxNQUFNLE1BQU0sR0FBRyxJQUFJLGtDQUFjLENBQy9CLFdBQVcsRUFDWCxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUEyQixFQUN2QyxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQXVCLENBQ3BDLENBQUM7UUFDRixJQUFJLE1BQU0sR0FBWSxFQUFFLENBQUM7UUFDekIsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDO1FBQ2pCLElBQUksS0FBeUIsQ0FBQztRQUU5QixJQUFJLENBQUM7WUFDSCxNQUFNLENBQUMsQ0FBQyxFQUFFLGNBQWMsQ0FBQyxHQUFHLE1BQU0sTUFBTSxDQUFDLGNBQWMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3hFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxjQUFjLENBQUMsQ0FBQztZQUMvQixJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2QsQ0FBQztRQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDWCxLQUFLLEdBQUksQ0FBUyxDQUFDLEtBQUssQ0FBQztRQUMzQixDQUFDO1FBQ0QsT0FBTztZQUNMLElBQUk7WUFDSixJQUFJO1lBQ0osS0FBSztZQUNMLE1BQU07U0FDUCxDQUFDO0lBQ0osQ0FBQztDQUNGO0FBbkRELDRDQW1EQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4ZWNTeW5jIH0gZnJvbSBcImNoaWxkX3Byb2Nlc3NcIjtcbmltcG9ydCB7IEZ1bmN0aW9uQ2xpZW50IH0gZnJvbSBcIi4vZnVuY3Rpb24uaW5mbGlnaHRcIjtcbmltcG9ydCB7IElUZXN0UnVubmVyQ2xpZW50LCBUZXN0UmVzdWx0LCBUcmFjZSB9IGZyb20gXCIuLi9zdGRcIjtcblxuZXhwb3J0IGNsYXNzIFRlc3RSdW5uZXJDbGllbnQgaW1wbGVtZW50cyBJVGVzdFJ1bm5lckNsaWVudCB7XG4gIC8vIEEgbWFwIGZyb20gdGVzdCBuYW1lcyB0byB0aGVpciBjb3JyZXNwb25kaW5nIGZ1bmN0aW9uIEFSTnMuXG4gIHByaXZhdGUgcmVhZG9ubHkgdGVzdHM6IE1hcDxzdHJpbmcsIHN0cmluZz47XG4gIHByaXZhdGUgcmVhZG9ubHkgdG9rZW46IHN0cmluZztcblxuICBjb25zdHJ1Y3Rvcih0ZXN0czogc3RyaW5nKSB7XG4gICAgLy8gRXhwZWN0cyBhIEpTT04gc3RyaW5nIG9mIHRoZSBmb3JtOlxuICAgIC8vIFtcbiAgICAvLyAgIFtcInRlc3RQYXRoMVwiLCBcImZ1bmN0aW9uQXJuMVwiXSxcbiAgICAvLyAgIFtcInRlc3RQYXRoMlwiLCBcImZ1bmN0aW9uQXJuMlwiXSxcbiAgICAvLyAgIC4uLlxuICAgIC8vIF1cbiAgICB0aGlzLnRlc3RzID0gbmV3IE1hcChKU09OLnBhcnNlKHRlc3RzKSBhcyBbc3RyaW5nLCBzdHJpbmddW10pO1xuICAgIHRoaXMudG9rZW4gPSBleGVjU3luYyhcImdjbG91ZCBhdXRoIHByaW50LWlkZW50aXR5LXRva2VuXCIpXG4gICAgICAudG9TdHJpbmcoKVxuICAgICAgLnJlcGxhY2UoXCJcXG5cIiwgXCJcIik7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgbGlzdFRlc3RzKCk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnRlc3RzLmtleXMoKSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgcnVuVGVzdChwYXRoOiBzdHJpbmcpOiBQcm9taXNlPFRlc3RSZXN1bHQ+IHtcbiAgICBsZXQgZnVuY3Rpb25Bcm4gPSB0aGlzLnRlc3RzLmdldChwYXRoKTtcbiAgICBpZiAoIWZ1bmN0aW9uQXJuKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIHRlc3QgZm91bmQgd2l0aCBwYXRoIFwiJHtwYXRofVwiYCk7XG4gICAgfVxuXG4gICAgY29uc3QgY2xpZW50ID0gbmV3IEZ1bmN0aW9uQ2xpZW50KFxuICAgICAgZnVuY3Rpb25Bcm4sXG4gICAgICBwcm9jZXNzLmVudi5HT09HTEVfUFJPSkVDVF9JRCBhcyBzdHJpbmcsXG4gICAgICBwcm9jZXNzLmVudi5HT09HTEVfUkVHSU9OIGFzIHN0cmluZ1xuICAgICk7XG4gICAgbGV0IHRyYWNlczogVHJhY2VbXSA9IFtdO1xuICAgIGxldCBwYXNzID0gZmFsc2U7XG4gICAgbGV0IGVycm9yOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgW18sIGZ1bmN0aW9uVHJhY2VzXSA9IGF3YWl0IGNsaWVudC5pbnZva2VXaXRoTG9ncyhcIlwiLCB0aGlzLnRva2VuKTtcbiAgICAgIHRyYWNlcy5wdXNoKC4uLmZ1bmN0aW9uVHJhY2VzKTtcbiAgICAgIHBhc3MgPSB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGVycm9yID0gKGUgYXMgYW55KS5zdGFjaztcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGgsXG4gICAgICBwYXNzLFxuICAgICAgZXJyb3IsXG4gICAgICB0cmFjZXMsXG4gICAgfTtcbiAgfVxufVxuIl19