"use strict";
// https://registry.terraform.io/providers/hashicorp/aws/5.31.0/docs/resources/sns_topic_subscription
// generated from terraform resource schema
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SnsTopicSubscription = void 0;
const cdktf = __importStar(require("cdktf"));
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/5.31.0/docs/resources/sns_topic_subscription aws_sns_topic_subscription}
*/
class SnsTopicSubscription extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a SnsTopicSubscription resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the SnsTopicSubscription to import
    * @param importFromId The id of the existing SnsTopicSubscription that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/5.31.0/docs/resources/sns_topic_subscription#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the SnsTopicSubscription to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_sns_topic_subscription", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/5.31.0/docs/resources/sns_topic_subscription aws_sns_topic_subscription} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SnsTopicSubscriptionConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_sns_topic_subscription',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '5.31.0',
                providerVersionConstraint: '~>5.31.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        this._confirmationTimeoutInMinutes = config.confirmationTimeoutInMinutes;
        this._deliveryPolicy = config.deliveryPolicy;
        this._endpoint = config.endpoint;
        this._endpointAutoConfirms = config.endpointAutoConfirms;
        this._filterPolicy = config.filterPolicy;
        this._filterPolicyScope = config.filterPolicyScope;
        this._id = config.id;
        this._protocol = config.protocol;
        this._rawMessageDelivery = config.rawMessageDelivery;
        this._redrivePolicy = config.redrivePolicy;
        this._replayPolicy = config.replayPolicy;
        this._subscriptionRoleArn = config.subscriptionRoleArn;
        this._topicArn = config.topicArn;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    get confirmationTimeoutInMinutes() {
        return this.getNumberAttribute('confirmation_timeout_in_minutes');
    }
    set confirmationTimeoutInMinutes(value) {
        this._confirmationTimeoutInMinutes = value;
    }
    resetConfirmationTimeoutInMinutes() {
        this._confirmationTimeoutInMinutes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get confirmationTimeoutInMinutesInput() {
        return this._confirmationTimeoutInMinutes;
    }
    // confirmation_was_authenticated - computed: true, optional: false, required: false
    get confirmationWasAuthenticated() {
        return this.getBooleanAttribute('confirmation_was_authenticated');
    }
    get deliveryPolicy() {
        return this.getStringAttribute('delivery_policy');
    }
    set deliveryPolicy(value) {
        this._deliveryPolicy = value;
    }
    resetDeliveryPolicy() {
        this._deliveryPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deliveryPolicyInput() {
        return this._deliveryPolicy;
    }
    get endpoint() {
        return this.getStringAttribute('endpoint');
    }
    set endpoint(value) {
        this._endpoint = value;
    }
    // Temporarily expose input value. Use with caution.
    get endpointInput() {
        return this._endpoint;
    }
    get endpointAutoConfirms() {
        return this.getBooleanAttribute('endpoint_auto_confirms');
    }
    set endpointAutoConfirms(value) {
        this._endpointAutoConfirms = value;
    }
    resetEndpointAutoConfirms() {
        this._endpointAutoConfirms = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get endpointAutoConfirmsInput() {
        return this._endpointAutoConfirms;
    }
    get filterPolicy() {
        return this.getStringAttribute('filter_policy');
    }
    set filterPolicy(value) {
        this._filterPolicy = value;
    }
    resetFilterPolicy() {
        this._filterPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get filterPolicyInput() {
        return this._filterPolicy;
    }
    get filterPolicyScope() {
        return this.getStringAttribute('filter_policy_scope');
    }
    set filterPolicyScope(value) {
        this._filterPolicyScope = value;
    }
    resetFilterPolicyScope() {
        this._filterPolicyScope = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get filterPolicyScopeInput() {
        return this._filterPolicyScope;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // owner_id - computed: true, optional: false, required: false
    get ownerId() {
        return this.getStringAttribute('owner_id');
    }
    // pending_confirmation - computed: true, optional: false, required: false
    get pendingConfirmation() {
        return this.getBooleanAttribute('pending_confirmation');
    }
    get protocol() {
        return this.getStringAttribute('protocol');
    }
    set protocol(value) {
        this._protocol = value;
    }
    // Temporarily expose input value. Use with caution.
    get protocolInput() {
        return this._protocol;
    }
    get rawMessageDelivery() {
        return this.getBooleanAttribute('raw_message_delivery');
    }
    set rawMessageDelivery(value) {
        this._rawMessageDelivery = value;
    }
    resetRawMessageDelivery() {
        this._rawMessageDelivery = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rawMessageDeliveryInput() {
        return this._rawMessageDelivery;
    }
    get redrivePolicy() {
        return this.getStringAttribute('redrive_policy');
    }
    set redrivePolicy(value) {
        this._redrivePolicy = value;
    }
    resetRedrivePolicy() {
        this._redrivePolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redrivePolicyInput() {
        return this._redrivePolicy;
    }
    get replayPolicy() {
        return this.getStringAttribute('replay_policy');
    }
    set replayPolicy(value) {
        this._replayPolicy = value;
    }
    resetReplayPolicy() {
        this._replayPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replayPolicyInput() {
        return this._replayPolicy;
    }
    get subscriptionRoleArn() {
        return this.getStringAttribute('subscription_role_arn');
    }
    set subscriptionRoleArn(value) {
        this._subscriptionRoleArn = value;
    }
    resetSubscriptionRoleArn() {
        this._subscriptionRoleArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subscriptionRoleArnInput() {
        return this._subscriptionRoleArn;
    }
    get topicArn() {
        return this.getStringAttribute('topic_arn');
    }
    set topicArn(value) {
        this._topicArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get topicArnInput() {
        return this._topicArn;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            confirmation_timeout_in_minutes: cdktf.numberToTerraform(this._confirmationTimeoutInMinutes),
            delivery_policy: cdktf.stringToTerraform(this._deliveryPolicy),
            endpoint: cdktf.stringToTerraform(this._endpoint),
            endpoint_auto_confirms: cdktf.booleanToTerraform(this._endpointAutoConfirms),
            filter_policy: cdktf.stringToTerraform(this._filterPolicy),
            filter_policy_scope: cdktf.stringToTerraform(this._filterPolicyScope),
            id: cdktf.stringToTerraform(this._id),
            protocol: cdktf.stringToTerraform(this._protocol),
            raw_message_delivery: cdktf.booleanToTerraform(this._rawMessageDelivery),
            redrive_policy: cdktf.stringToTerraform(this._redrivePolicy),
            replay_policy: cdktf.stringToTerraform(this._replayPolicy),
            subscription_role_arn: cdktf.stringToTerraform(this._subscriptionRoleArn),
            topic_arn: cdktf.stringToTerraform(this._topicArn),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            confirmation_timeout_in_minutes: {
                value: cdktf.numberToHclTerraform(this._confirmationTimeoutInMinutes),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            delivery_policy: {
                value: cdktf.stringToHclTerraform(this._deliveryPolicy),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            endpoint: {
                value: cdktf.stringToHclTerraform(this._endpoint),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            endpoint_auto_confirms: {
                value: cdktf.booleanToHclTerraform(this._endpointAutoConfirms),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            filter_policy: {
                value: cdktf.stringToHclTerraform(this._filterPolicy),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            filter_policy_scope: {
                value: cdktf.stringToHclTerraform(this._filterPolicyScope),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            protocol: {
                value: cdktf.stringToHclTerraform(this._protocol),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            raw_message_delivery: {
                value: cdktf.booleanToHclTerraform(this._rawMessageDelivery),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            redrive_policy: {
                value: cdktf.stringToHclTerraform(this._redrivePolicy),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            replay_policy: {
                value: cdktf.stringToHclTerraform(this._replayPolicy),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            subscription_role_arn: {
                value: cdktf.stringToHclTerraform(this._subscriptionRoleArn),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            topic_arn: {
                value: cdktf.stringToHclTerraform(this._topicArn),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.SnsTopicSubscription = SnsTopicSubscription;
// =================
// STATIC PROPERTIES
// =================
SnsTopicSubscription.tfResourceType = "aws_sns_topic_subscription";
//# sourceMappingURL=data:application/json;base64,