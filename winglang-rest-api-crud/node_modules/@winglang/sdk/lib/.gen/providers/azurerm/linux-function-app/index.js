"use strict";
// https://registry.terraform.io/providers/hashicorp/azurerm/3.96.0/docs/resources/linux_function_app
// generated from terraform resource schema
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LinuxFunctionAppAuthSettingsV2LoginOutputReference = exports.linuxFunctionAppAuthSettingsV2LoginToHclTerraform = exports.linuxFunctionAppAuthSettingsV2LoginToTerraform = exports.LinuxFunctionAppAuthSettingsV2GoogleV2OutputReference = exports.linuxFunctionAppAuthSettingsV2GoogleV2ToHclTerraform = exports.linuxFunctionAppAuthSettingsV2GoogleV2ToTerraform = exports.LinuxFunctionAppAuthSettingsV2GithubV2OutputReference = exports.linuxFunctionAppAuthSettingsV2GithubV2ToHclTerraform = exports.linuxFunctionAppAuthSettingsV2GithubV2ToTerraform = exports.LinuxFunctionAppAuthSettingsV2FacebookV2OutputReference = exports.linuxFunctionAppAuthSettingsV2FacebookV2ToHclTerraform = exports.linuxFunctionAppAuthSettingsV2FacebookV2ToTerraform = exports.LinuxFunctionAppAuthSettingsV2CustomOidcV2List = exports.LinuxFunctionAppAuthSettingsV2CustomOidcV2OutputReference = exports.linuxFunctionAppAuthSettingsV2CustomOidcV2ToHclTerraform = exports.linuxFunctionAppAuthSettingsV2CustomOidcV2ToTerraform = exports.LinuxFunctionAppAuthSettingsV2AzureStaticWebAppV2OutputReference = exports.linuxFunctionAppAuthSettingsV2AzureStaticWebAppV2ToHclTerraform = exports.linuxFunctionAppAuthSettingsV2AzureStaticWebAppV2ToTerraform = exports.LinuxFunctionAppAuthSettingsV2AppleV2OutputReference = exports.linuxFunctionAppAuthSettingsV2AppleV2ToHclTerraform = exports.linuxFunctionAppAuthSettingsV2AppleV2ToTerraform = exports.LinuxFunctionAppAuthSettingsV2ActiveDirectoryV2OutputReference = exports.linuxFunctionAppAuthSettingsV2ActiveDirectoryV2ToHclTerraform = exports.linuxFunctionAppAuthSettingsV2ActiveDirectoryV2ToTerraform = exports.LinuxFunctionAppAuthSettingsOutputReference = exports.linuxFunctionAppAuthSettingsToHclTerraform = exports.linuxFunctionAppAuthSettingsToTerraform = exports.LinuxFunctionAppAuthSettingsTwitterOutputReference = exports.linuxFunctionAppAuthSettingsTwitterToHclTerraform = exports.linuxFunctionAppAuthSettingsTwitterToTerraform = exports.LinuxFunctionAppAuthSettingsMicrosoftOutputReference = exports.linuxFunctionAppAuthSettingsMicrosoftToHclTerraform = exports.linuxFunctionAppAuthSettingsMicrosoftToTerraform = exports.LinuxFunctionAppAuthSettingsGoogleOutputReference = exports.linuxFunctionAppAuthSettingsGoogleToHclTerraform = exports.linuxFunctionAppAuthSettingsGoogleToTerraform = exports.LinuxFunctionAppAuthSettingsGithubOutputReference = exports.linuxFunctionAppAuthSettingsGithubToHclTerraform = exports.linuxFunctionAppAuthSettingsGithubToTerraform = exports.LinuxFunctionAppAuthSettingsFacebookOutputReference = exports.linuxFunctionAppAuthSettingsFacebookToHclTerraform = exports.linuxFunctionAppAuthSettingsFacebookToTerraform = exports.LinuxFunctionAppAuthSettingsActiveDirectoryOutputReference = exports.linuxFunctionAppAuthSettingsActiveDirectoryToHclTerraform = exports.linuxFunctionAppAuthSettingsActiveDirectoryToTerraform = exports.LinuxFunctionAppSiteCredentialList = exports.LinuxFunctionAppSiteCredentialOutputReference = exports.linuxFunctionAppSiteCredentialToHclTerraform = exports.linuxFunctionAppSiteCredentialToTerraform = void 0;
exports.LinuxFunctionAppSiteConfigScmIpRestrictionOutputReference = exports.linuxFunctionAppSiteConfigScmIpRestrictionToHclTerraform = exports.linuxFunctionAppSiteConfigScmIpRestrictionToTerraform = exports.LinuxFunctionAppSiteConfigScmIpRestrictionHeadersList = exports.LinuxFunctionAppSiteConfigScmIpRestrictionHeadersOutputReference = exports.linuxFunctionAppSiteConfigScmIpRestrictionHeadersToHclTerraform = exports.linuxFunctionAppSiteConfigScmIpRestrictionHeadersToTerraform = exports.LinuxFunctionAppSiteConfigIpRestrictionList = exports.LinuxFunctionAppSiteConfigIpRestrictionOutputReference = exports.linuxFunctionAppSiteConfigIpRestrictionToHclTerraform = exports.linuxFunctionAppSiteConfigIpRestrictionToTerraform = exports.LinuxFunctionAppSiteConfigIpRestrictionHeadersList = exports.LinuxFunctionAppSiteConfigIpRestrictionHeadersOutputReference = exports.linuxFunctionAppSiteConfigIpRestrictionHeadersToHclTerraform = exports.linuxFunctionAppSiteConfigIpRestrictionHeadersToTerraform = exports.LinuxFunctionAppSiteConfigCorsOutputReference = exports.linuxFunctionAppSiteConfigCorsToHclTerraform = exports.linuxFunctionAppSiteConfigCorsToTerraform = exports.LinuxFunctionAppSiteConfigApplicationStackOutputReference = exports.linuxFunctionAppSiteConfigApplicationStackToHclTerraform = exports.linuxFunctionAppSiteConfigApplicationStackToTerraform = exports.LinuxFunctionAppSiteConfigApplicationStackDockerList = exports.LinuxFunctionAppSiteConfigApplicationStackDockerOutputReference = exports.linuxFunctionAppSiteConfigApplicationStackDockerToHclTerraform = exports.linuxFunctionAppSiteConfigApplicationStackDockerToTerraform = exports.LinuxFunctionAppSiteConfigAppServiceLogsOutputReference = exports.linuxFunctionAppSiteConfigAppServiceLogsToHclTerraform = exports.linuxFunctionAppSiteConfigAppServiceLogsToTerraform = exports.LinuxFunctionAppIdentityOutputReference = exports.linuxFunctionAppIdentityToHclTerraform = exports.linuxFunctionAppIdentityToTerraform = exports.LinuxFunctionAppConnectionStringList = exports.LinuxFunctionAppConnectionStringOutputReference = exports.linuxFunctionAppConnectionStringToHclTerraform = exports.linuxFunctionAppConnectionStringToTerraform = exports.LinuxFunctionAppBackupOutputReference = exports.linuxFunctionAppBackupToHclTerraform = exports.linuxFunctionAppBackupToTerraform = exports.LinuxFunctionAppBackupScheduleOutputReference = exports.linuxFunctionAppBackupScheduleToHclTerraform = exports.linuxFunctionAppBackupScheduleToTerraform = exports.LinuxFunctionAppAuthSettingsV2OutputReference = exports.linuxFunctionAppAuthSettingsV2ToHclTerraform = exports.linuxFunctionAppAuthSettingsV2ToTerraform = exports.LinuxFunctionAppAuthSettingsV2TwitterV2OutputReference = exports.linuxFunctionAppAuthSettingsV2TwitterV2ToHclTerraform = exports.linuxFunctionAppAuthSettingsV2TwitterV2ToTerraform = exports.LinuxFunctionAppAuthSettingsV2MicrosoftV2OutputReference = exports.linuxFunctionAppAuthSettingsV2MicrosoftV2ToHclTerraform = exports.linuxFunctionAppAuthSettingsV2MicrosoftV2ToTerraform = void 0;
exports.LinuxFunctionApp = exports.LinuxFunctionAppTimeoutsOutputReference = exports.linuxFunctionAppTimeoutsToHclTerraform = exports.linuxFunctionAppTimeoutsToTerraform = exports.LinuxFunctionAppStorageAccountList = exports.LinuxFunctionAppStorageAccountOutputReference = exports.linuxFunctionAppStorageAccountToHclTerraform = exports.linuxFunctionAppStorageAccountToTerraform = exports.LinuxFunctionAppStickySettingsOutputReference = exports.linuxFunctionAppStickySettingsToHclTerraform = exports.linuxFunctionAppStickySettingsToTerraform = exports.LinuxFunctionAppSiteConfigOutputReference = exports.linuxFunctionAppSiteConfigToHclTerraform = exports.linuxFunctionAppSiteConfigToTerraform = exports.LinuxFunctionAppSiteConfigScmIpRestrictionList = void 0;
const cdktf = __importStar(require("cdktf"));
function linuxFunctionAppSiteCredentialToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.linuxFunctionAppSiteCredentialToTerraform = linuxFunctionAppSiteCredentialToTerraform;
function linuxFunctionAppSiteCredentialToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.linuxFunctionAppSiteCredentialToHclTerraform = linuxFunctionAppSiteCredentialToHclTerraform;
class LinuxFunctionAppSiteCredentialOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    // password - computed: true, optional: false, required: false
    get password() {
        return this.getStringAttribute('password');
    }
}
exports.LinuxFunctionAppSiteCredentialOutputReference = LinuxFunctionAppSiteCredentialOutputReference;
class LinuxFunctionAppSiteCredentialList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new LinuxFunctionAppSiteCredentialOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.LinuxFunctionAppSiteCredentialList = LinuxFunctionAppSiteCredentialList;
function linuxFunctionAppAuthSettingsActiveDirectoryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allowed_audiences: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowedAudiences),
        client_id: cdktf.stringToTerraform(struct.clientId),
        client_secret: cdktf.stringToTerraform(struct.clientSecret),
        client_secret_setting_name: cdktf.stringToTerraform(struct.clientSecretSettingName),
    };
}
exports.linuxFunctionAppAuthSettingsActiveDirectoryToTerraform = linuxFunctionAppAuthSettingsActiveDirectoryToTerraform;
function linuxFunctionAppAuthSettingsActiveDirectoryToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allowed_audiences: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.allowedAudiences),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        client_id: {
            value: cdktf.stringToHclTerraform(struct.clientId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_secret: {
            value: cdktf.stringToHclTerraform(struct.clientSecret),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_secret_setting_name: {
            value: cdktf.stringToHclTerraform(struct.clientSecretSettingName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.linuxFunctionAppAuthSettingsActiveDirectoryToHclTerraform = linuxFunctionAppAuthSettingsActiveDirectoryToHclTerraform;
class LinuxFunctionAppAuthSettingsActiveDirectoryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowedAudiences !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedAudiences = this._allowedAudiences;
        }
        if (this._clientId !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientId = this._clientId;
        }
        if (this._clientSecret !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientSecret = this._clientSecret;
        }
        if (this._clientSecretSettingName !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientSecretSettingName = this._clientSecretSettingName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowedAudiences = undefined;
            this._clientId = undefined;
            this._clientSecret = undefined;
            this._clientSecretSettingName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowedAudiences = value.allowedAudiences;
            this._clientId = value.clientId;
            this._clientSecret = value.clientSecret;
            this._clientSecretSettingName = value.clientSecretSettingName;
        }
    }
    get allowedAudiences() {
        return this.getListAttribute('allowed_audiences');
    }
    set allowedAudiences(value) {
        this._allowedAudiences = value;
    }
    resetAllowedAudiences() {
        this._allowedAudiences = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedAudiencesInput() {
        return this._allowedAudiences;
    }
    get clientId() {
        return this.getStringAttribute('client_id');
    }
    set clientId(value) {
        this._clientId = value;
    }
    // Temporarily expose input value. Use with caution.
    get clientIdInput() {
        return this._clientId;
    }
    get clientSecret() {
        return this.getStringAttribute('client_secret');
    }
    set clientSecret(value) {
        this._clientSecret = value;
    }
    resetClientSecret() {
        this._clientSecret = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientSecretInput() {
        return this._clientSecret;
    }
    get clientSecretSettingName() {
        return this.getStringAttribute('client_secret_setting_name');
    }
    set clientSecretSettingName(value) {
        this._clientSecretSettingName = value;
    }
    resetClientSecretSettingName() {
        this._clientSecretSettingName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientSecretSettingNameInput() {
        return this._clientSecretSettingName;
    }
}
exports.LinuxFunctionAppAuthSettingsActiveDirectoryOutputReference = LinuxFunctionAppAuthSettingsActiveDirectoryOutputReference;
function linuxFunctionAppAuthSettingsFacebookToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        app_id: cdktf.stringToTerraform(struct.appId),
        app_secret: cdktf.stringToTerraform(struct.appSecret),
        app_secret_setting_name: cdktf.stringToTerraform(struct.appSecretSettingName),
        oauth_scopes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.oauthScopes),
    };
}
exports.linuxFunctionAppAuthSettingsFacebookToTerraform = linuxFunctionAppAuthSettingsFacebookToTerraform;
function linuxFunctionAppAuthSettingsFacebookToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        app_id: {
            value: cdktf.stringToHclTerraform(struct.appId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        app_secret: {
            value: cdktf.stringToHclTerraform(struct.appSecret),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        app_secret_setting_name: {
            value: cdktf.stringToHclTerraform(struct.appSecretSettingName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        oauth_scopes: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.oauthScopes),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.linuxFunctionAppAuthSettingsFacebookToHclTerraform = linuxFunctionAppAuthSettingsFacebookToHclTerraform;
class LinuxFunctionAppAuthSettingsFacebookOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._appId !== undefined) {
            hasAnyValues = true;
            internalValueResult.appId = this._appId;
        }
        if (this._appSecret !== undefined) {
            hasAnyValues = true;
            internalValueResult.appSecret = this._appSecret;
        }
        if (this._appSecretSettingName !== undefined) {
            hasAnyValues = true;
            internalValueResult.appSecretSettingName = this._appSecretSettingName;
        }
        if (this._oauthScopes !== undefined) {
            hasAnyValues = true;
            internalValueResult.oauthScopes = this._oauthScopes;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._appId = undefined;
            this._appSecret = undefined;
            this._appSecretSettingName = undefined;
            this._oauthScopes = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._appId = value.appId;
            this._appSecret = value.appSecret;
            this._appSecretSettingName = value.appSecretSettingName;
            this._oauthScopes = value.oauthScopes;
        }
    }
    get appId() {
        return this.getStringAttribute('app_id');
    }
    set appId(value) {
        this._appId = value;
    }
    // Temporarily expose input value. Use with caution.
    get appIdInput() {
        return this._appId;
    }
    get appSecret() {
        return this.getStringAttribute('app_secret');
    }
    set appSecret(value) {
        this._appSecret = value;
    }
    resetAppSecret() {
        this._appSecret = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get appSecretInput() {
        return this._appSecret;
    }
    get appSecretSettingName() {
        return this.getStringAttribute('app_secret_setting_name');
    }
    set appSecretSettingName(value) {
        this._appSecretSettingName = value;
    }
    resetAppSecretSettingName() {
        this._appSecretSettingName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get appSecretSettingNameInput() {
        return this._appSecretSettingName;
    }
    get oauthScopes() {
        return this.getListAttribute('oauth_scopes');
    }
    set oauthScopes(value) {
        this._oauthScopes = value;
    }
    resetOauthScopes() {
        this._oauthScopes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oauthScopesInput() {
        return this._oauthScopes;
    }
}
exports.LinuxFunctionAppAuthSettingsFacebookOutputReference = LinuxFunctionAppAuthSettingsFacebookOutputReference;
function linuxFunctionAppAuthSettingsGithubToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        client_id: cdktf.stringToTerraform(struct.clientId),
        client_secret: cdktf.stringToTerraform(struct.clientSecret),
        client_secret_setting_name: cdktf.stringToTerraform(struct.clientSecretSettingName),
        oauth_scopes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.oauthScopes),
    };
}
exports.linuxFunctionAppAuthSettingsGithubToTerraform = linuxFunctionAppAuthSettingsGithubToTerraform;
function linuxFunctionAppAuthSettingsGithubToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        client_id: {
            value: cdktf.stringToHclTerraform(struct.clientId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_secret: {
            value: cdktf.stringToHclTerraform(struct.clientSecret),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_secret_setting_name: {
            value: cdktf.stringToHclTerraform(struct.clientSecretSettingName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        oauth_scopes: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.oauthScopes),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.linuxFunctionAppAuthSettingsGithubToHclTerraform = linuxFunctionAppAuthSettingsGithubToHclTerraform;
class LinuxFunctionAppAuthSettingsGithubOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clientId !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientId = this._clientId;
        }
        if (this._clientSecret !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientSecret = this._clientSecret;
        }
        if (this._clientSecretSettingName !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientSecretSettingName = this._clientSecretSettingName;
        }
        if (this._oauthScopes !== undefined) {
            hasAnyValues = true;
            internalValueResult.oauthScopes = this._oauthScopes;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._clientId = undefined;
            this._clientSecret = undefined;
            this._clientSecretSettingName = undefined;
            this._oauthScopes = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._clientId = value.clientId;
            this._clientSecret = value.clientSecret;
            this._clientSecretSettingName = value.clientSecretSettingName;
            this._oauthScopes = value.oauthScopes;
        }
    }
    get clientId() {
        return this.getStringAttribute('client_id');
    }
    set clientId(value) {
        this._clientId = value;
    }
    // Temporarily expose input value. Use with caution.
    get clientIdInput() {
        return this._clientId;
    }
    get clientSecret() {
        return this.getStringAttribute('client_secret');
    }
    set clientSecret(value) {
        this._clientSecret = value;
    }
    resetClientSecret() {
        this._clientSecret = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientSecretInput() {
        return this._clientSecret;
    }
    get clientSecretSettingName() {
        return this.getStringAttribute('client_secret_setting_name');
    }
    set clientSecretSettingName(value) {
        this._clientSecretSettingName = value;
    }
    resetClientSecretSettingName() {
        this._clientSecretSettingName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientSecretSettingNameInput() {
        return this._clientSecretSettingName;
    }
    get oauthScopes() {
        return this.getListAttribute('oauth_scopes');
    }
    set oauthScopes(value) {
        this._oauthScopes = value;
    }
    resetOauthScopes() {
        this._oauthScopes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oauthScopesInput() {
        return this._oauthScopes;
    }
}
exports.LinuxFunctionAppAuthSettingsGithubOutputReference = LinuxFunctionAppAuthSettingsGithubOutputReference;
function linuxFunctionAppAuthSettingsGoogleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        client_id: cdktf.stringToTerraform(struct.clientId),
        client_secret: cdktf.stringToTerraform(struct.clientSecret),
        client_secret_setting_name: cdktf.stringToTerraform(struct.clientSecretSettingName),
        oauth_scopes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.oauthScopes),
    };
}
exports.linuxFunctionAppAuthSettingsGoogleToTerraform = linuxFunctionAppAuthSettingsGoogleToTerraform;
function linuxFunctionAppAuthSettingsGoogleToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        client_id: {
            value: cdktf.stringToHclTerraform(struct.clientId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_secret: {
            value: cdktf.stringToHclTerraform(struct.clientSecret),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_secret_setting_name: {
            value: cdktf.stringToHclTerraform(struct.clientSecretSettingName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        oauth_scopes: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.oauthScopes),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.linuxFunctionAppAuthSettingsGoogleToHclTerraform = linuxFunctionAppAuthSettingsGoogleToHclTerraform;
class LinuxFunctionAppAuthSettingsGoogleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clientId !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientId = this._clientId;
        }
        if (this._clientSecret !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientSecret = this._clientSecret;
        }
        if (this._clientSecretSettingName !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientSecretSettingName = this._clientSecretSettingName;
        }
        if (this._oauthScopes !== undefined) {
            hasAnyValues = true;
            internalValueResult.oauthScopes = this._oauthScopes;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._clientId = undefined;
            this._clientSecret = undefined;
            this._clientSecretSettingName = undefined;
            this._oauthScopes = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._clientId = value.clientId;
            this._clientSecret = value.clientSecret;
            this._clientSecretSettingName = value.clientSecretSettingName;
            this._oauthScopes = value.oauthScopes;
        }
    }
    get clientId() {
        return this.getStringAttribute('client_id');
    }
    set clientId(value) {
        this._clientId = value;
    }
    // Temporarily expose input value. Use with caution.
    get clientIdInput() {
        return this._clientId;
    }
    get clientSecret() {
        return this.getStringAttribute('client_secret');
    }
    set clientSecret(value) {
        this._clientSecret = value;
    }
    resetClientSecret() {
        this._clientSecret = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientSecretInput() {
        return this._clientSecret;
    }
    get clientSecretSettingName() {
        return this.getStringAttribute('client_secret_setting_name');
    }
    set clientSecretSettingName(value) {
        this._clientSecretSettingName = value;
    }
    resetClientSecretSettingName() {
        this._clientSecretSettingName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientSecretSettingNameInput() {
        return this._clientSecretSettingName;
    }
    get oauthScopes() {
        return this.getListAttribute('oauth_scopes');
    }
    set oauthScopes(value) {
        this._oauthScopes = value;
    }
    resetOauthScopes() {
        this._oauthScopes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oauthScopesInput() {
        return this._oauthScopes;
    }
}
exports.LinuxFunctionAppAuthSettingsGoogleOutputReference = LinuxFunctionAppAuthSettingsGoogleOutputReference;
function linuxFunctionAppAuthSettingsMicrosoftToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        client_id: cdktf.stringToTerraform(struct.clientId),
        client_secret: cdktf.stringToTerraform(struct.clientSecret),
        client_secret_setting_name: cdktf.stringToTerraform(struct.clientSecretSettingName),
        oauth_scopes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.oauthScopes),
    };
}
exports.linuxFunctionAppAuthSettingsMicrosoftToTerraform = linuxFunctionAppAuthSettingsMicrosoftToTerraform;
function linuxFunctionAppAuthSettingsMicrosoftToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        client_id: {
            value: cdktf.stringToHclTerraform(struct.clientId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_secret: {
            value: cdktf.stringToHclTerraform(struct.clientSecret),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_secret_setting_name: {
            value: cdktf.stringToHclTerraform(struct.clientSecretSettingName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        oauth_scopes: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.oauthScopes),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.linuxFunctionAppAuthSettingsMicrosoftToHclTerraform = linuxFunctionAppAuthSettingsMicrosoftToHclTerraform;
class LinuxFunctionAppAuthSettingsMicrosoftOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clientId !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientId = this._clientId;
        }
        if (this._clientSecret !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientSecret = this._clientSecret;
        }
        if (this._clientSecretSettingName !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientSecretSettingName = this._clientSecretSettingName;
        }
        if (this._oauthScopes !== undefined) {
            hasAnyValues = true;
            internalValueResult.oauthScopes = this._oauthScopes;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._clientId = undefined;
            this._clientSecret = undefined;
            this._clientSecretSettingName = undefined;
            this._oauthScopes = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._clientId = value.clientId;
            this._clientSecret = value.clientSecret;
            this._clientSecretSettingName = value.clientSecretSettingName;
            this._oauthScopes = value.oauthScopes;
        }
    }
    get clientId() {
        return this.getStringAttribute('client_id');
    }
    set clientId(value) {
        this._clientId = value;
    }
    // Temporarily expose input value. Use with caution.
    get clientIdInput() {
        return this._clientId;
    }
    get clientSecret() {
        return this.getStringAttribute('client_secret');
    }
    set clientSecret(value) {
        this._clientSecret = value;
    }
    resetClientSecret() {
        this._clientSecret = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientSecretInput() {
        return this._clientSecret;
    }
    get clientSecretSettingName() {
        return this.getStringAttribute('client_secret_setting_name');
    }
    set clientSecretSettingName(value) {
        this._clientSecretSettingName = value;
    }
    resetClientSecretSettingName() {
        this._clientSecretSettingName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientSecretSettingNameInput() {
        return this._clientSecretSettingName;
    }
    get oauthScopes() {
        return this.getListAttribute('oauth_scopes');
    }
    set oauthScopes(value) {
        this._oauthScopes = value;
    }
    resetOauthScopes() {
        this._oauthScopes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oauthScopesInput() {
        return this._oauthScopes;
    }
}
exports.LinuxFunctionAppAuthSettingsMicrosoftOutputReference = LinuxFunctionAppAuthSettingsMicrosoftOutputReference;
function linuxFunctionAppAuthSettingsTwitterToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        consumer_key: cdktf.stringToTerraform(struct.consumerKey),
        consumer_secret: cdktf.stringToTerraform(struct.consumerSecret),
        consumer_secret_setting_name: cdktf.stringToTerraform(struct.consumerSecretSettingName),
    };
}
exports.linuxFunctionAppAuthSettingsTwitterToTerraform = linuxFunctionAppAuthSettingsTwitterToTerraform;
function linuxFunctionAppAuthSettingsTwitterToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        consumer_key: {
            value: cdktf.stringToHclTerraform(struct.consumerKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        consumer_secret: {
            value: cdktf.stringToHclTerraform(struct.consumerSecret),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        consumer_secret_setting_name: {
            value: cdktf.stringToHclTerraform(struct.consumerSecretSettingName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.linuxFunctionAppAuthSettingsTwitterToHclTerraform = linuxFunctionAppAuthSettingsTwitterToHclTerraform;
class LinuxFunctionAppAuthSettingsTwitterOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._consumerKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.consumerKey = this._consumerKey;
        }
        if (this._consumerSecret !== undefined) {
            hasAnyValues = true;
            internalValueResult.consumerSecret = this._consumerSecret;
        }
        if (this._consumerSecretSettingName !== undefined) {
            hasAnyValues = true;
            internalValueResult.consumerSecretSettingName = this._consumerSecretSettingName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._consumerKey = undefined;
            this._consumerSecret = undefined;
            this._consumerSecretSettingName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._consumerKey = value.consumerKey;
            this._consumerSecret = value.consumerSecret;
            this._consumerSecretSettingName = value.consumerSecretSettingName;
        }
    }
    get consumerKey() {
        return this.getStringAttribute('consumer_key');
    }
    set consumerKey(value) {
        this._consumerKey = value;
    }
    // Temporarily expose input value. Use with caution.
    get consumerKeyInput() {
        return this._consumerKey;
    }
    get consumerSecret() {
        return this.getStringAttribute('consumer_secret');
    }
    set consumerSecret(value) {
        this._consumerSecret = value;
    }
    resetConsumerSecret() {
        this._consumerSecret = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get consumerSecretInput() {
        return this._consumerSecret;
    }
    get consumerSecretSettingName() {
        return this.getStringAttribute('consumer_secret_setting_name');
    }
    set consumerSecretSettingName(value) {
        this._consumerSecretSettingName = value;
    }
    resetConsumerSecretSettingName() {
        this._consumerSecretSettingName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get consumerSecretSettingNameInput() {
        return this._consumerSecretSettingName;
    }
}
exports.LinuxFunctionAppAuthSettingsTwitterOutputReference = LinuxFunctionAppAuthSettingsTwitterOutputReference;
function linuxFunctionAppAuthSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        additional_login_parameters: cdktf.hashMapper(cdktf.stringToTerraform)(struct.additionalLoginParameters),
        allowed_external_redirect_urls: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowedExternalRedirectUrls),
        default_provider: cdktf.stringToTerraform(struct.defaultProvider),
        enabled: cdktf.booleanToTerraform(struct.enabled),
        issuer: cdktf.stringToTerraform(struct.issuer),
        runtime_version: cdktf.stringToTerraform(struct.runtimeVersion),
        token_refresh_extension_hours: cdktf.numberToTerraform(struct.tokenRefreshExtensionHours),
        token_store_enabled: cdktf.booleanToTerraform(struct.tokenStoreEnabled),
        unauthenticated_client_action: cdktf.stringToTerraform(struct.unauthenticatedClientAction),
        active_directory: linuxFunctionAppAuthSettingsActiveDirectoryToTerraform(struct.activeDirectory),
        facebook: linuxFunctionAppAuthSettingsFacebookToTerraform(struct.facebook),
        github: linuxFunctionAppAuthSettingsGithubToTerraform(struct.github),
        google: linuxFunctionAppAuthSettingsGoogleToTerraform(struct.google),
        microsoft: linuxFunctionAppAuthSettingsMicrosoftToTerraform(struct.microsoft),
        twitter: linuxFunctionAppAuthSettingsTwitterToTerraform(struct.twitter),
    };
}
exports.linuxFunctionAppAuthSettingsToTerraform = linuxFunctionAppAuthSettingsToTerraform;
function linuxFunctionAppAuthSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        additional_login_parameters: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.additionalLoginParameters),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        allowed_external_redirect_urls: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.allowedExternalRedirectUrls),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        default_provider: {
            value: cdktf.stringToHclTerraform(struct.defaultProvider),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        issuer: {
            value: cdktf.stringToHclTerraform(struct.issuer),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        runtime_version: {
            value: cdktf.stringToHclTerraform(struct.runtimeVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        token_refresh_extension_hours: {
            value: cdktf.numberToHclTerraform(struct.tokenRefreshExtensionHours),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        token_store_enabled: {
            value: cdktf.booleanToHclTerraform(struct.tokenStoreEnabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        unauthenticated_client_action: {
            value: cdktf.stringToHclTerraform(struct.unauthenticatedClientAction),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        active_directory: {
            value: linuxFunctionAppAuthSettingsActiveDirectoryToHclTerraform(struct.activeDirectory),
            isBlock: true,
            type: "list",
            storageClassType: "LinuxFunctionAppAuthSettingsActiveDirectoryList",
        },
        facebook: {
            value: linuxFunctionAppAuthSettingsFacebookToHclTerraform(struct.facebook),
            isBlock: true,
            type: "list",
            storageClassType: "LinuxFunctionAppAuthSettingsFacebookList",
        },
        github: {
            value: linuxFunctionAppAuthSettingsGithubToHclTerraform(struct.github),
            isBlock: true,
            type: "list",
            storageClassType: "LinuxFunctionAppAuthSettingsGithubList",
        },
        google: {
            value: linuxFunctionAppAuthSettingsGoogleToHclTerraform(struct.google),
            isBlock: true,
            type: "list",
            storageClassType: "LinuxFunctionAppAuthSettingsGoogleList",
        },
        microsoft: {
            value: linuxFunctionAppAuthSettingsMicrosoftToHclTerraform(struct.microsoft),
            isBlock: true,
            type: "list",
            storageClassType: "LinuxFunctionAppAuthSettingsMicrosoftList",
        },
        twitter: {
            value: linuxFunctionAppAuthSettingsTwitterToHclTerraform(struct.twitter),
            isBlock: true,
            type: "list",
            storageClassType: "LinuxFunctionAppAuthSettingsTwitterList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.linuxFunctionAppAuthSettingsToHclTerraform = linuxFunctionAppAuthSettingsToHclTerraform;
class LinuxFunctionAppAuthSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // active_directory - computed: false, optional: true, required: false
        this._activeDirectory = new LinuxFunctionAppAuthSettingsActiveDirectoryOutputReference(this, "active_directory");
        // facebook - computed: false, optional: true, required: false
        this._facebook = new LinuxFunctionAppAuthSettingsFacebookOutputReference(this, "facebook");
        // github - computed: false, optional: true, required: false
        this._github = new LinuxFunctionAppAuthSettingsGithubOutputReference(this, "github");
        // google - computed: false, optional: true, required: false
        this._google = new LinuxFunctionAppAuthSettingsGoogleOutputReference(this, "google");
        // microsoft - computed: false, optional: true, required: false
        this._microsoft = new LinuxFunctionAppAuthSettingsMicrosoftOutputReference(this, "microsoft");
        // twitter - computed: false, optional: true, required: false
        this._twitter = new LinuxFunctionAppAuthSettingsTwitterOutputReference(this, "twitter");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._additionalLoginParameters !== undefined) {
            hasAnyValues = true;
            internalValueResult.additionalLoginParameters = this._additionalLoginParameters;
        }
        if (this._allowedExternalRedirectUrls !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedExternalRedirectUrls = this._allowedExternalRedirectUrls;
        }
        if (this._defaultProvider !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultProvider = this._defaultProvider;
        }
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._issuer !== undefined) {
            hasAnyValues = true;
            internalValueResult.issuer = this._issuer;
        }
        if (this._runtimeVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.runtimeVersion = this._runtimeVersion;
        }
        if (this._tokenRefreshExtensionHours !== undefined) {
            hasAnyValues = true;
            internalValueResult.tokenRefreshExtensionHours = this._tokenRefreshExtensionHours;
        }
        if (this._tokenStoreEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.tokenStoreEnabled = this._tokenStoreEnabled;
        }
        if (this._unauthenticatedClientAction !== undefined) {
            hasAnyValues = true;
            internalValueResult.unauthenticatedClientAction = this._unauthenticatedClientAction;
        }
        if (this._activeDirectory?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.activeDirectory = this._activeDirectory?.internalValue;
        }
        if (this._facebook?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.facebook = this._facebook?.internalValue;
        }
        if (this._github?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.github = this._github?.internalValue;
        }
        if (this._google?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.google = this._google?.internalValue;
        }
        if (this._microsoft?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.microsoft = this._microsoft?.internalValue;
        }
        if (this._twitter?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.twitter = this._twitter?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._additionalLoginParameters = undefined;
            this._allowedExternalRedirectUrls = undefined;
            this._defaultProvider = undefined;
            this._enabled = undefined;
            this._issuer = undefined;
            this._runtimeVersion = undefined;
            this._tokenRefreshExtensionHours = undefined;
            this._tokenStoreEnabled = undefined;
            this._unauthenticatedClientAction = undefined;
            this._activeDirectory.internalValue = undefined;
            this._facebook.internalValue = undefined;
            this._github.internalValue = undefined;
            this._google.internalValue = undefined;
            this._microsoft.internalValue = undefined;
            this._twitter.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._additionalLoginParameters = value.additionalLoginParameters;
            this._allowedExternalRedirectUrls = value.allowedExternalRedirectUrls;
            this._defaultProvider = value.defaultProvider;
            this._enabled = value.enabled;
            this._issuer = value.issuer;
            this._runtimeVersion = value.runtimeVersion;
            this._tokenRefreshExtensionHours = value.tokenRefreshExtensionHours;
            this._tokenStoreEnabled = value.tokenStoreEnabled;
            this._unauthenticatedClientAction = value.unauthenticatedClientAction;
            this._activeDirectory.internalValue = value.activeDirectory;
            this._facebook.internalValue = value.facebook;
            this._github.internalValue = value.github;
            this._google.internalValue = value.google;
            this._microsoft.internalValue = value.microsoft;
            this._twitter.internalValue = value.twitter;
        }
    }
    get additionalLoginParameters() {
        return this.getStringMapAttribute('additional_login_parameters');
    }
    set additionalLoginParameters(value) {
        this._additionalLoginParameters = value;
    }
    resetAdditionalLoginParameters() {
        this._additionalLoginParameters = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get additionalLoginParametersInput() {
        return this._additionalLoginParameters;
    }
    get allowedExternalRedirectUrls() {
        return this.getListAttribute('allowed_external_redirect_urls');
    }
    set allowedExternalRedirectUrls(value) {
        this._allowedExternalRedirectUrls = value;
    }
    resetAllowedExternalRedirectUrls() {
        this._allowedExternalRedirectUrls = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedExternalRedirectUrlsInput() {
        return this._allowedExternalRedirectUrls;
    }
    get defaultProvider() {
        return this.getStringAttribute('default_provider');
    }
    set defaultProvider(value) {
        this._defaultProvider = value;
    }
    resetDefaultProvider() {
        this._defaultProvider = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultProviderInput() {
        return this._defaultProvider;
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get issuer() {
        return this.getStringAttribute('issuer');
    }
    set issuer(value) {
        this._issuer = value;
    }
    resetIssuer() {
        this._issuer = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get issuerInput() {
        return this._issuer;
    }
    get runtimeVersion() {
        return this.getStringAttribute('runtime_version');
    }
    set runtimeVersion(value) {
        this._runtimeVersion = value;
    }
    resetRuntimeVersion() {
        this._runtimeVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get runtimeVersionInput() {
        return this._runtimeVersion;
    }
    get tokenRefreshExtensionHours() {
        return this.getNumberAttribute('token_refresh_extension_hours');
    }
    set tokenRefreshExtensionHours(value) {
        this._tokenRefreshExtensionHours = value;
    }
    resetTokenRefreshExtensionHours() {
        this._tokenRefreshExtensionHours = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tokenRefreshExtensionHoursInput() {
        return this._tokenRefreshExtensionHours;
    }
    get tokenStoreEnabled() {
        return this.getBooleanAttribute('token_store_enabled');
    }
    set tokenStoreEnabled(value) {
        this._tokenStoreEnabled = value;
    }
    resetTokenStoreEnabled() {
        this._tokenStoreEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tokenStoreEnabledInput() {
        return this._tokenStoreEnabled;
    }
    get unauthenticatedClientAction() {
        return this.getStringAttribute('unauthenticated_client_action');
    }
    set unauthenticatedClientAction(value) {
        this._unauthenticatedClientAction = value;
    }
    resetUnauthenticatedClientAction() {
        this._unauthenticatedClientAction = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get unauthenticatedClientActionInput() {
        return this._unauthenticatedClientAction;
    }
    get activeDirectory() {
        return this._activeDirectory;
    }
    putActiveDirectory(value) {
        this._activeDirectory.internalValue = value;
    }
    resetActiveDirectory() {
        this._activeDirectory.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get activeDirectoryInput() {
        return this._activeDirectory.internalValue;
    }
    get facebook() {
        return this._facebook;
    }
    putFacebook(value) {
        this._facebook.internalValue = value;
    }
    resetFacebook() {
        this._facebook.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get facebookInput() {
        return this._facebook.internalValue;
    }
    get github() {
        return this._github;
    }
    putGithub(value) {
        this._github.internalValue = value;
    }
    resetGithub() {
        this._github.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get githubInput() {
        return this._github.internalValue;
    }
    get google() {
        return this._google;
    }
    putGoogle(value) {
        this._google.internalValue = value;
    }
    resetGoogle() {
        this._google.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get googleInput() {
        return this._google.internalValue;
    }
    get microsoft() {
        return this._microsoft;
    }
    putMicrosoft(value) {
        this._microsoft.internalValue = value;
    }
    resetMicrosoft() {
        this._microsoft.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get microsoftInput() {
        return this._microsoft.internalValue;
    }
    get twitter() {
        return this._twitter;
    }
    putTwitter(value) {
        this._twitter.internalValue = value;
    }
    resetTwitter() {
        this._twitter.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get twitterInput() {
        return this._twitter.internalValue;
    }
}
exports.LinuxFunctionAppAuthSettingsOutputReference = LinuxFunctionAppAuthSettingsOutputReference;
function linuxFunctionAppAuthSettingsV2ActiveDirectoryV2ToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allowed_applications: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowedApplications),
        allowed_audiences: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowedAudiences),
        allowed_groups: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowedGroups),
        allowed_identities: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowedIdentities),
        client_id: cdktf.stringToTerraform(struct.clientId),
        client_secret_certificate_thumbprint: cdktf.stringToTerraform(struct.clientSecretCertificateThumbprint),
        client_secret_setting_name: cdktf.stringToTerraform(struct.clientSecretSettingName),
        jwt_allowed_client_applications: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.jwtAllowedClientApplications),
        jwt_allowed_groups: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.jwtAllowedGroups),
        login_parameters: cdktf.hashMapper(cdktf.stringToTerraform)(struct.loginParameters),
        tenant_auth_endpoint: cdktf.stringToTerraform(struct.tenantAuthEndpoint),
        www_authentication_disabled: cdktf.booleanToTerraform(struct.wwwAuthenticationDisabled),
    };
}
exports.linuxFunctionAppAuthSettingsV2ActiveDirectoryV2ToTerraform = linuxFunctionAppAuthSettingsV2ActiveDirectoryV2ToTerraform;
function linuxFunctionAppAuthSettingsV2ActiveDirectoryV2ToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allowed_applications: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.allowedApplications),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        allowed_audiences: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.allowedAudiences),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        allowed_groups: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.allowedGroups),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        allowed_identities: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.allowedIdentities),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        client_id: {
            value: cdktf.stringToHclTerraform(struct.clientId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_secret_certificate_thumbprint: {
            value: cdktf.stringToHclTerraform(struct.clientSecretCertificateThumbprint),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_secret_setting_name: {
            value: cdktf.stringToHclTerraform(struct.clientSecretSettingName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        jwt_allowed_client_applications: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.jwtAllowedClientApplications),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        jwt_allowed_groups: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.jwtAllowedGroups),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        login_parameters: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.loginParameters),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        tenant_auth_endpoint: {
            value: cdktf.stringToHclTerraform(struct.tenantAuthEndpoint),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        www_authentication_disabled: {
            value: cdktf.booleanToHclTerraform(struct.wwwAuthenticationDisabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.linuxFunctionAppAuthSettingsV2ActiveDirectoryV2ToHclTerraform = linuxFunctionAppAuthSettingsV2ActiveDirectoryV2ToHclTerraform;
class LinuxFunctionAppAuthSettingsV2ActiveDirectoryV2OutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowedApplications !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedApplications = this._allowedApplications;
        }
        if (this._allowedAudiences !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedAudiences = this._allowedAudiences;
        }
        if (this._allowedGroups !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedGroups = this._allowedGroups;
        }
        if (this._allowedIdentities !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedIdentities = this._allowedIdentities;
        }
        if (this._clientId !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientId = this._clientId;
        }
        if (this._clientSecretCertificateThumbprint !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientSecretCertificateThumbprint = this._clientSecretCertificateThumbprint;
        }
        if (this._clientSecretSettingName !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientSecretSettingName = this._clientSecretSettingName;
        }
        if (this._jwtAllowedClientApplications !== undefined) {
            hasAnyValues = true;
            internalValueResult.jwtAllowedClientApplications = this._jwtAllowedClientApplications;
        }
        if (this._jwtAllowedGroups !== undefined) {
            hasAnyValues = true;
            internalValueResult.jwtAllowedGroups = this._jwtAllowedGroups;
        }
        if (this._loginParameters !== undefined) {
            hasAnyValues = true;
            internalValueResult.loginParameters = this._loginParameters;
        }
        if (this._tenantAuthEndpoint !== undefined) {
            hasAnyValues = true;
            internalValueResult.tenantAuthEndpoint = this._tenantAuthEndpoint;
        }
        if (this._wwwAuthenticationDisabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.wwwAuthenticationDisabled = this._wwwAuthenticationDisabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowedApplications = undefined;
            this._allowedAudiences = undefined;
            this._allowedGroups = undefined;
            this._allowedIdentities = undefined;
            this._clientId = undefined;
            this._clientSecretCertificateThumbprint = undefined;
            this._clientSecretSettingName = undefined;
            this._jwtAllowedClientApplications = undefined;
            this._jwtAllowedGroups = undefined;
            this._loginParameters = undefined;
            this._tenantAuthEndpoint = undefined;
            this._wwwAuthenticationDisabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowedApplications = value.allowedApplications;
            this._allowedAudiences = value.allowedAudiences;
            this._allowedGroups = value.allowedGroups;
            this._allowedIdentities = value.allowedIdentities;
            this._clientId = value.clientId;
            this._clientSecretCertificateThumbprint = value.clientSecretCertificateThumbprint;
            this._clientSecretSettingName = value.clientSecretSettingName;
            this._jwtAllowedClientApplications = value.jwtAllowedClientApplications;
            this._jwtAllowedGroups = value.jwtAllowedGroups;
            this._loginParameters = value.loginParameters;
            this._tenantAuthEndpoint = value.tenantAuthEndpoint;
            this._wwwAuthenticationDisabled = value.wwwAuthenticationDisabled;
        }
    }
    get allowedApplications() {
        return this.getListAttribute('allowed_applications');
    }
    set allowedApplications(value) {
        this._allowedApplications = value;
    }
    resetAllowedApplications() {
        this._allowedApplications = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedApplicationsInput() {
        return this._allowedApplications;
    }
    get allowedAudiences() {
        return this.getListAttribute('allowed_audiences');
    }
    set allowedAudiences(value) {
        this._allowedAudiences = value;
    }
    resetAllowedAudiences() {
        this._allowedAudiences = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedAudiencesInput() {
        return this._allowedAudiences;
    }
    get allowedGroups() {
        return this.getListAttribute('allowed_groups');
    }
    set allowedGroups(value) {
        this._allowedGroups = value;
    }
    resetAllowedGroups() {
        this._allowedGroups = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedGroupsInput() {
        return this._allowedGroups;
    }
    get allowedIdentities() {
        return this.getListAttribute('allowed_identities');
    }
    set allowedIdentities(value) {
        this._allowedIdentities = value;
    }
    resetAllowedIdentities() {
        this._allowedIdentities = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedIdentitiesInput() {
        return this._allowedIdentities;
    }
    get clientId() {
        return this.getStringAttribute('client_id');
    }
    set clientId(value) {
        this._clientId = value;
    }
    // Temporarily expose input value. Use with caution.
    get clientIdInput() {
        return this._clientId;
    }
    get clientSecretCertificateThumbprint() {
        return this.getStringAttribute('client_secret_certificate_thumbprint');
    }
    set clientSecretCertificateThumbprint(value) {
        this._clientSecretCertificateThumbprint = value;
    }
    resetClientSecretCertificateThumbprint() {
        this._clientSecretCertificateThumbprint = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientSecretCertificateThumbprintInput() {
        return this._clientSecretCertificateThumbprint;
    }
    get clientSecretSettingName() {
        return this.getStringAttribute('client_secret_setting_name');
    }
    set clientSecretSettingName(value) {
        this._clientSecretSettingName = value;
    }
    resetClientSecretSettingName() {
        this._clientSecretSettingName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientSecretSettingNameInput() {
        return this._clientSecretSettingName;
    }
    get jwtAllowedClientApplications() {
        return this.getListAttribute('jwt_allowed_client_applications');
    }
    set jwtAllowedClientApplications(value) {
        this._jwtAllowedClientApplications = value;
    }
    resetJwtAllowedClientApplications() {
        this._jwtAllowedClientApplications = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jwtAllowedClientApplicationsInput() {
        return this._jwtAllowedClientApplications;
    }
    get jwtAllowedGroups() {
        return this.getListAttribute('jwt_allowed_groups');
    }
    set jwtAllowedGroups(value) {
        this._jwtAllowedGroups = value;
    }
    resetJwtAllowedGroups() {
        this._jwtAllowedGroups = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jwtAllowedGroupsInput() {
        return this._jwtAllowedGroups;
    }
    get loginParameters() {
        return this.getStringMapAttribute('login_parameters');
    }
    set loginParameters(value) {
        this._loginParameters = value;
    }
    resetLoginParameters() {
        this._loginParameters = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loginParametersInput() {
        return this._loginParameters;
    }
    get tenantAuthEndpoint() {
        return this.getStringAttribute('tenant_auth_endpoint');
    }
    set tenantAuthEndpoint(value) {
        this._tenantAuthEndpoint = value;
    }
    // Temporarily expose input value. Use with caution.
    get tenantAuthEndpointInput() {
        return this._tenantAuthEndpoint;
    }
    get wwwAuthenticationDisabled() {
        return this.getBooleanAttribute('www_authentication_disabled');
    }
    set wwwAuthenticationDisabled(value) {
        this._wwwAuthenticationDisabled = value;
    }
    resetWwwAuthenticationDisabled() {
        this._wwwAuthenticationDisabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get wwwAuthenticationDisabledInput() {
        return this._wwwAuthenticationDisabled;
    }
}
exports.LinuxFunctionAppAuthSettingsV2ActiveDirectoryV2OutputReference = LinuxFunctionAppAuthSettingsV2ActiveDirectoryV2OutputReference;
function linuxFunctionAppAuthSettingsV2AppleV2ToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        client_id: cdktf.stringToTerraform(struct.clientId),
        client_secret_setting_name: cdktf.stringToTerraform(struct.clientSecretSettingName),
    };
}
exports.linuxFunctionAppAuthSettingsV2AppleV2ToTerraform = linuxFunctionAppAuthSettingsV2AppleV2ToTerraform;
function linuxFunctionAppAuthSettingsV2AppleV2ToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        client_id: {
            value: cdktf.stringToHclTerraform(struct.clientId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_secret_setting_name: {
            value: cdktf.stringToHclTerraform(struct.clientSecretSettingName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.linuxFunctionAppAuthSettingsV2AppleV2ToHclTerraform = linuxFunctionAppAuthSettingsV2AppleV2ToHclTerraform;
class LinuxFunctionAppAuthSettingsV2AppleV2OutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clientId !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientId = this._clientId;
        }
        if (this._clientSecretSettingName !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientSecretSettingName = this._clientSecretSettingName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._clientId = undefined;
            this._clientSecretSettingName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._clientId = value.clientId;
            this._clientSecretSettingName = value.clientSecretSettingName;
        }
    }
    get clientId() {
        return this.getStringAttribute('client_id');
    }
    set clientId(value) {
        this._clientId = value;
    }
    // Temporarily expose input value. Use with caution.
    get clientIdInput() {
        return this._clientId;
    }
    get clientSecretSettingName() {
        return this.getStringAttribute('client_secret_setting_name');
    }
    set clientSecretSettingName(value) {
        this._clientSecretSettingName = value;
    }
    // Temporarily expose input value. Use with caution.
    get clientSecretSettingNameInput() {
        return this._clientSecretSettingName;
    }
    // login_scopes - computed: true, optional: false, required: false
    get loginScopes() {
        return this.getListAttribute('login_scopes');
    }
}
exports.LinuxFunctionAppAuthSettingsV2AppleV2OutputReference = LinuxFunctionAppAuthSettingsV2AppleV2OutputReference;
function linuxFunctionAppAuthSettingsV2AzureStaticWebAppV2ToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        client_id: cdktf.stringToTerraform(struct.clientId),
    };
}
exports.linuxFunctionAppAuthSettingsV2AzureStaticWebAppV2ToTerraform = linuxFunctionAppAuthSettingsV2AzureStaticWebAppV2ToTerraform;
function linuxFunctionAppAuthSettingsV2AzureStaticWebAppV2ToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        client_id: {
            value: cdktf.stringToHclTerraform(struct.clientId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.linuxFunctionAppAuthSettingsV2AzureStaticWebAppV2ToHclTerraform = linuxFunctionAppAuthSettingsV2AzureStaticWebAppV2ToHclTerraform;
class LinuxFunctionAppAuthSettingsV2AzureStaticWebAppV2OutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clientId !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientId = this._clientId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._clientId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._clientId = value.clientId;
        }
    }
    get clientId() {
        return this.getStringAttribute('client_id');
    }
    set clientId(value) {
        this._clientId = value;
    }
    // Temporarily expose input value. Use with caution.
    get clientIdInput() {
        return this._clientId;
    }
}
exports.LinuxFunctionAppAuthSettingsV2AzureStaticWebAppV2OutputReference = LinuxFunctionAppAuthSettingsV2AzureStaticWebAppV2OutputReference;
function linuxFunctionAppAuthSettingsV2CustomOidcV2ToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        client_id: cdktf.stringToTerraform(struct.clientId),
        name: cdktf.stringToTerraform(struct.name),
        name_claim_type: cdktf.stringToTerraform(struct.nameClaimType),
        openid_configuration_endpoint: cdktf.stringToTerraform(struct.openidConfigurationEndpoint),
        scopes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.scopes),
    };
}
exports.linuxFunctionAppAuthSettingsV2CustomOidcV2ToTerraform = linuxFunctionAppAuthSettingsV2CustomOidcV2ToTerraform;
function linuxFunctionAppAuthSettingsV2CustomOidcV2ToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        client_id: {
            value: cdktf.stringToHclTerraform(struct.clientId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        name_claim_type: {
            value: cdktf.stringToHclTerraform(struct.nameClaimType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        openid_configuration_endpoint: {
            value: cdktf.stringToHclTerraform(struct.openidConfigurationEndpoint),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        scopes: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.scopes),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.linuxFunctionAppAuthSettingsV2CustomOidcV2ToHclTerraform = linuxFunctionAppAuthSettingsV2CustomOidcV2ToHclTerraform;
class LinuxFunctionAppAuthSettingsV2CustomOidcV2OutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clientId !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientId = this._clientId;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._nameClaimType !== undefined) {
            hasAnyValues = true;
            internalValueResult.nameClaimType = this._nameClaimType;
        }
        if (this._openidConfigurationEndpoint !== undefined) {
            hasAnyValues = true;
            internalValueResult.openidConfigurationEndpoint = this._openidConfigurationEndpoint;
        }
        if (this._scopes !== undefined) {
            hasAnyValues = true;
            internalValueResult.scopes = this._scopes;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._clientId = undefined;
            this._name = undefined;
            this._nameClaimType = undefined;
            this._openidConfigurationEndpoint = undefined;
            this._scopes = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._clientId = value.clientId;
            this._name = value.name;
            this._nameClaimType = value.nameClaimType;
            this._openidConfigurationEndpoint = value.openidConfigurationEndpoint;
            this._scopes = value.scopes;
        }
    }
    // authorisation_endpoint - computed: true, optional: false, required: false
    get authorisationEndpoint() {
        return this.getStringAttribute('authorisation_endpoint');
    }
    // certification_uri - computed: true, optional: false, required: false
    get certificationUri() {
        return this.getStringAttribute('certification_uri');
    }
    // client_credential_method - computed: true, optional: false, required: false
    get clientCredentialMethod() {
        return this.getStringAttribute('client_credential_method');
    }
    get clientId() {
        return this.getStringAttribute('client_id');
    }
    set clientId(value) {
        this._clientId = value;
    }
    // Temporarily expose input value. Use with caution.
    get clientIdInput() {
        return this._clientId;
    }
    // client_secret_setting_name - computed: true, optional: false, required: false
    get clientSecretSettingName() {
        return this.getStringAttribute('client_secret_setting_name');
    }
    // issuer_endpoint - computed: true, optional: false, required: false
    get issuerEndpoint() {
        return this.getStringAttribute('issuer_endpoint');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get nameClaimType() {
        return this.getStringAttribute('name_claim_type');
    }
    set nameClaimType(value) {
        this._nameClaimType = value;
    }
    resetNameClaimType() {
        this._nameClaimType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameClaimTypeInput() {
        return this._nameClaimType;
    }
    get openidConfigurationEndpoint() {
        return this.getStringAttribute('openid_configuration_endpoint');
    }
    set openidConfigurationEndpoint(value) {
        this._openidConfigurationEndpoint = value;
    }
    // Temporarily expose input value. Use with caution.
    get openidConfigurationEndpointInput() {
        return this._openidConfigurationEndpoint;
    }
    get scopes() {
        return this.getListAttribute('scopes');
    }
    set scopes(value) {
        this._scopes = value;
    }
    resetScopes() {
        this._scopes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scopesInput() {
        return this._scopes;
    }
    // token_endpoint - computed: true, optional: false, required: false
    get tokenEndpoint() {
        return this.getStringAttribute('token_endpoint');
    }
}
exports.LinuxFunctionAppAuthSettingsV2CustomOidcV2OutputReference = LinuxFunctionAppAuthSettingsV2CustomOidcV2OutputReference;
class LinuxFunctionAppAuthSettingsV2CustomOidcV2List extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new LinuxFunctionAppAuthSettingsV2CustomOidcV2OutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.LinuxFunctionAppAuthSettingsV2CustomOidcV2List = LinuxFunctionAppAuthSettingsV2CustomOidcV2List;
function linuxFunctionAppAuthSettingsV2FacebookV2ToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        app_id: cdktf.stringToTerraform(struct.appId),
        app_secret_setting_name: cdktf.stringToTerraform(struct.appSecretSettingName),
        graph_api_version: cdktf.stringToTerraform(struct.graphApiVersion),
        login_scopes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.loginScopes),
    };
}
exports.linuxFunctionAppAuthSettingsV2FacebookV2ToTerraform = linuxFunctionAppAuthSettingsV2FacebookV2ToTerraform;
function linuxFunctionAppAuthSettingsV2FacebookV2ToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        app_id: {
            value: cdktf.stringToHclTerraform(struct.appId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        app_secret_setting_name: {
            value: cdktf.stringToHclTerraform(struct.appSecretSettingName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        graph_api_version: {
            value: cdktf.stringToHclTerraform(struct.graphApiVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        login_scopes: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.loginScopes),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.linuxFunctionAppAuthSettingsV2FacebookV2ToHclTerraform = linuxFunctionAppAuthSettingsV2FacebookV2ToHclTerraform;
class LinuxFunctionAppAuthSettingsV2FacebookV2OutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._appId !== undefined) {
            hasAnyValues = true;
            internalValueResult.appId = this._appId;
        }
        if (this._appSecretSettingName !== undefined) {
            hasAnyValues = true;
            internalValueResult.appSecretSettingName = this._appSecretSettingName;
        }
        if (this._graphApiVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.graphApiVersion = this._graphApiVersion;
        }
        if (this._loginScopes !== undefined) {
            hasAnyValues = true;
            internalValueResult.loginScopes = this._loginScopes;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._appId = undefined;
            this._appSecretSettingName = undefined;
            this._graphApiVersion = undefined;
            this._loginScopes = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._appId = value.appId;
            this._appSecretSettingName = value.appSecretSettingName;
            this._graphApiVersion = value.graphApiVersion;
            this._loginScopes = value.loginScopes;
        }
    }
    get appId() {
        return this.getStringAttribute('app_id');
    }
    set appId(value) {
        this._appId = value;
    }
    // Temporarily expose input value. Use with caution.
    get appIdInput() {
        return this._appId;
    }
    get appSecretSettingName() {
        return this.getStringAttribute('app_secret_setting_name');
    }
    set appSecretSettingName(value) {
        this._appSecretSettingName = value;
    }
    // Temporarily expose input value. Use with caution.
    get appSecretSettingNameInput() {
        return this._appSecretSettingName;
    }
    get graphApiVersion() {
        return this.getStringAttribute('graph_api_version');
    }
    set graphApiVersion(value) {
        this._graphApiVersion = value;
    }
    resetGraphApiVersion() {
        this._graphApiVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get graphApiVersionInput() {
        return this._graphApiVersion;
    }
    get loginScopes() {
        return this.getListAttribute('login_scopes');
    }
    set loginScopes(value) {
        this._loginScopes = value;
    }
    resetLoginScopes() {
        this._loginScopes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loginScopesInput() {
        return this._loginScopes;
    }
}
exports.LinuxFunctionAppAuthSettingsV2FacebookV2OutputReference = LinuxFunctionAppAuthSettingsV2FacebookV2OutputReference;
function linuxFunctionAppAuthSettingsV2GithubV2ToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        client_id: cdktf.stringToTerraform(struct.clientId),
        client_secret_setting_name: cdktf.stringToTerraform(struct.clientSecretSettingName),
        login_scopes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.loginScopes),
    };
}
exports.linuxFunctionAppAuthSettingsV2GithubV2ToTerraform = linuxFunctionAppAuthSettingsV2GithubV2ToTerraform;
function linuxFunctionAppAuthSettingsV2GithubV2ToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        client_id: {
            value: cdktf.stringToHclTerraform(struct.clientId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_secret_setting_name: {
            value: cdktf.stringToHclTerraform(struct.clientSecretSettingName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        login_scopes: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.loginScopes),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.linuxFunctionAppAuthSettingsV2GithubV2ToHclTerraform = linuxFunctionAppAuthSettingsV2GithubV2ToHclTerraform;
class LinuxFunctionAppAuthSettingsV2GithubV2OutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clientId !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientId = this._clientId;
        }
        if (this._clientSecretSettingName !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientSecretSettingName = this._clientSecretSettingName;
        }
        if (this._loginScopes !== undefined) {
            hasAnyValues = true;
            internalValueResult.loginScopes = this._loginScopes;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._clientId = undefined;
            this._clientSecretSettingName = undefined;
            this._loginScopes = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._clientId = value.clientId;
            this._clientSecretSettingName = value.clientSecretSettingName;
            this._loginScopes = value.loginScopes;
        }
    }
    get clientId() {
        return this.getStringAttribute('client_id');
    }
    set clientId(value) {
        this._clientId = value;
    }
    // Temporarily expose input value. Use with caution.
    get clientIdInput() {
        return this._clientId;
    }
    get clientSecretSettingName() {
        return this.getStringAttribute('client_secret_setting_name');
    }
    set clientSecretSettingName(value) {
        this._clientSecretSettingName = value;
    }
    // Temporarily expose input value. Use with caution.
    get clientSecretSettingNameInput() {
        return this._clientSecretSettingName;
    }
    get loginScopes() {
        return this.getListAttribute('login_scopes');
    }
    set loginScopes(value) {
        this._loginScopes = value;
    }
    resetLoginScopes() {
        this._loginScopes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loginScopesInput() {
        return this._loginScopes;
    }
}
exports.LinuxFunctionAppAuthSettingsV2GithubV2OutputReference = LinuxFunctionAppAuthSettingsV2GithubV2OutputReference;
function linuxFunctionAppAuthSettingsV2GoogleV2ToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allowed_audiences: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowedAudiences),
        client_id: cdktf.stringToTerraform(struct.clientId),
        client_secret_setting_name: cdktf.stringToTerraform(struct.clientSecretSettingName),
        login_scopes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.loginScopes),
    };
}
exports.linuxFunctionAppAuthSettingsV2GoogleV2ToTerraform = linuxFunctionAppAuthSettingsV2GoogleV2ToTerraform;
function linuxFunctionAppAuthSettingsV2GoogleV2ToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allowed_audiences: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.allowedAudiences),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        client_id: {
            value: cdktf.stringToHclTerraform(struct.clientId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_secret_setting_name: {
            value: cdktf.stringToHclTerraform(struct.clientSecretSettingName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        login_scopes: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.loginScopes),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.linuxFunctionAppAuthSettingsV2GoogleV2ToHclTerraform = linuxFunctionAppAuthSettingsV2GoogleV2ToHclTerraform;
class LinuxFunctionAppAuthSettingsV2GoogleV2OutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowedAudiences !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedAudiences = this._allowedAudiences;
        }
        if (this._clientId !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientId = this._clientId;
        }
        if (this._clientSecretSettingName !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientSecretSettingName = this._clientSecretSettingName;
        }
        if (this._loginScopes !== undefined) {
            hasAnyValues = true;
            internalValueResult.loginScopes = this._loginScopes;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowedAudiences = undefined;
            this._clientId = undefined;
            this._clientSecretSettingName = undefined;
            this._loginScopes = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowedAudiences = value.allowedAudiences;
            this._clientId = value.clientId;
            this._clientSecretSettingName = value.clientSecretSettingName;
            this._loginScopes = value.loginScopes;
        }
    }
    get allowedAudiences() {
        return this.getListAttribute('allowed_audiences');
    }
    set allowedAudiences(value) {
        this._allowedAudiences = value;
    }
    resetAllowedAudiences() {
        this._allowedAudiences = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedAudiencesInput() {
        return this._allowedAudiences;
    }
    get clientId() {
        return this.getStringAttribute('client_id');
    }
    set clientId(value) {
        this._clientId = value;
    }
    // Temporarily expose input value. Use with caution.
    get clientIdInput() {
        return this._clientId;
    }
    get clientSecretSettingName() {
        return this.getStringAttribute('client_secret_setting_name');
    }
    set clientSecretSettingName(value) {
        this._clientSecretSettingName = value;
    }
    // Temporarily expose input value. Use with caution.
    get clientSecretSettingNameInput() {
        return this._clientSecretSettingName;
    }
    get loginScopes() {
        return this.getListAttribute('login_scopes');
    }
    set loginScopes(value) {
        this._loginScopes = value;
    }
    resetLoginScopes() {
        this._loginScopes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loginScopesInput() {
        return this._loginScopes;
    }
}
exports.LinuxFunctionAppAuthSettingsV2GoogleV2OutputReference = LinuxFunctionAppAuthSettingsV2GoogleV2OutputReference;
function linuxFunctionAppAuthSettingsV2LoginToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allowed_external_redirect_urls: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowedExternalRedirectUrls),
        cookie_expiration_convention: cdktf.stringToTerraform(struct.cookieExpirationConvention),
        cookie_expiration_time: cdktf.stringToTerraform(struct.cookieExpirationTime),
        logout_endpoint: cdktf.stringToTerraform(struct.logoutEndpoint),
        nonce_expiration_time: cdktf.stringToTerraform(struct.nonceExpirationTime),
        preserve_url_fragments_for_logins: cdktf.booleanToTerraform(struct.preserveUrlFragmentsForLogins),
        token_refresh_extension_time: cdktf.numberToTerraform(struct.tokenRefreshExtensionTime),
        token_store_enabled: cdktf.booleanToTerraform(struct.tokenStoreEnabled),
        token_store_path: cdktf.stringToTerraform(struct.tokenStorePath),
        token_store_sas_setting_name: cdktf.stringToTerraform(struct.tokenStoreSasSettingName),
        validate_nonce: cdktf.booleanToTerraform(struct.validateNonce),
    };
}
exports.linuxFunctionAppAuthSettingsV2LoginToTerraform = linuxFunctionAppAuthSettingsV2LoginToTerraform;
function linuxFunctionAppAuthSettingsV2LoginToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allowed_external_redirect_urls: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.allowedExternalRedirectUrls),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        cookie_expiration_convention: {
            value: cdktf.stringToHclTerraform(struct.cookieExpirationConvention),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cookie_expiration_time: {
            value: cdktf.stringToHclTerraform(struct.cookieExpirationTime),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        logout_endpoint: {
            value: cdktf.stringToHclTerraform(struct.logoutEndpoint),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        nonce_expiration_time: {
            value: cdktf.stringToHclTerraform(struct.nonceExpirationTime),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        preserve_url_fragments_for_logins: {
            value: cdktf.booleanToHclTerraform(struct.preserveUrlFragmentsForLogins),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        token_refresh_extension_time: {
            value: cdktf.numberToHclTerraform(struct.tokenRefreshExtensionTime),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        token_store_enabled: {
            value: cdktf.booleanToHclTerraform(struct.tokenStoreEnabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        token_store_path: {
            value: cdktf.stringToHclTerraform(struct.tokenStorePath),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        token_store_sas_setting_name: {
            value: cdktf.stringToHclTerraform(struct.tokenStoreSasSettingName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        validate_nonce: {
            value: cdktf.booleanToHclTerraform(struct.validateNonce),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.linuxFunctionAppAuthSettingsV2LoginToHclTerraform = linuxFunctionAppAuthSettingsV2LoginToHclTerraform;
class LinuxFunctionAppAuthSettingsV2LoginOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowedExternalRedirectUrls !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedExternalRedirectUrls = this._allowedExternalRedirectUrls;
        }
        if (this._cookieExpirationConvention !== undefined) {
            hasAnyValues = true;
            internalValueResult.cookieExpirationConvention = this._cookieExpirationConvention;
        }
        if (this._cookieExpirationTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.cookieExpirationTime = this._cookieExpirationTime;
        }
        if (this._logoutEndpoint !== undefined) {
            hasAnyValues = true;
            internalValueResult.logoutEndpoint = this._logoutEndpoint;
        }
        if (this._nonceExpirationTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.nonceExpirationTime = this._nonceExpirationTime;
        }
        if (this._preserveUrlFragmentsForLogins !== undefined) {
            hasAnyValues = true;
            internalValueResult.preserveUrlFragmentsForLogins = this._preserveUrlFragmentsForLogins;
        }
        if (this._tokenRefreshExtensionTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.tokenRefreshExtensionTime = this._tokenRefreshExtensionTime;
        }
        if (this._tokenStoreEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.tokenStoreEnabled = this._tokenStoreEnabled;
        }
        if (this._tokenStorePath !== undefined) {
            hasAnyValues = true;
            internalValueResult.tokenStorePath = this._tokenStorePath;
        }
        if (this._tokenStoreSasSettingName !== undefined) {
            hasAnyValues = true;
            internalValueResult.tokenStoreSasSettingName = this._tokenStoreSasSettingName;
        }
        if (this._validateNonce !== undefined) {
            hasAnyValues = true;
            internalValueResult.validateNonce = this._validateNonce;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowedExternalRedirectUrls = undefined;
            this._cookieExpirationConvention = undefined;
            this._cookieExpirationTime = undefined;
            this._logoutEndpoint = undefined;
            this._nonceExpirationTime = undefined;
            this._preserveUrlFragmentsForLogins = undefined;
            this._tokenRefreshExtensionTime = undefined;
            this._tokenStoreEnabled = undefined;
            this._tokenStorePath = undefined;
            this._tokenStoreSasSettingName = undefined;
            this._validateNonce = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowedExternalRedirectUrls = value.allowedExternalRedirectUrls;
            this._cookieExpirationConvention = value.cookieExpirationConvention;
            this._cookieExpirationTime = value.cookieExpirationTime;
            this._logoutEndpoint = value.logoutEndpoint;
            this._nonceExpirationTime = value.nonceExpirationTime;
            this._preserveUrlFragmentsForLogins = value.preserveUrlFragmentsForLogins;
            this._tokenRefreshExtensionTime = value.tokenRefreshExtensionTime;
            this._tokenStoreEnabled = value.tokenStoreEnabled;
            this._tokenStorePath = value.tokenStorePath;
            this._tokenStoreSasSettingName = value.tokenStoreSasSettingName;
            this._validateNonce = value.validateNonce;
        }
    }
    get allowedExternalRedirectUrls() {
        return this.getListAttribute('allowed_external_redirect_urls');
    }
    set allowedExternalRedirectUrls(value) {
        this._allowedExternalRedirectUrls = value;
    }
    resetAllowedExternalRedirectUrls() {
        this._allowedExternalRedirectUrls = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedExternalRedirectUrlsInput() {
        return this._allowedExternalRedirectUrls;
    }
    get cookieExpirationConvention() {
        return this.getStringAttribute('cookie_expiration_convention');
    }
    set cookieExpirationConvention(value) {
        this._cookieExpirationConvention = value;
    }
    resetCookieExpirationConvention() {
        this._cookieExpirationConvention = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cookieExpirationConventionInput() {
        return this._cookieExpirationConvention;
    }
    get cookieExpirationTime() {
        return this.getStringAttribute('cookie_expiration_time');
    }
    set cookieExpirationTime(value) {
        this._cookieExpirationTime = value;
    }
    resetCookieExpirationTime() {
        this._cookieExpirationTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cookieExpirationTimeInput() {
        return this._cookieExpirationTime;
    }
    get logoutEndpoint() {
        return this.getStringAttribute('logout_endpoint');
    }
    set logoutEndpoint(value) {
        this._logoutEndpoint = value;
    }
    resetLogoutEndpoint() {
        this._logoutEndpoint = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logoutEndpointInput() {
        return this._logoutEndpoint;
    }
    get nonceExpirationTime() {
        return this.getStringAttribute('nonce_expiration_time');
    }
    set nonceExpirationTime(value) {
        this._nonceExpirationTime = value;
    }
    resetNonceExpirationTime() {
        this._nonceExpirationTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nonceExpirationTimeInput() {
        return this._nonceExpirationTime;
    }
    get preserveUrlFragmentsForLogins() {
        return this.getBooleanAttribute('preserve_url_fragments_for_logins');
    }
    set preserveUrlFragmentsForLogins(value) {
        this._preserveUrlFragmentsForLogins = value;
    }
    resetPreserveUrlFragmentsForLogins() {
        this._preserveUrlFragmentsForLogins = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get preserveUrlFragmentsForLoginsInput() {
        return this._preserveUrlFragmentsForLogins;
    }
    get tokenRefreshExtensionTime() {
        return this.getNumberAttribute('token_refresh_extension_time');
    }
    set tokenRefreshExtensionTime(value) {
        this._tokenRefreshExtensionTime = value;
    }
    resetTokenRefreshExtensionTime() {
        this._tokenRefreshExtensionTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tokenRefreshExtensionTimeInput() {
        return this._tokenRefreshExtensionTime;
    }
    get tokenStoreEnabled() {
        return this.getBooleanAttribute('token_store_enabled');
    }
    set tokenStoreEnabled(value) {
        this._tokenStoreEnabled = value;
    }
    resetTokenStoreEnabled() {
        this._tokenStoreEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tokenStoreEnabledInput() {
        return this._tokenStoreEnabled;
    }
    get tokenStorePath() {
        return this.getStringAttribute('token_store_path');
    }
    set tokenStorePath(value) {
        this._tokenStorePath = value;
    }
    resetTokenStorePath() {
        this._tokenStorePath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tokenStorePathInput() {
        return this._tokenStorePath;
    }
    get tokenStoreSasSettingName() {
        return this.getStringAttribute('token_store_sas_setting_name');
    }
    set tokenStoreSasSettingName(value) {
        this._tokenStoreSasSettingName = value;
    }
    resetTokenStoreSasSettingName() {
        this._tokenStoreSasSettingName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tokenStoreSasSettingNameInput() {
        return this._tokenStoreSasSettingName;
    }
    get validateNonce() {
        return this.getBooleanAttribute('validate_nonce');
    }
    set validateNonce(value) {
        this._validateNonce = value;
    }
    resetValidateNonce() {
        this._validateNonce = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get validateNonceInput() {
        return this._validateNonce;
    }
}
exports.LinuxFunctionAppAuthSettingsV2LoginOutputReference = LinuxFunctionAppAuthSettingsV2LoginOutputReference;
function linuxFunctionAppAuthSettingsV2MicrosoftV2ToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allowed_audiences: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowedAudiences),
        client_id: cdktf.stringToTerraform(struct.clientId),
        client_secret_setting_name: cdktf.stringToTerraform(struct.clientSecretSettingName),
        login_scopes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.loginScopes),
    };
}
exports.linuxFunctionAppAuthSettingsV2MicrosoftV2ToTerraform = linuxFunctionAppAuthSettingsV2MicrosoftV2ToTerraform;
function linuxFunctionAppAuthSettingsV2MicrosoftV2ToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allowed_audiences: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.allowedAudiences),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        client_id: {
            value: cdktf.stringToHclTerraform(struct.clientId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_secret_setting_name: {
            value: cdktf.stringToHclTerraform(struct.clientSecretSettingName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        login_scopes: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.loginScopes),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.linuxFunctionAppAuthSettingsV2MicrosoftV2ToHclTerraform = linuxFunctionAppAuthSettingsV2MicrosoftV2ToHclTerraform;
class LinuxFunctionAppAuthSettingsV2MicrosoftV2OutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowedAudiences !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedAudiences = this._allowedAudiences;
        }
        if (this._clientId !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientId = this._clientId;
        }
        if (this._clientSecretSettingName !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientSecretSettingName = this._clientSecretSettingName;
        }
        if (this._loginScopes !== undefined) {
            hasAnyValues = true;
            internalValueResult.loginScopes = this._loginScopes;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowedAudiences = undefined;
            this._clientId = undefined;
            this._clientSecretSettingName = undefined;
            this._loginScopes = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowedAudiences = value.allowedAudiences;
            this._clientId = value.clientId;
            this._clientSecretSettingName = value.clientSecretSettingName;
            this._loginScopes = value.loginScopes;
        }
    }
    get allowedAudiences() {
        return this.getListAttribute('allowed_audiences');
    }
    set allowedAudiences(value) {
        this._allowedAudiences = value;
    }
    resetAllowedAudiences() {
        this._allowedAudiences = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedAudiencesInput() {
        return this._allowedAudiences;
    }
    get clientId() {
        return this.getStringAttribute('client_id');
    }
    set clientId(value) {
        this._clientId = value;
    }
    // Temporarily expose input value. Use with caution.
    get clientIdInput() {
        return this._clientId;
    }
    get clientSecretSettingName() {
        return this.getStringAttribute('client_secret_setting_name');
    }
    set clientSecretSettingName(value) {
        this._clientSecretSettingName = value;
    }
    // Temporarily expose input value. Use with caution.
    get clientSecretSettingNameInput() {
        return this._clientSecretSettingName;
    }
    get loginScopes() {
        return this.getListAttribute('login_scopes');
    }
    set loginScopes(value) {
        this._loginScopes = value;
    }
    resetLoginScopes() {
        this._loginScopes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loginScopesInput() {
        return this._loginScopes;
    }
}
exports.LinuxFunctionAppAuthSettingsV2MicrosoftV2OutputReference = LinuxFunctionAppAuthSettingsV2MicrosoftV2OutputReference;
function linuxFunctionAppAuthSettingsV2TwitterV2ToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        consumer_key: cdktf.stringToTerraform(struct.consumerKey),
        consumer_secret_setting_name: cdktf.stringToTerraform(struct.consumerSecretSettingName),
    };
}
exports.linuxFunctionAppAuthSettingsV2TwitterV2ToTerraform = linuxFunctionAppAuthSettingsV2TwitterV2ToTerraform;
function linuxFunctionAppAuthSettingsV2TwitterV2ToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        consumer_key: {
            value: cdktf.stringToHclTerraform(struct.consumerKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        consumer_secret_setting_name: {
            value: cdktf.stringToHclTerraform(struct.consumerSecretSettingName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.linuxFunctionAppAuthSettingsV2TwitterV2ToHclTerraform = linuxFunctionAppAuthSettingsV2TwitterV2ToHclTerraform;
class LinuxFunctionAppAuthSettingsV2TwitterV2OutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._consumerKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.consumerKey = this._consumerKey;
        }
        if (this._consumerSecretSettingName !== undefined) {
            hasAnyValues = true;
            internalValueResult.consumerSecretSettingName = this._consumerSecretSettingName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._consumerKey = undefined;
            this._consumerSecretSettingName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._consumerKey = value.consumerKey;
            this._consumerSecretSettingName = value.consumerSecretSettingName;
        }
    }
    get consumerKey() {
        return this.getStringAttribute('consumer_key');
    }
    set consumerKey(value) {
        this._consumerKey = value;
    }
    // Temporarily expose input value. Use with caution.
    get consumerKeyInput() {
        return this._consumerKey;
    }
    get consumerSecretSettingName() {
        return this.getStringAttribute('consumer_secret_setting_name');
    }
    set consumerSecretSettingName(value) {
        this._consumerSecretSettingName = value;
    }
    // Temporarily expose input value. Use with caution.
    get consumerSecretSettingNameInput() {
        return this._consumerSecretSettingName;
    }
}
exports.LinuxFunctionAppAuthSettingsV2TwitterV2OutputReference = LinuxFunctionAppAuthSettingsV2TwitterV2OutputReference;
function linuxFunctionAppAuthSettingsV2ToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auth_enabled: cdktf.booleanToTerraform(struct.authEnabled),
        config_file_path: cdktf.stringToTerraform(struct.configFilePath),
        default_provider: cdktf.stringToTerraform(struct.defaultProvider),
        excluded_paths: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.excludedPaths),
        forward_proxy_convention: cdktf.stringToTerraform(struct.forwardProxyConvention),
        forward_proxy_custom_host_header_name: cdktf.stringToTerraform(struct.forwardProxyCustomHostHeaderName),
        forward_proxy_custom_scheme_header_name: cdktf.stringToTerraform(struct.forwardProxyCustomSchemeHeaderName),
        http_route_api_prefix: cdktf.stringToTerraform(struct.httpRouteApiPrefix),
        require_authentication: cdktf.booleanToTerraform(struct.requireAuthentication),
        require_https: cdktf.booleanToTerraform(struct.requireHttps),
        runtime_version: cdktf.stringToTerraform(struct.runtimeVersion),
        unauthenticated_action: cdktf.stringToTerraform(struct.unauthenticatedAction),
        active_directory_v2: linuxFunctionAppAuthSettingsV2ActiveDirectoryV2ToTerraform(struct.activeDirectoryV2),
        apple_v2: linuxFunctionAppAuthSettingsV2AppleV2ToTerraform(struct.appleV2),
        azure_static_web_app_v2: linuxFunctionAppAuthSettingsV2AzureStaticWebAppV2ToTerraform(struct.azureStaticWebAppV2),
        custom_oidc_v2: cdktf.listMapper(linuxFunctionAppAuthSettingsV2CustomOidcV2ToTerraform, true)(struct.customOidcV2),
        facebook_v2: linuxFunctionAppAuthSettingsV2FacebookV2ToTerraform(struct.facebookV2),
        github_v2: linuxFunctionAppAuthSettingsV2GithubV2ToTerraform(struct.githubV2),
        google_v2: linuxFunctionAppAuthSettingsV2GoogleV2ToTerraform(struct.googleV2),
        login: linuxFunctionAppAuthSettingsV2LoginToTerraform(struct.login),
        microsoft_v2: linuxFunctionAppAuthSettingsV2MicrosoftV2ToTerraform(struct.microsoftV2),
        twitter_v2: linuxFunctionAppAuthSettingsV2TwitterV2ToTerraform(struct.twitterV2),
    };
}
exports.linuxFunctionAppAuthSettingsV2ToTerraform = linuxFunctionAppAuthSettingsV2ToTerraform;
function linuxFunctionAppAuthSettingsV2ToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        auth_enabled: {
            value: cdktf.booleanToHclTerraform(struct.authEnabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        config_file_path: {
            value: cdktf.stringToHclTerraform(struct.configFilePath),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        default_provider: {
            value: cdktf.stringToHclTerraform(struct.defaultProvider),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        excluded_paths: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.excludedPaths),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        forward_proxy_convention: {
            value: cdktf.stringToHclTerraform(struct.forwardProxyConvention),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        forward_proxy_custom_host_header_name: {
            value: cdktf.stringToHclTerraform(struct.forwardProxyCustomHostHeaderName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        forward_proxy_custom_scheme_header_name: {
            value: cdktf.stringToHclTerraform(struct.forwardProxyCustomSchemeHeaderName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        http_route_api_prefix: {
            value: cdktf.stringToHclTerraform(struct.httpRouteApiPrefix),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        require_authentication: {
            value: cdktf.booleanToHclTerraform(struct.requireAuthentication),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        require_https: {
            value: cdktf.booleanToHclTerraform(struct.requireHttps),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        runtime_version: {
            value: cdktf.stringToHclTerraform(struct.runtimeVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        unauthenticated_action: {
            value: cdktf.stringToHclTerraform(struct.unauthenticatedAction),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        active_directory_v2: {
            value: linuxFunctionAppAuthSettingsV2ActiveDirectoryV2ToHclTerraform(struct.activeDirectoryV2),
            isBlock: true,
            type: "list",
            storageClassType: "LinuxFunctionAppAuthSettingsV2ActiveDirectoryV2List",
        },
        apple_v2: {
            value: linuxFunctionAppAuthSettingsV2AppleV2ToHclTerraform(struct.appleV2),
            isBlock: true,
            type: "list",
            storageClassType: "LinuxFunctionAppAuthSettingsV2AppleV2List",
        },
        azure_static_web_app_v2: {
            value: linuxFunctionAppAuthSettingsV2AzureStaticWebAppV2ToHclTerraform(struct.azureStaticWebAppV2),
            isBlock: true,
            type: "list",
            storageClassType: "LinuxFunctionAppAuthSettingsV2AzureStaticWebAppV2List",
        },
        custom_oidc_v2: {
            value: cdktf.listMapperHcl(linuxFunctionAppAuthSettingsV2CustomOidcV2ToHclTerraform, true)(struct.customOidcV2),
            isBlock: true,
            type: "list",
            storageClassType: "LinuxFunctionAppAuthSettingsV2CustomOidcV2List",
        },
        facebook_v2: {
            value: linuxFunctionAppAuthSettingsV2FacebookV2ToHclTerraform(struct.facebookV2),
            isBlock: true,
            type: "list",
            storageClassType: "LinuxFunctionAppAuthSettingsV2FacebookV2List",
        },
        github_v2: {
            value: linuxFunctionAppAuthSettingsV2GithubV2ToHclTerraform(struct.githubV2),
            isBlock: true,
            type: "list",
            storageClassType: "LinuxFunctionAppAuthSettingsV2GithubV2List",
        },
        google_v2: {
            value: linuxFunctionAppAuthSettingsV2GoogleV2ToHclTerraform(struct.googleV2),
            isBlock: true,
            type: "list",
            storageClassType: "LinuxFunctionAppAuthSettingsV2GoogleV2List",
        },
        login: {
            value: linuxFunctionAppAuthSettingsV2LoginToHclTerraform(struct.login),
            isBlock: true,
            type: "list",
            storageClassType: "LinuxFunctionAppAuthSettingsV2LoginList",
        },
        microsoft_v2: {
            value: linuxFunctionAppAuthSettingsV2MicrosoftV2ToHclTerraform(struct.microsoftV2),
            isBlock: true,
            type: "list",
            storageClassType: "LinuxFunctionAppAuthSettingsV2MicrosoftV2List",
        },
        twitter_v2: {
            value: linuxFunctionAppAuthSettingsV2TwitterV2ToHclTerraform(struct.twitterV2),
            isBlock: true,
            type: "list",
            storageClassType: "LinuxFunctionAppAuthSettingsV2TwitterV2List",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.linuxFunctionAppAuthSettingsV2ToHclTerraform = linuxFunctionAppAuthSettingsV2ToHclTerraform;
class LinuxFunctionAppAuthSettingsV2OutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // active_directory_v2 - computed: false, optional: true, required: false
        this._activeDirectoryV2 = new LinuxFunctionAppAuthSettingsV2ActiveDirectoryV2OutputReference(this, "active_directory_v2");
        // apple_v2 - computed: false, optional: true, required: false
        this._appleV2 = new LinuxFunctionAppAuthSettingsV2AppleV2OutputReference(this, "apple_v2");
        // azure_static_web_app_v2 - computed: false, optional: true, required: false
        this._azureStaticWebAppV2 = new LinuxFunctionAppAuthSettingsV2AzureStaticWebAppV2OutputReference(this, "azure_static_web_app_v2");
        // custom_oidc_v2 - computed: false, optional: true, required: false
        this._customOidcV2 = new LinuxFunctionAppAuthSettingsV2CustomOidcV2List(this, "custom_oidc_v2", false);
        // facebook_v2 - computed: false, optional: true, required: false
        this._facebookV2 = new LinuxFunctionAppAuthSettingsV2FacebookV2OutputReference(this, "facebook_v2");
        // github_v2 - computed: false, optional: true, required: false
        this._githubV2 = new LinuxFunctionAppAuthSettingsV2GithubV2OutputReference(this, "github_v2");
        // google_v2 - computed: false, optional: true, required: false
        this._googleV2 = new LinuxFunctionAppAuthSettingsV2GoogleV2OutputReference(this, "google_v2");
        // login - computed: false, optional: false, required: true
        this._login = new LinuxFunctionAppAuthSettingsV2LoginOutputReference(this, "login");
        // microsoft_v2 - computed: false, optional: true, required: false
        this._microsoftV2 = new LinuxFunctionAppAuthSettingsV2MicrosoftV2OutputReference(this, "microsoft_v2");
        // twitter_v2 - computed: false, optional: true, required: false
        this._twitterV2 = new LinuxFunctionAppAuthSettingsV2TwitterV2OutputReference(this, "twitter_v2");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._authEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.authEnabled = this._authEnabled;
        }
        if (this._configFilePath !== undefined) {
            hasAnyValues = true;
            internalValueResult.configFilePath = this._configFilePath;
        }
        if (this._defaultProvider !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultProvider = this._defaultProvider;
        }
        if (this._excludedPaths !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludedPaths = this._excludedPaths;
        }
        if (this._forwardProxyConvention !== undefined) {
            hasAnyValues = true;
            internalValueResult.forwardProxyConvention = this._forwardProxyConvention;
        }
        if (this._forwardProxyCustomHostHeaderName !== undefined) {
            hasAnyValues = true;
            internalValueResult.forwardProxyCustomHostHeaderName = this._forwardProxyCustomHostHeaderName;
        }
        if (this._forwardProxyCustomSchemeHeaderName !== undefined) {
            hasAnyValues = true;
            internalValueResult.forwardProxyCustomSchemeHeaderName = this._forwardProxyCustomSchemeHeaderName;
        }
        if (this._httpRouteApiPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpRouteApiPrefix = this._httpRouteApiPrefix;
        }
        if (this._requireAuthentication !== undefined) {
            hasAnyValues = true;
            internalValueResult.requireAuthentication = this._requireAuthentication;
        }
        if (this._requireHttps !== undefined) {
            hasAnyValues = true;
            internalValueResult.requireHttps = this._requireHttps;
        }
        if (this._runtimeVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.runtimeVersion = this._runtimeVersion;
        }
        if (this._unauthenticatedAction !== undefined) {
            hasAnyValues = true;
            internalValueResult.unauthenticatedAction = this._unauthenticatedAction;
        }
        if (this._activeDirectoryV2?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.activeDirectoryV2 = this._activeDirectoryV2?.internalValue;
        }
        if (this._appleV2?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.appleV2 = this._appleV2?.internalValue;
        }
        if (this._azureStaticWebAppV2?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.azureStaticWebAppV2 = this._azureStaticWebAppV2?.internalValue;
        }
        if (this._customOidcV2?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customOidcV2 = this._customOidcV2?.internalValue;
        }
        if (this._facebookV2?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.facebookV2 = this._facebookV2?.internalValue;
        }
        if (this._githubV2?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.githubV2 = this._githubV2?.internalValue;
        }
        if (this._googleV2?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.googleV2 = this._googleV2?.internalValue;
        }
        if (this._login?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.login = this._login?.internalValue;
        }
        if (this._microsoftV2?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.microsoftV2 = this._microsoftV2?.internalValue;
        }
        if (this._twitterV2?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.twitterV2 = this._twitterV2?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._authEnabled = undefined;
            this._configFilePath = undefined;
            this._defaultProvider = undefined;
            this._excludedPaths = undefined;
            this._forwardProxyConvention = undefined;
            this._forwardProxyCustomHostHeaderName = undefined;
            this._forwardProxyCustomSchemeHeaderName = undefined;
            this._httpRouteApiPrefix = undefined;
            this._requireAuthentication = undefined;
            this._requireHttps = undefined;
            this._runtimeVersion = undefined;
            this._unauthenticatedAction = undefined;
            this._activeDirectoryV2.internalValue = undefined;
            this._appleV2.internalValue = undefined;
            this._azureStaticWebAppV2.internalValue = undefined;
            this._customOidcV2.internalValue = undefined;
            this._facebookV2.internalValue = undefined;
            this._githubV2.internalValue = undefined;
            this._googleV2.internalValue = undefined;
            this._login.internalValue = undefined;
            this._microsoftV2.internalValue = undefined;
            this._twitterV2.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._authEnabled = value.authEnabled;
            this._configFilePath = value.configFilePath;
            this._defaultProvider = value.defaultProvider;
            this._excludedPaths = value.excludedPaths;
            this._forwardProxyConvention = value.forwardProxyConvention;
            this._forwardProxyCustomHostHeaderName = value.forwardProxyCustomHostHeaderName;
            this._forwardProxyCustomSchemeHeaderName = value.forwardProxyCustomSchemeHeaderName;
            this._httpRouteApiPrefix = value.httpRouteApiPrefix;
            this._requireAuthentication = value.requireAuthentication;
            this._requireHttps = value.requireHttps;
            this._runtimeVersion = value.runtimeVersion;
            this._unauthenticatedAction = value.unauthenticatedAction;
            this._activeDirectoryV2.internalValue = value.activeDirectoryV2;
            this._appleV2.internalValue = value.appleV2;
            this._azureStaticWebAppV2.internalValue = value.azureStaticWebAppV2;
            this._customOidcV2.internalValue = value.customOidcV2;
            this._facebookV2.internalValue = value.facebookV2;
            this._githubV2.internalValue = value.githubV2;
            this._googleV2.internalValue = value.googleV2;
            this._login.internalValue = value.login;
            this._microsoftV2.internalValue = value.microsoftV2;
            this._twitterV2.internalValue = value.twitterV2;
        }
    }
    get authEnabled() {
        return this.getBooleanAttribute('auth_enabled');
    }
    set authEnabled(value) {
        this._authEnabled = value;
    }
    resetAuthEnabled() {
        this._authEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authEnabledInput() {
        return this._authEnabled;
    }
    get configFilePath() {
        return this.getStringAttribute('config_file_path');
    }
    set configFilePath(value) {
        this._configFilePath = value;
    }
    resetConfigFilePath() {
        this._configFilePath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get configFilePathInput() {
        return this._configFilePath;
    }
    get defaultProvider() {
        return this.getStringAttribute('default_provider');
    }
    set defaultProvider(value) {
        this._defaultProvider = value;
    }
    resetDefaultProvider() {
        this._defaultProvider = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultProviderInput() {
        return this._defaultProvider;
    }
    get excludedPaths() {
        return this.getListAttribute('excluded_paths');
    }
    set excludedPaths(value) {
        this._excludedPaths = value;
    }
    resetExcludedPaths() {
        this._excludedPaths = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludedPathsInput() {
        return this._excludedPaths;
    }
    get forwardProxyConvention() {
        return this.getStringAttribute('forward_proxy_convention');
    }
    set forwardProxyConvention(value) {
        this._forwardProxyConvention = value;
    }
    resetForwardProxyConvention() {
        this._forwardProxyConvention = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get forwardProxyConventionInput() {
        return this._forwardProxyConvention;
    }
    get forwardProxyCustomHostHeaderName() {
        return this.getStringAttribute('forward_proxy_custom_host_header_name');
    }
    set forwardProxyCustomHostHeaderName(value) {
        this._forwardProxyCustomHostHeaderName = value;
    }
    resetForwardProxyCustomHostHeaderName() {
        this._forwardProxyCustomHostHeaderName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get forwardProxyCustomHostHeaderNameInput() {
        return this._forwardProxyCustomHostHeaderName;
    }
    get forwardProxyCustomSchemeHeaderName() {
        return this.getStringAttribute('forward_proxy_custom_scheme_header_name');
    }
    set forwardProxyCustomSchemeHeaderName(value) {
        this._forwardProxyCustomSchemeHeaderName = value;
    }
    resetForwardProxyCustomSchemeHeaderName() {
        this._forwardProxyCustomSchemeHeaderName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get forwardProxyCustomSchemeHeaderNameInput() {
        return this._forwardProxyCustomSchemeHeaderName;
    }
    get httpRouteApiPrefix() {
        return this.getStringAttribute('http_route_api_prefix');
    }
    set httpRouteApiPrefix(value) {
        this._httpRouteApiPrefix = value;
    }
    resetHttpRouteApiPrefix() {
        this._httpRouteApiPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpRouteApiPrefixInput() {
        return this._httpRouteApiPrefix;
    }
    get requireAuthentication() {
        return this.getBooleanAttribute('require_authentication');
    }
    set requireAuthentication(value) {
        this._requireAuthentication = value;
    }
    resetRequireAuthentication() {
        this._requireAuthentication = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requireAuthenticationInput() {
        return this._requireAuthentication;
    }
    get requireHttps() {
        return this.getBooleanAttribute('require_https');
    }
    set requireHttps(value) {
        this._requireHttps = value;
    }
    resetRequireHttps() {
        this._requireHttps = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requireHttpsInput() {
        return this._requireHttps;
    }
    get runtimeVersion() {
        return this.getStringAttribute('runtime_version');
    }
    set runtimeVersion(value) {
        this._runtimeVersion = value;
    }
    resetRuntimeVersion() {
        this._runtimeVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get runtimeVersionInput() {
        return this._runtimeVersion;
    }
    get unauthenticatedAction() {
        return this.getStringAttribute('unauthenticated_action');
    }
    set unauthenticatedAction(value) {
        this._unauthenticatedAction = value;
    }
    resetUnauthenticatedAction() {
        this._unauthenticatedAction = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get unauthenticatedActionInput() {
        return this._unauthenticatedAction;
    }
    get activeDirectoryV2() {
        return this._activeDirectoryV2;
    }
    putActiveDirectoryV2(value) {
        this._activeDirectoryV2.internalValue = value;
    }
    resetActiveDirectoryV2() {
        this._activeDirectoryV2.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get activeDirectoryV2Input() {
        return this._activeDirectoryV2.internalValue;
    }
    get appleV2() {
        return this._appleV2;
    }
    putAppleV2(value) {
        this._appleV2.internalValue = value;
    }
    resetAppleV2() {
        this._appleV2.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get appleV2Input() {
        return this._appleV2.internalValue;
    }
    get azureStaticWebAppV2() {
        return this._azureStaticWebAppV2;
    }
    putAzureStaticWebAppV2(value) {
        this._azureStaticWebAppV2.internalValue = value;
    }
    resetAzureStaticWebAppV2() {
        this._azureStaticWebAppV2.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get azureStaticWebAppV2Input() {
        return this._azureStaticWebAppV2.internalValue;
    }
    get customOidcV2() {
        return this._customOidcV2;
    }
    putCustomOidcV2(value) {
        this._customOidcV2.internalValue = value;
    }
    resetCustomOidcV2() {
        this._customOidcV2.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customOidcV2Input() {
        return this._customOidcV2.internalValue;
    }
    get facebookV2() {
        return this._facebookV2;
    }
    putFacebookV2(value) {
        this._facebookV2.internalValue = value;
    }
    resetFacebookV2() {
        this._facebookV2.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get facebookV2Input() {
        return this._facebookV2.internalValue;
    }
    get githubV2() {
        return this._githubV2;
    }
    putGithubV2(value) {
        this._githubV2.internalValue = value;
    }
    resetGithubV2() {
        this._githubV2.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get githubV2Input() {
        return this._githubV2.internalValue;
    }
    get googleV2() {
        return this._googleV2;
    }
    putGoogleV2(value) {
        this._googleV2.internalValue = value;
    }
    resetGoogleV2() {
        this._googleV2.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get googleV2Input() {
        return this._googleV2.internalValue;
    }
    get login() {
        return this._login;
    }
    putLogin(value) {
        this._login.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get loginInput() {
        return this._login.internalValue;
    }
    get microsoftV2() {
        return this._microsoftV2;
    }
    putMicrosoftV2(value) {
        this._microsoftV2.internalValue = value;
    }
    resetMicrosoftV2() {
        this._microsoftV2.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get microsoftV2Input() {
        return this._microsoftV2.internalValue;
    }
    get twitterV2() {
        return this._twitterV2;
    }
    putTwitterV2(value) {
        this._twitterV2.internalValue = value;
    }
    resetTwitterV2() {
        this._twitterV2.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get twitterV2Input() {
        return this._twitterV2.internalValue;
    }
}
exports.LinuxFunctionAppAuthSettingsV2OutputReference = LinuxFunctionAppAuthSettingsV2OutputReference;
function linuxFunctionAppBackupScheduleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        frequency_interval: cdktf.numberToTerraform(struct.frequencyInterval),
        frequency_unit: cdktf.stringToTerraform(struct.frequencyUnit),
        keep_at_least_one_backup: cdktf.booleanToTerraform(struct.keepAtLeastOneBackup),
        retention_period_days: cdktf.numberToTerraform(struct.retentionPeriodDays),
        start_time: cdktf.stringToTerraform(struct.startTime),
    };
}
exports.linuxFunctionAppBackupScheduleToTerraform = linuxFunctionAppBackupScheduleToTerraform;
function linuxFunctionAppBackupScheduleToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        frequency_interval: {
            value: cdktf.numberToHclTerraform(struct.frequencyInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        frequency_unit: {
            value: cdktf.stringToHclTerraform(struct.frequencyUnit),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        keep_at_least_one_backup: {
            value: cdktf.booleanToHclTerraform(struct.keepAtLeastOneBackup),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        retention_period_days: {
            value: cdktf.numberToHclTerraform(struct.retentionPeriodDays),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        start_time: {
            value: cdktf.stringToHclTerraform(struct.startTime),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.linuxFunctionAppBackupScheduleToHclTerraform = linuxFunctionAppBackupScheduleToHclTerraform;
class LinuxFunctionAppBackupScheduleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._frequencyInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.frequencyInterval = this._frequencyInterval;
        }
        if (this._frequencyUnit !== undefined) {
            hasAnyValues = true;
            internalValueResult.frequencyUnit = this._frequencyUnit;
        }
        if (this._keepAtLeastOneBackup !== undefined) {
            hasAnyValues = true;
            internalValueResult.keepAtLeastOneBackup = this._keepAtLeastOneBackup;
        }
        if (this._retentionPeriodDays !== undefined) {
            hasAnyValues = true;
            internalValueResult.retentionPeriodDays = this._retentionPeriodDays;
        }
        if (this._startTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.startTime = this._startTime;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._frequencyInterval = undefined;
            this._frequencyUnit = undefined;
            this._keepAtLeastOneBackup = undefined;
            this._retentionPeriodDays = undefined;
            this._startTime = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._frequencyInterval = value.frequencyInterval;
            this._frequencyUnit = value.frequencyUnit;
            this._keepAtLeastOneBackup = value.keepAtLeastOneBackup;
            this._retentionPeriodDays = value.retentionPeriodDays;
            this._startTime = value.startTime;
        }
    }
    get frequencyInterval() {
        return this.getNumberAttribute('frequency_interval');
    }
    set frequencyInterval(value) {
        this._frequencyInterval = value;
    }
    // Temporarily expose input value. Use with caution.
    get frequencyIntervalInput() {
        return this._frequencyInterval;
    }
    get frequencyUnit() {
        return this.getStringAttribute('frequency_unit');
    }
    set frequencyUnit(value) {
        this._frequencyUnit = value;
    }
    // Temporarily expose input value. Use with caution.
    get frequencyUnitInput() {
        return this._frequencyUnit;
    }
    get keepAtLeastOneBackup() {
        return this.getBooleanAttribute('keep_at_least_one_backup');
    }
    set keepAtLeastOneBackup(value) {
        this._keepAtLeastOneBackup = value;
    }
    resetKeepAtLeastOneBackup() {
        this._keepAtLeastOneBackup = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keepAtLeastOneBackupInput() {
        return this._keepAtLeastOneBackup;
    }
    // last_execution_time - computed: true, optional: false, required: false
    get lastExecutionTime() {
        return this.getStringAttribute('last_execution_time');
    }
    get retentionPeriodDays() {
        return this.getNumberAttribute('retention_period_days');
    }
    set retentionPeriodDays(value) {
        this._retentionPeriodDays = value;
    }
    resetRetentionPeriodDays() {
        this._retentionPeriodDays = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retentionPeriodDaysInput() {
        return this._retentionPeriodDays;
    }
    get startTime() {
        return this.getStringAttribute('start_time');
    }
    set startTime(value) {
        this._startTime = value;
    }
    resetStartTime() {
        this._startTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get startTimeInput() {
        return this._startTime;
    }
}
exports.LinuxFunctionAppBackupScheduleOutputReference = LinuxFunctionAppBackupScheduleOutputReference;
function linuxFunctionAppBackupToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        name: cdktf.stringToTerraform(struct.name),
        storage_account_url: cdktf.stringToTerraform(struct.storageAccountUrl),
        schedule: linuxFunctionAppBackupScheduleToTerraform(struct.schedule),
    };
}
exports.linuxFunctionAppBackupToTerraform = linuxFunctionAppBackupToTerraform;
function linuxFunctionAppBackupToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        storage_account_url: {
            value: cdktf.stringToHclTerraform(struct.storageAccountUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        schedule: {
            value: linuxFunctionAppBackupScheduleToHclTerraform(struct.schedule),
            isBlock: true,
            type: "list",
            storageClassType: "LinuxFunctionAppBackupScheduleList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.linuxFunctionAppBackupToHclTerraform = linuxFunctionAppBackupToHclTerraform;
class LinuxFunctionAppBackupOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // schedule - computed: false, optional: false, required: true
        this._schedule = new LinuxFunctionAppBackupScheduleOutputReference(this, "schedule");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._storageAccountUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.storageAccountUrl = this._storageAccountUrl;
        }
        if (this._schedule?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.schedule = this._schedule?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._name = undefined;
            this._storageAccountUrl = undefined;
            this._schedule.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._name = value.name;
            this._storageAccountUrl = value.storageAccountUrl;
            this._schedule.internalValue = value.schedule;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get storageAccountUrl() {
        return this.getStringAttribute('storage_account_url');
    }
    set storageAccountUrl(value) {
        this._storageAccountUrl = value;
    }
    // Temporarily expose input value. Use with caution.
    get storageAccountUrlInput() {
        return this._storageAccountUrl;
    }
    get schedule() {
        return this._schedule;
    }
    putSchedule(value) {
        this._schedule.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get scheduleInput() {
        return this._schedule.internalValue;
    }
}
exports.LinuxFunctionAppBackupOutputReference = LinuxFunctionAppBackupOutputReference;
function linuxFunctionAppConnectionStringToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        type: cdktf.stringToTerraform(struct.type),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.linuxFunctionAppConnectionStringToTerraform = linuxFunctionAppConnectionStringToTerraform;
function linuxFunctionAppConnectionStringToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        type: {
            value: cdktf.stringToHclTerraform(struct.type),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.linuxFunctionAppConnectionStringToHclTerraform = linuxFunctionAppConnectionStringToHclTerraform;
class LinuxFunctionAppConnectionStringOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._type = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._type = value.type;
            this._value = value.value;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.LinuxFunctionAppConnectionStringOutputReference = LinuxFunctionAppConnectionStringOutputReference;
class LinuxFunctionAppConnectionStringList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new LinuxFunctionAppConnectionStringOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.LinuxFunctionAppConnectionStringList = LinuxFunctionAppConnectionStringList;
function linuxFunctionAppIdentityToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        identity_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.identityIds),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.linuxFunctionAppIdentityToTerraform = linuxFunctionAppIdentityToTerraform;
function linuxFunctionAppIdentityToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        identity_ids: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.identityIds),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        type: {
            value: cdktf.stringToHclTerraform(struct.type),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.linuxFunctionAppIdentityToHclTerraform = linuxFunctionAppIdentityToHclTerraform;
class LinuxFunctionAppIdentityOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._identityIds !== undefined) {
            hasAnyValues = true;
            internalValueResult.identityIds = this._identityIds;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._identityIds = undefined;
            this._type = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._identityIds = value.identityIds;
            this._type = value.type;
        }
    }
    get identityIds() {
        return cdktf.Fn.tolist(this.getListAttribute('identity_ids'));
    }
    set identityIds(value) {
        this._identityIds = value;
    }
    resetIdentityIds() {
        this._identityIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get identityIdsInput() {
        return this._identityIds;
    }
    // principal_id - computed: true, optional: false, required: false
    get principalId() {
        return this.getStringAttribute('principal_id');
    }
    // tenant_id - computed: true, optional: false, required: false
    get tenantId() {
        return this.getStringAttribute('tenant_id');
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
}
exports.LinuxFunctionAppIdentityOutputReference = LinuxFunctionAppIdentityOutputReference;
function linuxFunctionAppSiteConfigAppServiceLogsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        disk_quota_mb: cdktf.numberToTerraform(struct.diskQuotaMb),
        retention_period_days: cdktf.numberToTerraform(struct.retentionPeriodDays),
    };
}
exports.linuxFunctionAppSiteConfigAppServiceLogsToTerraform = linuxFunctionAppSiteConfigAppServiceLogsToTerraform;
function linuxFunctionAppSiteConfigAppServiceLogsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        disk_quota_mb: {
            value: cdktf.numberToHclTerraform(struct.diskQuotaMb),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        retention_period_days: {
            value: cdktf.numberToHclTerraform(struct.retentionPeriodDays),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.linuxFunctionAppSiteConfigAppServiceLogsToHclTerraform = linuxFunctionAppSiteConfigAppServiceLogsToHclTerraform;
class LinuxFunctionAppSiteConfigAppServiceLogsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._diskQuotaMb !== undefined) {
            hasAnyValues = true;
            internalValueResult.diskQuotaMb = this._diskQuotaMb;
        }
        if (this._retentionPeriodDays !== undefined) {
            hasAnyValues = true;
            internalValueResult.retentionPeriodDays = this._retentionPeriodDays;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._diskQuotaMb = undefined;
            this._retentionPeriodDays = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._diskQuotaMb = value.diskQuotaMb;
            this._retentionPeriodDays = value.retentionPeriodDays;
        }
    }
    get diskQuotaMb() {
        return this.getNumberAttribute('disk_quota_mb');
    }
    set diskQuotaMb(value) {
        this._diskQuotaMb = value;
    }
    resetDiskQuotaMb() {
        this._diskQuotaMb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get diskQuotaMbInput() {
        return this._diskQuotaMb;
    }
    get retentionPeriodDays() {
        return this.getNumberAttribute('retention_period_days');
    }
    set retentionPeriodDays(value) {
        this._retentionPeriodDays = value;
    }
    resetRetentionPeriodDays() {
        this._retentionPeriodDays = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retentionPeriodDaysInput() {
        return this._retentionPeriodDays;
    }
}
exports.LinuxFunctionAppSiteConfigAppServiceLogsOutputReference = LinuxFunctionAppSiteConfigAppServiceLogsOutputReference;
function linuxFunctionAppSiteConfigApplicationStackDockerToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        image_name: cdktf.stringToTerraform(struct.imageName),
        image_tag: cdktf.stringToTerraform(struct.imageTag),
        registry_password: cdktf.stringToTerraform(struct.registryPassword),
        registry_url: cdktf.stringToTerraform(struct.registryUrl),
        registry_username: cdktf.stringToTerraform(struct.registryUsername),
    };
}
exports.linuxFunctionAppSiteConfigApplicationStackDockerToTerraform = linuxFunctionAppSiteConfigApplicationStackDockerToTerraform;
function linuxFunctionAppSiteConfigApplicationStackDockerToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        image_name: {
            value: cdktf.stringToHclTerraform(struct.imageName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        image_tag: {
            value: cdktf.stringToHclTerraform(struct.imageTag),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        registry_password: {
            value: cdktf.stringToHclTerraform(struct.registryPassword),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        registry_url: {
            value: cdktf.stringToHclTerraform(struct.registryUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        registry_username: {
            value: cdktf.stringToHclTerraform(struct.registryUsername),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.linuxFunctionAppSiteConfigApplicationStackDockerToHclTerraform = linuxFunctionAppSiteConfigApplicationStackDockerToHclTerraform;
class LinuxFunctionAppSiteConfigApplicationStackDockerOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._imageName !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageName = this._imageName;
        }
        if (this._imageTag !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageTag = this._imageTag;
        }
        if (this._registryPassword !== undefined) {
            hasAnyValues = true;
            internalValueResult.registryPassword = this._registryPassword;
        }
        if (this._registryUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.registryUrl = this._registryUrl;
        }
        if (this._registryUsername !== undefined) {
            hasAnyValues = true;
            internalValueResult.registryUsername = this._registryUsername;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._imageName = undefined;
            this._imageTag = undefined;
            this._registryPassword = undefined;
            this._registryUrl = undefined;
            this._registryUsername = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._imageName = value.imageName;
            this._imageTag = value.imageTag;
            this._registryPassword = value.registryPassword;
            this._registryUrl = value.registryUrl;
            this._registryUsername = value.registryUsername;
        }
    }
    get imageName() {
        return this.getStringAttribute('image_name');
    }
    set imageName(value) {
        this._imageName = value;
    }
    // Temporarily expose input value. Use with caution.
    get imageNameInput() {
        return this._imageName;
    }
    get imageTag() {
        return this.getStringAttribute('image_tag');
    }
    set imageTag(value) {
        this._imageTag = value;
    }
    // Temporarily expose input value. Use with caution.
    get imageTagInput() {
        return this._imageTag;
    }
    get registryPassword() {
        return this.getStringAttribute('registry_password');
    }
    set registryPassword(value) {
        this._registryPassword = value;
    }
    resetRegistryPassword() {
        this._registryPassword = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get registryPasswordInput() {
        return this._registryPassword;
    }
    get registryUrl() {
        return this.getStringAttribute('registry_url');
    }
    set registryUrl(value) {
        this._registryUrl = value;
    }
    // Temporarily expose input value. Use with caution.
    get registryUrlInput() {
        return this._registryUrl;
    }
    get registryUsername() {
        return this.getStringAttribute('registry_username');
    }
    set registryUsername(value) {
        this._registryUsername = value;
    }
    resetRegistryUsername() {
        this._registryUsername = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get registryUsernameInput() {
        return this._registryUsername;
    }
}
exports.LinuxFunctionAppSiteConfigApplicationStackDockerOutputReference = LinuxFunctionAppSiteConfigApplicationStackDockerOutputReference;
class LinuxFunctionAppSiteConfigApplicationStackDockerList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new LinuxFunctionAppSiteConfigApplicationStackDockerOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.LinuxFunctionAppSiteConfigApplicationStackDockerList = LinuxFunctionAppSiteConfigApplicationStackDockerList;
function linuxFunctionAppSiteConfigApplicationStackToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dotnet_version: cdktf.stringToTerraform(struct.dotnetVersion),
        java_version: cdktf.stringToTerraform(struct.javaVersion),
        node_version: cdktf.stringToTerraform(struct.nodeVersion),
        powershell_core_version: cdktf.stringToTerraform(struct.powershellCoreVersion),
        python_version: cdktf.stringToTerraform(struct.pythonVersion),
        use_custom_runtime: cdktf.booleanToTerraform(struct.useCustomRuntime),
        use_dotnet_isolated_runtime: cdktf.booleanToTerraform(struct.useDotnetIsolatedRuntime),
        docker: cdktf.listMapper(linuxFunctionAppSiteConfigApplicationStackDockerToTerraform, true)(struct.docker),
    };
}
exports.linuxFunctionAppSiteConfigApplicationStackToTerraform = linuxFunctionAppSiteConfigApplicationStackToTerraform;
function linuxFunctionAppSiteConfigApplicationStackToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        dotnet_version: {
            value: cdktf.stringToHclTerraform(struct.dotnetVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        java_version: {
            value: cdktf.stringToHclTerraform(struct.javaVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        node_version: {
            value: cdktf.stringToHclTerraform(struct.nodeVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        powershell_core_version: {
            value: cdktf.stringToHclTerraform(struct.powershellCoreVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        python_version: {
            value: cdktf.stringToHclTerraform(struct.pythonVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        use_custom_runtime: {
            value: cdktf.booleanToHclTerraform(struct.useCustomRuntime),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        use_dotnet_isolated_runtime: {
            value: cdktf.booleanToHclTerraform(struct.useDotnetIsolatedRuntime),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        docker: {
            value: cdktf.listMapperHcl(linuxFunctionAppSiteConfigApplicationStackDockerToHclTerraform, true)(struct.docker),
            isBlock: true,
            type: "list",
            storageClassType: "LinuxFunctionAppSiteConfigApplicationStackDockerList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.linuxFunctionAppSiteConfigApplicationStackToHclTerraform = linuxFunctionAppSiteConfigApplicationStackToHclTerraform;
class LinuxFunctionAppSiteConfigApplicationStackOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // docker - computed: false, optional: true, required: false
        this._docker = new LinuxFunctionAppSiteConfigApplicationStackDockerList(this, "docker", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dotnetVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.dotnetVersion = this._dotnetVersion;
        }
        if (this._javaVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.javaVersion = this._javaVersion;
        }
        if (this._nodeVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.nodeVersion = this._nodeVersion;
        }
        if (this._powershellCoreVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.powershellCoreVersion = this._powershellCoreVersion;
        }
        if (this._pythonVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.pythonVersion = this._pythonVersion;
        }
        if (this._useCustomRuntime !== undefined) {
            hasAnyValues = true;
            internalValueResult.useCustomRuntime = this._useCustomRuntime;
        }
        if (this._useDotnetIsolatedRuntime !== undefined) {
            hasAnyValues = true;
            internalValueResult.useDotnetIsolatedRuntime = this._useDotnetIsolatedRuntime;
        }
        if (this._docker?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.docker = this._docker?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dotnetVersion = undefined;
            this._javaVersion = undefined;
            this._nodeVersion = undefined;
            this._powershellCoreVersion = undefined;
            this._pythonVersion = undefined;
            this._useCustomRuntime = undefined;
            this._useDotnetIsolatedRuntime = undefined;
            this._docker.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dotnetVersion = value.dotnetVersion;
            this._javaVersion = value.javaVersion;
            this._nodeVersion = value.nodeVersion;
            this._powershellCoreVersion = value.powershellCoreVersion;
            this._pythonVersion = value.pythonVersion;
            this._useCustomRuntime = value.useCustomRuntime;
            this._useDotnetIsolatedRuntime = value.useDotnetIsolatedRuntime;
            this._docker.internalValue = value.docker;
        }
    }
    get dotnetVersion() {
        return this.getStringAttribute('dotnet_version');
    }
    set dotnetVersion(value) {
        this._dotnetVersion = value;
    }
    resetDotnetVersion() {
        this._dotnetVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dotnetVersionInput() {
        return this._dotnetVersion;
    }
    get javaVersion() {
        return this.getStringAttribute('java_version');
    }
    set javaVersion(value) {
        this._javaVersion = value;
    }
    resetJavaVersion() {
        this._javaVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get javaVersionInput() {
        return this._javaVersion;
    }
    get nodeVersion() {
        return this.getStringAttribute('node_version');
    }
    set nodeVersion(value) {
        this._nodeVersion = value;
    }
    resetNodeVersion() {
        this._nodeVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodeVersionInput() {
        return this._nodeVersion;
    }
    get powershellCoreVersion() {
        return this.getStringAttribute('powershell_core_version');
    }
    set powershellCoreVersion(value) {
        this._powershellCoreVersion = value;
    }
    resetPowershellCoreVersion() {
        this._powershellCoreVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get powershellCoreVersionInput() {
        return this._powershellCoreVersion;
    }
    get pythonVersion() {
        return this.getStringAttribute('python_version');
    }
    set pythonVersion(value) {
        this._pythonVersion = value;
    }
    resetPythonVersion() {
        this._pythonVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pythonVersionInput() {
        return this._pythonVersion;
    }
    get useCustomRuntime() {
        return this.getBooleanAttribute('use_custom_runtime');
    }
    set useCustomRuntime(value) {
        this._useCustomRuntime = value;
    }
    resetUseCustomRuntime() {
        this._useCustomRuntime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get useCustomRuntimeInput() {
        return this._useCustomRuntime;
    }
    get useDotnetIsolatedRuntime() {
        return this.getBooleanAttribute('use_dotnet_isolated_runtime');
    }
    set useDotnetIsolatedRuntime(value) {
        this._useDotnetIsolatedRuntime = value;
    }
    resetUseDotnetIsolatedRuntime() {
        this._useDotnetIsolatedRuntime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get useDotnetIsolatedRuntimeInput() {
        return this._useDotnetIsolatedRuntime;
    }
    get docker() {
        return this._docker;
    }
    putDocker(value) {
        this._docker.internalValue = value;
    }
    resetDocker() {
        this._docker.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dockerInput() {
        return this._docker.internalValue;
    }
}
exports.LinuxFunctionAppSiteConfigApplicationStackOutputReference = LinuxFunctionAppSiteConfigApplicationStackOutputReference;
function linuxFunctionAppSiteConfigCorsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allowed_origins: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowedOrigins),
        support_credentials: cdktf.booleanToTerraform(struct.supportCredentials),
    };
}
exports.linuxFunctionAppSiteConfigCorsToTerraform = linuxFunctionAppSiteConfigCorsToTerraform;
function linuxFunctionAppSiteConfigCorsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allowed_origins: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.allowedOrigins),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        support_credentials: {
            value: cdktf.booleanToHclTerraform(struct.supportCredentials),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.linuxFunctionAppSiteConfigCorsToHclTerraform = linuxFunctionAppSiteConfigCorsToHclTerraform;
class LinuxFunctionAppSiteConfigCorsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowedOrigins !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedOrigins = this._allowedOrigins;
        }
        if (this._supportCredentials !== undefined) {
            hasAnyValues = true;
            internalValueResult.supportCredentials = this._supportCredentials;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowedOrigins = undefined;
            this._supportCredentials = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowedOrigins = value.allowedOrigins;
            this._supportCredentials = value.supportCredentials;
        }
    }
    get allowedOrigins() {
        return cdktf.Fn.tolist(this.getListAttribute('allowed_origins'));
    }
    set allowedOrigins(value) {
        this._allowedOrigins = value;
    }
    resetAllowedOrigins() {
        this._allowedOrigins = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedOriginsInput() {
        return this._allowedOrigins;
    }
    get supportCredentials() {
        return this.getBooleanAttribute('support_credentials');
    }
    set supportCredentials(value) {
        this._supportCredentials = value;
    }
    resetSupportCredentials() {
        this._supportCredentials = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get supportCredentialsInput() {
        return this._supportCredentials;
    }
}
exports.LinuxFunctionAppSiteConfigCorsOutputReference = LinuxFunctionAppSiteConfigCorsOutputReference;
function linuxFunctionAppSiteConfigIpRestrictionHeadersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        x_azure_fdid: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.xAzureFdid),
        x_fd_health_probe: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.xFdHealthProbe),
        x_forwarded_for: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.xForwardedFor),
        x_forwarded_host: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.xForwardedHost),
    };
}
exports.linuxFunctionAppSiteConfigIpRestrictionHeadersToTerraform = linuxFunctionAppSiteConfigIpRestrictionHeadersToTerraform;
function linuxFunctionAppSiteConfigIpRestrictionHeadersToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        x_azure_fdid: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.xAzureFdid),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        x_fd_health_probe: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.xFdHealthProbe),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        x_forwarded_for: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.xForwardedFor),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        x_forwarded_host: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.xForwardedHost),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.linuxFunctionAppSiteConfigIpRestrictionHeadersToHclTerraform = linuxFunctionAppSiteConfigIpRestrictionHeadersToHclTerraform;
class LinuxFunctionAppSiteConfigIpRestrictionHeadersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._xAzureFdid !== undefined) {
            hasAnyValues = true;
            internalValueResult.xAzureFdid = this._xAzureFdid;
        }
        if (this._xFdHealthProbe !== undefined) {
            hasAnyValues = true;
            internalValueResult.xFdHealthProbe = this._xFdHealthProbe;
        }
        if (this._xForwardedFor !== undefined) {
            hasAnyValues = true;
            internalValueResult.xForwardedFor = this._xForwardedFor;
        }
        if (this._xForwardedHost !== undefined) {
            hasAnyValues = true;
            internalValueResult.xForwardedHost = this._xForwardedHost;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._xAzureFdid = undefined;
            this._xFdHealthProbe = undefined;
            this._xForwardedFor = undefined;
            this._xForwardedHost = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._xAzureFdid = value.xAzureFdid;
            this._xFdHealthProbe = value.xFdHealthProbe;
            this._xForwardedFor = value.xForwardedFor;
            this._xForwardedHost = value.xForwardedHost;
        }
    }
    get xAzureFdid() {
        return this.getListAttribute('x_azure_fdid');
    }
    set xAzureFdid(value) {
        this._xAzureFdid = value;
    }
    resetXAzureFdid() {
        this._xAzureFdid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get xAzureFdidInput() {
        return this._xAzureFdid;
    }
    get xFdHealthProbe() {
        return this.getListAttribute('x_fd_health_probe');
    }
    set xFdHealthProbe(value) {
        this._xFdHealthProbe = value;
    }
    resetXFdHealthProbe() {
        this._xFdHealthProbe = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get xFdHealthProbeInput() {
        return this._xFdHealthProbe;
    }
    get xForwardedFor() {
        return this.getListAttribute('x_forwarded_for');
    }
    set xForwardedFor(value) {
        this._xForwardedFor = value;
    }
    resetXForwardedFor() {
        this._xForwardedFor = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get xForwardedForInput() {
        return this._xForwardedFor;
    }
    get xForwardedHost() {
        return this.getListAttribute('x_forwarded_host');
    }
    set xForwardedHost(value) {
        this._xForwardedHost = value;
    }
    resetXForwardedHost() {
        this._xForwardedHost = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get xForwardedHostInput() {
        return this._xForwardedHost;
    }
}
exports.LinuxFunctionAppSiteConfigIpRestrictionHeadersOutputReference = LinuxFunctionAppSiteConfigIpRestrictionHeadersOutputReference;
class LinuxFunctionAppSiteConfigIpRestrictionHeadersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new LinuxFunctionAppSiteConfigIpRestrictionHeadersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.LinuxFunctionAppSiteConfigIpRestrictionHeadersList = LinuxFunctionAppSiteConfigIpRestrictionHeadersList;
function linuxFunctionAppSiteConfigIpRestrictionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        action: cdktf.stringToTerraform(struct.action),
        description: cdktf.stringToTerraform(struct.description),
        headers: cdktf.listMapper(linuxFunctionAppSiteConfigIpRestrictionHeadersToTerraform, false)(struct.headers),
        ip_address: cdktf.stringToTerraform(struct.ipAddress),
        name: cdktf.stringToTerraform(struct.name),
        priority: cdktf.numberToTerraform(struct.priority),
        service_tag: cdktf.stringToTerraform(struct.serviceTag),
        virtual_network_subnet_id: cdktf.stringToTerraform(struct.virtualNetworkSubnetId),
    };
}
exports.linuxFunctionAppSiteConfigIpRestrictionToTerraform = linuxFunctionAppSiteConfigIpRestrictionToTerraform;
function linuxFunctionAppSiteConfigIpRestrictionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        action: {
            value: cdktf.stringToHclTerraform(struct.action),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        description: {
            value: cdktf.stringToHclTerraform(struct.description),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        headers: {
            value: cdktf.listMapperHcl(linuxFunctionAppSiteConfigIpRestrictionHeadersToHclTerraform, false)(struct.headers),
            isBlock: true,
            type: "list",
            storageClassType: "LinuxFunctionAppSiteConfigIpRestrictionHeadersList",
        },
        ip_address: {
            value: cdktf.stringToHclTerraform(struct.ipAddress),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        priority: {
            value: cdktf.numberToHclTerraform(struct.priority),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        service_tag: {
            value: cdktf.stringToHclTerraform(struct.serviceTag),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        virtual_network_subnet_id: {
            value: cdktf.stringToHclTerraform(struct.virtualNetworkSubnetId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.linuxFunctionAppSiteConfigIpRestrictionToHclTerraform = linuxFunctionAppSiteConfigIpRestrictionToHclTerraform;
class LinuxFunctionAppSiteConfigIpRestrictionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // headers - computed: false, optional: true, required: false
        this._headers = new LinuxFunctionAppSiteConfigIpRestrictionHeadersList(this, "headers", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._action !== undefined) {
            hasAnyValues = true;
            internalValueResult.action = this._action;
        }
        if (this._description !== undefined) {
            hasAnyValues = true;
            internalValueResult.description = this._description;
        }
        if (this._headers?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headers = this._headers?.internalValue;
        }
        if (this._ipAddress !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipAddress = this._ipAddress;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._priority !== undefined) {
            hasAnyValues = true;
            internalValueResult.priority = this._priority;
        }
        if (this._serviceTag !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceTag = this._serviceTag;
        }
        if (this._virtualNetworkSubnetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.virtualNetworkSubnetId = this._virtualNetworkSubnetId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._action = undefined;
            this._description = undefined;
            this._headers.internalValue = undefined;
            this._ipAddress = undefined;
            this._name = undefined;
            this._priority = undefined;
            this._serviceTag = undefined;
            this._virtualNetworkSubnetId = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._action = value.action;
            this._description = value.description;
            this._headers.internalValue = value.headers;
            this._ipAddress = value.ipAddress;
            this._name = value.name;
            this._priority = value.priority;
            this._serviceTag = value.serviceTag;
            this._virtualNetworkSubnetId = value.virtualNetworkSubnetId;
        }
    }
    get action() {
        return this.getStringAttribute('action');
    }
    set action(value) {
        this._action = value;
    }
    resetAction() {
        this._action = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get actionInput() {
        return this._action;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get headers() {
        return this._headers;
    }
    putHeaders(value) {
        this._headers.internalValue = value;
    }
    resetHeaders() {
        this._headers.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get headersInput() {
        return this._headers.internalValue;
    }
    get ipAddress() {
        return this.getStringAttribute('ip_address');
    }
    set ipAddress(value) {
        this._ipAddress = value;
    }
    resetIpAddress() {
        this._ipAddress = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipAddressInput() {
        return this._ipAddress;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get priority() {
        return this.getNumberAttribute('priority');
    }
    set priority(value) {
        this._priority = value;
    }
    resetPriority() {
        this._priority = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get priorityInput() {
        return this._priority;
    }
    get serviceTag() {
        return this.getStringAttribute('service_tag');
    }
    set serviceTag(value) {
        this._serviceTag = value;
    }
    resetServiceTag() {
        this._serviceTag = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceTagInput() {
        return this._serviceTag;
    }
    get virtualNetworkSubnetId() {
        return this.getStringAttribute('virtual_network_subnet_id');
    }
    set virtualNetworkSubnetId(value) {
        this._virtualNetworkSubnetId = value;
    }
    resetVirtualNetworkSubnetId() {
        this._virtualNetworkSubnetId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get virtualNetworkSubnetIdInput() {
        return this._virtualNetworkSubnetId;
    }
}
exports.LinuxFunctionAppSiteConfigIpRestrictionOutputReference = LinuxFunctionAppSiteConfigIpRestrictionOutputReference;
class LinuxFunctionAppSiteConfigIpRestrictionList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new LinuxFunctionAppSiteConfigIpRestrictionOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.LinuxFunctionAppSiteConfigIpRestrictionList = LinuxFunctionAppSiteConfigIpRestrictionList;
function linuxFunctionAppSiteConfigScmIpRestrictionHeadersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        x_azure_fdid: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.xAzureFdid),
        x_fd_health_probe: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.xFdHealthProbe),
        x_forwarded_for: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.xForwardedFor),
        x_forwarded_host: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.xForwardedHost),
    };
}
exports.linuxFunctionAppSiteConfigScmIpRestrictionHeadersToTerraform = linuxFunctionAppSiteConfigScmIpRestrictionHeadersToTerraform;
function linuxFunctionAppSiteConfigScmIpRestrictionHeadersToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        x_azure_fdid: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.xAzureFdid),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        x_fd_health_probe: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.xFdHealthProbe),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        x_forwarded_for: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.xForwardedFor),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        x_forwarded_host: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.xForwardedHost),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.linuxFunctionAppSiteConfigScmIpRestrictionHeadersToHclTerraform = linuxFunctionAppSiteConfigScmIpRestrictionHeadersToHclTerraform;
class LinuxFunctionAppSiteConfigScmIpRestrictionHeadersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._xAzureFdid !== undefined) {
            hasAnyValues = true;
            internalValueResult.xAzureFdid = this._xAzureFdid;
        }
        if (this._xFdHealthProbe !== undefined) {
            hasAnyValues = true;
            internalValueResult.xFdHealthProbe = this._xFdHealthProbe;
        }
        if (this._xForwardedFor !== undefined) {
            hasAnyValues = true;
            internalValueResult.xForwardedFor = this._xForwardedFor;
        }
        if (this._xForwardedHost !== undefined) {
            hasAnyValues = true;
            internalValueResult.xForwardedHost = this._xForwardedHost;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._xAzureFdid = undefined;
            this._xFdHealthProbe = undefined;
            this._xForwardedFor = undefined;
            this._xForwardedHost = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._xAzureFdid = value.xAzureFdid;
            this._xFdHealthProbe = value.xFdHealthProbe;
            this._xForwardedFor = value.xForwardedFor;
            this._xForwardedHost = value.xForwardedHost;
        }
    }
    get xAzureFdid() {
        return this.getListAttribute('x_azure_fdid');
    }
    set xAzureFdid(value) {
        this._xAzureFdid = value;
    }
    resetXAzureFdid() {
        this._xAzureFdid = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get xAzureFdidInput() {
        return this._xAzureFdid;
    }
    get xFdHealthProbe() {
        return this.getListAttribute('x_fd_health_probe');
    }
    set xFdHealthProbe(value) {
        this._xFdHealthProbe = value;
    }
    resetXFdHealthProbe() {
        this._xFdHealthProbe = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get xFdHealthProbeInput() {
        return this._xFdHealthProbe;
    }
    get xForwardedFor() {
        return this.getListAttribute('x_forwarded_for');
    }
    set xForwardedFor(value) {
        this._xForwardedFor = value;
    }
    resetXForwardedFor() {
        this._xForwardedFor = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get xForwardedForInput() {
        return this._xForwardedFor;
    }
    get xForwardedHost() {
        return this.getListAttribute('x_forwarded_host');
    }
    set xForwardedHost(value) {
        this._xForwardedHost = value;
    }
    resetXForwardedHost() {
        this._xForwardedHost = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get xForwardedHostInput() {
        return this._xForwardedHost;
    }
}
exports.LinuxFunctionAppSiteConfigScmIpRestrictionHeadersOutputReference = LinuxFunctionAppSiteConfigScmIpRestrictionHeadersOutputReference;
class LinuxFunctionAppSiteConfigScmIpRestrictionHeadersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new LinuxFunctionAppSiteConfigScmIpRestrictionHeadersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.LinuxFunctionAppSiteConfigScmIpRestrictionHeadersList = LinuxFunctionAppSiteConfigScmIpRestrictionHeadersList;
function linuxFunctionAppSiteConfigScmIpRestrictionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        action: cdktf.stringToTerraform(struct.action),
        description: cdktf.stringToTerraform(struct.description),
        headers: cdktf.listMapper(linuxFunctionAppSiteConfigScmIpRestrictionHeadersToTerraform, false)(struct.headers),
        ip_address: cdktf.stringToTerraform(struct.ipAddress),
        name: cdktf.stringToTerraform(struct.name),
        priority: cdktf.numberToTerraform(struct.priority),
        service_tag: cdktf.stringToTerraform(struct.serviceTag),
        virtual_network_subnet_id: cdktf.stringToTerraform(struct.virtualNetworkSubnetId),
    };
}
exports.linuxFunctionAppSiteConfigScmIpRestrictionToTerraform = linuxFunctionAppSiteConfigScmIpRestrictionToTerraform;
function linuxFunctionAppSiteConfigScmIpRestrictionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        action: {
            value: cdktf.stringToHclTerraform(struct.action),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        description: {
            value: cdktf.stringToHclTerraform(struct.description),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        headers: {
            value: cdktf.listMapperHcl(linuxFunctionAppSiteConfigScmIpRestrictionHeadersToHclTerraform, false)(struct.headers),
            isBlock: true,
            type: "list",
            storageClassType: "LinuxFunctionAppSiteConfigScmIpRestrictionHeadersList",
        },
        ip_address: {
            value: cdktf.stringToHclTerraform(struct.ipAddress),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        priority: {
            value: cdktf.numberToHclTerraform(struct.priority),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        service_tag: {
            value: cdktf.stringToHclTerraform(struct.serviceTag),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        virtual_network_subnet_id: {
            value: cdktf.stringToHclTerraform(struct.virtualNetworkSubnetId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.linuxFunctionAppSiteConfigScmIpRestrictionToHclTerraform = linuxFunctionAppSiteConfigScmIpRestrictionToHclTerraform;
class LinuxFunctionAppSiteConfigScmIpRestrictionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // headers - computed: false, optional: true, required: false
        this._headers = new LinuxFunctionAppSiteConfigScmIpRestrictionHeadersList(this, "headers", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._action !== undefined) {
            hasAnyValues = true;
            internalValueResult.action = this._action;
        }
        if (this._description !== undefined) {
            hasAnyValues = true;
            internalValueResult.description = this._description;
        }
        if (this._headers?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headers = this._headers?.internalValue;
        }
        if (this._ipAddress !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipAddress = this._ipAddress;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._priority !== undefined) {
            hasAnyValues = true;
            internalValueResult.priority = this._priority;
        }
        if (this._serviceTag !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceTag = this._serviceTag;
        }
        if (this._virtualNetworkSubnetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.virtualNetworkSubnetId = this._virtualNetworkSubnetId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._action = undefined;
            this._description = undefined;
            this._headers.internalValue = undefined;
            this._ipAddress = undefined;
            this._name = undefined;
            this._priority = undefined;
            this._serviceTag = undefined;
            this._virtualNetworkSubnetId = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._action = value.action;
            this._description = value.description;
            this._headers.internalValue = value.headers;
            this._ipAddress = value.ipAddress;
            this._name = value.name;
            this._priority = value.priority;
            this._serviceTag = value.serviceTag;
            this._virtualNetworkSubnetId = value.virtualNetworkSubnetId;
        }
    }
    get action() {
        return this.getStringAttribute('action');
    }
    set action(value) {
        this._action = value;
    }
    resetAction() {
        this._action = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get actionInput() {
        return this._action;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get headers() {
        return this._headers;
    }
    putHeaders(value) {
        this._headers.internalValue = value;
    }
    resetHeaders() {
        this._headers.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get headersInput() {
        return this._headers.internalValue;
    }
    get ipAddress() {
        return this.getStringAttribute('ip_address');
    }
    set ipAddress(value) {
        this._ipAddress = value;
    }
    resetIpAddress() {
        this._ipAddress = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipAddressInput() {
        return this._ipAddress;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get priority() {
        return this.getNumberAttribute('priority');
    }
    set priority(value) {
        this._priority = value;
    }
    resetPriority() {
        this._priority = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get priorityInput() {
        return this._priority;
    }
    get serviceTag() {
        return this.getStringAttribute('service_tag');
    }
    set serviceTag(value) {
        this._serviceTag = value;
    }
    resetServiceTag() {
        this._serviceTag = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceTagInput() {
        return this._serviceTag;
    }
    get virtualNetworkSubnetId() {
        return this.getStringAttribute('virtual_network_subnet_id');
    }
    set virtualNetworkSubnetId(value) {
        this._virtualNetworkSubnetId = value;
    }
    resetVirtualNetworkSubnetId() {
        this._virtualNetworkSubnetId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get virtualNetworkSubnetIdInput() {
        return this._virtualNetworkSubnetId;
    }
}
exports.LinuxFunctionAppSiteConfigScmIpRestrictionOutputReference = LinuxFunctionAppSiteConfigScmIpRestrictionOutputReference;
class LinuxFunctionAppSiteConfigScmIpRestrictionList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new LinuxFunctionAppSiteConfigScmIpRestrictionOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.LinuxFunctionAppSiteConfigScmIpRestrictionList = LinuxFunctionAppSiteConfigScmIpRestrictionList;
function linuxFunctionAppSiteConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        always_on: cdktf.booleanToTerraform(struct.alwaysOn),
        api_definition_url: cdktf.stringToTerraform(struct.apiDefinitionUrl),
        api_management_api_id: cdktf.stringToTerraform(struct.apiManagementApiId),
        app_command_line: cdktf.stringToTerraform(struct.appCommandLine),
        app_scale_limit: cdktf.numberToTerraform(struct.appScaleLimit),
        application_insights_connection_string: cdktf.stringToTerraform(struct.applicationInsightsConnectionString),
        application_insights_key: cdktf.stringToTerraform(struct.applicationInsightsKey),
        container_registry_managed_identity_client_id: cdktf.stringToTerraform(struct.containerRegistryManagedIdentityClientId),
        container_registry_use_managed_identity: cdktf.booleanToTerraform(struct.containerRegistryUseManagedIdentity),
        default_documents: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.defaultDocuments),
        elastic_instance_minimum: cdktf.numberToTerraform(struct.elasticInstanceMinimum),
        ftps_state: cdktf.stringToTerraform(struct.ftpsState),
        health_check_eviction_time_in_min: cdktf.numberToTerraform(struct.healthCheckEvictionTimeInMin),
        health_check_path: cdktf.stringToTerraform(struct.healthCheckPath),
        http2_enabled: cdktf.booleanToTerraform(struct.http2Enabled),
        ip_restriction_default_action: cdktf.stringToTerraform(struct.ipRestrictionDefaultAction),
        load_balancing_mode: cdktf.stringToTerraform(struct.loadBalancingMode),
        managed_pipeline_mode: cdktf.stringToTerraform(struct.managedPipelineMode),
        minimum_tls_version: cdktf.stringToTerraform(struct.minimumTlsVersion),
        pre_warmed_instance_count: cdktf.numberToTerraform(struct.preWarmedInstanceCount),
        remote_debugging_enabled: cdktf.booleanToTerraform(struct.remoteDebuggingEnabled),
        remote_debugging_version: cdktf.stringToTerraform(struct.remoteDebuggingVersion),
        runtime_scale_monitoring_enabled: cdktf.booleanToTerraform(struct.runtimeScaleMonitoringEnabled),
        scm_ip_restriction_default_action: cdktf.stringToTerraform(struct.scmIpRestrictionDefaultAction),
        scm_minimum_tls_version: cdktf.stringToTerraform(struct.scmMinimumTlsVersion),
        scm_use_main_ip_restriction: cdktf.booleanToTerraform(struct.scmUseMainIpRestriction),
        use_32_bit_worker: cdktf.booleanToTerraform(struct.use32BitWorker),
        vnet_route_all_enabled: cdktf.booleanToTerraform(struct.vnetRouteAllEnabled),
        websockets_enabled: cdktf.booleanToTerraform(struct.websocketsEnabled),
        worker_count: cdktf.numberToTerraform(struct.workerCount),
        app_service_logs: linuxFunctionAppSiteConfigAppServiceLogsToTerraform(struct.appServiceLogs),
        application_stack: linuxFunctionAppSiteConfigApplicationStackToTerraform(struct.applicationStack),
        cors: linuxFunctionAppSiteConfigCorsToTerraform(struct.cors),
        ip_restriction: cdktf.listMapper(linuxFunctionAppSiteConfigIpRestrictionToTerraform, true)(struct.ipRestriction),
        scm_ip_restriction: cdktf.listMapper(linuxFunctionAppSiteConfigScmIpRestrictionToTerraform, true)(struct.scmIpRestriction),
    };
}
exports.linuxFunctionAppSiteConfigToTerraform = linuxFunctionAppSiteConfigToTerraform;
function linuxFunctionAppSiteConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        always_on: {
            value: cdktf.booleanToHclTerraform(struct.alwaysOn),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        api_definition_url: {
            value: cdktf.stringToHclTerraform(struct.apiDefinitionUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        api_management_api_id: {
            value: cdktf.stringToHclTerraform(struct.apiManagementApiId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        app_command_line: {
            value: cdktf.stringToHclTerraform(struct.appCommandLine),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        app_scale_limit: {
            value: cdktf.numberToHclTerraform(struct.appScaleLimit),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        application_insights_connection_string: {
            value: cdktf.stringToHclTerraform(struct.applicationInsightsConnectionString),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        application_insights_key: {
            value: cdktf.stringToHclTerraform(struct.applicationInsightsKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        container_registry_managed_identity_client_id: {
            value: cdktf.stringToHclTerraform(struct.containerRegistryManagedIdentityClientId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        container_registry_use_managed_identity: {
            value: cdktf.booleanToHclTerraform(struct.containerRegistryUseManagedIdentity),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        default_documents: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.defaultDocuments),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        elastic_instance_minimum: {
            value: cdktf.numberToHclTerraform(struct.elasticInstanceMinimum),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        ftps_state: {
            value: cdktf.stringToHclTerraform(struct.ftpsState),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        health_check_eviction_time_in_min: {
            value: cdktf.numberToHclTerraform(struct.healthCheckEvictionTimeInMin),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        health_check_path: {
            value: cdktf.stringToHclTerraform(struct.healthCheckPath),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        http2_enabled: {
            value: cdktf.booleanToHclTerraform(struct.http2Enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        ip_restriction_default_action: {
            value: cdktf.stringToHclTerraform(struct.ipRestrictionDefaultAction),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        load_balancing_mode: {
            value: cdktf.stringToHclTerraform(struct.loadBalancingMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        managed_pipeline_mode: {
            value: cdktf.stringToHclTerraform(struct.managedPipelineMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        minimum_tls_version: {
            value: cdktf.stringToHclTerraform(struct.minimumTlsVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        pre_warmed_instance_count: {
            value: cdktf.numberToHclTerraform(struct.preWarmedInstanceCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        remote_debugging_enabled: {
            value: cdktf.booleanToHclTerraform(struct.remoteDebuggingEnabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        remote_debugging_version: {
            value: cdktf.stringToHclTerraform(struct.remoteDebuggingVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        runtime_scale_monitoring_enabled: {
            value: cdktf.booleanToHclTerraform(struct.runtimeScaleMonitoringEnabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        scm_ip_restriction_default_action: {
            value: cdktf.stringToHclTerraform(struct.scmIpRestrictionDefaultAction),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        scm_minimum_tls_version: {
            value: cdktf.stringToHclTerraform(struct.scmMinimumTlsVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        scm_use_main_ip_restriction: {
            value: cdktf.booleanToHclTerraform(struct.scmUseMainIpRestriction),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        use_32_bit_worker: {
            value: cdktf.booleanToHclTerraform(struct.use32BitWorker),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        vnet_route_all_enabled: {
            value: cdktf.booleanToHclTerraform(struct.vnetRouteAllEnabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        websockets_enabled: {
            value: cdktf.booleanToHclTerraform(struct.websocketsEnabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        worker_count: {
            value: cdktf.numberToHclTerraform(struct.workerCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        app_service_logs: {
            value: linuxFunctionAppSiteConfigAppServiceLogsToHclTerraform(struct.appServiceLogs),
            isBlock: true,
            type: "list",
            storageClassType: "LinuxFunctionAppSiteConfigAppServiceLogsList",
        },
        application_stack: {
            value: linuxFunctionAppSiteConfigApplicationStackToHclTerraform(struct.applicationStack),
            isBlock: true,
            type: "list",
            storageClassType: "LinuxFunctionAppSiteConfigApplicationStackList",
        },
        cors: {
            value: linuxFunctionAppSiteConfigCorsToHclTerraform(struct.cors),
            isBlock: true,
            type: "list",
            storageClassType: "LinuxFunctionAppSiteConfigCorsList",
        },
        ip_restriction: {
            value: cdktf.listMapperHcl(linuxFunctionAppSiteConfigIpRestrictionToHclTerraform, true)(struct.ipRestriction),
            isBlock: true,
            type: "list",
            storageClassType: "LinuxFunctionAppSiteConfigIpRestrictionList",
        },
        scm_ip_restriction: {
            value: cdktf.listMapperHcl(linuxFunctionAppSiteConfigScmIpRestrictionToHclTerraform, true)(struct.scmIpRestriction),
            isBlock: true,
            type: "list",
            storageClassType: "LinuxFunctionAppSiteConfigScmIpRestrictionList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.linuxFunctionAppSiteConfigToHclTerraform = linuxFunctionAppSiteConfigToHclTerraform;
class LinuxFunctionAppSiteConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // app_service_logs - computed: false, optional: true, required: false
        this._appServiceLogs = new LinuxFunctionAppSiteConfigAppServiceLogsOutputReference(this, "app_service_logs");
        // application_stack - computed: false, optional: true, required: false
        this._applicationStack = new LinuxFunctionAppSiteConfigApplicationStackOutputReference(this, "application_stack");
        // cors - computed: false, optional: true, required: false
        this._cors = new LinuxFunctionAppSiteConfigCorsOutputReference(this, "cors");
        // ip_restriction - computed: false, optional: true, required: false
        this._ipRestriction = new LinuxFunctionAppSiteConfigIpRestrictionList(this, "ip_restriction", false);
        // scm_ip_restriction - computed: false, optional: true, required: false
        this._scmIpRestriction = new LinuxFunctionAppSiteConfigScmIpRestrictionList(this, "scm_ip_restriction", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._alwaysOn !== undefined) {
            hasAnyValues = true;
            internalValueResult.alwaysOn = this._alwaysOn;
        }
        if (this._apiDefinitionUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.apiDefinitionUrl = this._apiDefinitionUrl;
        }
        if (this._apiManagementApiId !== undefined) {
            hasAnyValues = true;
            internalValueResult.apiManagementApiId = this._apiManagementApiId;
        }
        if (this._appCommandLine !== undefined) {
            hasAnyValues = true;
            internalValueResult.appCommandLine = this._appCommandLine;
        }
        if (this._appScaleLimit !== undefined) {
            hasAnyValues = true;
            internalValueResult.appScaleLimit = this._appScaleLimit;
        }
        if (this._applicationInsightsConnectionString !== undefined) {
            hasAnyValues = true;
            internalValueResult.applicationInsightsConnectionString = this._applicationInsightsConnectionString;
        }
        if (this._applicationInsightsKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.applicationInsightsKey = this._applicationInsightsKey;
        }
        if (this._containerRegistryManagedIdentityClientId !== undefined) {
            hasAnyValues = true;
            internalValueResult.containerRegistryManagedIdentityClientId = this._containerRegistryManagedIdentityClientId;
        }
        if (this._containerRegistryUseManagedIdentity !== undefined) {
            hasAnyValues = true;
            internalValueResult.containerRegistryUseManagedIdentity = this._containerRegistryUseManagedIdentity;
        }
        if (this._defaultDocuments !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultDocuments = this._defaultDocuments;
        }
        if (this._elasticInstanceMinimum !== undefined) {
            hasAnyValues = true;
            internalValueResult.elasticInstanceMinimum = this._elasticInstanceMinimum;
        }
        if (this._ftpsState !== undefined) {
            hasAnyValues = true;
            internalValueResult.ftpsState = this._ftpsState;
        }
        if (this._healthCheckEvictionTimeInMin !== undefined) {
            hasAnyValues = true;
            internalValueResult.healthCheckEvictionTimeInMin = this._healthCheckEvictionTimeInMin;
        }
        if (this._healthCheckPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.healthCheckPath = this._healthCheckPath;
        }
        if (this._http2Enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.http2Enabled = this._http2Enabled;
        }
        if (this._ipRestrictionDefaultAction !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipRestrictionDefaultAction = this._ipRestrictionDefaultAction;
        }
        if (this._loadBalancingMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.loadBalancingMode = this._loadBalancingMode;
        }
        if (this._managedPipelineMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.managedPipelineMode = this._managedPipelineMode;
        }
        if (this._minimumTlsVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.minimumTlsVersion = this._minimumTlsVersion;
        }
        if (this._preWarmedInstanceCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.preWarmedInstanceCount = this._preWarmedInstanceCount;
        }
        if (this._remoteDebuggingEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.remoteDebuggingEnabled = this._remoteDebuggingEnabled;
        }
        if (this._remoteDebuggingVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.remoteDebuggingVersion = this._remoteDebuggingVersion;
        }
        if (this._runtimeScaleMonitoringEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.runtimeScaleMonitoringEnabled = this._runtimeScaleMonitoringEnabled;
        }
        if (this._scmIpRestrictionDefaultAction !== undefined) {
            hasAnyValues = true;
            internalValueResult.scmIpRestrictionDefaultAction = this._scmIpRestrictionDefaultAction;
        }
        if (this._scmMinimumTlsVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.scmMinimumTlsVersion = this._scmMinimumTlsVersion;
        }
        if (this._scmUseMainIpRestriction !== undefined) {
            hasAnyValues = true;
            internalValueResult.scmUseMainIpRestriction = this._scmUseMainIpRestriction;
        }
        if (this._use32BitWorker !== undefined) {
            hasAnyValues = true;
            internalValueResult.use32BitWorker = this._use32BitWorker;
        }
        if (this._vnetRouteAllEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.vnetRouteAllEnabled = this._vnetRouteAllEnabled;
        }
        if (this._websocketsEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.websocketsEnabled = this._websocketsEnabled;
        }
        if (this._workerCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.workerCount = this._workerCount;
        }
        if (this._appServiceLogs?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.appServiceLogs = this._appServiceLogs?.internalValue;
        }
        if (this._applicationStack?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.applicationStack = this._applicationStack?.internalValue;
        }
        if (this._cors?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cors = this._cors?.internalValue;
        }
        if (this._ipRestriction?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipRestriction = this._ipRestriction?.internalValue;
        }
        if (this._scmIpRestriction?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.scmIpRestriction = this._scmIpRestriction?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._alwaysOn = undefined;
            this._apiDefinitionUrl = undefined;
            this._apiManagementApiId = undefined;
            this._appCommandLine = undefined;
            this._appScaleLimit = undefined;
            this._applicationInsightsConnectionString = undefined;
            this._applicationInsightsKey = undefined;
            this._containerRegistryManagedIdentityClientId = undefined;
            this._containerRegistryUseManagedIdentity = undefined;
            this._defaultDocuments = undefined;
            this._elasticInstanceMinimum = undefined;
            this._ftpsState = undefined;
            this._healthCheckEvictionTimeInMin = undefined;
            this._healthCheckPath = undefined;
            this._http2Enabled = undefined;
            this._ipRestrictionDefaultAction = undefined;
            this._loadBalancingMode = undefined;
            this._managedPipelineMode = undefined;
            this._minimumTlsVersion = undefined;
            this._preWarmedInstanceCount = undefined;
            this._remoteDebuggingEnabled = undefined;
            this._remoteDebuggingVersion = undefined;
            this._runtimeScaleMonitoringEnabled = undefined;
            this._scmIpRestrictionDefaultAction = undefined;
            this._scmMinimumTlsVersion = undefined;
            this._scmUseMainIpRestriction = undefined;
            this._use32BitWorker = undefined;
            this._vnetRouteAllEnabled = undefined;
            this._websocketsEnabled = undefined;
            this._workerCount = undefined;
            this._appServiceLogs.internalValue = undefined;
            this._applicationStack.internalValue = undefined;
            this._cors.internalValue = undefined;
            this._ipRestriction.internalValue = undefined;
            this._scmIpRestriction.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._alwaysOn = value.alwaysOn;
            this._apiDefinitionUrl = value.apiDefinitionUrl;
            this._apiManagementApiId = value.apiManagementApiId;
            this._appCommandLine = value.appCommandLine;
            this._appScaleLimit = value.appScaleLimit;
            this._applicationInsightsConnectionString = value.applicationInsightsConnectionString;
            this._applicationInsightsKey = value.applicationInsightsKey;
            this._containerRegistryManagedIdentityClientId = value.containerRegistryManagedIdentityClientId;
            this._containerRegistryUseManagedIdentity = value.containerRegistryUseManagedIdentity;
            this._defaultDocuments = value.defaultDocuments;
            this._elasticInstanceMinimum = value.elasticInstanceMinimum;
            this._ftpsState = value.ftpsState;
            this._healthCheckEvictionTimeInMin = value.healthCheckEvictionTimeInMin;
            this._healthCheckPath = value.healthCheckPath;
            this._http2Enabled = value.http2Enabled;
            this._ipRestrictionDefaultAction = value.ipRestrictionDefaultAction;
            this._loadBalancingMode = value.loadBalancingMode;
            this._managedPipelineMode = value.managedPipelineMode;
            this._minimumTlsVersion = value.minimumTlsVersion;
            this._preWarmedInstanceCount = value.preWarmedInstanceCount;
            this._remoteDebuggingEnabled = value.remoteDebuggingEnabled;
            this._remoteDebuggingVersion = value.remoteDebuggingVersion;
            this._runtimeScaleMonitoringEnabled = value.runtimeScaleMonitoringEnabled;
            this._scmIpRestrictionDefaultAction = value.scmIpRestrictionDefaultAction;
            this._scmMinimumTlsVersion = value.scmMinimumTlsVersion;
            this._scmUseMainIpRestriction = value.scmUseMainIpRestriction;
            this._use32BitWorker = value.use32BitWorker;
            this._vnetRouteAllEnabled = value.vnetRouteAllEnabled;
            this._websocketsEnabled = value.websocketsEnabled;
            this._workerCount = value.workerCount;
            this._appServiceLogs.internalValue = value.appServiceLogs;
            this._applicationStack.internalValue = value.applicationStack;
            this._cors.internalValue = value.cors;
            this._ipRestriction.internalValue = value.ipRestriction;
            this._scmIpRestriction.internalValue = value.scmIpRestriction;
        }
    }
    get alwaysOn() {
        return this.getBooleanAttribute('always_on');
    }
    set alwaysOn(value) {
        this._alwaysOn = value;
    }
    resetAlwaysOn() {
        this._alwaysOn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get alwaysOnInput() {
        return this._alwaysOn;
    }
    get apiDefinitionUrl() {
        return this.getStringAttribute('api_definition_url');
    }
    set apiDefinitionUrl(value) {
        this._apiDefinitionUrl = value;
    }
    resetApiDefinitionUrl() {
        this._apiDefinitionUrl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get apiDefinitionUrlInput() {
        return this._apiDefinitionUrl;
    }
    get apiManagementApiId() {
        return this.getStringAttribute('api_management_api_id');
    }
    set apiManagementApiId(value) {
        this._apiManagementApiId = value;
    }
    resetApiManagementApiId() {
        this._apiManagementApiId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get apiManagementApiIdInput() {
        return this._apiManagementApiId;
    }
    get appCommandLine() {
        return this.getStringAttribute('app_command_line');
    }
    set appCommandLine(value) {
        this._appCommandLine = value;
    }
    resetAppCommandLine() {
        this._appCommandLine = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get appCommandLineInput() {
        return this._appCommandLine;
    }
    get appScaleLimit() {
        return this.getNumberAttribute('app_scale_limit');
    }
    set appScaleLimit(value) {
        this._appScaleLimit = value;
    }
    resetAppScaleLimit() {
        this._appScaleLimit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get appScaleLimitInput() {
        return this._appScaleLimit;
    }
    get applicationInsightsConnectionString() {
        return this.getStringAttribute('application_insights_connection_string');
    }
    set applicationInsightsConnectionString(value) {
        this._applicationInsightsConnectionString = value;
    }
    resetApplicationInsightsConnectionString() {
        this._applicationInsightsConnectionString = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get applicationInsightsConnectionStringInput() {
        return this._applicationInsightsConnectionString;
    }
    get applicationInsightsKey() {
        return this.getStringAttribute('application_insights_key');
    }
    set applicationInsightsKey(value) {
        this._applicationInsightsKey = value;
    }
    resetApplicationInsightsKey() {
        this._applicationInsightsKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get applicationInsightsKeyInput() {
        return this._applicationInsightsKey;
    }
    get containerRegistryManagedIdentityClientId() {
        return this.getStringAttribute('container_registry_managed_identity_client_id');
    }
    set containerRegistryManagedIdentityClientId(value) {
        this._containerRegistryManagedIdentityClientId = value;
    }
    resetContainerRegistryManagedIdentityClientId() {
        this._containerRegistryManagedIdentityClientId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get containerRegistryManagedIdentityClientIdInput() {
        return this._containerRegistryManagedIdentityClientId;
    }
    get containerRegistryUseManagedIdentity() {
        return this.getBooleanAttribute('container_registry_use_managed_identity');
    }
    set containerRegistryUseManagedIdentity(value) {
        this._containerRegistryUseManagedIdentity = value;
    }
    resetContainerRegistryUseManagedIdentity() {
        this._containerRegistryUseManagedIdentity = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get containerRegistryUseManagedIdentityInput() {
        return this._containerRegistryUseManagedIdentity;
    }
    get defaultDocuments() {
        return this.getListAttribute('default_documents');
    }
    set defaultDocuments(value) {
        this._defaultDocuments = value;
    }
    resetDefaultDocuments() {
        this._defaultDocuments = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultDocumentsInput() {
        return this._defaultDocuments;
    }
    // detailed_error_logging_enabled - computed: true, optional: false, required: false
    get detailedErrorLoggingEnabled() {
        return this.getBooleanAttribute('detailed_error_logging_enabled');
    }
    get elasticInstanceMinimum() {
        return this.getNumberAttribute('elastic_instance_minimum');
    }
    set elasticInstanceMinimum(value) {
        this._elasticInstanceMinimum = value;
    }
    resetElasticInstanceMinimum() {
        this._elasticInstanceMinimum = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get elasticInstanceMinimumInput() {
        return this._elasticInstanceMinimum;
    }
    get ftpsState() {
        return this.getStringAttribute('ftps_state');
    }
    set ftpsState(value) {
        this._ftpsState = value;
    }
    resetFtpsState() {
        this._ftpsState = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ftpsStateInput() {
        return this._ftpsState;
    }
    get healthCheckEvictionTimeInMin() {
        return this.getNumberAttribute('health_check_eviction_time_in_min');
    }
    set healthCheckEvictionTimeInMin(value) {
        this._healthCheckEvictionTimeInMin = value;
    }
    resetHealthCheckEvictionTimeInMin() {
        this._healthCheckEvictionTimeInMin = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get healthCheckEvictionTimeInMinInput() {
        return this._healthCheckEvictionTimeInMin;
    }
    get healthCheckPath() {
        return this.getStringAttribute('health_check_path');
    }
    set healthCheckPath(value) {
        this._healthCheckPath = value;
    }
    resetHealthCheckPath() {
        this._healthCheckPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get healthCheckPathInput() {
        return this._healthCheckPath;
    }
    get http2Enabled() {
        return this.getBooleanAttribute('http2_enabled');
    }
    set http2Enabled(value) {
        this._http2Enabled = value;
    }
    resetHttp2Enabled() {
        this._http2Enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get http2EnabledInput() {
        return this._http2Enabled;
    }
    get ipRestrictionDefaultAction() {
        return this.getStringAttribute('ip_restriction_default_action');
    }
    set ipRestrictionDefaultAction(value) {
        this._ipRestrictionDefaultAction = value;
    }
    resetIpRestrictionDefaultAction() {
        this._ipRestrictionDefaultAction = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipRestrictionDefaultActionInput() {
        return this._ipRestrictionDefaultAction;
    }
    // linux_fx_version - computed: true, optional: false, required: false
    get linuxFxVersion() {
        return this.getStringAttribute('linux_fx_version');
    }
    get loadBalancingMode() {
        return this.getStringAttribute('load_balancing_mode');
    }
    set loadBalancingMode(value) {
        this._loadBalancingMode = value;
    }
    resetLoadBalancingMode() {
        this._loadBalancingMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loadBalancingModeInput() {
        return this._loadBalancingMode;
    }
    get managedPipelineMode() {
        return this.getStringAttribute('managed_pipeline_mode');
    }
    set managedPipelineMode(value) {
        this._managedPipelineMode = value;
    }
    resetManagedPipelineMode() {
        this._managedPipelineMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get managedPipelineModeInput() {
        return this._managedPipelineMode;
    }
    get minimumTlsVersion() {
        return this.getStringAttribute('minimum_tls_version');
    }
    set minimumTlsVersion(value) {
        this._minimumTlsVersion = value;
    }
    resetMinimumTlsVersion() {
        this._minimumTlsVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minimumTlsVersionInput() {
        return this._minimumTlsVersion;
    }
    get preWarmedInstanceCount() {
        return this.getNumberAttribute('pre_warmed_instance_count');
    }
    set preWarmedInstanceCount(value) {
        this._preWarmedInstanceCount = value;
    }
    resetPreWarmedInstanceCount() {
        this._preWarmedInstanceCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get preWarmedInstanceCountInput() {
        return this._preWarmedInstanceCount;
    }
    get remoteDebuggingEnabled() {
        return this.getBooleanAttribute('remote_debugging_enabled');
    }
    set remoteDebuggingEnabled(value) {
        this._remoteDebuggingEnabled = value;
    }
    resetRemoteDebuggingEnabled() {
        this._remoteDebuggingEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get remoteDebuggingEnabledInput() {
        return this._remoteDebuggingEnabled;
    }
    get remoteDebuggingVersion() {
        return this.getStringAttribute('remote_debugging_version');
    }
    set remoteDebuggingVersion(value) {
        this._remoteDebuggingVersion = value;
    }
    resetRemoteDebuggingVersion() {
        this._remoteDebuggingVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get remoteDebuggingVersionInput() {
        return this._remoteDebuggingVersion;
    }
    get runtimeScaleMonitoringEnabled() {
        return this.getBooleanAttribute('runtime_scale_monitoring_enabled');
    }
    set runtimeScaleMonitoringEnabled(value) {
        this._runtimeScaleMonitoringEnabled = value;
    }
    resetRuntimeScaleMonitoringEnabled() {
        this._runtimeScaleMonitoringEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get runtimeScaleMonitoringEnabledInput() {
        return this._runtimeScaleMonitoringEnabled;
    }
    get scmIpRestrictionDefaultAction() {
        return this.getStringAttribute('scm_ip_restriction_default_action');
    }
    set scmIpRestrictionDefaultAction(value) {
        this._scmIpRestrictionDefaultAction = value;
    }
    resetScmIpRestrictionDefaultAction() {
        this._scmIpRestrictionDefaultAction = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scmIpRestrictionDefaultActionInput() {
        return this._scmIpRestrictionDefaultAction;
    }
    get scmMinimumTlsVersion() {
        return this.getStringAttribute('scm_minimum_tls_version');
    }
    set scmMinimumTlsVersion(value) {
        this._scmMinimumTlsVersion = value;
    }
    resetScmMinimumTlsVersion() {
        this._scmMinimumTlsVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scmMinimumTlsVersionInput() {
        return this._scmMinimumTlsVersion;
    }
    // scm_type - computed: true, optional: false, required: false
    get scmType() {
        return this.getStringAttribute('scm_type');
    }
    get scmUseMainIpRestriction() {
        return this.getBooleanAttribute('scm_use_main_ip_restriction');
    }
    set scmUseMainIpRestriction(value) {
        this._scmUseMainIpRestriction = value;
    }
    resetScmUseMainIpRestriction() {
        this._scmUseMainIpRestriction = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scmUseMainIpRestrictionInput() {
        return this._scmUseMainIpRestriction;
    }
    get use32BitWorker() {
        return this.getBooleanAttribute('use_32_bit_worker');
    }
    set use32BitWorker(value) {
        this._use32BitWorker = value;
    }
    resetUse32BitWorker() {
        this._use32BitWorker = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get use32BitWorkerInput() {
        return this._use32BitWorker;
    }
    get vnetRouteAllEnabled() {
        return this.getBooleanAttribute('vnet_route_all_enabled');
    }
    set vnetRouteAllEnabled(value) {
        this._vnetRouteAllEnabled = value;
    }
    resetVnetRouteAllEnabled() {
        this._vnetRouteAllEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vnetRouteAllEnabledInput() {
        return this._vnetRouteAllEnabled;
    }
    get websocketsEnabled() {
        return this.getBooleanAttribute('websockets_enabled');
    }
    set websocketsEnabled(value) {
        this._websocketsEnabled = value;
    }
    resetWebsocketsEnabled() {
        this._websocketsEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get websocketsEnabledInput() {
        return this._websocketsEnabled;
    }
    get workerCount() {
        return this.getNumberAttribute('worker_count');
    }
    set workerCount(value) {
        this._workerCount = value;
    }
    resetWorkerCount() {
        this._workerCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get workerCountInput() {
        return this._workerCount;
    }
    get appServiceLogs() {
        return this._appServiceLogs;
    }
    putAppServiceLogs(value) {
        this._appServiceLogs.internalValue = value;
    }
    resetAppServiceLogs() {
        this._appServiceLogs.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get appServiceLogsInput() {
        return this._appServiceLogs.internalValue;
    }
    get applicationStack() {
        return this._applicationStack;
    }
    putApplicationStack(value) {
        this._applicationStack.internalValue = value;
    }
    resetApplicationStack() {
        this._applicationStack.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get applicationStackInput() {
        return this._applicationStack.internalValue;
    }
    get cors() {
        return this._cors;
    }
    putCors(value) {
        this._cors.internalValue = value;
    }
    resetCors() {
        this._cors.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get corsInput() {
        return this._cors.internalValue;
    }
    get ipRestriction() {
        return this._ipRestriction;
    }
    putIpRestriction(value) {
        this._ipRestriction.internalValue = value;
    }
    resetIpRestriction() {
        this._ipRestriction.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipRestrictionInput() {
        return this._ipRestriction.internalValue;
    }
    get scmIpRestriction() {
        return this._scmIpRestriction;
    }
    putScmIpRestriction(value) {
        this._scmIpRestriction.internalValue = value;
    }
    resetScmIpRestriction() {
        this._scmIpRestriction.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scmIpRestrictionInput() {
        return this._scmIpRestriction.internalValue;
    }
}
exports.LinuxFunctionAppSiteConfigOutputReference = LinuxFunctionAppSiteConfigOutputReference;
function linuxFunctionAppStickySettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        app_setting_names: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.appSettingNames),
        connection_string_names: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.connectionStringNames),
    };
}
exports.linuxFunctionAppStickySettingsToTerraform = linuxFunctionAppStickySettingsToTerraform;
function linuxFunctionAppStickySettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        app_setting_names: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.appSettingNames),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        connection_string_names: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.connectionStringNames),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.linuxFunctionAppStickySettingsToHclTerraform = linuxFunctionAppStickySettingsToHclTerraform;
class LinuxFunctionAppStickySettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._appSettingNames !== undefined) {
            hasAnyValues = true;
            internalValueResult.appSettingNames = this._appSettingNames;
        }
        if (this._connectionStringNames !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectionStringNames = this._connectionStringNames;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._appSettingNames = undefined;
            this._connectionStringNames = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._appSettingNames = value.appSettingNames;
            this._connectionStringNames = value.connectionStringNames;
        }
    }
    get appSettingNames() {
        return this.getListAttribute('app_setting_names');
    }
    set appSettingNames(value) {
        this._appSettingNames = value;
    }
    resetAppSettingNames() {
        this._appSettingNames = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get appSettingNamesInput() {
        return this._appSettingNames;
    }
    get connectionStringNames() {
        return this.getListAttribute('connection_string_names');
    }
    set connectionStringNames(value) {
        this._connectionStringNames = value;
    }
    resetConnectionStringNames() {
        this._connectionStringNames = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionStringNamesInput() {
        return this._connectionStringNames;
    }
}
exports.LinuxFunctionAppStickySettingsOutputReference = LinuxFunctionAppStickySettingsOutputReference;
function linuxFunctionAppStorageAccountToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        access_key: cdktf.stringToTerraform(struct.accessKey),
        account_name: cdktf.stringToTerraform(struct.accountName),
        mount_path: cdktf.stringToTerraform(struct.mountPath),
        name: cdktf.stringToTerraform(struct.name),
        share_name: cdktf.stringToTerraform(struct.shareName),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.linuxFunctionAppStorageAccountToTerraform = linuxFunctionAppStorageAccountToTerraform;
function linuxFunctionAppStorageAccountToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        access_key: {
            value: cdktf.stringToHclTerraform(struct.accessKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        account_name: {
            value: cdktf.stringToHclTerraform(struct.accountName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        mount_path: {
            value: cdktf.stringToHclTerraform(struct.mountPath),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        share_name: {
            value: cdktf.stringToHclTerraform(struct.shareName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        type: {
            value: cdktf.stringToHclTerraform(struct.type),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.linuxFunctionAppStorageAccountToHclTerraform = linuxFunctionAppStorageAccountToHclTerraform;
class LinuxFunctionAppStorageAccountOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._accessKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.accessKey = this._accessKey;
        }
        if (this._accountName !== undefined) {
            hasAnyValues = true;
            internalValueResult.accountName = this._accountName;
        }
        if (this._mountPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.mountPath = this._mountPath;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._shareName !== undefined) {
            hasAnyValues = true;
            internalValueResult.shareName = this._shareName;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._accessKey = undefined;
            this._accountName = undefined;
            this._mountPath = undefined;
            this._name = undefined;
            this._shareName = undefined;
            this._type = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._accessKey = value.accessKey;
            this._accountName = value.accountName;
            this._mountPath = value.mountPath;
            this._name = value.name;
            this._shareName = value.shareName;
            this._type = value.type;
        }
    }
    get accessKey() {
        return this.getStringAttribute('access_key');
    }
    set accessKey(value) {
        this._accessKey = value;
    }
    // Temporarily expose input value. Use with caution.
    get accessKeyInput() {
        return this._accessKey;
    }
    get accountName() {
        return this.getStringAttribute('account_name');
    }
    set accountName(value) {
        this._accountName = value;
    }
    // Temporarily expose input value. Use with caution.
    get accountNameInput() {
        return this._accountName;
    }
    get mountPath() {
        return this.getStringAttribute('mount_path');
    }
    set mountPath(value) {
        this._mountPath = value;
    }
    resetMountPath() {
        this._mountPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mountPathInput() {
        return this._mountPath;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get shareName() {
        return this.getStringAttribute('share_name');
    }
    set shareName(value) {
        this._shareName = value;
    }
    // Temporarily expose input value. Use with caution.
    get shareNameInput() {
        return this._shareName;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
}
exports.LinuxFunctionAppStorageAccountOutputReference = LinuxFunctionAppStorageAccountOutputReference;
class LinuxFunctionAppStorageAccountList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new LinuxFunctionAppStorageAccountOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.LinuxFunctionAppStorageAccountList = LinuxFunctionAppStorageAccountList;
function linuxFunctionAppTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        read: cdktf.stringToTerraform(struct.read),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.linuxFunctionAppTimeoutsToTerraform = linuxFunctionAppTimeoutsToTerraform;
function linuxFunctionAppTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        read: {
            value: cdktf.stringToHclTerraform(struct.read),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.linuxFunctionAppTimeoutsToHclTerraform = linuxFunctionAppTimeoutsToHclTerraform;
class LinuxFunctionAppTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._read !== undefined) {
            hasAnyValues = true;
            internalValueResult.read = this._read;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._read = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._read = value.read;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get read() {
        return this.getStringAttribute('read');
    }
    set read(value) {
        this._read = value;
    }
    resetRead() {
        this._read = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get readInput() {
        return this._read;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.LinuxFunctionAppTimeoutsOutputReference = LinuxFunctionAppTimeoutsOutputReference;
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/azurerm/3.96.0/docs/resources/linux_function_app azurerm_linux_function_app}
*/
class LinuxFunctionApp extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a LinuxFunctionApp resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the LinuxFunctionApp to import
    * @param importFromId The id of the existing LinuxFunctionApp that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/azurerm/3.96.0/docs/resources/linux_function_app#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the LinuxFunctionApp to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "azurerm_linux_function_app", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/azurerm/3.96.0/docs/resources/linux_function_app azurerm_linux_function_app} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options LinuxFunctionAppConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'azurerm_linux_function_app',
            terraformGeneratorMetadata: {
                providerName: 'azurerm',
                providerVersion: '3.96.0',
                providerVersionConstraint: '~>3.96.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // site_credential - computed: true, optional: false, required: false
        this._siteCredential = new LinuxFunctionAppSiteCredentialList(this, "site_credential", false);
        // auth_settings - computed: false, optional: true, required: false
        this._authSettings = new LinuxFunctionAppAuthSettingsOutputReference(this, "auth_settings");
        // auth_settings_v2 - computed: false, optional: true, required: false
        this._authSettingsV2 = new LinuxFunctionAppAuthSettingsV2OutputReference(this, "auth_settings_v2");
        // backup - computed: false, optional: true, required: false
        this._backup = new LinuxFunctionAppBackupOutputReference(this, "backup");
        // connection_string - computed: false, optional: true, required: false
        this._connectionString = new LinuxFunctionAppConnectionStringList(this, "connection_string", true);
        // identity - computed: false, optional: true, required: false
        this._identity = new LinuxFunctionAppIdentityOutputReference(this, "identity");
        // site_config - computed: false, optional: false, required: true
        this._siteConfig = new LinuxFunctionAppSiteConfigOutputReference(this, "site_config");
        // sticky_settings - computed: false, optional: true, required: false
        this._stickySettings = new LinuxFunctionAppStickySettingsOutputReference(this, "sticky_settings");
        // storage_account - computed: false, optional: true, required: false
        this._storageAccount = new LinuxFunctionAppStorageAccountList(this, "storage_account", true);
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new LinuxFunctionAppTimeoutsOutputReference(this, "timeouts");
        this._appSettings = config.appSettings;
        this._builtinLoggingEnabled = config.builtinLoggingEnabled;
        this._clientCertificateEnabled = config.clientCertificateEnabled;
        this._clientCertificateExclusionPaths = config.clientCertificateExclusionPaths;
        this._clientCertificateMode = config.clientCertificateMode;
        this._contentShareForceDisabled = config.contentShareForceDisabled;
        this._dailyMemoryTimeQuota = config.dailyMemoryTimeQuota;
        this._enabled = config.enabled;
        this._ftpPublishBasicAuthenticationEnabled = config.ftpPublishBasicAuthenticationEnabled;
        this._functionsExtensionVersion = config.functionsExtensionVersion;
        this._httpsOnly = config.httpsOnly;
        this._id = config.id;
        this._keyVaultReferenceIdentityId = config.keyVaultReferenceIdentityId;
        this._location = config.location;
        this._name = config.name;
        this._publicNetworkAccessEnabled = config.publicNetworkAccessEnabled;
        this._resourceGroupName = config.resourceGroupName;
        this._servicePlanId = config.servicePlanId;
        this._storageAccountAccessKey = config.storageAccountAccessKey;
        this._storageAccountName = config.storageAccountName;
        this._storageKeyVaultSecretId = config.storageKeyVaultSecretId;
        this._storageUsesManagedIdentity = config.storageUsesManagedIdentity;
        this._tags = config.tags;
        this._virtualNetworkSubnetId = config.virtualNetworkSubnetId;
        this._webdeployPublishBasicAuthenticationEnabled = config.webdeployPublishBasicAuthenticationEnabled;
        this._zipDeployFile = config.zipDeployFile;
        this._authSettings.internalValue = config.authSettings;
        this._authSettingsV2.internalValue = config.authSettingsV2;
        this._backup.internalValue = config.backup;
        this._connectionString.internalValue = config.connectionString;
        this._identity.internalValue = config.identity;
        this._siteConfig.internalValue = config.siteConfig;
        this._stickySettings.internalValue = config.stickySettings;
        this._storageAccount.internalValue = config.storageAccount;
        this._timeouts.internalValue = config.timeouts;
    }
    get appSettings() {
        return this.getStringMapAttribute('app_settings');
    }
    set appSettings(value) {
        this._appSettings = value;
    }
    resetAppSettings() {
        this._appSettings = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get appSettingsInput() {
        return this._appSettings;
    }
    get builtinLoggingEnabled() {
        return this.getBooleanAttribute('builtin_logging_enabled');
    }
    set builtinLoggingEnabled(value) {
        this._builtinLoggingEnabled = value;
    }
    resetBuiltinLoggingEnabled() {
        this._builtinLoggingEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get builtinLoggingEnabledInput() {
        return this._builtinLoggingEnabled;
    }
    get clientCertificateEnabled() {
        return this.getBooleanAttribute('client_certificate_enabled');
    }
    set clientCertificateEnabled(value) {
        this._clientCertificateEnabled = value;
    }
    resetClientCertificateEnabled() {
        this._clientCertificateEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientCertificateEnabledInput() {
        return this._clientCertificateEnabled;
    }
    get clientCertificateExclusionPaths() {
        return this.getStringAttribute('client_certificate_exclusion_paths');
    }
    set clientCertificateExclusionPaths(value) {
        this._clientCertificateExclusionPaths = value;
    }
    resetClientCertificateExclusionPaths() {
        this._clientCertificateExclusionPaths = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientCertificateExclusionPathsInput() {
        return this._clientCertificateExclusionPaths;
    }
    get clientCertificateMode() {
        return this.getStringAttribute('client_certificate_mode');
    }
    set clientCertificateMode(value) {
        this._clientCertificateMode = value;
    }
    resetClientCertificateMode() {
        this._clientCertificateMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientCertificateModeInput() {
        return this._clientCertificateMode;
    }
    get contentShareForceDisabled() {
        return this.getBooleanAttribute('content_share_force_disabled');
    }
    set contentShareForceDisabled(value) {
        this._contentShareForceDisabled = value;
    }
    resetContentShareForceDisabled() {
        this._contentShareForceDisabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get contentShareForceDisabledInput() {
        return this._contentShareForceDisabled;
    }
    // custom_domain_verification_id - computed: true, optional: false, required: false
    get customDomainVerificationId() {
        return this.getStringAttribute('custom_domain_verification_id');
    }
    get dailyMemoryTimeQuota() {
        return this.getNumberAttribute('daily_memory_time_quota');
    }
    set dailyMemoryTimeQuota(value) {
        this._dailyMemoryTimeQuota = value;
    }
    resetDailyMemoryTimeQuota() {
        this._dailyMemoryTimeQuota = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dailyMemoryTimeQuotaInput() {
        return this._dailyMemoryTimeQuota;
    }
    // default_hostname - computed: true, optional: false, required: false
    get defaultHostname() {
        return this.getStringAttribute('default_hostname');
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get ftpPublishBasicAuthenticationEnabled() {
        return this.getBooleanAttribute('ftp_publish_basic_authentication_enabled');
    }
    set ftpPublishBasicAuthenticationEnabled(value) {
        this._ftpPublishBasicAuthenticationEnabled = value;
    }
    resetFtpPublishBasicAuthenticationEnabled() {
        this._ftpPublishBasicAuthenticationEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ftpPublishBasicAuthenticationEnabledInput() {
        return this._ftpPublishBasicAuthenticationEnabled;
    }
    get functionsExtensionVersion() {
        return this.getStringAttribute('functions_extension_version');
    }
    set functionsExtensionVersion(value) {
        this._functionsExtensionVersion = value;
    }
    resetFunctionsExtensionVersion() {
        this._functionsExtensionVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get functionsExtensionVersionInput() {
        return this._functionsExtensionVersion;
    }
    // hosting_environment_id - computed: true, optional: false, required: false
    get hostingEnvironmentId() {
        return this.getStringAttribute('hosting_environment_id');
    }
    get httpsOnly() {
        return this.getBooleanAttribute('https_only');
    }
    set httpsOnly(value) {
        this._httpsOnly = value;
    }
    resetHttpsOnly() {
        this._httpsOnly = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpsOnlyInput() {
        return this._httpsOnly;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get keyVaultReferenceIdentityId() {
        return this.getStringAttribute('key_vault_reference_identity_id');
    }
    set keyVaultReferenceIdentityId(value) {
        this._keyVaultReferenceIdentityId = value;
    }
    resetKeyVaultReferenceIdentityId() {
        this._keyVaultReferenceIdentityId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyVaultReferenceIdentityIdInput() {
        return this._keyVaultReferenceIdentityId;
    }
    // kind - computed: true, optional: false, required: false
    get kind() {
        return this.getStringAttribute('kind');
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    // outbound_ip_address_list - computed: true, optional: false, required: false
    get outboundIpAddressList() {
        return this.getListAttribute('outbound_ip_address_list');
    }
    // outbound_ip_addresses - computed: true, optional: false, required: false
    get outboundIpAddresses() {
        return this.getStringAttribute('outbound_ip_addresses');
    }
    // possible_outbound_ip_address_list - computed: true, optional: false, required: false
    get possibleOutboundIpAddressList() {
        return this.getListAttribute('possible_outbound_ip_address_list');
    }
    // possible_outbound_ip_addresses - computed: true, optional: false, required: false
    get possibleOutboundIpAddresses() {
        return this.getStringAttribute('possible_outbound_ip_addresses');
    }
    get publicNetworkAccessEnabled() {
        return this.getBooleanAttribute('public_network_access_enabled');
    }
    set publicNetworkAccessEnabled(value) {
        this._publicNetworkAccessEnabled = value;
    }
    resetPublicNetworkAccessEnabled() {
        this._publicNetworkAccessEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get publicNetworkAccessEnabledInput() {
        return this._publicNetworkAccessEnabled;
    }
    get resourceGroupName() {
        return this.getStringAttribute('resource_group_name');
    }
    set resourceGroupName(value) {
        this._resourceGroupName = value;
    }
    // Temporarily expose input value. Use with caution.
    get resourceGroupNameInput() {
        return this._resourceGroupName;
    }
    get servicePlanId() {
        return this.getStringAttribute('service_plan_id');
    }
    set servicePlanId(value) {
        this._servicePlanId = value;
    }
    // Temporarily expose input value. Use with caution.
    get servicePlanIdInput() {
        return this._servicePlanId;
    }
    get siteCredential() {
        return this._siteCredential;
    }
    get storageAccountAccessKey() {
        return this.getStringAttribute('storage_account_access_key');
    }
    set storageAccountAccessKey(value) {
        this._storageAccountAccessKey = value;
    }
    resetStorageAccountAccessKey() {
        this._storageAccountAccessKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storageAccountAccessKeyInput() {
        return this._storageAccountAccessKey;
    }
    get storageAccountName() {
        return this.getStringAttribute('storage_account_name');
    }
    set storageAccountName(value) {
        this._storageAccountName = value;
    }
    resetStorageAccountName() {
        this._storageAccountName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storageAccountNameInput() {
        return this._storageAccountName;
    }
    get storageKeyVaultSecretId() {
        return this.getStringAttribute('storage_key_vault_secret_id');
    }
    set storageKeyVaultSecretId(value) {
        this._storageKeyVaultSecretId = value;
    }
    resetStorageKeyVaultSecretId() {
        this._storageKeyVaultSecretId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storageKeyVaultSecretIdInput() {
        return this._storageKeyVaultSecretId;
    }
    get storageUsesManagedIdentity() {
        return this.getBooleanAttribute('storage_uses_managed_identity');
    }
    set storageUsesManagedIdentity(value) {
        this._storageUsesManagedIdentity = value;
    }
    resetStorageUsesManagedIdentity() {
        this._storageUsesManagedIdentity = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storageUsesManagedIdentityInput() {
        return this._storageUsesManagedIdentity;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get virtualNetworkSubnetId() {
        return this.getStringAttribute('virtual_network_subnet_id');
    }
    set virtualNetworkSubnetId(value) {
        this._virtualNetworkSubnetId = value;
    }
    resetVirtualNetworkSubnetId() {
        this._virtualNetworkSubnetId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get virtualNetworkSubnetIdInput() {
        return this._virtualNetworkSubnetId;
    }
    get webdeployPublishBasicAuthenticationEnabled() {
        return this.getBooleanAttribute('webdeploy_publish_basic_authentication_enabled');
    }
    set webdeployPublishBasicAuthenticationEnabled(value) {
        this._webdeployPublishBasicAuthenticationEnabled = value;
    }
    resetWebdeployPublishBasicAuthenticationEnabled() {
        this._webdeployPublishBasicAuthenticationEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get webdeployPublishBasicAuthenticationEnabledInput() {
        return this._webdeployPublishBasicAuthenticationEnabled;
    }
    get zipDeployFile() {
        return this.getStringAttribute('zip_deploy_file');
    }
    set zipDeployFile(value) {
        this._zipDeployFile = value;
    }
    resetZipDeployFile() {
        this._zipDeployFile = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get zipDeployFileInput() {
        return this._zipDeployFile;
    }
    get authSettings() {
        return this._authSettings;
    }
    putAuthSettings(value) {
        this._authSettings.internalValue = value;
    }
    resetAuthSettings() {
        this._authSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authSettingsInput() {
        return this._authSettings.internalValue;
    }
    get authSettingsV2() {
        return this._authSettingsV2;
    }
    putAuthSettingsV2(value) {
        this._authSettingsV2.internalValue = value;
    }
    resetAuthSettingsV2() {
        this._authSettingsV2.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authSettingsV2Input() {
        return this._authSettingsV2.internalValue;
    }
    get backup() {
        return this._backup;
    }
    putBackup(value) {
        this._backup.internalValue = value;
    }
    resetBackup() {
        this._backup.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backupInput() {
        return this._backup.internalValue;
    }
    get connectionString() {
        return this._connectionString;
    }
    putConnectionString(value) {
        this._connectionString.internalValue = value;
    }
    resetConnectionString() {
        this._connectionString.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionStringInput() {
        return this._connectionString.internalValue;
    }
    get identity() {
        return this._identity;
    }
    putIdentity(value) {
        this._identity.internalValue = value;
    }
    resetIdentity() {
        this._identity.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get identityInput() {
        return this._identity.internalValue;
    }
    get siteConfig() {
        return this._siteConfig;
    }
    putSiteConfig(value) {
        this._siteConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get siteConfigInput() {
        return this._siteConfig.internalValue;
    }
    get stickySettings() {
        return this._stickySettings;
    }
    putStickySettings(value) {
        this._stickySettings.internalValue = value;
    }
    resetStickySettings() {
        this._stickySettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stickySettingsInput() {
        return this._stickySettings.internalValue;
    }
    get storageAccount() {
        return this._storageAccount;
    }
    putStorageAccount(value) {
        this._storageAccount.internalValue = value;
    }
    resetStorageAccount() {
        this._storageAccount.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storageAccountInput() {
        return this._storageAccount.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            app_settings: cdktf.hashMapper(cdktf.stringToTerraform)(this._appSettings),
            builtin_logging_enabled: cdktf.booleanToTerraform(this._builtinLoggingEnabled),
            client_certificate_enabled: cdktf.booleanToTerraform(this._clientCertificateEnabled),
            client_certificate_exclusion_paths: cdktf.stringToTerraform(this._clientCertificateExclusionPaths),
            client_certificate_mode: cdktf.stringToTerraform(this._clientCertificateMode),
            content_share_force_disabled: cdktf.booleanToTerraform(this._contentShareForceDisabled),
            daily_memory_time_quota: cdktf.numberToTerraform(this._dailyMemoryTimeQuota),
            enabled: cdktf.booleanToTerraform(this._enabled),
            ftp_publish_basic_authentication_enabled: cdktf.booleanToTerraform(this._ftpPublishBasicAuthenticationEnabled),
            functions_extension_version: cdktf.stringToTerraform(this._functionsExtensionVersion),
            https_only: cdktf.booleanToTerraform(this._httpsOnly),
            id: cdktf.stringToTerraform(this._id),
            key_vault_reference_identity_id: cdktf.stringToTerraform(this._keyVaultReferenceIdentityId),
            location: cdktf.stringToTerraform(this._location),
            name: cdktf.stringToTerraform(this._name),
            public_network_access_enabled: cdktf.booleanToTerraform(this._publicNetworkAccessEnabled),
            resource_group_name: cdktf.stringToTerraform(this._resourceGroupName),
            service_plan_id: cdktf.stringToTerraform(this._servicePlanId),
            storage_account_access_key: cdktf.stringToTerraform(this._storageAccountAccessKey),
            storage_account_name: cdktf.stringToTerraform(this._storageAccountName),
            storage_key_vault_secret_id: cdktf.stringToTerraform(this._storageKeyVaultSecretId),
            storage_uses_managed_identity: cdktf.booleanToTerraform(this._storageUsesManagedIdentity),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            virtual_network_subnet_id: cdktf.stringToTerraform(this._virtualNetworkSubnetId),
            webdeploy_publish_basic_authentication_enabled: cdktf.booleanToTerraform(this._webdeployPublishBasicAuthenticationEnabled),
            zip_deploy_file: cdktf.stringToTerraform(this._zipDeployFile),
            auth_settings: linuxFunctionAppAuthSettingsToTerraform(this._authSettings.internalValue),
            auth_settings_v2: linuxFunctionAppAuthSettingsV2ToTerraform(this._authSettingsV2.internalValue),
            backup: linuxFunctionAppBackupToTerraform(this._backup.internalValue),
            connection_string: cdktf.listMapper(linuxFunctionAppConnectionStringToTerraform, true)(this._connectionString.internalValue),
            identity: linuxFunctionAppIdentityToTerraform(this._identity.internalValue),
            site_config: linuxFunctionAppSiteConfigToTerraform(this._siteConfig.internalValue),
            sticky_settings: linuxFunctionAppStickySettingsToTerraform(this._stickySettings.internalValue),
            storage_account: cdktf.listMapper(linuxFunctionAppStorageAccountToTerraform, true)(this._storageAccount.internalValue),
            timeouts: linuxFunctionAppTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            app_settings: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._appSettings),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            builtin_logging_enabled: {
                value: cdktf.booleanToHclTerraform(this._builtinLoggingEnabled),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            client_certificate_enabled: {
                value: cdktf.booleanToHclTerraform(this._clientCertificateEnabled),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            client_certificate_exclusion_paths: {
                value: cdktf.stringToHclTerraform(this._clientCertificateExclusionPaths),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            client_certificate_mode: {
                value: cdktf.stringToHclTerraform(this._clientCertificateMode),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            content_share_force_disabled: {
                value: cdktf.booleanToHclTerraform(this._contentShareForceDisabled),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            daily_memory_time_quota: {
                value: cdktf.numberToHclTerraform(this._dailyMemoryTimeQuota),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            enabled: {
                value: cdktf.booleanToHclTerraform(this._enabled),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            ftp_publish_basic_authentication_enabled: {
                value: cdktf.booleanToHclTerraform(this._ftpPublishBasicAuthenticationEnabled),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            functions_extension_version: {
                value: cdktf.stringToHclTerraform(this._functionsExtensionVersion),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            https_only: {
                value: cdktf.booleanToHclTerraform(this._httpsOnly),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            key_vault_reference_identity_id: {
                value: cdktf.stringToHclTerraform(this._keyVaultReferenceIdentityId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            location: {
                value: cdktf.stringToHclTerraform(this._location),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            public_network_access_enabled: {
                value: cdktf.booleanToHclTerraform(this._publicNetworkAccessEnabled),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            resource_group_name: {
                value: cdktf.stringToHclTerraform(this._resourceGroupName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            service_plan_id: {
                value: cdktf.stringToHclTerraform(this._servicePlanId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            storage_account_access_key: {
                value: cdktf.stringToHclTerraform(this._storageAccountAccessKey),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            storage_account_name: {
                value: cdktf.stringToHclTerraform(this._storageAccountName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            storage_key_vault_secret_id: {
                value: cdktf.stringToHclTerraform(this._storageKeyVaultSecretId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            storage_uses_managed_identity: {
                value: cdktf.booleanToHclTerraform(this._storageUsesManagedIdentity),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            tags: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tags),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            virtual_network_subnet_id: {
                value: cdktf.stringToHclTerraform(this._virtualNetworkSubnetId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            webdeploy_publish_basic_authentication_enabled: {
                value: cdktf.booleanToHclTerraform(this._webdeployPublishBasicAuthenticationEnabled),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            zip_deploy_file: {
                value: cdktf.stringToHclTerraform(this._zipDeployFile),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            auth_settings: {
                value: linuxFunctionAppAuthSettingsToHclTerraform(this._authSettings.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "LinuxFunctionAppAuthSettingsList",
            },
            auth_settings_v2: {
                value: linuxFunctionAppAuthSettingsV2ToHclTerraform(this._authSettingsV2.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "LinuxFunctionAppAuthSettingsV2List",
            },
            backup: {
                value: linuxFunctionAppBackupToHclTerraform(this._backup.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "LinuxFunctionAppBackupList",
            },
            connection_string: {
                value: cdktf.listMapperHcl(linuxFunctionAppConnectionStringToHclTerraform, true)(this._connectionString.internalValue),
                isBlock: true,
                type: "set",
                storageClassType: "LinuxFunctionAppConnectionStringList",
            },
            identity: {
                value: linuxFunctionAppIdentityToHclTerraform(this._identity.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "LinuxFunctionAppIdentityList",
            },
            site_config: {
                value: linuxFunctionAppSiteConfigToHclTerraform(this._siteConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "LinuxFunctionAppSiteConfigList",
            },
            sticky_settings: {
                value: linuxFunctionAppStickySettingsToHclTerraform(this._stickySettings.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "LinuxFunctionAppStickySettingsList",
            },
            storage_account: {
                value: cdktf.listMapperHcl(linuxFunctionAppStorageAccountToHclTerraform, true)(this._storageAccount.internalValue),
                isBlock: true,
                type: "set",
                storageClassType: "LinuxFunctionAppStorageAccountList",
            },
            timeouts: {
                value: linuxFunctionAppTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "LinuxFunctionAppTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.LinuxFunctionApp = LinuxFunctionApp;
// =================
// STATIC PROPERTIES
// =================
LinuxFunctionApp.tfResourceType = "azurerm_linux_function_app";
//# sourceMappingURL=data:application/json;base64,