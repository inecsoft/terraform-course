import { Construct } from "constructs";
import { Json } from "../std";
/**
 * Options for reading parameters
 */
export interface ReadParameterOptions {
    /** Schema to limit the read to */
    readonly schema?: any;
}
/**
 * Parameter Registrar
 *
 * This class is used to register and lookup parameter values.
 */
export declare class ParameterRegistrar extends Construct {
    /** Cache for parameter lookups */
    private parameterValueByPath;
    /** List of all registered parameter schemas */
    private parameterSchemas;
    /** @internal */
    readonly _rawParameters: {
        [key: string]: any;
    };
    constructor(scope: Construct, id: string);
    /**
     * Retrieve a parameter value by its path
     *
     * @param path the path of the parameter
     * @returns the value of the parameter
     */
    value(path: string): any;
    /**
     * Read parameters
     *
     * @param options options for reading parameters
     * @returns the schema as a string
     */
    read(options?: ReadParameterOptions): Json;
    /**
     * Add parameter schema to registrar
     *
     * @param schema schema to add to the registrar
     */
    addSchema(schema: any): void;
    /**
     * Helper method to add a parameter schema at a given path.
     * This method will nest the schema under the given path, making it easier to nest schemas.
     *
     * @param schema the schema to add
     * @param path the path to nest the schema under
     * @param recursiveRequire whether or not to require all the nested properties
     */
    addSchemaAtPath(schema: any, path: string, recursiveRequire?: boolean): void;
    /**
     * This is a helper method to nest a schema under a path.
     *
     * I.E. if you have a json schema that looks like this:
     * { type: "object", properties: { foo: { type: "string" } } }
     *
     * And we want to nest it under the path "bar/baz", then this method will return:
     * { type: "object", properties: { bar: { type: "object", properties: { baz: { type: "object", properties: { foo: { type: "string" } } } } } } }
     *
     * making it easier to nest schemas under paths, without writing out the object boilerplate.
     *
     * @internal
     */
    _nestSchemaUnderPath(schema: any, path: string, recursiveRequire?: boolean): any;
    /**
     * @internal
     */
    _preSynthesize(): void;
}
/**
 * Retrieves a value from an object using a given path
 *
 * @param rawParameters the object to retrieve the value from
 * @param path the path to the value (I.E. "foo/bar/baz")
 * @internal
 */
export declare function resolveValueFromPath(rawParameters: {
    [key: string]: any;
}, path: string): any;
