"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.scanDirForPlatformFile = exports.loadPlatformSpecificValues = exports.filterParametersBySchema = exports.extractFieldsFromSchema = exports.parseValuesObjectFromString = void 0;
const fs_1 = require("fs");
const path = __importStar(require("path"));
const toml = __importStar(require("toml"));
const yaml = __importStar(require("yaml"));
/**
 * Creates a JSON object from a comma-separated list of values.
 * Where the key is the path and the value is the value.
 *
 * I.E. "foo/bar=123,foo/baz=456" would result in:
 * {
 * "foo": {
 *  "bar": "123",
 *  "baz": "456"
 *  }
 * }
 *
 * @param values a comma-separated list of values
 * @returns a JSON object with all values
 */
function parseValuesObjectFromString(values) {
    const result = {}; // Adjusted type for nested structures
    const valuesList = values.split(",");
    valuesList.forEach((v) => {
        const [paramPath, value] = v.split("=");
        const pathParts = paramPath.split("/");
        let tempObject = result; // Start with the result object
        pathParts.forEach((part, index) => {
            // If we're at the last part, assign the value
            if (index === pathParts.length - 1) {
                tempObject[part] = value;
            }
            else {
                // Otherwise, initialize the part if it doesn't exist, or use the existing object
                if (!tempObject[part])
                    tempObject[part] = {};
                tempObject = tempObject[part];
            }
        });
    });
    return result;
}
exports.parseValuesObjectFromString = parseValuesObjectFromString;
/**
 * Extracts all fields from a JSON schema.
 *
 * @param schema the schema to extract fields from
 * @returns a set of all fields in the schema
 */
function extractFieldsFromSchema(schema) {
    const fields = new Set();
    if (schema.properties) {
        for (const key of Object.keys(schema.properties)) {
            fields.add(key);
        }
    }
    return fields;
}
exports.extractFieldsFromSchema = extractFieldsFromSchema;
function filterParametersBySchema(fields, parameters) {
    const filtered = {};
    for (const field of fields) {
        if (parameters.hasOwnProperty(field)) {
            filtered[field] = parameters[field];
        }
    }
    return filtered;
}
exports.filterParametersBySchema = filterParametersBySchema;
/**
 * Loads platform-specific values that were passed in via CLI arguments and
 * from a values file. CLI arguments take precedence over values file.
 *
 * I.E. if the cli provided values such as --value "foo/bar=123" and the values file
 * contained:
 *
 * ```yaml
 * foo:
 *  bar: 456
 *  baz: 789
 * ```
 *
 * The resulting values object would be:
 * {
 *  "foo": {
 *    "bar": "123",
 *    "baz": "789"
 *  }
 * }
 *
 * @returns a JSON object with all platform-specific values
 */
function loadPlatformSpecificValues() {
    const cliValues = parseValuesObjectFromString(process.env.WING_VALUES ?? "");
    if (process.env.WING_VALUES_FILE === undefined ||
        process.env.WING_VALUES_FILE === "") {
        return cliValues;
    }
    const file = path.isAbsolute(process.env.WING_VALUES_FILE)
        ? process.env.WING_VALUES_FILE
        : path.join(process.cwd(), process.env.WING_VALUES_FILE);
    if (!(0, fs_1.existsSync)(file)) {
        return cliValues;
    }
    const data = (0, fs_1.readFileSync)(file, "utf-8");
    const fileExtension = path.extname(file);
    const fileValues = (() => {
        switch (fileExtension) {
            case ".yaml":
            case ".yml":
                return yaml.parse(data);
            case ".json":
                return JSON.parse(data);
            case ".toml":
                return toml.parse(data);
            default:
                throw new Error(`Unsupported file extension: ${fileExtension} (expected .yml, .json, or .toml)`);
        }
    })();
    return { ...fileValues, ...cliValues };
}
exports.loadPlatformSpecificValues = loadPlatformSpecificValues;
/**
 * Scans a directory for any platform files.
 *
 * @param dir the directory to scan
 * @returns the path to any platform files
 */
function scanDirForPlatformFile(dir) {
    const result = [];
    if (!(0, fs_1.existsSync)(dir)) {
        return result;
    }
    const files = (0, fs_1.readdirSync)(dir);
    for (const file of files) {
        if (file === "wplatform.js" || file.endsWith(".wplatform.js")) {
            result.push(path.join(dir, file));
        }
    }
    return result;
}
exports.scanDirForPlatformFile = scanDirForPlatformFile;
//# sourceMappingURL=data:application/json;base64,