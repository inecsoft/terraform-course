"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports._loadCustomPlatform = exports.PlatformManager = exports.SECRETS_FILE_NAME = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const process_1 = require("process");
const vm = __importStar(require("vm"));
const util_1 = require("./util");
const types_1 = require("../core/types");
const BUILTIN_PLATFORMS = ["tf-aws", "tf-azure", "tf-gcp", "sim"];
/** @internal */
exports.SECRETS_FILE_NAME = "secrets.json";
/** @internal */
class PlatformManager {
    constructor(options) {
        this.platformInstances = [];
        this.platformPaths = options.platformPaths ?? [];
        this.retrieveImplicitPlatforms();
        this.createPlatformInstances();
    }
    /**
     * Retrieve all implicit platform declarations.
     *
     * These are platforms that are not explicitly declared in the cli options
     * but are implicitly available to the app.
     *
     * We look for platforms in the following locations:
     * - The source directory
     * - Any imported namespaces (provided by the wingc compiler output)
     *
     * To determine if a directory contains a platform, we check if it contains a file ending in "wplatform.js"
     * TODO: Support platforms defined in Wing (platform.w) https://github.com/winglang/wing/issues/4937
     */
    retrieveImplicitPlatforms() {
        const importedNamespaces = process.env.WING_IMPORTED_NAMESPACES?.split(";");
        const sourceDir = process.env.WING_SOURCE_DIR;
        if (sourceDir) {
            const sourceDirPlatformFile = (0, util_1.scanDirForPlatformFile)(sourceDir);
            if (sourceDirPlatformFile) {
                this.platformPaths.push(...sourceDirPlatformFile);
            }
        }
        if (importedNamespaces) {
            importedNamespaces.forEach((namespaceDir) => {
                const namespaceDirPlatformFile = (0, util_1.scanDirForPlatformFile)(namespaceDir);
                if (namespaceDirPlatformFile) {
                    this.platformPaths.push(...namespaceDirPlatformFile);
                }
            });
        }
    }
    loadPlatformPath(platformPath) {
        const platformName = (0, path_1.basename)(platformPath);
        const isBuiltin = BUILTIN_PLATFORMS.includes(platformName);
        const pathToRead = isBuiltin
            ? (0, path_1.join)(__dirname, `../target-${platformName}/platform`)
            : (0, path_1.join)(platformPath);
        this.platformInstances.push(isBuiltin
            ? this.loadBuiltinPlatform(pathToRead)
            : _loadCustomPlatform(pathToRead));
    }
    /**
     * Builtin platforms are loaded from the SDK
     *
     * @param builtinPlatformPath path to a builtin platform
     */
    loadBuiltinPlatform(builtinPlatformPath) {
        // eslint-disable-next-line @typescript-eslint/no-require-imports
        const loadedPlatform = require(builtinPlatformPath);
        if (!loadedPlatform || !loadedPlatform.Platform) {
            console.error(`Failed to load platform from ${builtinPlatformPath}`);
            return;
        }
        return new loadedPlatform.Platform();
    }
    createPlatformInstances() {
        this.platformInstances = [];
        this.platformPaths.forEach((platformPath) => {
            this.loadPlatformPath(platformPath);
        });
    }
    // This method is called from preflight.cjs in order to return an App instance
    // that can be synthesized
    createApp(appProps) {
        this.createPlatformInstances();
        let appCall = this.platformInstances[0].newApp;
        if (!appCall) {
            throw new Error(`No newApp method found on platform: ${this.platformPaths[0]} (Hint: The first platform provided must have a newApp method)`);
        }
        let hooks = collectHooks(this.platformInstances);
        const app = appCall({
            ...appProps,
            synthHooks: hooks.synthHooks,
            newInstanceOverrides: hooks.newInstanceOverrides,
        });
        let secretNames = [];
        for (const c of app.node.findAll()) {
            if (c[types_1.SECRET_SYMBOL]) {
                const secret = c;
                secretNames.push(secret.name);
            }
        }
        if (secretNames.length > 0) {
            (0, fs_1.writeFileSync)((0, path_1.join)(app.outdir, exports.SECRETS_FILE_NAME), JSON.stringify(secretNames));
        }
        let registrar = app.parameters;
        hooks.parameterSchemas.forEach((schema) => {
            registrar.addSchema(schema);
        });
        return app;
    }
    async storeSecrets(secrets) {
        const hooks = collectHooks(this.platformInstances);
        if (!hooks.storeSecretsHook) {
            throw new Error(`Cannot find a platform or platform extension that supports storing secrets`);
        }
        await hooks.storeSecretsHook(secrets);
    }
}
exports.PlatformManager = PlatformManager;
/**
 * Custom platforms need to be loaded into a custom context in order to
 * resolve their dependencies correctly.
 *
 * @internal
 */
function _loadCustomPlatform(customPlatformPath) {
    const isScoped = customPlatformPath.startsWith("@");
    const platformBaseDir = isScoped
        ? (0, path_1.dirname)((0, path_1.dirname)(customPlatformPath))
        : (0, path_1.dirname)(customPlatformPath);
    const platformDir = (0, path_1.join)(platformBaseDir, "node_modules");
    /**
     * Support platforms that are provided as:
     * - A single js file (e.g. "/some/path/to/platform.js")
     * - A scoped package (e.g. "@scope/platform")
     * - A non-scoped package (e.g. "/some/path/platform")
     */
    const fullCustomPlatformPath = customPlatformPath.endsWith(".js")
        ? customPlatformPath
        : isScoped
            ? (0, path_1.join)(platformDir, `${customPlatformPath}/lib/index.js`)
            : `${customPlatformPath}/index.js`;
    // enable relative imports from the platform file
    const customPlatformBaseDir = customPlatformPath.endsWith(".js")
        ? (0, path_1.dirname)(customPlatformPath)
        : customPlatformPath;
    const cwdNodeModules = (0, path_1.join)((0, process_1.cwd)(), "node_modules");
    const customPlatformLib = (0, path_1.join)(cwdNodeModules, customPlatformPath, "lib");
    const resolvablePaths = [
        ...module.paths,
        customPlatformBaseDir,
        platformDir,
        cwdNodeModules,
        customPlatformLib,
    ];
    const requireResolve = (path) => {
        return require.resolve(path, {
            paths: resolvablePaths,
        });
    };
    const platformRequire = (path) => {
        // eslint-disable-next-line @typescript-eslint/no-require-imports
        return require(requireResolve(path));
    };
    platformRequire.resolve = requireResolve;
    const platformModule = {
        exports: {},
    };
    const context = vm.createContext({
        require: platformRequire,
        console,
        exports: platformModule.exports,
        module: platformModule,
        process,
        __dirname: customPlatformPath,
    });
    try {
        const platformCode = (0, fs_1.readFileSync)(fullCustomPlatformPath, "utf-8");
        const script = new vm.Script(platformCode);
        script.runInContext(context);
        return new platformModule.exports.Platform();
    }
    catch (error) {
        if (process.env.DEBUG) {
            console.error(error);
        }
        const hint = customPlatformPath.includes(".")
            ? "Ensure the path to the platform is correct"
            : `Ensure you have installed the platform provider by running 'npm install ${customPlatformPath}'`;
        console.error(`An error occurred while loading the custom platform: ${customPlatformPath}\n\n(hint: ${hint})`);
    }
}
exports._loadCustomPlatform = _loadCustomPlatform;
function collectHooks(platformInstances) {
    let result = {
        synthHooks: {
            preSynthesize: [],
            postSynthesize: [],
            validate: [],
        },
        newInstanceOverrides: [],
        parameterSchemas: [],
        storeSecretsHook: undefined,
    };
    platformInstances.forEach((instance) => {
        if (instance.parameters) {
            result.parameterSchemas.push(instance.parameters);
        }
        if (instance.preSynth) {
            result.synthHooks.preSynthesize.push(instance.preSynth.bind(instance));
        }
        if (instance.postSynth) {
            result.synthHooks.postSynthesize.push(instance.postSynth.bind(instance));
        }
        if (instance.validate) {
            result.synthHooks.validate.push(instance.validate.bind(instance));
        }
        if (instance.newInstance) {
            result.newInstanceOverrides.push(instance.newInstance.bind(instance));
        }
        if (instance.storeSecrets) {
            result.storeSecretsHook = instance.storeSecrets.bind(instance);
        }
    });
    return result;
}
//# sourceMappingURL=data:application/json;base64,