import { App, AppProps } from "../core";
interface PlatformManagerOptions {
    /**
     * Either a builtin platform name or a path to a custom platform
     */
    readonly platformPaths?: string[];
}
/** @internal */
export declare const SECRETS_FILE_NAME = "secrets.json";
/** @internal */
export declare class PlatformManager {
    private readonly platformPaths;
    private platformInstances;
    constructor(options: PlatformManagerOptions);
    /**
     * Retrieve all implicit platform declarations.
     *
     * These are platforms that are not explicitly declared in the cli options
     * but are implicitly available to the app.
     *
     * We look for platforms in the following locations:
     * - The source directory
     * - Any imported namespaces (provided by the wingc compiler output)
     *
     * To determine if a directory contains a platform, we check if it contains a file ending in "wplatform.js"
     * TODO: Support platforms defined in Wing (platform.w) https://github.com/winglang/wing/issues/4937
     */
    private retrieveImplicitPlatforms;
    private loadPlatformPath;
    /**
     * Builtin platforms are loaded from the SDK
     *
     * @param builtinPlatformPath path to a builtin platform
     */
    private loadBuiltinPlatform;
    private createPlatformInstances;
    createApp(appProps: AppProps): App;
    storeSecrets(secrets: Record<string, string>): Promise<void>;
}
/**
 * Custom platforms need to be loaded into a custom context in order to
 * resolve their dependencies correctly.
 *
 * @internal
 */
export declare function _loadCustomPlatform(customPlatformPath: string): any;
export {};
