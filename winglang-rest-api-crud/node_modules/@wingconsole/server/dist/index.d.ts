import * as _trpc_server from '@trpc/server';
import { inferRouterInputs } from '@trpc/server';
import { Express } from 'express';
import * as _winglang_sdk_lib_simulator_simulator_js from '@winglang/sdk/lib/simulator/simulator.js';
import * as _winglang_sdk_lib_core_tree_js from '@winglang/sdk/lib/core/tree.js';
import * as _winglang_sdk_lib_std_test_runner_js from '@winglang/sdk/lib/std/test-runner.js';
import { Trace } from '@winglang/sdk/lib/std/test-runner.js';
export { Trace } from '@winglang/sdk/lib/std/test-runner.js';
import * as _trpc_server_observable_index_js from '@trpc/server/observable/index.js';
import { TestResult } from '@winglang/sdk/lib/std';
import * as _winglang_sdk_lib_std_json_js from '@winglang/sdk/lib/std/json.js';
import { simulator } from '@winglang/sdk';
import Emittery from 'emittery';
export { BaseResourceSchema, WingSimulatorSchema } from '@winglang/sdk/lib/simulator/index.js';
export * from '@winglang/sdk/lib/ex/index.js';

interface Config {
    set(key: string, value: unknown): void;
    get<T>(key: string): T;
    addEventListener(event: "config-change", listener: () => void): void;
    removeEventListener(event: "config-change", listener: () => void): void;
}

interface HostUtils {
    openExternal(url: string): Promise<void>;
}

type State = "compiling" | "loadingSimulator" | "success" | "error";

interface LogInterface {
    info(message?: any, ...optionalParameters: any[]): void;
    verbose(message?: any, ...optionalParameters: any[]): void;
    warning(message?: any, ...optionalParameters: any[]): void;
    error(message?: any, ...optionalParameters: any[]): void;
}

type LogLevel = "verbose" | "info" | "warn" | "error";
type LogSource = "compiler" | "console" | "simulator" | "user";
interface LogContext {
    sourceType?: string;
    sourcePath?: string;
    label?: string;
    messageType?: MessageType;
    hideTimestamp?: boolean;
}
interface LogEntry {
    id: string;
    timestamp?: number;
    level: LogLevel;
    message: string;
    source: LogSource;
    ctx?: LogContext;
}
type MessageType = "info" | "title" | "summary" | "success" | "fail";
interface ConsoleLogger {
    messages: LogEntry[];
    verbose: (message: string, source?: LogSource, context?: LogContext) => void;
    log: (message: string, source?: LogSource, context?: LogContext) => void;
    error: (message: unknown, source?: LogSource, context?: LogContext) => void;
    warning: (message: string, source?: LogSource, context?: LogContext) => void;
}

type UpdaterStatus = {
    status: "initial" | "checking-for-update" | "update-available" | "update-not-available" | "download-progress" | "update-downloaded" | "error" | "update-cancelled";
    progress?: number;
    version?: string;
};
interface Updater {
    status(): UpdaterStatus;
    addEventListener(event: "status-change", listener: () => void): void;
    removeEventListener(event: "status-change", listener: () => void): void;
    checkForUpdates(): Promise<void>;
    quitAndInstall(): void;
}

interface Analytics {
    track(event: string, properties?: Record<string, any>): void;
}

type LayoutComponentType = "explorer" | "tests" | "logs" | "endpoints";
interface LayoutComponent {
    type: LayoutComponentType;
}
interface LayoutPanel {
    hide?: boolean;
    components?: LayoutComponent[];
    size?: "small" | "default";
}
interface LayoutConfig {
    leftPanel?: LayoutPanel;
    bottomPanel?: LayoutPanel;
    rightPanel?: LayoutPanel;
    statusBar?: {
        hide?: boolean;
        showThemeToggle?: boolean;
    };
    errorScreen?: {
        position?: "default" | "bottom";
        displayLinks?: boolean;
    };
    panels?: {
        rounded?: boolean;
    };
}
type TestStatus = "pending" | "running" | "success" | "error";
interface TestItem {
    id: string;
    label: string;
    status: TestStatus;
    datetime: number;
    time?: number;
}
interface TestsStateManager {
    getTests: () => TestItem[];
    setTests: (tests: TestItem[]) => void;
    setTest: (test: TestItem) => void;
}
interface FileLink {
    path: string;
    line?: number;
    column?: number;
}
interface RouterMeta {
    analytics?: {
        action: string;
        resource: string;
    };
}
interface RouterContext {
    simulator(): Promise<simulator.Simulator>;
    testSimulator(): Promise<simulator.Simulator>;
    appDetails(): Promise<{
        wingVersion: string | undefined;
    }>;
    errorMessage(): string | undefined;
    emitter: Emittery<{
        invalidateQuery: string | undefined;
        trace: Trace;
        openFileInEditor: FileLink;
    }>;
    appState(): State;
    logger: ConsoleLogger;
    updater?: Updater;
    config?: Config;
    hostUtils?: HostUtils;
    wingfile: string;
    requireAcceptTerms?: boolean;
    layoutConfig?: LayoutConfig;
    getSelectedNode: () => string | undefined;
    setSelectedNode: (node: string) => void;
    testsStateManager: () => TestsStateManager;
    analyticsAnonymousId?: string;
    requireSignIn?: () => Promise<boolean>;
    notifySignedIn?: () => Promise<void>;
    analytics?: Analytics;
}

interface NodeDisplay {
    title?: string;
    description?: string;
    sourceModule?: string;
    hidden?: boolean;
    color?: string;
    icon?: string;
}

interface ExplorerItem {
    id: string;
    label: string;
    type?: string;
    childItems?: ExplorerItem[];
    display?: NodeDisplay;
}
interface MapNode {
    id: string;
    data: {
        label?: string;
        type?: string;
        path?: string;
        display?: NodeDisplay;
    };
    children?: MapNode[];
}
interface MapEdge {
    id: string;
    source: string;
    target: string;
}

interface InternalTestResult extends TestResult {
    response: string;
    time: number;
}

type ColumnType = "string" | "number" | "boolean" | "date" | "json";
interface Column {
    name: string;
    type: ColumnType;
}

type EndpointExposeStatus = "connected" | "disconnected" | "connecting";

declare const mergeAllRouters: () => {
    router: _trpc_server.Router<{
        _config: _trpc_server.RootConfig<{
            ctx: RouterContext;
            meta: RouterMeta;
            errorShape: _trpc_server.DefaultErrorShape;
            transformer: _trpc_server.DefaultDataTransformer;
        }>;
        router: true;
        procedures: {
            "fileBrowser.get": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                    fileName: string;
                };
                _input_out: {
                    resourcePath: string;
                    fileName: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, string | undefined>;
            "fileBrowser.list": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                };
                _input_out: {
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, string[]>;
            "fileBrowser.put": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                    fileName: string;
                    fileContent: string;
                };
                _input_out: {
                    resourcePath: string;
                    fileName: string;
                    fileContent: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, string | undefined>;
            "fileBrowser.delete": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                    fileName: string;
                };
                _input_out: {
                    resourcePath: string;
                    fileName: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, string | undefined>;
            "fileBrowser.download": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                    fileName: string;
                };
                _input_out: {
                    resourcePath: string;
                    fileName: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, string | undefined>;
        } & {
            "httpClient.getUrl": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                };
                _input_out: {
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, {
                url: string | undefined;
            }>;
            "httpClient.getOpenApiSpec": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                };
                _input_out: {
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, {
                openApiSpec: any;
            }>;
        } & {
            "uiField.get": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                };
                _input_out: {
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, {
                value: string | undefined;
            }>;
        } & {
            "uiButton.invoke": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                };
                _input_out: {
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, void>;
        } & {
            "endpoint.list": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, {
                id: string;
                label: any;
                url: any;
                localUrl: any;
                browserSupport: boolean;
                exposeStatus: EndpointExposeStatus;
            }[]>;
            "endpoint.get": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                };
                _input_out: {
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, {
                id: string;
                label: any;
                url: any;
                localUrl: any;
                browserSupport: boolean;
                exposeStatus: EndpointExposeStatus;
            }>;
            "endpoint.expose": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                };
                _input_out: {
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, void>;
            "endpoint.hide": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                };
                _input_out: {
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, void>;
        } & {
            "config.getThemeMode": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, {
                mode: unknown;
            }>;
            "config.setThemeMode": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    mode: string;
                };
                _input_out: {
                    mode: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, void>;
        } & {
            "website.url": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                };
                _input_out: {
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, any>;
        } & {
            "redis.info": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                };
                _input_out: {
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, {
                url: string;
            }>;
            "redis.exec": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                    command: string;
                };
                _input_out: {
                    resourcePath: string;
                    command: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, string>;
        } & {
            "updater.enabled": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, {
                enabled: boolean;
            }>;
            "updater.currentStatus": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, {
                status: UpdaterStatus | undefined;
            }>;
            "updater.checkForUpdates": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, void>;
            "updater.quitAndInstall": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, void>;
        } & {
            "table.info": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                };
                _input_out: {
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, {
                name: string;
                primaryKey: string;
                columns: Column[];
                rows: _winglang_sdk_lib_std_json_js.Json[];
            }>;
            "table.get": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                    id: string;
                };
                _input_out: {
                    resourcePath: string;
                    id: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, _winglang_sdk_lib_std_json_js.Json>;
            "table.insert": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    data: Record<string, any>;
                    resourcePath: string;
                };
                _input_out: {
                    data: Record<string, any>;
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, void>;
            "table.update": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    data: Record<string, any>;
                    resourcePath: string;
                };
                _input_out: {
                    data: Record<string, any>;
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, void>;
            "table.delete": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    data: Record<string, any>;
                    resourcePath: string;
                };
                _input_out: {
                    data: Record<string, any>;
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, void>;
        } & {
            "api.schema": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                };
                _input_out: {
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, {
                url: any;
                openApiSpec: unknown;
            }>;
            "api.fetch": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    url: string;
                    route: string;
                    method: string;
                    headers?: {
                        value: string;
                        key: string;
                    }[] | undefined;
                    variables?: {
                        value: string;
                        key: string;
                    }[] | undefined;
                    body?: string | undefined;
                };
                _input_out: {
                    url: string;
                    route: string;
                    method: string;
                    headers?: {
                        value: string;
                        key: string;
                    }[] | undefined;
                    variables?: {
                        value: string;
                        key: string;
                    }[] | undefined;
                    body?: string | undefined;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, {
                url: string;
                status: number;
                statusText: string;
                headers: {
                    key: string;
                    value: string;
                }[];
                textResponse: string;
                duration: number;
            }>;
        } & {
            "topic.publish": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    message: string;
                    resourcePath: string;
                };
                _input_out: {
                    message: string;
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, void>;
        } & {
            "test.list": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, {
                id: string;
                label: string;
                status: TestStatus;
                time: number;
                datetime: number | undefined;
            }[]>;
            "test.run": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                };
                _input_out: {
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, InternalTestResult>;
            "test.runAll": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, InternalTestResult[]>;
        } & {
            "counter.inc": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                    amount: number;
                };
                _input_out: {
                    resourcePath: string;
                    amount: number;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, number>;
            "counter.dec": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                    amount: number;
                };
                _input_out: {
                    resourcePath: string;
                    amount: number;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, number>;
            "counter.peek": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                };
                _input_out: {
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, number>;
            "counter.set": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    value: number;
                    resourcePath: string;
                };
                _input_out: {
                    value: number;
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, void>;
        } & {
            "function.invoke": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    message: string;
                    resourcePath: string;
                };
                _input_out: {
                    message: string;
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, {
                success: true;
                response: string | undefined;
            } | {
                success: false;
                error: unknown;
            }>;
        } & {
            "queue.purge": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                };
                _input_out: {
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, void>;
            "queue.approxSize": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                };
                _input_out: {
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, number>;
            "queue.push": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    message: string;
                    resourcePath: string;
                };
                _input_out: {
                    message: string;
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, void>;
        } & {
            "bucket.put": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                    fileName: string;
                    fileContent: string;
                };
                _input_out: {
                    resourcePath: string;
                    fileName: string;
                    fileContent: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, void>;
            "bucket.get": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                    fileName: string;
                };
                _input_out: {
                    resourcePath: string;
                    fileName: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, string>;
            "bucket.download": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                    fileName: string;
                };
                _input_out: {
                    resourcePath: string;
                    fileName: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, string>;
            "bucket.list": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                };
                _input_out: {
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, string[]>;
            "bucket.delete": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                    fileNames: string[];
                };
                _input_out: {
                    resourcePath: string;
                    fileNames: string[];
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, void>;
        } & {
            "app.details": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, {
                wingVersion: string | undefined;
            }>;
            "app.wingfile": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, string | undefined>;
            "app.layoutConfig": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, {
                config: LayoutConfig | undefined;
            }>;
            "app.logs": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    filters: {
                        level: {
                            error: boolean;
                            verbose: boolean;
                            info: boolean;
                            warn: boolean;
                        };
                        timestamp: number;
                        text: string;
                    };
                };
                _input_out: {
                    filters: {
                        level: {
                            error: boolean;
                            verbose: boolean;
                            info: boolean;
                            warn: boolean;
                        };
                        timestamp: number;
                        text: string;
                    };
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, LogEntry[]>;
            "app.error": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, string | undefined>;
            "app.explorerTree": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    showTests?: boolean | undefined;
                    includeHiddens?: boolean | undefined;
                } | undefined;
                _input_out: {
                    showTests?: boolean | undefined;
                    includeHiddens?: boolean | undefined;
                } | undefined;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, ExplorerItem>;
            "app.nodeIds": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    showTests?: boolean | undefined;
                } | undefined;
                _input_out: {
                    showTests?: boolean | undefined;
                } | undefined;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, string[]>;
            "app.nodeBreadcrumbs": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    path?: string | undefined;
                };
                _input_out: {
                    path?: string | undefined;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, {
                id: string;
                path: string;
                type: string | undefined;
            }[]>;
            "app.node": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    path?: string | undefined;
                };
                _input_out: {
                    path?: string | undefined;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, {
                id: string;
                path: string;
                type: string;
                attributes: Record<string, any> | undefined;
                props: {
                    [key: string]: any;
                } | undefined;
            }>;
            "app.nodeMetadata": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    path?: string | undefined;
                    showTests?: boolean | undefined;
                };
                _input_out: {
                    path?: string | undefined;
                    showTests?: boolean | undefined;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, {
                node: {
                    id: string;
                    path: string;
                    display: NodeDisplay | undefined;
                    type: string;
                    props: {
                        [key: string]: any;
                    } | undefined;
                    attributes: Record<string, any> | undefined;
                };
                inbound: {
                    id: string;
                    path: string;
                    type: string;
                    display: NodeDisplay | undefined;
                }[];
                outbound: {
                    id: string;
                    path: string;
                    type: string;
                    display: NodeDisplay | undefined;
                }[];
            }>;
            "app.edgeMetadata": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    edgeId: string;
                };
                _input_out: {
                    edgeId: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, {
                source: {
                    id: string;
                    path: string;
                    type: string;
                    display: NodeDisplay | undefined;
                };
                target: {
                    id: string;
                    path: string;
                    type: string;
                    display: NodeDisplay | undefined;
                };
                inflights: {
                    name: string;
                }[];
            }>;
            "app.invalidateQuery": _trpc_server.BuildProcedure<"subscription", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, _trpc_server_observable_index_js.Observable<string | undefined, unknown>>;
            "app.traces": _trpc_server.BuildProcedure<"subscription", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, _trpc_server_observable_index_js.Observable<_winglang_sdk_lib_std_test_runner_js.Trace, unknown>>;
            "app.map": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, {
                tree: _winglang_sdk_lib_core_tree_js.ConstructTreeNode;
                connections: _winglang_sdk_lib_simulator_simulator_js.ConnectionData[];
            }>;
            "app.state": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, State>;
            "app.openExternal": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    url: string;
                };
                _input_out: {
                    url: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, void>;
            "app.openFileInEditor": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    path: string;
                    line?: number | undefined;
                    column?: number | undefined;
                };
                _input_out: {
                    path: string;
                    line?: number | undefined;
                    column?: number | undefined;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, void>;
            "app.getResourceUI": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                };
                _input_out: {
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, {
                kind: string;
                label: string;
                handler: string | Record<string, string>;
            }[]>;
            "app.analytics": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, {
                anonymousId: string | undefined;
                requireSignIn: boolean;
            }>;
            "app.analytics.signInClicked": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, {}>;
            "app.analytics.notifySignedIn": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, void>;
            "app.openFileInEditorSubscription": _trpc_server.BuildProcedure<"subscription", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, _trpc_server_observable_index_js.Observable<FileLink, unknown>>;
        };
        record: {
            "fileBrowser.get": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                    fileName: string;
                };
                _input_out: {
                    resourcePath: string;
                    fileName: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, string | undefined>;
            "fileBrowser.list": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                };
                _input_out: {
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, string[]>;
            "fileBrowser.put": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                    fileName: string;
                    fileContent: string;
                };
                _input_out: {
                    resourcePath: string;
                    fileName: string;
                    fileContent: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, string | undefined>;
            "fileBrowser.delete": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                    fileName: string;
                };
                _input_out: {
                    resourcePath: string;
                    fileName: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, string | undefined>;
            "fileBrowser.download": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                    fileName: string;
                };
                _input_out: {
                    resourcePath: string;
                    fileName: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, string | undefined>;
        } & {
            "httpClient.getUrl": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                };
                _input_out: {
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, {
                url: string | undefined;
            }>;
            "httpClient.getOpenApiSpec": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                };
                _input_out: {
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, {
                openApiSpec: any;
            }>;
        } & {
            "uiField.get": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                };
                _input_out: {
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, {
                value: string | undefined;
            }>;
        } & {
            "uiButton.invoke": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                };
                _input_out: {
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, void>;
        } & {
            "endpoint.list": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, {
                id: string;
                label: any;
                url: any;
                localUrl: any;
                browserSupport: boolean;
                exposeStatus: EndpointExposeStatus;
            }[]>;
            "endpoint.get": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                };
                _input_out: {
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, {
                id: string;
                label: any;
                url: any;
                localUrl: any;
                browserSupport: boolean;
                exposeStatus: EndpointExposeStatus;
            }>;
            "endpoint.expose": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                };
                _input_out: {
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, void>;
            "endpoint.hide": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                };
                _input_out: {
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, void>;
        } & {
            "config.getThemeMode": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, {
                mode: unknown;
            }>;
            "config.setThemeMode": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    mode: string;
                };
                _input_out: {
                    mode: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, void>;
        } & {
            "website.url": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                };
                _input_out: {
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, any>;
        } & {
            "redis.info": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                };
                _input_out: {
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, {
                url: string;
            }>;
            "redis.exec": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                    command: string;
                };
                _input_out: {
                    resourcePath: string;
                    command: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, string>;
        } & {
            "updater.enabled": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, {
                enabled: boolean;
            }>;
            "updater.currentStatus": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, {
                status: UpdaterStatus | undefined;
            }>;
            "updater.checkForUpdates": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, void>;
            "updater.quitAndInstall": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, void>;
        } & {
            "table.info": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                };
                _input_out: {
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, {
                name: string;
                primaryKey: string;
                columns: Column[];
                rows: _winglang_sdk_lib_std_json_js.Json[];
            }>;
            "table.get": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                    id: string;
                };
                _input_out: {
                    resourcePath: string;
                    id: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, _winglang_sdk_lib_std_json_js.Json>;
            "table.insert": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    data: Record<string, any>;
                    resourcePath: string;
                };
                _input_out: {
                    data: Record<string, any>;
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, void>;
            "table.update": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    data: Record<string, any>;
                    resourcePath: string;
                };
                _input_out: {
                    data: Record<string, any>;
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, void>;
            "table.delete": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    data: Record<string, any>;
                    resourcePath: string;
                };
                _input_out: {
                    data: Record<string, any>;
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, void>;
        } & {
            "api.schema": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                };
                _input_out: {
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, {
                url: any;
                openApiSpec: unknown;
            }>;
            "api.fetch": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    url: string;
                    route: string;
                    method: string;
                    headers?: {
                        value: string;
                        key: string;
                    }[] | undefined;
                    variables?: {
                        value: string;
                        key: string;
                    }[] | undefined;
                    body?: string | undefined;
                };
                _input_out: {
                    url: string;
                    route: string;
                    method: string;
                    headers?: {
                        value: string;
                        key: string;
                    }[] | undefined;
                    variables?: {
                        value: string;
                        key: string;
                    }[] | undefined;
                    body?: string | undefined;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, {
                url: string;
                status: number;
                statusText: string;
                headers: {
                    key: string;
                    value: string;
                }[];
                textResponse: string;
                duration: number;
            }>;
        } & {
            "topic.publish": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    message: string;
                    resourcePath: string;
                };
                _input_out: {
                    message: string;
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, void>;
        } & {
            "test.list": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, {
                id: string;
                label: string;
                status: TestStatus;
                time: number;
                datetime: number | undefined;
            }[]>;
            "test.run": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                };
                _input_out: {
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, InternalTestResult>;
            "test.runAll": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, InternalTestResult[]>;
        } & {
            "counter.inc": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                    amount: number;
                };
                _input_out: {
                    resourcePath: string;
                    amount: number;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, number>;
            "counter.dec": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                    amount: number;
                };
                _input_out: {
                    resourcePath: string;
                    amount: number;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, number>;
            "counter.peek": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                };
                _input_out: {
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, number>;
            "counter.set": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    value: number;
                    resourcePath: string;
                };
                _input_out: {
                    value: number;
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, void>;
        } & {
            "function.invoke": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    message: string;
                    resourcePath: string;
                };
                _input_out: {
                    message: string;
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, {
                success: true;
                response: string | undefined;
            } | {
                success: false;
                error: unknown;
            }>;
        } & {
            "queue.purge": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                };
                _input_out: {
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, void>;
            "queue.approxSize": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                };
                _input_out: {
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, number>;
            "queue.push": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    message: string;
                    resourcePath: string;
                };
                _input_out: {
                    message: string;
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, void>;
        } & {
            "bucket.put": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                    fileName: string;
                    fileContent: string;
                };
                _input_out: {
                    resourcePath: string;
                    fileName: string;
                    fileContent: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, void>;
            "bucket.get": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                    fileName: string;
                };
                _input_out: {
                    resourcePath: string;
                    fileName: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, string>;
            "bucket.download": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                    fileName: string;
                };
                _input_out: {
                    resourcePath: string;
                    fileName: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, string>;
            "bucket.list": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                };
                _input_out: {
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, string[]>;
            "bucket.delete": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                    fileNames: string[];
                };
                _input_out: {
                    resourcePath: string;
                    fileNames: string[];
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, void>;
        } & {
            "app.details": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, {
                wingVersion: string | undefined;
            }>;
            "app.wingfile": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, string | undefined>;
            "app.layoutConfig": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, {
                config: LayoutConfig | undefined;
            }>;
            "app.logs": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    filters: {
                        level: {
                            error: boolean;
                            verbose: boolean;
                            info: boolean;
                            warn: boolean;
                        };
                        timestamp: number;
                        text: string;
                    };
                };
                _input_out: {
                    filters: {
                        level: {
                            error: boolean;
                            verbose: boolean;
                            info: boolean;
                            warn: boolean;
                        };
                        timestamp: number;
                        text: string;
                    };
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, LogEntry[]>;
            "app.error": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, string | undefined>;
            "app.explorerTree": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    showTests?: boolean | undefined;
                    includeHiddens?: boolean | undefined;
                } | undefined;
                _input_out: {
                    showTests?: boolean | undefined;
                    includeHiddens?: boolean | undefined;
                } | undefined;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, ExplorerItem>;
            "app.nodeIds": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    showTests?: boolean | undefined;
                } | undefined;
                _input_out: {
                    showTests?: boolean | undefined;
                } | undefined;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, string[]>;
            "app.nodeBreadcrumbs": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    path?: string | undefined;
                };
                _input_out: {
                    path?: string | undefined;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, {
                id: string;
                path: string;
                type: string | undefined;
            }[]>;
            "app.node": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    path?: string | undefined;
                };
                _input_out: {
                    path?: string | undefined;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, {
                id: string;
                path: string;
                type: string;
                attributes: Record<string, any> | undefined;
                props: {
                    [key: string]: any;
                } | undefined;
            }>;
            "app.nodeMetadata": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    path?: string | undefined;
                    showTests?: boolean | undefined;
                };
                _input_out: {
                    path?: string | undefined;
                    showTests?: boolean | undefined;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, {
                node: {
                    id: string;
                    path: string;
                    display: NodeDisplay | undefined;
                    type: string;
                    props: {
                        [key: string]: any;
                    } | undefined;
                    attributes: Record<string, any> | undefined;
                };
                inbound: {
                    id: string;
                    path: string;
                    type: string;
                    display: NodeDisplay | undefined;
                }[];
                outbound: {
                    id: string;
                    path: string;
                    type: string;
                    display: NodeDisplay | undefined;
                }[];
            }>;
            "app.edgeMetadata": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    edgeId: string;
                };
                _input_out: {
                    edgeId: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, {
                source: {
                    id: string;
                    path: string;
                    type: string;
                    display: NodeDisplay | undefined;
                };
                target: {
                    id: string;
                    path: string;
                    type: string;
                    display: NodeDisplay | undefined;
                };
                inflights: {
                    name: string;
                }[];
            }>;
            "app.invalidateQuery": _trpc_server.BuildProcedure<"subscription", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, _trpc_server_observable_index_js.Observable<string | undefined, unknown>>;
            "app.traces": _trpc_server.BuildProcedure<"subscription", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, _trpc_server_observable_index_js.Observable<_winglang_sdk_lib_std_test_runner_js.Trace, unknown>>;
            "app.map": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, {
                tree: _winglang_sdk_lib_core_tree_js.ConstructTreeNode;
                connections: _winglang_sdk_lib_simulator_simulator_js.ConnectionData[];
            }>;
            "app.state": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, State>;
            "app.openExternal": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    url: string;
                };
                _input_out: {
                    url: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, void>;
            "app.openFileInEditor": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    path: string;
                    line?: number | undefined;
                    column?: number | undefined;
                };
                _input_out: {
                    path: string;
                    line?: number | undefined;
                    column?: number | undefined;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, void>;
            "app.getResourceUI": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _meta: RouterMeta;
                _ctx_out: RouterContext;
                _input_in: {
                    resourcePath: string;
                };
                _input_out: {
                    resourcePath: string;
                };
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
            }, {
                kind: string;
                label: string;
                handler: string | Record<string, string>;
            }[]>;
            "app.analytics": _trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, {
                anonymousId: string | undefined;
                requireSignIn: boolean;
            }>;
            "app.analytics.signInClicked": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, {}>;
            "app.analytics.notifySignedIn": _trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, void>;
            "app.openFileInEditorSubscription": _trpc_server.BuildProcedure<"subscription", {
                _config: _trpc_server.RootConfig<{
                    ctx: RouterContext;
                    meta: RouterMeta;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: _trpc_server.DefaultDataTransformer;
                }>;
                _ctx_out: RouterContext;
                _input_in: typeof _trpc_server.unsetMarker;
                _input_out: typeof _trpc_server.unsetMarker;
                _output_in: typeof _trpc_server.unsetMarker;
                _output_out: typeof _trpc_server.unsetMarker;
                _meta: RouterMeta;
            }, _trpc_server_observable_index_js.Observable<FileLink, unknown>>;
        };
        queries: {};
        mutations: {};
        subscriptions: {};
    }> & {
        "fileBrowser.get": _trpc_server.BuildProcedure<"query", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                resourcePath: string;
                fileName: string;
            };
            _input_out: {
                resourcePath: string;
                fileName: string;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, string | undefined>;
        "fileBrowser.list": _trpc_server.BuildProcedure<"query", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                resourcePath: string;
            };
            _input_out: {
                resourcePath: string;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, string[]>;
        "fileBrowser.put": _trpc_server.BuildProcedure<"mutation", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                resourcePath: string;
                fileName: string;
                fileContent: string;
            };
            _input_out: {
                resourcePath: string;
                fileName: string;
                fileContent: string;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, string | undefined>;
        "fileBrowser.delete": _trpc_server.BuildProcedure<"mutation", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                resourcePath: string;
                fileName: string;
            };
            _input_out: {
                resourcePath: string;
                fileName: string;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, string | undefined>;
        "fileBrowser.download": _trpc_server.BuildProcedure<"mutation", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                resourcePath: string;
                fileName: string;
            };
            _input_out: {
                resourcePath: string;
                fileName: string;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, string | undefined>;
    } & {
        "httpClient.getUrl": _trpc_server.BuildProcedure<"query", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                resourcePath: string;
            };
            _input_out: {
                resourcePath: string;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, {
            url: string | undefined;
        }>;
        "httpClient.getOpenApiSpec": _trpc_server.BuildProcedure<"query", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                resourcePath: string;
            };
            _input_out: {
                resourcePath: string;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, {
            openApiSpec: any;
        }>;
    } & {
        "uiField.get": _trpc_server.BuildProcedure<"query", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                resourcePath: string;
            };
            _input_out: {
                resourcePath: string;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, {
            value: string | undefined;
        }>;
    } & {
        "uiButton.invoke": _trpc_server.BuildProcedure<"mutation", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                resourcePath: string;
            };
            _input_out: {
                resourcePath: string;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, void>;
    } & {
        "endpoint.list": _trpc_server.BuildProcedure<"query", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _ctx_out: RouterContext;
            _input_in: typeof _trpc_server.unsetMarker;
            _input_out: typeof _trpc_server.unsetMarker;
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
            _meta: RouterMeta;
        }, {
            id: string;
            label: any;
            url: any;
            localUrl: any;
            browserSupport: boolean;
            exposeStatus: EndpointExposeStatus;
        }[]>;
        "endpoint.get": _trpc_server.BuildProcedure<"query", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                resourcePath: string;
            };
            _input_out: {
                resourcePath: string;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, {
            id: string;
            label: any;
            url: any;
            localUrl: any;
            browserSupport: boolean;
            exposeStatus: EndpointExposeStatus;
        }>;
        "endpoint.expose": _trpc_server.BuildProcedure<"mutation", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                resourcePath: string;
            };
            _input_out: {
                resourcePath: string;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, void>;
        "endpoint.hide": _trpc_server.BuildProcedure<"mutation", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                resourcePath: string;
            };
            _input_out: {
                resourcePath: string;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, void>;
    } & {
        "config.getThemeMode": _trpc_server.BuildProcedure<"query", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _ctx_out: RouterContext;
            _input_in: typeof _trpc_server.unsetMarker;
            _input_out: typeof _trpc_server.unsetMarker;
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
            _meta: RouterMeta;
        }, {
            mode: unknown;
        }>;
        "config.setThemeMode": _trpc_server.BuildProcedure<"mutation", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                mode: string;
            };
            _input_out: {
                mode: string;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, void>;
    } & {
        "website.url": _trpc_server.BuildProcedure<"query", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                resourcePath: string;
            };
            _input_out: {
                resourcePath: string;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, any>;
    } & {
        "redis.info": _trpc_server.BuildProcedure<"query", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                resourcePath: string;
            };
            _input_out: {
                resourcePath: string;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, {
            url: string;
        }>;
        "redis.exec": _trpc_server.BuildProcedure<"mutation", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                resourcePath: string;
                command: string;
            };
            _input_out: {
                resourcePath: string;
                command: string;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, string>;
    } & {
        "updater.enabled": _trpc_server.BuildProcedure<"query", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _ctx_out: RouterContext;
            _input_in: typeof _trpc_server.unsetMarker;
            _input_out: typeof _trpc_server.unsetMarker;
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
            _meta: RouterMeta;
        }, {
            enabled: boolean;
        }>;
        "updater.currentStatus": _trpc_server.BuildProcedure<"query", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _ctx_out: RouterContext;
            _input_in: typeof _trpc_server.unsetMarker;
            _input_out: typeof _trpc_server.unsetMarker;
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
            _meta: RouterMeta;
        }, {
            status: UpdaterStatus | undefined;
        }>;
        "updater.checkForUpdates": _trpc_server.BuildProcedure<"mutation", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _ctx_out: RouterContext;
            _input_in: typeof _trpc_server.unsetMarker;
            _input_out: typeof _trpc_server.unsetMarker;
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
            _meta: RouterMeta;
        }, void>;
        "updater.quitAndInstall": _trpc_server.BuildProcedure<"mutation", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _ctx_out: RouterContext;
            _input_in: typeof _trpc_server.unsetMarker;
            _input_out: typeof _trpc_server.unsetMarker;
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
            _meta: RouterMeta;
        }, void>;
    } & {
        "table.info": _trpc_server.BuildProcedure<"query", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                resourcePath: string;
            };
            _input_out: {
                resourcePath: string;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, {
            name: string;
            primaryKey: string;
            columns: Column[];
            rows: _winglang_sdk_lib_std_json_js.Json[];
        }>;
        "table.get": _trpc_server.BuildProcedure<"query", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                resourcePath: string;
                id: string;
            };
            _input_out: {
                resourcePath: string;
                id: string;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, _winglang_sdk_lib_std_json_js.Json>;
        "table.insert": _trpc_server.BuildProcedure<"mutation", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                data: Record<string, any>;
                resourcePath: string;
            };
            _input_out: {
                data: Record<string, any>;
                resourcePath: string;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, void>;
        "table.update": _trpc_server.BuildProcedure<"mutation", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                data: Record<string, any>;
                resourcePath: string;
            };
            _input_out: {
                data: Record<string, any>;
                resourcePath: string;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, void>;
        "table.delete": _trpc_server.BuildProcedure<"mutation", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                data: Record<string, any>;
                resourcePath: string;
            };
            _input_out: {
                data: Record<string, any>;
                resourcePath: string;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, void>;
    } & {
        "api.schema": _trpc_server.BuildProcedure<"query", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                resourcePath: string;
            };
            _input_out: {
                resourcePath: string;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, {
            url: any;
            openApiSpec: unknown;
        }>;
        "api.fetch": _trpc_server.BuildProcedure<"mutation", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                url: string;
                route: string;
                method: string;
                headers?: {
                    value: string;
                    key: string;
                }[] | undefined;
                variables?: {
                    value: string;
                    key: string;
                }[] | undefined;
                body?: string | undefined;
            };
            _input_out: {
                url: string;
                route: string;
                method: string;
                headers?: {
                    value: string;
                    key: string;
                }[] | undefined;
                variables?: {
                    value: string;
                    key: string;
                }[] | undefined;
                body?: string | undefined;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, {
            url: string;
            status: number;
            statusText: string;
            headers: {
                key: string;
                value: string;
            }[];
            textResponse: string;
            duration: number;
        }>;
    } & {
        "topic.publish": _trpc_server.BuildProcedure<"mutation", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                message: string;
                resourcePath: string;
            };
            _input_out: {
                message: string;
                resourcePath: string;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, void>;
    } & {
        "test.list": _trpc_server.BuildProcedure<"query", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _ctx_out: RouterContext;
            _input_in: typeof _trpc_server.unsetMarker;
            _input_out: typeof _trpc_server.unsetMarker;
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
            _meta: RouterMeta;
        }, {
            id: string;
            label: string;
            status: TestStatus;
            time: number;
            datetime: number | undefined;
        }[]>;
        "test.run": _trpc_server.BuildProcedure<"mutation", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                resourcePath: string;
            };
            _input_out: {
                resourcePath: string;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, InternalTestResult>;
        "test.runAll": _trpc_server.BuildProcedure<"mutation", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _ctx_out: RouterContext;
            _input_in: typeof _trpc_server.unsetMarker;
            _input_out: typeof _trpc_server.unsetMarker;
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
            _meta: RouterMeta;
        }, InternalTestResult[]>;
    } & {
        "counter.inc": _trpc_server.BuildProcedure<"mutation", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                resourcePath: string;
                amount: number;
            };
            _input_out: {
                resourcePath: string;
                amount: number;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, number>;
        "counter.dec": _trpc_server.BuildProcedure<"mutation", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                resourcePath: string;
                amount: number;
            };
            _input_out: {
                resourcePath: string;
                amount: number;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, number>;
        "counter.peek": _trpc_server.BuildProcedure<"query", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                resourcePath: string;
            };
            _input_out: {
                resourcePath: string;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, number>;
        "counter.set": _trpc_server.BuildProcedure<"mutation", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                value: number;
                resourcePath: string;
            };
            _input_out: {
                value: number;
                resourcePath: string;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, void>;
    } & {
        "function.invoke": _trpc_server.BuildProcedure<"mutation", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                message: string;
                resourcePath: string;
            };
            _input_out: {
                message: string;
                resourcePath: string;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, {
            success: true;
            response: string | undefined;
        } | {
            success: false;
            error: unknown;
        }>;
    } & {
        "queue.purge": _trpc_server.BuildProcedure<"mutation", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                resourcePath: string;
            };
            _input_out: {
                resourcePath: string;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, void>;
        "queue.approxSize": _trpc_server.BuildProcedure<"query", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                resourcePath: string;
            };
            _input_out: {
                resourcePath: string;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, number>;
        "queue.push": _trpc_server.BuildProcedure<"mutation", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                message: string;
                resourcePath: string;
            };
            _input_out: {
                message: string;
                resourcePath: string;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, void>;
    } & {
        "bucket.put": _trpc_server.BuildProcedure<"mutation", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                resourcePath: string;
                fileName: string;
                fileContent: string;
            };
            _input_out: {
                resourcePath: string;
                fileName: string;
                fileContent: string;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, void>;
        "bucket.get": _trpc_server.BuildProcedure<"query", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                resourcePath: string;
                fileName: string;
            };
            _input_out: {
                resourcePath: string;
                fileName: string;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, string>;
        "bucket.download": _trpc_server.BuildProcedure<"mutation", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                resourcePath: string;
                fileName: string;
            };
            _input_out: {
                resourcePath: string;
                fileName: string;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, string>;
        "bucket.list": _trpc_server.BuildProcedure<"query", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                resourcePath: string;
            };
            _input_out: {
                resourcePath: string;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, string[]>;
        "bucket.delete": _trpc_server.BuildProcedure<"mutation", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                resourcePath: string;
                fileNames: string[];
            };
            _input_out: {
                resourcePath: string;
                fileNames: string[];
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, void>;
    } & {
        "app.details": _trpc_server.BuildProcedure<"query", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _ctx_out: RouterContext;
            _input_in: typeof _trpc_server.unsetMarker;
            _input_out: typeof _trpc_server.unsetMarker;
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
            _meta: RouterMeta;
        }, {
            wingVersion: string | undefined;
        }>;
        "app.wingfile": _trpc_server.BuildProcedure<"query", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _ctx_out: RouterContext;
            _input_in: typeof _trpc_server.unsetMarker;
            _input_out: typeof _trpc_server.unsetMarker;
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
            _meta: RouterMeta;
        }, string | undefined>;
        "app.layoutConfig": _trpc_server.BuildProcedure<"query", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _ctx_out: RouterContext;
            _input_in: typeof _trpc_server.unsetMarker;
            _input_out: typeof _trpc_server.unsetMarker;
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
            _meta: RouterMeta;
        }, {
            config: LayoutConfig | undefined;
        }>;
        "app.logs": _trpc_server.BuildProcedure<"query", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                filters: {
                    level: {
                        error: boolean;
                        verbose: boolean;
                        info: boolean;
                        warn: boolean;
                    };
                    timestamp: number;
                    text: string;
                };
            };
            _input_out: {
                filters: {
                    level: {
                        error: boolean;
                        verbose: boolean;
                        info: boolean;
                        warn: boolean;
                    };
                    timestamp: number;
                    text: string;
                };
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, LogEntry[]>;
        "app.error": _trpc_server.BuildProcedure<"query", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _ctx_out: RouterContext;
            _input_in: typeof _trpc_server.unsetMarker;
            _input_out: typeof _trpc_server.unsetMarker;
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
            _meta: RouterMeta;
        }, string | undefined>;
        "app.explorerTree": _trpc_server.BuildProcedure<"query", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                showTests?: boolean | undefined;
                includeHiddens?: boolean | undefined;
            } | undefined;
            _input_out: {
                showTests?: boolean | undefined;
                includeHiddens?: boolean | undefined;
            } | undefined;
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, ExplorerItem>;
        "app.nodeIds": _trpc_server.BuildProcedure<"query", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                showTests?: boolean | undefined;
            } | undefined;
            _input_out: {
                showTests?: boolean | undefined;
            } | undefined;
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, string[]>;
        "app.nodeBreadcrumbs": _trpc_server.BuildProcedure<"query", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                path?: string | undefined;
            };
            _input_out: {
                path?: string | undefined;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, {
            id: string;
            path: string;
            type: string | undefined;
        }[]>;
        "app.node": _trpc_server.BuildProcedure<"query", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                path?: string | undefined;
            };
            _input_out: {
                path?: string | undefined;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, {
            id: string;
            path: string;
            type: string;
            attributes: Record<string, any> | undefined;
            props: {
                [key: string]: any;
            } | undefined;
        }>;
        "app.nodeMetadata": _trpc_server.BuildProcedure<"query", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                path?: string | undefined;
                showTests?: boolean | undefined;
            };
            _input_out: {
                path?: string | undefined;
                showTests?: boolean | undefined;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, {
            node: {
                id: string;
                path: string;
                display: NodeDisplay | undefined;
                type: string;
                props: {
                    [key: string]: any;
                } | undefined;
                attributes: Record<string, any> | undefined;
            };
            inbound: {
                id: string;
                path: string;
                type: string;
                display: NodeDisplay | undefined;
            }[];
            outbound: {
                id: string;
                path: string;
                type: string;
                display: NodeDisplay | undefined;
            }[];
        }>;
        "app.edgeMetadata": _trpc_server.BuildProcedure<"query", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                edgeId: string;
            };
            _input_out: {
                edgeId: string;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, {
            source: {
                id: string;
                path: string;
                type: string;
                display: NodeDisplay | undefined;
            };
            target: {
                id: string;
                path: string;
                type: string;
                display: NodeDisplay | undefined;
            };
            inflights: {
                name: string;
            }[];
        }>;
        "app.invalidateQuery": _trpc_server.BuildProcedure<"subscription", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _ctx_out: RouterContext;
            _input_in: typeof _trpc_server.unsetMarker;
            _input_out: typeof _trpc_server.unsetMarker;
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
            _meta: RouterMeta;
        }, _trpc_server_observable_index_js.Observable<string | undefined, unknown>>;
        "app.traces": _trpc_server.BuildProcedure<"subscription", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _ctx_out: RouterContext;
            _input_in: typeof _trpc_server.unsetMarker;
            _input_out: typeof _trpc_server.unsetMarker;
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
            _meta: RouterMeta;
        }, _trpc_server_observable_index_js.Observable<_winglang_sdk_lib_std_test_runner_js.Trace, unknown>>;
        "app.map": _trpc_server.BuildProcedure<"query", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _ctx_out: RouterContext;
            _input_in: typeof _trpc_server.unsetMarker;
            _input_out: typeof _trpc_server.unsetMarker;
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
            _meta: RouterMeta;
        }, {
            tree: _winglang_sdk_lib_core_tree_js.ConstructTreeNode;
            connections: _winglang_sdk_lib_simulator_simulator_js.ConnectionData[];
        }>;
        "app.state": _trpc_server.BuildProcedure<"query", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _ctx_out: RouterContext;
            _input_in: typeof _trpc_server.unsetMarker;
            _input_out: typeof _trpc_server.unsetMarker;
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
            _meta: RouterMeta;
        }, State>;
        "app.openExternal": _trpc_server.BuildProcedure<"mutation", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                url: string;
            };
            _input_out: {
                url: string;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, void>;
        "app.openFileInEditor": _trpc_server.BuildProcedure<"mutation", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                path: string;
                line?: number | undefined;
                column?: number | undefined;
            };
            _input_out: {
                path: string;
                line?: number | undefined;
                column?: number | undefined;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, void>;
        "app.getResourceUI": _trpc_server.BuildProcedure<"query", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _meta: RouterMeta;
            _ctx_out: RouterContext;
            _input_in: {
                resourcePath: string;
            };
            _input_out: {
                resourcePath: string;
            };
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
        }, {
            kind: string;
            label: string;
            handler: string | Record<string, string>;
        }[]>;
        "app.analytics": _trpc_server.BuildProcedure<"query", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _ctx_out: RouterContext;
            _input_in: typeof _trpc_server.unsetMarker;
            _input_out: typeof _trpc_server.unsetMarker;
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
            _meta: RouterMeta;
        }, {
            anonymousId: string | undefined;
            requireSignIn: boolean;
        }>;
        "app.analytics.signInClicked": _trpc_server.BuildProcedure<"mutation", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _ctx_out: RouterContext;
            _input_in: typeof _trpc_server.unsetMarker;
            _input_out: typeof _trpc_server.unsetMarker;
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
            _meta: RouterMeta;
        }, {}>;
        "app.analytics.notifySignedIn": _trpc_server.BuildProcedure<"mutation", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _ctx_out: RouterContext;
            _input_in: typeof _trpc_server.unsetMarker;
            _input_out: typeof _trpc_server.unsetMarker;
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
            _meta: RouterMeta;
        }, void>;
        "app.openFileInEditorSubscription": _trpc_server.BuildProcedure<"subscription", {
            _config: _trpc_server.RootConfig<{
                ctx: RouterContext;
                meta: RouterMeta;
                errorShape: _trpc_server.DefaultErrorShape;
                transformer: _trpc_server.DefaultDataTransformer;
            }>;
            _ctx_out: RouterContext;
            _input_in: typeof _trpc_server.unsetMarker;
            _input_out: typeof _trpc_server.unsetMarker;
            _output_in: typeof _trpc_server.unsetMarker;
            _output_out: typeof _trpc_server.unsetMarker;
            _meta: RouterMeta;
        }, _trpc_server_observable_index_js.Observable<FileLink, unknown>>;
    };
};
type Router = ReturnType<typeof mergeAllRouters>["router"];

declare const isTermsAccepted: () => boolean;

type RouteNames = keyof inferRouterInputs<Router> | undefined;

interface CreateConsoleServerOptions {
    wingfile: string;
    log: LogInterface;
    updater?: Updater;
    config: Config;
    requestedPort?: number;
    hostUtils?: HostUtils;
    onTrace?: (trace: Trace) => void;
    expressApp?: Express;
    onExpressCreated?: (app: Express) => void;
    requireAcceptTerms?: boolean;
    layoutConfig?: LayoutConfig;
    platform?: string[];
    stateDir?: string;
    analyticsAnonymousId?: string;
    analytics?: Analytics;
    requireSignIn?: () => Promise<boolean>;
    notifySignedIn?: () => Promise<void>;
    watchGlobs?: string[];
}
declare const createConsoleServer: ({ wingfile, log, updater, config, requestedPort, hostUtils, onTrace, expressApp, onExpressCreated, requireAcceptTerms, layoutConfig, platform, stateDir, analyticsAnonymousId, analytics, requireSignIn, notifySignedIn, watchGlobs, }: CreateConsoleServerOptions) => Promise<{
    port: number;
    close: (callback?: () => void) => Promise<void>;
}>;

export { type Column, type Config, type CreateConsoleServerOptions, type ExplorerItem, type FileLink, type HostUtils, type InternalTestResult, type LayoutComponent, type LayoutComponentType, type LayoutConfig, type LogEntry, type LogInterface, type LogLevel, type MapEdge, type MapNode, type NodeDisplay, type RouteNames, type Router, type RouterContext, type RouterMeta, type State, type TestItem, type TestStatus, type TestsStateManager, type Updater, type UpdaterStatus, createConsoleServer, isTermsAccepted };
